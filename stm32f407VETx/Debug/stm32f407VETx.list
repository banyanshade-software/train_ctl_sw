
stm32f407VETx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018d6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000028a8  08018efc  08018efc  00028efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b7a4  0801b7a4  000305dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801b7a4  0801b7a4  0002b7a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b7ac  0801b7ac  000305dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b7ac  0801b7ac  0002b7ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b7b0  0801b7b0  0002b7b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005dc  20000000  0801b7b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008918  200005e0  0801bd90  000305e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20008ef8  0801bd90  00038ef8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000305dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004c025  00000000  00000000  0003060c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009452  00000000  00000000  0007c631  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002a50  00000000  00000000  00085a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002870  00000000  00000000  000884d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00030669  00000000  00000000  0008ad48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00032d21  00000000  00000000  000bb3b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ea309  00000000  00000000  000ee0d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d83db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aef8  00000000  00000000  001d8458  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005e0 	.word	0x200005e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018ee4 	.word	0x08018ee4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005e4 	.word	0x200005e4
 80001cc:	08018ee4 	.word	0x08018ee4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000204:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000208:	f000 b972 	b.w	80004f0 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9e08      	ldr	r6, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	4688      	mov	r8, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	d14b      	bne.n	80002ca <__udivmoddi4+0xa6>
 8000232:	428a      	cmp	r2, r1
 8000234:	4615      	mov	r5, r2
 8000236:	d967      	bls.n	8000308 <__udivmoddi4+0xe4>
 8000238:	fab2 f282 	clz	r2, r2
 800023c:	b14a      	cbz	r2, 8000252 <__udivmoddi4+0x2e>
 800023e:	f1c2 0720 	rsb	r7, r2, #32
 8000242:	fa01 f302 	lsl.w	r3, r1, r2
 8000246:	fa20 f707 	lsr.w	r7, r0, r7
 800024a:	4095      	lsls	r5, r2
 800024c:	ea47 0803 	orr.w	r8, r7, r3
 8000250:	4094      	lsls	r4, r2
 8000252:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000256:	0c23      	lsrs	r3, r4, #16
 8000258:	fbb8 f7fe 	udiv	r7, r8, lr
 800025c:	fa1f fc85 	uxth.w	ip, r5
 8000260:	fb0e 8817 	mls	r8, lr, r7, r8
 8000264:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000268:	fb07 f10c 	mul.w	r1, r7, ip
 800026c:	4299      	cmp	r1, r3
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x60>
 8000270:	18eb      	adds	r3, r5, r3
 8000272:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000276:	f080 811b 	bcs.w	80004b0 <__udivmoddi4+0x28c>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 8118 	bls.w	80004b0 <__udivmoddi4+0x28c>
 8000280:	3f02      	subs	r7, #2
 8000282:	442b      	add	r3, r5
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0fe 	udiv	r0, r3, lr
 800028c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 fc0c 	mul.w	ip, r0, ip
 8000298:	45a4      	cmp	ip, r4
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x8c>
 800029c:	192c      	adds	r4, r5, r4
 800029e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x290>
 80002a6:	45a4      	cmp	ip, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x290>
 80002ac:	3802      	subs	r0, #2
 80002ae:	442c      	add	r4, r5
 80002b0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b4:	eba4 040c 	sub.w	r4, r4, ip
 80002b8:	2700      	movs	r7, #0
 80002ba:	b11e      	cbz	r6, 80002c4 <__udivmoddi4+0xa0>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c6 4300 	strd	r4, r3, [r6]
 80002c4:	4639      	mov	r1, r7
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xbe>
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	f000 80eb 	beq.w	80004aa <__udivmoddi4+0x286>
 80002d4:	2700      	movs	r7, #0
 80002d6:	e9c6 0100 	strd	r0, r1, [r6]
 80002da:	4638      	mov	r0, r7
 80002dc:	4639      	mov	r1, r7
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f783 	clz	r7, r3
 80002e6:	2f00      	cmp	r7, #0
 80002e8:	d147      	bne.n	800037a <__udivmoddi4+0x156>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd0>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80fa 	bhi.w	80004e8 <__udivmoddi4+0x2c4>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4698      	mov	r8, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa0>
 8000302:	e9c6 4800 	strd	r4, r8, [r6]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa0>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xe8>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 808f 	bne.w	8000434 <__udivmoddi4+0x210>
 8000316:	1b49      	subs	r1, r1, r5
 8000318:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800031c:	fa1f f885 	uxth.w	r8, r5
 8000320:	2701      	movs	r7, #1
 8000322:	fbb1 fcfe 	udiv	ip, r1, lr
 8000326:	0c23      	lsrs	r3, r4, #16
 8000328:	fb0e 111c 	mls	r1, lr, ip, r1
 800032c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000330:	fb08 f10c 	mul.w	r1, r8, ip
 8000334:	4299      	cmp	r1, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x124>
 8000338:	18eb      	adds	r3, r5, r3
 800033a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x122>
 8000340:	4299      	cmp	r1, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2bc>
 8000346:	4684      	mov	ip, r0
 8000348:	1a59      	subs	r1, r3, r1
 800034a:	b2a3      	uxth	r3, r4
 800034c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000350:	fb0e 1410 	mls	r4, lr, r0, r1
 8000354:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000358:	fb08 f800 	mul.w	r8, r8, r0
 800035c:	45a0      	cmp	r8, r4
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x14c>
 8000360:	192c      	adds	r4, r5, r4
 8000362:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x14a>
 8000368:	45a0      	cmp	r8, r4
 800036a:	f200 80b6 	bhi.w	80004da <__udivmoddi4+0x2b6>
 800036e:	4618      	mov	r0, r3
 8000370:	eba4 0408 	sub.w	r4, r4, r8
 8000374:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000378:	e79f      	b.n	80002ba <__udivmoddi4+0x96>
 800037a:	f1c7 0c20 	rsb	ip, r7, #32
 800037e:	40bb      	lsls	r3, r7
 8000380:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000384:	ea4e 0e03 	orr.w	lr, lr, r3
 8000388:	fa01 f407 	lsl.w	r4, r1, r7
 800038c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000390:	fa21 f30c 	lsr.w	r3, r1, ip
 8000394:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000398:	4325      	orrs	r5, r4
 800039a:	fbb3 f9f8 	udiv	r9, r3, r8
 800039e:	0c2c      	lsrs	r4, r5, #16
 80003a0:	fb08 3319 	mls	r3, r8, r9, r3
 80003a4:	fa1f fa8e 	uxth.w	sl, lr
 80003a8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003ac:	fb09 f40a 	mul.w	r4, r9, sl
 80003b0:	429c      	cmp	r4, r3
 80003b2:	fa02 f207 	lsl.w	r2, r2, r7
 80003b6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b0>
 80003bc:	eb1e 0303 	adds.w	r3, lr, r3
 80003c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003c4:	f080 8087 	bcs.w	80004d6 <__udivmoddi4+0x2b2>
 80003c8:	429c      	cmp	r4, r3
 80003ca:	f240 8084 	bls.w	80004d6 <__udivmoddi4+0x2b2>
 80003ce:	f1a9 0902 	sub.w	r9, r9, #2
 80003d2:	4473      	add	r3, lr
 80003d4:	1b1b      	subs	r3, r3, r4
 80003d6:	b2ad      	uxth	r5, r5
 80003d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003dc:	fb08 3310 	mls	r3, r8, r0, r3
 80003e0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e8:	45a2      	cmp	sl, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1da>
 80003ec:	eb1e 0404 	adds.w	r4, lr, r4
 80003f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f4:	d26b      	bcs.n	80004ce <__udivmoddi4+0x2aa>
 80003f6:	45a2      	cmp	sl, r4
 80003f8:	d969      	bls.n	80004ce <__udivmoddi4+0x2aa>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4474      	add	r4, lr
 80003fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000402:	fba0 8902 	umull	r8, r9, r0, r2
 8000406:	eba4 040a 	sub.w	r4, r4, sl
 800040a:	454c      	cmp	r4, r9
 800040c:	46c2      	mov	sl, r8
 800040e:	464b      	mov	r3, r9
 8000410:	d354      	bcc.n	80004bc <__udivmoddi4+0x298>
 8000412:	d051      	beq.n	80004b8 <__udivmoddi4+0x294>
 8000414:	2e00      	cmp	r6, #0
 8000416:	d069      	beq.n	80004ec <__udivmoddi4+0x2c8>
 8000418:	ebb1 050a 	subs.w	r5, r1, sl
 800041c:	eb64 0403 	sbc.w	r4, r4, r3
 8000420:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000424:	40fd      	lsrs	r5, r7
 8000426:	40fc      	lsrs	r4, r7
 8000428:	ea4c 0505 	orr.w	r5, ip, r5
 800042c:	e9c6 5400 	strd	r5, r4, [r6]
 8000430:	2700      	movs	r7, #0
 8000432:	e747      	b.n	80002c4 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f703 	lsr.w	r7, r0, r3
 800043c:	4095      	lsls	r5, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	fa21 f303 	lsr.w	r3, r1, r3
 8000446:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800044a:	4338      	orrs	r0, r7
 800044c:	0c01      	lsrs	r1, r0, #16
 800044e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000452:	fa1f f885 	uxth.w	r8, r5
 8000456:	fb0e 3317 	mls	r3, lr, r7, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb07 f308 	mul.w	r3, r7, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x256>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000470:	d22f      	bcs.n	80004d2 <__udivmoddi4+0x2ae>
 8000472:	428b      	cmp	r3, r1
 8000474:	d92d      	bls.n	80004d2 <__udivmoddi4+0x2ae>
 8000476:	3f02      	subs	r7, #2
 8000478:	4429      	add	r1, r5
 800047a:	1acb      	subs	r3, r1, r3
 800047c:	b281      	uxth	r1, r0
 800047e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000482:	fb0e 3310 	mls	r3, lr, r0, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb00 f308 	mul.w	r3, r0, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x27e>
 8000492:	1869      	adds	r1, r5, r1
 8000494:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000498:	d217      	bcs.n	80004ca <__udivmoddi4+0x2a6>
 800049a:	428b      	cmp	r3, r1
 800049c:	d915      	bls.n	80004ca <__udivmoddi4+0x2a6>
 800049e:	3802      	subs	r0, #2
 80004a0:	4429      	add	r1, r5
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a8:	e73b      	b.n	8000322 <__udivmoddi4+0xfe>
 80004aa:	4637      	mov	r7, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e709      	b.n	80002c4 <__udivmoddi4+0xa0>
 80004b0:	4607      	mov	r7, r0
 80004b2:	e6e7      	b.n	8000284 <__udivmoddi4+0x60>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x8c>
 80004b8:	4541      	cmp	r1, r8
 80004ba:	d2ab      	bcs.n	8000414 <__udivmoddi4+0x1f0>
 80004bc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c0:	eb69 020e 	sbc.w	r2, r9, lr
 80004c4:	3801      	subs	r0, #1
 80004c6:	4613      	mov	r3, r2
 80004c8:	e7a4      	b.n	8000414 <__udivmoddi4+0x1f0>
 80004ca:	4660      	mov	r0, ip
 80004cc:	e7e9      	b.n	80004a2 <__udivmoddi4+0x27e>
 80004ce:	4618      	mov	r0, r3
 80004d0:	e795      	b.n	80003fe <__udivmoddi4+0x1da>
 80004d2:	4667      	mov	r7, ip
 80004d4:	e7d1      	b.n	800047a <__udivmoddi4+0x256>
 80004d6:	4681      	mov	r9, r0
 80004d8:	e77c      	b.n	80003d4 <__udivmoddi4+0x1b0>
 80004da:	3802      	subs	r0, #2
 80004dc:	442c      	add	r4, r5
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0x14c>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	442b      	add	r3, r5
 80004e6:	e72f      	b.n	8000348 <__udivmoddi4+0x124>
 80004e8:	4638      	mov	r0, r7
 80004ea:	e708      	b.n	80002fe <__udivmoddi4+0xda>
 80004ec:	4637      	mov	r7, r6
 80004ee:	e6e9      	b.n	80002c4 <__udivmoddi4+0xa0>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0

}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0
return 0;
 8000506:	2300      	movs	r3, #0
}
 8000508:	4618      	mov	r0, r3
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
	...

08000514 <itm_debug1>:
//void _itm_debug1(const char *msg, int v);
//void _itm_debug2(const char *msg, int v1, int v2);
void _itm_debug3(const char *msg, int v1, int v2, int v3, int n);

static inline void itm_debug1(uint32_t f, const char *msg, int v)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af02      	add	r7, sp, #8
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <itm_debug1+0x30>)
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	4013      	ands	r3, r2
 8000528:	2b00      	cmp	r3, #0
 800052a:	d007      	beq.n	800053c <itm_debug1+0x28>
 800052c:	2301      	movs	r3, #1
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	2300      	movs	r3, #0
 8000532:	2200      	movs	r2, #0
 8000534:	6879      	ldr	r1, [r7, #4]
 8000536:	68b8      	ldr	r0, [r7, #8]
 8000538:	f018 f99c 	bl	8018874 <_itm_debug3>
}
 800053c:	bf00      	nop
 800053e:	3710      	adds	r7, #16
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000574 	.word	0x20000574

08000548 <itm_debug2>:
static inline void itm_debug2(uint32_t f, const char *msg, int v1, int v2)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af02      	add	r7, sp, #8
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
 8000554:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <itm_debug2+0x34>)
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	4013      	ands	r3, r2
 800055e:	2b00      	cmp	r3, #0
 8000560:	d007      	beq.n	8000572 <itm_debug2+0x2a>
 8000562:	2302      	movs	r3, #2
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	2300      	movs	r3, #0
 8000568:	683a      	ldr	r2, [r7, #0]
 800056a:	6879      	ldr	r1, [r7, #4]
 800056c:	68b8      	ldr	r0, [r7, #8]
 800056e:	f018 f981 	bl	8018874 <_itm_debug3>
}
 8000572:	bf00      	nop
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000574 	.word	0x20000574

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f001 fbf2 	bl	8001d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f864 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 fdc8 	bl	8001120 <MX_GPIO_Init>
  MX_DMA_Init();
 8000590:	f000 fda6 	bl	80010e0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000594:	f000 f8e0 	bl	8000758 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000598:	f000 f9b4 	bl	8000904 <MX_I2C1_Init>
  MX_TIM1_Init();
 800059c:	f000 fa40 	bl	8000a20 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005a0:	f000 fb02 	bl	8000ba8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005a4:	f000 fb98 	bl	8000cd8 <MX_TIM3_Init>
  MX_RTC_Init();
 80005a8:	f000 fa0a 	bl	80009c0 <MX_RTC_Init>
  MX_UART4_Init();
 80005ac:	f000 fd6e 	bl	800108c <MX_UART4_Init>
  MX_TIM4_Init();
 80005b0:	f000 fc40 	bl	8000e34 <MX_TIM4_Init>
  MX_TIM8_Init();
 80005b4:	f000 fc92 	bl	8000edc <MX_TIM8_Init>
  MX_I2C3_Init();
 80005b8:	f000 f9d2 	bl	8000960 <MX_I2C3_Init>
  MX_TIM12_Init();
 80005bc:	f000 fcf6 	bl	8000fac <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005c0:	f00c fb18 	bl	800cbf4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of frameQueue */
  frameQueueHandle = osMessageQueueNew (48, sizeof(frame_msg_t), &frameQueue_attributes);
 80005c4:	4a15      	ldr	r2, [pc, #84]	; (800061c <main+0x9c>)
 80005c6:	2121      	movs	r1, #33	; 0x21
 80005c8:	2030      	movs	r0, #48	; 0x30
 80005ca:	f00c fc51 	bl	800ce70 <osMessageQueueNew>
 80005ce:	4602      	mov	r2, r0
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <main+0xa0>)
 80005d2:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of uiTask */
  uiTaskHandle = osThreadNew(StartUiTask, NULL, &uiTask_attributes);
 80005d4:	4a13      	ldr	r2, [pc, #76]	; (8000624 <main+0xa4>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	4813      	ldr	r0, [pc, #76]	; (8000628 <main+0xa8>)
 80005da:	f00c fb75 	bl	800ccc8 <osThreadNew>
 80005de:	4602      	mov	r2, r0
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <main+0xac>)
 80005e2:	601a      	str	r2, [r3, #0]

  /* creation of ctrlTask */
  ctrlTaskHandle = osThreadNew(StartCtrlTask, NULL, &ctrlTask_attributes);
 80005e4:	4a12      	ldr	r2, [pc, #72]	; (8000630 <main+0xb0>)
 80005e6:	2100      	movs	r1, #0
 80005e8:	4812      	ldr	r0, [pc, #72]	; (8000634 <main+0xb4>)
 80005ea:	f00c fb6d 	bl	800ccc8 <osThreadNew>
 80005ee:	4602      	mov	r2, r0
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <main+0xb8>)
 80005f2:	601a      	str	r2, [r3, #0]

  /* creation of txrxFrameTask */
  txrxFrameTaskHandle = osThreadNew(StartTxRxFrameTask, NULL, &txrxFrameTask_attributes);
 80005f4:	4a11      	ldr	r2, [pc, #68]	; (800063c <main+0xbc>)
 80005f6:	2100      	movs	r1, #0
 80005f8:	4811      	ldr	r0, [pc, #68]	; (8000640 <main+0xc0>)
 80005fa:	f00c fb65 	bl	800ccc8 <osThreadNew>
 80005fe:	4602      	mov	r2, r0
 8000600:	4b10      	ldr	r3, [pc, #64]	; (8000644 <main+0xc4>)
 8000602:	601a      	str	r2, [r3, #0]

  /* creation of ina3221_task */
  ina3221_taskHandle = osThreadNew(ina3221_task_start, NULL, &ina3221_task_attributes);
 8000604:	4a10      	ldr	r2, [pc, #64]	; (8000648 <main+0xc8>)
 8000606:	2100      	movs	r1, #0
 8000608:	4810      	ldr	r0, [pc, #64]	; (800064c <main+0xcc>)
 800060a:	f00c fb5d 	bl	800ccc8 <osThreadNew>
 800060e:	4602      	mov	r2, r0
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <main+0xd0>)
 8000612:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000614:	f00c fb22 	bl	800cc5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	e7fe      	b.n	8000618 <main+0x98>
 800061a:	bf00      	nop
 800061c:	080198b0 	.word	0x080198b0
 8000620:	20005d5c 	.word	0x20005d5c
 8000624:	08019820 	.word	0x08019820
 8000628:	080182dd 	.word	0x080182dd
 800062c:	20006268 	.word	0x20006268
 8000630:	08019844 	.word	0x08019844
 8000634:	08017e95 	.word	0x08017e95
 8000638:	200062ac 	.word	0x200062ac
 800063c:	08019868 	.word	0x08019868
 8000640:	0801831d 	.word	0x0801831d
 8000644:	20006bb8 	.word	0x20006bb8
 8000648:	0801988c 	.word	0x0801988c
 800064c:	08011cab 	.word	0x08011cab
 8000650:	20006d04 	.word	0x20006d04

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b098      	sub	sp, #96	; 0x60
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800065e:	2230      	movs	r2, #48	; 0x30
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f018 fb27 	bl	8018cb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	4b31      	ldr	r3, [pc, #196]	; (8000750 <SystemClock_Config+0xfc>)
 800068c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068e:	4a30      	ldr	r2, [pc, #192]	; (8000750 <SystemClock_Config+0xfc>)
 8000690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000694:	6413      	str	r3, [r2, #64]	; 0x40
 8000696:	4b2e      	ldr	r3, [pc, #184]	; (8000750 <SystemClock_Config+0xfc>)
 8000698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <SystemClock_Config+0x100>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a2a      	ldr	r2, [pc, #168]	; (8000754 <SystemClock_Config+0x100>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6013      	str	r3, [r2, #0]
 80006b2:	4b28      	ldr	r3, [pc, #160]	; (8000754 <SystemClock_Config+0x100>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80006be:	2305      	movs	r3, #5
 80006c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d6:	2304      	movs	r3, #4
 80006d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006da:	2360      	movs	r3, #96	; 0x60
 80006dc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006de:	2302      	movs	r3, #2
 80006e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e2:	2304      	movs	r3, #4
 80006e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006ea:	4618      	mov	r0, r3
 80006ec:	f006 fd74 	bl	80071d8 <HAL_RCC_OscConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006f6:	f000 fe5b 	bl	80013b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	230f      	movs	r3, #15
 80006fc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fe:	2302      	movs	r3, #2
 8000700:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000706:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800070c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	2103      	movs	r1, #3
 8000718:	4618      	mov	r0, r3
 800071a:	f006 ffcd 	bl	80076b8 <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000724:	f000 fe44 	bl	80013b0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000728:	2302      	movs	r3, #2
 800072a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800072c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000730:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	4618      	mov	r0, r3
 8000738:	f007 f9e2 	bl	8007b00 <HAL_RCCEx_PeriphCLKConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000742:	f000 fe35 	bl	80013b0 <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3760      	adds	r7, #96	; 0x60
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800075e:	463b      	mov	r3, r7
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800076a:	4b64      	ldr	r3, [pc, #400]	; (80008fc <MX_ADC1_Init+0x1a4>)
 800076c:	4a64      	ldr	r2, [pc, #400]	; (8000900 <MX_ADC1_Init+0x1a8>)
 800076e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000770:	4b62      	ldr	r3, [pc, #392]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000776:	4b61      	ldr	r3, [pc, #388]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800077c:	4b5f      	ldr	r3, [pc, #380]	; (80008fc <MX_ADC1_Init+0x1a4>)
 800077e:	2201      	movs	r2, #1
 8000780:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000782:	4b5e      	ldr	r3, [pc, #376]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000784:	2200      	movs	r2, #0
 8000786:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000788:	4b5c      	ldr	r3, [pc, #368]	; (80008fc <MX_ADC1_Init+0x1a4>)
 800078a:	2200      	movs	r2, #0
 800078c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000790:	4b5a      	ldr	r3, [pc, #360]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000796:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000798:	4b58      	ldr	r3, [pc, #352]	; (80008fc <MX_ADC1_Init+0x1a4>)
 800079a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800079e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a0:	4b56      	ldr	r3, [pc, #344]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 80007a6:	4b55      	ldr	r3, [pc, #340]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80007a8:	220a      	movs	r2, #10
 80007aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007ac:	4b53      	ldr	r3, [pc, #332]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007b4:	4b51      	ldr	r3, [pc, #324]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ba:	4850      	ldr	r0, [pc, #320]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80007bc:	f001 fb3a 	bl	8001e34 <HAL_ADC_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80007c6:	f000 fdf3 	bl	80013b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80007d2:	2302      	movs	r3, #2
 80007d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4848      	ldr	r0, [pc, #288]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80007dc:	f001 fc60 	bl	80020a0 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007e6:	f000 fde3 	bl	80013b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007ea:	2301      	movs	r3, #1
 80007ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f2:	463b      	mov	r3, r7
 80007f4:	4619      	mov	r1, r3
 80007f6:	4841      	ldr	r0, [pc, #260]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80007f8:	f001 fc52 	bl	80020a0 <HAL_ADC_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000802:	f000 fdd5 	bl	80013b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000806:	2302      	movs	r3, #2
 8000808:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800080a:	2303      	movs	r3, #3
 800080c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080e:	463b      	mov	r3, r7
 8000810:	4619      	mov	r1, r3
 8000812:	483a      	ldr	r0, [pc, #232]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000814:	f001 fc44 	bl	80020a0 <HAL_ADC_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800081e:	f000 fdc7 	bl	80013b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000822:	2303      	movs	r3, #3
 8000824:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000826:	2304      	movs	r3, #4
 8000828:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082a:	463b      	mov	r3, r7
 800082c:	4619      	mov	r1, r3
 800082e:	4833      	ldr	r0, [pc, #204]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000830:	f001 fc36 	bl	80020a0 <HAL_ADC_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800083a:	f000 fdb9 	bl	80013b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800083e:	2304      	movs	r3, #4
 8000840:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000842:	2305      	movs	r3, #5
 8000844:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000846:	463b      	mov	r3, r7
 8000848:	4619      	mov	r1, r3
 800084a:	482c      	ldr	r0, [pc, #176]	; (80008fc <MX_ADC1_Init+0x1a4>)
 800084c:	f001 fc28 	bl	80020a0 <HAL_ADC_ConfigChannel>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8000856:	f000 fdab 	bl	80013b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800085a:	2305      	movs	r3, #5
 800085c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800085e:	2306      	movs	r3, #6
 8000860:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000862:	463b      	mov	r3, r7
 8000864:	4619      	mov	r1, r3
 8000866:	4825      	ldr	r0, [pc, #148]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000868:	f001 fc1a 	bl	80020a0 <HAL_ADC_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8000872:	f000 fd9d 	bl	80013b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000876:	230c      	movs	r3, #12
 8000878:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800087a:	2307      	movs	r3, #7
 800087c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087e:	463b      	mov	r3, r7
 8000880:	4619      	mov	r1, r3
 8000882:	481e      	ldr	r0, [pc, #120]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000884:	f001 fc0c 	bl	80020a0 <HAL_ADC_ConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 800088e:	f000 fd8f 	bl	80013b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000892:	2308      	movs	r3, #8
 8000894:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000896:	2308      	movs	r3, #8
 8000898:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800089a:	463b      	mov	r3, r7
 800089c:	4619      	mov	r1, r3
 800089e:	4817      	ldr	r0, [pc, #92]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80008a0:	f001 fbfe 	bl	80020a0 <HAL_ADC_ConfigChannel>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 80008aa:	f000 fd81 	bl	80013b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008ae:	230a      	movs	r3, #10
 80008b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80008b2:	2309      	movs	r3, #9
 80008b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b6:	463b      	mov	r3, r7
 80008b8:	4619      	mov	r1, r3
 80008ba:	4810      	ldr	r0, [pc, #64]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80008bc:	f001 fbf0 	bl	80020a0 <HAL_ADC_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 80008c6:	f000 fd73 	bl	80013b0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008ca:	230b      	movs	r3, #11
 80008cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80008ce:	230a      	movs	r3, #10
 80008d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d2:	463b      	mov	r3, r7
 80008d4:	4619      	mov	r1, r3
 80008d6:	4809      	ldr	r0, [pc, #36]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80008d8:	f001 fbe2 	bl	80020a0 <HAL_ADC_ConfigChannel>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80008e2:	f000 fd65 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  if (hadc1.Init.NbrOfConversion != NUM_LOCAL_CANTONS_HW*2) {
 80008e6:	4b05      	ldr	r3, [pc, #20]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	2b0a      	cmp	r3, #10
 80008ec:	d001      	beq.n	80008f2 <MX_ADC1_Init+0x19a>
	    Error_Handler();
 80008ee:	f000 fd5f 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE END ADC1_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200062b0 	.word	0x200062b0
 8000900:	40012000 	.word	0x40012000

08000904 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_I2C1_Init+0x50>)
 800090a:	4a13      	ldr	r2, [pc, #76]	; (8000958 <MX_I2C1_Init+0x54>)
 800090c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_I2C1_Init+0x50>)
 8000910:	4a12      	ldr	r2, [pc, #72]	; (800095c <MX_I2C1_Init+0x58>)
 8000912:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_I2C1_Init+0x50>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_I2C1_Init+0x50>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_I2C1_Init+0x50>)
 8000922:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000926:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MX_I2C1_Init+0x50>)
 800092a:	2200      	movs	r2, #0
 800092c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_I2C1_Init+0x50>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MX_I2C1_Init+0x50>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_I2C1_Init+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_I2C1_Init+0x50>)
 8000942:	f002 fc81 	bl	8003248 <HAL_I2C_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800094c:	f000 fd30 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20005d60 	.word	0x20005d60
 8000958:	40005400 	.word	0x40005400
 800095c:	00061a80 	.word	0x00061a80

08000960 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_I2C3_Init+0x54>)
 8000966:	4a14      	ldr	r2, [pc, #80]	; (80009b8 <MX_I2C3_Init+0x58>)
 8000968:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_I2C3_Init+0x54>)
 800096c:	4a13      	ldr	r2, [pc, #76]	; (80009bc <MX_I2C3_Init+0x5c>)
 800096e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000970:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_I2C3_Init+0x54>)
 8000972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000976:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000978:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_I2C3_Init+0x54>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <MX_I2C3_Init+0x54>)
 8000980:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000984:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_I2C3_Init+0x54>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_I2C3_Init+0x54>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_I2C3_Init+0x54>)
 8000994:	2200      	movs	r2, #0
 8000996:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_I2C3_Init+0x54>)
 800099a:	2200      	movs	r2, #0
 800099c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_I2C3_Init+0x54>)
 80009a0:	f002 fc52 	bl	8003248 <HAL_I2C_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_I2C3_Init+0x4e>
  {
    Error_Handler();
 80009aa:	f000 fd01 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200055f4 	.word	0x200055f4
 80009b8:	40005c00 	.word	0x40005c00
 80009bc:	00061a80 	.word	0x00061a80

080009c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80009d4:	2300      	movs	r3, #0
 80009d6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_RTC_Init+0x58>)
 80009da:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <MX_RTC_Init+0x5c>)
 80009dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_RTC_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_RTC_Init+0x58>)
 80009e6:	227f      	movs	r2, #127	; 0x7f
 80009e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <MX_RTC_Init+0x58>)
 80009ec:	22ff      	movs	r2, #255	; 0xff
 80009ee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_RTC_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <MX_RTC_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_RTC_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_RTC_Init+0x58>)
 8000a04:	f007 f95e 	bl	8007cc4 <HAL_RTC_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000a0e:	f000 fccf 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20006358 	.word	0x20006358
 8000a1c:	40002800 	.word	0x40002800

08000a20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b096      	sub	sp, #88	; 0x58
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]
 8000a4e:	615a      	str	r2, [r3, #20]
 8000a50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2220      	movs	r2, #32
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f018 f92c 	bl	8018cb6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a5e:	4b50      	ldr	r3, [pc, #320]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a60:	4a50      	ldr	r2, [pc, #320]	; (8000ba4 <MX_TIM1_Init+0x184>)
 8000a62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1199;
 8000a64:	4b4e      	ldr	r3, [pc, #312]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a66:	f240 42af 	movw	r2, #1199	; 0x4af
 8000a6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000a6c:	4b4c      	ldr	r3, [pc, #304]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a6e:	2260      	movs	r2, #96	; 0x60
 8000a70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 8000a72:	4b4b      	ldr	r3, [pc, #300]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a74:	22c8      	movs	r2, #200	; 0xc8
 8000a76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a78:	4b49      	ldr	r3, [pc, #292]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a7e:	4b48      	ldr	r3, [pc, #288]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a84:	4b46      	ldr	r3, [pc, #280]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a86:	2280      	movs	r2, #128	; 0x80
 8000a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a8a:	4845      	ldr	r0, [pc, #276]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a8c:	f007 f9ff 	bl	8007e8e <HAL_TIM_Base_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000a96:	f000 fc8b 	bl	80013b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aa0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	483e      	ldr	r0, [pc, #248]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000aa8:	f007 fdc8 	bl	800863c <HAL_TIM_ConfigClockSource>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ab2:	f000 fc7d 	bl	80013b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ab6:	483a      	ldr	r0, [pc, #232]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000ab8:	f007 fa5c 	bl	8007f74 <HAL_TIM_PWM_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000ac2:	f000 fc75 	bl	80013b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ac6:	2320      	movs	r3, #32
 8000ac8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000aca:	2380      	movs	r3, #128	; 0x80
 8000acc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ace:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4832      	ldr	r0, [pc, #200]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000ad6:	f008 fa69 	bl	8008fac <HAL_TIMEx_MasterConfigSynchronization>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000ae0:	f000 fc66 	bl	80013b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae4:	2360      	movs	r3, #96	; 0x60
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000af0:	2300      	movs	r3, #0
 8000af2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000af8:	2300      	movs	r3, #0
 8000afa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000afc:	2300      	movs	r3, #0
 8000afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b04:	2200      	movs	r2, #0
 8000b06:	4619      	mov	r1, r3
 8000b08:	4825      	ldr	r0, [pc, #148]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000b0a:	f007 fcd1 	bl	80084b0 <HAL_TIM_PWM_ConfigChannel>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000b14:	f000 fc4c 	bl	80013b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1c:	2204      	movs	r2, #4
 8000b1e:	4619      	mov	r1, r3
 8000b20:	481f      	ldr	r0, [pc, #124]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000b22:	f007 fcc5 	bl	80084b0 <HAL_TIM_PWM_ConfigChannel>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000b2c:	f000 fc40 	bl	80013b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b34:	2208      	movs	r2, #8
 8000b36:	4619      	mov	r1, r3
 8000b38:	4819      	ldr	r0, [pc, #100]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000b3a:	f007 fcb9 	bl	80084b0 <HAL_TIM_PWM_ConfigChannel>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000b44:	f000 fc34 	bl	80013b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4c:	220c      	movs	r2, #12
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4813      	ldr	r0, [pc, #76]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000b52:	f007 fcad 	bl	80084b0 <HAL_TIM_PWM_ConfigChannel>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000b5c:	f000 fc28 	bl	80013b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b78:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	4619      	mov	r1, r3
 8000b82:	4807      	ldr	r0, [pc, #28]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000b84:	f008 fa8e 	bl	80090a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000b8e:	f000 fc0f 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b92:	4803      	ldr	r0, [pc, #12]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000b94:	f000 fe86 	bl	80018a4 <HAL_TIM_MspPostInit>

}
 8000b98:	bf00      	nop
 8000b9a:	3758      	adds	r7, #88	; 0x58
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20006778 	.word	0x20006778
 8000ba4:	40010000 	.word	0x40010000

08000ba8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b092      	sub	sp, #72	; 0x48
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
 8000be4:	615a      	str	r2, [r3, #20]
 8000be6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000be8:	4b3a      	ldr	r3, [pc, #232]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000bea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1199;
 8000bf0:	4b38      	ldr	r3, [pc, #224]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000bf2:	f240 42af 	movw	r2, #1199	; 0x4af
 8000bf6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000bf8:	4b36      	ldr	r3, [pc, #216]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000bfa:	2260      	movs	r2, #96	; 0x60
 8000bfc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8000bfe:	4b35      	ldr	r3, [pc, #212]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c00:	22c8      	movs	r2, #200	; 0xc8
 8000c02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c04:	4b33      	ldr	r3, [pc, #204]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c0a:	4b32      	ldr	r3, [pc, #200]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c0c:	2280      	movs	r2, #128	; 0x80
 8000c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c10:	4830      	ldr	r0, [pc, #192]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c12:	f007 f93c 	bl	8007e8e <HAL_TIM_Base_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000c1c:	f000 fbc8 	bl	80013b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c24:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4829      	ldr	r0, [pc, #164]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c2e:	f007 fd05 	bl	800863c <HAL_TIM_ConfigClockSource>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c38:	f000 fbba 	bl	80013b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c3c:	4825      	ldr	r0, [pc, #148]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c3e:	f007 f999 	bl	8007f74 <HAL_TIM_PWM_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000c48:	f000 fbb2 	bl	80013b0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000c4c:	2306      	movs	r3, #6
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	481e      	ldr	r0, [pc, #120]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c5c:	f007 fda5 	bl	80087aa <HAL_TIM_SlaveConfigSynchro>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8000c66:	f000 fba3 	bl	80013b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	4816      	ldr	r0, [pc, #88]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c7a:	f008 f997 	bl	8008fac <HAL_TIMEx_MasterConfigSynchronization>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000c84:	f000 fb94 	bl	80013b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c88:	2360      	movs	r3, #96	; 0x60
 8000c8a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c98:	463b      	mov	r3, r7
 8000c9a:	2208      	movs	r2, #8
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000ca0:	f007 fc06 	bl	80084b0 <HAL_TIM_PWM_ConfigChannel>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000caa:	f000 fb81 	bl	80013b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cae:	463b      	mov	r3, r7
 8000cb0:	220c      	movs	r2, #12
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000cb6:	f007 fbfb 	bl	80084b0 <HAL_TIM_PWM_ConfigChannel>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000cc0:	f000 fb76 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cc4:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000cc6:	f000 fded 	bl	80018a4 <HAL_TIM_MspPostInit>

}
 8000cca:	bf00      	nop
 8000ccc:	3748      	adds	r7, #72	; 0x48
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20006cc4 	.word	0x20006cc4

08000cd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b092      	sub	sp, #72	; 0x48
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d06:	463b      	mov	r3, r7
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
 8000d14:	615a      	str	r2, [r3, #20]
 8000d16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d18:	4b44      	ldr	r3, [pc, #272]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d1a:	4a45      	ldr	r2, [pc, #276]	; (8000e30 <MX_TIM3_Init+0x158>)
 8000d1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d1e:	4b43      	ldr	r3, [pc, #268]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d24:	4b41      	ldr	r3, [pc, #260]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d2a:	4b40      	ldr	r3, [pc, #256]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d32:	4b3e      	ldr	r3, [pc, #248]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d38:	4b3c      	ldr	r3, [pc, #240]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d3e:	483b      	ldr	r0, [pc, #236]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d40:	f007 f8a5 	bl	8007e8e <HAL_TIM_Base_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000d4a:	f000 fb31 	bl	80013b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d52:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4834      	ldr	r0, [pc, #208]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d5c:	f007 fc6e 	bl	800863c <HAL_TIM_ConfigClockSource>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d66:	f000 fb23 	bl	80013b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d6a:	4830      	ldr	r0, [pc, #192]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d6c:	f007 f902 	bl	8007f74 <HAL_TIM_PWM_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8000d76:	f000 fb1b 	bl	80013b0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000d7a:	2306      	movs	r3, #6
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d86:	4619      	mov	r1, r3
 8000d88:	4828      	ldr	r0, [pc, #160]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d8a:	f007 fd0e 	bl	80087aa <HAL_TIM_SlaveConfigSynchro>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8000d94:	f000 fb0c 	bl	80013b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	4821      	ldr	r0, [pc, #132]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000da8:	f008 f900 	bl	8008fac <HAL_TIMEx_MasterConfigSynchronization>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000db2:	f000 fafd 	bl	80013b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000db6:	2360      	movs	r3, #96	; 0x60
 8000db8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	2200      	movs	r2, #0
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4817      	ldr	r0, [pc, #92]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000dce:	f007 fb6f 	bl	80084b0 <HAL_TIM_PWM_ConfigChannel>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000dd8:	f000 faea 	bl	80013b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ddc:	463b      	mov	r3, r7
 8000dde:	2204      	movs	r2, #4
 8000de0:	4619      	mov	r1, r3
 8000de2:	4812      	ldr	r0, [pc, #72]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000de4:	f007 fb64 	bl	80084b0 <HAL_TIM_PWM_ConfigChannel>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8000dee:	f000 fadf 	bl	80013b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000df2:	463b      	mov	r3, r7
 8000df4:	2208      	movs	r2, #8
 8000df6:	4619      	mov	r1, r3
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000dfa:	f007 fb59 	bl	80084b0 <HAL_TIM_PWM_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM3_Init+0x130>
  {
    Error_Handler();
 8000e04:	f000 fad4 	bl	80013b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e08:	463b      	mov	r3, r7
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4807      	ldr	r0, [pc, #28]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000e10:	f007 fb4e 	bl	80084b0 <HAL_TIM_PWM_ConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM3_Init+0x146>
  {
    Error_Handler();
 8000e1a:	f000 fac9 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e1e:	4803      	ldr	r0, [pc, #12]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000e20:	f000 fd40 	bl	80018a4 <HAL_TIM_MspPostInit>

}
 8000e24:	bf00      	nop
 8000e26:	3748      	adds	r7, #72	; 0x48
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	2000626c 	.word	0x2000626c
 8000e30:	40000400 	.word	0x40000400

08000e34 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	; 0x30
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	2224      	movs	r2, #36	; 0x24
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f017 ff37 	bl	8018cb6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e50:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000e52:	4a21      	ldr	r2, [pc, #132]	; (8000ed8 <MX_TIM4_Init+0xa4>)
 8000e54:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e56:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 8000e62:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000e64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e68:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e70:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000e72:	2280      	movs	r2, #128	; 0x80
 8000e74:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000e86:	230a      	movs	r3, #10
 8000e88:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e92:	2300      	movs	r3, #0
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000e96:	230a      	movs	r3, #10
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000ea2:	f007 f933 	bl	800810c <HAL_TIM_Encoder_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000eac:	f000 fa80 	bl	80013b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000ebe:	f008 f875 	bl	8008fac <HAL_TIMEx_MasterConfigSynchronization>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000ec8:	f000 fa72 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	3730      	adds	r7, #48	; 0x30
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20005d1c 	.word	0x20005d1c
 8000ed8:	40000800 	.word	0x40000800

08000edc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08c      	sub	sp, #48	; 0x30
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee2:	f107 0320 	add.w	r3, r7, #32
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f08:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f0a:	4a27      	ldr	r2, [pc, #156]	; (8000fa8 <MX_TIM8_Init+0xcc>)
 8000f0c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1199;
 8000f0e:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f10:	f240 42af 	movw	r2, #1199	; 0x4af
 8000f14:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f16:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 210;
 8000f1c:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f1e:	22d2      	movs	r2, #210	; 0xd2
 8000f20:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f28:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f30:	2280      	movs	r2, #128	; 0x80
 8000f32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000f34:	481b      	ldr	r0, [pc, #108]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f36:	f006 ffaa 	bl	8007e8e <HAL_TIM_Base_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8000f40:	f000 fa36 	bl	80013b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f48:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000f4a:	f107 0320 	add.w	r3, r7, #32
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4814      	ldr	r0, [pc, #80]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f52:	f007 fb73 	bl	800863c <HAL_TIM_ConfigClockSource>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000f5c:	f000 fa28 	bl	80013b0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000f60:	2304      	movs	r3, #4
 8000f62:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f70:	f007 fc1b 	bl	80087aa <HAL_TIM_SlaveConfigSynchro>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 8000f7a:	f000 fa19 	bl	80013b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f7e:	2320      	movs	r3, #32
 8000f80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f8c:	f008 f80e 	bl	8008fac <HAL_TIMEx_MasterConfigSynchronization>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8000f96:	f000 fa0b 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	3730      	adds	r7, #48	; 0x30
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20005c78 	.word	0x20005c78
 8000fa8:	40010400 	.word	0x40010400

08000fac <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08c      	sub	sp, #48	; 0x30
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	611a      	str	r2, [r3, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
 8000fd0:	615a      	str	r2, [r3, #20]
 8000fd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000fd4:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <MX_TIM12_Init+0xd8>)
 8000fd6:	4a2c      	ldr	r2, [pc, #176]	; (8001088 <MX_TIM12_Init+0xdc>)
 8000fd8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000fda:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <MX_TIM12_Init+0xd8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe0:	4b28      	ldr	r3, [pc, #160]	; (8001084 <MX_TIM12_Init+0xd8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000fe6:	4b27      	ldr	r3, [pc, #156]	; (8001084 <MX_TIM12_Init+0xd8>)
 8000fe8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fec:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fee:	4b25      	ldr	r3, [pc, #148]	; (8001084 <MX_TIM12_Init+0xd8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff4:	4b23      	ldr	r3, [pc, #140]	; (8001084 <MX_TIM12_Init+0xd8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000ffa:	4822      	ldr	r0, [pc, #136]	; (8001084 <MX_TIM12_Init+0xd8>)
 8000ffc:	f006 ff47 	bl	8007e8e <HAL_TIM_Base_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 8001006:	f000 f9d3 	bl	80013b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800100a:	481e      	ldr	r0, [pc, #120]	; (8001084 <MX_TIM12_Init+0xd8>)
 800100c:	f006 ffb2 	bl	8007f74 <HAL_TIM_PWM_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM12_Init+0x6e>
  {
    Error_Handler();
 8001016:	f000 f9cb 	bl	80013b0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	4619      	mov	r1, r3
 8001028:	4816      	ldr	r0, [pc, #88]	; (8001084 <MX_TIM12_Init+0xd8>)
 800102a:	f007 fbbe 	bl	80087aa <HAL_TIM_SlaveConfigSynchro>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM12_Init+0x8c>
  {
    Error_Handler();
 8001034:	f000 f9bc 	bl	80013b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001038:	2360      	movs	r3, #96	; 0x60
 800103a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001048:	463b      	mov	r3, r7
 800104a:	2200      	movs	r2, #0
 800104c:	4619      	mov	r1, r3
 800104e:	480d      	ldr	r0, [pc, #52]	; (8001084 <MX_TIM12_Init+0xd8>)
 8001050:	f007 fa2e 	bl	80084b0 <HAL_TIM_PWM_ConfigChannel>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 800105a:	f000 f9a9 	bl	80013b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800105e:	463b      	mov	r3, r7
 8001060:	2204      	movs	r2, #4
 8001062:	4619      	mov	r1, r3
 8001064:	4807      	ldr	r0, [pc, #28]	; (8001084 <MX_TIM12_Init+0xd8>)
 8001066:	f007 fa23 	bl	80084b0 <HAL_TIM_PWM_ConfigChannel>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM12_Init+0xc8>
  {
    Error_Handler();
 8001070:	f000 f99e 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001074:	4803      	ldr	r0, [pc, #12]	; (8001084 <MX_TIM12_Init+0xd8>)
 8001076:	f000 fc15 	bl	80018a4 <HAL_TIM_MspPostInit>

}
 800107a:	bf00      	nop
 800107c:	3730      	adds	r7, #48	; 0x30
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20006d08 	.word	0x20006d08
 8001088:	40001800 	.word	0x40001800

0800108c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_UART4_Init+0x4c>)
 8001092:	4a12      	ldr	r2, [pc, #72]	; (80010dc <MX_UART4_Init+0x50>)
 8001094:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <MX_UART4_Init+0x4c>)
 8001098:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800109c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_UART4_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_UART4_Init+0x4c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <MX_UART4_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_UART4_Init+0x4c>)
 80010b2:	220c      	movs	r2, #12
 80010b4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <MX_UART4_Init+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_UART4_Init+0x4c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_UART4_Init+0x4c>)
 80010c4:	f008 f854 	bl	8009170 <HAL_UART_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80010ce:	f000 f96f 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20006c20 	.word	0x20006c20
 80010dc:	40004c00 	.word	0x40004c00

080010e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_DMA_Init+0x3c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <MX_DMA_Init+0x3c>)
 80010f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_DMA_Init+0x3c>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 7, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2107      	movs	r1, #7
 8001106:	2038      	movs	r0, #56	; 0x38
 8001108:	f001 fb22 	bl	8002750 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800110c:	2038      	movs	r0, #56	; 0x38
 800110e:	f001 fb3b 	bl	8002788 <HAL_NVIC_EnableIRQ>

}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800

08001120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08c      	sub	sp, #48	; 0x30
 8001124:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
 800113a:	4b65      	ldr	r3, [pc, #404]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a64      	ldr	r2, [pc, #400]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001140:	f043 0310 	orr.w	r3, r3, #16
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b62      	ldr	r3, [pc, #392]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0310 	and.w	r3, r3, #16
 800114e:	61bb      	str	r3, [r7, #24]
 8001150:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	4b5e      	ldr	r3, [pc, #376]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a5d      	ldr	r2, [pc, #372]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b5b      	ldr	r3, [pc, #364]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	4b57      	ldr	r3, [pc, #348]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a56      	ldr	r2, [pc, #344]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b54      	ldr	r3, [pc, #336]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b50      	ldr	r3, [pc, #320]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a4f      	ldr	r2, [pc, #316]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b4d      	ldr	r3, [pc, #308]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	4b49      	ldr	r3, [pc, #292]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a48      	ldr	r2, [pc, #288]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b46      	ldr	r3, [pc, #280]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b42      	ldr	r3, [pc, #264]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a41      	ldr	r2, [pc, #260]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 80011cc:	f043 0308 	orr.w	r3, r3, #8
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b3f      	ldr	r3, [pc, #252]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VOLT_4_SEL0_Pin|VOLT_4_SEL1_Pin|VOLT_4_SEL2_Pin|TURN3A_Pin
 80011de:	2200      	movs	r2, #0
 80011e0:	f249 116f 	movw	r1, #37231	; 0x916f
 80011e4:	483b      	ldr	r0, [pc, #236]	; (80012d4 <MX_GPIO_Init+0x1b4>)
 80011e6:	f002 f815 	bl	8003214 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_15|TURN2A_Pin
                          |TURN2B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TURN3B_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80011f0:	4839      	ldr	r0, [pc, #228]	; (80012d8 <MX_GPIO_Init+0x1b8>)
 80011f2:	f002 f80f 	bl	8003214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f248 6140 	movw	r1, #34368	; 0x8640
 80011fc:	4837      	ldr	r0, [pc, #220]	; (80012dc <MX_GPIO_Init+0x1bc>)
 80011fe:	f002 f809 	bl	8003214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|VOLT_3_SEL0_Pin|GPIO_PIN_13|GPIO_PIN_4
 8001202:	2200      	movs	r2, #0
 8001204:	f243 3134 	movw	r1, #13108	; 0x3334
 8001208:	4835      	ldr	r0, [pc, #212]	; (80012e0 <MX_GPIO_Init+0x1c0>)
 800120a:	f002 f803 	bl	8003214 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|TURN1A_Pin|TURN1B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, VOLT_2_SEL2_Pin|VOLT_3_SEL0D9_Pin|VOLT_3_SEL1_Pin|VOLT_3_SEL2_Pin
 800120e:	2200      	movs	r2, #0
 8001210:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001214:	4833      	ldr	r0, [pc, #204]	; (80012e4 <MX_GPIO_Init+0x1c4>)
 8001216:	f001 fffd 	bl	8003214 <HAL_GPIO_WritePin>
                          |VOLT_1_SEL1_Pin|VOLT_1_SEL2_Pin|VOLT_2_SEL0_Pin|VOLT_2_SEL1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : VOLT_4_SEL0_Pin VOLT_4_SEL1_Pin VOLT_4_SEL2_Pin TURN3A_Pin
                           PE8 PE12 PE15 TURN2A_Pin
                           TURN2B_Pin */
  GPIO_InitStruct.Pin = VOLT_4_SEL0_Pin|VOLT_4_SEL1_Pin|VOLT_4_SEL2_Pin|TURN3A_Pin
 800121a:	f249 136f 	movw	r3, #37231	; 0x916f
 800121e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_15|TURN2A_Pin
                          |TURN2B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001220:	2301      	movs	r3, #1
 8001222:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	4619      	mov	r1, r3
 8001232:	4828      	ldr	r0, [pc, #160]	; (80012d4 <MX_GPIO_Init+0x1b4>)
 8001234:	f001 fe54 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8001238:	2310      	movs	r3, #16
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001240:	2301      	movs	r3, #1
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4619      	mov	r1, r3
 800124a:	4822      	ldr	r0, [pc, #136]	; (80012d4 <MX_GPIO_Init+0x1b4>)
 800124c:	f001 fe48 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TURN3B_Pin PC12 */
  GPIO_InitStruct.Pin = TURN3B_Pin|GPIO_PIN_12;
 8001250:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001256:	2301      	movs	r3, #1
 8001258:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4619      	mov	r1, r3
 8001268:	481b      	ldr	r0, [pc, #108]	; (80012d8 <MX_GPIO_Init+0x1b8>)
 800126a:	f001 fe39 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = LED1_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 800126e:	f248 6340 	movw	r3, #34368	; 0x8640
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	4619      	mov	r1, r3
 8001286:	4815      	ldr	r0, [pc, #84]	; (80012dc <MX_GPIO_Init+0x1bc>)
 8001288:	f001 fe2a 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 VOLT_3_SEL0_Pin PB13 PB4
                           PB5 TURN1A_Pin TURN1B_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|VOLT_3_SEL0_Pin|GPIO_PIN_13|GPIO_PIN_4
 800128c:	f243 3334 	movw	r3, #13108	; 0x3334
 8001290:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|TURN1A_Pin|TURN1B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001292:	2301      	movs	r3, #1
 8001294:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	4619      	mov	r1, r3
 80012a4:	480e      	ldr	r0, [pc, #56]	; (80012e0 <MX_GPIO_Init+0x1c0>)
 80012a6:	f001 fe1b 	bl	8002ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VOLT_2_SEL2_Pin VOLT_3_SEL0D9_Pin VOLT_3_SEL1_Pin VOLT_3_SEL2_Pin
                           VOLT_0_SEL0_Pin VOLT_0_SEL1_Pin VOLT_0_SEL2_Pin VOLT_1_SEL0_Pin
                           VOLT_1_SEL1_Pin VOLT_1_SEL2_Pin VOLT_2_SEL0_Pin VOLT_2_SEL1_Pin */
  GPIO_InitStruct.Pin = VOLT_2_SEL2_Pin|VOLT_3_SEL0D9_Pin|VOLT_3_SEL1_Pin|VOLT_3_SEL2_Pin
 80012aa:	f640 73ff 	movw	r3, #4095	; 0xfff
 80012ae:	61fb      	str	r3, [r7, #28]
                          |VOLT_0_SEL0_Pin|VOLT_0_SEL1_Pin|VOLT_0_SEL2_Pin|VOLT_1_SEL0_Pin
                          |VOLT_1_SEL1_Pin|VOLT_1_SEL2_Pin|VOLT_2_SEL0_Pin|VOLT_2_SEL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	4619      	mov	r1, r3
 80012c2:	4808      	ldr	r0, [pc, #32]	; (80012e4 <MX_GPIO_Init+0x1c4>)
 80012c4:	f001 fe0c 	bl	8002ee0 <HAL_GPIO_Init>

}
 80012c8:	bf00      	nop
 80012ca:	3730      	adds	r7, #48	; 0x30
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40020800 	.word	0x40020800
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40020400 	.word	0x40020400
 80012e4:	40020c00 	.word	0x40020c00

080012e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af02      	add	r7, sp, #8
 80012ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a25      	ldr	r2, [pc, #148]	; (800138c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d101      	bne.n	80012fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012fa:	f000 fd59 	bl	8001db0 <HAL_IncTick>
		  xTaskNotifyFromISR(uiTaskHandle, NOTIF_TICKUI, eSetBits, &higher);
		  portYIELD_FROM_ISR(higher);
	  }
  }
  */
  if (htim->Instance == TIM8) {
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a23      	ldr	r2, [pc, #140]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d104      	bne.n	8001312 <HAL_TIM_PeriodElapsedCallback+0x2a>
		  ina3221_trigger_conversion();
		  //BaseType_t higher=0;
		  //xTaskNotifyFromISR(ctrlTaskHandle, NOTIF_TIM8, eSetBits, &higher);
		  //portYIELD_FROM_ISR(higher);
	  } else {
		  itm_debug1(DBG_TIM, "tim8",0);
 8001308:	2200      	movs	r2, #0
 800130a:	4922      	ldr	r1, [pc, #136]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800130c:	2001      	movs	r0, #1
 800130e:	f7ff f901 	bl	8000514 <itm_debug1>
	  }
  }
  if (htim->Instance == TIM1) {
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a20      	ldr	r2, [pc, #128]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d132      	bne.n	8001382 <HAL_TIM_PeriodElapsedCallback+0x9a>
	  uint32_t t1 = __HAL_TIM_GET_COUNTER(&htim1);
 800131c:	4b1f      	ldr	r3, [pc, #124]	; (800139c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001322:	60fb      	str	r3, [r7, #12]
	  if (/*1||*/ (t1<50)) {
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b31      	cmp	r3, #49	; 0x31
 8001328:	d82b      	bhi.n	8001382 <HAL_TIM_PeriodElapsedCallback+0x9a>
		  static uint32_t cnt = 0;
		  itm_debug2(DBG_TIM|DBG_INA3221, "tim1",cnt, t1);
 800132a:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	461a      	mov	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	491c      	ldr	r1, [pc, #112]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001334:	2021      	movs	r0, #33	; 0x21
 8001336:	f7ff f907 	bl	8000548 <itm_debug2>
		  cnt++;
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	4a17      	ldr	r2, [pc, #92]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001342:	6013      	str	r3, [r2, #0]
#if INA3221_TASK
		  BaseType_t higher=0;
 8001344:	2300      	movs	r3, #0
 8001346:	60bb      	str	r3, [r7, #8]
		  xTaskNotifyFromISR(ina3221_taskHandle, (cnt%2) ? NOTIF_INA_READ : NOTIF_INA_TRIG, eSetBits, &higher);
 8001348:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800134a:	6818      	ldr	r0, [r3, #0]
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <HAL_TIM_PeriodElapsedCallback+0x74>
 8001358:	2108      	movs	r1, #8
 800135a:	e000      	b.n	800135e <HAL_TIM_PeriodElapsedCallback+0x76>
 800135c:	2104      	movs	r1, #4
 800135e:	f107 0308 	add.w	r3, r7, #8
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2300      	movs	r3, #0
 8001366:	2201      	movs	r2, #1
 8001368:	f00d fd5c 	bl	800ee24 <xTaskGenericNotifyFromISR>
		  portYIELD_FROM_ISR(higher);
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d007      	beq.n	8001382 <HAL_TIM_PeriodElapsedCallback+0x9a>
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	f3bf 8f4f 	dsb	sy
 800137e:	f3bf 8f6f 	isb	sy
		  ina3221_trigger_conversion();
#endif
	  }
  }
  /* USER CODE END Callback 1 */
}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40001400 	.word	0x40001400
 8001390:	40010400 	.word	0x40010400
 8001394:	08018f3c 	.word	0x08018f3c
 8001398:	40010000 	.word	0x40010000
 800139c:	20006778 	.word	0x20006778
 80013a0:	200005fc 	.word	0x200005fc
 80013a4:	08018f44 	.word	0x08018f44
 80013a8:	20006d04 	.word	0x20006d04
 80013ac:	e000ed04 	.word	0xe000ed04

080013b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	for (;;) {
 80013b4:	e7fe      	b.n	80013b4 <Error_Handler+0x4>
	...

080013b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <HAL_MspInit+0x4c>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	4a0f      	ldr	r2, [pc, #60]	; (8001404 <HAL_MspInit+0x4c>)
 80013c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013cc:	6453      	str	r3, [r2, #68]	; 0x44
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <HAL_MspInit+0x4c>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	603b      	str	r3, [r7, #0]
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_MspInit+0x4c>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	4a08      	ldr	r2, [pc, #32]	; (8001404 <HAL_MspInit+0x4c>)
 80013e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_MspInit+0x4c>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800

08001408 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08c      	sub	sp, #48	; 0x30
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a4a      	ldr	r2, [pc, #296]	; (8001550 <HAL_ADC_MspInit+0x148>)
 8001426:	4293      	cmp	r3, r2
 8001428:	f040 808d 	bne.w	8001546 <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800142c:	2300      	movs	r3, #0
 800142e:	61bb      	str	r3, [r7, #24]
 8001430:	4b48      	ldr	r3, [pc, #288]	; (8001554 <HAL_ADC_MspInit+0x14c>)
 8001432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001434:	4a47      	ldr	r2, [pc, #284]	; (8001554 <HAL_ADC_MspInit+0x14c>)
 8001436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143a:	6453      	str	r3, [r2, #68]	; 0x44
 800143c:	4b45      	ldr	r3, [pc, #276]	; (8001554 <HAL_ADC_MspInit+0x14c>)
 800143e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001444:	61bb      	str	r3, [r7, #24]
 8001446:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	4b41      	ldr	r3, [pc, #260]	; (8001554 <HAL_ADC_MspInit+0x14c>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	4a40      	ldr	r2, [pc, #256]	; (8001554 <HAL_ADC_MspInit+0x14c>)
 8001452:	f043 0304 	orr.w	r3, r3, #4
 8001456:	6313      	str	r3, [r2, #48]	; 0x30
 8001458:	4b3e      	ldr	r3, [pc, #248]	; (8001554 <HAL_ADC_MspInit+0x14c>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001464:	2300      	movs	r3, #0
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	4b3a      	ldr	r3, [pc, #232]	; (8001554 <HAL_ADC_MspInit+0x14c>)
 800146a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146c:	4a39      	ldr	r2, [pc, #228]	; (8001554 <HAL_ADC_MspInit+0x14c>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6313      	str	r3, [r2, #48]	; 0x30
 8001474:	4b37      	ldr	r3, [pc, #220]	; (8001554 <HAL_ADC_MspInit+0x14c>)
 8001476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	4b33      	ldr	r3, [pc, #204]	; (8001554 <HAL_ADC_MspInit+0x14c>)
 8001486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001488:	4a32      	ldr	r2, [pc, #200]	; (8001554 <HAL_ADC_MspInit+0x14c>)
 800148a:	f043 0302 	orr.w	r3, r3, #2
 800148e:	6313      	str	r3, [r2, #48]	; 0x30
 8001490:	4b30      	ldr	r3, [pc, #192]	; (8001554 <HAL_ADC_MspInit+0x14c>)
 8001492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC_4_V0_Pin|ADC_4_V1_Pin|GPIO_PIN_2|GPIO_PIN_3
 800149c:	231f      	movs	r3, #31
 800149e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014a0:	2303      	movs	r3, #3
 80014a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	4619      	mov	r1, r3
 80014ae:	482a      	ldr	r0, [pc, #168]	; (8001558 <HAL_ADC_MspInit+0x150>)
 80014b0:	f001 fd16 	bl	8002ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|ADC_1_V0_Pin|GPIO_PIN_3
 80014b4:	233f      	movs	r3, #63	; 0x3f
 80014b6:	61fb      	str	r3, [r7, #28]
                          |ADC_2_V0_Pin|ADC_2_V1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014b8:	2303      	movs	r3, #3
 80014ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	4619      	mov	r1, r3
 80014c6:	4825      	ldr	r0, [pc, #148]	; (800155c <HAL_ADC_MspInit+0x154>)
 80014c8:	f001 fd0a 	bl	8002ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_3_V1_Pin;
 80014cc:	2301      	movs	r3, #1
 80014ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d0:	2303      	movs	r3, #3
 80014d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_3_V1_GPIO_Port, &GPIO_InitStruct);
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	4619      	mov	r1, r3
 80014de:	4820      	ldr	r0, [pc, #128]	; (8001560 <HAL_ADC_MspInit+0x158>)
 80014e0:	f001 fcfe 	bl	8002ee0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80014e4:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <HAL_ADC_MspInit+0x15c>)
 80014e6:	4a20      	ldr	r2, [pc, #128]	; (8001568 <HAL_ADC_MspInit+0x160>)
 80014e8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80014ea:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <HAL_ADC_MspInit+0x15c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014f0:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <HAL_ADC_MspInit+0x15c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014f6:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <HAL_ADC_MspInit+0x15c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014fc:	4b19      	ldr	r3, [pc, #100]	; (8001564 <HAL_ADC_MspInit+0x15c>)
 80014fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001502:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001504:	4b17      	ldr	r3, [pc, #92]	; (8001564 <HAL_ADC_MspInit+0x15c>)
 8001506:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800150a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800150c:	4b15      	ldr	r3, [pc, #84]	; (8001564 <HAL_ADC_MspInit+0x15c>)
 800150e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001512:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001514:	4b13      	ldr	r3, [pc, #76]	; (8001564 <HAL_ADC_MspInit+0x15c>)
 8001516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800151a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <HAL_ADC_MspInit+0x15c>)
 800151e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001522:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <HAL_ADC_MspInit+0x15c>)
 8001526:	2200      	movs	r2, #0
 8001528:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800152a:	480e      	ldr	r0, [pc, #56]	; (8001564 <HAL_ADC_MspInit+0x15c>)
 800152c:	f001 f93a 	bl	80027a4 <HAL_DMA_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 8001536:	f7ff ff3b 	bl	80013b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a09      	ldr	r2, [pc, #36]	; (8001564 <HAL_ADC_MspInit+0x15c>)
 800153e:	639a      	str	r2, [r3, #56]	; 0x38
 8001540:	4a08      	ldr	r2, [pc, #32]	; (8001564 <HAL_ADC_MspInit+0x15c>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001546:	bf00      	nop
 8001548:	3730      	adds	r7, #48	; 0x30
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40012000 	.word	0x40012000
 8001554:	40023800 	.word	0x40023800
 8001558:	40020800 	.word	0x40020800
 800155c:	40020000 	.word	0x40020000
 8001560:	40020400 	.word	0x40020400
 8001564:	200062f8 	.word	0x200062f8
 8001568:	40026410 	.word	0x40026410

0800156c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08c      	sub	sp, #48	; 0x30
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a52      	ldr	r2, [pc, #328]	; (80016d4 <HAL_I2C_MspInit+0x168>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d13c      	bne.n	8001608 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	61bb      	str	r3, [r7, #24]
 8001592:	4b51      	ldr	r3, [pc, #324]	; (80016d8 <HAL_I2C_MspInit+0x16c>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a50      	ldr	r2, [pc, #320]	; (80016d8 <HAL_I2C_MspInit+0x16c>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b4e      	ldr	r3, [pc, #312]	; (80016d8 <HAL_I2C_MspInit+0x16c>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	61bb      	str	r3, [r7, #24]
 80015a8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015aa:	23c0      	movs	r3, #192	; 0xc0
 80015ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ae:	2312      	movs	r3, #18
 80015b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b6:	2303      	movs	r3, #3
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015ba:	2304      	movs	r3, #4
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015be:	f107 031c 	add.w	r3, r7, #28
 80015c2:	4619      	mov	r1, r3
 80015c4:	4845      	ldr	r0, [pc, #276]	; (80016dc <HAL_I2C_MspInit+0x170>)
 80015c6:	f001 fc8b 	bl	8002ee0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	4b42      	ldr	r3, [pc, #264]	; (80016d8 <HAL_I2C_MspInit+0x16c>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	4a41      	ldr	r2, [pc, #260]	; (80016d8 <HAL_I2C_MspInit+0x16c>)
 80015d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015d8:	6413      	str	r3, [r2, #64]	; 0x40
 80015da:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <HAL_I2C_MspInit+0x16c>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2100      	movs	r1, #0
 80015ea:	201f      	movs	r0, #31
 80015ec:	f001 f8b0 	bl	8002750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80015f0:	201f      	movs	r0, #31
 80015f2:	f001 f8c9 	bl	8002788 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	2020      	movs	r0, #32
 80015fc:	f001 f8a8 	bl	8002750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001600:	2020      	movs	r0, #32
 8001602:	f001 f8c1 	bl	8002788 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001606:	e060      	b.n	80016ca <HAL_I2C_MspInit+0x15e>
  else if(hi2c->Instance==I2C3)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a34      	ldr	r2, [pc, #208]	; (80016e0 <HAL_I2C_MspInit+0x174>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d15b      	bne.n	80016ca <HAL_I2C_MspInit+0x15e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	4b30      	ldr	r3, [pc, #192]	; (80016d8 <HAL_I2C_MspInit+0x16c>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a2f      	ldr	r2, [pc, #188]	; (80016d8 <HAL_I2C_MspInit+0x16c>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <HAL_I2C_MspInit+0x16c>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	4b29      	ldr	r3, [pc, #164]	; (80016d8 <HAL_I2C_MspInit+0x16c>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a28      	ldr	r2, [pc, #160]	; (80016d8 <HAL_I2C_MspInit+0x16c>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <HAL_I2C_MspInit+0x16c>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800164a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800164e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001650:	2312      	movs	r3, #18
 8001652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001654:	2301      	movs	r3, #1
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001658:	2303      	movs	r3, #3
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800165c:	2304      	movs	r3, #4
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001660:	f107 031c 	add.w	r3, r7, #28
 8001664:	4619      	mov	r1, r3
 8001666:	481f      	ldr	r0, [pc, #124]	; (80016e4 <HAL_I2C_MspInit+0x178>)
 8001668:	f001 fc3a 	bl	8002ee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800166c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001672:	2312      	movs	r3, #18
 8001674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001676:	2301      	movs	r3, #1
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167a:	2303      	movs	r3, #3
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800167e:	2304      	movs	r3, #4
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001682:	f107 031c 	add.w	r3, r7, #28
 8001686:	4619      	mov	r1, r3
 8001688:	4817      	ldr	r0, [pc, #92]	; (80016e8 <HAL_I2C_MspInit+0x17c>)
 800168a:	f001 fc29 	bl	8002ee0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <HAL_I2C_MspInit+0x16c>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	4a10      	ldr	r2, [pc, #64]	; (80016d8 <HAL_I2C_MspInit+0x16c>)
 8001698:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800169c:	6413      	str	r3, [r2, #64]	; 0x40
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <HAL_I2C_MspInit+0x16c>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2105      	movs	r1, #5
 80016ae:	2048      	movs	r0, #72	; 0x48
 80016b0:	f001 f84e 	bl	8002750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80016b4:	2048      	movs	r0, #72	; 0x48
 80016b6:	f001 f867 	bl	8002788 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2105      	movs	r1, #5
 80016be:	2049      	movs	r0, #73	; 0x49
 80016c0:	f001 f846 	bl	8002750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80016c4:	2049      	movs	r0, #73	; 0x49
 80016c6:	f001 f85f 	bl	8002788 <HAL_NVIC_EnableIRQ>
}
 80016ca:	bf00      	nop
 80016cc:	3730      	adds	r7, #48	; 0x30
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40005400 	.word	0x40005400
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020400 	.word	0x40020400
 80016e0:	40005c00 	.word	0x40005c00
 80016e4:	40020800 	.word	0x40020800
 80016e8:	40020000 	.word	0x40020000

080016ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a05      	ldr	r2, [pc, #20]	; (8001710 <HAL_RTC_MspInit+0x24>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d102      	bne.n	8001704 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016fe:	4b05      	ldr	r3, [pc, #20]	; (8001714 <HAL_RTC_MspInit+0x28>)
 8001700:	2201      	movs	r2, #1
 8001702:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	40002800 	.word	0x40002800
 8001714:	42470e3c 	.word	0x42470e3c

08001718 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a36      	ldr	r2, [pc, #216]	; (8001800 <HAL_TIM_Base_MspInit+0xe8>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d116      	bne.n	8001758 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
 800172e:	4b35      	ldr	r3, [pc, #212]	; (8001804 <HAL_TIM_Base_MspInit+0xec>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	4a34      	ldr	r2, [pc, #208]	; (8001804 <HAL_TIM_Base_MspInit+0xec>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6453      	str	r3, [r2, #68]	; 0x44
 800173a:	4b32      	ldr	r3, [pc, #200]	; (8001804 <HAL_TIM_Base_MspInit+0xec>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	61fb      	str	r3, [r7, #28]
 8001744:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 7, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2107      	movs	r1, #7
 800174a:	2019      	movs	r0, #25
 800174c:	f001 f800 	bl	8002750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001750:	2019      	movs	r0, #25
 8001752:	f001 f819 	bl	8002788 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001756:	e04e      	b.n	80017f6 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001760:	d10e      	bne.n	8001780 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
 8001766:	4b27      	ldr	r3, [pc, #156]	; (8001804 <HAL_TIM_Base_MspInit+0xec>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	4a26      	ldr	r2, [pc, #152]	; (8001804 <HAL_TIM_Base_MspInit+0xec>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6413      	str	r3, [r2, #64]	; 0x40
 8001772:	4b24      	ldr	r3, [pc, #144]	; (8001804 <HAL_TIM_Base_MspInit+0xec>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	61bb      	str	r3, [r7, #24]
 800177c:	69bb      	ldr	r3, [r7, #24]
}
 800177e:	e03a      	b.n	80017f6 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a20      	ldr	r2, [pc, #128]	; (8001808 <HAL_TIM_Base_MspInit+0xf0>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d10e      	bne.n	80017a8 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <HAL_TIM_Base_MspInit+0xec>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	4a1c      	ldr	r2, [pc, #112]	; (8001804 <HAL_TIM_Base_MspInit+0xec>)
 8001794:	f043 0302 	orr.w	r3, r3, #2
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
 800179a:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <HAL_TIM_Base_MspInit+0xec>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	697b      	ldr	r3, [r7, #20]
}
 80017a6:	e026      	b.n	80017f6 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM8)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a17      	ldr	r2, [pc, #92]	; (800180c <HAL_TIM_Base_MspInit+0xf4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d10e      	bne.n	80017d0 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <HAL_TIM_Base_MspInit+0xec>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	4a12      	ldr	r2, [pc, #72]	; (8001804 <HAL_TIM_Base_MspInit+0xec>)
 80017bc:	f043 0302 	orr.w	r3, r3, #2
 80017c0:	6453      	str	r3, [r2, #68]	; 0x44
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <HAL_TIM_Base_MspInit+0xec>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]
}
 80017ce:	e012      	b.n	80017f6 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM12)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a0e      	ldr	r2, [pc, #56]	; (8001810 <HAL_TIM_Base_MspInit+0xf8>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d10d      	bne.n	80017f6 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <HAL_TIM_Base_MspInit+0xec>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	4a08      	ldr	r2, [pc, #32]	; (8001804 <HAL_TIM_Base_MspInit+0xec>)
 80017e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017e8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_TIM_Base_MspInit+0xec>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
}
 80017f6:	bf00      	nop
 80017f8:	3720      	adds	r7, #32
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40010000 	.word	0x40010000
 8001804:	40023800 	.word	0x40023800
 8001808:	40000400 	.word	0x40000400
 800180c:	40010400 	.word	0x40010400
 8001810:	40001800 	.word	0x40001800

08001814 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	; 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a19      	ldr	r2, [pc, #100]	; (8001898 <HAL_TIM_Encoder_MspInit+0x84>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d12c      	bne.n	8001890 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	4b18      	ldr	r3, [pc, #96]	; (800189c <HAL_TIM_Encoder_MspInit+0x88>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	4a17      	ldr	r2, [pc, #92]	; (800189c <HAL_TIM_Encoder_MspInit+0x88>)
 8001840:	f043 0304 	orr.w	r3, r3, #4
 8001844:	6413      	str	r3, [r2, #64]	; 0x40
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <HAL_TIM_Encoder_MspInit+0x88>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f003 0304 	and.w	r3, r3, #4
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <HAL_TIM_Encoder_MspInit+0x88>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a10      	ldr	r2, [pc, #64]	; (800189c <HAL_TIM_Encoder_MspInit+0x88>)
 800185c:	f043 0308 	orr.w	r3, r3, #8
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_TIM_Encoder_MspInit+0x88>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ROT1_Pin|ROT2_Pin;
 800186e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001878:	2301      	movs	r3, #1
 800187a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001880:	2302      	movs	r3, #2
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	4805      	ldr	r0, [pc, #20]	; (80018a0 <HAL_TIM_Encoder_MspInit+0x8c>)
 800188c:	f001 fb28 	bl	8002ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001890:	bf00      	nop
 8001892:	3728      	adds	r7, #40	; 0x28
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40000800 	.word	0x40000800
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020c00 	.word	0x40020c00

080018a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08c      	sub	sp, #48	; 0x30
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a59      	ldr	r2, [pc, #356]	; (8001a28 <HAL_TIM_MspPostInit+0x184>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d11f      	bne.n	8001906 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	61bb      	str	r3, [r7, #24]
 80018ca:	4b58      	ldr	r3, [pc, #352]	; (8001a2c <HAL_TIM_MspPostInit+0x188>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a57      	ldr	r2, [pc, #348]	; (8001a2c <HAL_TIM_MspPostInit+0x188>)
 80018d0:	f043 0310 	orr.w	r3, r3, #16
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b55      	ldr	r3, [pc, #340]	; (8001a2c <HAL_TIM_MspPostInit+0x188>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0310 	and.w	r3, r3, #16
 80018de:	61bb      	str	r3, [r7, #24]
 80018e0:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_0_1_Pin|PWM_0_1E11_Pin|PWM_1_0_Pin|PWM_1_1_Pin;
 80018e2:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80018e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80018f0:	2301      	movs	r3, #1
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018f4:	2301      	movs	r3, #1
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	4619      	mov	r1, r3
 80018fe:	484c      	ldr	r0, [pc, #304]	; (8001a30 <HAL_TIM_MspPostInit+0x18c>)
 8001900:	f001 faee 	bl	8002ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001904:	e08b      	b.n	8001a1e <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM2)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800190e:	d11f      	bne.n	8001950 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	4b45      	ldr	r3, [pc, #276]	; (8001a2c <HAL_TIM_MspPostInit+0x188>)
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	4a44      	ldr	r2, [pc, #272]	; (8001a2c <HAL_TIM_MspPostInit+0x188>)
 800191a:	f043 0302 	orr.w	r3, r3, #2
 800191e:	6313      	str	r3, [r2, #48]	; 0x30
 8001920:	4b42      	ldr	r3, [pc, #264]	; (8001a2c <HAL_TIM_MspPostInit+0x188>)
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_2_0_Pin|PWM_2_1_Pin;
 800192c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800193e:	2301      	movs	r3, #1
 8001940:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001942:	f107 031c 	add.w	r3, r7, #28
 8001946:	4619      	mov	r1, r3
 8001948:	483a      	ldr	r0, [pc, #232]	; (8001a34 <HAL_TIM_MspPostInit+0x190>)
 800194a:	f001 fac9 	bl	8002ee0 <HAL_GPIO_Init>
}
 800194e:	e066      	b.n	8001a1e <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM3)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a38      	ldr	r2, [pc, #224]	; (8001a38 <HAL_TIM_MspPostInit+0x194>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d13d      	bne.n	80019d6 <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	4b33      	ldr	r3, [pc, #204]	; (8001a2c <HAL_TIM_MspPostInit+0x188>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a32      	ldr	r2, [pc, #200]	; (8001a2c <HAL_TIM_MspPostInit+0x188>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b30      	ldr	r3, [pc, #192]	; (8001a2c <HAL_TIM_MspPostInit+0x188>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	4b2c      	ldr	r3, [pc, #176]	; (8001a2c <HAL_TIM_MspPostInit+0x188>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a2b      	ldr	r2, [pc, #172]	; (8001a2c <HAL_TIM_MspPostInit+0x188>)
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b29      	ldr	r3, [pc, #164]	; (8001a2c <HAL_TIM_MspPostInit+0x188>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_4_1_Pin;
 8001992:	2302      	movs	r3, #2
 8001994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019a2:	2302      	movs	r3, #2
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM_4_1_GPIO_Port, &GPIO_InitStruct);
 80019a6:	f107 031c 	add.w	r3, r7, #28
 80019aa:	4619      	mov	r1, r3
 80019ac:	4821      	ldr	r0, [pc, #132]	; (8001a34 <HAL_TIM_MspPostInit+0x190>)
 80019ae:	f001 fa97 	bl	8002ee0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_3_0_Pin|PWM_3_1_Pin|PWM_4_0_Pin;
 80019b2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80019b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b8:	2302      	movs	r3, #2
 80019ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c0:	2300      	movs	r3, #0
 80019c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019c4:	2302      	movs	r3, #2
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c8:	f107 031c 	add.w	r3, r7, #28
 80019cc:	4619      	mov	r1, r3
 80019ce:	481b      	ldr	r0, [pc, #108]	; (8001a3c <HAL_TIM_MspPostInit+0x198>)
 80019d0:	f001 fa86 	bl	8002ee0 <HAL_GPIO_Init>
}
 80019d4:	e023      	b.n	8001a1e <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM12)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a19      	ldr	r2, [pc, #100]	; (8001a40 <HAL_TIM_MspPostInit+0x19c>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d11e      	bne.n	8001a1e <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e0:	2300      	movs	r3, #0
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <HAL_TIM_MspPostInit+0x188>)
 80019e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e8:	4a10      	ldr	r2, [pc, #64]	; (8001a2c <HAL_TIM_MspPostInit+0x188>)
 80019ea:	f043 0302 	orr.w	r3, r3, #2
 80019ee:	6313      	str	r3, [r2, #48]	; 0x30
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <HAL_TIM_MspPostInit+0x188>)
 80019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_5_0_Pin|PWM_5_1_Pin;
 80019fc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001a0e:	2309      	movs	r3, #9
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a12:	f107 031c 	add.w	r3, r7, #28
 8001a16:	4619      	mov	r1, r3
 8001a18:	4806      	ldr	r0, [pc, #24]	; (8001a34 <HAL_TIM_MspPostInit+0x190>)
 8001a1a:	f001 fa61 	bl	8002ee0 <HAL_GPIO_Init>
}
 8001a1e:	bf00      	nop
 8001a20:	3730      	adds	r7, #48	; 0x30
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40010000 	.word	0x40010000
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40020400 	.word	0x40020400
 8001a38:	40000400 	.word	0x40000400
 8001a3c:	40020800 	.word	0x40020800
 8001a40:	40001800 	.word	0x40001800

08001a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	; 0x28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a1d      	ldr	r2, [pc, #116]	; (8001ad8 <HAL_UART_MspInit+0x94>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d134      	bne.n	8001ad0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	4b1c      	ldr	r3, [pc, #112]	; (8001adc <HAL_UART_MspInit+0x98>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	4a1b      	ldr	r2, [pc, #108]	; (8001adc <HAL_UART_MspInit+0x98>)
 8001a70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a74:	6413      	str	r3, [r2, #64]	; 0x40
 8001a76:	4b19      	ldr	r3, [pc, #100]	; (8001adc <HAL_UART_MspInit+0x98>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <HAL_UART_MspInit+0x98>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a14      	ldr	r2, [pc, #80]	; (8001adc <HAL_UART_MspInit+0x98>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_UART_MspInit+0x98>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a9e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aac:	2303      	movs	r3, #3
 8001aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ab0:	2308      	movs	r3, #8
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4809      	ldr	r0, [pc, #36]	; (8001ae0 <HAL_UART_MspInit+0x9c>)
 8001abc:	f001 fa10 	bl	8002ee0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2105      	movs	r1, #5
 8001ac4:	2034      	movs	r0, #52	; 0x34
 8001ac6:	f000 fe43 	bl	8002750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001aca:	2034      	movs	r0, #52	; 0x34
 8001acc:	f000 fe5c 	bl	8002788 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001ad0:	bf00      	nop
 8001ad2:	3728      	adds	r7, #40	; 0x28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40004c00 	.word	0x40004c00
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020800 	.word	0x40020800

08001ae4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08c      	sub	sp, #48	; 0x30
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001af4:	2200      	movs	r2, #0
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	2037      	movs	r0, #55	; 0x37
 8001afa:	f000 fe29 	bl	8002750 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001afe:	2037      	movs	r0, #55	; 0x37
 8001b00:	f000 fe42 	bl	8002788 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	4b1f      	ldr	r3, [pc, #124]	; (8001b88 <HAL_InitTick+0xa4>)
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	4a1e      	ldr	r2, [pc, #120]	; (8001b88 <HAL_InitTick+0xa4>)
 8001b0e:	f043 0320 	orr.w	r3, r3, #32
 8001b12:	6413      	str	r3, [r2, #64]	; 0x40
 8001b14:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <HAL_InitTick+0xa4>)
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	f003 0320 	and.w	r3, r3, #32
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b20:	f107 0210 	add.w	r2, r7, #16
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4611      	mov	r1, r2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f005 ffb6 	bl	8007a9c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001b30:	f005 ff8c 	bl	8007a4c <HAL_RCC_GetPCLK1Freq>
 8001b34:	4603      	mov	r3, r0
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3c:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <HAL_InitTick+0xa8>)
 8001b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b42:	0c9b      	lsrs	r3, r3, #18
 8001b44:	3b01      	subs	r3, #1
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HAL_InitTick+0xac>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <HAL_InitTick+0xb0>)
 8001b4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <HAL_InitTick+0xac>)
 8001b50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b54:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001b56:	4a0e      	ldr	r2, [pc, #56]	; (8001b90 <HAL_InitTick+0xac>)
 8001b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_InitTick+0xac>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_InitTick+0xac>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001b68:	4809      	ldr	r0, [pc, #36]	; (8001b90 <HAL_InitTick+0xac>)
 8001b6a:	f006 f990 	bl	8007e8e <HAL_TIM_Base_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d104      	bne.n	8001b7e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001b74:	4806      	ldr	r0, [pc, #24]	; (8001b90 <HAL_InitTick+0xac>)
 8001b76:	f006 f9d9 	bl	8007f2c <HAL_TIM_Base_Start_IT>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	e000      	b.n	8001b80 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3730      	adds	r7, #48	; 0x30
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	431bde83 	.word	0x431bde83
 8001b90:	20006f48 	.word	0x20006f48
 8001b94:	40001400 	.word	0x40001400

08001b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001baa:	e7fe      	b.n	8001baa <HardFault_Handler+0x4>

08001bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <MemManage_Handler+0x4>

08001bb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb6:	e7fe      	b.n	8001bb6 <BusFault_Handler+0x4>

08001bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bbc:	e7fe      	b.n	8001bbc <UsageFault_Handler+0x4>

08001bbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bd0:	4802      	ldr	r0, [pc, #8]	; (8001bdc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001bd2:	f006 fb64 	bl	800829e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20006778 	.word	0x20006778

08001be0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001be4:	4802      	ldr	r0, [pc, #8]	; (8001bf0 <I2C1_EV_IRQHandler+0x10>)
 8001be6:	f002 f973 	bl	8003ed0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20005d60 	.word	0x20005d60

08001bf4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <I2C1_ER_IRQHandler+0x10>)
 8001bfa:	f002 fad6 	bl	80041aa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20005d60 	.word	0x20005d60

08001c08 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001c0c:	4802      	ldr	r0, [pc, #8]	; (8001c18 <UART4_IRQHandler+0x10>)
 8001c0e:	f007 fafd 	bl	800920c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20006c20 	.word	0x20006c20

08001c1c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <TIM7_IRQHandler+0x10>)
 8001c22:	f006 fb3c 	bl	800829e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20006f48 	.word	0x20006f48

08001c30 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c34:	4802      	ldr	r0, [pc, #8]	; (8001c40 <DMA2_Stream0_IRQHandler+0x10>)
 8001c36:	f000 fedd 	bl	80029f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	200062f8 	.word	0x200062f8

08001c44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c48:	4802      	ldr	r0, [pc, #8]	; (8001c54 <OTG_FS_IRQHandler+0x10>)
 8001c4a:	f004 fa91 	bl	8006170 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	2000849c 	.word	0x2000849c

08001c58 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001c5c:	4802      	ldr	r0, [pc, #8]	; (8001c68 <I2C3_EV_IRQHandler+0x10>)
 8001c5e:	f002 f937 	bl	8003ed0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200055f4 	.word	0x200055f4

08001c6c <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001c70:	4802      	ldr	r0, [pc, #8]	; (8001c7c <I2C3_ER_IRQHandler+0x10>)
 8001c72:	f002 fa9a 	bl	80041aa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200055f4 	.word	0x200055f4

08001c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c88:	4a14      	ldr	r2, [pc, #80]	; (8001cdc <_sbrk+0x5c>)
 8001c8a:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <_sbrk+0x60>)
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c94:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <_sbrk+0x64>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d102      	bne.n	8001ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <_sbrk+0x64>)
 8001c9e:	4a12      	ldr	r2, [pc, #72]	; (8001ce8 <_sbrk+0x68>)
 8001ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <_sbrk+0x64>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d207      	bcs.n	8001cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb0:	f016 ffa2 	bl	8018bf8 <__errno>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	230c      	movs	r3, #12
 8001cb8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cbe:	e009      	b.n	8001cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <_sbrk+0x64>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cc6:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <_sbrk+0x64>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	4a05      	ldr	r2, [pc, #20]	; (8001ce4 <_sbrk+0x64>)
 8001cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20020000 	.word	0x20020000
 8001ce0:	00000400 	.word	0x00000400
 8001ce4:	20000600 	.word	0x20000600
 8001ce8:	20008ef8 	.word	0x20008ef8

08001cec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf0:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <SystemInit+0x28>)
 8001cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf6:	4a07      	ldr	r2, [pc, #28]	; (8001d14 <SystemInit+0x28>)
 8001cf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d00:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <SystemInit+0x28>)
 8001d02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d06:	609a      	str	r2, [r3, #8]
#endif
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d1e:	e003      	b.n	8001d28 <LoopCopyDataInit>

08001d20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d26:	3104      	adds	r1, #4

08001d28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d28:	480b      	ldr	r0, [pc, #44]	; (8001d58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d30:	d3f6      	bcc.n	8001d20 <CopyDataInit>
  ldr  r2, =_sbss
 8001d32:	4a0b      	ldr	r2, [pc, #44]	; (8001d60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d34:	e002      	b.n	8001d3c <LoopFillZerobss>

08001d36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d38:	f842 3b04 	str.w	r3, [r2], #4

08001d3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d40:	d3f9      	bcc.n	8001d36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d42:	f7ff ffd3 	bl	8001cec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d46:	f016 ff5d 	bl	8018c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d4a:	f7fe fc19 	bl	8000580 <main>
  bx  lr    
 8001d4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d50:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d54:	0801b7b4 	.word	0x0801b7b4
  ldr  r0, =_sdata
 8001d58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d5c:	200005dc 	.word	0x200005dc
  ldr  r2, =_sbss
 8001d60:	200005e0 	.word	0x200005e0
  ldr  r3, = _ebss
 8001d64:	20008ef8 	.word	0x20008ef8

08001d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d68:	e7fe      	b.n	8001d68 <ADC_IRQHandler>
	...

08001d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d70:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <HAL_Init+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0d      	ldr	r2, [pc, #52]	; (8001dac <HAL_Init+0x40>)
 8001d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <HAL_Init+0x40>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <HAL_Init+0x40>)
 8001d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <HAL_Init+0x40>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a07      	ldr	r2, [pc, #28]	; (8001dac <HAL_Init+0x40>)
 8001d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d94:	2003      	movs	r0, #3
 8001d96:	f000 fcd0 	bl	800273a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f7ff fea2 	bl	8001ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da0:	f7ff fb0a 	bl	80013b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023c00 	.word	0x40023c00

08001db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_IncTick+0x20>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_IncTick+0x24>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <HAL_IncTick+0x24>)
 8001dc2:	6013      	str	r3, [r2, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000008 	.word	0x20000008
 8001dd4:	20006f88 	.word	0x20006f88

08001dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return uwTick;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <HAL_GetTick+0x14>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20006f88 	.word	0x20006f88

08001df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df8:	f7ff ffee 	bl	8001dd8 <HAL_GetTick>
 8001dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e08:	d005      	beq.n	8001e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <HAL_Delay+0x40>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e16:	bf00      	nop
 8001e18:	f7ff ffde 	bl	8001dd8 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d8f7      	bhi.n	8001e18 <HAL_Delay+0x28>
  {
  }
}
 8001e28:	bf00      	nop
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000008 	.word	0x20000008

08001e34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e033      	b.n	8001eb2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d109      	bne.n	8001e66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff fad8 	bl	8001408 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d118      	bne.n	8001ea4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e7a:	f023 0302 	bic.w	r3, r3, #2
 8001e7e:	f043 0202 	orr.w	r2, r3, #2
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 fa2c 	bl	80022e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f023 0303 	bic.w	r3, r3, #3
 8001e9a:	f043 0201 	orr.w	r2, r3, #1
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ea2:	e001      	b.n	8001ea8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d101      	bne.n	8001eda <HAL_ADC_Start_DMA+0x1e>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e0cc      	b.n	8002074 <HAL_ADC_Start_DMA+0x1b8>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d018      	beq.n	8001f22 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f00:	4b5e      	ldr	r3, [pc, #376]	; (800207c <HAL_ADC_Start_DMA+0x1c0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a5e      	ldr	r2, [pc, #376]	; (8002080 <HAL_ADC_Start_DMA+0x1c4>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	0c9a      	lsrs	r2, r3, #18
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4413      	add	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001f14:	e002      	b.n	8001f1c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f9      	bne.n	8001f16 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	f040 80a0 	bne.w	8002072 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f3a:	f023 0301 	bic.w	r3, r3, #1
 8001f3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d007      	beq.n	8001f64 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f5c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f70:	d106      	bne.n	8001f80 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f76:	f023 0206 	bic.w	r2, r3, #6
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	645a      	str	r2, [r3, #68]	; 0x44
 8001f7e:	e002      	b.n	8001f86 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f8e:	4b3d      	ldr	r3, [pc, #244]	; (8002084 <HAL_ADC_Start_DMA+0x1c8>)
 8001f90:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f96:	4a3c      	ldr	r2, [pc, #240]	; (8002088 <HAL_ADC_Start_DMA+0x1cc>)
 8001f98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9e:	4a3b      	ldr	r2, [pc, #236]	; (800208c <HAL_ADC_Start_DMA+0x1d0>)
 8001fa0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa6:	4a3a      	ldr	r2, [pc, #232]	; (8002090 <HAL_ADC_Start_DMA+0x1d4>)
 8001fa8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001fb2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001fc2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fd2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	334c      	adds	r3, #76	; 0x4c
 8001fde:	4619      	mov	r1, r3
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f000 fc8c 	bl	8002900 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d12a      	bne.n	800204a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a26      	ldr	r2, [pc, #152]	; (8002094 <HAL_ADC_Start_DMA+0x1d8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d015      	beq.n	800202a <HAL_ADC_Start_DMA+0x16e>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a25      	ldr	r2, [pc, #148]	; (8002098 <HAL_ADC_Start_DMA+0x1dc>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d105      	bne.n	8002014 <HAL_ADC_Start_DMA+0x158>
 8002008:	4b1e      	ldr	r3, [pc, #120]	; (8002084 <HAL_ADC_Start_DMA+0x1c8>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 031f 	and.w	r3, r3, #31
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00a      	beq.n	800202a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a20      	ldr	r2, [pc, #128]	; (800209c <HAL_ADC_Start_DMA+0x1e0>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d129      	bne.n	8002072 <HAL_ADC_Start_DMA+0x1b6>
 800201e:	4b19      	ldr	r3, [pc, #100]	; (8002084 <HAL_ADC_Start_DMA+0x1c8>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 031f 	and.w	r3, r3, #31
 8002026:	2b0f      	cmp	r3, #15
 8002028:	d823      	bhi.n	8002072 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d11c      	bne.n	8002072 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	e013      	b.n	8002072 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a11      	ldr	r2, [pc, #68]	; (8002094 <HAL_ADC_Start_DMA+0x1d8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d10e      	bne.n	8002072 <HAL_ADC_Start_DMA+0x1b6>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d107      	bne.n	8002072 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002070:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3718      	adds	r7, #24
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20000000 	.word	0x20000000
 8002080:	431bde83 	.word	0x431bde83
 8002084:	40012300 	.word	0x40012300
 8002088:	080024dd 	.word	0x080024dd
 800208c:	08002597 	.word	0x08002597
 8002090:	080025b3 	.word	0x080025b3
 8002094:	40012000 	.word	0x40012000
 8002098:	40012100 	.word	0x40012100
 800209c:	40012200 	.word	0x40012200

080020a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x1c>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e105      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x228>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b09      	cmp	r3, #9
 80020ca:	d925      	bls.n	8002118 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68d9      	ldr	r1, [r3, #12]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	4613      	mov	r3, r2
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4413      	add	r3, r2
 80020e0:	3b1e      	subs	r3, #30
 80020e2:	2207      	movs	r2, #7
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43da      	mvns	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	400a      	ands	r2, r1
 80020f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68d9      	ldr	r1, [r3, #12]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	b29b      	uxth	r3, r3
 8002102:	4618      	mov	r0, r3
 8002104:	4603      	mov	r3, r0
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4403      	add	r3, r0
 800210a:	3b1e      	subs	r3, #30
 800210c:	409a      	lsls	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	e022      	b.n	800215e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6919      	ldr	r1, [r3, #16]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	b29b      	uxth	r3, r3
 8002124:	461a      	mov	r2, r3
 8002126:	4613      	mov	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4413      	add	r3, r2
 800212c:	2207      	movs	r2, #7
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43da      	mvns	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	400a      	ands	r2, r1
 800213a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6919      	ldr	r1, [r3, #16]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	689a      	ldr	r2, [r3, #8]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	b29b      	uxth	r3, r3
 800214c:	4618      	mov	r0, r3
 800214e:	4603      	mov	r3, r0
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	4403      	add	r3, r0
 8002154:	409a      	lsls	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b06      	cmp	r3, #6
 8002164:	d824      	bhi.n	80021b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	3b05      	subs	r3, #5
 8002178:	221f      	movs	r2, #31
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43da      	mvns	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	400a      	ands	r2, r1
 8002186:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	b29b      	uxth	r3, r3
 8002194:	4618      	mov	r0, r3
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	3b05      	subs	r3, #5
 80021a2:	fa00 f203 	lsl.w	r2, r0, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	635a      	str	r2, [r3, #52]	; 0x34
 80021ae:	e04c      	b.n	800224a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b0c      	cmp	r3, #12
 80021b6:	d824      	bhi.n	8002202 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	3b23      	subs	r3, #35	; 0x23
 80021ca:	221f      	movs	r2, #31
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43da      	mvns	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	400a      	ands	r2, r1
 80021d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	4618      	mov	r0, r3
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	3b23      	subs	r3, #35	; 0x23
 80021f4:	fa00 f203 	lsl.w	r2, r0, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002200:	e023      	b.n	800224a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	3b41      	subs	r3, #65	; 0x41
 8002214:	221f      	movs	r2, #31
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43da      	mvns	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	400a      	ands	r2, r1
 8002222:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	b29b      	uxth	r3, r3
 8002230:	4618      	mov	r0, r3
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	3b41      	subs	r3, #65	; 0x41
 800223e:	fa00 f203 	lsl.w	r2, r0, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800224a:	4b22      	ldr	r3, [pc, #136]	; (80022d4 <HAL_ADC_ConfigChannel+0x234>)
 800224c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a21      	ldr	r2, [pc, #132]	; (80022d8 <HAL_ADC_ConfigChannel+0x238>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d109      	bne.n	800226c <HAL_ADC_ConfigChannel+0x1cc>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b12      	cmp	r3, #18
 800225e:	d105      	bne.n	800226c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a19      	ldr	r2, [pc, #100]	; (80022d8 <HAL_ADC_ConfigChannel+0x238>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d123      	bne.n	80022be <HAL_ADC_ConfigChannel+0x21e>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b10      	cmp	r3, #16
 800227c:	d003      	beq.n	8002286 <HAL_ADC_ConfigChannel+0x1e6>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2b11      	cmp	r3, #17
 8002284:	d11b      	bne.n	80022be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b10      	cmp	r3, #16
 8002298:	d111      	bne.n	80022be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <HAL_ADC_ConfigChannel+0x23c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a10      	ldr	r2, [pc, #64]	; (80022e0 <HAL_ADC_ConfigChannel+0x240>)
 80022a0:	fba2 2303 	umull	r2, r3, r2, r3
 80022a4:	0c9a      	lsrs	r2, r3, #18
 80022a6:	4613      	mov	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4413      	add	r3, r2
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022b0:	e002      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f9      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	40012300 	.word	0x40012300
 80022d8:	40012000 	.word	0x40012000
 80022dc:	20000000 	.word	0x20000000
 80022e0:	431bde83 	.word	0x431bde83

080022e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022ec:	4b79      	ldr	r3, [pc, #484]	; (80024d4 <ADC_Init+0x1f0>)
 80022ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	431a      	orrs	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002318:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6859      	ldr	r1, [r3, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	021a      	lsls	r2, r3, #8
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800233c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6859      	ldr	r1, [r3, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800235e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6899      	ldr	r1, [r3, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002376:	4a58      	ldr	r2, [pc, #352]	; (80024d8 <ADC_Init+0x1f4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d022      	beq.n	80023c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800238a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6899      	ldr	r1, [r3, #8]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6899      	ldr	r1, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	e00f      	b.n	80023e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0202 	bic.w	r2, r2, #2
 80023f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6899      	ldr	r1, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	7e1b      	ldrb	r3, [r3, #24]
 80023fc:	005a      	lsls	r2, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3020 	ldrb.w	r3, [r3, #32]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d01b      	beq.n	8002448 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800241e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800242e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6859      	ldr	r1, [r3, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	3b01      	subs	r3, #1
 800243c:	035a      	lsls	r2, r3, #13
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	e007      	b.n	8002458 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002456:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002466:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	3b01      	subs	r3, #1
 8002474:	051a      	lsls	r2, r3, #20
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800248c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6899      	ldr	r1, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800249a:	025a      	lsls	r2, r3, #9
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6899      	ldr	r1, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	029a      	lsls	r2, r3, #10
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	609a      	str	r2, [r3, #8]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	40012300 	.word	0x40012300
 80024d8:	0f000001 	.word	0x0f000001

080024dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d13c      	bne.n	8002570 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d12b      	bne.n	8002568 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002514:	2b00      	cmp	r3, #0
 8002516:	d127      	bne.n	8002568 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002522:	2b00      	cmp	r3, #0
 8002524:	d006      	beq.n	8002534 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002530:	2b00      	cmp	r3, #0
 8002532:	d119      	bne.n	8002568 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0220 	bic.w	r2, r2, #32
 8002542:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d105      	bne.n	8002568 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	f043 0201 	orr.w	r2, r3, #1
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f015 fe23 	bl	80181b4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800256e:	e00e      	b.n	800258e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f015 fe6d 	bl	801825c <HAL_ADC_ErrorCallback>
}
 8002582:	e004      	b.n	800258e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	4798      	blx	r3
}
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b084      	sub	sp, #16
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f015 fe2f 	bl	8018208 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b084      	sub	sp, #16
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025be:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2240      	movs	r2, #64	; 0x40
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	f043 0204 	orr.w	r2, r3, #4
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f015 fe42 	bl	801825c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025d8:	bf00      	nop
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025fc:	4013      	ands	r3, r2
 80025fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002608:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800260c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002612:	4a04      	ldr	r2, [pc, #16]	; (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	60d3      	str	r3, [r2, #12]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800262c:	4b04      	ldr	r3, [pc, #16]	; (8002640 <__NVIC_GetPriorityGrouping+0x18>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	0a1b      	lsrs	r3, r3, #8
 8002632:	f003 0307 	and.w	r3, r3, #7
}
 8002636:	4618      	mov	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	2b00      	cmp	r3, #0
 8002654:	db0b      	blt.n	800266e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	f003 021f 	and.w	r2, r3, #31
 800265c:	4907      	ldr	r1, [pc, #28]	; (800267c <__NVIC_EnableIRQ+0x38>)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	2001      	movs	r0, #1
 8002666:	fa00 f202 	lsl.w	r2, r0, r2
 800266a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000e100 	.word	0xe000e100

08002680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002690:	2b00      	cmp	r3, #0
 8002692:	db0a      	blt.n	80026aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	b2da      	uxtb	r2, r3
 8002698:	490c      	ldr	r1, [pc, #48]	; (80026cc <__NVIC_SetPriority+0x4c>)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	0112      	lsls	r2, r2, #4
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	440b      	add	r3, r1
 80026a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a8:	e00a      	b.n	80026c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4908      	ldr	r1, [pc, #32]	; (80026d0 <__NVIC_SetPriority+0x50>)
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	3b04      	subs	r3, #4
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	440b      	add	r3, r1
 80026be:	761a      	strb	r2, [r3, #24]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000e100 	.word	0xe000e100
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b089      	sub	sp, #36	; 0x24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f1c3 0307 	rsb	r3, r3, #7
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	bf28      	it	cs
 80026f2:	2304      	movcs	r3, #4
 80026f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3304      	adds	r3, #4
 80026fa:	2b06      	cmp	r3, #6
 80026fc:	d902      	bls.n	8002704 <NVIC_EncodePriority+0x30>
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3b03      	subs	r3, #3
 8002702:	e000      	b.n	8002706 <NVIC_EncodePriority+0x32>
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002708:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43da      	mvns	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	401a      	ands	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800271c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	fa01 f303 	lsl.w	r3, r1, r3
 8002726:	43d9      	mvns	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	4313      	orrs	r3, r2
         );
}
 800272e:	4618      	mov	r0, r3
 8002730:	3724      	adds	r7, #36	; 0x24
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff ff4c 	bl	80025e0 <__NVIC_SetPriorityGrouping>
}
 8002748:	bf00      	nop
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
 800275c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002762:	f7ff ff61 	bl	8002628 <__NVIC_GetPriorityGrouping>
 8002766:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	68b9      	ldr	r1, [r7, #8]
 800276c:	6978      	ldr	r0, [r7, #20]
 800276e:	f7ff ffb1 	bl	80026d4 <NVIC_EncodePriority>
 8002772:	4602      	mov	r2, r0
 8002774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002778:	4611      	mov	r1, r2
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff ff80 	bl	8002680 <__NVIC_SetPriority>
}
 8002780:	bf00      	nop
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff ff54 	bl	8002644 <__NVIC_EnableIRQ>
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027b0:	f7ff fb12 	bl	8001dd8 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e099      	b.n	80028f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0201 	bic.w	r2, r2, #1
 80027de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027e0:	e00f      	b.n	8002802 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027e2:	f7ff faf9 	bl	8001dd8 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b05      	cmp	r3, #5
 80027ee:	d908      	bls.n	8002802 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2220      	movs	r2, #32
 80027f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2203      	movs	r2, #3
 80027fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e078      	b.n	80028f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1e8      	bne.n	80027e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	4b38      	ldr	r3, [pc, #224]	; (80028fc <HAL_DMA_Init+0x158>)
 800281c:	4013      	ands	r3, r2
 800281e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800282e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800283a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002846:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	4313      	orrs	r3, r2
 8002852:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	2b04      	cmp	r3, #4
 800285a:	d107      	bne.n	800286c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	4313      	orrs	r3, r2
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	4313      	orrs	r3, r2
 800286a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f023 0307 	bic.w	r3, r3, #7
 8002882:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	4313      	orrs	r3, r2
 800288c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	2b04      	cmp	r3, #4
 8002894:	d117      	bne.n	80028c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	4313      	orrs	r3, r2
 800289e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00e      	beq.n	80028c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 fa9f 	bl	8002dec <DMA_CheckFifoParam>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2240      	movs	r2, #64	; 0x40
 80028b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028c2:	2301      	movs	r3, #1
 80028c4:	e016      	b.n	80028f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 fa56 	bl	8002d80 <DMA_CalcBaseAndBitshift>
 80028d4:	4603      	mov	r3, r0
 80028d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028dc:	223f      	movs	r2, #63	; 0x3f
 80028de:	409a      	lsls	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	f010803f 	.word	0xf010803f

08002900 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002916:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <HAL_DMA_Start_IT+0x26>
 8002922:	2302      	movs	r3, #2
 8002924:	e040      	b.n	80029a8 <HAL_DMA_Start_IT+0xa8>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b01      	cmp	r3, #1
 8002938:	d12f      	bne.n	800299a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2202      	movs	r2, #2
 800293e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 f9e8 	bl	8002d24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002958:	223f      	movs	r2, #63	; 0x3f
 800295a:	409a      	lsls	r2, r3
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0216 	orr.w	r2, r2, #22
 800296e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	2b00      	cmp	r3, #0
 8002976:	d007      	beq.n	8002988 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0208 	orr.w	r2, r2, #8
 8002986:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	e005      	b.n	80029a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029a2:	2302      	movs	r3, #2
 80029a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d004      	beq.n	80029ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2280      	movs	r2, #128	; 0x80
 80029c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e00c      	b.n	80029e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2205      	movs	r2, #5
 80029d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0201 	bic.w	r2, r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a00:	4b92      	ldr	r3, [pc, #584]	; (8002c4c <HAL_DMA_IRQHandler+0x258>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a92      	ldr	r2, [pc, #584]	; (8002c50 <HAL_DMA_IRQHandler+0x25c>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	0a9b      	lsrs	r3, r3, #10
 8002a0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1e:	2208      	movs	r2, #8
 8002a20:	409a      	lsls	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4013      	ands	r3, r2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d01a      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d013      	beq.n	8002a60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0204 	bic.w	r2, r2, #4
 8002a46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4c:	2208      	movs	r2, #8
 8002a4e:	409a      	lsls	r2, r3
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a58:	f043 0201 	orr.w	r2, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a64:	2201      	movs	r2, #1
 8002a66:	409a      	lsls	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d012      	beq.n	8002a96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00b      	beq.n	8002a96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a82:	2201      	movs	r2, #1
 8002a84:	409a      	lsls	r2, r3
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8e:	f043 0202 	orr.w	r2, r3, #2
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	409a      	lsls	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d012      	beq.n	8002acc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00b      	beq.n	8002acc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab8:	2204      	movs	r2, #4
 8002aba:	409a      	lsls	r2, r3
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac4:	f043 0204 	orr.w	r2, r3, #4
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad0:	2210      	movs	r2, #16
 8002ad2:	409a      	lsls	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d043      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d03c      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aee:	2210      	movs	r2, #16
 8002af0:	409a      	lsls	r2, r3
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d018      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d108      	bne.n	8002b24 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d024      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	4798      	blx	r3
 8002b22:	e01f      	b.n	8002b64 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d01b      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	4798      	blx	r3
 8002b34:	e016      	b.n	8002b64 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d107      	bne.n	8002b54 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0208 	bic.w	r2, r2, #8
 8002b52:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b68:	2220      	movs	r2, #32
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 808e 	beq.w	8002c92 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 8086 	beq.w	8002c92 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	409a      	lsls	r2, r3
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b05      	cmp	r3, #5
 8002b9c:	d136      	bne.n	8002c0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 0216 	bic.w	r2, r2, #22
 8002bac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695a      	ldr	r2, [r3, #20]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bbc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d103      	bne.n	8002bce <HAL_DMA_IRQHandler+0x1da>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d007      	beq.n	8002bde <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0208 	bic.w	r2, r2, #8
 8002bdc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be2:	223f      	movs	r2, #63	; 0x3f
 8002be4:	409a      	lsls	r2, r3
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d07d      	beq.n	8002cfe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	4798      	blx	r3
        }
        return;
 8002c0a:	e078      	b.n	8002cfe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d01c      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d108      	bne.n	8002c3a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d030      	beq.n	8002c92 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	4798      	blx	r3
 8002c38:	e02b      	b.n	8002c92 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d027      	beq.n	8002c92 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	4798      	blx	r3
 8002c4a:	e022      	b.n	8002c92 <HAL_DMA_IRQHandler+0x29e>
 8002c4c:	20000000 	.word	0x20000000
 8002c50:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10f      	bne.n	8002c82 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0210 	bic.w	r2, r2, #16
 8002c70:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d032      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d022      	beq.n	8002cec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2205      	movs	r2, #5
 8002caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0201 	bic.w	r2, r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d307      	bcc.n	8002cda <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1f2      	bne.n	8002cbe <HAL_DMA_IRQHandler+0x2ca>
 8002cd8:	e000      	b.n	8002cdc <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002cda:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d005      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	4798      	blx	r3
 8002cfc:	e000      	b.n	8002d00 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002cfe:	bf00      	nop
    }
  }
}
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop

08002d08 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d16:	b2db      	uxtb	r3, r3
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b40      	cmp	r3, #64	; 0x40
 8002d50:	d108      	bne.n	8002d64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d62:	e007      	b.n	8002d74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	60da      	str	r2, [r3, #12]
}
 8002d74:	bf00      	nop
 8002d76:	3714      	adds	r7, #20
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	3b10      	subs	r3, #16
 8002d90:	4a14      	ldr	r2, [pc, #80]	; (8002de4 <DMA_CalcBaseAndBitshift+0x64>)
 8002d92:	fba2 2303 	umull	r2, r3, r2, r3
 8002d96:	091b      	lsrs	r3, r3, #4
 8002d98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d9a:	4a13      	ldr	r2, [pc, #76]	; (8002de8 <DMA_CalcBaseAndBitshift+0x68>)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4413      	add	r3, r2
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d909      	bls.n	8002dc2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002db6:	f023 0303 	bic.w	r3, r3, #3
 8002dba:	1d1a      	adds	r2, r3, #4
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	659a      	str	r2, [r3, #88]	; 0x58
 8002dc0:	e007      	b.n	8002dd2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dca:	f023 0303 	bic.w	r3, r3, #3
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3714      	adds	r7, #20
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	aaaaaaab 	.word	0xaaaaaaab
 8002de8:	080198e0 	.word	0x080198e0

08002dec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d11f      	bne.n	8002e46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d855      	bhi.n	8002eb8 <DMA_CheckFifoParam+0xcc>
 8002e0c:	a201      	add	r2, pc, #4	; (adr r2, 8002e14 <DMA_CheckFifoParam+0x28>)
 8002e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e12:	bf00      	nop
 8002e14:	08002e25 	.word	0x08002e25
 8002e18:	08002e37 	.word	0x08002e37
 8002e1c:	08002e25 	.word	0x08002e25
 8002e20:	08002eb9 	.word	0x08002eb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d045      	beq.n	8002ebc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e34:	e042      	b.n	8002ebc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e3e:	d13f      	bne.n	8002ec0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e44:	e03c      	b.n	8002ec0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e4e:	d121      	bne.n	8002e94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d836      	bhi.n	8002ec4 <DMA_CheckFifoParam+0xd8>
 8002e56:	a201      	add	r2, pc, #4	; (adr r2, 8002e5c <DMA_CheckFifoParam+0x70>)
 8002e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5c:	08002e6d 	.word	0x08002e6d
 8002e60:	08002e73 	.word	0x08002e73
 8002e64:	08002e6d 	.word	0x08002e6d
 8002e68:	08002e85 	.word	0x08002e85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e70:	e02f      	b.n	8002ed2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d024      	beq.n	8002ec8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e82:	e021      	b.n	8002ec8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e8c:	d11e      	bne.n	8002ecc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e92:	e01b      	b.n	8002ecc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d902      	bls.n	8002ea0 <DMA_CheckFifoParam+0xb4>
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d003      	beq.n	8002ea6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e9e:	e018      	b.n	8002ed2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea4:	e015      	b.n	8002ed2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00e      	beq.n	8002ed0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb6:	e00b      	b.n	8002ed0 <DMA_CheckFifoParam+0xe4>
      break;
 8002eb8:	bf00      	nop
 8002eba:	e00a      	b.n	8002ed2 <DMA_CheckFifoParam+0xe6>
      break;
 8002ebc:	bf00      	nop
 8002ebe:	e008      	b.n	8002ed2 <DMA_CheckFifoParam+0xe6>
      break;
 8002ec0:	bf00      	nop
 8002ec2:	e006      	b.n	8002ed2 <DMA_CheckFifoParam+0xe6>
      break;
 8002ec4:	bf00      	nop
 8002ec6:	e004      	b.n	8002ed2 <DMA_CheckFifoParam+0xe6>
      break;
 8002ec8:	bf00      	nop
 8002eca:	e002      	b.n	8002ed2 <DMA_CheckFifoParam+0xe6>
      break;   
 8002ecc:	bf00      	nop
 8002ece:	e000      	b.n	8002ed2 <DMA_CheckFifoParam+0xe6>
      break;
 8002ed0:	bf00      	nop
    }
  } 
  
  return status; 
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b089      	sub	sp, #36	; 0x24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
 8002efa:	e16b      	b.n	80031d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002efc:	2201      	movs	r2, #1
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	f040 815a 	bne.w	80031ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d00b      	beq.n	8002f3a <HAL_GPIO_Init+0x5a>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d007      	beq.n	8002f3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f2e:	2b11      	cmp	r3, #17
 8002f30:	d003      	beq.n	8002f3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b12      	cmp	r3, #18
 8002f38:	d130      	bne.n	8002f9c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	2203      	movs	r2, #3
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f70:	2201      	movs	r2, #1
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	091b      	lsrs	r3, r3, #4
 8002f86:	f003 0201 	and.w	r2, r3, #1
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d003      	beq.n	8002fdc <HAL_GPIO_Init+0xfc>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b12      	cmp	r3, #18
 8002fda:	d123      	bne.n	8003024 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	08da      	lsrs	r2, r3, #3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3208      	adds	r2, #8
 8002fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	220f      	movs	r2, #15
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	08da      	lsrs	r2, r3, #3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	3208      	adds	r2, #8
 800301e:	69b9      	ldr	r1, [r7, #24]
 8003020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	2203      	movs	r2, #3
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 0203 	and.w	r2, r3, #3
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 80b4 	beq.w	80031ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	4b5f      	ldr	r3, [pc, #380]	; (80031e8 <HAL_GPIO_Init+0x308>)
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	4a5e      	ldr	r2, [pc, #376]	; (80031e8 <HAL_GPIO_Init+0x308>)
 8003070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003074:	6453      	str	r3, [r2, #68]	; 0x44
 8003076:	4b5c      	ldr	r3, [pc, #368]	; (80031e8 <HAL_GPIO_Init+0x308>)
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003082:	4a5a      	ldr	r2, [pc, #360]	; (80031ec <HAL_GPIO_Init+0x30c>)
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	089b      	lsrs	r3, r3, #2
 8003088:	3302      	adds	r3, #2
 800308a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800308e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	220f      	movs	r2, #15
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43db      	mvns	r3, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4013      	ands	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a51      	ldr	r2, [pc, #324]	; (80031f0 <HAL_GPIO_Init+0x310>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d02b      	beq.n	8003106 <HAL_GPIO_Init+0x226>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a50      	ldr	r2, [pc, #320]	; (80031f4 <HAL_GPIO_Init+0x314>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d025      	beq.n	8003102 <HAL_GPIO_Init+0x222>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a4f      	ldr	r2, [pc, #316]	; (80031f8 <HAL_GPIO_Init+0x318>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d01f      	beq.n	80030fe <HAL_GPIO_Init+0x21e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a4e      	ldr	r2, [pc, #312]	; (80031fc <HAL_GPIO_Init+0x31c>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d019      	beq.n	80030fa <HAL_GPIO_Init+0x21a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a4d      	ldr	r2, [pc, #308]	; (8003200 <HAL_GPIO_Init+0x320>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d013      	beq.n	80030f6 <HAL_GPIO_Init+0x216>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a4c      	ldr	r2, [pc, #304]	; (8003204 <HAL_GPIO_Init+0x324>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d00d      	beq.n	80030f2 <HAL_GPIO_Init+0x212>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a4b      	ldr	r2, [pc, #300]	; (8003208 <HAL_GPIO_Init+0x328>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d007      	beq.n	80030ee <HAL_GPIO_Init+0x20e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a4a      	ldr	r2, [pc, #296]	; (800320c <HAL_GPIO_Init+0x32c>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d101      	bne.n	80030ea <HAL_GPIO_Init+0x20a>
 80030e6:	2307      	movs	r3, #7
 80030e8:	e00e      	b.n	8003108 <HAL_GPIO_Init+0x228>
 80030ea:	2308      	movs	r3, #8
 80030ec:	e00c      	b.n	8003108 <HAL_GPIO_Init+0x228>
 80030ee:	2306      	movs	r3, #6
 80030f0:	e00a      	b.n	8003108 <HAL_GPIO_Init+0x228>
 80030f2:	2305      	movs	r3, #5
 80030f4:	e008      	b.n	8003108 <HAL_GPIO_Init+0x228>
 80030f6:	2304      	movs	r3, #4
 80030f8:	e006      	b.n	8003108 <HAL_GPIO_Init+0x228>
 80030fa:	2303      	movs	r3, #3
 80030fc:	e004      	b.n	8003108 <HAL_GPIO_Init+0x228>
 80030fe:	2302      	movs	r3, #2
 8003100:	e002      	b.n	8003108 <HAL_GPIO_Init+0x228>
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <HAL_GPIO_Init+0x228>
 8003106:	2300      	movs	r3, #0
 8003108:	69fa      	ldr	r2, [r7, #28]
 800310a:	f002 0203 	and.w	r2, r2, #3
 800310e:	0092      	lsls	r2, r2, #2
 8003110:	4093      	lsls	r3, r2
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4313      	orrs	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003118:	4934      	ldr	r1, [pc, #208]	; (80031ec <HAL_GPIO_Init+0x30c>)
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	089b      	lsrs	r3, r3, #2
 800311e:	3302      	adds	r3, #2
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003126:	4b3a      	ldr	r3, [pc, #232]	; (8003210 <HAL_GPIO_Init+0x330>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	43db      	mvns	r3, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4013      	ands	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	4313      	orrs	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800314a:	4a31      	ldr	r2, [pc, #196]	; (8003210 <HAL_GPIO_Init+0x330>)
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003150:	4b2f      	ldr	r3, [pc, #188]	; (8003210 <HAL_GPIO_Init+0x330>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	43db      	mvns	r3, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4013      	ands	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003174:	4a26      	ldr	r2, [pc, #152]	; (8003210 <HAL_GPIO_Init+0x330>)
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800317a:	4b25      	ldr	r3, [pc, #148]	; (8003210 <HAL_GPIO_Init+0x330>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	43db      	mvns	r3, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4013      	ands	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800319e:	4a1c      	ldr	r2, [pc, #112]	; (8003210 <HAL_GPIO_Init+0x330>)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031a4:	4b1a      	ldr	r3, [pc, #104]	; (8003210 <HAL_GPIO_Init+0x330>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	43db      	mvns	r3, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4013      	ands	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031c8:	4a11      	ldr	r2, [pc, #68]	; (8003210 <HAL_GPIO_Init+0x330>)
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	3301      	adds	r3, #1
 80031d2:	61fb      	str	r3, [r7, #28]
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	2b0f      	cmp	r3, #15
 80031d8:	f67f ae90 	bls.w	8002efc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031dc:	bf00      	nop
 80031de:	3724      	adds	r7, #36	; 0x24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40013800 	.word	0x40013800
 80031f0:	40020000 	.word	0x40020000
 80031f4:	40020400 	.word	0x40020400
 80031f8:	40020800 	.word	0x40020800
 80031fc:	40020c00 	.word	0x40020c00
 8003200:	40021000 	.word	0x40021000
 8003204:	40021400 	.word	0x40021400
 8003208:	40021800 	.word	0x40021800
 800320c:	40021c00 	.word	0x40021c00
 8003210:	40013c00 	.word	0x40013c00

08003214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	807b      	strh	r3, [r7, #2]
 8003220:	4613      	mov	r3, r2
 8003222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003224:	787b      	ldrb	r3, [r7, #1]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800322a:	887a      	ldrh	r2, [r7, #2]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003230:	e003      	b.n	800323a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003232:	887b      	ldrh	r3, [r7, #2]
 8003234:	041a      	lsls	r2, r3, #16
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	619a      	str	r2, [r3, #24]
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
	...

08003248 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e11f      	b.n	800349a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d106      	bne.n	8003274 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7fe f97c 	bl	800156c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2224      	movs	r2, #36	; 0x24
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0201 	bic.w	r2, r2, #1
 800328a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800329a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032ac:	f004 fbce 	bl	8007a4c <HAL_RCC_GetPCLK1Freq>
 80032b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	4a7b      	ldr	r2, [pc, #492]	; (80034a4 <HAL_I2C_Init+0x25c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d807      	bhi.n	80032cc <HAL_I2C_Init+0x84>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4a7a      	ldr	r2, [pc, #488]	; (80034a8 <HAL_I2C_Init+0x260>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	bf94      	ite	ls
 80032c4:	2301      	movls	r3, #1
 80032c6:	2300      	movhi	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	e006      	b.n	80032da <HAL_I2C_Init+0x92>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4a77      	ldr	r2, [pc, #476]	; (80034ac <HAL_I2C_Init+0x264>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	bf94      	ite	ls
 80032d4:	2301      	movls	r3, #1
 80032d6:	2300      	movhi	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e0db      	b.n	800349a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4a72      	ldr	r2, [pc, #456]	; (80034b0 <HAL_I2C_Init+0x268>)
 80032e6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ea:	0c9b      	lsrs	r3, r3, #18
 80032ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	430a      	orrs	r2, r1
 8003300:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4a64      	ldr	r2, [pc, #400]	; (80034a4 <HAL_I2C_Init+0x25c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d802      	bhi.n	800331c <HAL_I2C_Init+0xd4>
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	3301      	adds	r3, #1
 800331a:	e009      	b.n	8003330 <HAL_I2C_Init+0xe8>
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003322:	fb02 f303 	mul.w	r3, r2, r3
 8003326:	4a63      	ldr	r2, [pc, #396]	; (80034b4 <HAL_I2C_Init+0x26c>)
 8003328:	fba2 2303 	umull	r2, r3, r2, r3
 800332c:	099b      	lsrs	r3, r3, #6
 800332e:	3301      	adds	r3, #1
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6812      	ldr	r2, [r2, #0]
 8003334:	430b      	orrs	r3, r1
 8003336:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003342:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	4956      	ldr	r1, [pc, #344]	; (80034a4 <HAL_I2C_Init+0x25c>)
 800334c:	428b      	cmp	r3, r1
 800334e:	d80d      	bhi.n	800336c <HAL_I2C_Init+0x124>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1e59      	subs	r1, r3, #1
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	fbb1 f3f3 	udiv	r3, r1, r3
 800335e:	3301      	adds	r3, #1
 8003360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003364:	2b04      	cmp	r3, #4
 8003366:	bf38      	it	cc
 8003368:	2304      	movcc	r3, #4
 800336a:	e04f      	b.n	800340c <HAL_I2C_Init+0x1c4>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d111      	bne.n	8003398 <HAL_I2C_Init+0x150>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1e58      	subs	r0, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6859      	ldr	r1, [r3, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	440b      	add	r3, r1
 8003382:	fbb0 f3f3 	udiv	r3, r0, r3
 8003386:	3301      	adds	r3, #1
 8003388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338c:	2b00      	cmp	r3, #0
 800338e:	bf0c      	ite	eq
 8003390:	2301      	moveq	r3, #1
 8003392:	2300      	movne	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	e012      	b.n	80033be <HAL_I2C_Init+0x176>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1e58      	subs	r0, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6859      	ldr	r1, [r3, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	0099      	lsls	r1, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ae:	3301      	adds	r3, #1
 80033b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bf0c      	ite	eq
 80033b8:	2301      	moveq	r3, #1
 80033ba:	2300      	movne	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_I2C_Init+0x17e>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e022      	b.n	800340c <HAL_I2C_Init+0x1c4>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10e      	bne.n	80033ec <HAL_I2C_Init+0x1a4>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1e58      	subs	r0, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6859      	ldr	r1, [r3, #4]
 80033d6:	460b      	mov	r3, r1
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	440b      	add	r3, r1
 80033dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e0:	3301      	adds	r3, #1
 80033e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ea:	e00f      	b.n	800340c <HAL_I2C_Init+0x1c4>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	1e58      	subs	r0, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6859      	ldr	r1, [r3, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	0099      	lsls	r1, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003402:	3301      	adds	r3, #1
 8003404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003408:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	6809      	ldr	r1, [r1, #0]
 8003410:	4313      	orrs	r3, r2
 8003412:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69da      	ldr	r2, [r3, #28]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800343a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6911      	ldr	r1, [r2, #16]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68d2      	ldr	r2, [r2, #12]
 8003446:	4311      	orrs	r1, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6812      	ldr	r2, [r2, #0]
 800344c:	430b      	orrs	r3, r1
 800344e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	000186a0 	.word	0x000186a0
 80034a8:	001e847f 	.word	0x001e847f
 80034ac:	003d08ff 	.word	0x003d08ff
 80034b0:	431bde83 	.word	0x431bde83
 80034b4:	10624dd3 	.word	0x10624dd3

080034b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af02      	add	r7, sp, #8
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	4608      	mov	r0, r1
 80034c2:	4611      	mov	r1, r2
 80034c4:	461a      	mov	r2, r3
 80034c6:	4603      	mov	r3, r0
 80034c8:	817b      	strh	r3, [r7, #10]
 80034ca:	460b      	mov	r3, r1
 80034cc:	813b      	strh	r3, [r7, #8]
 80034ce:	4613      	mov	r3, r2
 80034d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034d2:	f7fe fc81 	bl	8001dd8 <HAL_GetTick>
 80034d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b20      	cmp	r3, #32
 80034e2:	f040 80d9 	bne.w	8003698 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	2319      	movs	r3, #25
 80034ec:	2201      	movs	r2, #1
 80034ee:	496d      	ldr	r1, [pc, #436]	; (80036a4 <HAL_I2C_Mem_Write+0x1ec>)
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f002 fac3 	bl	8005a7c <I2C_WaitOnFlagUntilTimeout>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80034fc:	2302      	movs	r3, #2
 80034fe:	e0cc      	b.n	800369a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003506:	2b01      	cmp	r3, #1
 8003508:	d101      	bne.n	800350e <HAL_I2C_Mem_Write+0x56>
 800350a:	2302      	movs	r3, #2
 800350c:	e0c5      	b.n	800369a <HAL_I2C_Mem_Write+0x1e2>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b01      	cmp	r3, #1
 8003522:	d007      	beq.n	8003534 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003542:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2221      	movs	r2, #33	; 0x21
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2240      	movs	r2, #64	; 0x40
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a3a      	ldr	r2, [r7, #32]
 800355e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003564:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4a4d      	ldr	r2, [pc, #308]	; (80036a8 <HAL_I2C_Mem_Write+0x1f0>)
 8003574:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003576:	88f8      	ldrh	r0, [r7, #6]
 8003578:	893a      	ldrh	r2, [r7, #8]
 800357a:	8979      	ldrh	r1, [r7, #10]
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	9301      	str	r3, [sp, #4]
 8003580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	4603      	mov	r3, r0
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f002 f852 	bl	8005630 <I2C_RequestMemoryWrite>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d052      	beq.n	8003638 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e081      	b.n	800369a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f002 fb44 	bl	8005c28 <I2C_WaitOnTXEFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00d      	beq.n	80035c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d107      	bne.n	80035be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e06b      	b.n	800369a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	781a      	ldrb	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035dc:	3b01      	subs	r3, #1
 80035de:	b29a      	uxth	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d11b      	bne.n	8003638 <HAL_I2C_Mem_Write+0x180>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003604:	2b00      	cmp	r3, #0
 8003606:	d017      	beq.n	8003638 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360c:	781a      	ldrb	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003622:	3b01      	subs	r3, #1
 8003624:	b29a      	uxth	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362e:	b29b      	uxth	r3, r3
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1aa      	bne.n	8003596 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f002 fb30 	bl	8005caa <I2C_WaitOnBTFFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00d      	beq.n	800366c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	2b04      	cmp	r3, #4
 8003656:	d107      	bne.n	8003668 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003666:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e016      	b.n	800369a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	e000      	b.n	800369a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003698:	2302      	movs	r3, #2
  }
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	00100002 	.word	0x00100002
 80036a8:	ffff0000 	.word	0xffff0000

080036ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08c      	sub	sp, #48	; 0x30
 80036b0:	af02      	add	r7, sp, #8
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	4608      	mov	r0, r1
 80036b6:	4611      	mov	r1, r2
 80036b8:	461a      	mov	r2, r3
 80036ba:	4603      	mov	r3, r0
 80036bc:	817b      	strh	r3, [r7, #10]
 80036be:	460b      	mov	r3, r1
 80036c0:	813b      	strh	r3, [r7, #8]
 80036c2:	4613      	mov	r3, r2
 80036c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036c6:	f7fe fb87 	bl	8001dd8 <HAL_GetTick>
 80036ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	f040 8208 	bne.w	8003aea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	2319      	movs	r3, #25
 80036e0:	2201      	movs	r2, #1
 80036e2:	497b      	ldr	r1, [pc, #492]	; (80038d0 <HAL_I2C_Mem_Read+0x224>)
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f002 f9c9 	bl	8005a7c <I2C_WaitOnFlagUntilTimeout>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80036f0:	2302      	movs	r3, #2
 80036f2:	e1fb      	b.n	8003aec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d101      	bne.n	8003702 <HAL_I2C_Mem_Read+0x56>
 80036fe:	2302      	movs	r3, #2
 8003700:	e1f4      	b.n	8003aec <HAL_I2C_Mem_Read+0x440>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b01      	cmp	r3, #1
 8003716:	d007      	beq.n	8003728 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003736:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2222      	movs	r2, #34	; 0x22
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2240      	movs	r2, #64	; 0x40
 8003744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003752:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003758:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4a5b      	ldr	r2, [pc, #364]	; (80038d4 <HAL_I2C_Mem_Read+0x228>)
 8003768:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800376a:	88f8      	ldrh	r0, [r7, #6]
 800376c:	893a      	ldrh	r2, [r7, #8]
 800376e:	8979      	ldrh	r1, [r7, #10]
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	9301      	str	r3, [sp, #4]
 8003774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	4603      	mov	r3, r0
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f001 ffee 	bl	800575c <I2C_RequestMemoryRead>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e1b0      	b.n	8003aec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378e:	2b00      	cmp	r3, #0
 8003790:	d113      	bne.n	80037ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003792:	2300      	movs	r3, #0
 8003794:	623b      	str	r3, [r7, #32]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	623b      	str	r3, [r7, #32]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	623b      	str	r3, [r7, #32]
 80037a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	e184      	b.n	8003ac4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d11b      	bne.n	80037fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d2:	2300      	movs	r3, #0
 80037d4:	61fb      	str	r3, [r7, #28]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	61fb      	str	r3, [r7, #28]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	61fb      	str	r3, [r7, #28]
 80037e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	e164      	b.n	8003ac4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d11b      	bne.n	800383a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003810:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003820:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003822:	2300      	movs	r3, #0
 8003824:	61bb      	str	r3, [r7, #24]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	61bb      	str	r3, [r7, #24]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	61bb      	str	r3, [r7, #24]
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	e144      	b.n	8003ac4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003850:	e138      	b.n	8003ac4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003856:	2b03      	cmp	r3, #3
 8003858:	f200 80f1 	bhi.w	8003a3e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003860:	2b01      	cmp	r3, #1
 8003862:	d123      	bne.n	80038ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003866:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f002 fa91 	bl	8005d90 <I2C_WaitOnRXNEFlagUntilTimeout>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e139      	b.n	8003aec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	691a      	ldr	r2, [r3, #16]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	1c5a      	adds	r2, r3, #1
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003894:	3b01      	subs	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038aa:	e10b      	b.n	8003ac4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d14e      	bne.n	8003952 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ba:	2200      	movs	r2, #0
 80038bc:	4906      	ldr	r1, [pc, #24]	; (80038d8 <HAL_I2C_Mem_Read+0x22c>)
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f002 f8dc 	bl	8005a7c <I2C_WaitOnFlagUntilTimeout>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d008      	beq.n	80038dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e10e      	b.n	8003aec <HAL_I2C_Mem_Read+0x440>
 80038ce:	bf00      	nop
 80038d0:	00100002 	.word	0x00100002
 80038d4:	ffff0000 	.word	0xffff0000
 80038d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691a      	ldr	r2, [r3, #16]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003908:	3b01      	subs	r3, #1
 800390a:	b29a      	uxth	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003914:	b29b      	uxth	r3, r3
 8003916:	3b01      	subs	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	691a      	ldr	r2, [r3, #16]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003946:	b29b      	uxth	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003950:	e0b8      	b.n	8003ac4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003958:	2200      	movs	r2, #0
 800395a:	4966      	ldr	r1, [pc, #408]	; (8003af4 <HAL_I2C_Mem_Read+0x448>)
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f002 f88d 	bl	8005a7c <I2C_WaitOnFlagUntilTimeout>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e0bf      	b.n	8003aec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800397a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b4:	2200      	movs	r2, #0
 80039b6:	494f      	ldr	r1, [pc, #316]	; (8003af4 <HAL_I2C_Mem_Read+0x448>)
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f002 f85f 	bl	8005a7c <I2C_WaitOnFlagUntilTimeout>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e091      	b.n	8003aec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	691a      	ldr	r2, [r3, #16]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	1c5a      	adds	r2, r3, #1
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f4:	3b01      	subs	r3, #1
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	3b01      	subs	r3, #1
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a3c:	e042      	b.n	8003ac4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f002 f9a4 	bl	8005d90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e04c      	b.n	8003aec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	691a      	ldr	r2, [r3, #16]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f003 0304 	and.w	r3, r3, #4
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d118      	bne.n	8003ac4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f47f aec2 	bne.w	8003852 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	e000      	b.n	8003aec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003aea:	2302      	movs	r3, #2
  }
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3728      	adds	r7, #40	; 0x28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	00010004 	.word	0x00010004

08003af8 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b087      	sub	sp, #28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	4608      	mov	r0, r1
 8003b02:	4611      	mov	r1, r2
 8003b04:	461a      	mov	r2, r3
 8003b06:	4603      	mov	r3, r0
 8003b08:	817b      	strh	r3, [r7, #10]
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	813b      	strh	r3, [r7, #8]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	f040 809a 	bne.w	8003c58 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b24:	4b50      	ldr	r3, [pc, #320]	; (8003c68 <HAL_I2C_Mem_Read_IT+0x170>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	08db      	lsrs	r3, r3, #3
 8003b2a:	4a50      	ldr	r2, [pc, #320]	; (8003c6c <HAL_I2C_Mem_Read_IT+0x174>)
 8003b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b30:	0a1a      	lsrs	r2, r3, #8
 8003b32:	4613      	mov	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	009a      	lsls	r2, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d116      	bne.n	8003b78 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	f043 0220 	orr.w	r2, r3, #32
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e070      	b.n	8003c5a <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d0db      	beq.n	8003b3e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_I2C_Mem_Read_IT+0x9c>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e062      	b.n	8003c5a <HAL_I2C_Mem_Read_IT+0x162>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d007      	beq.n	8003bba <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f042 0201 	orr.w	r2, r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bc8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2222      	movs	r2, #34	; 0x22
 8003bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2240      	movs	r2, #64	; 0x40
 8003bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a3a      	ldr	r2, [r7, #32]
 8003be4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4a1d      	ldr	r2, [pc, #116]	; (8003c70 <HAL_I2C_Mem_Read_IT+0x178>)
 8003bfa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003bfc:	897a      	ldrh	r2, [r7, #10]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003c02:	893a      	ldrh	r2, [r7, #8]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003c08:	88fa      	ldrh	r2, [r7, #6]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c22:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c32:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003c52:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8003c54:	2300      	movs	r3, #0
 8003c56:	e000      	b.n	8003c5a <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8003c58:	2302      	movs	r3, #2
  }
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	371c      	adds	r7, #28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20000000 	.word	0x20000000
 8003c6c:	14f8b589 	.word	0x14f8b589
 8003c70:	ffff0000 	.word	0xffff0000

08003c74 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08a      	sub	sp, #40	; 0x28
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	607a      	str	r2, [r7, #4]
 8003c7e:	603b      	str	r3, [r7, #0]
 8003c80:	460b      	mov	r3, r1
 8003c82:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003c84:	f7fe f8a8 	bl	8001dd8 <HAL_GetTick>
 8003c88:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b20      	cmp	r3, #32
 8003c98:	f040 8111 	bne.w	8003ebe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	2319      	movs	r3, #25
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	4988      	ldr	r1, [pc, #544]	; (8003ec8 <HAL_I2C_IsDeviceReady+0x254>)
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f001 fee8 	bl	8005a7c <I2C_WaitOnFlagUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e104      	b.n	8003ec0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <HAL_I2C_IsDeviceReady+0x50>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e0fd      	b.n	8003ec0 <HAL_I2C_IsDeviceReady+0x24c>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d007      	beq.n	8003cea <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f042 0201 	orr.w	r2, r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cf8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2224      	movs	r2, #36	; 0x24
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4a70      	ldr	r2, [pc, #448]	; (8003ecc <HAL_I2C_IsDeviceReady+0x258>)
 8003d0c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d1c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f001 fea6 	bl	8005a7c <I2C_WaitOnFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00d      	beq.n	8003d52 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d44:	d103      	bne.n	8003d4e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d4c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e0b6      	b.n	8003ec0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d52:	897b      	ldrh	r3, [r7, #10]
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	461a      	mov	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d60:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003d62:	f7fe f839 	bl	8001dd8 <HAL_GetTick>
 8003d66:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	bf0c      	ite	eq
 8003d76:	2301      	moveq	r3, #1
 8003d78:	2300      	movne	r3, #0
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d8c:	bf0c      	ite	eq
 8003d8e:	2301      	moveq	r3, #1
 8003d90:	2300      	movne	r3, #0
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d96:	e025      	b.n	8003de4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d98:	f7fe f81e 	bl	8001dd8 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d302      	bcc.n	8003dae <HAL_I2C_IsDeviceReady+0x13a>
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d103      	bne.n	8003db6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	22a0      	movs	r2, #160	; 0xa0
 8003db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	bf0c      	ite	eq
 8003dc4:	2301      	moveq	r3, #1
 8003dc6:	2300      	movne	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dda:	bf0c      	ite	eq
 8003ddc:	2301      	moveq	r3, #1
 8003dde:	2300      	movne	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2ba0      	cmp	r3, #160	; 0xa0
 8003dee:	d005      	beq.n	8003dfc <HAL_I2C_IsDeviceReady+0x188>
 8003df0:	7dfb      	ldrb	r3, [r7, #23]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d102      	bne.n	8003dfc <HAL_I2C_IsDeviceReady+0x188>
 8003df6:	7dbb      	ldrb	r3, [r7, #22]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0cd      	beq.n	8003d98 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d129      	bne.n	8003e66 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e20:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e22:	2300      	movs	r3, #0
 8003e24:	613b      	str	r3, [r7, #16]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	2319      	movs	r3, #25
 8003e3e:	2201      	movs	r2, #1
 8003e40:	4921      	ldr	r1, [pc, #132]	; (8003ec8 <HAL_I2C_IsDeviceReady+0x254>)
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f001 fe1a 	bl	8005a7c <I2C_WaitOnFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e036      	b.n	8003ec0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	e02c      	b.n	8003ec0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e74:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e7e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	2319      	movs	r3, #25
 8003e86:	2201      	movs	r2, #1
 8003e88:	490f      	ldr	r1, [pc, #60]	; (8003ec8 <HAL_I2C_IsDeviceReady+0x254>)
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f001 fdf6 	bl	8005a7c <I2C_WaitOnFlagUntilTimeout>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e012      	b.n	8003ec0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	f4ff af32 	bcc.w	8003d0e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003ebe:	2302      	movs	r3, #2
  }
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3720      	adds	r7, #32
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	00100002 	.word	0x00100002
 8003ecc:	ffff0000 	.word	0xffff0000

08003ed0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b088      	sub	sp, #32
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ef0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
 8003efc:	2b10      	cmp	r3, #16
 8003efe:	d003      	beq.n	8003f08 <HAL_I2C_EV_IRQHandler+0x38>
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
 8003f02:	2b40      	cmp	r3, #64	; 0x40
 8003f04:	f040 80bd 	bne.w	8004082 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10d      	bne.n	8003f3e <HAL_I2C_EV_IRQHandler+0x6e>
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003f28:	d003      	beq.n	8003f32 <HAL_I2C_EV_IRQHandler+0x62>
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003f30:	d101      	bne.n	8003f36 <HAL_I2C_EV_IRQHandler+0x66>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <HAL_I2C_EV_IRQHandler+0x68>
 8003f36:	2300      	movs	r3, #0
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	f000 812e 	beq.w	800419a <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00c      	beq.n	8003f62 <HAL_I2C_EV_IRQHandler+0x92>
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	0a5b      	lsrs	r3, r3, #9
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d006      	beq.n	8003f62 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f001 ffa0 	bl	8005e9a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 fd52 	bl	8004a04 <I2C_Master_SB>
 8003f60:	e08e      	b.n	8004080 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	08db      	lsrs	r3, r3, #3
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d009      	beq.n	8003f82 <HAL_I2C_EV_IRQHandler+0xb2>
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	0a5b      	lsrs	r3, r3, #9
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 fdc8 	bl	8004b10 <I2C_Master_ADD10>
 8003f80:	e07e      	b.n	8004080 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	085b      	lsrs	r3, r3, #1
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d009      	beq.n	8003fa2 <HAL_I2C_EV_IRQHandler+0xd2>
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	0a5b      	lsrs	r3, r3, #9
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fde2 	bl	8004b64 <I2C_Master_ADDR>
 8003fa0:	e06e      	b.n	8004080 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	089b      	lsrs	r3, r3, #2
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d037      	beq.n	800401e <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fbc:	f000 80ef 	beq.w	800419e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	09db      	lsrs	r3, r3, #7
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00f      	beq.n	8003fec <HAL_I2C_EV_IRQHandler+0x11c>
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	0a9b      	lsrs	r3, r3, #10
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d009      	beq.n	8003fec <HAL_I2C_EV_IRQHandler+0x11c>
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	089b      	lsrs	r3, r3, #2
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d103      	bne.n	8003fec <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f9df 	bl	80043a8 <I2C_MasterTransmit_TXE>
 8003fea:	e049      	b.n	8004080 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	089b      	lsrs	r3, r3, #2
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 80d2 	beq.w	800419e <HAL_I2C_EV_IRQHandler+0x2ce>
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	0a5b      	lsrs	r3, r3, #9
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 80cb 	beq.w	800419e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004008:	7bfb      	ldrb	r3, [r7, #15]
 800400a:	2b10      	cmp	r3, #16
 800400c:	d103      	bne.n	8004016 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 fa66 	bl	80044e0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004014:	e0c3      	b.n	800419e <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 faca 	bl	80045b0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800401c:	e0bf      	b.n	800419e <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004028:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800402c:	f000 80b7 	beq.w	800419e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	099b      	lsrs	r3, r3, #6
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00f      	beq.n	800405c <HAL_I2C_EV_IRQHandler+0x18c>
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	0a9b      	lsrs	r3, r3, #10
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d009      	beq.n	800405c <HAL_I2C_EV_IRQHandler+0x18c>
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	089b      	lsrs	r3, r3, #2
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d103      	bne.n	800405c <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 fb3a 	bl	80046ce <I2C_MasterReceive_RXNE>
 800405a:	e011      	b.n	8004080 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	089b      	lsrs	r3, r3, #2
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 809a 	beq.w	800419e <HAL_I2C_EV_IRQHandler+0x2ce>
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	0a5b      	lsrs	r3, r3, #9
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 8093 	beq.w	800419e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fbd9 	bl	8004830 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800407e:	e08e      	b.n	800419e <HAL_I2C_EV_IRQHandler+0x2ce>
 8004080:	e08d      	b.n	800419e <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	2b00      	cmp	r3, #0
 8004088:	d004      	beq.n	8004094 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	e007      	b.n	80040a4 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	085b      	lsrs	r3, r3, #1
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d012      	beq.n	80040d6 <HAL_I2C_EV_IRQHandler+0x206>
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	0a5b      	lsrs	r3, r3, #9
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00c      	beq.n	80040d6 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d003      	beq.n	80040cc <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80040cc:	69b9      	ldr	r1, [r7, #24]
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 ff97 	bl	8005002 <I2C_Slave_ADDR>
 80040d4:	e066      	b.n	80041a4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	091b      	lsrs	r3, r3, #4
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d009      	beq.n	80040f6 <HAL_I2C_EV_IRQHandler+0x226>
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	0a5b      	lsrs	r3, r3, #9
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 ffcc 	bl	800508c <I2C_Slave_STOPF>
 80040f4:	e056      	b.n	80041a4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80040f6:	7bbb      	ldrb	r3, [r7, #14]
 80040f8:	2b21      	cmp	r3, #33	; 0x21
 80040fa:	d002      	beq.n	8004102 <HAL_I2C_EV_IRQHandler+0x232>
 80040fc:	7bbb      	ldrb	r3, [r7, #14]
 80040fe:	2b29      	cmp	r3, #41	; 0x29
 8004100:	d125      	bne.n	800414e <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	09db      	lsrs	r3, r3, #7
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00f      	beq.n	800412e <HAL_I2C_EV_IRQHandler+0x25e>
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	0a9b      	lsrs	r3, r3, #10
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d009      	beq.n	800412e <HAL_I2C_EV_IRQHandler+0x25e>
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	089b      	lsrs	r3, r3, #2
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d103      	bne.n	800412e <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fead 	bl	8004e86 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800412c:	e039      	b.n	80041a2 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	089b      	lsrs	r3, r3, #2
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d033      	beq.n	80041a2 <HAL_I2C_EV_IRQHandler+0x2d2>
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	0a5b      	lsrs	r3, r3, #9
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d02d      	beq.n	80041a2 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 feda 	bl	8004f00 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800414c:	e029      	b.n	80041a2 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	099b      	lsrs	r3, r3, #6
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00f      	beq.n	800417a <HAL_I2C_EV_IRQHandler+0x2aa>
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	0a9b      	lsrs	r3, r3, #10
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d009      	beq.n	800417a <HAL_I2C_EV_IRQHandler+0x2aa>
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	089b      	lsrs	r3, r3, #2
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d103      	bne.n	800417a <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fee5 	bl	8004f42 <I2C_SlaveReceive_RXNE>
 8004178:	e014      	b.n	80041a4 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	089b      	lsrs	r3, r3, #2
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00e      	beq.n	80041a4 <HAL_I2C_EV_IRQHandler+0x2d4>
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	0a5b      	lsrs	r3, r3, #9
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d008      	beq.n	80041a4 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 ff13 	bl	8004fbe <I2C_SlaveReceive_BTF>
 8004198:	e004      	b.n	80041a4 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800419a:	bf00      	nop
 800419c:	e002      	b.n	80041a4 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800419e:	bf00      	nop
 80041a0:	e000      	b.n	80041a4 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041a2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80041a4:	3720      	adds	r7, #32
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b08a      	sub	sp, #40	; 0x28
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80041c2:	2300      	movs	r3, #0
 80041c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041cc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	0a1b      	lsrs	r3, r3, #8
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00e      	beq.n	80041f8 <HAL_I2C_ER_IRQHandler+0x4e>
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	0a1b      	lsrs	r3, r3, #8
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d008      	beq.n	80041f8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	f043 0301 	orr.w	r3, r3, #1
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041f6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	0a5b      	lsrs	r3, r3, #9
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00e      	beq.n	8004222 <HAL_I2C_ER_IRQHandler+0x78>
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	0a1b      	lsrs	r3, r3, #8
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	d008      	beq.n	8004222 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	f043 0302 	orr.w	r3, r3, #2
 8004216:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004220:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	0a9b      	lsrs	r3, r3, #10
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d03f      	beq.n	80042ae <HAL_I2C_ER_IRQHandler+0x104>
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	0a1b      	lsrs	r3, r3, #8
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d039      	beq.n	80042ae <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800423a:	7efb      	ldrb	r3, [r7, #27]
 800423c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004242:	b29b      	uxth	r3, r3
 8004244:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800424c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004254:	7ebb      	ldrb	r3, [r7, #26]
 8004256:	2b20      	cmp	r3, #32
 8004258:	d112      	bne.n	8004280 <HAL_I2C_ER_IRQHandler+0xd6>
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10f      	bne.n	8004280 <HAL_I2C_ER_IRQHandler+0xd6>
 8004260:	7cfb      	ldrb	r3, [r7, #19]
 8004262:	2b21      	cmp	r3, #33	; 0x21
 8004264:	d008      	beq.n	8004278 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004266:	7cfb      	ldrb	r3, [r7, #19]
 8004268:	2b29      	cmp	r3, #41	; 0x29
 800426a:	d005      	beq.n	8004278 <HAL_I2C_ER_IRQHandler+0xce>
 800426c:	7cfb      	ldrb	r3, [r7, #19]
 800426e:	2b28      	cmp	r3, #40	; 0x28
 8004270:	d106      	bne.n	8004280 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2b21      	cmp	r3, #33	; 0x21
 8004276:	d103      	bne.n	8004280 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f001 f837 	bl	80052ec <I2C_Slave_AF>
 800427e:	e016      	b.n	80042ae <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004288:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	f043 0304 	orr.w	r3, r3, #4
 8004290:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004292:	7efb      	ldrb	r3, [r7, #27]
 8004294:	2b10      	cmp	r3, #16
 8004296:	d002      	beq.n	800429e <HAL_I2C_ER_IRQHandler+0xf4>
 8004298:	7efb      	ldrb	r3, [r7, #27]
 800429a:	2b40      	cmp	r3, #64	; 0x40
 800429c:	d107      	bne.n	80042ae <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ac:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	0adb      	lsrs	r3, r3, #11
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00e      	beq.n	80042d8 <HAL_I2C_ER_IRQHandler+0x12e>
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	0a1b      	lsrs	r3, r3, #8
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d008      	beq.n	80042d8 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	f043 0308 	orr.w	r3, r3, #8
 80042cc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80042d6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d008      	beq.n	80042f0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	431a      	orrs	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f001 f86e 	bl	80053cc <I2C_ITError>
  }
}
 80042f0:	bf00      	nop
 80042f2:	3728      	adds	r7, #40	; 0x28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	460b      	mov	r3, r1
 8004352:	70fb      	strb	r3, [r7, #3]
 8004354:	4613      	mov	r3, r2
 8004356:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439a:	b2db      	uxtb	r3, r3
}
 800439c:	4618      	mov	r0, r3
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043be:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d150      	bne.n	8004470 <I2C_MasterTransmit_TXE+0xc8>
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
 80043d0:	2b21      	cmp	r3, #33	; 0x21
 80043d2:	d14d      	bne.n	8004470 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b08      	cmp	r3, #8
 80043d8:	d01d      	beq.n	8004416 <I2C_MasterTransmit_TXE+0x6e>
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b20      	cmp	r3, #32
 80043de:	d01a      	beq.n	8004416 <I2C_MasterTransmit_TXE+0x6e>
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043e6:	d016      	beq.n	8004416 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043f6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2211      	movs	r2, #17
 80043fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff ff72 	bl	80042f8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004414:	e060      	b.n	80044d8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004424:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004434:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b40      	cmp	r3, #64	; 0x40
 800444e:	d107      	bne.n	8004460 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f00d f8fd 	bl	8011658 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800445e:	e03b      	b.n	80044d8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7ff ff45 	bl	80042f8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800446e:	e033      	b.n	80044d8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004470:	7bfb      	ldrb	r3, [r7, #15]
 8004472:	2b21      	cmp	r3, #33	; 0x21
 8004474:	d005      	beq.n	8004482 <I2C_MasterTransmit_TXE+0xda>
 8004476:	7bbb      	ldrb	r3, [r7, #14]
 8004478:	2b40      	cmp	r3, #64	; 0x40
 800447a:	d12d      	bne.n	80044d8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	2b22      	cmp	r3, #34	; 0x22
 8004480:	d12a      	bne.n	80044d8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	d108      	bne.n	800449e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800449a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800449c:	e01c      	b.n	80044d8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b40      	cmp	r3, #64	; 0x40
 80044a8:	d103      	bne.n	80044b2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f880 	bl	80045b0 <I2C_MemoryTransmit_TXE_BTF>
}
 80044b0:	e012      	b.n	80044d8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	781a      	ldrb	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80044d6:	e7ff      	b.n	80044d8 <I2C_MasterTransmit_TXE+0x130>
 80044d8:	bf00      	nop
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b21      	cmp	r3, #33	; 0x21
 80044f8:	d156      	bne.n	80045a8 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fe:	b29b      	uxth	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d012      	beq.n	800452a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	781a      	ldrb	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451e:	b29b      	uxth	r3, r3
 8004520:	3b01      	subs	r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004528:	e03e      	b.n	80045a8 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2b08      	cmp	r3, #8
 800452e:	d01d      	beq.n	800456c <I2C_MasterTransmit_BTF+0x8c>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2b20      	cmp	r3, #32
 8004534:	d01a      	beq.n	800456c <I2C_MasterTransmit_BTF+0x8c>
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800453c:	d016      	beq.n	800456c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800454c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2211      	movs	r2, #17
 8004552:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7ff fec7 	bl	80042f8 <HAL_I2C_MasterTxCpltCallback>
}
 800456a:	e01d      	b.n	80045a8 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800457a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800458a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2220      	movs	r2, #32
 8004596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7ff fea8 	bl	80042f8 <HAL_I2C_MasterTxCpltCallback>
}
 80045a8:	bf00      	nop
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045be:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d11d      	bne.n	8004604 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d10b      	bne.n	80045e8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e0:	1c9a      	adds	r2, r3, #2
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80045e6:	e06e      	b.n	80046c6 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	121b      	asrs	r3, r3, #8
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004602:	e060      	b.n	80046c6 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004608:	2b01      	cmp	r3, #1
 800460a:	d10b      	bne.n	8004624 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004610:	b2da      	uxtb	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004622:	e050      	b.n	80046c6 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004628:	2b02      	cmp	r3, #2
 800462a:	d14c      	bne.n	80046c6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800462c:	7bfb      	ldrb	r3, [r7, #15]
 800462e:	2b22      	cmp	r3, #34	; 0x22
 8004630:	d108      	bne.n	8004644 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004640:	601a      	str	r2, [r3, #0]
}
 8004642:	e040      	b.n	80046c6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004648:	b29b      	uxth	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d015      	beq.n	800467a <I2C_MemoryTransmit_TXE_BTF+0xca>
 800464e:	7bfb      	ldrb	r3, [r7, #15]
 8004650:	2b21      	cmp	r3, #33	; 0x21
 8004652:	d112      	bne.n	800467a <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	781a      	ldrb	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466e:	b29b      	uxth	r3, r3
 8004670:	3b01      	subs	r3, #1
 8004672:	b29a      	uxth	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004678:	e025      	b.n	80046c6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467e:	b29b      	uxth	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d120      	bne.n	80046c6 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8004684:	7bfb      	ldrb	r3, [r7, #15]
 8004686:	2b21      	cmp	r3, #33	; 0x21
 8004688:	d11d      	bne.n	80046c6 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004698:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046a8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f00c ffc9 	bl	8011658 <HAL_I2C_MemTxCpltCallback>
}
 80046c6:	bf00      	nop
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b084      	sub	sp, #16
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b22      	cmp	r3, #34	; 0x22
 80046e0:	f040 80a2 	bne.w	8004828 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d921      	bls.n	8004736 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fc:	b2d2      	uxtb	r2, r2
 80046fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b03      	cmp	r3, #3
 8004720:	f040 8082 	bne.w	8004828 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004732:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004734:	e078      	b.n	8004828 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473a:	2b02      	cmp	r3, #2
 800473c:	d074      	beq.n	8004828 <I2C_MasterReceive_RXNE+0x15a>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d002      	beq.n	800474a <I2C_MasterReceive_RXNE+0x7c>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d16e      	bne.n	8004828 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f001 faee 	bl	8005d2c <I2C_WaitOnSTOPRequestThroughIT>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d142      	bne.n	80047dc <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004764:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004774:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	b2d2      	uxtb	r2, r2
 8004782:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	1c5a      	adds	r2, r3, #1
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004792:	b29b      	uxth	r3, r3
 8004794:	3b01      	subs	r3, #1
 8004796:	b29a      	uxth	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2220      	movs	r2, #32
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b40      	cmp	r3, #64	; 0x40
 80047ae:	d10a      	bne.n	80047c6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f00c ff92 	bl	80116e8 <HAL_I2C_MemRxCpltCallback>
}
 80047c4:	e030      	b.n	8004828 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2212      	movs	r2, #18
 80047d2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f7ff fd99 	bl	800430c <HAL_I2C_MasterRxCpltCallback>
}
 80047da:	e025      	b.n	8004828 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047ea:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	691a      	ldr	r2, [r3, #16]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	b2d2      	uxtb	r2, r2
 80047f8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	1c5a      	adds	r2, r3, #1
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004808:	b29b      	uxth	r3, r3
 800480a:	3b01      	subs	r3, #1
 800480c:	b29a      	uxth	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2220      	movs	r2, #32
 8004816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f00c ffa8 	bl	8011778 <HAL_I2C_ErrorCallback>
}
 8004828:	bf00      	nop
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004842:	b29b      	uxth	r3, r3
 8004844:	2b04      	cmp	r3, #4
 8004846:	d11b      	bne.n	8004880 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004856:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691a      	ldr	r2, [r3, #16]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004874:	b29b      	uxth	r3, r3
 8004876:	3b01      	subs	r3, #1
 8004878:	b29a      	uxth	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800487e:	e0bd      	b.n	80049fc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b03      	cmp	r3, #3
 8004888:	d129      	bne.n	80048de <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004898:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2b04      	cmp	r3, #4
 800489e:	d00a      	beq.n	80048b6 <I2C_MasterReceive_BTF+0x86>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d007      	beq.n	80048b6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048b4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	691a      	ldr	r2, [r3, #16]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	b2d2      	uxtb	r2, r2
 80048c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	1c5a      	adds	r2, r3, #1
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80048dc:	e08e      	b.n	80049fc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d176      	bne.n	80049d6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d002      	beq.n	80048f4 <I2C_MasterReceive_BTF+0xc4>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2b10      	cmp	r3, #16
 80048f2:	d108      	bne.n	8004906 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	e019      	b.n	800493a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b04      	cmp	r3, #4
 800490a:	d002      	beq.n	8004912 <I2C_MasterReceive_BTF+0xe2>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d108      	bne.n	8004924 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	e00a      	b.n	800493a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b10      	cmp	r3, #16
 8004928:	d007      	beq.n	800493a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004938:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	b2d2      	uxtb	r2, r2
 8004946:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004956:	b29b      	uxth	r3, r3
 8004958:	3b01      	subs	r3, #1
 800495a:	b29a      	uxth	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	691a      	ldr	r2, [r3, #16]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	b2d2      	uxtb	r2, r2
 800496c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497c:	b29b      	uxth	r3, r3
 800497e:	3b01      	subs	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004994:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2220      	movs	r2, #32
 800499a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	2b40      	cmp	r3, #64	; 0x40
 80049a8:	d10a      	bne.n	80049c0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f00c fe95 	bl	80116e8 <HAL_I2C_MemRxCpltCallback>
}
 80049be:	e01d      	b.n	80049fc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2212      	movs	r2, #18
 80049cc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7ff fc9c 	bl	800430c <HAL_I2C_MasterRxCpltCallback>
}
 80049d4:	e012      	b.n	80049fc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	3b01      	subs	r3, #1
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80049fc:	bf00      	nop
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b40      	cmp	r3, #64	; 0x40
 8004a16:	d117      	bne.n	8004a48 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d109      	bne.n	8004a34 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	461a      	mov	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a30:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004a32:	e067      	b.n	8004b04 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	f043 0301 	orr.w	r3, r3, #1
 8004a3e:	b2da      	uxtb	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	611a      	str	r2, [r3, #16]
}
 8004a46:	e05d      	b.n	8004b04 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a50:	d133      	bne.n	8004aba <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b21      	cmp	r3, #33	; 0x21
 8004a5c:	d109      	bne.n	8004a72 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	461a      	mov	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a6e:	611a      	str	r2, [r3, #16]
 8004a70:	e008      	b.n	8004a84 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	f043 0301 	orr.w	r3, r3, #1
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d004      	beq.n	8004a96 <I2C_Master_SB+0x92>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d108      	bne.n	8004aa8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d032      	beq.n	8004b04 <I2C_Master_SB+0x100>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d02d      	beq.n	8004b04 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ab6:	605a      	str	r2, [r3, #4]
}
 8004ab8:	e024      	b.n	8004b04 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10e      	bne.n	8004ae0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	11db      	asrs	r3, r3, #7
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	f003 0306 	and.w	r3, r3, #6
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	f063 030f 	orn	r3, r3, #15
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	611a      	str	r2, [r3, #16]
}
 8004ade:	e011      	b.n	8004b04 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d10d      	bne.n	8004b04 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	11db      	asrs	r3, r3, #7
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	f003 0306 	and.w	r3, r3, #6
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	f063 030e 	orn	r3, r3, #14
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	611a      	str	r2, [r3, #16]
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d103      	bne.n	8004b34 <I2C_Master_ADD10+0x24>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d011      	beq.n	8004b58 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d104      	bne.n	8004b48 <I2C_Master_ADD10+0x38>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d007      	beq.n	8004b58 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b56:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b091      	sub	sp, #68	; 0x44
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b80:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b22      	cmp	r3, #34	; 0x22
 8004b8c:	f040 8169 	bne.w	8004e62 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10f      	bne.n	8004bb8 <I2C_Master_ADDR+0x54>
 8004b98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004b9c:	2b40      	cmp	r3, #64	; 0x40
 8004b9e:	d10b      	bne.n	8004bb8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	633b      	str	r3, [r7, #48]	; 0x30
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	633b      	str	r3, [r7, #48]	; 0x30
 8004bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb6:	e160      	b.n	8004e7a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d11d      	bne.n	8004bfc <I2C_Master_ADDR+0x98>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004bc8:	d118      	bne.n	8004bfc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bca:	2300      	movs	r3, #0
 8004bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bee:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf4:	1c5a      	adds	r2, r3, #1
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	651a      	str	r2, [r3, #80]	; 0x50
 8004bfa:	e13e      	b.n	8004e7a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d113      	bne.n	8004c2e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c06:	2300      	movs	r3, #0
 8004c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	e115      	b.n	8004e5a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	f040 808a 	bne.w	8004d4e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c40:	d137      	bne.n	8004cb2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c50:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c60:	d113      	bne.n	8004c8a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c70:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c72:	2300      	movs	r3, #0
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	627b      	str	r3, [r7, #36]	; 0x24
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	e0e7      	b.n	8004e5a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	623b      	str	r3, [r7, #32]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	623b      	str	r3, [r7, #32]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	623b      	str	r3, [r7, #32]
 8004c9e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cae:	601a      	str	r2, [r3, #0]
 8004cb0:	e0d3      	b.n	8004e5a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d02e      	beq.n	8004d16 <I2C_Master_ADDR+0x1b2>
 8004cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cba:	2b20      	cmp	r3, #32
 8004cbc:	d02b      	beq.n	8004d16 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc0:	2b12      	cmp	r3, #18
 8004cc2:	d102      	bne.n	8004cca <I2C_Master_ADDR+0x166>
 8004cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d125      	bne.n	8004d16 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	d00e      	beq.n	8004cee <I2C_Master_ADDR+0x18a>
 8004cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d00b      	beq.n	8004cee <I2C_Master_ADDR+0x18a>
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd8:	2b10      	cmp	r3, #16
 8004cda:	d008      	beq.n	8004cee <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	e007      	b.n	8004cfe <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cfc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cfe:	2300      	movs	r3, #0
 8004d00:	61fb      	str	r3, [r7, #28]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	61fb      	str	r3, [r7, #28]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	61fb      	str	r3, [r7, #28]
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	e0a1      	b.n	8004e5a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d24:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d26:	2300      	movs	r3, #0
 8004d28:	61bb      	str	r3, [r7, #24]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	61bb      	str	r3, [r7, #24]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	61bb      	str	r3, [r7, #24]
 8004d3a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	e085      	b.n	8004e5a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d14d      	bne.n	8004df4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d016      	beq.n	8004d8c <I2C_Master_ADDR+0x228>
 8004d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d013      	beq.n	8004d8c <I2C_Master_ADDR+0x228>
 8004d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d66:	2b10      	cmp	r3, #16
 8004d68:	d010      	beq.n	8004d8c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d78:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	e007      	b.n	8004d9c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d9a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004daa:	d117      	bne.n	8004ddc <I2C_Master_ADDR+0x278>
 8004dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004db2:	d00b      	beq.n	8004dcc <I2C_Master_ADDR+0x268>
 8004db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d008      	beq.n	8004dcc <I2C_Master_ADDR+0x268>
 8004dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d005      	beq.n	8004dcc <I2C_Master_ADDR+0x268>
 8004dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc2:	2b10      	cmp	r3, #16
 8004dc4:	d002      	beq.n	8004dcc <I2C_Master_ADDR+0x268>
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc8:	2b20      	cmp	r3, #32
 8004dca:	d107      	bne.n	8004ddc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004dda:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ddc:	2300      	movs	r3, #0
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	e032      	b.n	8004e5a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e02:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e12:	d117      	bne.n	8004e44 <I2C_Master_ADDR+0x2e0>
 8004e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e16:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e1a:	d00b      	beq.n	8004e34 <I2C_Master_ADDR+0x2d0>
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d008      	beq.n	8004e34 <I2C_Master_ADDR+0x2d0>
 8004e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d005      	beq.n	8004e34 <I2C_Master_ADDR+0x2d0>
 8004e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2a:	2b10      	cmp	r3, #16
 8004e2c:	d002      	beq.n	8004e34 <I2C_Master_ADDR+0x2d0>
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	d107      	bne.n	8004e44 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e42:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e44:	2300      	movs	r3, #0
 8004e46:	613b      	str	r3, [r7, #16]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	613b      	str	r3, [r7, #16]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	613b      	str	r3, [r7, #16]
 8004e58:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004e60:	e00b      	b.n	8004e7a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e62:	2300      	movs	r3, #0
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	68fb      	ldr	r3, [r7, #12]
}
 8004e78:	e7ff      	b.n	8004e7a <I2C_Master_ADDR+0x316>
 8004e7a:	bf00      	nop
 8004e7c:	3744      	adds	r7, #68	; 0x44
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b084      	sub	sp, #16
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e94:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d02b      	beq.n	8004ef8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	781a      	ldrb	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d114      	bne.n	8004ef8 <I2C_SlaveTransmit_TXE+0x72>
 8004ece:	7bfb      	ldrb	r3, [r7, #15]
 8004ed0:	2b29      	cmp	r3, #41	; 0x29
 8004ed2:	d111      	bne.n	8004ef8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2221      	movs	r2, #33	; 0x21
 8004ee8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2228      	movs	r2, #40	; 0x28
 8004eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7ff fa14 	bl	8004320 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004ef8:	bf00      	nop
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d011      	beq.n	8004f36 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	781a      	ldrb	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004f36:	bf00      	nop
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b084      	sub	sp, #16
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f50:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d02c      	beq.n	8004fb6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	691a      	ldr	r2, [r3, #16]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f66:	b2d2      	uxtb	r2, r2
 8004f68:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d114      	bne.n	8004fb6 <I2C_SlaveReceive_RXNE+0x74>
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
 8004f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8004f90:	d111      	bne.n	8004fb6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fa0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2222      	movs	r2, #34	; 0x22
 8004fa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2228      	movs	r2, #40	; 0x28
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7ff f9bf 	bl	8004334 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004fb6:	bf00      	nop
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d012      	beq.n	8004ff6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	691a      	ldr	r2, [r3, #16]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	1c5a      	adds	r2, r3, #1
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b084      	sub	sp, #16
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800500c:	2300      	movs	r3, #0
 800500e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005016:	b2db      	uxtb	r3, r3
 8005018:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800501c:	2b28      	cmp	r3, #40	; 0x28
 800501e:	d127      	bne.n	8005070 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800502e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	089b      	lsrs	r3, r3, #2
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800503c:	2301      	movs	r3, #1
 800503e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	09db      	lsrs	r3, r3, #7
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b00      	cmp	r3, #0
 800504a:	d103      	bne.n	8005054 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	81bb      	strh	r3, [r7, #12]
 8005052:	e002      	b.n	800505a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005062:	89ba      	ldrh	r2, [r7, #12]
 8005064:	7bfb      	ldrb	r3, [r7, #15]
 8005066:	4619      	mov	r1, r3
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7ff f96d 	bl	8004348 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800506e:	e008      	b.n	8005082 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f06f 0202 	mvn.w	r2, #2
 8005078:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005082:	bf00      	nop
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
	...

0800508c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800509a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050aa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80050ac:	2300      	movs	r3, #0
 80050ae:	60bb      	str	r3, [r7, #8]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	60bb      	str	r3, [r7, #8]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0201 	orr.w	r2, r2, #1
 80050c6:	601a      	str	r2, [r3, #0]
 80050c8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050e8:	d172      	bne.n	80051d0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	2b22      	cmp	r3, #34	; 0x22
 80050ee:	d002      	beq.n	80050f6 <I2C_Slave_STOPF+0x6a>
 80050f0:	7bfb      	ldrb	r3, [r7, #15]
 80050f2:	2b2a      	cmp	r3, #42	; 0x2a
 80050f4:	d135      	bne.n	8005162 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	b29a      	uxth	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005108:	b29b      	uxth	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d005      	beq.n	800511a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	f043 0204 	orr.w	r2, r3, #4
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005128:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512e:	4618      	mov	r0, r3
 8005130:	f7fd fdea 	bl	8002d08 <HAL_DMA_GetState>
 8005134:	4603      	mov	r3, r0
 8005136:	2b01      	cmp	r3, #1
 8005138:	d049      	beq.n	80051ce <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513e:	4a69      	ldr	r2, [pc, #420]	; (80052e4 <I2C_Slave_STOPF+0x258>)
 8005140:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005146:	4618      	mov	r0, r3
 8005148:	f7fd fc32 	bl	80029b0 <HAL_DMA_Abort_IT>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d03d      	beq.n	80051ce <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800515c:	4610      	mov	r0, r2
 800515e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005160:	e035      	b.n	80051ce <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	b29a      	uxth	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005174:	b29b      	uxth	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d005      	beq.n	8005186 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	f043 0204 	orr.w	r2, r3, #4
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005194:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519a:	4618      	mov	r0, r3
 800519c:	f7fd fdb4 	bl	8002d08 <HAL_DMA_GetState>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d014      	beq.n	80051d0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051aa:	4a4e      	ldr	r2, [pc, #312]	; (80052e4 <I2C_Slave_STOPF+0x258>)
 80051ac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fd fbfc 	bl	80029b0 <HAL_DMA_Abort_IT>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d008      	beq.n	80051d0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051c8:	4610      	mov	r0, r2
 80051ca:	4798      	blx	r3
 80051cc:	e000      	b.n	80051d0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051ce:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d03e      	beq.n	8005258 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b04      	cmp	r3, #4
 80051e6:	d112      	bne.n	800520e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691a      	ldr	r2, [r3, #16]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005204:	b29b      	uxth	r3, r3
 8005206:	3b01      	subs	r3, #1
 8005208:	b29a      	uxth	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005218:	2b40      	cmp	r3, #64	; 0x40
 800521a:	d112      	bne.n	8005242 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	691a      	ldr	r2, [r3, #16]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522e:	1c5a      	adds	r2, r3, #1
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005238:	b29b      	uxth	r3, r3
 800523a:	3b01      	subs	r3, #1
 800523c:	b29a      	uxth	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005246:	b29b      	uxth	r3, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	d005      	beq.n	8005258 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005250:	f043 0204 	orr.w	r2, r3, #4
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f8b3 	bl	80053cc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005266:	e039      	b.n	80052dc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005268:	7bfb      	ldrb	r3, [r7, #15]
 800526a:	2b2a      	cmp	r3, #42	; 0x2a
 800526c:	d109      	bne.n	8005282 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2228      	movs	r2, #40	; 0x28
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7ff f859 	bl	8004334 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b28      	cmp	r3, #40	; 0x28
 800528c:	d111      	bne.n	80052b2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a15      	ldr	r2, [pc, #84]	; (80052e8 <I2C_Slave_STOPF+0x25c>)
 8005292:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2220      	movs	r2, #32
 800529e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7ff f85a 	bl	8004364 <HAL_I2C_ListenCpltCallback>
}
 80052b0:	e014      	b.n	80052dc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	2b22      	cmp	r3, #34	; 0x22
 80052b8:	d002      	beq.n	80052c0 <I2C_Slave_STOPF+0x234>
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
 80052bc:	2b22      	cmp	r3, #34	; 0x22
 80052be:	d10d      	bne.n	80052dc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7ff f82c 	bl	8004334 <HAL_I2C_SlaveRxCpltCallback>
}
 80052dc:	bf00      	nop
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	0800592d 	.word	0x0800592d
 80052e8:	ffff0000 	.word	0xffff0000

080052ec <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052fa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005300:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	2b08      	cmp	r3, #8
 8005306:	d002      	beq.n	800530e <I2C_Slave_AF+0x22>
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2b20      	cmp	r3, #32
 800530c:	d129      	bne.n	8005362 <I2C_Slave_AF+0x76>
 800530e:	7bfb      	ldrb	r3, [r7, #15]
 8005310:	2b28      	cmp	r3, #40	; 0x28
 8005312:	d126      	bne.n	8005362 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a2c      	ldr	r2, [pc, #176]	; (80053c8 <I2C_Slave_AF+0xdc>)
 8005318:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005328:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005332:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005342:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2220      	movs	r2, #32
 800534e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7ff f802 	bl	8004364 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005360:	e02e      	b.n	80053c0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005362:	7bfb      	ldrb	r3, [r7, #15]
 8005364:	2b21      	cmp	r3, #33	; 0x21
 8005366:	d126      	bne.n	80053b6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a17      	ldr	r2, [pc, #92]	; (80053c8 <I2C_Slave_AF+0xdc>)
 800536c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2221      	movs	r2, #33	; 0x21
 8005372:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2220      	movs	r2, #32
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005392:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800539c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ac:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f7fe ffb6 	bl	8004320 <HAL_I2C_SlaveTxCpltCallback>
}
 80053b4:	e004      	b.n	80053c0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053be:	615a      	str	r2, [r3, #20]
}
 80053c0:	bf00      	nop
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	ffff0000 	.word	0xffff0000

080053cc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053da:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053e2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80053e4:	7bbb      	ldrb	r3, [r7, #14]
 80053e6:	2b10      	cmp	r3, #16
 80053e8:	d002      	beq.n	80053f0 <I2C_ITError+0x24>
 80053ea:	7bbb      	ldrb	r3, [r7, #14]
 80053ec:	2b40      	cmp	r3, #64	; 0x40
 80053ee:	d10a      	bne.n	8005406 <I2C_ITError+0x3a>
 80053f0:	7bfb      	ldrb	r3, [r7, #15]
 80053f2:	2b22      	cmp	r3, #34	; 0x22
 80053f4:	d107      	bne.n	8005406 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005404:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005406:	7bfb      	ldrb	r3, [r7, #15]
 8005408:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800540c:	2b28      	cmp	r3, #40	; 0x28
 800540e:	d107      	bne.n	8005420 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2228      	movs	r2, #40	; 0x28
 800541a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800541e:	e015      	b.n	800544c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800542a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800542e:	d00a      	beq.n	8005446 <I2C_ITError+0x7a>
 8005430:	7bfb      	ldrb	r3, [r7, #15]
 8005432:	2b60      	cmp	r3, #96	; 0x60
 8005434:	d007      	beq.n	8005446 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2220      	movs	r2, #32
 800543a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800545a:	d162      	bne.n	8005522 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800546a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005470:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b01      	cmp	r3, #1
 8005478:	d020      	beq.n	80054bc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547e:	4a6a      	ldr	r2, [pc, #424]	; (8005628 <I2C_ITError+0x25c>)
 8005480:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005486:	4618      	mov	r0, r3
 8005488:	f7fd fa92 	bl	80029b0 <HAL_DMA_Abort_IT>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 8089 	beq.w	80055a6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 0201 	bic.w	r2, r2, #1
 80054a2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054b6:	4610      	mov	r0, r2
 80054b8:	4798      	blx	r3
 80054ba:	e074      	b.n	80055a6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c0:	4a59      	ldr	r2, [pc, #356]	; (8005628 <I2C_ITError+0x25c>)
 80054c2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7fd fa71 	bl	80029b0 <HAL_DMA_Abort_IT>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d068      	beq.n	80055a6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054de:	2b40      	cmp	r3, #64	; 0x40
 80054e0:	d10b      	bne.n	80054fa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	1c5a      	adds	r2, r3, #1
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0201 	bic.w	r2, r2, #1
 8005508:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2220      	movs	r2, #32
 800550e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800551c:	4610      	mov	r0, r2
 800551e:	4798      	blx	r3
 8005520:	e041      	b.n	80055a6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b60      	cmp	r3, #96	; 0x60
 800552c:	d125      	bne.n	800557a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2220      	movs	r2, #32
 8005532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005546:	2b40      	cmp	r3, #64	; 0x40
 8005548:	d10b      	bne.n	8005562 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	b2d2      	uxtb	r2, r2
 8005556:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 0201 	bic.w	r2, r2, #1
 8005570:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fe ff00 	bl	8004378 <HAL_I2C_AbortCpltCallback>
 8005578:	e015      	b.n	80055a6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005584:	2b40      	cmp	r3, #64	; 0x40
 8005586:	d10b      	bne.n	80055a0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691a      	ldr	r2, [r3, #16]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f00c f8e9 	bl	8011778 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10e      	bne.n	80055d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d109      	bne.n	80055d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d104      	bne.n	80055d4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d007      	beq.n	80055e4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055e2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ea:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f0:	f003 0304 	and.w	r3, r3, #4
 80055f4:	2b04      	cmp	r3, #4
 80055f6:	d113      	bne.n	8005620 <I2C_ITError+0x254>
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
 80055fa:	2b28      	cmp	r3, #40	; 0x28
 80055fc:	d110      	bne.n	8005620 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a0a      	ldr	r2, [pc, #40]	; (800562c <I2C_ITError+0x260>)
 8005602:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2220      	movs	r2, #32
 800560e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7fe fea2 	bl	8004364 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005620:	bf00      	nop
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	0800592d 	.word	0x0800592d
 800562c:	ffff0000 	.word	0xffff0000

08005630 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b088      	sub	sp, #32
 8005634:	af02      	add	r7, sp, #8
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	4608      	mov	r0, r1
 800563a:	4611      	mov	r1, r2
 800563c:	461a      	mov	r2, r3
 800563e:	4603      	mov	r3, r0
 8005640:	817b      	strh	r3, [r7, #10]
 8005642:	460b      	mov	r3, r1
 8005644:	813b      	strh	r3, [r7, #8]
 8005646:	4613      	mov	r3, r2
 8005648:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005658:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	2200      	movs	r2, #0
 8005662:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 fa08 	bl	8005a7c <I2C_WaitOnFlagUntilTimeout>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00d      	beq.n	800568e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005680:	d103      	bne.n	800568a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005688:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e05f      	b.n	800574e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800568e:	897b      	ldrh	r3, [r7, #10]
 8005690:	b2db      	uxtb	r3, r3
 8005692:	461a      	mov	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800569c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	6a3a      	ldr	r2, [r7, #32]
 80056a2:	492d      	ldr	r1, [pc, #180]	; (8005758 <I2C_RequestMemoryWrite+0x128>)
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 fa40 	bl	8005b2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e04c      	b.n	800574e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056b4:	2300      	movs	r3, #0
 80056b6:	617b      	str	r3, [r7, #20]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	617b      	str	r3, [r7, #20]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	617b      	str	r3, [r7, #20]
 80056c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056cc:	6a39      	ldr	r1, [r7, #32]
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 faaa 	bl	8005c28 <I2C_WaitOnTXEFlagUntilTimeout>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00d      	beq.n	80056f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	2b04      	cmp	r3, #4
 80056e0:	d107      	bne.n	80056f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e02b      	b.n	800574e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056f6:	88fb      	ldrh	r3, [r7, #6]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d105      	bne.n	8005708 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80056fc:	893b      	ldrh	r3, [r7, #8]
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	611a      	str	r2, [r3, #16]
 8005706:	e021      	b.n	800574c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005708:	893b      	ldrh	r3, [r7, #8]
 800570a:	0a1b      	lsrs	r3, r3, #8
 800570c:	b29b      	uxth	r3, r3
 800570e:	b2da      	uxtb	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005718:	6a39      	ldr	r1, [r7, #32]
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f000 fa84 	bl	8005c28 <I2C_WaitOnTXEFlagUntilTimeout>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00d      	beq.n	8005742 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	2b04      	cmp	r3, #4
 800572c:	d107      	bne.n	800573e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800573c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e005      	b.n	800574e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005742:	893b      	ldrh	r3, [r7, #8]
 8005744:	b2da      	uxtb	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	00010002 	.word	0x00010002

0800575c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b088      	sub	sp, #32
 8005760:	af02      	add	r7, sp, #8
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	4608      	mov	r0, r1
 8005766:	4611      	mov	r1, r2
 8005768:	461a      	mov	r2, r3
 800576a:	4603      	mov	r3, r0
 800576c:	817b      	strh	r3, [r7, #10]
 800576e:	460b      	mov	r3, r1
 8005770:	813b      	strh	r3, [r7, #8]
 8005772:	4613      	mov	r3, r2
 8005774:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005784:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005794:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	2200      	movs	r2, #0
 800579e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f000 f96a 	bl	8005a7c <I2C_WaitOnFlagUntilTimeout>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00d      	beq.n	80057ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057bc:	d103      	bne.n	80057c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e0aa      	b.n	8005920 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057ca:	897b      	ldrh	r3, [r7, #10]
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	461a      	mov	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	6a3a      	ldr	r2, [r7, #32]
 80057de:	4952      	ldr	r1, [pc, #328]	; (8005928 <I2C_RequestMemoryRead+0x1cc>)
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 f9a2 	bl	8005b2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e097      	b.n	8005920 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057f0:	2300      	movs	r3, #0
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005808:	6a39      	ldr	r1, [r7, #32]
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f000 fa0c 	bl	8005c28 <I2C_WaitOnTXEFlagUntilTimeout>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00d      	beq.n	8005832 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	2b04      	cmp	r3, #4
 800581c:	d107      	bne.n	800582e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800582c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e076      	b.n	8005920 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005832:	88fb      	ldrh	r3, [r7, #6]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d105      	bne.n	8005844 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005838:	893b      	ldrh	r3, [r7, #8]
 800583a:	b2da      	uxtb	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	611a      	str	r2, [r3, #16]
 8005842:	e021      	b.n	8005888 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005844:	893b      	ldrh	r3, [r7, #8]
 8005846:	0a1b      	lsrs	r3, r3, #8
 8005848:	b29b      	uxth	r3, r3
 800584a:	b2da      	uxtb	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005854:	6a39      	ldr	r1, [r7, #32]
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f000 f9e6 	bl	8005c28 <I2C_WaitOnTXEFlagUntilTimeout>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00d      	beq.n	800587e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	2b04      	cmp	r3, #4
 8005868:	d107      	bne.n	800587a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005878:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e050      	b.n	8005920 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800587e:	893b      	ldrh	r3, [r7, #8]
 8005880:	b2da      	uxtb	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800588a:	6a39      	ldr	r1, [r7, #32]
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f000 f9cb 	bl	8005c28 <I2C_WaitOnTXEFlagUntilTimeout>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00d      	beq.n	80058b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589c:	2b04      	cmp	r3, #4
 800589e:	d107      	bne.n	80058b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e035      	b.n	8005920 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 f8d3 	bl	8005a7c <I2C_WaitOnFlagUntilTimeout>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00d      	beq.n	80058f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ea:	d103      	bne.n	80058f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e013      	b.n	8005920 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80058f8:	897b      	ldrh	r3, [r7, #10]
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	f043 0301 	orr.w	r3, r3, #1
 8005900:	b2da      	uxtb	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	6a3a      	ldr	r2, [r7, #32]
 800590c:	4906      	ldr	r1, [pc, #24]	; (8005928 <I2C_RequestMemoryRead+0x1cc>)
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 f90b 	bl	8005b2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e000      	b.n	8005920 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3718      	adds	r7, #24
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	00010002 	.word	0x00010002

0800592c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005944:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005946:	4b4b      	ldr	r3, [pc, #300]	; (8005a74 <I2C_DMAAbort+0x148>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	08db      	lsrs	r3, r3, #3
 800594c:	4a4a      	ldr	r2, [pc, #296]	; (8005a78 <I2C_DMAAbort+0x14c>)
 800594e:	fba2 2303 	umull	r2, r3, r2, r3
 8005952:	0a1a      	lsrs	r2, r3, #8
 8005954:	4613      	mov	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	00da      	lsls	r2, r3, #3
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d106      	bne.n	8005974 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596a:	f043 0220 	orr.w	r2, r3, #32
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005972:	e00a      	b.n	800598a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	3b01      	subs	r3, #1
 8005978:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005988:	d0ea      	beq.n	8005960 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005996:	2200      	movs	r2, #0
 8005998:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a6:	2200      	movs	r2, #0
 80059a8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059b8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2200      	movs	r2, #0
 80059be:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d003      	beq.n	80059d0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059cc:	2200      	movs	r2, #0
 80059ce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059dc:	2200      	movs	r2, #0
 80059de:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0201 	bic.w	r2, r2, #1
 80059ee:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b60      	cmp	r3, #96	; 0x60
 80059fa:	d10e      	bne.n	8005a1a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	2220      	movs	r2, #32
 8005a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a12:	6978      	ldr	r0, [r7, #20]
 8005a14:	f7fe fcb0 	bl	8004378 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a18:	e027      	b.n	8005a6a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a1a:	7cfb      	ldrb	r3, [r7, #19]
 8005a1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a20:	2b28      	cmp	r3, #40	; 0x28
 8005a22:	d117      	bne.n	8005a54 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f042 0201 	orr.w	r2, r2, #1
 8005a32:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a42:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	2200      	movs	r2, #0
 8005a48:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2228      	movs	r2, #40	; 0x28
 8005a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a52:	e007      	b.n	8005a64 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005a64:	6978      	ldr	r0, [r7, #20]
 8005a66:	f00b fe87 	bl	8011778 <HAL_I2C_ErrorCallback>
}
 8005a6a:	bf00      	nop
 8005a6c:	3718      	adds	r7, #24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	20000000 	.word	0x20000000
 8005a78:	14f8b589 	.word	0x14f8b589

08005a7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	603b      	str	r3, [r7, #0]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a8c:	e025      	b.n	8005ada <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a94:	d021      	beq.n	8005ada <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a96:	f7fc f99f 	bl	8001dd8 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d302      	bcc.n	8005aac <I2C_WaitOnFlagUntilTimeout+0x30>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d116      	bne.n	8005ada <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	f043 0220 	orr.w	r2, r3, #32
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e023      	b.n	8005b22 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	0c1b      	lsrs	r3, r3, #16
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d10d      	bne.n	8005b00 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	43da      	mvns	r2, r3
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	4013      	ands	r3, r2
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	bf0c      	ite	eq
 8005af6:	2301      	moveq	r3, #1
 8005af8:	2300      	movne	r3, #0
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	461a      	mov	r2, r3
 8005afe:	e00c      	b.n	8005b1a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	43da      	mvns	r2, r3
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	bf0c      	ite	eq
 8005b12:	2301      	moveq	r3, #1
 8005b14:	2300      	movne	r3, #0
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	461a      	mov	r2, r3
 8005b1a:	79fb      	ldrb	r3, [r7, #7]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d0b6      	beq.n	8005a8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b084      	sub	sp, #16
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	60f8      	str	r0, [r7, #12]
 8005b32:	60b9      	str	r1, [r7, #8]
 8005b34:	607a      	str	r2, [r7, #4]
 8005b36:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b38:	e051      	b.n	8005bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b48:	d123      	bne.n	8005b92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b58:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b62:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	f043 0204 	orr.w	r2, r3, #4
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e046      	b.n	8005c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b98:	d021      	beq.n	8005bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b9a:	f7fc f91d 	bl	8001dd8 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d302      	bcc.n	8005bb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d116      	bne.n	8005bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2220      	movs	r2, #32
 8005bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	f043 0220 	orr.w	r2, r3, #32
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e020      	b.n	8005c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	0c1b      	lsrs	r3, r3, #16
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d10c      	bne.n	8005c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	43da      	mvns	r2, r3
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	bf14      	ite	ne
 8005bfa:	2301      	movne	r3, #1
 8005bfc:	2300      	moveq	r3, #0
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	e00b      	b.n	8005c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	43da      	mvns	r2, r3
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	bf14      	ite	ne
 8005c14:	2301      	movne	r3, #1
 8005c16:	2300      	moveq	r3, #0
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d18d      	bne.n	8005b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c34:	e02d      	b.n	8005c92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 f900 	bl	8005e3c <I2C_IsAcknowledgeFailed>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e02d      	b.n	8005ca2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c4c:	d021      	beq.n	8005c92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c4e:	f7fc f8c3 	bl	8001dd8 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d302      	bcc.n	8005c64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d116      	bne.n	8005c92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	f043 0220 	orr.w	r2, r3, #32
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e007      	b.n	8005ca2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c9c:	2b80      	cmp	r3, #128	; 0x80
 8005c9e:	d1ca      	bne.n	8005c36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b084      	sub	sp, #16
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005cb6:	e02d      	b.n	8005d14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 f8bf 	bl	8005e3c <I2C_IsAcknowledgeFailed>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e02d      	b.n	8005d24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cce:	d021      	beq.n	8005d14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cd0:	f7fc f882 	bl	8001dd8 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d302      	bcc.n	8005ce6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d116      	bne.n	8005d14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d00:	f043 0220 	orr.w	r2, r3, #32
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e007      	b.n	8005d24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	f003 0304 	and.w	r3, r3, #4
 8005d1e:	2b04      	cmp	r3, #4
 8005d20:	d1ca      	bne.n	8005cb8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d38:	4b13      	ldr	r3, [pc, #76]	; (8005d88 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	08db      	lsrs	r3, r3, #3
 8005d3e:	4a13      	ldr	r2, [pc, #76]	; (8005d8c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005d40:	fba2 2303 	umull	r2, r3, r2, r3
 8005d44:	0a1a      	lsrs	r2, r3, #8
 8005d46:	4613      	mov	r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4413      	add	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	3b01      	subs	r3, #1
 8005d52:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d107      	bne.n	8005d6a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5e:	f043 0220 	orr.w	r2, r3, #32
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e008      	b.n	8005d7c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d78:	d0e9      	beq.n	8005d4e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	20000000 	.word	0x20000000
 8005d8c:	14f8b589 	.word	0x14f8b589

08005d90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d9c:	e042      	b.n	8005e24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	f003 0310 	and.w	r3, r3, #16
 8005da8:	2b10      	cmp	r3, #16
 8005daa:	d119      	bne.n	8005de0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f06f 0210 	mvn.w	r2, #16
 8005db4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e029      	b.n	8005e34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005de0:	f7fb fffa 	bl	8001dd8 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d302      	bcc.n	8005df6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d116      	bne.n	8005e24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e10:	f043 0220 	orr.w	r2, r3, #32
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e007      	b.n	8005e34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2e:	2b40      	cmp	r3, #64	; 0x40
 8005e30:	d1b5      	bne.n	8005d9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e52:	d11b      	bne.n	8005e8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e78:	f043 0204 	orr.w	r2, r3, #4
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e000      	b.n	8005e8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b083      	sub	sp, #12
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005eaa:	d103      	bne.n	8005eb4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005eb2:	e007      	b.n	8005ec4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005ebc:	d102      	bne.n	8005ec4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2208      	movs	r2, #8
 8005ec2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ed2:	b08f      	sub	sp, #60	; 0x3c
 8005ed4:	af0a      	add	r7, sp, #40	; 0x28
 8005ed6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e10f      	b.n	8006102 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d106      	bne.n	8005f02 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f00a fa1b 	bl	8010338 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2203      	movs	r2, #3
 8005f06:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d102      	bne.n	8005f1c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f004 f844 	bl	8009fae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	603b      	str	r3, [r7, #0]
 8005f2c:	687e      	ldr	r6, [r7, #4]
 8005f2e:	466d      	mov	r5, sp
 8005f30:	f106 0410 	add.w	r4, r6, #16
 8005f34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005f40:	e885 0003 	stmia.w	r5, {r0, r1}
 8005f44:	1d33      	adds	r3, r6, #4
 8005f46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f48:	6838      	ldr	r0, [r7, #0]
 8005f4a:	f003 ff1b 	bl	8009d84 <USB_CoreInit>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d005      	beq.n	8005f60 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e0d0      	b.n	8006102 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2100      	movs	r1, #0
 8005f66:	4618      	mov	r0, r3
 8005f68:	f004 f832 	bl	8009fd0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	73fb      	strb	r3, [r7, #15]
 8005f70:	e04a      	b.n	8006008 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005f72:	7bfa      	ldrb	r2, [r7, #15]
 8005f74:	6879      	ldr	r1, [r7, #4]
 8005f76:	4613      	mov	r3, r2
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	1a9b      	subs	r3, r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	440b      	add	r3, r1
 8005f80:	333d      	adds	r3, #61	; 0x3d
 8005f82:	2201      	movs	r2, #1
 8005f84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005f86:	7bfa      	ldrb	r2, [r7, #15]
 8005f88:	6879      	ldr	r1, [r7, #4]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	00db      	lsls	r3, r3, #3
 8005f8e:	1a9b      	subs	r3, r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	440b      	add	r3, r1
 8005f94:	333c      	adds	r3, #60	; 0x3c
 8005f96:	7bfa      	ldrb	r2, [r7, #15]
 8005f98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005f9a:	7bfa      	ldrb	r2, [r7, #15]
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
 8005f9e:	b298      	uxth	r0, r3
 8005fa0:	6879      	ldr	r1, [r7, #4]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	00db      	lsls	r3, r3, #3
 8005fa6:	1a9b      	subs	r3, r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	440b      	add	r3, r1
 8005fac:	3342      	adds	r3, #66	; 0x42
 8005fae:	4602      	mov	r2, r0
 8005fb0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005fb2:	7bfa      	ldrb	r2, [r7, #15]
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	00db      	lsls	r3, r3, #3
 8005fba:	1a9b      	subs	r3, r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	440b      	add	r3, r1
 8005fc0:	333f      	adds	r3, #63	; 0x3f
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005fc6:	7bfa      	ldrb	r2, [r7, #15]
 8005fc8:	6879      	ldr	r1, [r7, #4]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	00db      	lsls	r3, r3, #3
 8005fce:	1a9b      	subs	r3, r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	440b      	add	r3, r1
 8005fd4:	3344      	adds	r3, #68	; 0x44
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005fda:	7bfa      	ldrb	r2, [r7, #15]
 8005fdc:	6879      	ldr	r1, [r7, #4]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	00db      	lsls	r3, r3, #3
 8005fe2:	1a9b      	subs	r3, r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	440b      	add	r3, r1
 8005fe8:	3348      	adds	r3, #72	; 0x48
 8005fea:	2200      	movs	r2, #0
 8005fec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005fee:	7bfa      	ldrb	r2, [r7, #15]
 8005ff0:	6879      	ldr	r1, [r7, #4]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	00db      	lsls	r3, r3, #3
 8005ff6:	1a9b      	subs	r3, r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	440b      	add	r3, r1
 8005ffc:	3350      	adds	r3, #80	; 0x50
 8005ffe:	2200      	movs	r2, #0
 8006000:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006002:	7bfb      	ldrb	r3, [r7, #15]
 8006004:	3301      	adds	r3, #1
 8006006:	73fb      	strb	r3, [r7, #15]
 8006008:	7bfa      	ldrb	r2, [r7, #15]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	429a      	cmp	r2, r3
 8006010:	d3af      	bcc.n	8005f72 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006012:	2300      	movs	r3, #0
 8006014:	73fb      	strb	r3, [r7, #15]
 8006016:	e044      	b.n	80060a2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006018:	7bfa      	ldrb	r2, [r7, #15]
 800601a:	6879      	ldr	r1, [r7, #4]
 800601c:	4613      	mov	r3, r2
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	1a9b      	subs	r3, r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	440b      	add	r3, r1
 8006026:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800602a:	2200      	movs	r2, #0
 800602c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800602e:	7bfa      	ldrb	r2, [r7, #15]
 8006030:	6879      	ldr	r1, [r7, #4]
 8006032:	4613      	mov	r3, r2
 8006034:	00db      	lsls	r3, r3, #3
 8006036:	1a9b      	subs	r3, r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	440b      	add	r3, r1
 800603c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006040:	7bfa      	ldrb	r2, [r7, #15]
 8006042:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006044:	7bfa      	ldrb	r2, [r7, #15]
 8006046:	6879      	ldr	r1, [r7, #4]
 8006048:	4613      	mov	r3, r2
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	1a9b      	subs	r3, r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	440b      	add	r3, r1
 8006052:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006056:	2200      	movs	r2, #0
 8006058:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800605a:	7bfa      	ldrb	r2, [r7, #15]
 800605c:	6879      	ldr	r1, [r7, #4]
 800605e:	4613      	mov	r3, r2
 8006060:	00db      	lsls	r3, r3, #3
 8006062:	1a9b      	subs	r3, r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	440b      	add	r3, r1
 8006068:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800606c:	2200      	movs	r2, #0
 800606e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006070:	7bfa      	ldrb	r2, [r7, #15]
 8006072:	6879      	ldr	r1, [r7, #4]
 8006074:	4613      	mov	r3, r2
 8006076:	00db      	lsls	r3, r3, #3
 8006078:	1a9b      	subs	r3, r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	440b      	add	r3, r1
 800607e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006082:	2200      	movs	r2, #0
 8006084:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006086:	7bfa      	ldrb	r2, [r7, #15]
 8006088:	6879      	ldr	r1, [r7, #4]
 800608a:	4613      	mov	r3, r2
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	1a9b      	subs	r3, r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	440b      	add	r3, r1
 8006094:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006098:	2200      	movs	r2, #0
 800609a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	3301      	adds	r3, #1
 80060a0:	73fb      	strb	r3, [r7, #15]
 80060a2:	7bfa      	ldrb	r2, [r7, #15]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d3b5      	bcc.n	8006018 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	603b      	str	r3, [r7, #0]
 80060b2:	687e      	ldr	r6, [r7, #4]
 80060b4:	466d      	mov	r5, sp
 80060b6:	f106 0410 	add.w	r4, r6, #16
 80060ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80060c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80060ca:	1d33      	adds	r3, r6, #4
 80060cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060ce:	6838      	ldr	r0, [r7, #0]
 80060d0:	f003 ffa8 	bl	800a024 <USB_DevInit>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d005      	beq.n	80060e6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2202      	movs	r2, #2
 80060de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e00d      	b.n	8006102 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f004 fff0 	bl	800b0e0 <USB_DevDisconnect>

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800610a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b084      	sub	sp, #16
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800611e:	2b01      	cmp	r3, #1
 8006120:	d101      	bne.n	8006126 <HAL_PCD_Start+0x1c>
 8006122:	2302      	movs	r3, #2
 8006124:	e020      	b.n	8006168 <HAL_PCD_Start+0x5e>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006132:	2b01      	cmp	r3, #1
 8006134:	d109      	bne.n	800614a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800613a:	2b01      	cmp	r3, #1
 800613c:	d005      	beq.n	800614a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006142:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4618      	mov	r0, r3
 8006150:	f003 ff1c 	bl	8009f8c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4618      	mov	r0, r3
 800615a:	f004 ffa0 	bl	800b09e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006170:	b590      	push	{r4, r7, lr}
 8006172:	b08d      	sub	sp, #52	; 0x34
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617e:	6a3b      	ldr	r3, [r7, #32]
 8006180:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4618      	mov	r0, r3
 8006188:	f005 f85e 	bl	800b248 <USB_GetMode>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	f040 839d 	bne.w	80068ce <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4618      	mov	r0, r3
 800619a:	f004 ffc2 	bl	800b122 <USB_ReadInterrupts>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 8393 	beq.w	80068cc <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f004 ffb9 	bl	800b122 <USB_ReadInterrupts>
 80061b0:	4603      	mov	r3, r0
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d107      	bne.n	80061ca <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	695a      	ldr	r2, [r3, #20]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f002 0202 	and.w	r2, r2, #2
 80061c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f004 ffa7 	bl	800b122 <USB_ReadInterrupts>
 80061d4:	4603      	mov	r3, r0
 80061d6:	f003 0310 	and.w	r3, r3, #16
 80061da:	2b10      	cmp	r3, #16
 80061dc:	d161      	bne.n	80062a2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	699a      	ldr	r2, [r3, #24]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 0210 	bic.w	r2, r2, #16
 80061ec:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	f003 020f 	and.w	r2, r3, #15
 80061fa:	4613      	mov	r3, r2
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	1a9b      	subs	r3, r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	4413      	add	r3, r2
 800620a:	3304      	adds	r3, #4
 800620c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	0c5b      	lsrs	r3, r3, #17
 8006212:	f003 030f 	and.w	r3, r3, #15
 8006216:	2b02      	cmp	r3, #2
 8006218:	d124      	bne.n	8006264 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800621a:	69ba      	ldr	r2, [r7, #24]
 800621c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006220:	4013      	ands	r3, r2
 8006222:	2b00      	cmp	r3, #0
 8006224:	d035      	beq.n	8006292 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	091b      	lsrs	r3, r3, #4
 800622e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006230:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006234:	b29b      	uxth	r3, r3
 8006236:	461a      	mov	r2, r3
 8006238:	6a38      	ldr	r0, [r7, #32]
 800623a:	f004 fe0d 	bl	800ae58 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	091b      	lsrs	r3, r3, #4
 8006246:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800624a:	441a      	add	r2, r3
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	699a      	ldr	r2, [r3, #24]
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	091b      	lsrs	r3, r3, #4
 8006258:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800625c:	441a      	add	r2, r3
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	619a      	str	r2, [r3, #24]
 8006262:	e016      	b.n	8006292 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	0c5b      	lsrs	r3, r3, #17
 8006268:	f003 030f 	and.w	r3, r3, #15
 800626c:	2b06      	cmp	r3, #6
 800626e:	d110      	bne.n	8006292 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006276:	2208      	movs	r2, #8
 8006278:	4619      	mov	r1, r3
 800627a:	6a38      	ldr	r0, [r7, #32]
 800627c:	f004 fdec 	bl	800ae58 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	699a      	ldr	r2, [r3, #24]
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	091b      	lsrs	r3, r3, #4
 8006288:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800628c:	441a      	add	r2, r3
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	699a      	ldr	r2, [r3, #24]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f042 0210 	orr.w	r2, r2, #16
 80062a0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f004 ff3b 	bl	800b122 <USB_ReadInterrupts>
 80062ac:	4603      	mov	r3, r0
 80062ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80062b6:	d16e      	bne.n	8006396 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80062b8:	2300      	movs	r3, #0
 80062ba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4618      	mov	r0, r3
 80062c2:	f004 ff41 	bl	800b148 <USB_ReadDevAllOutEpInterrupt>
 80062c6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80062c8:	e062      	b.n	8006390 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80062ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d057      	beq.n	8006384 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062da:	b2d2      	uxtb	r2, r2
 80062dc:	4611      	mov	r1, r2
 80062de:	4618      	mov	r0, r3
 80062e0:	f004 ff66 	bl	800b1b0 <USB_ReadDevOutEPInterrupt>
 80062e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00c      	beq.n	800630a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fc:	461a      	mov	r2, r3
 80062fe:	2301      	movs	r3, #1
 8006300:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006302:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 fdb1 	bl	8006e6c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	f003 0308 	and.w	r3, r3, #8
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00c      	beq.n	800632e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	4413      	add	r3, r2
 800631c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006320:	461a      	mov	r2, r3
 8006322:	2308      	movs	r3, #8
 8006324:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006326:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 feab 	bl	8007084 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f003 0310 	and.w	r3, r3, #16
 8006334:	2b00      	cmp	r3, #0
 8006336:	d008      	beq.n	800634a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006344:	461a      	mov	r2, r3
 8006346:	2310      	movs	r3, #16
 8006348:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	f003 0320 	and.w	r3, r3, #32
 8006350:	2b00      	cmp	r3, #0
 8006352:	d008      	beq.n	8006366 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006360:	461a      	mov	r2, r3
 8006362:	2320      	movs	r3, #32
 8006364:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d009      	beq.n	8006384 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637c:	461a      	mov	r2, r3
 800637e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006382:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	3301      	adds	r3, #1
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638c:	085b      	lsrs	r3, r3, #1
 800638e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	2b00      	cmp	r3, #0
 8006394:	d199      	bne.n	80062ca <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4618      	mov	r0, r3
 800639c:	f004 fec1 	bl	800b122 <USB_ReadInterrupts>
 80063a0:	4603      	mov	r3, r0
 80063a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063aa:	f040 80c0 	bne.w	800652e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f004 fee2 	bl	800b17c <USB_ReadDevAllInEpInterrupt>
 80063b8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80063ba:	2300      	movs	r3, #0
 80063bc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80063be:	e0b2      	b.n	8006526 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80063c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c2:	f003 0301 	and.w	r3, r3, #1
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f000 80a7 	beq.w	800651a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d2:	b2d2      	uxtb	r2, r2
 80063d4:	4611      	mov	r1, r2
 80063d6:	4618      	mov	r0, r3
 80063d8:	f004 ff08 	bl	800b1ec <USB_ReadDevInEPInterrupt>
 80063dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d057      	beq.n	8006498 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	f003 030f 	and.w	r3, r3, #15
 80063ee:	2201      	movs	r2, #1
 80063f0:	fa02 f303 	lsl.w	r3, r2, r3
 80063f4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	43db      	mvns	r3, r3
 8006402:	69f9      	ldr	r1, [r7, #28]
 8006404:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006408:	4013      	ands	r3, r2
 800640a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	4413      	add	r3, r2
 8006414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006418:	461a      	mov	r2, r3
 800641a:	2301      	movs	r3, #1
 800641c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d132      	bne.n	800648c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006426:	6879      	ldr	r1, [r7, #4]
 8006428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800642a:	4613      	mov	r3, r2
 800642c:	00db      	lsls	r3, r3, #3
 800642e:	1a9b      	subs	r3, r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	440b      	add	r3, r1
 8006434:	3348      	adds	r3, #72	; 0x48
 8006436:	6819      	ldr	r1, [r3, #0]
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800643c:	4613      	mov	r3, r2
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	1a9b      	subs	r3, r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4403      	add	r3, r0
 8006446:	3344      	adds	r3, #68	; 0x44
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4419      	add	r1, r3
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006450:	4613      	mov	r3, r2
 8006452:	00db      	lsls	r3, r3, #3
 8006454:	1a9b      	subs	r3, r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4403      	add	r3, r0
 800645a:	3348      	adds	r3, #72	; 0x48
 800645c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	2b00      	cmp	r3, #0
 8006462:	d113      	bne.n	800648c <HAL_PCD_IRQHandler+0x31c>
 8006464:	6879      	ldr	r1, [r7, #4]
 8006466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006468:	4613      	mov	r3, r2
 800646a:	00db      	lsls	r3, r3, #3
 800646c:	1a9b      	subs	r3, r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	440b      	add	r3, r1
 8006472:	3350      	adds	r3, #80	; 0x50
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d108      	bne.n	800648c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6818      	ldr	r0, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006484:	461a      	mov	r2, r3
 8006486:	2101      	movs	r1, #1
 8006488:	f004 ff10 	bl	800b2ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	b2db      	uxtb	r3, r3
 8006490:	4619      	mov	r1, r3
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f009 ffd1 	bl	801043a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d008      	beq.n	80064b4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80064a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ae:	461a      	mov	r2, r3
 80064b0:	2308      	movs	r3, #8
 80064b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	f003 0310 	and.w	r3, r3, #16
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d008      	beq.n	80064d0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ca:	461a      	mov	r2, r3
 80064cc:	2310      	movs	r3, #16
 80064ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d008      	beq.n	80064ec <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e6:	461a      	mov	r2, r3
 80064e8:	2340      	movs	r3, #64	; 0x40
 80064ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d008      	beq.n	8006508 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006502:	461a      	mov	r2, r3
 8006504:	2302      	movs	r3, #2
 8006506:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006512:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fc1b 	bl	8006d50 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	3301      	adds	r3, #1
 800651e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006522:	085b      	lsrs	r3, r3, #1
 8006524:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006528:	2b00      	cmp	r3, #0
 800652a:	f47f af49 	bne.w	80063c0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4618      	mov	r0, r3
 8006534:	f004 fdf5 	bl	800b122 <USB_ReadInterrupts>
 8006538:	4603      	mov	r3, r0
 800653a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800653e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006542:	d122      	bne.n	800658a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	69fa      	ldr	r2, [r7, #28]
 800654e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006552:	f023 0301 	bic.w	r3, r3, #1
 8006556:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800655e:	2b01      	cmp	r3, #1
 8006560:	d108      	bne.n	8006574 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800656a:	2100      	movs	r1, #0
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fe27 	bl	80071c0 <HAL_PCDEx_LPM_Callback>
 8006572:	e002      	b.n	800657a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f009 ffd7 	bl	8010528 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	695a      	ldr	r2, [r3, #20]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006588:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4618      	mov	r0, r3
 8006590:	f004 fdc7 	bl	800b122 <USB_ReadInterrupts>
 8006594:	4603      	mov	r3, r0
 8006596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800659a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800659e:	d112      	bne.n	80065c6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d102      	bne.n	80065b6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f009 ff93 	bl	80104dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	695a      	ldr	r2, [r3, #20]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80065c4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f004 fda9 	bl	800b122 <USB_ReadInterrupts>
 80065d0:	4603      	mov	r3, r0
 80065d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065da:	f040 80c7 	bne.w	800676c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	69fa      	ldr	r2, [r7, #28]
 80065e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065ec:	f023 0301 	bic.w	r3, r3, #1
 80065f0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2110      	movs	r1, #16
 80065f8:	4618      	mov	r0, r3
 80065fa:	f003 fe77 	bl	800a2ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065fe:	2300      	movs	r3, #0
 8006600:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006602:	e056      	b.n	80066b2 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006610:	461a      	mov	r2, r3
 8006612:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006616:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006628:	0151      	lsls	r1, r2, #5
 800662a:	69fa      	ldr	r2, [r7, #28]
 800662c:	440a      	add	r2, r1
 800662e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006632:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006636:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006648:	0151      	lsls	r1, r2, #5
 800664a:	69fa      	ldr	r2, [r7, #28]
 800664c:	440a      	add	r2, r1
 800664e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006652:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006656:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006664:	461a      	mov	r2, r3
 8006666:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800666a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800666c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800667c:	0151      	lsls	r1, r2, #5
 800667e:	69fa      	ldr	r2, [r7, #28]
 8006680:	440a      	add	r2, r1
 8006682:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006686:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800668a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668e:	015a      	lsls	r2, r3, #5
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	4413      	add	r3, r2
 8006694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800669c:	0151      	lsls	r1, r2, #5
 800669e:	69fa      	ldr	r2, [r7, #28]
 80066a0:	440a      	add	r2, r1
 80066a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066aa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ae:	3301      	adds	r3, #1
 80066b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d3a3      	bcc.n	8006604 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c2:	69db      	ldr	r3, [r3, #28]
 80066c4:	69fa      	ldr	r2, [r7, #28]
 80066c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066ca:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80066ce:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d016      	beq.n	8006706 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066e2:	69fa      	ldr	r2, [r7, #28]
 80066e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066e8:	f043 030b 	orr.w	r3, r3, #11
 80066ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f8:	69fa      	ldr	r2, [r7, #28]
 80066fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066fe:	f043 030b 	orr.w	r3, r3, #11
 8006702:	6453      	str	r3, [r2, #68]	; 0x44
 8006704:	e015      	b.n	8006732 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	69fa      	ldr	r2, [r7, #28]
 8006710:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006714:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006718:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800671c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	69fa      	ldr	r2, [r7, #28]
 8006728:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800672c:	f043 030b 	orr.w	r3, r3, #11
 8006730:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69fa      	ldr	r2, [r7, #28]
 800673c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006740:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006744:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6818      	ldr	r0, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006756:	461a      	mov	r2, r3
 8006758:	f004 fda8 	bl	800b2ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	695a      	ldr	r2, [r3, #20]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800676a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4618      	mov	r0, r3
 8006772:	f004 fcd6 	bl	800b122 <USB_ReadInterrupts>
 8006776:	4603      	mov	r3, r0
 8006778:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800677c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006780:	d124      	bne.n	80067cc <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4618      	mov	r0, r3
 8006788:	f004 fd6c 	bl	800b264 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4618      	mov	r0, r3
 8006792:	f003 fe0c 	bl	800a3ae <USB_GetDevSpeed>
 8006796:	4603      	mov	r3, r0
 8006798:	461a      	mov	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681c      	ldr	r4, [r3, #0]
 80067a2:	f001 f947 	bl	8007a34 <HAL_RCC_GetHCLKFreq>
 80067a6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	461a      	mov	r2, r3
 80067b0:	4620      	mov	r0, r4
 80067b2:	f003 fb49 	bl	8009e48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f009 fe67 	bl	801048a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	695a      	ldr	r2, [r3, #20]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80067ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f004 fca6 	bl	800b122 <USB_ReadInterrupts>
 80067d6:	4603      	mov	r3, r0
 80067d8:	f003 0308 	and.w	r3, r3, #8
 80067dc:	2b08      	cmp	r3, #8
 80067de:	d10a      	bne.n	80067f6 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f009 fe44 	bl	801046e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	695a      	ldr	r2, [r3, #20]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f002 0208 	and.w	r2, r2, #8
 80067f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f004 fc91 	bl	800b122 <USB_ReadInterrupts>
 8006800:	4603      	mov	r3, r0
 8006802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800680a:	d10f      	bne.n	800682c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800680c:	2300      	movs	r3, #0
 800680e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	b2db      	uxtb	r3, r3
 8006814:	4619      	mov	r1, r3
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f009 fea6 	bl	8010568 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	695a      	ldr	r2, [r3, #20]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800682a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4618      	mov	r0, r3
 8006832:	f004 fc76 	bl	800b122 <USB_ReadInterrupts>
 8006836:	4603      	mov	r3, r0
 8006838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800683c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006840:	d10f      	bne.n	8006862 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006842:	2300      	movs	r3, #0
 8006844:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	b2db      	uxtb	r3, r3
 800684a:	4619      	mov	r1, r3
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f009 fe79 	bl	8010544 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	695a      	ldr	r2, [r3, #20]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006860:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f004 fc5b 	bl	800b122 <USB_ReadInterrupts>
 800686c:	4603      	mov	r3, r0
 800686e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006876:	d10a      	bne.n	800688e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f009 fe87 	bl	801058c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	695a      	ldr	r2, [r3, #20]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800688c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4618      	mov	r0, r3
 8006894:	f004 fc45 	bl	800b122 <USB_ReadInterrupts>
 8006898:	4603      	mov	r3, r0
 800689a:	f003 0304 	and.w	r3, r3, #4
 800689e:	2b04      	cmp	r3, #4
 80068a0:	d115      	bne.n	80068ce <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	f003 0304 	and.w	r3, r3, #4
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d002      	beq.n	80068ba <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f009 fe77 	bl	80105a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	6859      	ldr	r1, [r3, #4]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	605a      	str	r2, [r3, #4]
 80068ca:	e000      	b.n	80068ce <HAL_PCD_IRQHandler+0x75e>
      return;
 80068cc:	bf00      	nop
    }
  }
}
 80068ce:	3734      	adds	r7, #52	; 0x34
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd90      	pop	{r4, r7, pc}

080068d4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	460b      	mov	r3, r1
 80068de:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d101      	bne.n	80068ee <HAL_PCD_SetAddress+0x1a>
 80068ea:	2302      	movs	r3, #2
 80068ec:	e013      	b.n	8006916 <HAL_PCD_SetAddress+0x42>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	78fa      	ldrb	r2, [r7, #3]
 80068fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	78fa      	ldrb	r2, [r7, #3]
 8006904:	4611      	mov	r1, r2
 8006906:	4618      	mov	r0, r3
 8006908:	f004 fba3 	bl	800b052 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b084      	sub	sp, #16
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	4608      	mov	r0, r1
 8006928:	4611      	mov	r1, r2
 800692a:	461a      	mov	r2, r3
 800692c:	4603      	mov	r3, r0
 800692e:	70fb      	strb	r3, [r7, #3]
 8006930:	460b      	mov	r3, r1
 8006932:	803b      	strh	r3, [r7, #0]
 8006934:	4613      	mov	r3, r2
 8006936:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006938:	2300      	movs	r3, #0
 800693a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800693c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006940:	2b00      	cmp	r3, #0
 8006942:	da0f      	bge.n	8006964 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006944:	78fb      	ldrb	r3, [r7, #3]
 8006946:	f003 020f 	and.w	r2, r3, #15
 800694a:	4613      	mov	r3, r2
 800694c:	00db      	lsls	r3, r3, #3
 800694e:	1a9b      	subs	r3, r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	3338      	adds	r3, #56	; 0x38
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	4413      	add	r3, r2
 8006958:	3304      	adds	r3, #4
 800695a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2201      	movs	r2, #1
 8006960:	705a      	strb	r2, [r3, #1]
 8006962:	e00f      	b.n	8006984 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006964:	78fb      	ldrb	r3, [r7, #3]
 8006966:	f003 020f 	and.w	r2, r3, #15
 800696a:	4613      	mov	r3, r2
 800696c:	00db      	lsls	r3, r3, #3
 800696e:	1a9b      	subs	r3, r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	4413      	add	r3, r2
 800697a:	3304      	adds	r3, #4
 800697c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006984:	78fb      	ldrb	r3, [r7, #3]
 8006986:	f003 030f 	and.w	r3, r3, #15
 800698a:	b2da      	uxtb	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006990:	883a      	ldrh	r2, [r7, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	78ba      	ldrb	r2, [r7, #2]
 800699a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	785b      	ldrb	r3, [r3, #1]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d004      	beq.n	80069ae <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80069ae:	78bb      	ldrb	r3, [r7, #2]
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d102      	bne.n	80069ba <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d101      	bne.n	80069c8 <HAL_PCD_EP_Open+0xaa>
 80069c4:	2302      	movs	r3, #2
 80069c6:	e00e      	b.n	80069e6 <HAL_PCD_EP_Open+0xc8>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68f9      	ldr	r1, [r7, #12]
 80069d6:	4618      	mov	r0, r3
 80069d8:	f003 fd0e 	bl	800a3f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80069e4:	7afb      	ldrb	r3, [r7, #11]
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b084      	sub	sp, #16
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	460b      	mov	r3, r1
 80069f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80069fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	da0f      	bge.n	8006a22 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a02:	78fb      	ldrb	r3, [r7, #3]
 8006a04:	f003 020f 	and.w	r2, r3, #15
 8006a08:	4613      	mov	r3, r2
 8006a0a:	00db      	lsls	r3, r3, #3
 8006a0c:	1a9b      	subs	r3, r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	3338      	adds	r3, #56	; 0x38
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	4413      	add	r3, r2
 8006a16:	3304      	adds	r3, #4
 8006a18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	705a      	strb	r2, [r3, #1]
 8006a20:	e00f      	b.n	8006a42 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a22:	78fb      	ldrb	r3, [r7, #3]
 8006a24:	f003 020f 	and.w	r2, r3, #15
 8006a28:	4613      	mov	r3, r2
 8006a2a:	00db      	lsls	r3, r3, #3
 8006a2c:	1a9b      	subs	r3, r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	4413      	add	r3, r2
 8006a38:	3304      	adds	r3, #4
 8006a3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006a42:	78fb      	ldrb	r3, [r7, #3]
 8006a44:	f003 030f 	and.w	r3, r3, #15
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d101      	bne.n	8006a5c <HAL_PCD_EP_Close+0x6e>
 8006a58:	2302      	movs	r3, #2
 8006a5a:	e00e      	b.n	8006a7a <HAL_PCD_EP_Close+0x8c>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68f9      	ldr	r1, [r7, #12]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f003 fd4c 	bl	800a508 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b086      	sub	sp, #24
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	60f8      	str	r0, [r7, #12]
 8006a8a:	607a      	str	r2, [r7, #4]
 8006a8c:	603b      	str	r3, [r7, #0]
 8006a8e:	460b      	mov	r3, r1
 8006a90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a92:	7afb      	ldrb	r3, [r7, #11]
 8006a94:	f003 020f 	and.w	r2, r3, #15
 8006a98:	4613      	mov	r3, r2
 8006a9a:	00db      	lsls	r3, r3, #3
 8006a9c:	1a9b      	subs	r3, r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	3304      	adds	r3, #4
 8006aaa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	683a      	ldr	r2, [r7, #0]
 8006ab6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	2200      	movs	r2, #0
 8006abc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ac4:	7afb      	ldrb	r3, [r7, #11]
 8006ac6:	f003 030f 	and.w	r3, r3, #15
 8006aca:	b2da      	uxtb	r2, r3
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d102      	bne.n	8006ade <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006ade:	7afb      	ldrb	r3, [r7, #11]
 8006ae0:	f003 030f 	and.w	r3, r3, #15
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d109      	bne.n	8006afc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6818      	ldr	r0, [r3, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	461a      	mov	r2, r3
 8006af4:	6979      	ldr	r1, [r7, #20]
 8006af6:	f004 f827 	bl	800ab48 <USB_EP0StartXfer>
 8006afa:	e008      	b.n	8006b0e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6818      	ldr	r0, [r3, #0]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	461a      	mov	r2, r3
 8006b08:	6979      	ldr	r1, [r7, #20]
 8006b0a:	f003 fdd9 	bl	800a6c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3718      	adds	r7, #24
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	460b      	mov	r3, r1
 8006b22:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006b24:	78fb      	ldrb	r3, [r7, #3]
 8006b26:	f003 020f 	and.w	r2, r3, #15
 8006b2a:	6879      	ldr	r1, [r7, #4]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	00db      	lsls	r3, r3, #3
 8006b30:	1a9b      	subs	r3, r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	440b      	add	r3, r1
 8006b36:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006b3a:	681b      	ldr	r3, [r3, #0]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	607a      	str	r2, [r7, #4]
 8006b52:	603b      	str	r3, [r7, #0]
 8006b54:	460b      	mov	r3, r1
 8006b56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b58:	7afb      	ldrb	r3, [r7, #11]
 8006b5a:	f003 020f 	and.w	r2, r3, #15
 8006b5e:	4613      	mov	r3, r2
 8006b60:	00db      	lsls	r3, r3, #3
 8006b62:	1a9b      	subs	r3, r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	3338      	adds	r3, #56	; 0x38
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	3304      	adds	r3, #4
 8006b6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	2201      	movs	r2, #1
 8006b86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b88:	7afb      	ldrb	r3, [r7, #11]
 8006b8a:	f003 030f 	and.w	r3, r3, #15
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d102      	bne.n	8006ba2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006ba2:	7afb      	ldrb	r3, [r7, #11]
 8006ba4:	f003 030f 	and.w	r3, r3, #15
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d109      	bne.n	8006bc0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6818      	ldr	r0, [r3, #0]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	6979      	ldr	r1, [r7, #20]
 8006bba:	f003 ffc5 	bl	800ab48 <USB_EP0StartXfer>
 8006bbe:	e008      	b.n	8006bd2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6818      	ldr	r0, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	461a      	mov	r2, r3
 8006bcc:	6979      	ldr	r1, [r7, #20]
 8006bce:	f003 fd77 	bl	800a6c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3718      	adds	r7, #24
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	460b      	mov	r3, r1
 8006be6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006be8:	78fb      	ldrb	r3, [r7, #3]
 8006bea:	f003 020f 	and.w	r2, r3, #15
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d901      	bls.n	8006bfa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e050      	b.n	8006c9c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006bfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	da0f      	bge.n	8006c22 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c02:	78fb      	ldrb	r3, [r7, #3]
 8006c04:	f003 020f 	and.w	r2, r3, #15
 8006c08:	4613      	mov	r3, r2
 8006c0a:	00db      	lsls	r3, r3, #3
 8006c0c:	1a9b      	subs	r3, r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	3338      	adds	r3, #56	; 0x38
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	4413      	add	r3, r2
 8006c16:	3304      	adds	r3, #4
 8006c18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	705a      	strb	r2, [r3, #1]
 8006c20:	e00d      	b.n	8006c3e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006c22:	78fa      	ldrb	r2, [r7, #3]
 8006c24:	4613      	mov	r3, r2
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	1a9b      	subs	r3, r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	4413      	add	r3, r2
 8006c34:	3304      	adds	r3, #4
 8006c36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2201      	movs	r2, #1
 8006c42:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c44:	78fb      	ldrb	r3, [r7, #3]
 8006c46:	f003 030f 	and.w	r3, r3, #15
 8006c4a:	b2da      	uxtb	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d101      	bne.n	8006c5e <HAL_PCD_EP_SetStall+0x82>
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	e01e      	b.n	8006c9c <HAL_PCD_EP_SetStall+0xc0>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68f9      	ldr	r1, [r7, #12]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f004 f91c 	bl	800aeaa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c72:	78fb      	ldrb	r3, [r7, #3]
 8006c74:	f003 030f 	and.w	r3, r3, #15
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10a      	bne.n	8006c92 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6818      	ldr	r0, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	b2d9      	uxtb	r1, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	f004 fb0d 	bl	800b2ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	460b      	mov	r3, r1
 8006cae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	f003 020f 	and.w	r2, r3, #15
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d901      	bls.n	8006cc2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e042      	b.n	8006d48 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006cc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	da0f      	bge.n	8006cea <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cca:	78fb      	ldrb	r3, [r7, #3]
 8006ccc:	f003 020f 	and.w	r2, r3, #15
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	1a9b      	subs	r3, r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	3338      	adds	r3, #56	; 0x38
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	4413      	add	r3, r2
 8006cde:	3304      	adds	r3, #4
 8006ce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	705a      	strb	r2, [r3, #1]
 8006ce8:	e00f      	b.n	8006d0a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006cea:	78fb      	ldrb	r3, [r7, #3]
 8006cec:	f003 020f 	and.w	r2, r3, #15
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	00db      	lsls	r3, r3, #3
 8006cf4:	1a9b      	subs	r3, r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	4413      	add	r3, r2
 8006d00:	3304      	adds	r3, #4
 8006d02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d10:	78fb      	ldrb	r3, [r7, #3]
 8006d12:	f003 030f 	and.w	r3, r3, #15
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d101      	bne.n	8006d2a <HAL_PCD_EP_ClrStall+0x86>
 8006d26:	2302      	movs	r3, #2
 8006d28:	e00e      	b.n	8006d48 <HAL_PCD_EP_ClrStall+0xa4>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68f9      	ldr	r1, [r7, #12]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f004 f924 	bl	800af86 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b08a      	sub	sp, #40	; 0x28
 8006d54:	af02      	add	r7, sp, #8
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	4613      	mov	r3, r2
 8006d68:	00db      	lsls	r3, r3, #3
 8006d6a:	1a9b      	subs	r3, r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	3338      	adds	r3, #56	; 0x38
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	4413      	add	r3, r2
 8006d74:	3304      	adds	r3, #4
 8006d76:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	699a      	ldr	r2, [r3, #24]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d901      	bls.n	8006d88 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e06c      	b.n	8006e62 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	695a      	ldr	r2, [r3, #20]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	69fa      	ldr	r2, [r7, #28]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d902      	bls.n	8006da4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	3303      	adds	r3, #3
 8006da8:	089b      	lsrs	r3, r3, #2
 8006daa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006dac:	e02b      	b.n	8006e06 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	695a      	ldr	r2, [r3, #20]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	69fa      	ldr	r2, [r7, #28]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d902      	bls.n	8006dca <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	3303      	adds	r3, #3
 8006dce:	089b      	lsrs	r3, r3, #2
 8006dd0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	68d9      	ldr	r1, [r3, #12]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	4603      	mov	r3, r0
 8006de8:	6978      	ldr	r0, [r7, #20]
 8006dea:	f004 f800 	bl	800adee <USB_WritePacket>

    ep->xfer_buff  += len;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	68da      	ldr	r2, [r3, #12]
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	441a      	add	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	699a      	ldr	r2, [r3, #24]
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	441a      	add	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	015a      	lsls	r2, r3, #5
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d809      	bhi.n	8006e30 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	699a      	ldr	r2, [r3, #24]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d203      	bcs.n	8006e30 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	695b      	ldr	r3, [r3, #20]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1be      	bne.n	8006dae <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	695a      	ldr	r2, [r3, #20]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d811      	bhi.n	8006e60 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	f003 030f 	and.w	r3, r3, #15
 8006e42:	2201      	movs	r2, #1
 8006e44:	fa02 f303 	lsl.w	r3, r2, r3
 8006e48:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	43db      	mvns	r3, r3
 8006e56:	6939      	ldr	r1, [r7, #16]
 8006e58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3720      	adds	r7, #32
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
	...

08006e6c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	333c      	adds	r3, #60	; 0x3c
 8006e84:	3304      	adds	r3, #4
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	f040 80a0 	bne.w	8006fe4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	f003 0308 	and.w	r3, r3, #8
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d015      	beq.n	8006eda <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	4a72      	ldr	r2, [pc, #456]	; (800707c <PCD_EP_OutXfrComplete_int+0x210>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	f240 80dd 	bls.w	8007072 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f000 80d7 	beq.w	8007072 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	015a      	lsls	r2, r3, #5
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	4413      	add	r3, r2
 8006ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ed6:	6093      	str	r3, [r2, #8]
 8006ed8:	e0cb      	b.n	8007072 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f003 0320 	and.w	r3, r3, #32
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d009      	beq.n	8006ef8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	2320      	movs	r3, #32
 8006ef4:	6093      	str	r3, [r2, #8]
 8006ef6:	e0bc      	b.n	8007072 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f040 80b7 	bne.w	8007072 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4a5d      	ldr	r2, [pc, #372]	; (800707c <PCD_EP_OutXfrComplete_int+0x210>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d90f      	bls.n	8006f2c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f22:	461a      	mov	r2, r3
 8006f24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f28:	6093      	str	r3, [r2, #8]
 8006f2a:	e0a2      	b.n	8007072 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006f2c:	6879      	ldr	r1, [r7, #4]
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	4613      	mov	r3, r2
 8006f32:	00db      	lsls	r3, r3, #3
 8006f34:	1a9b      	subs	r3, r3, r2
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	440b      	add	r3, r1
 8006f3a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006f3e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	0159      	lsls	r1, r3, #5
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	440b      	add	r3, r1
 8006f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006f52:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	00db      	lsls	r3, r3, #3
 8006f5c:	1a9b      	subs	r3, r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4403      	add	r3, r0
 8006f62:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006f66:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006f68:	6879      	ldr	r1, [r7, #4]
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	00db      	lsls	r3, r3, #3
 8006f70:	1a9b      	subs	r3, r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	440b      	add	r3, r1
 8006f76:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006f7a:	6819      	ldr	r1, [r3, #0]
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	4613      	mov	r3, r2
 8006f82:	00db      	lsls	r3, r3, #3
 8006f84:	1a9b      	subs	r3, r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	4403      	add	r3, r0
 8006f8a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4419      	add	r1, r3
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	683a      	ldr	r2, [r7, #0]
 8006f96:	4613      	mov	r3, r2
 8006f98:	00db      	lsls	r3, r3, #3
 8006f9a:	1a9b      	subs	r3, r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4403      	add	r3, r0
 8006fa0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006fa4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d114      	bne.n	8006fd6 <PCD_EP_OutXfrComplete_int+0x16a>
 8006fac:	6879      	ldr	r1, [r7, #4]
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	00db      	lsls	r3, r3, #3
 8006fb4:	1a9b      	subs	r3, r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	440b      	add	r3, r1
 8006fba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d108      	bne.n	8006fd6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6818      	ldr	r0, [r3, #0]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006fce:	461a      	mov	r2, r3
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	f004 f96b 	bl	800b2ac <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	4619      	mov	r1, r3
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f009 fa11 	bl	8010404 <HAL_PCD_DataOutStageCallback>
 8006fe2:	e046      	b.n	8007072 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	4a26      	ldr	r2, [pc, #152]	; (8007080 <PCD_EP_OutXfrComplete_int+0x214>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d124      	bne.n	8007036 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00a      	beq.n	800700c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	015a      	lsls	r2, r3, #5
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007002:	461a      	mov	r2, r3
 8007004:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007008:	6093      	str	r3, [r2, #8]
 800700a:	e032      	b.n	8007072 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	f003 0320 	and.w	r3, r3, #32
 8007012:	2b00      	cmp	r3, #0
 8007014:	d008      	beq.n	8007028 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	015a      	lsls	r2, r3, #5
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	4413      	add	r3, r2
 800701e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007022:	461a      	mov	r2, r3
 8007024:	2320      	movs	r3, #32
 8007026:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	b2db      	uxtb	r3, r3
 800702c:	4619      	mov	r1, r3
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f009 f9e8 	bl	8010404 <HAL_PCD_DataOutStageCallback>
 8007034:	e01d      	b.n	8007072 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d114      	bne.n	8007066 <PCD_EP_OutXfrComplete_int+0x1fa>
 800703c:	6879      	ldr	r1, [r7, #4]
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	4613      	mov	r3, r2
 8007042:	00db      	lsls	r3, r3, #3
 8007044:	1a9b      	subs	r3, r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	440b      	add	r3, r1
 800704a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d108      	bne.n	8007066 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6818      	ldr	r0, [r3, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800705e:	461a      	mov	r2, r3
 8007060:	2100      	movs	r1, #0
 8007062:	f004 f923 	bl	800b2ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	b2db      	uxtb	r3, r3
 800706a:	4619      	mov	r1, r3
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f009 f9c9 	bl	8010404 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3718      	adds	r7, #24
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	4f54300a 	.word	0x4f54300a
 8007080:	4f54310a 	.word	0x4f54310a

08007084 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b086      	sub	sp, #24
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	333c      	adds	r3, #60	; 0x3c
 800709c:	3304      	adds	r3, #4
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	4a15      	ldr	r2, [pc, #84]	; (800710c <PCD_EP_OutSetupPacket_int+0x88>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d90e      	bls.n	80070d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d009      	beq.n	80070d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	015a      	lsls	r2, r3, #5
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	4413      	add	r3, r2
 80070cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d0:	461a      	mov	r2, r3
 80070d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f009 f981 	bl	80103e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	4a0a      	ldr	r2, [pc, #40]	; (800710c <PCD_EP_OutSetupPacket_int+0x88>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d90c      	bls.n	8007100 <PCD_EP_OutSetupPacket_int+0x7c>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d108      	bne.n	8007100 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6818      	ldr	r0, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80070f8:	461a      	mov	r2, r3
 80070fa:	2101      	movs	r1, #1
 80070fc:	f004 f8d6 	bl	800b2ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3718      	adds	r7, #24
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	4f54300a 	.word	0x4f54300a

08007110 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	460b      	mov	r3, r1
 800711a:	70fb      	strb	r3, [r7, #3]
 800711c:	4613      	mov	r3, r2
 800711e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007126:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007128:	78fb      	ldrb	r3, [r7, #3]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d107      	bne.n	800713e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800712e:	883b      	ldrh	r3, [r7, #0]
 8007130:	0419      	lsls	r1, r3, #16
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	430a      	orrs	r2, r1
 800713a:	629a      	str	r2, [r3, #40]	; 0x28
 800713c:	e028      	b.n	8007190 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007144:	0c1b      	lsrs	r3, r3, #16
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	4413      	add	r3, r2
 800714a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800714c:	2300      	movs	r3, #0
 800714e:	73fb      	strb	r3, [r7, #15]
 8007150:	e00d      	b.n	800716e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	7bfb      	ldrb	r3, [r7, #15]
 8007158:	3340      	adds	r3, #64	; 0x40
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	4413      	add	r3, r2
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	0c1b      	lsrs	r3, r3, #16
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	4413      	add	r3, r2
 8007166:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007168:	7bfb      	ldrb	r3, [r7, #15]
 800716a:	3301      	adds	r3, #1
 800716c:	73fb      	strb	r3, [r7, #15]
 800716e:	7bfa      	ldrb	r2, [r7, #15]
 8007170:	78fb      	ldrb	r3, [r7, #3]
 8007172:	3b01      	subs	r3, #1
 8007174:	429a      	cmp	r2, r3
 8007176:	d3ec      	bcc.n	8007152 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007178:	883b      	ldrh	r3, [r7, #0]
 800717a:	0418      	lsls	r0, r3, #16
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6819      	ldr	r1, [r3, #0]
 8007180:	78fb      	ldrb	r3, [r7, #3]
 8007182:	3b01      	subs	r3, #1
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	4302      	orrs	r2, r0
 8007188:	3340      	adds	r3, #64	; 0x40
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	440b      	add	r3, r1
 800718e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800719e:	b480      	push	{r7}
 80071a0:	b083      	sub	sp, #12
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	460b      	mov	r3, r1
 80071a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	887a      	ldrh	r2, [r7, #2]
 80071b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	460b      	mov	r3, r1
 80071ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e25b      	b.n	80076a2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0301 	and.w	r3, r3, #1
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d075      	beq.n	80072e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80071f6:	4ba3      	ldr	r3, [pc, #652]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f003 030c 	and.w	r3, r3, #12
 80071fe:	2b04      	cmp	r3, #4
 8007200:	d00c      	beq.n	800721c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007202:	4ba0      	ldr	r3, [pc, #640]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800720a:	2b08      	cmp	r3, #8
 800720c:	d112      	bne.n	8007234 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800720e:	4b9d      	ldr	r3, [pc, #628]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800721a:	d10b      	bne.n	8007234 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800721c:	4b99      	ldr	r3, [pc, #612]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d05b      	beq.n	80072e0 <HAL_RCC_OscConfig+0x108>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d157      	bne.n	80072e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e236      	b.n	80076a2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800723c:	d106      	bne.n	800724c <HAL_RCC_OscConfig+0x74>
 800723e:	4b91      	ldr	r3, [pc, #580]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a90      	ldr	r2, [pc, #576]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 8007244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007248:	6013      	str	r3, [r2, #0]
 800724a:	e01d      	b.n	8007288 <HAL_RCC_OscConfig+0xb0>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007254:	d10c      	bne.n	8007270 <HAL_RCC_OscConfig+0x98>
 8007256:	4b8b      	ldr	r3, [pc, #556]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a8a      	ldr	r2, [pc, #552]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 800725c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007260:	6013      	str	r3, [r2, #0]
 8007262:	4b88      	ldr	r3, [pc, #544]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a87      	ldr	r2, [pc, #540]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 8007268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800726c:	6013      	str	r3, [r2, #0]
 800726e:	e00b      	b.n	8007288 <HAL_RCC_OscConfig+0xb0>
 8007270:	4b84      	ldr	r3, [pc, #528]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a83      	ldr	r2, [pc, #524]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 8007276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800727a:	6013      	str	r3, [r2, #0]
 800727c:	4b81      	ldr	r3, [pc, #516]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a80      	ldr	r2, [pc, #512]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 8007282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d013      	beq.n	80072b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007290:	f7fa fda2 	bl	8001dd8 <HAL_GetTick>
 8007294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007296:	e008      	b.n	80072aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007298:	f7fa fd9e 	bl	8001dd8 <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	2b64      	cmp	r3, #100	; 0x64
 80072a4:	d901      	bls.n	80072aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e1fb      	b.n	80076a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072aa:	4b76      	ldr	r3, [pc, #472]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d0f0      	beq.n	8007298 <HAL_RCC_OscConfig+0xc0>
 80072b6:	e014      	b.n	80072e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072b8:	f7fa fd8e 	bl	8001dd8 <HAL_GetTick>
 80072bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072be:	e008      	b.n	80072d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072c0:	f7fa fd8a 	bl	8001dd8 <HAL_GetTick>
 80072c4:	4602      	mov	r2, r0
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	1ad3      	subs	r3, r2, r3
 80072ca:	2b64      	cmp	r3, #100	; 0x64
 80072cc:	d901      	bls.n	80072d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	e1e7      	b.n	80076a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072d2:	4b6c      	ldr	r3, [pc, #432]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1f0      	bne.n	80072c0 <HAL_RCC_OscConfig+0xe8>
 80072de:	e000      	b.n	80072e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0302 	and.w	r3, r3, #2
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d063      	beq.n	80073b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80072ee:	4b65      	ldr	r3, [pc, #404]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f003 030c 	and.w	r3, r3, #12
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00b      	beq.n	8007312 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072fa:	4b62      	ldr	r3, [pc, #392]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007302:	2b08      	cmp	r3, #8
 8007304:	d11c      	bne.n	8007340 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007306:	4b5f      	ldr	r3, [pc, #380]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d116      	bne.n	8007340 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007312:	4b5c      	ldr	r3, [pc, #368]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0302 	and.w	r3, r3, #2
 800731a:	2b00      	cmp	r3, #0
 800731c:	d005      	beq.n	800732a <HAL_RCC_OscConfig+0x152>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d001      	beq.n	800732a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e1bb      	b.n	80076a2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800732a:	4b56      	ldr	r3, [pc, #344]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	00db      	lsls	r3, r3, #3
 8007338:	4952      	ldr	r1, [pc, #328]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 800733a:	4313      	orrs	r3, r2
 800733c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800733e:	e03a      	b.n	80073b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d020      	beq.n	800738a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007348:	4b4f      	ldr	r3, [pc, #316]	; (8007488 <HAL_RCC_OscConfig+0x2b0>)
 800734a:	2201      	movs	r2, #1
 800734c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800734e:	f7fa fd43 	bl	8001dd8 <HAL_GetTick>
 8007352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007354:	e008      	b.n	8007368 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007356:	f7fa fd3f 	bl	8001dd8 <HAL_GetTick>
 800735a:	4602      	mov	r2, r0
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	2b02      	cmp	r3, #2
 8007362:	d901      	bls.n	8007368 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e19c      	b.n	80076a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007368:	4b46      	ldr	r3, [pc, #280]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0302 	and.w	r3, r3, #2
 8007370:	2b00      	cmp	r3, #0
 8007372:	d0f0      	beq.n	8007356 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007374:	4b43      	ldr	r3, [pc, #268]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	00db      	lsls	r3, r3, #3
 8007382:	4940      	ldr	r1, [pc, #256]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 8007384:	4313      	orrs	r3, r2
 8007386:	600b      	str	r3, [r1, #0]
 8007388:	e015      	b.n	80073b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800738a:	4b3f      	ldr	r3, [pc, #252]	; (8007488 <HAL_RCC_OscConfig+0x2b0>)
 800738c:	2200      	movs	r2, #0
 800738e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007390:	f7fa fd22 	bl	8001dd8 <HAL_GetTick>
 8007394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007396:	e008      	b.n	80073aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007398:	f7fa fd1e 	bl	8001dd8 <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d901      	bls.n	80073aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e17b      	b.n	80076a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073aa:	4b36      	ldr	r3, [pc, #216]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0302 	and.w	r3, r3, #2
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1f0      	bne.n	8007398 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f003 0308 	and.w	r3, r3, #8
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d030      	beq.n	8007424 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d016      	beq.n	80073f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073ca:	4b30      	ldr	r3, [pc, #192]	; (800748c <HAL_RCC_OscConfig+0x2b4>)
 80073cc:	2201      	movs	r2, #1
 80073ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073d0:	f7fa fd02 	bl	8001dd8 <HAL_GetTick>
 80073d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073d6:	e008      	b.n	80073ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073d8:	f7fa fcfe 	bl	8001dd8 <HAL_GetTick>
 80073dc:	4602      	mov	r2, r0
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	2b02      	cmp	r3, #2
 80073e4:	d901      	bls.n	80073ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80073e6:	2303      	movs	r3, #3
 80073e8:	e15b      	b.n	80076a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073ea:	4b26      	ldr	r3, [pc, #152]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 80073ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ee:	f003 0302 	and.w	r3, r3, #2
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d0f0      	beq.n	80073d8 <HAL_RCC_OscConfig+0x200>
 80073f6:	e015      	b.n	8007424 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073f8:	4b24      	ldr	r3, [pc, #144]	; (800748c <HAL_RCC_OscConfig+0x2b4>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073fe:	f7fa fceb 	bl	8001dd8 <HAL_GetTick>
 8007402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007404:	e008      	b.n	8007418 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007406:	f7fa fce7 	bl	8001dd8 <HAL_GetTick>
 800740a:	4602      	mov	r2, r0
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	2b02      	cmp	r3, #2
 8007412:	d901      	bls.n	8007418 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007414:	2303      	movs	r3, #3
 8007416:	e144      	b.n	80076a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007418:	4b1a      	ldr	r3, [pc, #104]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 800741a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800741c:	f003 0302 	and.w	r3, r3, #2
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1f0      	bne.n	8007406 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0304 	and.w	r3, r3, #4
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 80a0 	beq.w	8007572 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007432:	2300      	movs	r3, #0
 8007434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007436:	4b13      	ldr	r3, [pc, #76]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 8007438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10f      	bne.n	8007462 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007442:	2300      	movs	r3, #0
 8007444:	60bb      	str	r3, [r7, #8]
 8007446:	4b0f      	ldr	r3, [pc, #60]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	4a0e      	ldr	r2, [pc, #56]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 800744c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007450:	6413      	str	r3, [r2, #64]	; 0x40
 8007452:	4b0c      	ldr	r3, [pc, #48]	; (8007484 <HAL_RCC_OscConfig+0x2ac>)
 8007454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800745a:	60bb      	str	r3, [r7, #8]
 800745c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800745e:	2301      	movs	r3, #1
 8007460:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007462:	4b0b      	ldr	r3, [pc, #44]	; (8007490 <HAL_RCC_OscConfig+0x2b8>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800746a:	2b00      	cmp	r3, #0
 800746c:	d121      	bne.n	80074b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800746e:	4b08      	ldr	r3, [pc, #32]	; (8007490 <HAL_RCC_OscConfig+0x2b8>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a07      	ldr	r2, [pc, #28]	; (8007490 <HAL_RCC_OscConfig+0x2b8>)
 8007474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800747a:	f7fa fcad 	bl	8001dd8 <HAL_GetTick>
 800747e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007480:	e011      	b.n	80074a6 <HAL_RCC_OscConfig+0x2ce>
 8007482:	bf00      	nop
 8007484:	40023800 	.word	0x40023800
 8007488:	42470000 	.word	0x42470000
 800748c:	42470e80 	.word	0x42470e80
 8007490:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007494:	f7fa fca0 	bl	8001dd8 <HAL_GetTick>
 8007498:	4602      	mov	r2, r0
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	1ad3      	subs	r3, r2, r3
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d901      	bls.n	80074a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e0fd      	b.n	80076a2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074a6:	4b81      	ldr	r3, [pc, #516]	; (80076ac <HAL_RCC_OscConfig+0x4d4>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d0f0      	beq.n	8007494 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d106      	bne.n	80074c8 <HAL_RCC_OscConfig+0x2f0>
 80074ba:	4b7d      	ldr	r3, [pc, #500]	; (80076b0 <HAL_RCC_OscConfig+0x4d8>)
 80074bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074be:	4a7c      	ldr	r2, [pc, #496]	; (80076b0 <HAL_RCC_OscConfig+0x4d8>)
 80074c0:	f043 0301 	orr.w	r3, r3, #1
 80074c4:	6713      	str	r3, [r2, #112]	; 0x70
 80074c6:	e01c      	b.n	8007502 <HAL_RCC_OscConfig+0x32a>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	2b05      	cmp	r3, #5
 80074ce:	d10c      	bne.n	80074ea <HAL_RCC_OscConfig+0x312>
 80074d0:	4b77      	ldr	r3, [pc, #476]	; (80076b0 <HAL_RCC_OscConfig+0x4d8>)
 80074d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d4:	4a76      	ldr	r2, [pc, #472]	; (80076b0 <HAL_RCC_OscConfig+0x4d8>)
 80074d6:	f043 0304 	orr.w	r3, r3, #4
 80074da:	6713      	str	r3, [r2, #112]	; 0x70
 80074dc:	4b74      	ldr	r3, [pc, #464]	; (80076b0 <HAL_RCC_OscConfig+0x4d8>)
 80074de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e0:	4a73      	ldr	r2, [pc, #460]	; (80076b0 <HAL_RCC_OscConfig+0x4d8>)
 80074e2:	f043 0301 	orr.w	r3, r3, #1
 80074e6:	6713      	str	r3, [r2, #112]	; 0x70
 80074e8:	e00b      	b.n	8007502 <HAL_RCC_OscConfig+0x32a>
 80074ea:	4b71      	ldr	r3, [pc, #452]	; (80076b0 <HAL_RCC_OscConfig+0x4d8>)
 80074ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ee:	4a70      	ldr	r2, [pc, #448]	; (80076b0 <HAL_RCC_OscConfig+0x4d8>)
 80074f0:	f023 0301 	bic.w	r3, r3, #1
 80074f4:	6713      	str	r3, [r2, #112]	; 0x70
 80074f6:	4b6e      	ldr	r3, [pc, #440]	; (80076b0 <HAL_RCC_OscConfig+0x4d8>)
 80074f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074fa:	4a6d      	ldr	r2, [pc, #436]	; (80076b0 <HAL_RCC_OscConfig+0x4d8>)
 80074fc:	f023 0304 	bic.w	r3, r3, #4
 8007500:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d015      	beq.n	8007536 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800750a:	f7fa fc65 	bl	8001dd8 <HAL_GetTick>
 800750e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007510:	e00a      	b.n	8007528 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007512:	f7fa fc61 	bl	8001dd8 <HAL_GetTick>
 8007516:	4602      	mov	r2, r0
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007520:	4293      	cmp	r3, r2
 8007522:	d901      	bls.n	8007528 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007524:	2303      	movs	r3, #3
 8007526:	e0bc      	b.n	80076a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007528:	4b61      	ldr	r3, [pc, #388]	; (80076b0 <HAL_RCC_OscConfig+0x4d8>)
 800752a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800752c:	f003 0302 	and.w	r3, r3, #2
 8007530:	2b00      	cmp	r3, #0
 8007532:	d0ee      	beq.n	8007512 <HAL_RCC_OscConfig+0x33a>
 8007534:	e014      	b.n	8007560 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007536:	f7fa fc4f 	bl	8001dd8 <HAL_GetTick>
 800753a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800753c:	e00a      	b.n	8007554 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800753e:	f7fa fc4b 	bl	8001dd8 <HAL_GetTick>
 8007542:	4602      	mov	r2, r0
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	f241 3288 	movw	r2, #5000	; 0x1388
 800754c:	4293      	cmp	r3, r2
 800754e:	d901      	bls.n	8007554 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	e0a6      	b.n	80076a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007554:	4b56      	ldr	r3, [pc, #344]	; (80076b0 <HAL_RCC_OscConfig+0x4d8>)
 8007556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007558:	f003 0302 	and.w	r3, r3, #2
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1ee      	bne.n	800753e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007560:	7dfb      	ldrb	r3, [r7, #23]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d105      	bne.n	8007572 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007566:	4b52      	ldr	r3, [pc, #328]	; (80076b0 <HAL_RCC_OscConfig+0x4d8>)
 8007568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756a:	4a51      	ldr	r2, [pc, #324]	; (80076b0 <HAL_RCC_OscConfig+0x4d8>)
 800756c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007570:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	2b00      	cmp	r3, #0
 8007578:	f000 8092 	beq.w	80076a0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800757c:	4b4c      	ldr	r3, [pc, #304]	; (80076b0 <HAL_RCC_OscConfig+0x4d8>)
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f003 030c 	and.w	r3, r3, #12
 8007584:	2b08      	cmp	r3, #8
 8007586:	d05c      	beq.n	8007642 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	699b      	ldr	r3, [r3, #24]
 800758c:	2b02      	cmp	r3, #2
 800758e:	d141      	bne.n	8007614 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007590:	4b48      	ldr	r3, [pc, #288]	; (80076b4 <HAL_RCC_OscConfig+0x4dc>)
 8007592:	2200      	movs	r2, #0
 8007594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007596:	f7fa fc1f 	bl	8001dd8 <HAL_GetTick>
 800759a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800759c:	e008      	b.n	80075b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800759e:	f7fa fc1b 	bl	8001dd8 <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d901      	bls.n	80075b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e078      	b.n	80076a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075b0:	4b3f      	ldr	r3, [pc, #252]	; (80076b0 <HAL_RCC_OscConfig+0x4d8>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1f0      	bne.n	800759e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	69da      	ldr	r2, [r3, #28]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a1b      	ldr	r3, [r3, #32]
 80075c4:	431a      	orrs	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ca:	019b      	lsls	r3, r3, #6
 80075cc:	431a      	orrs	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d2:	085b      	lsrs	r3, r3, #1
 80075d4:	3b01      	subs	r3, #1
 80075d6:	041b      	lsls	r3, r3, #16
 80075d8:	431a      	orrs	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075de:	061b      	lsls	r3, r3, #24
 80075e0:	4933      	ldr	r1, [pc, #204]	; (80076b0 <HAL_RCC_OscConfig+0x4d8>)
 80075e2:	4313      	orrs	r3, r2
 80075e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075e6:	4b33      	ldr	r3, [pc, #204]	; (80076b4 <HAL_RCC_OscConfig+0x4dc>)
 80075e8:	2201      	movs	r2, #1
 80075ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075ec:	f7fa fbf4 	bl	8001dd8 <HAL_GetTick>
 80075f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075f2:	e008      	b.n	8007606 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075f4:	f7fa fbf0 	bl	8001dd8 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d901      	bls.n	8007606 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e04d      	b.n	80076a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007606:	4b2a      	ldr	r3, [pc, #168]	; (80076b0 <HAL_RCC_OscConfig+0x4d8>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d0f0      	beq.n	80075f4 <HAL_RCC_OscConfig+0x41c>
 8007612:	e045      	b.n	80076a0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007614:	4b27      	ldr	r3, [pc, #156]	; (80076b4 <HAL_RCC_OscConfig+0x4dc>)
 8007616:	2200      	movs	r2, #0
 8007618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800761a:	f7fa fbdd 	bl	8001dd8 <HAL_GetTick>
 800761e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007620:	e008      	b.n	8007634 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007622:	f7fa fbd9 	bl	8001dd8 <HAL_GetTick>
 8007626:	4602      	mov	r2, r0
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	2b02      	cmp	r3, #2
 800762e:	d901      	bls.n	8007634 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	e036      	b.n	80076a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007634:	4b1e      	ldr	r3, [pc, #120]	; (80076b0 <HAL_RCC_OscConfig+0x4d8>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1f0      	bne.n	8007622 <HAL_RCC_OscConfig+0x44a>
 8007640:	e02e      	b.n	80076a0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d101      	bne.n	800764e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e029      	b.n	80076a2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800764e:	4b18      	ldr	r3, [pc, #96]	; (80076b0 <HAL_RCC_OscConfig+0x4d8>)
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	69db      	ldr	r3, [r3, #28]
 800765e:	429a      	cmp	r2, r3
 8007660:	d11c      	bne.n	800769c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800766c:	429a      	cmp	r2, r3
 800766e:	d115      	bne.n	800769c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007676:	4013      	ands	r3, r2
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800767c:	4293      	cmp	r3, r2
 800767e:	d10d      	bne.n	800769c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800768a:	429a      	cmp	r2, r3
 800768c:	d106      	bne.n	800769c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007698:	429a      	cmp	r2, r3
 800769a:	d001      	beq.n	80076a0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e000      	b.n	80076a2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3718      	adds	r7, #24
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	40007000 	.word	0x40007000
 80076b0:	40023800 	.word	0x40023800
 80076b4:	42470060 	.word	0x42470060

080076b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d101      	bne.n	80076cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e0cc      	b.n	8007866 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80076cc:	4b68      	ldr	r3, [pc, #416]	; (8007870 <HAL_RCC_ClockConfig+0x1b8>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 030f 	and.w	r3, r3, #15
 80076d4:	683a      	ldr	r2, [r7, #0]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d90c      	bls.n	80076f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076da:	4b65      	ldr	r3, [pc, #404]	; (8007870 <HAL_RCC_ClockConfig+0x1b8>)
 80076dc:	683a      	ldr	r2, [r7, #0]
 80076de:	b2d2      	uxtb	r2, r2
 80076e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076e2:	4b63      	ldr	r3, [pc, #396]	; (8007870 <HAL_RCC_ClockConfig+0x1b8>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f003 030f 	and.w	r3, r3, #15
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d001      	beq.n	80076f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e0b8      	b.n	8007866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0302 	and.w	r3, r3, #2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d020      	beq.n	8007742 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0304 	and.w	r3, r3, #4
 8007708:	2b00      	cmp	r3, #0
 800770a:	d005      	beq.n	8007718 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800770c:	4b59      	ldr	r3, [pc, #356]	; (8007874 <HAL_RCC_ClockConfig+0x1bc>)
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	4a58      	ldr	r2, [pc, #352]	; (8007874 <HAL_RCC_ClockConfig+0x1bc>)
 8007712:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007716:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0308 	and.w	r3, r3, #8
 8007720:	2b00      	cmp	r3, #0
 8007722:	d005      	beq.n	8007730 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007724:	4b53      	ldr	r3, [pc, #332]	; (8007874 <HAL_RCC_ClockConfig+0x1bc>)
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	4a52      	ldr	r2, [pc, #328]	; (8007874 <HAL_RCC_ClockConfig+0x1bc>)
 800772a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800772e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007730:	4b50      	ldr	r3, [pc, #320]	; (8007874 <HAL_RCC_ClockConfig+0x1bc>)
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	494d      	ldr	r1, [pc, #308]	; (8007874 <HAL_RCC_ClockConfig+0x1bc>)
 800773e:	4313      	orrs	r3, r2
 8007740:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b00      	cmp	r3, #0
 800774c:	d044      	beq.n	80077d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d107      	bne.n	8007766 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007756:	4b47      	ldr	r3, [pc, #284]	; (8007874 <HAL_RCC_ClockConfig+0x1bc>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d119      	bne.n	8007796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e07f      	b.n	8007866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	2b02      	cmp	r3, #2
 800776c:	d003      	beq.n	8007776 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007772:	2b03      	cmp	r3, #3
 8007774:	d107      	bne.n	8007786 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007776:	4b3f      	ldr	r3, [pc, #252]	; (8007874 <HAL_RCC_ClockConfig+0x1bc>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d109      	bne.n	8007796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	e06f      	b.n	8007866 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007786:	4b3b      	ldr	r3, [pc, #236]	; (8007874 <HAL_RCC_ClockConfig+0x1bc>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0302 	and.w	r3, r3, #2
 800778e:	2b00      	cmp	r3, #0
 8007790:	d101      	bne.n	8007796 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e067      	b.n	8007866 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007796:	4b37      	ldr	r3, [pc, #220]	; (8007874 <HAL_RCC_ClockConfig+0x1bc>)
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f023 0203 	bic.w	r2, r3, #3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	4934      	ldr	r1, [pc, #208]	; (8007874 <HAL_RCC_ClockConfig+0x1bc>)
 80077a4:	4313      	orrs	r3, r2
 80077a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80077a8:	f7fa fb16 	bl	8001dd8 <HAL_GetTick>
 80077ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077ae:	e00a      	b.n	80077c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077b0:	f7fa fb12 	bl	8001dd8 <HAL_GetTick>
 80077b4:	4602      	mov	r2, r0
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80077be:	4293      	cmp	r3, r2
 80077c0:	d901      	bls.n	80077c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e04f      	b.n	8007866 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077c6:	4b2b      	ldr	r3, [pc, #172]	; (8007874 <HAL_RCC_ClockConfig+0x1bc>)
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f003 020c 	and.w	r2, r3, #12
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d1eb      	bne.n	80077b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80077d8:	4b25      	ldr	r3, [pc, #148]	; (8007870 <HAL_RCC_ClockConfig+0x1b8>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 030f 	and.w	r3, r3, #15
 80077e0:	683a      	ldr	r2, [r7, #0]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d20c      	bcs.n	8007800 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077e6:	4b22      	ldr	r3, [pc, #136]	; (8007870 <HAL_RCC_ClockConfig+0x1b8>)
 80077e8:	683a      	ldr	r2, [r7, #0]
 80077ea:	b2d2      	uxtb	r2, r2
 80077ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ee:	4b20      	ldr	r3, [pc, #128]	; (8007870 <HAL_RCC_ClockConfig+0x1b8>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 030f 	and.w	r3, r3, #15
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d001      	beq.n	8007800 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e032      	b.n	8007866 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0304 	and.w	r3, r3, #4
 8007808:	2b00      	cmp	r3, #0
 800780a:	d008      	beq.n	800781e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800780c:	4b19      	ldr	r3, [pc, #100]	; (8007874 <HAL_RCC_ClockConfig+0x1bc>)
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	4916      	ldr	r1, [pc, #88]	; (8007874 <HAL_RCC_ClockConfig+0x1bc>)
 800781a:	4313      	orrs	r3, r2
 800781c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0308 	and.w	r3, r3, #8
 8007826:	2b00      	cmp	r3, #0
 8007828:	d009      	beq.n	800783e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800782a:	4b12      	ldr	r3, [pc, #72]	; (8007874 <HAL_RCC_ClockConfig+0x1bc>)
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	00db      	lsls	r3, r3, #3
 8007838:	490e      	ldr	r1, [pc, #56]	; (8007874 <HAL_RCC_ClockConfig+0x1bc>)
 800783a:	4313      	orrs	r3, r2
 800783c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800783e:	f000 f821 	bl	8007884 <HAL_RCC_GetSysClockFreq>
 8007842:	4601      	mov	r1, r0
 8007844:	4b0b      	ldr	r3, [pc, #44]	; (8007874 <HAL_RCC_ClockConfig+0x1bc>)
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	091b      	lsrs	r3, r3, #4
 800784a:	f003 030f 	and.w	r3, r3, #15
 800784e:	4a0a      	ldr	r2, [pc, #40]	; (8007878 <HAL_RCC_ClockConfig+0x1c0>)
 8007850:	5cd3      	ldrb	r3, [r2, r3]
 8007852:	fa21 f303 	lsr.w	r3, r1, r3
 8007856:	4a09      	ldr	r2, [pc, #36]	; (800787c <HAL_RCC_ClockConfig+0x1c4>)
 8007858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800785a:	4b09      	ldr	r3, [pc, #36]	; (8007880 <HAL_RCC_ClockConfig+0x1c8>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4618      	mov	r0, r3
 8007860:	f7fa f940 	bl	8001ae4 <HAL_InitTick>

  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	40023c00 	.word	0x40023c00
 8007874:	40023800 	.word	0x40023800
 8007878:	080198c8 	.word	0x080198c8
 800787c:	20000000 	.word	0x20000000
 8007880:	20000004 	.word	0x20000004

08007884 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800788a:	2300      	movs	r3, #0
 800788c:	607b      	str	r3, [r7, #4]
 800788e:	2300      	movs	r3, #0
 8007890:	60fb      	str	r3, [r7, #12]
 8007892:	2300      	movs	r3, #0
 8007894:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007896:	2300      	movs	r3, #0
 8007898:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800789a:	4b63      	ldr	r3, [pc, #396]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	f003 030c 	and.w	r3, r3, #12
 80078a2:	2b04      	cmp	r3, #4
 80078a4:	d007      	beq.n	80078b6 <HAL_RCC_GetSysClockFreq+0x32>
 80078a6:	2b08      	cmp	r3, #8
 80078a8:	d008      	beq.n	80078bc <HAL_RCC_GetSysClockFreq+0x38>
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	f040 80b4 	bne.w	8007a18 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80078b0:	4b5e      	ldr	r3, [pc, #376]	; (8007a2c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80078b2:	60bb      	str	r3, [r7, #8]
       break;
 80078b4:	e0b3      	b.n	8007a1e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80078b6:	4b5e      	ldr	r3, [pc, #376]	; (8007a30 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80078b8:	60bb      	str	r3, [r7, #8]
      break;
 80078ba:	e0b0      	b.n	8007a1e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80078bc:	4b5a      	ldr	r3, [pc, #360]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80078c6:	4b58      	ldr	r3, [pc, #352]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d04a      	beq.n	8007968 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078d2:	4b55      	ldr	r3, [pc, #340]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	099b      	lsrs	r3, r3, #6
 80078d8:	f04f 0400 	mov.w	r4, #0
 80078dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80078e0:	f04f 0200 	mov.w	r2, #0
 80078e4:	ea03 0501 	and.w	r5, r3, r1
 80078e8:	ea04 0602 	and.w	r6, r4, r2
 80078ec:	4629      	mov	r1, r5
 80078ee:	4632      	mov	r2, r6
 80078f0:	f04f 0300 	mov.w	r3, #0
 80078f4:	f04f 0400 	mov.w	r4, #0
 80078f8:	0154      	lsls	r4, r2, #5
 80078fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80078fe:	014b      	lsls	r3, r1, #5
 8007900:	4619      	mov	r1, r3
 8007902:	4622      	mov	r2, r4
 8007904:	1b49      	subs	r1, r1, r5
 8007906:	eb62 0206 	sbc.w	r2, r2, r6
 800790a:	f04f 0300 	mov.w	r3, #0
 800790e:	f04f 0400 	mov.w	r4, #0
 8007912:	0194      	lsls	r4, r2, #6
 8007914:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007918:	018b      	lsls	r3, r1, #6
 800791a:	1a5b      	subs	r3, r3, r1
 800791c:	eb64 0402 	sbc.w	r4, r4, r2
 8007920:	f04f 0100 	mov.w	r1, #0
 8007924:	f04f 0200 	mov.w	r2, #0
 8007928:	00e2      	lsls	r2, r4, #3
 800792a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800792e:	00d9      	lsls	r1, r3, #3
 8007930:	460b      	mov	r3, r1
 8007932:	4614      	mov	r4, r2
 8007934:	195b      	adds	r3, r3, r5
 8007936:	eb44 0406 	adc.w	r4, r4, r6
 800793a:	f04f 0100 	mov.w	r1, #0
 800793e:	f04f 0200 	mov.w	r2, #0
 8007942:	0262      	lsls	r2, r4, #9
 8007944:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007948:	0259      	lsls	r1, r3, #9
 800794a:	460b      	mov	r3, r1
 800794c:	4614      	mov	r4, r2
 800794e:	4618      	mov	r0, r3
 8007950:	4621      	mov	r1, r4
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f04f 0400 	mov.w	r4, #0
 8007958:	461a      	mov	r2, r3
 800795a:	4623      	mov	r3, r4
 800795c:	f7f8 fc4a 	bl	80001f4 <__aeabi_uldivmod>
 8007960:	4603      	mov	r3, r0
 8007962:	460c      	mov	r4, r1
 8007964:	60fb      	str	r3, [r7, #12]
 8007966:	e049      	b.n	80079fc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007968:	4b2f      	ldr	r3, [pc, #188]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	099b      	lsrs	r3, r3, #6
 800796e:	f04f 0400 	mov.w	r4, #0
 8007972:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007976:	f04f 0200 	mov.w	r2, #0
 800797a:	ea03 0501 	and.w	r5, r3, r1
 800797e:	ea04 0602 	and.w	r6, r4, r2
 8007982:	4629      	mov	r1, r5
 8007984:	4632      	mov	r2, r6
 8007986:	f04f 0300 	mov.w	r3, #0
 800798a:	f04f 0400 	mov.w	r4, #0
 800798e:	0154      	lsls	r4, r2, #5
 8007990:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007994:	014b      	lsls	r3, r1, #5
 8007996:	4619      	mov	r1, r3
 8007998:	4622      	mov	r2, r4
 800799a:	1b49      	subs	r1, r1, r5
 800799c:	eb62 0206 	sbc.w	r2, r2, r6
 80079a0:	f04f 0300 	mov.w	r3, #0
 80079a4:	f04f 0400 	mov.w	r4, #0
 80079a8:	0194      	lsls	r4, r2, #6
 80079aa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80079ae:	018b      	lsls	r3, r1, #6
 80079b0:	1a5b      	subs	r3, r3, r1
 80079b2:	eb64 0402 	sbc.w	r4, r4, r2
 80079b6:	f04f 0100 	mov.w	r1, #0
 80079ba:	f04f 0200 	mov.w	r2, #0
 80079be:	00e2      	lsls	r2, r4, #3
 80079c0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80079c4:	00d9      	lsls	r1, r3, #3
 80079c6:	460b      	mov	r3, r1
 80079c8:	4614      	mov	r4, r2
 80079ca:	195b      	adds	r3, r3, r5
 80079cc:	eb44 0406 	adc.w	r4, r4, r6
 80079d0:	f04f 0100 	mov.w	r1, #0
 80079d4:	f04f 0200 	mov.w	r2, #0
 80079d8:	02a2      	lsls	r2, r4, #10
 80079da:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80079de:	0299      	lsls	r1, r3, #10
 80079e0:	460b      	mov	r3, r1
 80079e2:	4614      	mov	r4, r2
 80079e4:	4618      	mov	r0, r3
 80079e6:	4621      	mov	r1, r4
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f04f 0400 	mov.w	r4, #0
 80079ee:	461a      	mov	r2, r3
 80079f0:	4623      	mov	r3, r4
 80079f2:	f7f8 fbff 	bl	80001f4 <__aeabi_uldivmod>
 80079f6:	4603      	mov	r3, r0
 80079f8:	460c      	mov	r4, r1
 80079fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80079fc:	4b0a      	ldr	r3, [pc, #40]	; (8007a28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	0c1b      	lsrs	r3, r3, #16
 8007a02:	f003 0303 	and.w	r3, r3, #3
 8007a06:	3301      	adds	r3, #1
 8007a08:	005b      	lsls	r3, r3, #1
 8007a0a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a14:	60bb      	str	r3, [r7, #8]
      break;
 8007a16:	e002      	b.n	8007a1e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a18:	4b04      	ldr	r3, [pc, #16]	; (8007a2c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007a1a:	60bb      	str	r3, [r7, #8]
      break;
 8007a1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a1e:	68bb      	ldr	r3, [r7, #8]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3714      	adds	r7, #20
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a28:	40023800 	.word	0x40023800
 8007a2c:	00f42400 	.word	0x00f42400
 8007a30:	007a1200 	.word	0x007a1200

08007a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a34:	b480      	push	{r7}
 8007a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a38:	4b03      	ldr	r3, [pc, #12]	; (8007a48 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	20000000 	.word	0x20000000

08007a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007a50:	f7ff fff0 	bl	8007a34 <HAL_RCC_GetHCLKFreq>
 8007a54:	4601      	mov	r1, r0
 8007a56:	4b05      	ldr	r3, [pc, #20]	; (8007a6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	0a9b      	lsrs	r3, r3, #10
 8007a5c:	f003 0307 	and.w	r3, r3, #7
 8007a60:	4a03      	ldr	r2, [pc, #12]	; (8007a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a62:	5cd3      	ldrb	r3, [r2, r3]
 8007a64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	40023800 	.word	0x40023800
 8007a70:	080198d8 	.word	0x080198d8

08007a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007a78:	f7ff ffdc 	bl	8007a34 <HAL_RCC_GetHCLKFreq>
 8007a7c:	4601      	mov	r1, r0
 8007a7e:	4b05      	ldr	r3, [pc, #20]	; (8007a94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	0b5b      	lsrs	r3, r3, #13
 8007a84:	f003 0307 	and.w	r3, r3, #7
 8007a88:	4a03      	ldr	r2, [pc, #12]	; (8007a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a8a:	5cd3      	ldrb	r3, [r2, r3]
 8007a8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	40023800 	.word	0x40023800
 8007a98:	080198d8 	.word	0x080198d8

08007a9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	220f      	movs	r2, #15
 8007aaa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007aac:	4b12      	ldr	r3, [pc, #72]	; (8007af8 <HAL_RCC_GetClockConfig+0x5c>)
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	f003 0203 	and.w	r2, r3, #3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007ab8:	4b0f      	ldr	r3, [pc, #60]	; (8007af8 <HAL_RCC_GetClockConfig+0x5c>)
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007ac4:	4b0c      	ldr	r3, [pc, #48]	; (8007af8 <HAL_RCC_GetClockConfig+0x5c>)
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007ad0:	4b09      	ldr	r3, [pc, #36]	; (8007af8 <HAL_RCC_GetClockConfig+0x5c>)
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	08db      	lsrs	r3, r3, #3
 8007ad6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007ade:	4b07      	ldr	r3, [pc, #28]	; (8007afc <HAL_RCC_GetClockConfig+0x60>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 020f 	and.w	r2, r3, #15
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	601a      	str	r2, [r3, #0]
}
 8007aea:	bf00      	nop
 8007aec:	370c      	adds	r7, #12
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	40023800 	.word	0x40023800
 8007afc:	40023c00 	.word	0x40023c00

08007b00 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0301 	and.w	r3, r3, #1
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d105      	bne.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d035      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007b28:	4b62      	ldr	r3, [pc, #392]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b2e:	f7fa f953 	bl	8001dd8 <HAL_GetTick>
 8007b32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b34:	e008      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007b36:	f7fa f94f 	bl	8001dd8 <HAL_GetTick>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d901      	bls.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	e0b0      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b48:	4b5b      	ldr	r3, [pc, #364]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1f0      	bne.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	019a      	lsls	r2, r3, #6
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	071b      	lsls	r3, r3, #28
 8007b60:	4955      	ldr	r1, [pc, #340]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b62:	4313      	orrs	r3, r2
 8007b64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007b68:	4b52      	ldr	r3, [pc, #328]	; (8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b6e:	f7fa f933 	bl	8001dd8 <HAL_GetTick>
 8007b72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b74:	e008      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007b76:	f7fa f92f 	bl	8001dd8 <HAL_GetTick>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d901      	bls.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e090      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b88:	4b4b      	ldr	r3, [pc, #300]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d0f0      	beq.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0302 	and.w	r3, r3, #2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f000 8083 	beq.w	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60fb      	str	r3, [r7, #12]
 8007ba6:	4b44      	ldr	r3, [pc, #272]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007baa:	4a43      	ldr	r2, [pc, #268]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8007bb2:	4b41      	ldr	r3, [pc, #260]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bba:	60fb      	str	r3, [r7, #12]
 8007bbc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007bbe:	4b3f      	ldr	r3, [pc, #252]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a3e      	ldr	r2, [pc, #248]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bc8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007bca:	f7fa f905 	bl	8001dd8 <HAL_GetTick>
 8007bce:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007bd0:	e008      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007bd2:	f7fa f901 	bl	8001dd8 <HAL_GetTick>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	1ad3      	subs	r3, r2, r3
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d901      	bls.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007be0:	2303      	movs	r3, #3
 8007be2:	e062      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007be4:	4b35      	ldr	r3, [pc, #212]	; (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d0f0      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007bf0:	4b31      	ldr	r3, [pc, #196]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bf8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d02f      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c08:	693a      	ldr	r2, [r7, #16]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d028      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c0e:	4b2a      	ldr	r3, [pc, #168]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c16:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c18:	4b29      	ldr	r3, [pc, #164]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c1e:	4b28      	ldr	r3, [pc, #160]	; (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007c20:	2200      	movs	r2, #0
 8007c22:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007c24:	4a24      	ldr	r2, [pc, #144]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007c2a:	4b23      	ldr	r3, [pc, #140]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c2e:	f003 0301 	and.w	r3, r3, #1
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d114      	bne.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007c36:	f7fa f8cf 	bl	8001dd8 <HAL_GetTick>
 8007c3a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c3c:	e00a      	b.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c3e:	f7fa f8cb 	bl	8001dd8 <HAL_GetTick>
 8007c42:	4602      	mov	r2, r0
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	1ad3      	subs	r3, r2, r3
 8007c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d901      	bls.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e02a      	b.n	8007caa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c54:	4b18      	ldr	r3, [pc, #96]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d0ee      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c6c:	d10d      	bne.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007c6e:	4b12      	ldr	r3, [pc, #72]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c82:	490d      	ldr	r1, [pc, #52]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c84:	4313      	orrs	r3, r2
 8007c86:	608b      	str	r3, [r1, #8]
 8007c88:	e005      	b.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007c8a:	4b0b      	ldr	r3, [pc, #44]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	4a0a      	ldr	r2, [pc, #40]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c90:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007c94:	6093      	str	r3, [r2, #8]
 8007c96:	4b08      	ldr	r3, [pc, #32]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ca2:	4905      	ldr	r1, [pc, #20]	; (8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3718      	adds	r7, #24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	42470068 	.word	0x42470068
 8007cb8:	40023800 	.word	0x40023800
 8007cbc:	40007000 	.word	0x40007000
 8007cc0:	42470e40 	.word	0x42470e40

08007cc4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e083      	b.n	8007dde <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	7f5b      	ldrb	r3, [r3, #29]
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d105      	bne.n	8007cec <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f7f9 fd00 	bl	80016ec <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2202      	movs	r2, #2
 8007cf0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	22ca      	movs	r2, #202	; 0xca
 8007cf8:	625a      	str	r2, [r3, #36]	; 0x24
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2253      	movs	r2, #83	; 0x53
 8007d00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f897 	bl	8007e36 <RTC_EnterInitMode>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d008      	beq.n	8007d20 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	22ff      	movs	r2, #255	; 0xff
 8007d14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2204      	movs	r2, #4
 8007d1a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e05e      	b.n	8007dde <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	6812      	ldr	r2, [r2, #0]
 8007d2a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d32:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	6899      	ldr	r1, [r3, #8]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685a      	ldr	r2, [r3, #4]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	431a      	orrs	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	695b      	ldr	r3, [r3, #20]
 8007d48:	431a      	orrs	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	430a      	orrs	r2, r1
 8007d50:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	68d2      	ldr	r2, [r2, #12]
 8007d5a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6919      	ldr	r1, [r3, #16]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	041a      	lsls	r2, r3, #16
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	430a      	orrs	r2, r1
 8007d6e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68da      	ldr	r2, [r3, #12]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d7e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	f003 0320 	and.w	r3, r3, #32
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10e      	bne.n	8007dac <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f829 	bl	8007de6 <HAL_RTC_WaitForSynchro>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d008      	beq.n	8007dac <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	22ff      	movs	r2, #255	; 0xff
 8007da0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2204      	movs	r2, #4
 8007da6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e018      	b.n	8007dde <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007dba:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	699a      	ldr	r2, [r3, #24]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	430a      	orrs	r2, r1
 8007dcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	22ff      	movs	r2, #255	; 0xff
 8007dd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
  }
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3708      	adds	r7, #8
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b084      	sub	sp, #16
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007dee:	2300      	movs	r3, #0
 8007df0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68da      	ldr	r2, [r3, #12]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007e00:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e02:	f7f9 ffe9 	bl	8001dd8 <HAL_GetTick>
 8007e06:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007e08:	e009      	b.n	8007e1e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007e0a:	f7f9 ffe5 	bl	8001dd8 <HAL_GetTick>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e18:	d901      	bls.n	8007e1e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e007      	b.n	8007e2e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	f003 0320 	and.w	r3, r3, #32
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d0ee      	beq.n	8007e0a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b084      	sub	sp, #16
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d119      	bne.n	8007e84 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e58:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e5a:	f7f9 ffbd 	bl	8001dd8 <HAL_GetTick>
 8007e5e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e60:	e009      	b.n	8007e76 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007e62:	f7f9 ffb9 	bl	8001dd8 <HAL_GetTick>
 8007e66:	4602      	mov	r2, r0
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	1ad3      	subs	r3, r2, r3
 8007e6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e70:	d901      	bls.n	8007e76 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007e72:	2303      	movs	r3, #3
 8007e74:	e007      	b.n	8007e86 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d0ee      	beq.n	8007e62 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b082      	sub	sp, #8
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d101      	bne.n	8007ea0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e01d      	b.n	8007edc <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d106      	bne.n	8007eba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f7f9 fc2f 	bl	8001718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2202      	movs	r2, #2
 8007ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	3304      	adds	r3, #4
 8007eca:	4619      	mov	r1, r3
 8007ecc:	4610      	mov	r0, r2
 8007ece:	f000 fcd7 	bl	8008880 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2202      	movs	r2, #2
 8007ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f003 0307 	and.w	r3, r3, #7
 8007efe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b06      	cmp	r3, #6
 8007f04:	d007      	beq.n	8007f16 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f042 0201 	orr.w	r2, r2, #1
 8007f14:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3714      	adds	r7, #20
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68da      	ldr	r2, [r3, #12]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f042 0201 	orr.w	r2, r2, #1
 8007f42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f003 0307 	and.w	r3, r3, #7
 8007f4e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2b06      	cmp	r3, #6
 8007f54:	d007      	beq.n	8007f66 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f042 0201 	orr.w	r2, r2, #1
 8007f64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3714      	adds	r7, #20
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d101      	bne.n	8007f86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e01d      	b.n	8007fc2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d106      	bne.n	8007fa0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f815 	bl	8007fca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	3304      	adds	r3, #4
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	4610      	mov	r0, r2
 8007fb4:	f000 fc64 	bl	8008880 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b083      	sub	sp, #12
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007fd2:	bf00      	nop
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
	...

08007fe0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	6839      	ldr	r1, [r7, #0]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f000 ffb4 	bl	8008f60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a15      	ldr	r2, [pc, #84]	; (8008054 <HAL_TIM_PWM_Start+0x74>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d004      	beq.n	800800c <HAL_TIM_PWM_Start+0x2c>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a14      	ldr	r2, [pc, #80]	; (8008058 <HAL_TIM_PWM_Start+0x78>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d101      	bne.n	8008010 <HAL_TIM_PWM_Start+0x30>
 800800c:	2301      	movs	r3, #1
 800800e:	e000      	b.n	8008012 <HAL_TIM_PWM_Start+0x32>
 8008010:	2300      	movs	r3, #0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d007      	beq.n	8008026 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008024:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	f003 0307 	and.w	r3, r3, #7
 8008030:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2b06      	cmp	r3, #6
 8008036:	d007      	beq.n	8008048 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f042 0201 	orr.w	r2, r2, #1
 8008046:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	40010000 	.word	0x40010000
 8008058:	40010400 	.word	0x40010400

0800805c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2200      	movs	r2, #0
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	4618      	mov	r0, r3
 8008070:	f000 ff76 	bl	8008f60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a22      	ldr	r2, [pc, #136]	; (8008104 <HAL_TIM_PWM_Stop+0xa8>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d004      	beq.n	8008088 <HAL_TIM_PWM_Stop+0x2c>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a21      	ldr	r2, [pc, #132]	; (8008108 <HAL_TIM_PWM_Stop+0xac>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d101      	bne.n	800808c <HAL_TIM_PWM_Stop+0x30>
 8008088:	2301      	movs	r3, #1
 800808a:	e000      	b.n	800808e <HAL_TIM_PWM_Stop+0x32>
 800808c:	2300      	movs	r3, #0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d017      	beq.n	80080c2 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	6a1a      	ldr	r2, [r3, #32]
 8008098:	f241 1311 	movw	r3, #4369	; 0x1111
 800809c:	4013      	ands	r3, r2
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10f      	bne.n	80080c2 <HAL_TIM_PWM_Stop+0x66>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	6a1a      	ldr	r2, [r3, #32]
 80080a8:	f240 4344 	movw	r3, #1092	; 0x444
 80080ac:	4013      	ands	r3, r2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d107      	bne.n	80080c2 <HAL_TIM_PWM_Stop+0x66>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6a1a      	ldr	r2, [r3, #32]
 80080c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80080cc:	4013      	ands	r3, r2
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10f      	bne.n	80080f2 <HAL_TIM_PWM_Stop+0x96>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	6a1a      	ldr	r2, [r3, #32]
 80080d8:	f240 4344 	movw	r3, #1092	; 0x444
 80080dc:	4013      	ands	r3, r2
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d107      	bne.n	80080f2 <HAL_TIM_PWM_Stop+0x96>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f022 0201 	bic.w	r2, r2, #1
 80080f0:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	40010000 	.word	0x40010000
 8008108:	40010400 	.word	0x40010400

0800810c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d101      	bne.n	8008120 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e083      	b.n	8008228 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008126:	b2db      	uxtb	r3, r3
 8008128:	2b00      	cmp	r3, #0
 800812a:	d106      	bne.n	800813a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f7f9 fb6d 	bl	8001814 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2202      	movs	r2, #2
 800813e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	6812      	ldr	r2, [r2, #0]
 800814c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008150:	f023 0307 	bic.w	r3, r3, #7
 8008154:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	3304      	adds	r3, #4
 800815e:	4619      	mov	r1, r3
 8008160:	4610      	mov	r0, r2
 8008162:	f000 fb8d 	bl	8008880 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	6a1b      	ldr	r3, [r3, #32]
 800817c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	697a      	ldr	r2, [r7, #20]
 8008184:	4313      	orrs	r3, r2
 8008186:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800818e:	f023 0303 	bic.w	r3, r3, #3
 8008192:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	689a      	ldr	r2, [r3, #8]
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	021b      	lsls	r3, r3, #8
 800819e:	4313      	orrs	r3, r2
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80081ac:	f023 030c 	bic.w	r3, r3, #12
 80081b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	68da      	ldr	r2, [r3, #12]
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	69db      	ldr	r3, [r3, #28]
 80081c6:	021b      	lsls	r3, r3, #8
 80081c8:	4313      	orrs	r3, r2
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	011a      	lsls	r2, r3, #4
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	031b      	lsls	r3, r3, #12
 80081dc:	4313      	orrs	r3, r2
 80081de:	693a      	ldr	r2, [r7, #16]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80081ea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80081f2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	685a      	ldr	r2, [r3, #4]
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	695b      	ldr	r3, [r3, #20]
 80081fc:	011b      	lsls	r3, r3, #4
 80081fe:	4313      	orrs	r3, r2
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	4313      	orrs	r3, r2
 8008204:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	697a      	ldr	r2, [r7, #20]
 800820c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2201      	movs	r2, #1
 8008222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3718      	adds	r7, #24
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d002      	beq.n	8008246 <HAL_TIM_Encoder_Start+0x16>
 8008240:	2b04      	cmp	r3, #4
 8008242:	d008      	beq.n	8008256 <HAL_TIM_Encoder_Start+0x26>
 8008244:	e00f      	b.n	8008266 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2201      	movs	r2, #1
 800824c:	2100      	movs	r1, #0
 800824e:	4618      	mov	r0, r3
 8008250:	f000 fe86 	bl	8008f60 <TIM_CCxChannelCmd>
      break;
 8008254:	e016      	b.n	8008284 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2201      	movs	r2, #1
 800825c:	2104      	movs	r1, #4
 800825e:	4618      	mov	r0, r3
 8008260:	f000 fe7e 	bl	8008f60 <TIM_CCxChannelCmd>
      break;
 8008264:	e00e      	b.n	8008284 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2201      	movs	r2, #1
 800826c:	2100      	movs	r1, #0
 800826e:	4618      	mov	r0, r3
 8008270:	f000 fe76 	bl	8008f60 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2201      	movs	r2, #1
 800827a:	2104      	movs	r1, #4
 800827c:	4618      	mov	r0, r3
 800827e:	f000 fe6f 	bl	8008f60 <TIM_CCxChannelCmd>
      break;
 8008282:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f042 0201 	orr.w	r2, r2, #1
 8008292:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3708      	adds	r7, #8
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b082      	sub	sp, #8
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	f003 0302 	and.w	r3, r3, #2
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d122      	bne.n	80082fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	f003 0302 	and.w	r3, r3, #2
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d11b      	bne.n	80082fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f06f 0202 	mvn.w	r2, #2
 80082ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	f003 0303 	and.w	r3, r3, #3
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d003      	beq.n	80082e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 faae 	bl	8008842 <HAL_TIM_IC_CaptureCallback>
 80082e6:	e005      	b.n	80082f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 faa0 	bl	800882e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fab1 	bl	8008856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	f003 0304 	and.w	r3, r3, #4
 8008304:	2b04      	cmp	r3, #4
 8008306:	d122      	bne.n	800834e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	f003 0304 	and.w	r3, r3, #4
 8008312:	2b04      	cmp	r3, #4
 8008314:	d11b      	bne.n	800834e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f06f 0204 	mvn.w	r2, #4
 800831e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2202      	movs	r2, #2
 8008324:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008330:	2b00      	cmp	r3, #0
 8008332:	d003      	beq.n	800833c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fa84 	bl	8008842 <HAL_TIM_IC_CaptureCallback>
 800833a:	e005      	b.n	8008348 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 fa76 	bl	800882e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 fa87 	bl	8008856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	f003 0308 	and.w	r3, r3, #8
 8008358:	2b08      	cmp	r3, #8
 800835a:	d122      	bne.n	80083a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	f003 0308 	and.w	r3, r3, #8
 8008366:	2b08      	cmp	r3, #8
 8008368:	d11b      	bne.n	80083a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f06f 0208 	mvn.w	r2, #8
 8008372:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2204      	movs	r2, #4
 8008378:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	69db      	ldr	r3, [r3, #28]
 8008380:	f003 0303 	and.w	r3, r3, #3
 8008384:	2b00      	cmp	r3, #0
 8008386:	d003      	beq.n	8008390 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 fa5a 	bl	8008842 <HAL_TIM_IC_CaptureCallback>
 800838e:	e005      	b.n	800839c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 fa4c 	bl	800882e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fa5d 	bl	8008856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	f003 0310 	and.w	r3, r3, #16
 80083ac:	2b10      	cmp	r3, #16
 80083ae:	d122      	bne.n	80083f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	f003 0310 	and.w	r3, r3, #16
 80083ba:	2b10      	cmp	r3, #16
 80083bc:	d11b      	bne.n	80083f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f06f 0210 	mvn.w	r2, #16
 80083c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2208      	movs	r2, #8
 80083cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	69db      	ldr	r3, [r3, #28]
 80083d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d003      	beq.n	80083e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 fa30 	bl	8008842 <HAL_TIM_IC_CaptureCallback>
 80083e2:	e005      	b.n	80083f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fa22 	bl	800882e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 fa33 	bl	8008856 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	f003 0301 	and.w	r3, r3, #1
 8008400:	2b01      	cmp	r3, #1
 8008402:	d10e      	bne.n	8008422 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	2b01      	cmp	r3, #1
 8008410:	d107      	bne.n	8008422 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f06f 0201 	mvn.w	r2, #1
 800841a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f7f8 ff63 	bl	80012e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800842c:	2b80      	cmp	r3, #128	; 0x80
 800842e:	d10e      	bne.n	800844e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800843a:	2b80      	cmp	r3, #128	; 0x80
 800843c:	d107      	bne.n	800844e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fe87 	bl	800915c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008458:	2b40      	cmp	r3, #64	; 0x40
 800845a:	d10e      	bne.n	800847a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008466:	2b40      	cmp	r3, #64	; 0x40
 8008468:	d107      	bne.n	800847a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 f9f8 	bl	800886a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	f003 0320 	and.w	r3, r3, #32
 8008484:	2b20      	cmp	r3, #32
 8008486:	d10e      	bne.n	80084a6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	f003 0320 	and.w	r3, r3, #32
 8008492:	2b20      	cmp	r3, #32
 8008494:	d107      	bne.n	80084a6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f06f 0220 	mvn.w	r2, #32
 800849e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 fe51 	bl	8009148 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084a6:	bf00      	nop
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
	...

080084b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d101      	bne.n	80084ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80084c6:	2302      	movs	r3, #2
 80084c8:	e0b4      	b.n	8008634 <HAL_TIM_PWM_ConfigChannel+0x184>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2202      	movs	r2, #2
 80084d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2b0c      	cmp	r3, #12
 80084de:	f200 809f 	bhi.w	8008620 <HAL_TIM_PWM_ConfigChannel+0x170>
 80084e2:	a201      	add	r2, pc, #4	; (adr r2, 80084e8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80084e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e8:	0800851d 	.word	0x0800851d
 80084ec:	08008621 	.word	0x08008621
 80084f0:	08008621 	.word	0x08008621
 80084f4:	08008621 	.word	0x08008621
 80084f8:	0800855d 	.word	0x0800855d
 80084fc:	08008621 	.word	0x08008621
 8008500:	08008621 	.word	0x08008621
 8008504:	08008621 	.word	0x08008621
 8008508:	0800859f 	.word	0x0800859f
 800850c:	08008621 	.word	0x08008621
 8008510:	08008621 	.word	0x08008621
 8008514:	08008621 	.word	0x08008621
 8008518:	080085df 	.word	0x080085df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68b9      	ldr	r1, [r7, #8]
 8008522:	4618      	mov	r0, r3
 8008524:	f000 fa4c 	bl	80089c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	699a      	ldr	r2, [r3, #24]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f042 0208 	orr.w	r2, r2, #8
 8008536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	699a      	ldr	r2, [r3, #24]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f022 0204 	bic.w	r2, r2, #4
 8008546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	6999      	ldr	r1, [r3, #24]
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	691a      	ldr	r2, [r3, #16]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	430a      	orrs	r2, r1
 8008558:	619a      	str	r2, [r3, #24]
      break;
 800855a:	e062      	b.n	8008622 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68b9      	ldr	r1, [r7, #8]
 8008562:	4618      	mov	r0, r3
 8008564:	f000 fa9c 	bl	8008aa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	699a      	ldr	r2, [r3, #24]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008576:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	699a      	ldr	r2, [r3, #24]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6999      	ldr	r1, [r3, #24]
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	021a      	lsls	r2, r3, #8
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	430a      	orrs	r2, r1
 800859a:	619a      	str	r2, [r3, #24]
      break;
 800859c:	e041      	b.n	8008622 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68b9      	ldr	r1, [r7, #8]
 80085a4:	4618      	mov	r0, r3
 80085a6:	f000 faf1 	bl	8008b8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	69da      	ldr	r2, [r3, #28]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f042 0208 	orr.w	r2, r2, #8
 80085b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	69da      	ldr	r2, [r3, #28]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f022 0204 	bic.w	r2, r2, #4
 80085c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	69d9      	ldr	r1, [r3, #28]
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	691a      	ldr	r2, [r3, #16]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	430a      	orrs	r2, r1
 80085da:	61da      	str	r2, [r3, #28]
      break;
 80085dc:	e021      	b.n	8008622 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68b9      	ldr	r1, [r7, #8]
 80085e4:	4618      	mov	r0, r3
 80085e6:	f000 fb45 	bl	8008c74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	69da      	ldr	r2, [r3, #28]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	69da      	ldr	r2, [r3, #28]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008608:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	69d9      	ldr	r1, [r3, #28]
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	021a      	lsls	r2, r3, #8
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	430a      	orrs	r2, r1
 800861c:	61da      	str	r2, [r3, #28]
      break;
 800861e:	e000      	b.n	8008622 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008620:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2201      	movs	r2, #1
 8008626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3710      	adds	r7, #16
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800864c:	2b01      	cmp	r3, #1
 800864e:	d101      	bne.n	8008654 <HAL_TIM_ConfigClockSource+0x18>
 8008650:	2302      	movs	r3, #2
 8008652:	e0a6      	b.n	80087a2 <HAL_TIM_ConfigClockSource+0x166>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2202      	movs	r2, #2
 8008660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008672:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800867a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b40      	cmp	r3, #64	; 0x40
 800868a:	d067      	beq.n	800875c <HAL_TIM_ConfigClockSource+0x120>
 800868c:	2b40      	cmp	r3, #64	; 0x40
 800868e:	d80b      	bhi.n	80086a8 <HAL_TIM_ConfigClockSource+0x6c>
 8008690:	2b10      	cmp	r3, #16
 8008692:	d073      	beq.n	800877c <HAL_TIM_ConfigClockSource+0x140>
 8008694:	2b10      	cmp	r3, #16
 8008696:	d802      	bhi.n	800869e <HAL_TIM_ConfigClockSource+0x62>
 8008698:	2b00      	cmp	r3, #0
 800869a:	d06f      	beq.n	800877c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800869c:	e078      	b.n	8008790 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800869e:	2b20      	cmp	r3, #32
 80086a0:	d06c      	beq.n	800877c <HAL_TIM_ConfigClockSource+0x140>
 80086a2:	2b30      	cmp	r3, #48	; 0x30
 80086a4:	d06a      	beq.n	800877c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80086a6:	e073      	b.n	8008790 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80086a8:	2b70      	cmp	r3, #112	; 0x70
 80086aa:	d00d      	beq.n	80086c8 <HAL_TIM_ConfigClockSource+0x8c>
 80086ac:	2b70      	cmp	r3, #112	; 0x70
 80086ae:	d804      	bhi.n	80086ba <HAL_TIM_ConfigClockSource+0x7e>
 80086b0:	2b50      	cmp	r3, #80	; 0x50
 80086b2:	d033      	beq.n	800871c <HAL_TIM_ConfigClockSource+0xe0>
 80086b4:	2b60      	cmp	r3, #96	; 0x60
 80086b6:	d041      	beq.n	800873c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80086b8:	e06a      	b.n	8008790 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80086ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086be:	d066      	beq.n	800878e <HAL_TIM_ConfigClockSource+0x152>
 80086c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086c4:	d017      	beq.n	80086f6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80086c6:	e063      	b.n	8008790 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6818      	ldr	r0, [r3, #0]
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	6899      	ldr	r1, [r3, #8]
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	685a      	ldr	r2, [r3, #4]
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	f000 fc22 	bl	8008f20 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80086ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	609a      	str	r2, [r3, #8]
      break;
 80086f4:	e04c      	b.n	8008790 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6818      	ldr	r0, [r3, #0]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	6899      	ldr	r1, [r3, #8]
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	685a      	ldr	r2, [r3, #4]
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	f000 fc0b 	bl	8008f20 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	689a      	ldr	r2, [r3, #8]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008718:	609a      	str	r2, [r3, #8]
      break;
 800871a:	e039      	b.n	8008790 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6818      	ldr	r0, [r3, #0]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	6859      	ldr	r1, [r3, #4]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	461a      	mov	r2, r3
 800872a:	f000 fb7f 	bl	8008e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2150      	movs	r1, #80	; 0x50
 8008734:	4618      	mov	r0, r3
 8008736:	f000 fbd8 	bl	8008eea <TIM_ITRx_SetConfig>
      break;
 800873a:	e029      	b.n	8008790 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6818      	ldr	r0, [r3, #0]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	6859      	ldr	r1, [r3, #4]
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	461a      	mov	r2, r3
 800874a:	f000 fb9e 	bl	8008e8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2160      	movs	r1, #96	; 0x60
 8008754:	4618      	mov	r0, r3
 8008756:	f000 fbc8 	bl	8008eea <TIM_ITRx_SetConfig>
      break;
 800875a:	e019      	b.n	8008790 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6818      	ldr	r0, [r3, #0]
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	6859      	ldr	r1, [r3, #4]
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	461a      	mov	r2, r3
 800876a:	f000 fb5f 	bl	8008e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2140      	movs	r1, #64	; 0x40
 8008774:	4618      	mov	r0, r3
 8008776:	f000 fbb8 	bl	8008eea <TIM_ITRx_SetConfig>
      break;
 800877a:	e009      	b.n	8008790 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4619      	mov	r1, r3
 8008786:	4610      	mov	r0, r2
 8008788:	f000 fbaf 	bl	8008eea <TIM_ITRx_SetConfig>
      break;
 800878c:	e000      	b.n	8008790 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800878e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b082      	sub	sp, #8
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
 80087b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d101      	bne.n	80087c2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80087be:	2302      	movs	r3, #2
 80087c0:	e031      	b.n	8008826 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2202      	movs	r2, #2
 80087ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80087d2:	6839      	ldr	r1, [r7, #0]
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 faa3 	bl	8008d20 <TIM_SlaveTimer_SetConfig>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d009      	beq.n	80087f4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	e018      	b.n	8008826 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	68da      	ldr	r2, [r3, #12]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008802:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68da      	ldr	r2, [r3, #12]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008812:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800882e:	b480      	push	{r7}
 8008830:	b083      	sub	sp, #12
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008836:	bf00      	nop
 8008838:	370c      	adds	r7, #12
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008842:	b480      	push	{r7}
 8008844:	b083      	sub	sp, #12
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800884a:	bf00      	nop
 800884c:	370c      	adds	r7, #12
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008856:	b480      	push	{r7}
 8008858:	b083      	sub	sp, #12
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800885e:	bf00      	nop
 8008860:	370c      	adds	r7, #12
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr

0800886a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800886a:	b480      	push	{r7}
 800886c:	b083      	sub	sp, #12
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008872:	bf00      	nop
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
	...

08008880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a40      	ldr	r2, [pc, #256]	; (8008994 <TIM_Base_SetConfig+0x114>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d013      	beq.n	80088c0 <TIM_Base_SetConfig+0x40>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800889e:	d00f      	beq.n	80088c0 <TIM_Base_SetConfig+0x40>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a3d      	ldr	r2, [pc, #244]	; (8008998 <TIM_Base_SetConfig+0x118>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d00b      	beq.n	80088c0 <TIM_Base_SetConfig+0x40>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a3c      	ldr	r2, [pc, #240]	; (800899c <TIM_Base_SetConfig+0x11c>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d007      	beq.n	80088c0 <TIM_Base_SetConfig+0x40>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4a3b      	ldr	r2, [pc, #236]	; (80089a0 <TIM_Base_SetConfig+0x120>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d003      	beq.n	80088c0 <TIM_Base_SetConfig+0x40>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a3a      	ldr	r2, [pc, #232]	; (80089a4 <TIM_Base_SetConfig+0x124>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d108      	bne.n	80088d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4a2f      	ldr	r2, [pc, #188]	; (8008994 <TIM_Base_SetConfig+0x114>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d02b      	beq.n	8008932 <TIM_Base_SetConfig+0xb2>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088e0:	d027      	beq.n	8008932 <TIM_Base_SetConfig+0xb2>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4a2c      	ldr	r2, [pc, #176]	; (8008998 <TIM_Base_SetConfig+0x118>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d023      	beq.n	8008932 <TIM_Base_SetConfig+0xb2>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a2b      	ldr	r2, [pc, #172]	; (800899c <TIM_Base_SetConfig+0x11c>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d01f      	beq.n	8008932 <TIM_Base_SetConfig+0xb2>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a2a      	ldr	r2, [pc, #168]	; (80089a0 <TIM_Base_SetConfig+0x120>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d01b      	beq.n	8008932 <TIM_Base_SetConfig+0xb2>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a29      	ldr	r2, [pc, #164]	; (80089a4 <TIM_Base_SetConfig+0x124>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d017      	beq.n	8008932 <TIM_Base_SetConfig+0xb2>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a28      	ldr	r2, [pc, #160]	; (80089a8 <TIM_Base_SetConfig+0x128>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d013      	beq.n	8008932 <TIM_Base_SetConfig+0xb2>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a27      	ldr	r2, [pc, #156]	; (80089ac <TIM_Base_SetConfig+0x12c>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d00f      	beq.n	8008932 <TIM_Base_SetConfig+0xb2>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a26      	ldr	r2, [pc, #152]	; (80089b0 <TIM_Base_SetConfig+0x130>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d00b      	beq.n	8008932 <TIM_Base_SetConfig+0xb2>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a25      	ldr	r2, [pc, #148]	; (80089b4 <TIM_Base_SetConfig+0x134>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d007      	beq.n	8008932 <TIM_Base_SetConfig+0xb2>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a24      	ldr	r2, [pc, #144]	; (80089b8 <TIM_Base_SetConfig+0x138>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d003      	beq.n	8008932 <TIM_Base_SetConfig+0xb2>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a23      	ldr	r2, [pc, #140]	; (80089bc <TIM_Base_SetConfig+0x13c>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d108      	bne.n	8008944 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	4313      	orrs	r3, r2
 8008942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	4313      	orrs	r3, r2
 8008950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	689a      	ldr	r2, [r3, #8]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a0a      	ldr	r2, [pc, #40]	; (8008994 <TIM_Base_SetConfig+0x114>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d003      	beq.n	8008978 <TIM_Base_SetConfig+0xf8>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a0c      	ldr	r2, [pc, #48]	; (80089a4 <TIM_Base_SetConfig+0x124>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d103      	bne.n	8008980 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	691a      	ldr	r2, [r3, #16]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	615a      	str	r2, [r3, #20]
}
 8008986:	bf00      	nop
 8008988:	3714      	adds	r7, #20
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	40010000 	.word	0x40010000
 8008998:	40000400 	.word	0x40000400
 800899c:	40000800 	.word	0x40000800
 80089a0:	40000c00 	.word	0x40000c00
 80089a4:	40010400 	.word	0x40010400
 80089a8:	40014000 	.word	0x40014000
 80089ac:	40014400 	.word	0x40014400
 80089b0:	40014800 	.word	0x40014800
 80089b4:	40001800 	.word	0x40001800
 80089b8:	40001c00 	.word	0x40001c00
 80089bc:	40002000 	.word	0x40002000

080089c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b087      	sub	sp, #28
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a1b      	ldr	r3, [r3, #32]
 80089ce:	f023 0201 	bic.w	r2, r3, #1
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a1b      	ldr	r3, [r3, #32]
 80089da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	699b      	ldr	r3, [r3, #24]
 80089e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f023 0303 	bic.w	r3, r3, #3
 80089f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	f023 0302 	bic.w	r3, r3, #2
 8008a08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a20      	ldr	r2, [pc, #128]	; (8008a98 <TIM_OC1_SetConfig+0xd8>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d003      	beq.n	8008a24 <TIM_OC1_SetConfig+0x64>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a1f      	ldr	r2, [pc, #124]	; (8008a9c <TIM_OC1_SetConfig+0xdc>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d10c      	bne.n	8008a3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	f023 0308 	bic.w	r3, r3, #8
 8008a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	697a      	ldr	r2, [r7, #20]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	f023 0304 	bic.w	r3, r3, #4
 8008a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a15      	ldr	r2, [pc, #84]	; (8008a98 <TIM_OC1_SetConfig+0xd8>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d003      	beq.n	8008a4e <TIM_OC1_SetConfig+0x8e>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a14      	ldr	r2, [pc, #80]	; (8008a9c <TIM_OC1_SetConfig+0xdc>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d111      	bne.n	8008a72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	695b      	ldr	r3, [r3, #20]
 8008a62:	693a      	ldr	r2, [r7, #16]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	699b      	ldr	r3, [r3, #24]
 8008a6c:	693a      	ldr	r2, [r7, #16]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	693a      	ldr	r2, [r7, #16]
 8008a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	685a      	ldr	r2, [r3, #4]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	697a      	ldr	r2, [r7, #20]
 8008a8a:	621a      	str	r2, [r3, #32]
}
 8008a8c:	bf00      	nop
 8008a8e:	371c      	adds	r7, #28
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr
 8008a98:	40010000 	.word	0x40010000
 8008a9c:	40010400 	.word	0x40010400

08008aa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b087      	sub	sp, #28
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a1b      	ldr	r3, [r3, #32]
 8008aae:	f023 0210 	bic.w	r2, r3, #16
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a1b      	ldr	r3, [r3, #32]
 8008aba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	699b      	ldr	r3, [r3, #24]
 8008ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	021b      	lsls	r3, r3, #8
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	f023 0320 	bic.w	r3, r3, #32
 8008aea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	011b      	lsls	r3, r3, #4
 8008af2:	697a      	ldr	r2, [r7, #20]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4a22      	ldr	r2, [pc, #136]	; (8008b84 <TIM_OC2_SetConfig+0xe4>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d003      	beq.n	8008b08 <TIM_OC2_SetConfig+0x68>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a21      	ldr	r2, [pc, #132]	; (8008b88 <TIM_OC2_SetConfig+0xe8>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d10d      	bne.n	8008b24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	011b      	lsls	r3, r3, #4
 8008b16:	697a      	ldr	r2, [r7, #20]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4a17      	ldr	r2, [pc, #92]	; (8008b84 <TIM_OC2_SetConfig+0xe4>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d003      	beq.n	8008b34 <TIM_OC2_SetConfig+0x94>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4a16      	ldr	r2, [pc, #88]	; (8008b88 <TIM_OC2_SetConfig+0xe8>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d113      	bne.n	8008b5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	695b      	ldr	r3, [r3, #20]
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	699b      	ldr	r3, [r3, #24]
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	693a      	ldr	r2, [r7, #16]
 8008b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	685a      	ldr	r2, [r3, #4]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	697a      	ldr	r2, [r7, #20]
 8008b74:	621a      	str	r2, [r3, #32]
}
 8008b76:	bf00      	nop
 8008b78:	371c      	adds	r7, #28
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	40010000 	.word	0x40010000
 8008b88:	40010400 	.word	0x40010400

08008b8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b087      	sub	sp, #28
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a1b      	ldr	r3, [r3, #32]
 8008ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	69db      	ldr	r3, [r3, #28]
 8008bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f023 0303 	bic.w	r3, r3, #3
 8008bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008bd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	021b      	lsls	r3, r3, #8
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a21      	ldr	r2, [pc, #132]	; (8008c6c <TIM_OC3_SetConfig+0xe0>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d003      	beq.n	8008bf2 <TIM_OC3_SetConfig+0x66>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a20      	ldr	r2, [pc, #128]	; (8008c70 <TIM_OC3_SetConfig+0xe4>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d10d      	bne.n	8008c0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008bf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	021b      	lsls	r3, r3, #8
 8008c00:	697a      	ldr	r2, [r7, #20]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a16      	ldr	r2, [pc, #88]	; (8008c6c <TIM_OC3_SetConfig+0xe0>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d003      	beq.n	8008c1e <TIM_OC3_SetConfig+0x92>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a15      	ldr	r2, [pc, #84]	; (8008c70 <TIM_OC3_SetConfig+0xe4>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d113      	bne.n	8008c46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	695b      	ldr	r3, [r3, #20]
 8008c32:	011b      	lsls	r3, r3, #4
 8008c34:	693a      	ldr	r2, [r7, #16]
 8008c36:	4313      	orrs	r3, r2
 8008c38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	699b      	ldr	r3, [r3, #24]
 8008c3e:	011b      	lsls	r3, r3, #4
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	693a      	ldr	r2, [r7, #16]
 8008c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	68fa      	ldr	r2, [r7, #12]
 8008c50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	685a      	ldr	r2, [r3, #4]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	697a      	ldr	r2, [r7, #20]
 8008c5e:	621a      	str	r2, [r3, #32]
}
 8008c60:	bf00      	nop
 8008c62:	371c      	adds	r7, #28
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr
 8008c6c:	40010000 	.word	0x40010000
 8008c70:	40010400 	.word	0x40010400

08008c74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b087      	sub	sp, #28
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6a1b      	ldr	r3, [r3, #32]
 8008c82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a1b      	ldr	r3, [r3, #32]
 8008c8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	69db      	ldr	r3, [r3, #28]
 8008c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008caa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	021b      	lsls	r3, r3, #8
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008cbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	031b      	lsls	r3, r3, #12
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a12      	ldr	r2, [pc, #72]	; (8008d18 <TIM_OC4_SetConfig+0xa4>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d003      	beq.n	8008cdc <TIM_OC4_SetConfig+0x68>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a11      	ldr	r2, [pc, #68]	; (8008d1c <TIM_OC4_SetConfig+0xa8>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d109      	bne.n	8008cf0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ce2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	695b      	ldr	r3, [r3, #20]
 8008ce8:	019b      	lsls	r3, r3, #6
 8008cea:	697a      	ldr	r2, [r7, #20]
 8008cec:	4313      	orrs	r3, r2
 8008cee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	697a      	ldr	r2, [r7, #20]
 8008cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	685a      	ldr	r2, [r3, #4]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	693a      	ldr	r2, [r7, #16]
 8008d08:	621a      	str	r2, [r3, #32]
}
 8008d0a:	bf00      	nop
 8008d0c:	371c      	adds	r7, #28
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	40010000 	.word	0x40010000
 8008d1c:	40010400 	.word	0x40010400

08008d20 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b086      	sub	sp, #24
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d38:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	697a      	ldr	r2, [r7, #20]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	f023 0307 	bic.w	r3, r3, #7
 8008d4a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	697a      	ldr	r2, [r7, #20]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	697a      	ldr	r2, [r7, #20]
 8008d5c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	2b30      	cmp	r3, #48	; 0x30
 8008d64:	d05c      	beq.n	8008e20 <TIM_SlaveTimer_SetConfig+0x100>
 8008d66:	2b30      	cmp	r3, #48	; 0x30
 8008d68:	d806      	bhi.n	8008d78 <TIM_SlaveTimer_SetConfig+0x58>
 8008d6a:	2b10      	cmp	r3, #16
 8008d6c:	d058      	beq.n	8008e20 <TIM_SlaveTimer_SetConfig+0x100>
 8008d6e:	2b20      	cmp	r3, #32
 8008d70:	d056      	beq.n	8008e20 <TIM_SlaveTimer_SetConfig+0x100>
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d054      	beq.n	8008e20 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8008d76:	e054      	b.n	8008e22 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8008d78:	2b50      	cmp	r3, #80	; 0x50
 8008d7a:	d03d      	beq.n	8008df8 <TIM_SlaveTimer_SetConfig+0xd8>
 8008d7c:	2b50      	cmp	r3, #80	; 0x50
 8008d7e:	d802      	bhi.n	8008d86 <TIM_SlaveTimer_SetConfig+0x66>
 8008d80:	2b40      	cmp	r3, #64	; 0x40
 8008d82:	d010      	beq.n	8008da6 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8008d84:	e04d      	b.n	8008e22 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8008d86:	2b60      	cmp	r3, #96	; 0x60
 8008d88:	d040      	beq.n	8008e0c <TIM_SlaveTimer_SetConfig+0xec>
 8008d8a:	2b70      	cmp	r3, #112	; 0x70
 8008d8c:	d000      	beq.n	8008d90 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8008d8e:	e048      	b.n	8008e22 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6818      	ldr	r0, [r3, #0]
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	68d9      	ldr	r1, [r3, #12]
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	689a      	ldr	r2, [r3, #8]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	f000 f8be 	bl	8008f20 <TIM_ETR_SetConfig>
      break;
 8008da4:	e03d      	b.n	8008e22 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2b05      	cmp	r3, #5
 8008dac:	d101      	bne.n	8008db2 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e038      	b.n	8008e24 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	6a1b      	ldr	r3, [r3, #32]
 8008db8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	6a1a      	ldr	r2, [r3, #32]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f022 0201 	bic.w	r2, r2, #1
 8008dc8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	699b      	ldr	r3, [r3, #24]
 8008dd0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008dd8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	691b      	ldr	r3, [r3, #16]
 8008dde:	011b      	lsls	r3, r3, #4
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	693a      	ldr	r2, [r7, #16]
 8008df4:	621a      	str	r2, [r3, #32]
      break;
 8008df6:	e014      	b.n	8008e22 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6818      	ldr	r0, [r3, #0]
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	6899      	ldr	r1, [r3, #8]
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	461a      	mov	r2, r3
 8008e06:	f000 f811 	bl	8008e2c <TIM_TI1_ConfigInputStage>
      break;
 8008e0a:	e00a      	b.n	8008e22 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6818      	ldr	r0, [r3, #0]
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	6899      	ldr	r1, [r3, #8]
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	461a      	mov	r2, r3
 8008e1a:	f000 f836 	bl	8008e8a <TIM_TI2_ConfigInputStage>
      break;
 8008e1e:	e000      	b.n	8008e22 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8008e20:	bf00      	nop
  }
  return HAL_OK;
 8008e22:	2300      	movs	r3, #0
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3718      	adds	r7, #24
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b087      	sub	sp, #28
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6a1b      	ldr	r3, [r3, #32]
 8008e3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6a1b      	ldr	r3, [r3, #32]
 8008e42:	f023 0201 	bic.w	r2, r3, #1
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	011b      	lsls	r3, r3, #4
 8008e5c:	693a      	ldr	r2, [r7, #16]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	f023 030a 	bic.w	r3, r3, #10
 8008e68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e6a:	697a      	ldr	r2, [r7, #20]
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	697a      	ldr	r2, [r7, #20]
 8008e7c:	621a      	str	r2, [r3, #32]
}
 8008e7e:	bf00      	nop
 8008e80:	371c      	adds	r7, #28
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr

08008e8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e8a:	b480      	push	{r7}
 8008e8c:	b087      	sub	sp, #28
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	60f8      	str	r0, [r7, #12]
 8008e92:	60b9      	str	r1, [r7, #8]
 8008e94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6a1b      	ldr	r3, [r3, #32]
 8008e9a:	f023 0210 	bic.w	r2, r3, #16
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6a1b      	ldr	r3, [r3, #32]
 8008eac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008eb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	031b      	lsls	r3, r3, #12
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ec6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	011b      	lsls	r3, r3, #4
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	697a      	ldr	r2, [r7, #20]
 8008ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	693a      	ldr	r2, [r7, #16]
 8008edc:	621a      	str	r2, [r3, #32]
}
 8008ede:	bf00      	nop
 8008ee0:	371c      	adds	r7, #28
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr

08008eea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008eea:	b480      	push	{r7}
 8008eec:	b085      	sub	sp, #20
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
 8008ef2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	f043 0307 	orr.w	r3, r3, #7
 8008f0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	609a      	str	r2, [r3, #8]
}
 8008f14:	bf00      	nop
 8008f16:	3714      	adds	r7, #20
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b087      	sub	sp, #28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
 8008f2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	021a      	lsls	r2, r3, #8
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	431a      	orrs	r2, r3
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	4313      	orrs	r3, r2
 8008f48:	697a      	ldr	r2, [r7, #20]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	697a      	ldr	r2, [r7, #20]
 8008f52:	609a      	str	r2, [r3, #8]
}
 8008f54:	bf00      	nop
 8008f56:	371c      	adds	r7, #28
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b087      	sub	sp, #28
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	f003 031f 	and.w	r3, r3, #31
 8008f72:	2201      	movs	r2, #1
 8008f74:	fa02 f303 	lsl.w	r3, r2, r3
 8008f78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6a1a      	ldr	r2, [r3, #32]
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	43db      	mvns	r3, r3
 8008f82:	401a      	ands	r2, r3
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6a1a      	ldr	r2, [r3, #32]
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	f003 031f 	and.w	r3, r3, #31
 8008f92:	6879      	ldr	r1, [r7, #4]
 8008f94:	fa01 f303 	lsl.w	r3, r1, r3
 8008f98:	431a      	orrs	r2, r3
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	621a      	str	r2, [r3, #32]
}
 8008f9e:	bf00      	nop
 8008fa0:	371c      	adds	r7, #28
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr
	...

08008fac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d101      	bne.n	8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008fc0:	2302      	movs	r3, #2
 8008fc2:	e05a      	b.n	800907a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2202      	movs	r2, #2
 8008fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	685b      	ldr	r3, [r3, #4]
 8008fda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a21      	ldr	r2, [pc, #132]	; (8009088 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d022      	beq.n	800904e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009010:	d01d      	beq.n	800904e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a1d      	ldr	r2, [pc, #116]	; (800908c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d018      	beq.n	800904e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a1b      	ldr	r2, [pc, #108]	; (8009090 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d013      	beq.n	800904e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a1a      	ldr	r2, [pc, #104]	; (8009094 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d00e      	beq.n	800904e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a18      	ldr	r2, [pc, #96]	; (8009098 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d009      	beq.n	800904e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a17      	ldr	r2, [pc, #92]	; (800909c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d004      	beq.n	800904e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a15      	ldr	r2, [pc, #84]	; (80090a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d10c      	bne.n	8009068 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009054:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	4313      	orrs	r3, r2
 800905e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	40010000 	.word	0x40010000
 800908c:	40000400 	.word	0x40000400
 8009090:	40000800 	.word	0x40000800
 8009094:	40000c00 	.word	0x40000c00
 8009098:	40010400 	.word	0x40010400
 800909c:	40014000 	.word	0x40014000
 80090a0:	40001800 	.word	0x40001800

080090a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80090ae:	2300      	movs	r3, #0
 80090b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d101      	bne.n	80090c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80090bc:	2302      	movs	r3, #2
 80090be:	e03d      	b.n	800913c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	4313      	orrs	r3, r2
 800910c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	695b      	ldr	r3, [r3, #20]
 8009118:	4313      	orrs	r3, r2
 800911a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	69db      	ldr	r3, [r3, #28]
 8009126:	4313      	orrs	r3, r2
 8009128:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3714      	adds	r7, #20
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009150:	bf00      	nop
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr

0800915c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009164:	bf00      	nop
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d101      	bne.n	8009182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	e03f      	b.n	8009202 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009188:	b2db      	uxtb	r3, r3
 800918a:	2b00      	cmp	r3, #0
 800918c:	d106      	bne.n	800919c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f7f8 fc54 	bl	8001a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2224      	movs	r2, #36	; 0x24
 80091a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68da      	ldr	r2, [r3, #12]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fa69 	bl	800968c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	691a      	ldr	r2, [r3, #16]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	695a      	ldr	r2, [r3, #20]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	68da      	ldr	r2, [r3, #12]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2220      	movs	r2, #32
 80091f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2220      	movs	r2, #32
 80091fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
	...

0800920c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b088      	sub	sp, #32
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	695b      	ldr	r3, [r3, #20]
 800922a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800922c:	2300      	movs	r3, #0
 800922e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009230:	2300      	movs	r3, #0
 8009232:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	f003 030f 	and.w	r3, r3, #15
 800923a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d10d      	bne.n	800925e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	f003 0320 	and.w	r3, r3, #32
 8009248:	2b00      	cmp	r3, #0
 800924a:	d008      	beq.n	800925e <HAL_UART_IRQHandler+0x52>
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	f003 0320 	and.w	r3, r3, #32
 8009252:	2b00      	cmp	r3, #0
 8009254:	d003      	beq.n	800925e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f996 	bl	8009588 <UART_Receive_IT>
      return;
 800925c:	e0d1      	b.n	8009402 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	2b00      	cmp	r3, #0
 8009262:	f000 80b0 	beq.w	80093c6 <HAL_UART_IRQHandler+0x1ba>
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	f003 0301 	and.w	r3, r3, #1
 800926c:	2b00      	cmp	r3, #0
 800926e:	d105      	bne.n	800927c <HAL_UART_IRQHandler+0x70>
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009276:	2b00      	cmp	r3, #0
 8009278:	f000 80a5 	beq.w	80093c6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	f003 0301 	and.w	r3, r3, #1
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00a      	beq.n	800929c <HAL_UART_IRQHandler+0x90>
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800928c:	2b00      	cmp	r3, #0
 800928e:	d005      	beq.n	800929c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009294:	f043 0201 	orr.w	r2, r3, #1
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	f003 0304 	and.w	r3, r3, #4
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00a      	beq.n	80092bc <HAL_UART_IRQHandler+0xb0>
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	f003 0301 	and.w	r3, r3, #1
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d005      	beq.n	80092bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092b4:	f043 0202 	orr.w	r2, r3, #2
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	f003 0302 	and.w	r3, r3, #2
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00a      	beq.n	80092dc <HAL_UART_IRQHandler+0xd0>
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	f003 0301 	and.w	r3, r3, #1
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d005      	beq.n	80092dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d4:	f043 0204 	orr.w	r2, r3, #4
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	f003 0308 	and.w	r3, r3, #8
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00f      	beq.n	8009306 <HAL_UART_IRQHandler+0xfa>
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	f003 0320 	and.w	r3, r3, #32
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d104      	bne.n	80092fa <HAL_UART_IRQHandler+0xee>
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	f003 0301 	and.w	r3, r3, #1
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d005      	beq.n	8009306 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092fe:	f043 0208 	orr.w	r2, r3, #8
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800930a:	2b00      	cmp	r3, #0
 800930c:	d078      	beq.n	8009400 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	f003 0320 	and.w	r3, r3, #32
 8009314:	2b00      	cmp	r3, #0
 8009316:	d007      	beq.n	8009328 <HAL_UART_IRQHandler+0x11c>
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	f003 0320 	and.w	r3, r3, #32
 800931e:	2b00      	cmp	r3, #0
 8009320:	d002      	beq.n	8009328 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f930 	bl	8009588 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	695b      	ldr	r3, [r3, #20]
 800932e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009332:	2b40      	cmp	r3, #64	; 0x40
 8009334:	bf0c      	ite	eq
 8009336:	2301      	moveq	r3, #1
 8009338:	2300      	movne	r3, #0
 800933a:	b2db      	uxtb	r3, r3
 800933c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009342:	f003 0308 	and.w	r3, r3, #8
 8009346:	2b00      	cmp	r3, #0
 8009348:	d102      	bne.n	8009350 <HAL_UART_IRQHandler+0x144>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d031      	beq.n	80093b4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 f879 	bl	8009448 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	695b      	ldr	r3, [r3, #20]
 800935c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009360:	2b40      	cmp	r3, #64	; 0x40
 8009362:	d123      	bne.n	80093ac <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	695a      	ldr	r2, [r3, #20]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009372:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009378:	2b00      	cmp	r3, #0
 800937a:	d013      	beq.n	80093a4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009380:	4a21      	ldr	r2, [pc, #132]	; (8009408 <HAL_UART_IRQHandler+0x1fc>)
 8009382:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009388:	4618      	mov	r0, r3
 800938a:	f7f9 fb11 	bl	80029b0 <HAL_DMA_Abort_IT>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d016      	beq.n	80093c2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800939e:	4610      	mov	r0, r2
 80093a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093a2:	e00e      	b.n	80093c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f845 	bl	8009434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093aa:	e00a      	b.n	80093c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 f841 	bl	8009434 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093b2:	e006      	b.n	80093c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 f83d 	bl	8009434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80093c0:	e01e      	b.n	8009400 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093c2:	bf00      	nop
    return;
 80093c4:	e01c      	b.n	8009400 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d008      	beq.n	80093e2 <HAL_UART_IRQHandler+0x1d6>
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d003      	beq.n	80093e2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 f866 	bl	80094ac <UART_Transmit_IT>
    return;
 80093e0:	e00f      	b.n	8009402 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d00a      	beq.n	8009402 <HAL_UART_IRQHandler+0x1f6>
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d005      	beq.n	8009402 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f8ae 	bl	8009558 <UART_EndTransmit_IT>
    return;
 80093fc:	bf00      	nop
 80093fe:	e000      	b.n	8009402 <HAL_UART_IRQHandler+0x1f6>
    return;
 8009400:	bf00      	nop
  }
}
 8009402:	3720      	adds	r7, #32
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}
 8009408:	08009485 	.word	0x08009485

0800940c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009414:	bf00      	nop
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800943c:	bf00      	nop
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	68da      	ldr	r2, [r3, #12]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800945e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	695a      	ldr	r2, [r3, #20]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f022 0201 	bic.w	r2, r2, #1
 800946e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2220      	movs	r2, #32
 8009474:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009478:	bf00      	nop
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009490:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2200      	movs	r2, #0
 8009496:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	f7ff ffc8 	bl	8009434 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094a4:	bf00      	nop
 80094a6:	3710      	adds	r7, #16
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b085      	sub	sp, #20
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	2b21      	cmp	r3, #33	; 0x21
 80094be:	d144      	bne.n	800954a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094c8:	d11a      	bne.n	8009500 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	881b      	ldrh	r3, [r3, #0]
 80094d4:	461a      	mov	r2, r3
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094de:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	691b      	ldr	r3, [r3, #16]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d105      	bne.n	80094f4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a1b      	ldr	r3, [r3, #32]
 80094ec:	1c9a      	adds	r2, r3, #2
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	621a      	str	r2, [r3, #32]
 80094f2:	e00e      	b.n	8009512 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6a1b      	ldr	r3, [r3, #32]
 80094f8:	1c5a      	adds	r2, r3, #1
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	621a      	str	r2, [r3, #32]
 80094fe:	e008      	b.n	8009512 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6a1b      	ldr	r3, [r3, #32]
 8009504:	1c59      	adds	r1, r3, #1
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	6211      	str	r1, [r2, #32]
 800950a:	781a      	ldrb	r2, [r3, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009516:	b29b      	uxth	r3, r3
 8009518:	3b01      	subs	r3, #1
 800951a:	b29b      	uxth	r3, r3
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	4619      	mov	r1, r3
 8009520:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009522:	2b00      	cmp	r3, #0
 8009524:	d10f      	bne.n	8009546 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	68da      	ldr	r2, [r3, #12]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009534:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68da      	ldr	r2, [r3, #12]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009544:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009546:	2300      	movs	r3, #0
 8009548:	e000      	b.n	800954c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800954a:	2302      	movs	r3, #2
  }
}
 800954c:	4618      	mov	r0, r3
 800954e:	3714      	adds	r7, #20
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	68da      	ldr	r2, [r3, #12]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800956e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2220      	movs	r2, #32
 8009574:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7ff ff47 	bl	800940c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009596:	b2db      	uxtb	r3, r3
 8009598:	2b22      	cmp	r3, #34	; 0x22
 800959a:	d171      	bne.n	8009680 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095a4:	d123      	bne.n	80095ee <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095aa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	691b      	ldr	r3, [r3, #16]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d10e      	bne.n	80095d2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095c0:	b29a      	uxth	r2, r3
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ca:	1c9a      	adds	r2, r3, #2
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	629a      	str	r2, [r3, #40]	; 0x28
 80095d0:	e029      	b.n	8009626 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	b29b      	uxth	r3, r3
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	b29a      	uxth	r2, r3
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e6:	1c5a      	adds	r2, r3, #1
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	629a      	str	r2, [r3, #40]	; 0x28
 80095ec:	e01b      	b.n	8009626 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d10a      	bne.n	800960c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	6858      	ldr	r0, [r3, #4]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009600:	1c59      	adds	r1, r3, #1
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	6291      	str	r1, [r2, #40]	; 0x28
 8009606:	b2c2      	uxtb	r2, r0
 8009608:	701a      	strb	r2, [r3, #0]
 800960a:	e00c      	b.n	8009626 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	b2da      	uxtb	r2, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009618:	1c58      	adds	r0, r3, #1
 800961a:	6879      	ldr	r1, [r7, #4]
 800961c:	6288      	str	r0, [r1, #40]	; 0x28
 800961e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009622:	b2d2      	uxtb	r2, r2
 8009624:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800962a:	b29b      	uxth	r3, r3
 800962c:	3b01      	subs	r3, #1
 800962e:	b29b      	uxth	r3, r3
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	4619      	mov	r1, r3
 8009634:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009636:	2b00      	cmp	r3, #0
 8009638:	d120      	bne.n	800967c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68da      	ldr	r2, [r3, #12]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f022 0220 	bic.w	r2, r2, #32
 8009648:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	68da      	ldr	r2, [r3, #12]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009658:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	695a      	ldr	r2, [r3, #20]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f022 0201 	bic.w	r2, r2, #1
 8009668:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2220      	movs	r2, #32
 800966e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f7ff fed4 	bl	8009420 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009678:	2300      	movs	r3, #0
 800967a:	e002      	b.n	8009682 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800967c:	2300      	movs	r3, #0
 800967e:	e000      	b.n	8009682 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009680:	2302      	movs	r3, #2
  }
}
 8009682:	4618      	mov	r0, r3
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
	...

0800968c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800968c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009690:	b085      	sub	sp, #20
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	691b      	ldr	r3, [r3, #16]
 800969c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	68da      	ldr	r2, [r3, #12]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	430a      	orrs	r2, r1
 80096aa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	689a      	ldr	r2, [r3, #8]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	691b      	ldr	r3, [r3, #16]
 80096b4:	431a      	orrs	r2, r3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	695b      	ldr	r3, [r3, #20]
 80096ba:	431a      	orrs	r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	69db      	ldr	r3, [r3, #28]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80096ce:	f023 030c 	bic.w	r3, r3, #12
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	6812      	ldr	r2, [r2, #0]
 80096d6:	68f9      	ldr	r1, [r7, #12]
 80096d8:	430b      	orrs	r3, r1
 80096da:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	695b      	ldr	r3, [r3, #20]
 80096e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	699a      	ldr	r2, [r3, #24]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	430a      	orrs	r2, r1
 80096f0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	69db      	ldr	r3, [r3, #28]
 80096f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096fa:	f040 818b 	bne.w	8009a14 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4ac1      	ldr	r2, [pc, #772]	; (8009a08 <UART_SetConfig+0x37c>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d005      	beq.n	8009714 <UART_SetConfig+0x88>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4abf      	ldr	r2, [pc, #764]	; (8009a0c <UART_SetConfig+0x380>)
 800970e:	4293      	cmp	r3, r2
 8009710:	f040 80bd 	bne.w	800988e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009714:	f7fe f9ae 	bl	8007a74 <HAL_RCC_GetPCLK2Freq>
 8009718:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	461d      	mov	r5, r3
 800971e:	f04f 0600 	mov.w	r6, #0
 8009722:	46a8      	mov	r8, r5
 8009724:	46b1      	mov	r9, r6
 8009726:	eb18 0308 	adds.w	r3, r8, r8
 800972a:	eb49 0409 	adc.w	r4, r9, r9
 800972e:	4698      	mov	r8, r3
 8009730:	46a1      	mov	r9, r4
 8009732:	eb18 0805 	adds.w	r8, r8, r5
 8009736:	eb49 0906 	adc.w	r9, r9, r6
 800973a:	f04f 0100 	mov.w	r1, #0
 800973e:	f04f 0200 	mov.w	r2, #0
 8009742:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009746:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800974a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800974e:	4688      	mov	r8, r1
 8009750:	4691      	mov	r9, r2
 8009752:	eb18 0005 	adds.w	r0, r8, r5
 8009756:	eb49 0106 	adc.w	r1, r9, r6
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	461d      	mov	r5, r3
 8009760:	f04f 0600 	mov.w	r6, #0
 8009764:	196b      	adds	r3, r5, r5
 8009766:	eb46 0406 	adc.w	r4, r6, r6
 800976a:	461a      	mov	r2, r3
 800976c:	4623      	mov	r3, r4
 800976e:	f7f6 fd41 	bl	80001f4 <__aeabi_uldivmod>
 8009772:	4603      	mov	r3, r0
 8009774:	460c      	mov	r4, r1
 8009776:	461a      	mov	r2, r3
 8009778:	4ba5      	ldr	r3, [pc, #660]	; (8009a10 <UART_SetConfig+0x384>)
 800977a:	fba3 2302 	umull	r2, r3, r3, r2
 800977e:	095b      	lsrs	r3, r3, #5
 8009780:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	461d      	mov	r5, r3
 8009788:	f04f 0600 	mov.w	r6, #0
 800978c:	46a9      	mov	r9, r5
 800978e:	46b2      	mov	sl, r6
 8009790:	eb19 0309 	adds.w	r3, r9, r9
 8009794:	eb4a 040a 	adc.w	r4, sl, sl
 8009798:	4699      	mov	r9, r3
 800979a:	46a2      	mov	sl, r4
 800979c:	eb19 0905 	adds.w	r9, r9, r5
 80097a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80097a4:	f04f 0100 	mov.w	r1, #0
 80097a8:	f04f 0200 	mov.w	r2, #0
 80097ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80097b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80097b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80097b8:	4689      	mov	r9, r1
 80097ba:	4692      	mov	sl, r2
 80097bc:	eb19 0005 	adds.w	r0, r9, r5
 80097c0:	eb4a 0106 	adc.w	r1, sl, r6
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	461d      	mov	r5, r3
 80097ca:	f04f 0600 	mov.w	r6, #0
 80097ce:	196b      	adds	r3, r5, r5
 80097d0:	eb46 0406 	adc.w	r4, r6, r6
 80097d4:	461a      	mov	r2, r3
 80097d6:	4623      	mov	r3, r4
 80097d8:	f7f6 fd0c 	bl	80001f4 <__aeabi_uldivmod>
 80097dc:	4603      	mov	r3, r0
 80097de:	460c      	mov	r4, r1
 80097e0:	461a      	mov	r2, r3
 80097e2:	4b8b      	ldr	r3, [pc, #556]	; (8009a10 <UART_SetConfig+0x384>)
 80097e4:	fba3 1302 	umull	r1, r3, r3, r2
 80097e8:	095b      	lsrs	r3, r3, #5
 80097ea:	2164      	movs	r1, #100	; 0x64
 80097ec:	fb01 f303 	mul.w	r3, r1, r3
 80097f0:	1ad3      	subs	r3, r2, r3
 80097f2:	00db      	lsls	r3, r3, #3
 80097f4:	3332      	adds	r3, #50	; 0x32
 80097f6:	4a86      	ldr	r2, [pc, #536]	; (8009a10 <UART_SetConfig+0x384>)
 80097f8:	fba2 2303 	umull	r2, r3, r2, r3
 80097fc:	095b      	lsrs	r3, r3, #5
 80097fe:	005b      	lsls	r3, r3, #1
 8009800:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009804:	4498      	add	r8, r3
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	461d      	mov	r5, r3
 800980a:	f04f 0600 	mov.w	r6, #0
 800980e:	46a9      	mov	r9, r5
 8009810:	46b2      	mov	sl, r6
 8009812:	eb19 0309 	adds.w	r3, r9, r9
 8009816:	eb4a 040a 	adc.w	r4, sl, sl
 800981a:	4699      	mov	r9, r3
 800981c:	46a2      	mov	sl, r4
 800981e:	eb19 0905 	adds.w	r9, r9, r5
 8009822:	eb4a 0a06 	adc.w	sl, sl, r6
 8009826:	f04f 0100 	mov.w	r1, #0
 800982a:	f04f 0200 	mov.w	r2, #0
 800982e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009832:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009836:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800983a:	4689      	mov	r9, r1
 800983c:	4692      	mov	sl, r2
 800983e:	eb19 0005 	adds.w	r0, r9, r5
 8009842:	eb4a 0106 	adc.w	r1, sl, r6
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	461d      	mov	r5, r3
 800984c:	f04f 0600 	mov.w	r6, #0
 8009850:	196b      	adds	r3, r5, r5
 8009852:	eb46 0406 	adc.w	r4, r6, r6
 8009856:	461a      	mov	r2, r3
 8009858:	4623      	mov	r3, r4
 800985a:	f7f6 fccb 	bl	80001f4 <__aeabi_uldivmod>
 800985e:	4603      	mov	r3, r0
 8009860:	460c      	mov	r4, r1
 8009862:	461a      	mov	r2, r3
 8009864:	4b6a      	ldr	r3, [pc, #424]	; (8009a10 <UART_SetConfig+0x384>)
 8009866:	fba3 1302 	umull	r1, r3, r3, r2
 800986a:	095b      	lsrs	r3, r3, #5
 800986c:	2164      	movs	r1, #100	; 0x64
 800986e:	fb01 f303 	mul.w	r3, r1, r3
 8009872:	1ad3      	subs	r3, r2, r3
 8009874:	00db      	lsls	r3, r3, #3
 8009876:	3332      	adds	r3, #50	; 0x32
 8009878:	4a65      	ldr	r2, [pc, #404]	; (8009a10 <UART_SetConfig+0x384>)
 800987a:	fba2 2303 	umull	r2, r3, r2, r3
 800987e:	095b      	lsrs	r3, r3, #5
 8009880:	f003 0207 	and.w	r2, r3, #7
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4442      	add	r2, r8
 800988a:	609a      	str	r2, [r3, #8]
 800988c:	e26f      	b.n	8009d6e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800988e:	f7fe f8dd 	bl	8007a4c <HAL_RCC_GetPCLK1Freq>
 8009892:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	461d      	mov	r5, r3
 8009898:	f04f 0600 	mov.w	r6, #0
 800989c:	46a8      	mov	r8, r5
 800989e:	46b1      	mov	r9, r6
 80098a0:	eb18 0308 	adds.w	r3, r8, r8
 80098a4:	eb49 0409 	adc.w	r4, r9, r9
 80098a8:	4698      	mov	r8, r3
 80098aa:	46a1      	mov	r9, r4
 80098ac:	eb18 0805 	adds.w	r8, r8, r5
 80098b0:	eb49 0906 	adc.w	r9, r9, r6
 80098b4:	f04f 0100 	mov.w	r1, #0
 80098b8:	f04f 0200 	mov.w	r2, #0
 80098bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80098c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80098c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80098c8:	4688      	mov	r8, r1
 80098ca:	4691      	mov	r9, r2
 80098cc:	eb18 0005 	adds.w	r0, r8, r5
 80098d0:	eb49 0106 	adc.w	r1, r9, r6
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	461d      	mov	r5, r3
 80098da:	f04f 0600 	mov.w	r6, #0
 80098de:	196b      	adds	r3, r5, r5
 80098e0:	eb46 0406 	adc.w	r4, r6, r6
 80098e4:	461a      	mov	r2, r3
 80098e6:	4623      	mov	r3, r4
 80098e8:	f7f6 fc84 	bl	80001f4 <__aeabi_uldivmod>
 80098ec:	4603      	mov	r3, r0
 80098ee:	460c      	mov	r4, r1
 80098f0:	461a      	mov	r2, r3
 80098f2:	4b47      	ldr	r3, [pc, #284]	; (8009a10 <UART_SetConfig+0x384>)
 80098f4:	fba3 2302 	umull	r2, r3, r3, r2
 80098f8:	095b      	lsrs	r3, r3, #5
 80098fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	461d      	mov	r5, r3
 8009902:	f04f 0600 	mov.w	r6, #0
 8009906:	46a9      	mov	r9, r5
 8009908:	46b2      	mov	sl, r6
 800990a:	eb19 0309 	adds.w	r3, r9, r9
 800990e:	eb4a 040a 	adc.w	r4, sl, sl
 8009912:	4699      	mov	r9, r3
 8009914:	46a2      	mov	sl, r4
 8009916:	eb19 0905 	adds.w	r9, r9, r5
 800991a:	eb4a 0a06 	adc.w	sl, sl, r6
 800991e:	f04f 0100 	mov.w	r1, #0
 8009922:	f04f 0200 	mov.w	r2, #0
 8009926:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800992a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800992e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009932:	4689      	mov	r9, r1
 8009934:	4692      	mov	sl, r2
 8009936:	eb19 0005 	adds.w	r0, r9, r5
 800993a:	eb4a 0106 	adc.w	r1, sl, r6
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	461d      	mov	r5, r3
 8009944:	f04f 0600 	mov.w	r6, #0
 8009948:	196b      	adds	r3, r5, r5
 800994a:	eb46 0406 	adc.w	r4, r6, r6
 800994e:	461a      	mov	r2, r3
 8009950:	4623      	mov	r3, r4
 8009952:	f7f6 fc4f 	bl	80001f4 <__aeabi_uldivmod>
 8009956:	4603      	mov	r3, r0
 8009958:	460c      	mov	r4, r1
 800995a:	461a      	mov	r2, r3
 800995c:	4b2c      	ldr	r3, [pc, #176]	; (8009a10 <UART_SetConfig+0x384>)
 800995e:	fba3 1302 	umull	r1, r3, r3, r2
 8009962:	095b      	lsrs	r3, r3, #5
 8009964:	2164      	movs	r1, #100	; 0x64
 8009966:	fb01 f303 	mul.w	r3, r1, r3
 800996a:	1ad3      	subs	r3, r2, r3
 800996c:	00db      	lsls	r3, r3, #3
 800996e:	3332      	adds	r3, #50	; 0x32
 8009970:	4a27      	ldr	r2, [pc, #156]	; (8009a10 <UART_SetConfig+0x384>)
 8009972:	fba2 2303 	umull	r2, r3, r2, r3
 8009976:	095b      	lsrs	r3, r3, #5
 8009978:	005b      	lsls	r3, r3, #1
 800997a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800997e:	4498      	add	r8, r3
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	461d      	mov	r5, r3
 8009984:	f04f 0600 	mov.w	r6, #0
 8009988:	46a9      	mov	r9, r5
 800998a:	46b2      	mov	sl, r6
 800998c:	eb19 0309 	adds.w	r3, r9, r9
 8009990:	eb4a 040a 	adc.w	r4, sl, sl
 8009994:	4699      	mov	r9, r3
 8009996:	46a2      	mov	sl, r4
 8009998:	eb19 0905 	adds.w	r9, r9, r5
 800999c:	eb4a 0a06 	adc.w	sl, sl, r6
 80099a0:	f04f 0100 	mov.w	r1, #0
 80099a4:	f04f 0200 	mov.w	r2, #0
 80099a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80099ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80099b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80099b4:	4689      	mov	r9, r1
 80099b6:	4692      	mov	sl, r2
 80099b8:	eb19 0005 	adds.w	r0, r9, r5
 80099bc:	eb4a 0106 	adc.w	r1, sl, r6
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	461d      	mov	r5, r3
 80099c6:	f04f 0600 	mov.w	r6, #0
 80099ca:	196b      	adds	r3, r5, r5
 80099cc:	eb46 0406 	adc.w	r4, r6, r6
 80099d0:	461a      	mov	r2, r3
 80099d2:	4623      	mov	r3, r4
 80099d4:	f7f6 fc0e 	bl	80001f4 <__aeabi_uldivmod>
 80099d8:	4603      	mov	r3, r0
 80099da:	460c      	mov	r4, r1
 80099dc:	461a      	mov	r2, r3
 80099de:	4b0c      	ldr	r3, [pc, #48]	; (8009a10 <UART_SetConfig+0x384>)
 80099e0:	fba3 1302 	umull	r1, r3, r3, r2
 80099e4:	095b      	lsrs	r3, r3, #5
 80099e6:	2164      	movs	r1, #100	; 0x64
 80099e8:	fb01 f303 	mul.w	r3, r1, r3
 80099ec:	1ad3      	subs	r3, r2, r3
 80099ee:	00db      	lsls	r3, r3, #3
 80099f0:	3332      	adds	r3, #50	; 0x32
 80099f2:	4a07      	ldr	r2, [pc, #28]	; (8009a10 <UART_SetConfig+0x384>)
 80099f4:	fba2 2303 	umull	r2, r3, r2, r3
 80099f8:	095b      	lsrs	r3, r3, #5
 80099fa:	f003 0207 	and.w	r2, r3, #7
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4442      	add	r2, r8
 8009a04:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009a06:	e1b2      	b.n	8009d6e <UART_SetConfig+0x6e2>
 8009a08:	40011000 	.word	0x40011000
 8009a0c:	40011400 	.word	0x40011400
 8009a10:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4ad7      	ldr	r2, [pc, #860]	; (8009d78 <UART_SetConfig+0x6ec>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d005      	beq.n	8009a2a <UART_SetConfig+0x39e>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	4ad6      	ldr	r2, [pc, #856]	; (8009d7c <UART_SetConfig+0x6f0>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	f040 80d1 	bne.w	8009bcc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a2a:	f7fe f823 	bl	8007a74 <HAL_RCC_GetPCLK2Freq>
 8009a2e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	469a      	mov	sl, r3
 8009a34:	f04f 0b00 	mov.w	fp, #0
 8009a38:	46d0      	mov	r8, sl
 8009a3a:	46d9      	mov	r9, fp
 8009a3c:	eb18 0308 	adds.w	r3, r8, r8
 8009a40:	eb49 0409 	adc.w	r4, r9, r9
 8009a44:	4698      	mov	r8, r3
 8009a46:	46a1      	mov	r9, r4
 8009a48:	eb18 080a 	adds.w	r8, r8, sl
 8009a4c:	eb49 090b 	adc.w	r9, r9, fp
 8009a50:	f04f 0100 	mov.w	r1, #0
 8009a54:	f04f 0200 	mov.w	r2, #0
 8009a58:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009a5c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009a60:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009a64:	4688      	mov	r8, r1
 8009a66:	4691      	mov	r9, r2
 8009a68:	eb1a 0508 	adds.w	r5, sl, r8
 8009a6c:	eb4b 0609 	adc.w	r6, fp, r9
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	4619      	mov	r1, r3
 8009a76:	f04f 0200 	mov.w	r2, #0
 8009a7a:	f04f 0300 	mov.w	r3, #0
 8009a7e:	f04f 0400 	mov.w	r4, #0
 8009a82:	0094      	lsls	r4, r2, #2
 8009a84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009a88:	008b      	lsls	r3, r1, #2
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	4623      	mov	r3, r4
 8009a8e:	4628      	mov	r0, r5
 8009a90:	4631      	mov	r1, r6
 8009a92:	f7f6 fbaf 	bl	80001f4 <__aeabi_uldivmod>
 8009a96:	4603      	mov	r3, r0
 8009a98:	460c      	mov	r4, r1
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	4bb8      	ldr	r3, [pc, #736]	; (8009d80 <UART_SetConfig+0x6f4>)
 8009a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8009aa2:	095b      	lsrs	r3, r3, #5
 8009aa4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	469b      	mov	fp, r3
 8009aac:	f04f 0c00 	mov.w	ip, #0
 8009ab0:	46d9      	mov	r9, fp
 8009ab2:	46e2      	mov	sl, ip
 8009ab4:	eb19 0309 	adds.w	r3, r9, r9
 8009ab8:	eb4a 040a 	adc.w	r4, sl, sl
 8009abc:	4699      	mov	r9, r3
 8009abe:	46a2      	mov	sl, r4
 8009ac0:	eb19 090b 	adds.w	r9, r9, fp
 8009ac4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009ac8:	f04f 0100 	mov.w	r1, #0
 8009acc:	f04f 0200 	mov.w	r2, #0
 8009ad0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009ad4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009ad8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009adc:	4689      	mov	r9, r1
 8009ade:	4692      	mov	sl, r2
 8009ae0:	eb1b 0509 	adds.w	r5, fp, r9
 8009ae4:	eb4c 060a 	adc.w	r6, ip, sl
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	4619      	mov	r1, r3
 8009aee:	f04f 0200 	mov.w	r2, #0
 8009af2:	f04f 0300 	mov.w	r3, #0
 8009af6:	f04f 0400 	mov.w	r4, #0
 8009afa:	0094      	lsls	r4, r2, #2
 8009afc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009b00:	008b      	lsls	r3, r1, #2
 8009b02:	461a      	mov	r2, r3
 8009b04:	4623      	mov	r3, r4
 8009b06:	4628      	mov	r0, r5
 8009b08:	4631      	mov	r1, r6
 8009b0a:	f7f6 fb73 	bl	80001f4 <__aeabi_uldivmod>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	460c      	mov	r4, r1
 8009b12:	461a      	mov	r2, r3
 8009b14:	4b9a      	ldr	r3, [pc, #616]	; (8009d80 <UART_SetConfig+0x6f4>)
 8009b16:	fba3 1302 	umull	r1, r3, r3, r2
 8009b1a:	095b      	lsrs	r3, r3, #5
 8009b1c:	2164      	movs	r1, #100	; 0x64
 8009b1e:	fb01 f303 	mul.w	r3, r1, r3
 8009b22:	1ad3      	subs	r3, r2, r3
 8009b24:	011b      	lsls	r3, r3, #4
 8009b26:	3332      	adds	r3, #50	; 0x32
 8009b28:	4a95      	ldr	r2, [pc, #596]	; (8009d80 <UART_SetConfig+0x6f4>)
 8009b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b2e:	095b      	lsrs	r3, r3, #5
 8009b30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b34:	4498      	add	r8, r3
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	469b      	mov	fp, r3
 8009b3a:	f04f 0c00 	mov.w	ip, #0
 8009b3e:	46d9      	mov	r9, fp
 8009b40:	46e2      	mov	sl, ip
 8009b42:	eb19 0309 	adds.w	r3, r9, r9
 8009b46:	eb4a 040a 	adc.w	r4, sl, sl
 8009b4a:	4699      	mov	r9, r3
 8009b4c:	46a2      	mov	sl, r4
 8009b4e:	eb19 090b 	adds.w	r9, r9, fp
 8009b52:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009b56:	f04f 0100 	mov.w	r1, #0
 8009b5a:	f04f 0200 	mov.w	r2, #0
 8009b5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009b66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009b6a:	4689      	mov	r9, r1
 8009b6c:	4692      	mov	sl, r2
 8009b6e:	eb1b 0509 	adds.w	r5, fp, r9
 8009b72:	eb4c 060a 	adc.w	r6, ip, sl
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	f04f 0200 	mov.w	r2, #0
 8009b80:	f04f 0300 	mov.w	r3, #0
 8009b84:	f04f 0400 	mov.w	r4, #0
 8009b88:	0094      	lsls	r4, r2, #2
 8009b8a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009b8e:	008b      	lsls	r3, r1, #2
 8009b90:	461a      	mov	r2, r3
 8009b92:	4623      	mov	r3, r4
 8009b94:	4628      	mov	r0, r5
 8009b96:	4631      	mov	r1, r6
 8009b98:	f7f6 fb2c 	bl	80001f4 <__aeabi_uldivmod>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	460c      	mov	r4, r1
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	4b77      	ldr	r3, [pc, #476]	; (8009d80 <UART_SetConfig+0x6f4>)
 8009ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8009ba8:	095b      	lsrs	r3, r3, #5
 8009baa:	2164      	movs	r1, #100	; 0x64
 8009bac:	fb01 f303 	mul.w	r3, r1, r3
 8009bb0:	1ad3      	subs	r3, r2, r3
 8009bb2:	011b      	lsls	r3, r3, #4
 8009bb4:	3332      	adds	r3, #50	; 0x32
 8009bb6:	4a72      	ldr	r2, [pc, #456]	; (8009d80 <UART_SetConfig+0x6f4>)
 8009bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8009bbc:	095b      	lsrs	r3, r3, #5
 8009bbe:	f003 020f 	and.w	r2, r3, #15
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4442      	add	r2, r8
 8009bc8:	609a      	str	r2, [r3, #8]
 8009bca:	e0d0      	b.n	8009d6e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009bcc:	f7fd ff3e 	bl	8007a4c <HAL_RCC_GetPCLK1Freq>
 8009bd0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	469a      	mov	sl, r3
 8009bd6:	f04f 0b00 	mov.w	fp, #0
 8009bda:	46d0      	mov	r8, sl
 8009bdc:	46d9      	mov	r9, fp
 8009bde:	eb18 0308 	adds.w	r3, r8, r8
 8009be2:	eb49 0409 	adc.w	r4, r9, r9
 8009be6:	4698      	mov	r8, r3
 8009be8:	46a1      	mov	r9, r4
 8009bea:	eb18 080a 	adds.w	r8, r8, sl
 8009bee:	eb49 090b 	adc.w	r9, r9, fp
 8009bf2:	f04f 0100 	mov.w	r1, #0
 8009bf6:	f04f 0200 	mov.w	r2, #0
 8009bfa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009bfe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009c02:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009c06:	4688      	mov	r8, r1
 8009c08:	4691      	mov	r9, r2
 8009c0a:	eb1a 0508 	adds.w	r5, sl, r8
 8009c0e:	eb4b 0609 	adc.w	r6, fp, r9
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	4619      	mov	r1, r3
 8009c18:	f04f 0200 	mov.w	r2, #0
 8009c1c:	f04f 0300 	mov.w	r3, #0
 8009c20:	f04f 0400 	mov.w	r4, #0
 8009c24:	0094      	lsls	r4, r2, #2
 8009c26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009c2a:	008b      	lsls	r3, r1, #2
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	4623      	mov	r3, r4
 8009c30:	4628      	mov	r0, r5
 8009c32:	4631      	mov	r1, r6
 8009c34:	f7f6 fade 	bl	80001f4 <__aeabi_uldivmod>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	460c      	mov	r4, r1
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	4b50      	ldr	r3, [pc, #320]	; (8009d80 <UART_SetConfig+0x6f4>)
 8009c40:	fba3 2302 	umull	r2, r3, r3, r2
 8009c44:	095b      	lsrs	r3, r3, #5
 8009c46:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	469b      	mov	fp, r3
 8009c4e:	f04f 0c00 	mov.w	ip, #0
 8009c52:	46d9      	mov	r9, fp
 8009c54:	46e2      	mov	sl, ip
 8009c56:	eb19 0309 	adds.w	r3, r9, r9
 8009c5a:	eb4a 040a 	adc.w	r4, sl, sl
 8009c5e:	4699      	mov	r9, r3
 8009c60:	46a2      	mov	sl, r4
 8009c62:	eb19 090b 	adds.w	r9, r9, fp
 8009c66:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009c6a:	f04f 0100 	mov.w	r1, #0
 8009c6e:	f04f 0200 	mov.w	r2, #0
 8009c72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009c7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009c7e:	4689      	mov	r9, r1
 8009c80:	4692      	mov	sl, r2
 8009c82:	eb1b 0509 	adds.w	r5, fp, r9
 8009c86:	eb4c 060a 	adc.w	r6, ip, sl
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	4619      	mov	r1, r3
 8009c90:	f04f 0200 	mov.w	r2, #0
 8009c94:	f04f 0300 	mov.w	r3, #0
 8009c98:	f04f 0400 	mov.w	r4, #0
 8009c9c:	0094      	lsls	r4, r2, #2
 8009c9e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009ca2:	008b      	lsls	r3, r1, #2
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	4623      	mov	r3, r4
 8009ca8:	4628      	mov	r0, r5
 8009caa:	4631      	mov	r1, r6
 8009cac:	f7f6 faa2 	bl	80001f4 <__aeabi_uldivmod>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	460c      	mov	r4, r1
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	4b32      	ldr	r3, [pc, #200]	; (8009d80 <UART_SetConfig+0x6f4>)
 8009cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8009cbc:	095b      	lsrs	r3, r3, #5
 8009cbe:	2164      	movs	r1, #100	; 0x64
 8009cc0:	fb01 f303 	mul.w	r3, r1, r3
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	011b      	lsls	r3, r3, #4
 8009cc8:	3332      	adds	r3, #50	; 0x32
 8009cca:	4a2d      	ldr	r2, [pc, #180]	; (8009d80 <UART_SetConfig+0x6f4>)
 8009ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8009cd0:	095b      	lsrs	r3, r3, #5
 8009cd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009cd6:	4498      	add	r8, r3
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	469b      	mov	fp, r3
 8009cdc:	f04f 0c00 	mov.w	ip, #0
 8009ce0:	46d9      	mov	r9, fp
 8009ce2:	46e2      	mov	sl, ip
 8009ce4:	eb19 0309 	adds.w	r3, r9, r9
 8009ce8:	eb4a 040a 	adc.w	r4, sl, sl
 8009cec:	4699      	mov	r9, r3
 8009cee:	46a2      	mov	sl, r4
 8009cf0:	eb19 090b 	adds.w	r9, r9, fp
 8009cf4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009cf8:	f04f 0100 	mov.w	r1, #0
 8009cfc:	f04f 0200 	mov.w	r2, #0
 8009d00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009d08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009d0c:	4689      	mov	r9, r1
 8009d0e:	4692      	mov	sl, r2
 8009d10:	eb1b 0509 	adds.w	r5, fp, r9
 8009d14:	eb4c 060a 	adc.w	r6, ip, sl
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	f04f 0200 	mov.w	r2, #0
 8009d22:	f04f 0300 	mov.w	r3, #0
 8009d26:	f04f 0400 	mov.w	r4, #0
 8009d2a:	0094      	lsls	r4, r2, #2
 8009d2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009d30:	008b      	lsls	r3, r1, #2
 8009d32:	461a      	mov	r2, r3
 8009d34:	4623      	mov	r3, r4
 8009d36:	4628      	mov	r0, r5
 8009d38:	4631      	mov	r1, r6
 8009d3a:	f7f6 fa5b 	bl	80001f4 <__aeabi_uldivmod>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	460c      	mov	r4, r1
 8009d42:	461a      	mov	r2, r3
 8009d44:	4b0e      	ldr	r3, [pc, #56]	; (8009d80 <UART_SetConfig+0x6f4>)
 8009d46:	fba3 1302 	umull	r1, r3, r3, r2
 8009d4a:	095b      	lsrs	r3, r3, #5
 8009d4c:	2164      	movs	r1, #100	; 0x64
 8009d4e:	fb01 f303 	mul.w	r3, r1, r3
 8009d52:	1ad3      	subs	r3, r2, r3
 8009d54:	011b      	lsls	r3, r3, #4
 8009d56:	3332      	adds	r3, #50	; 0x32
 8009d58:	4a09      	ldr	r2, [pc, #36]	; (8009d80 <UART_SetConfig+0x6f4>)
 8009d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d5e:	095b      	lsrs	r3, r3, #5
 8009d60:	f003 020f 	and.w	r2, r3, #15
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4442      	add	r2, r8
 8009d6a:	609a      	str	r2, [r3, #8]
}
 8009d6c:	e7ff      	b.n	8009d6e <UART_SetConfig+0x6e2>
 8009d6e:	bf00      	nop
 8009d70:	3714      	adds	r7, #20
 8009d72:	46bd      	mov	sp, r7
 8009d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d78:	40011000 	.word	0x40011000
 8009d7c:	40011400 	.word	0x40011400
 8009d80:	51eb851f 	.word	0x51eb851f

08009d84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009d84:	b084      	sub	sp, #16
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b084      	sub	sp, #16
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
 8009d8e:	f107 001c 	add.w	r0, r7, #28
 8009d92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d122      	bne.n	8009de2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009da0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	68db      	ldr	r3, [r3, #12]
 8009dbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d105      	bne.n	8009dd6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f001 fac6 	bl	800b368 <USB_CoreReset>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	73fb      	strb	r3, [r7, #15]
 8009de0:	e01a      	b.n	8009e18 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f001 faba 	bl	800b368 <USB_CoreReset>
 8009df4:	4603      	mov	r3, r0
 8009df6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d106      	bne.n	8009e0c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	639a      	str	r2, [r3, #56]	; 0x38
 8009e0a:	e005      	b.n	8009e18 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d10b      	bne.n	8009e36 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	f043 0206 	orr.w	r2, r3, #6
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	f043 0220 	orr.w	r2, r3, #32
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3710      	adds	r7, #16
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e42:	b004      	add	sp, #16
 8009e44:	4770      	bx	lr
	...

08009e48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b087      	sub	sp, #28
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	4613      	mov	r3, r2
 8009e54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009e56:	79fb      	ldrb	r3, [r7, #7]
 8009e58:	2b02      	cmp	r3, #2
 8009e5a:	d165      	bne.n	8009f28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	4a41      	ldr	r2, [pc, #260]	; (8009f64 <USB_SetTurnaroundTime+0x11c>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d906      	bls.n	8009e72 <USB_SetTurnaroundTime+0x2a>
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	4a40      	ldr	r2, [pc, #256]	; (8009f68 <USB_SetTurnaroundTime+0x120>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d802      	bhi.n	8009e72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009e6c:	230f      	movs	r3, #15
 8009e6e:	617b      	str	r3, [r7, #20]
 8009e70:	e062      	b.n	8009f38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	4a3c      	ldr	r2, [pc, #240]	; (8009f68 <USB_SetTurnaroundTime+0x120>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d906      	bls.n	8009e88 <USB_SetTurnaroundTime+0x40>
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	4a3b      	ldr	r2, [pc, #236]	; (8009f6c <USB_SetTurnaroundTime+0x124>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d802      	bhi.n	8009e88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009e82:	230e      	movs	r3, #14
 8009e84:	617b      	str	r3, [r7, #20]
 8009e86:	e057      	b.n	8009f38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	4a38      	ldr	r2, [pc, #224]	; (8009f6c <USB_SetTurnaroundTime+0x124>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d906      	bls.n	8009e9e <USB_SetTurnaroundTime+0x56>
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	4a37      	ldr	r2, [pc, #220]	; (8009f70 <USB_SetTurnaroundTime+0x128>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d802      	bhi.n	8009e9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009e98:	230d      	movs	r3, #13
 8009e9a:	617b      	str	r3, [r7, #20]
 8009e9c:	e04c      	b.n	8009f38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	4a33      	ldr	r2, [pc, #204]	; (8009f70 <USB_SetTurnaroundTime+0x128>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d906      	bls.n	8009eb4 <USB_SetTurnaroundTime+0x6c>
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	4a32      	ldr	r2, [pc, #200]	; (8009f74 <USB_SetTurnaroundTime+0x12c>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d802      	bhi.n	8009eb4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009eae:	230c      	movs	r3, #12
 8009eb0:	617b      	str	r3, [r7, #20]
 8009eb2:	e041      	b.n	8009f38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	4a2f      	ldr	r2, [pc, #188]	; (8009f74 <USB_SetTurnaroundTime+0x12c>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d906      	bls.n	8009eca <USB_SetTurnaroundTime+0x82>
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	4a2e      	ldr	r2, [pc, #184]	; (8009f78 <USB_SetTurnaroundTime+0x130>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d802      	bhi.n	8009eca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009ec4:	230b      	movs	r3, #11
 8009ec6:	617b      	str	r3, [r7, #20]
 8009ec8:	e036      	b.n	8009f38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	4a2a      	ldr	r2, [pc, #168]	; (8009f78 <USB_SetTurnaroundTime+0x130>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d906      	bls.n	8009ee0 <USB_SetTurnaroundTime+0x98>
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	4a29      	ldr	r2, [pc, #164]	; (8009f7c <USB_SetTurnaroundTime+0x134>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d802      	bhi.n	8009ee0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009eda:	230a      	movs	r3, #10
 8009edc:	617b      	str	r3, [r7, #20]
 8009ede:	e02b      	b.n	8009f38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	4a26      	ldr	r2, [pc, #152]	; (8009f7c <USB_SetTurnaroundTime+0x134>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d906      	bls.n	8009ef6 <USB_SetTurnaroundTime+0xae>
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	4a25      	ldr	r2, [pc, #148]	; (8009f80 <USB_SetTurnaroundTime+0x138>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d802      	bhi.n	8009ef6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009ef0:	2309      	movs	r3, #9
 8009ef2:	617b      	str	r3, [r7, #20]
 8009ef4:	e020      	b.n	8009f38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	4a21      	ldr	r2, [pc, #132]	; (8009f80 <USB_SetTurnaroundTime+0x138>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d906      	bls.n	8009f0c <USB_SetTurnaroundTime+0xc4>
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	4a20      	ldr	r2, [pc, #128]	; (8009f84 <USB_SetTurnaroundTime+0x13c>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d802      	bhi.n	8009f0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009f06:	2308      	movs	r3, #8
 8009f08:	617b      	str	r3, [r7, #20]
 8009f0a:	e015      	b.n	8009f38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	4a1d      	ldr	r2, [pc, #116]	; (8009f84 <USB_SetTurnaroundTime+0x13c>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d906      	bls.n	8009f22 <USB_SetTurnaroundTime+0xda>
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	4a1c      	ldr	r2, [pc, #112]	; (8009f88 <USB_SetTurnaroundTime+0x140>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d802      	bhi.n	8009f22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009f1c:	2307      	movs	r3, #7
 8009f1e:	617b      	str	r3, [r7, #20]
 8009f20:	e00a      	b.n	8009f38 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009f22:	2306      	movs	r3, #6
 8009f24:	617b      	str	r3, [r7, #20]
 8009f26:	e007      	b.n	8009f38 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009f28:	79fb      	ldrb	r3, [r7, #7]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d102      	bne.n	8009f34 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009f2e:	2309      	movs	r3, #9
 8009f30:	617b      	str	r3, [r7, #20]
 8009f32:	e001      	b.n	8009f38 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009f34:	2309      	movs	r3, #9
 8009f36:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	68da      	ldr	r2, [r3, #12]
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	029b      	lsls	r3, r3, #10
 8009f4c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009f50:	431a      	orrs	r2, r3
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	371c      	adds	r7, #28
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr
 8009f64:	00d8acbf 	.word	0x00d8acbf
 8009f68:	00e4e1bf 	.word	0x00e4e1bf
 8009f6c:	00f423ff 	.word	0x00f423ff
 8009f70:	0106737f 	.word	0x0106737f
 8009f74:	011a499f 	.word	0x011a499f
 8009f78:	01312cff 	.word	0x01312cff
 8009f7c:	014ca43f 	.word	0x014ca43f
 8009f80:	016e35ff 	.word	0x016e35ff
 8009f84:	01a6ab1f 	.word	0x01a6ab1f
 8009f88:	01e847ff 	.word	0x01e847ff

08009f8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	f043 0201 	orr.w	r2, r3, #1
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009fa0:	2300      	movs	r3, #0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	370c      	adds	r7, #12
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr

08009fae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009fae:	b480      	push	{r7}
 8009fb0:	b083      	sub	sp, #12
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	f023 0201 	bic.w	r2, r3, #1
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009fc2:	2300      	movs	r3, #0
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	460b      	mov	r3, r1
 8009fda:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009fe8:	78fb      	ldrb	r3, [r7, #3]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d106      	bne.n	8009ffc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	60da      	str	r2, [r3, #12]
 8009ffa:	e00b      	b.n	800a014 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009ffc:	78fb      	ldrb	r3, [r7, #3]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d106      	bne.n	800a010 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	60da      	str	r2, [r3, #12]
 800a00e:	e001      	b.n	800a014 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a010:	2301      	movs	r3, #1
 800a012:	e003      	b.n	800a01c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a014:	2032      	movs	r0, #50	; 0x32
 800a016:	f7f7 feeb 	bl	8001df0 <HAL_Delay>

  return HAL_OK;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3708      	adds	r7, #8
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a024:	b084      	sub	sp, #16
 800a026:	b580      	push	{r7, lr}
 800a028:	b086      	sub	sp, #24
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
 800a02e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a036:	2300      	movs	r3, #0
 800a038:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a03e:	2300      	movs	r3, #0
 800a040:	613b      	str	r3, [r7, #16]
 800a042:	e009      	b.n	800a058 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	3340      	adds	r3, #64	; 0x40
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	4413      	add	r3, r2
 800a04e:	2200      	movs	r2, #0
 800a050:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	3301      	adds	r3, #1
 800a056:	613b      	str	r3, [r7, #16]
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	2b0e      	cmp	r3, #14
 800a05c:	d9f2      	bls.n	800a044 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a05e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a060:	2b00      	cmp	r3, #0
 800a062:	d11c      	bne.n	800a09e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	68fa      	ldr	r2, [r7, #12]
 800a06e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a072:	f043 0302 	orr.w	r3, r3, #2
 800a076:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a07c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a088:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a094:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	639a      	str	r2, [r3, #56]	; 0x38
 800a09c:	e00b      	b.n	800a0b6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a0bc:	461a      	mov	r2, r3
 800a0be:	2300      	movs	r3, #0
 800a0c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	680b      	ldr	r3, [r1, #0]
 800a0d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d10c      	bne.n	800a0f6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d104      	bne.n	800a0ec <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a0e2:	2100      	movs	r1, #0
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 f949 	bl	800a37c <USB_SetDevSpeed>
 800a0ea:	e008      	b.n	800a0fe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a0ec:	2101      	movs	r1, #1
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 f944 	bl	800a37c <USB_SetDevSpeed>
 800a0f4:	e003      	b.n	800a0fe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a0f6:	2103      	movs	r1, #3
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 f93f 	bl	800a37c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a0fe:	2110      	movs	r1, #16
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 f8f3 	bl	800a2ec <USB_FlushTxFifo>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d001      	beq.n	800a110 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a10c:	2301      	movs	r3, #1
 800a10e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 f911 	bl	800a338 <USB_FlushRxFifo>
 800a116:	4603      	mov	r3, r0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d001      	beq.n	800a120 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a126:	461a      	mov	r2, r3
 800a128:	2300      	movs	r3, #0
 800a12a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a132:	461a      	mov	r2, r3
 800a134:	2300      	movs	r3, #0
 800a136:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a13e:	461a      	mov	r2, r3
 800a140:	2300      	movs	r3, #0
 800a142:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a144:	2300      	movs	r3, #0
 800a146:	613b      	str	r3, [r7, #16]
 800a148:	e043      	b.n	800a1d2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	015a      	lsls	r2, r3, #5
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	4413      	add	r3, r2
 800a152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a15c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a160:	d118      	bne.n	800a194 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d10a      	bne.n	800a17e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	015a      	lsls	r2, r3, #5
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	4413      	add	r3, r2
 800a170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a174:	461a      	mov	r2, r3
 800a176:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a17a:	6013      	str	r3, [r2, #0]
 800a17c:	e013      	b.n	800a1a6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	015a      	lsls	r2, r3, #5
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	4413      	add	r3, r2
 800a186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a18a:	461a      	mov	r2, r3
 800a18c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a190:	6013      	str	r3, [r2, #0]
 800a192:	e008      	b.n	800a1a6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	015a      	lsls	r2, r3, #5
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	4413      	add	r3, r2
 800a19c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	015a      	lsls	r2, r3, #5
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	015a      	lsls	r2, r3, #5
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	4413      	add	r3, r2
 800a1c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a1ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	613b      	str	r3, [r7, #16]
 800a1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d4:	693a      	ldr	r2, [r7, #16]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d3b7      	bcc.n	800a14a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1da:	2300      	movs	r3, #0
 800a1dc:	613b      	str	r3, [r7, #16]
 800a1de:	e043      	b.n	800a268 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	015a      	lsls	r2, r3, #5
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	4413      	add	r3, r2
 800a1e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1f6:	d118      	bne.n	800a22a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d10a      	bne.n	800a214 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	015a      	lsls	r2, r3, #5
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	4413      	add	r3, r2
 800a206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a20a:	461a      	mov	r2, r3
 800a20c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a210:	6013      	str	r3, [r2, #0]
 800a212:	e013      	b.n	800a23c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	015a      	lsls	r2, r3, #5
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	4413      	add	r3, r2
 800a21c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a220:	461a      	mov	r2, r3
 800a222:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a226:	6013      	str	r3, [r2, #0]
 800a228:	e008      	b.n	800a23c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	015a      	lsls	r2, r3, #5
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	4413      	add	r3, r2
 800a232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a236:	461a      	mov	r2, r3
 800a238:	2300      	movs	r3, #0
 800a23a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	015a      	lsls	r2, r3, #5
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	4413      	add	r3, r2
 800a244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a248:	461a      	mov	r2, r3
 800a24a:	2300      	movs	r3, #0
 800a24c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	015a      	lsls	r2, r3, #5
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	4413      	add	r3, r2
 800a256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a25a:	461a      	mov	r2, r3
 800a25c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a260:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	3301      	adds	r3, #1
 800a266:	613b      	str	r3, [r7, #16]
 800a268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26a:	693a      	ldr	r2, [r7, #16]
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d3b7      	bcc.n	800a1e0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a27e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a282:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2200      	movs	r2, #0
 800a288:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a290:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a294:	2b00      	cmp	r3, #0
 800a296:	d105      	bne.n	800a2a4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	699b      	ldr	r3, [r3, #24]
 800a29c:	f043 0210 	orr.w	r2, r3, #16
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	699a      	ldr	r2, [r3, #24]
 800a2a8:	4b0f      	ldr	r3, [pc, #60]	; (800a2e8 <USB_DevInit+0x2c4>)
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a2b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d005      	beq.n	800a2c2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	699b      	ldr	r3, [r3, #24]
 800a2ba:	f043 0208 	orr.w	r2, r3, #8
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a2c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d107      	bne.n	800a2d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	699b      	ldr	r3, [r3, #24]
 800a2cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a2d0:	f043 0304 	orr.w	r3, r3, #4
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a2d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3718      	adds	r7, #24
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a2e4:	b004      	add	sp, #16
 800a2e6:	4770      	bx	lr
 800a2e8:	803c3800 	.word	0x803c3800

0800a2ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b085      	sub	sp, #20
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	019b      	lsls	r3, r3, #6
 800a2fe:	f043 0220 	orr.w	r2, r3, #32
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	3301      	adds	r3, #1
 800a30a:	60fb      	str	r3, [r7, #12]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	4a09      	ldr	r2, [pc, #36]	; (800a334 <USB_FlushTxFifo+0x48>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d901      	bls.n	800a318 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a314:	2303      	movs	r3, #3
 800a316:	e006      	b.n	800a326 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	f003 0320 	and.w	r3, r3, #32
 800a320:	2b20      	cmp	r3, #32
 800a322:	d0f0      	beq.n	800a306 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a324:	2300      	movs	r3, #0
}
 800a326:	4618      	mov	r0, r3
 800a328:	3714      	adds	r7, #20
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr
 800a332:	bf00      	nop
 800a334:	00030d40 	.word	0x00030d40

0800a338 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a340:	2300      	movs	r3, #0
 800a342:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2210      	movs	r2, #16
 800a348:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	3301      	adds	r3, #1
 800a34e:	60fb      	str	r3, [r7, #12]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	4a09      	ldr	r2, [pc, #36]	; (800a378 <USB_FlushRxFifo+0x40>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d901      	bls.n	800a35c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a358:	2303      	movs	r3, #3
 800a35a:	e006      	b.n	800a36a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	691b      	ldr	r3, [r3, #16]
 800a360:	f003 0310 	and.w	r3, r3, #16
 800a364:	2b10      	cmp	r3, #16
 800a366:	d0f0      	beq.n	800a34a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a368:	2300      	movs	r3, #0
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3714      	adds	r7, #20
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr
 800a376:	bf00      	nop
 800a378:	00030d40 	.word	0x00030d40

0800a37c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	460b      	mov	r3, r1
 800a386:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	78fb      	ldrb	r3, [r7, #3]
 800a396:	68f9      	ldr	r1, [r7, #12]
 800a398:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a39c:	4313      	orrs	r3, r2
 800a39e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3714      	adds	r7, #20
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr

0800a3ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a3ae:	b480      	push	{r7}
 800a3b0:	b087      	sub	sp, #28
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	f003 0306 	and.w	r3, r3, #6
 800a3c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d102      	bne.n	800a3d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	75fb      	strb	r3, [r7, #23]
 800a3d2:	e00a      	b.n	800a3ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2b02      	cmp	r3, #2
 800a3d8:	d002      	beq.n	800a3e0 <USB_GetDevSpeed+0x32>
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2b06      	cmp	r3, #6
 800a3de:	d102      	bne.n	800a3e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a3e0:	2302      	movs	r3, #2
 800a3e2:	75fb      	strb	r3, [r7, #23]
 800a3e4:	e001      	b.n	800a3ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a3e6:	230f      	movs	r3, #15
 800a3e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a3ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	371c      	adds	r7, #28
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b085      	sub	sp, #20
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	785b      	ldrb	r3, [r3, #1]
 800a410:	2b01      	cmp	r3, #1
 800a412:	d13a      	bne.n	800a48a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a41a:	69da      	ldr	r2, [r3, #28]
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	f003 030f 	and.w	r3, r3, #15
 800a424:	2101      	movs	r1, #1
 800a426:	fa01 f303 	lsl.w	r3, r1, r3
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	68f9      	ldr	r1, [r7, #12]
 800a42e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a432:	4313      	orrs	r3, r2
 800a434:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	015a      	lsls	r2, r3, #5
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	4413      	add	r3, r2
 800a43e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d155      	bne.n	800a4f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	015a      	lsls	r2, r3, #5
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	4413      	add	r3, r2
 800a454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	78db      	ldrb	r3, [r3, #3]
 800a466:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a468:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	059b      	lsls	r3, r3, #22
 800a46e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a470:	4313      	orrs	r3, r2
 800a472:	68ba      	ldr	r2, [r7, #8]
 800a474:	0151      	lsls	r1, r2, #5
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	440a      	add	r2, r1
 800a47a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a47e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a486:	6013      	str	r3, [r2, #0]
 800a488:	e036      	b.n	800a4f8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a490:	69da      	ldr	r2, [r3, #28]
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	f003 030f 	and.w	r3, r3, #15
 800a49a:	2101      	movs	r1, #1
 800a49c:	fa01 f303 	lsl.w	r3, r1, r3
 800a4a0:	041b      	lsls	r3, r3, #16
 800a4a2:	68f9      	ldr	r1, [r7, #12]
 800a4a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	015a      	lsls	r2, r3, #5
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d11a      	bne.n	800a4f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	015a      	lsls	r2, r3, #5
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	4413      	add	r3, r2
 800a4ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	78db      	ldrb	r3, [r3, #3]
 800a4dc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a4de:	430b      	orrs	r3, r1
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	0151      	lsls	r1, r2, #5
 800a4e6:	68fa      	ldr	r2, [r7, #12]
 800a4e8:	440a      	add	r2, r1
 800a4ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4f6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3714      	adds	r7, #20
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr
	...

0800a508 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a508:	b480      	push	{r7}
 800a50a:	b085      	sub	sp, #20
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	785b      	ldrb	r3, [r3, #1]
 800a520:	2b01      	cmp	r3, #1
 800a522:	d161      	bne.n	800a5e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	015a      	lsls	r2, r3, #5
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	4413      	add	r3, r2
 800a52c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a536:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a53a:	d11f      	bne.n	800a57c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	015a      	lsls	r2, r3, #5
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	4413      	add	r3, r2
 800a544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	68ba      	ldr	r2, [r7, #8]
 800a54c:	0151      	lsls	r1, r2, #5
 800a54e:	68fa      	ldr	r2, [r7, #12]
 800a550:	440a      	add	r2, r1
 800a552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a556:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a55a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	015a      	lsls	r2, r3, #5
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	4413      	add	r3, r2
 800a564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	68ba      	ldr	r2, [r7, #8]
 800a56c:	0151      	lsls	r1, r2, #5
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	440a      	add	r2, r1
 800a572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a576:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a57a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a582:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	f003 030f 	and.w	r3, r3, #15
 800a58c:	2101      	movs	r1, #1
 800a58e:	fa01 f303 	lsl.w	r3, r1, r3
 800a592:	b29b      	uxth	r3, r3
 800a594:	43db      	mvns	r3, r3
 800a596:	68f9      	ldr	r1, [r7, #12]
 800a598:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a59c:	4013      	ands	r3, r2
 800a59e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5a6:	69da      	ldr	r2, [r3, #28]
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	f003 030f 	and.w	r3, r3, #15
 800a5b0:	2101      	movs	r1, #1
 800a5b2:	fa01 f303 	lsl.w	r3, r1, r3
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	43db      	mvns	r3, r3
 800a5ba:	68f9      	ldr	r1, [r7, #12]
 800a5bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a5c0:	4013      	ands	r3, r2
 800a5c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	015a      	lsls	r2, r3, #5
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	4413      	add	r3, r2
 800a5cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	0159      	lsls	r1, r3, #5
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	440b      	add	r3, r1
 800a5da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5de:	4619      	mov	r1, r3
 800a5e0:	4b35      	ldr	r3, [pc, #212]	; (800a6b8 <USB_DeactivateEndpoint+0x1b0>)
 800a5e2:	4013      	ands	r3, r2
 800a5e4:	600b      	str	r3, [r1, #0]
 800a5e6:	e060      	b.n	800a6aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	015a      	lsls	r2, r3, #5
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5fe:	d11f      	bne.n	800a640 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	015a      	lsls	r2, r3, #5
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	4413      	add	r3, r2
 800a608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	68ba      	ldr	r2, [r7, #8]
 800a610:	0151      	lsls	r1, r2, #5
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	440a      	add	r2, r1
 800a616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a61a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a61e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	015a      	lsls	r2, r3, #5
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	4413      	add	r3, r2
 800a628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	0151      	lsls	r1, r2, #5
 800a632:	68fa      	ldr	r2, [r7, #12]
 800a634:	440a      	add	r2, r1
 800a636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a63a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a63e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a646:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	f003 030f 	and.w	r3, r3, #15
 800a650:	2101      	movs	r1, #1
 800a652:	fa01 f303 	lsl.w	r3, r1, r3
 800a656:	041b      	lsls	r3, r3, #16
 800a658:	43db      	mvns	r3, r3
 800a65a:	68f9      	ldr	r1, [r7, #12]
 800a65c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a660:	4013      	ands	r3, r2
 800a662:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a66a:	69da      	ldr	r2, [r3, #28]
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	f003 030f 	and.w	r3, r3, #15
 800a674:	2101      	movs	r1, #1
 800a676:	fa01 f303 	lsl.w	r3, r1, r3
 800a67a:	041b      	lsls	r3, r3, #16
 800a67c:	43db      	mvns	r3, r3
 800a67e:	68f9      	ldr	r1, [r7, #12]
 800a680:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a684:	4013      	ands	r3, r2
 800a686:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	015a      	lsls	r2, r3, #5
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	4413      	add	r3, r2
 800a690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	0159      	lsls	r1, r3, #5
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	440b      	add	r3, r1
 800a69e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	4b05      	ldr	r3, [pc, #20]	; (800a6bc <USB_DeactivateEndpoint+0x1b4>)
 800a6a6:	4013      	ands	r3, r2
 800a6a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a6aa:	2300      	movs	r3, #0
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3714      	adds	r7, #20
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr
 800a6b8:	ec337800 	.word	0xec337800
 800a6bc:	eff37800 	.word	0xeff37800

0800a6c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b08a      	sub	sp, #40	; 0x28
 800a6c4:	af02      	add	r7, sp, #8
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	4613      	mov	r3, r2
 800a6cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	785b      	ldrb	r3, [r3, #1]
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	f040 815c 	bne.w	800a99a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	695b      	ldr	r3, [r3, #20]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d132      	bne.n	800a750 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	015a      	lsls	r2, r3, #5
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6f6:	691b      	ldr	r3, [r3, #16]
 800a6f8:	69ba      	ldr	r2, [r7, #24]
 800a6fa:	0151      	lsls	r1, r2, #5
 800a6fc:	69fa      	ldr	r2, [r7, #28]
 800a6fe:	440a      	add	r2, r1
 800a700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a704:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a708:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a70c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a70e:	69bb      	ldr	r3, [r7, #24]
 800a710:	015a      	lsls	r2, r3, #5
 800a712:	69fb      	ldr	r3, [r7, #28]
 800a714:	4413      	add	r3, r2
 800a716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a71a:	691b      	ldr	r3, [r3, #16]
 800a71c:	69ba      	ldr	r2, [r7, #24]
 800a71e:	0151      	lsls	r1, r2, #5
 800a720:	69fa      	ldr	r2, [r7, #28]
 800a722:	440a      	add	r2, r1
 800a724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a728:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a72c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a72e:	69bb      	ldr	r3, [r7, #24]
 800a730:	015a      	lsls	r2, r3, #5
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	4413      	add	r3, r2
 800a736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a73a:	691b      	ldr	r3, [r3, #16]
 800a73c:	69ba      	ldr	r2, [r7, #24]
 800a73e:	0151      	lsls	r1, r2, #5
 800a740:	69fa      	ldr	r2, [r7, #28]
 800a742:	440a      	add	r2, r1
 800a744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a748:	0cdb      	lsrs	r3, r3, #19
 800a74a:	04db      	lsls	r3, r3, #19
 800a74c:	6113      	str	r3, [r2, #16]
 800a74e:	e074      	b.n	800a83a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a750:	69bb      	ldr	r3, [r7, #24]
 800a752:	015a      	lsls	r2, r3, #5
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	4413      	add	r3, r2
 800a758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a75c:	691b      	ldr	r3, [r3, #16]
 800a75e:	69ba      	ldr	r2, [r7, #24]
 800a760:	0151      	lsls	r1, r2, #5
 800a762:	69fa      	ldr	r2, [r7, #28]
 800a764:	440a      	add	r2, r1
 800a766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a76a:	0cdb      	lsrs	r3, r3, #19
 800a76c:	04db      	lsls	r3, r3, #19
 800a76e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	015a      	lsls	r2, r3, #5
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	4413      	add	r3, r2
 800a778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a77c:	691b      	ldr	r3, [r3, #16]
 800a77e:	69ba      	ldr	r2, [r7, #24]
 800a780:	0151      	lsls	r1, r2, #5
 800a782:	69fa      	ldr	r2, [r7, #28]
 800a784:	440a      	add	r2, r1
 800a786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a78a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a78e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a792:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a794:	69bb      	ldr	r3, [r7, #24]
 800a796:	015a      	lsls	r2, r3, #5
 800a798:	69fb      	ldr	r3, [r7, #28]
 800a79a:	4413      	add	r3, r2
 800a79c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7a0:	691a      	ldr	r2, [r3, #16]
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	6959      	ldr	r1, [r3, #20]
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	440b      	add	r3, r1
 800a7ac:	1e59      	subs	r1, r3, #1
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	fbb1 f3f3 	udiv	r3, r1, r3
 800a7b6:	04d9      	lsls	r1, r3, #19
 800a7b8:	4b9d      	ldr	r3, [pc, #628]	; (800aa30 <USB_EPStartXfer+0x370>)
 800a7ba:	400b      	ands	r3, r1
 800a7bc:	69b9      	ldr	r1, [r7, #24]
 800a7be:	0148      	lsls	r0, r1, #5
 800a7c0:	69f9      	ldr	r1, [r7, #28]
 800a7c2:	4401      	add	r1, r0
 800a7c4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	015a      	lsls	r2, r3, #5
 800a7d0:	69fb      	ldr	r3, [r7, #28]
 800a7d2:	4413      	add	r3, r2
 800a7d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7d8:	691a      	ldr	r2, [r3, #16]
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	695b      	ldr	r3, [r3, #20]
 800a7de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7e2:	69b9      	ldr	r1, [r7, #24]
 800a7e4:	0148      	lsls	r0, r1, #5
 800a7e6:	69f9      	ldr	r1, [r7, #28]
 800a7e8:	4401      	add	r1, r0
 800a7ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	78db      	ldrb	r3, [r3, #3]
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d11f      	bne.n	800a83a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	015a      	lsls	r2, r3, #5
 800a7fe:	69fb      	ldr	r3, [r7, #28]
 800a800:	4413      	add	r3, r2
 800a802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a806:	691b      	ldr	r3, [r3, #16]
 800a808:	69ba      	ldr	r2, [r7, #24]
 800a80a:	0151      	lsls	r1, r2, #5
 800a80c:	69fa      	ldr	r2, [r7, #28]
 800a80e:	440a      	add	r2, r1
 800a810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a814:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a818:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a81a:	69bb      	ldr	r3, [r7, #24]
 800a81c:	015a      	lsls	r2, r3, #5
 800a81e:	69fb      	ldr	r3, [r7, #28]
 800a820:	4413      	add	r3, r2
 800a822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a826:	691b      	ldr	r3, [r3, #16]
 800a828:	69ba      	ldr	r2, [r7, #24]
 800a82a:	0151      	lsls	r1, r2, #5
 800a82c:	69fa      	ldr	r2, [r7, #28]
 800a82e:	440a      	add	r2, r1
 800a830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a834:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a838:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a83a:	79fb      	ldrb	r3, [r7, #7]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d14b      	bne.n	800a8d8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	691b      	ldr	r3, [r3, #16]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d009      	beq.n	800a85c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	015a      	lsls	r2, r3, #5
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	4413      	add	r3, r2
 800a850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a854:	461a      	mov	r2, r3
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	691b      	ldr	r3, [r3, #16]
 800a85a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	78db      	ldrb	r3, [r3, #3]
 800a860:	2b01      	cmp	r3, #1
 800a862:	d128      	bne.n	800a8b6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a870:	2b00      	cmp	r3, #0
 800a872:	d110      	bne.n	800a896 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a874:	69bb      	ldr	r3, [r7, #24]
 800a876:	015a      	lsls	r2, r3, #5
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	4413      	add	r3, r2
 800a87c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	69ba      	ldr	r2, [r7, #24]
 800a884:	0151      	lsls	r1, r2, #5
 800a886:	69fa      	ldr	r2, [r7, #28]
 800a888:	440a      	add	r2, r1
 800a88a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a88e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a892:	6013      	str	r3, [r2, #0]
 800a894:	e00f      	b.n	800a8b6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a896:	69bb      	ldr	r3, [r7, #24]
 800a898:	015a      	lsls	r2, r3, #5
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	4413      	add	r3, r2
 800a89e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	69ba      	ldr	r2, [r7, #24]
 800a8a6:	0151      	lsls	r1, r2, #5
 800a8a8:	69fa      	ldr	r2, [r7, #28]
 800a8aa:	440a      	add	r2, r1
 800a8ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8b4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a8b6:	69bb      	ldr	r3, [r7, #24]
 800a8b8:	015a      	lsls	r2, r3, #5
 800a8ba:	69fb      	ldr	r3, [r7, #28]
 800a8bc:	4413      	add	r3, r2
 800a8be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	69ba      	ldr	r2, [r7, #24]
 800a8c6:	0151      	lsls	r1, r2, #5
 800a8c8:	69fa      	ldr	r2, [r7, #28]
 800a8ca:	440a      	add	r2, r1
 800a8cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a8d4:	6013      	str	r3, [r2, #0]
 800a8d6:	e12f      	b.n	800ab38 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a8d8:	69bb      	ldr	r3, [r7, #24]
 800a8da:	015a      	lsls	r2, r3, #5
 800a8dc:	69fb      	ldr	r3, [r7, #28]
 800a8de:	4413      	add	r3, r2
 800a8e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	69ba      	ldr	r2, [r7, #24]
 800a8e8:	0151      	lsls	r1, r2, #5
 800a8ea:	69fa      	ldr	r2, [r7, #28]
 800a8ec:	440a      	add	r2, r1
 800a8ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a8f6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	78db      	ldrb	r3, [r3, #3]
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d015      	beq.n	800a92c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	695b      	ldr	r3, [r3, #20]
 800a904:	2b00      	cmp	r3, #0
 800a906:	f000 8117 	beq.w	800ab38 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a90a:	69fb      	ldr	r3, [r7, #28]
 800a90c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	f003 030f 	and.w	r3, r3, #15
 800a91a:	2101      	movs	r1, #1
 800a91c:	fa01 f303 	lsl.w	r3, r1, r3
 800a920:	69f9      	ldr	r1, [r7, #28]
 800a922:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a926:	4313      	orrs	r3, r2
 800a928:	634b      	str	r3, [r1, #52]	; 0x34
 800a92a:	e105      	b.n	800ab38 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d110      	bne.n	800a95e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a93c:	69bb      	ldr	r3, [r7, #24]
 800a93e:	015a      	lsls	r2, r3, #5
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	4413      	add	r3, r2
 800a944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	69ba      	ldr	r2, [r7, #24]
 800a94c:	0151      	lsls	r1, r2, #5
 800a94e:	69fa      	ldr	r2, [r7, #28]
 800a950:	440a      	add	r2, r1
 800a952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a956:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a95a:	6013      	str	r3, [r2, #0]
 800a95c:	e00f      	b.n	800a97e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	015a      	lsls	r2, r3, #5
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	4413      	add	r3, r2
 800a966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	69ba      	ldr	r2, [r7, #24]
 800a96e:	0151      	lsls	r1, r2, #5
 800a970:	69fa      	ldr	r2, [r7, #28]
 800a972:	440a      	add	r2, r1
 800a974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a97c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	68d9      	ldr	r1, [r3, #12]
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	781a      	ldrb	r2, [r3, #0]
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	695b      	ldr	r3, [r3, #20]
 800a98a:	b298      	uxth	r0, r3
 800a98c:	79fb      	ldrb	r3, [r7, #7]
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	4603      	mov	r3, r0
 800a992:	68f8      	ldr	r0, [r7, #12]
 800a994:	f000 fa2b 	bl	800adee <USB_WritePacket>
 800a998:	e0ce      	b.n	800ab38 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a99a:	69bb      	ldr	r3, [r7, #24]
 800a99c:	015a      	lsls	r2, r3, #5
 800a99e:	69fb      	ldr	r3, [r7, #28]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9a6:	691b      	ldr	r3, [r3, #16]
 800a9a8:	69ba      	ldr	r2, [r7, #24]
 800a9aa:	0151      	lsls	r1, r2, #5
 800a9ac:	69fa      	ldr	r2, [r7, #28]
 800a9ae:	440a      	add	r2, r1
 800a9b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9b4:	0cdb      	lsrs	r3, r3, #19
 800a9b6:	04db      	lsls	r3, r3, #19
 800a9b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a9ba:	69bb      	ldr	r3, [r7, #24]
 800a9bc:	015a      	lsls	r2, r3, #5
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	4413      	add	r3, r2
 800a9c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9c6:	691b      	ldr	r3, [r3, #16]
 800a9c8:	69ba      	ldr	r2, [r7, #24]
 800a9ca:	0151      	lsls	r1, r2, #5
 800a9cc:	69fa      	ldr	r2, [r7, #28]
 800a9ce:	440a      	add	r2, r1
 800a9d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a9d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a9dc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	695b      	ldr	r3, [r3, #20]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d126      	bne.n	800aa34 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a9e6:	69bb      	ldr	r3, [r7, #24]
 800a9e8:	015a      	lsls	r2, r3, #5
 800a9ea:	69fb      	ldr	r3, [r7, #28]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9f2:	691a      	ldr	r2, [r3, #16]
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9fc:	69b9      	ldr	r1, [r7, #24]
 800a9fe:	0148      	lsls	r0, r1, #5
 800aa00:	69f9      	ldr	r1, [r7, #28]
 800aa02:	4401      	add	r1, r0
 800aa04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa0c:	69bb      	ldr	r3, [r7, #24]
 800aa0e:	015a      	lsls	r2, r3, #5
 800aa10:	69fb      	ldr	r3, [r7, #28]
 800aa12:	4413      	add	r3, r2
 800aa14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa18:	691b      	ldr	r3, [r3, #16]
 800aa1a:	69ba      	ldr	r2, [r7, #24]
 800aa1c:	0151      	lsls	r1, r2, #5
 800aa1e:	69fa      	ldr	r2, [r7, #28]
 800aa20:	440a      	add	r2, r1
 800aa22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa2a:	6113      	str	r3, [r2, #16]
 800aa2c:	e036      	b.n	800aa9c <USB_EPStartXfer+0x3dc>
 800aa2e:	bf00      	nop
 800aa30:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	695a      	ldr	r2, [r3, #20]
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	689b      	ldr	r3, [r3, #8]
 800aa3c:	4413      	add	r3, r2
 800aa3e:	1e5a      	subs	r2, r3, #1
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa48:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	015a      	lsls	r2, r3, #5
 800aa4e:	69fb      	ldr	r3, [r7, #28]
 800aa50:	4413      	add	r3, r2
 800aa52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa56:	691a      	ldr	r2, [r3, #16]
 800aa58:	8afb      	ldrh	r3, [r7, #22]
 800aa5a:	04d9      	lsls	r1, r3, #19
 800aa5c:	4b39      	ldr	r3, [pc, #228]	; (800ab44 <USB_EPStartXfer+0x484>)
 800aa5e:	400b      	ands	r3, r1
 800aa60:	69b9      	ldr	r1, [r7, #24]
 800aa62:	0148      	lsls	r0, r1, #5
 800aa64:	69f9      	ldr	r1, [r7, #28]
 800aa66:	4401      	add	r1, r0
 800aa68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	015a      	lsls	r2, r3, #5
 800aa74:	69fb      	ldr	r3, [r7, #28]
 800aa76:	4413      	add	r3, r2
 800aa78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa7c:	691a      	ldr	r2, [r3, #16]
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	689b      	ldr	r3, [r3, #8]
 800aa82:	8af9      	ldrh	r1, [r7, #22]
 800aa84:	fb01 f303 	mul.w	r3, r1, r3
 800aa88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa8c:	69b9      	ldr	r1, [r7, #24]
 800aa8e:	0148      	lsls	r0, r1, #5
 800aa90:	69f9      	ldr	r1, [r7, #28]
 800aa92:	4401      	add	r1, r0
 800aa94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800aa9c:	79fb      	ldrb	r3, [r7, #7]
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d10d      	bne.n	800aabe <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	68db      	ldr	r3, [r3, #12]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d009      	beq.n	800aabe <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	68d9      	ldr	r1, [r3, #12]
 800aaae:	69bb      	ldr	r3, [r7, #24]
 800aab0:	015a      	lsls	r2, r3, #5
 800aab2:	69fb      	ldr	r3, [r7, #28]
 800aab4:	4413      	add	r3, r2
 800aab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaba:	460a      	mov	r2, r1
 800aabc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	78db      	ldrb	r3, [r3, #3]
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d128      	bne.n	800ab18 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aac6:	69fb      	ldr	r3, [r7, #28]
 800aac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aacc:	689b      	ldr	r3, [r3, #8]
 800aace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d110      	bne.n	800aaf8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	015a      	lsls	r2, r3, #5
 800aada:	69fb      	ldr	r3, [r7, #28]
 800aadc:	4413      	add	r3, r2
 800aade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	69ba      	ldr	r2, [r7, #24]
 800aae6:	0151      	lsls	r1, r2, #5
 800aae8:	69fa      	ldr	r2, [r7, #28]
 800aaea:	440a      	add	r2, r1
 800aaec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaf0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aaf4:	6013      	str	r3, [r2, #0]
 800aaf6:	e00f      	b.n	800ab18 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	015a      	lsls	r2, r3, #5
 800aafc:	69fb      	ldr	r3, [r7, #28]
 800aafe:	4413      	add	r3, r2
 800ab00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	69ba      	ldr	r2, [r7, #24]
 800ab08:	0151      	lsls	r1, r2, #5
 800ab0a:	69fa      	ldr	r2, [r7, #28]
 800ab0c:	440a      	add	r2, r1
 800ab0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab16:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	015a      	lsls	r2, r3, #5
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	4413      	add	r3, r2
 800ab20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	69ba      	ldr	r2, [r7, #24]
 800ab28:	0151      	lsls	r1, r2, #5
 800ab2a:	69fa      	ldr	r2, [r7, #28]
 800ab2c:	440a      	add	r2, r1
 800ab2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3720      	adds	r7, #32
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop
 800ab44:	1ff80000 	.word	0x1ff80000

0800ab48 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b087      	sub	sp, #28
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	4613      	mov	r3, r2
 800ab54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	785b      	ldrb	r3, [r3, #1]
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	f040 80cd 	bne.w	800ad04 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	695b      	ldr	r3, [r3, #20]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d132      	bne.n	800abd8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	015a      	lsls	r2, r3, #5
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	4413      	add	r3, r2
 800ab7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab7e:	691b      	ldr	r3, [r3, #16]
 800ab80:	693a      	ldr	r2, [r7, #16]
 800ab82:	0151      	lsls	r1, r2, #5
 800ab84:	697a      	ldr	r2, [r7, #20]
 800ab86:	440a      	add	r2, r1
 800ab88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ab90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ab94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	015a      	lsls	r2, r3, #5
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	693a      	ldr	r2, [r7, #16]
 800aba6:	0151      	lsls	r1, r2, #5
 800aba8:	697a      	ldr	r2, [r7, #20]
 800abaa:	440a      	add	r2, r1
 800abac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800abb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	015a      	lsls	r2, r3, #5
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	4413      	add	r3, r2
 800abbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abc2:	691b      	ldr	r3, [r3, #16]
 800abc4:	693a      	ldr	r2, [r7, #16]
 800abc6:	0151      	lsls	r1, r2, #5
 800abc8:	697a      	ldr	r2, [r7, #20]
 800abca:	440a      	add	r2, r1
 800abcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abd0:	0cdb      	lsrs	r3, r3, #19
 800abd2:	04db      	lsls	r3, r3, #19
 800abd4:	6113      	str	r3, [r2, #16]
 800abd6:	e04e      	b.n	800ac76 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	015a      	lsls	r2, r3, #5
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	4413      	add	r3, r2
 800abe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abe4:	691b      	ldr	r3, [r3, #16]
 800abe6:	693a      	ldr	r2, [r7, #16]
 800abe8:	0151      	lsls	r1, r2, #5
 800abea:	697a      	ldr	r2, [r7, #20]
 800abec:	440a      	add	r2, r1
 800abee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abf2:	0cdb      	lsrs	r3, r3, #19
 800abf4:	04db      	lsls	r3, r3, #19
 800abf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	015a      	lsls	r2, r3, #5
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	4413      	add	r3, r2
 800ac00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac04:	691b      	ldr	r3, [r3, #16]
 800ac06:	693a      	ldr	r2, [r7, #16]
 800ac08:	0151      	lsls	r1, r2, #5
 800ac0a:	697a      	ldr	r2, [r7, #20]
 800ac0c:	440a      	add	r2, r1
 800ac0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac12:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ac16:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ac1a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	695a      	ldr	r2, [r3, #20]
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d903      	bls.n	800ac30 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	689a      	ldr	r2, [r3, #8]
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	015a      	lsls	r2, r3, #5
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	4413      	add	r3, r2
 800ac38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac3c:	691b      	ldr	r3, [r3, #16]
 800ac3e:	693a      	ldr	r2, [r7, #16]
 800ac40:	0151      	lsls	r1, r2, #5
 800ac42:	697a      	ldr	r2, [r7, #20]
 800ac44:	440a      	add	r2, r1
 800ac46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	015a      	lsls	r2, r3, #5
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	4413      	add	r3, r2
 800ac58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac5c:	691a      	ldr	r2, [r3, #16]
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	695b      	ldr	r3, [r3, #20]
 800ac62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac66:	6939      	ldr	r1, [r7, #16]
 800ac68:	0148      	lsls	r0, r1, #5
 800ac6a:	6979      	ldr	r1, [r7, #20]
 800ac6c:	4401      	add	r1, r0
 800ac6e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ac72:	4313      	orrs	r3, r2
 800ac74:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ac76:	79fb      	ldrb	r3, [r7, #7]
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d11e      	bne.n	800acba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	691b      	ldr	r3, [r3, #16]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d009      	beq.n	800ac98 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	015a      	lsls	r2, r3, #5
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	4413      	add	r3, r2
 800ac8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac90:	461a      	mov	r2, r3
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	691b      	ldr	r3, [r3, #16]
 800ac96:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	015a      	lsls	r2, r3, #5
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	4413      	add	r3, r2
 800aca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	693a      	ldr	r2, [r7, #16]
 800aca8:	0151      	lsls	r1, r2, #5
 800acaa:	697a      	ldr	r2, [r7, #20]
 800acac:	440a      	add	r2, r1
 800acae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800acb6:	6013      	str	r3, [r2, #0]
 800acb8:	e092      	b.n	800ade0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	015a      	lsls	r2, r3, #5
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	4413      	add	r3, r2
 800acc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	693a      	ldr	r2, [r7, #16]
 800acca:	0151      	lsls	r1, r2, #5
 800accc:	697a      	ldr	r2, [r7, #20]
 800acce:	440a      	add	r2, r1
 800acd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800acd8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	695b      	ldr	r3, [r3, #20]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d07e      	beq.n	800ade0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ace8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	f003 030f 	and.w	r3, r3, #15
 800acf2:	2101      	movs	r1, #1
 800acf4:	fa01 f303 	lsl.w	r3, r1, r3
 800acf8:	6979      	ldr	r1, [r7, #20]
 800acfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800acfe:	4313      	orrs	r3, r2
 800ad00:	634b      	str	r3, [r1, #52]	; 0x34
 800ad02:	e06d      	b.n	800ade0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	015a      	lsls	r2, r3, #5
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	4413      	add	r3, r2
 800ad0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	693a      	ldr	r2, [r7, #16]
 800ad14:	0151      	lsls	r1, r2, #5
 800ad16:	697a      	ldr	r2, [r7, #20]
 800ad18:	440a      	add	r2, r1
 800ad1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad1e:	0cdb      	lsrs	r3, r3, #19
 800ad20:	04db      	lsls	r3, r3, #19
 800ad22:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	015a      	lsls	r2, r3, #5
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	4413      	add	r3, r2
 800ad2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad30:	691b      	ldr	r3, [r3, #16]
 800ad32:	693a      	ldr	r2, [r7, #16]
 800ad34:	0151      	lsls	r1, r2, #5
 800ad36:	697a      	ldr	r2, [r7, #20]
 800ad38:	440a      	add	r2, r1
 800ad3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ad42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ad46:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	695b      	ldr	r3, [r3, #20]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d003      	beq.n	800ad58 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	689a      	ldr	r2, [r3, #8]
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	015a      	lsls	r2, r3, #5
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	4413      	add	r3, r2
 800ad60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad64:	691b      	ldr	r3, [r3, #16]
 800ad66:	693a      	ldr	r2, [r7, #16]
 800ad68:	0151      	lsls	r1, r2, #5
 800ad6a:	697a      	ldr	r2, [r7, #20]
 800ad6c:	440a      	add	r2, r1
 800ad6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad76:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	015a      	lsls	r2, r3, #5
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	4413      	add	r3, r2
 800ad80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad84:	691a      	ldr	r2, [r3, #16]
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	689b      	ldr	r3, [r3, #8]
 800ad8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad8e:	6939      	ldr	r1, [r7, #16]
 800ad90:	0148      	lsls	r0, r1, #5
 800ad92:	6979      	ldr	r1, [r7, #20]
 800ad94:	4401      	add	r1, r0
 800ad96:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ad9e:	79fb      	ldrb	r3, [r7, #7]
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d10d      	bne.n	800adc0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	68db      	ldr	r3, [r3, #12]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d009      	beq.n	800adc0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	68d9      	ldr	r1, [r3, #12]
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	015a      	lsls	r2, r3, #5
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	4413      	add	r3, r2
 800adb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adbc:	460a      	mov	r2, r1
 800adbe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	015a      	lsls	r2, r3, #5
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	4413      	add	r3, r2
 800adc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	693a      	ldr	r2, [r7, #16]
 800add0:	0151      	lsls	r1, r2, #5
 800add2:	697a      	ldr	r2, [r7, #20]
 800add4:	440a      	add	r2, r1
 800add6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800adde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ade0:	2300      	movs	r3, #0
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	371c      	adds	r7, #28
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr

0800adee <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800adee:	b480      	push	{r7}
 800adf0:	b089      	sub	sp, #36	; 0x24
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	60f8      	str	r0, [r7, #12]
 800adf6:	60b9      	str	r1, [r7, #8]
 800adf8:	4611      	mov	r1, r2
 800adfa:	461a      	mov	r2, r3
 800adfc:	460b      	mov	r3, r1
 800adfe:	71fb      	strb	r3, [r7, #7]
 800ae00:	4613      	mov	r3, r2
 800ae02:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800ae0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d11a      	bne.n	800ae4a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ae14:	88bb      	ldrh	r3, [r7, #4]
 800ae16:	3303      	adds	r3, #3
 800ae18:	089b      	lsrs	r3, r3, #2
 800ae1a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	61bb      	str	r3, [r7, #24]
 800ae20:	e00f      	b.n	800ae42 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ae22:	79fb      	ldrb	r3, [r7, #7]
 800ae24:	031a      	lsls	r2, r3, #12
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	4413      	add	r3, r2
 800ae2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae2e:	461a      	mov	r2, r3
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ae36:	69fb      	ldr	r3, [r7, #28]
 800ae38:	3304      	adds	r3, #4
 800ae3a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ae3c:	69bb      	ldr	r3, [r7, #24]
 800ae3e:	3301      	adds	r3, #1
 800ae40:	61bb      	str	r3, [r7, #24]
 800ae42:	69ba      	ldr	r2, [r7, #24]
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d3eb      	bcc.n	800ae22 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ae4a:	2300      	movs	r3, #0
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3724      	adds	r7, #36	; 0x24
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b089      	sub	sp, #36	; 0x24
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	60b9      	str	r1, [r7, #8]
 800ae62:	4613      	mov	r3, r2
 800ae64:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ae6e:	88fb      	ldrh	r3, [r7, #6]
 800ae70:	3303      	adds	r3, #3
 800ae72:	089b      	lsrs	r3, r3, #2
 800ae74:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ae76:	2300      	movs	r3, #0
 800ae78:	61bb      	str	r3, [r7, #24]
 800ae7a:	e00b      	b.n	800ae94 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	69fb      	ldr	r3, [r7, #28]
 800ae86:	601a      	str	r2, [r3, #0]
    pDest++;
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	3304      	adds	r3, #4
 800ae8c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ae8e:	69bb      	ldr	r3, [r7, #24]
 800ae90:	3301      	adds	r3, #1
 800ae92:	61bb      	str	r3, [r7, #24]
 800ae94:	69ba      	ldr	r2, [r7, #24]
 800ae96:	693b      	ldr	r3, [r7, #16]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d3ef      	bcc.n	800ae7c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ae9c:	69fb      	ldr	r3, [r7, #28]
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3724      	adds	r7, #36	; 0x24
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr

0800aeaa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aeaa:	b480      	push	{r7}
 800aeac:	b085      	sub	sp, #20
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
 800aeb2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	785b      	ldrb	r3, [r3, #1]
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d12c      	bne.n	800af20 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	015a      	lsls	r2, r3, #5
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	4413      	add	r3, r2
 800aece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	db12      	blt.n	800aefe <USB_EPSetStall+0x54>
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d00f      	beq.n	800aefe <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	015a      	lsls	r2, r3, #5
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	4413      	add	r3, r2
 800aee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	68ba      	ldr	r2, [r7, #8]
 800aeee:	0151      	lsls	r1, r2, #5
 800aef0:	68fa      	ldr	r2, [r7, #12]
 800aef2:	440a      	add	r2, r1
 800aef4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aef8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aefc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	015a      	lsls	r2, r3, #5
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	4413      	add	r3, r2
 800af06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	68ba      	ldr	r2, [r7, #8]
 800af0e:	0151      	lsls	r1, r2, #5
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	440a      	add	r2, r1
 800af14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800af1c:	6013      	str	r3, [r2, #0]
 800af1e:	e02b      	b.n	800af78 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	015a      	lsls	r2, r3, #5
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	4413      	add	r3, r2
 800af28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	db12      	blt.n	800af58 <USB_EPSetStall+0xae>
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d00f      	beq.n	800af58 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	015a      	lsls	r2, r3, #5
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	4413      	add	r3, r2
 800af40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68ba      	ldr	r2, [r7, #8]
 800af48:	0151      	lsls	r1, r2, #5
 800af4a:	68fa      	ldr	r2, [r7, #12]
 800af4c:	440a      	add	r2, r1
 800af4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800af56:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	015a      	lsls	r2, r3, #5
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	4413      	add	r3, r2
 800af60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	68ba      	ldr	r2, [r7, #8]
 800af68:	0151      	lsls	r1, r2, #5
 800af6a:	68fa      	ldr	r2, [r7, #12]
 800af6c:	440a      	add	r2, r1
 800af6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800af76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3714      	adds	r7, #20
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr

0800af86 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800af86:	b480      	push	{r7}
 800af88:	b085      	sub	sp, #20
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
 800af8e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	781b      	ldrb	r3, [r3, #0]
 800af98:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	785b      	ldrb	r3, [r3, #1]
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d128      	bne.n	800aff4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	015a      	lsls	r2, r3, #5
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	4413      	add	r3, r2
 800afaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	68ba      	ldr	r2, [r7, #8]
 800afb2:	0151      	lsls	r1, r2, #5
 800afb4:	68fa      	ldr	r2, [r7, #12]
 800afb6:	440a      	add	r2, r1
 800afb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afbc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800afc0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	78db      	ldrb	r3, [r3, #3]
 800afc6:	2b03      	cmp	r3, #3
 800afc8:	d003      	beq.n	800afd2 <USB_EPClearStall+0x4c>
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	78db      	ldrb	r3, [r3, #3]
 800afce:	2b02      	cmp	r3, #2
 800afd0:	d138      	bne.n	800b044 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	015a      	lsls	r2, r3, #5
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	4413      	add	r3, r2
 800afda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	68ba      	ldr	r2, [r7, #8]
 800afe2:	0151      	lsls	r1, r2, #5
 800afe4:	68fa      	ldr	r2, [r7, #12]
 800afe6:	440a      	add	r2, r1
 800afe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aff0:	6013      	str	r3, [r2, #0]
 800aff2:	e027      	b.n	800b044 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	015a      	lsls	r2, r3, #5
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	4413      	add	r3, r2
 800affc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	68ba      	ldr	r2, [r7, #8]
 800b004:	0151      	lsls	r1, r2, #5
 800b006:	68fa      	ldr	r2, [r7, #12]
 800b008:	440a      	add	r2, r1
 800b00a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b00e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b012:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	78db      	ldrb	r3, [r3, #3]
 800b018:	2b03      	cmp	r3, #3
 800b01a:	d003      	beq.n	800b024 <USB_EPClearStall+0x9e>
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	78db      	ldrb	r3, [r3, #3]
 800b020:	2b02      	cmp	r3, #2
 800b022:	d10f      	bne.n	800b044 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	015a      	lsls	r2, r3, #5
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	4413      	add	r3, r2
 800b02c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	68ba      	ldr	r2, [r7, #8]
 800b034:	0151      	lsls	r1, r2, #5
 800b036:	68fa      	ldr	r2, [r7, #12]
 800b038:	440a      	add	r2, r1
 800b03a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b03e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b042:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b044:	2300      	movs	r3, #0
}
 800b046:	4618      	mov	r0, r3
 800b048:	3714      	adds	r7, #20
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr

0800b052 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b052:	b480      	push	{r7}
 800b054:	b085      	sub	sp, #20
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
 800b05a:	460b      	mov	r3, r1
 800b05c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	68fa      	ldr	r2, [r7, #12]
 800b06c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b070:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b074:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b07c:	681a      	ldr	r2, [r3, #0]
 800b07e:	78fb      	ldrb	r3, [r7, #3]
 800b080:	011b      	lsls	r3, r3, #4
 800b082:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b086:	68f9      	ldr	r1, [r7, #12]
 800b088:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b08c:	4313      	orrs	r3, r2
 800b08e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b090:	2300      	movs	r3, #0
}
 800b092:	4618      	mov	r0, r3
 800b094:	3714      	adds	r7, #20
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr

0800b09e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b09e:	b480      	push	{r7}
 800b0a0:	b085      	sub	sp, #20
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	68fa      	ldr	r2, [r7, #12]
 800b0b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b0b8:	f023 0303 	bic.w	r3, r3, #3
 800b0bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b0cc:	f023 0302 	bic.w	r3, r3, #2
 800b0d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b0d2:	2300      	movs	r3, #0
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3714      	adds	r7, #20
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr

0800b0e0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b085      	sub	sp, #20
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	68fa      	ldr	r2, [r7, #12]
 800b0f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b0fa:	f023 0303 	bic.w	r3, r3, #3
 800b0fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	68fa      	ldr	r2, [r7, #12]
 800b10a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b10e:	f043 0302 	orr.w	r3, r3, #2
 800b112:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b114:	2300      	movs	r3, #0
}
 800b116:	4618      	mov	r0, r3
 800b118:	3714      	adds	r7, #20
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr

0800b122 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b122:	b480      	push	{r7}
 800b124:	b085      	sub	sp, #20
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	695b      	ldr	r3, [r3, #20]
 800b12e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	699b      	ldr	r3, [r3, #24]
 800b134:	68fa      	ldr	r2, [r7, #12]
 800b136:	4013      	ands	r3, r2
 800b138:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b13a:	68fb      	ldr	r3, [r7, #12]
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3714      	adds	r7, #20
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr

0800b148 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b148:	b480      	push	{r7}
 800b14a:	b085      	sub	sp, #20
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b15a:	699b      	ldr	r3, [r3, #24]
 800b15c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b164:	69db      	ldr	r3, [r3, #28]
 800b166:	68ba      	ldr	r2, [r7, #8]
 800b168:	4013      	ands	r3, r2
 800b16a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	0c1b      	lsrs	r3, r3, #16
}
 800b170:	4618      	mov	r0, r3
 800b172:	3714      	adds	r7, #20
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr

0800b17c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b085      	sub	sp, #20
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b18e:	699b      	ldr	r3, [r3, #24]
 800b190:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b198:	69db      	ldr	r3, [r3, #28]
 800b19a:	68ba      	ldr	r2, [r7, #8]
 800b19c:	4013      	ands	r3, r2
 800b19e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	b29b      	uxth	r3, r3
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3714      	adds	r7, #20
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b085      	sub	sp, #20
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	460b      	mov	r3, r1
 800b1ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b1c0:	78fb      	ldrb	r3, [r7, #3]
 800b1c2:	015a      	lsls	r2, r3, #5
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	4413      	add	r3, r2
 800b1c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1d6:	695b      	ldr	r3, [r3, #20]
 800b1d8:	68ba      	ldr	r2, [r7, #8]
 800b1da:	4013      	ands	r3, r2
 800b1dc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b1de:	68bb      	ldr	r3, [r7, #8]
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3714      	adds	r7, #20
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b087      	sub	sp, #28
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b202:	691b      	ldr	r3, [r3, #16]
 800b204:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b20c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b20e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b210:	78fb      	ldrb	r3, [r7, #3]
 800b212:	f003 030f 	and.w	r3, r3, #15
 800b216:	68fa      	ldr	r2, [r7, #12]
 800b218:	fa22 f303 	lsr.w	r3, r2, r3
 800b21c:	01db      	lsls	r3, r3, #7
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	693a      	ldr	r2, [r7, #16]
 800b222:	4313      	orrs	r3, r2
 800b224:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b226:	78fb      	ldrb	r3, [r7, #3]
 800b228:	015a      	lsls	r2, r3, #5
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	4413      	add	r3, r2
 800b22e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	693a      	ldr	r2, [r7, #16]
 800b236:	4013      	ands	r3, r2
 800b238:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b23a:	68bb      	ldr	r3, [r7, #8]
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	371c      	adds	r7, #28
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr

0800b248 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b248:	b480      	push	{r7}
 800b24a:	b083      	sub	sp, #12
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	695b      	ldr	r3, [r3, #20]
 800b254:	f003 0301 	and.w	r3, r3, #1
}
 800b258:	4618      	mov	r0, r3
 800b25a:	370c      	adds	r7, #12
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr

0800b264 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b264:	b480      	push	{r7}
 800b266:	b085      	sub	sp, #20
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	68fa      	ldr	r2, [r7, #12]
 800b27a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b27e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b282:	f023 0307 	bic.w	r3, r3, #7
 800b286:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	68fa      	ldr	r2, [r7, #12]
 800b292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b29a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b29c:	2300      	movs	r3, #0
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3714      	adds	r7, #20
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr
	...

0800b2ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b087      	sub	sp, #28
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	607a      	str	r2, [r7, #4]
 800b2b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	333c      	adds	r3, #60	; 0x3c
 800b2c2:	3304      	adds	r3, #4
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	4a26      	ldr	r2, [pc, #152]	; (800b364 <USB_EP0_OutStart+0xb8>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d90a      	bls.n	800b2e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b2dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b2e0:	d101      	bne.n	800b2e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	e037      	b.n	800b356 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2f8:	691b      	ldr	r3, [r3, #16]
 800b2fa:	697a      	ldr	r2, [r7, #20]
 800b2fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b300:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b304:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b30c:	691b      	ldr	r3, [r3, #16]
 800b30e:	697a      	ldr	r2, [r7, #20]
 800b310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b314:	f043 0318 	orr.w	r3, r3, #24
 800b318:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b320:	691b      	ldr	r3, [r3, #16]
 800b322:	697a      	ldr	r2, [r7, #20]
 800b324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b328:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b32c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b32e:	7afb      	ldrb	r3, [r7, #11]
 800b330:	2b01      	cmp	r3, #1
 800b332:	d10f      	bne.n	800b354 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b33a:	461a      	mov	r2, r3
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b340:	697b      	ldr	r3, [r7, #20]
 800b342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	697a      	ldr	r2, [r7, #20]
 800b34a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b34e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b352:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b354:	2300      	movs	r3, #0
}
 800b356:	4618      	mov	r0, r3
 800b358:	371c      	adds	r7, #28
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr
 800b362:	bf00      	nop
 800b364:	4f54300a 	.word	0x4f54300a

0800b368 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b368:	b480      	push	{r7}
 800b36a:	b085      	sub	sp, #20
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b370:	2300      	movs	r3, #0
 800b372:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	3301      	adds	r3, #1
 800b378:	60fb      	str	r3, [r7, #12]
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	4a13      	ldr	r2, [pc, #76]	; (800b3cc <USB_CoreReset+0x64>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d901      	bls.n	800b386 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b382:	2303      	movs	r3, #3
 800b384:	e01b      	b.n	800b3be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	691b      	ldr	r3, [r3, #16]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	daf2      	bge.n	800b374 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b38e:	2300      	movs	r3, #0
 800b390:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	691b      	ldr	r3, [r3, #16]
 800b396:	f043 0201 	orr.w	r2, r3, #1
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	60fb      	str	r3, [r7, #12]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	4a09      	ldr	r2, [pc, #36]	; (800b3cc <USB_CoreReset+0x64>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d901      	bls.n	800b3b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b3ac:	2303      	movs	r3, #3
 800b3ae:	e006      	b.n	800b3be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	691b      	ldr	r3, [r3, #16]
 800b3b4:	f003 0301 	and.w	r3, r3, #1
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d0f0      	beq.n	800b39e <USB_CoreReset+0x36>

  return HAL_OK;
 800b3bc:	2300      	movs	r3, #0
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3714      	adds	r7, #20
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop
 800b3cc:	00030d40 	.word	0x00030d40

0800b3d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b084      	sub	sp, #16
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	460b      	mov	r3, r1
 800b3da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b3dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b3e0:	f00d fc4e 	bl	8018c80 <malloc>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d105      	bne.n	800b3fa <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b3f6:	2302      	movs	r3, #2
 800b3f8:	e066      	b.n	800b4c8 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	68fa      	ldr	r2, [r7, #12]
 800b3fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	7c1b      	ldrb	r3, [r3, #16]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d119      	bne.n	800b43e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b40a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b40e:	2202      	movs	r2, #2
 800b410:	2181      	movs	r1, #129	; 0x81
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f005 f93d 	bl	8010692 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2201      	movs	r2, #1
 800b41c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b41e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b422:	2202      	movs	r2, #2
 800b424:	2101      	movs	r1, #1
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f005 f933 	bl	8010692 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2201      	movs	r2, #1
 800b430:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2210      	movs	r2, #16
 800b438:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b43c:	e016      	b.n	800b46c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b43e:	2340      	movs	r3, #64	; 0x40
 800b440:	2202      	movs	r2, #2
 800b442:	2181      	movs	r1, #129	; 0x81
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f005 f924 	bl	8010692 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2201      	movs	r2, #1
 800b44e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b450:	2340      	movs	r3, #64	; 0x40
 800b452:	2202      	movs	r2, #2
 800b454:	2101      	movs	r1, #1
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f005 f91b 	bl	8010692 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2201      	movs	r2, #1
 800b460:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2210      	movs	r2, #16
 800b468:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b46c:	2308      	movs	r3, #8
 800b46e:	2203      	movs	r2, #3
 800b470:	2182      	movs	r1, #130	; 0x82
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f005 f90d 	bl	8010692 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2201      	movs	r2, #1
 800b47c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2200      	movs	r2, #0
 800b48e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2200      	movs	r2, #0
 800b496:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	7c1b      	ldrb	r3, [r3, #16]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d109      	bne.n	800b4b6 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b4a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4ac:	2101      	movs	r1, #1
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f005 f9de 	bl	8010870 <USBD_LL_PrepareReceive>
 800b4b4:	e007      	b.n	800b4c6 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b4bc:	2340      	movs	r3, #64	; 0x40
 800b4be:	2101      	movs	r1, #1
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f005 f9d5 	bl	8010870 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b4c6:	2300      	movs	r3, #0
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3710      	adds	r7, #16
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}

0800b4d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b084      	sub	sp, #16
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	460b      	mov	r3, r1
 800b4da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b4e0:	2181      	movs	r1, #129	; 0x81
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f005 f8fb 	bl	80106de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b4ee:	2101      	movs	r1, #1
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f005 f8f4 	bl	80106de <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b4fe:	2182      	movs	r1, #130	; 0x82
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f005 f8ec 	bl	80106de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2200      	movs	r2, #0
 800b50a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d00e      	beq.n	800b53e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b530:	4618      	mov	r0, r3
 800b532:	f00d fbad 	bl	8018c90 <free>
    pdev->pClassData = NULL;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800b53e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b540:	4618      	mov	r0, r3
 800b542:	3710      	adds	r7, #16
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b086      	sub	sp, #24
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b558:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b55a:	2300      	movs	r3, #0
 800b55c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b55e:	2300      	movs	r3, #0
 800b560:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800b562:	2300      	movs	r3, #0
 800b564:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	781b      	ldrb	r3, [r3, #0]
 800b56a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d03a      	beq.n	800b5e8 <USBD_CDC_Setup+0xa0>
 800b572:	2b20      	cmp	r3, #32
 800b574:	f040 8097 	bne.w	800b6a6 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	88db      	ldrh	r3, [r3, #6]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d029      	beq.n	800b5d4 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	b25b      	sxtb	r3, r3
 800b586:	2b00      	cmp	r3, #0
 800b588:	da11      	bge.n	800b5ae <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	683a      	ldr	r2, [r7, #0]
 800b594:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800b596:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b598:	683a      	ldr	r2, [r7, #0]
 800b59a:	88d2      	ldrh	r2, [r2, #6]
 800b59c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b59e:	6939      	ldr	r1, [r7, #16]
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	88db      	ldrh	r3, [r3, #6]
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f001 fa9d 	bl	800cae6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800b5ac:	e082      	b.n	800b6b4 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	785a      	ldrb	r2, [r3, #1]
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	88db      	ldrh	r3, [r3, #6]
 800b5bc:	b2da      	uxtb	r2, r3
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b5c4:	6939      	ldr	r1, [r7, #16]
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	88db      	ldrh	r3, [r3, #6]
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f001 fab6 	bl	800cb3e <USBD_CtlPrepareRx>
    break;
 800b5d2:	e06f      	b.n	800b6b4 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5da:	689b      	ldr	r3, [r3, #8]
 800b5dc:	683a      	ldr	r2, [r7, #0]
 800b5de:	7850      	ldrb	r0, [r2, #1]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	6839      	ldr	r1, [r7, #0]
 800b5e4:	4798      	blx	r3
    break;
 800b5e6:	e065      	b.n	800b6b4 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	785b      	ldrb	r3, [r3, #1]
 800b5ec:	2b0b      	cmp	r3, #11
 800b5ee:	d84f      	bhi.n	800b690 <USBD_CDC_Setup+0x148>
 800b5f0:	a201      	add	r2, pc, #4	; (adr r2, 800b5f8 <USBD_CDC_Setup+0xb0>)
 800b5f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f6:	bf00      	nop
 800b5f8:	0800b629 	.word	0x0800b629
 800b5fc:	0800b69f 	.word	0x0800b69f
 800b600:	0800b691 	.word	0x0800b691
 800b604:	0800b691 	.word	0x0800b691
 800b608:	0800b691 	.word	0x0800b691
 800b60c:	0800b691 	.word	0x0800b691
 800b610:	0800b691 	.word	0x0800b691
 800b614:	0800b691 	.word	0x0800b691
 800b618:	0800b691 	.word	0x0800b691
 800b61c:	0800b691 	.word	0x0800b691
 800b620:	0800b651 	.word	0x0800b651
 800b624:	0800b679 	.word	0x0800b679
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b62e:	2b03      	cmp	r3, #3
 800b630:	d107      	bne.n	800b642 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b632:	f107 030c 	add.w	r3, r7, #12
 800b636:	2202      	movs	r2, #2
 800b638:	4619      	mov	r1, r3
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f001 fa53 	bl	800cae6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b640:	e030      	b.n	800b6a4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b642:	6839      	ldr	r1, [r7, #0]
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f001 f9dd 	bl	800ca04 <USBD_CtlError>
        ret = USBD_FAIL;
 800b64a:	2303      	movs	r3, #3
 800b64c:	75fb      	strb	r3, [r7, #23]
      break;
 800b64e:	e029      	b.n	800b6a4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b656:	2b03      	cmp	r3, #3
 800b658:	d107      	bne.n	800b66a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b65a:	f107 030f 	add.w	r3, r7, #15
 800b65e:	2201      	movs	r2, #1
 800b660:	4619      	mov	r1, r3
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f001 fa3f 	bl	800cae6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b668:	e01c      	b.n	800b6a4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b66a:	6839      	ldr	r1, [r7, #0]
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f001 f9c9 	bl	800ca04 <USBD_CtlError>
        ret = USBD_FAIL;
 800b672:	2303      	movs	r3, #3
 800b674:	75fb      	strb	r3, [r7, #23]
      break;
 800b676:	e015      	b.n	800b6a4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b67e:	2b03      	cmp	r3, #3
 800b680:	d00f      	beq.n	800b6a2 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800b682:	6839      	ldr	r1, [r7, #0]
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f001 f9bd 	bl	800ca04 <USBD_CtlError>
        ret = USBD_FAIL;
 800b68a:	2303      	movs	r3, #3
 800b68c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b68e:	e008      	b.n	800b6a2 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800b690:	6839      	ldr	r1, [r7, #0]
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f001 f9b6 	bl	800ca04 <USBD_CtlError>
      ret = USBD_FAIL;
 800b698:	2303      	movs	r3, #3
 800b69a:	75fb      	strb	r3, [r7, #23]
      break;
 800b69c:	e002      	b.n	800b6a4 <USBD_CDC_Setup+0x15c>
      break;
 800b69e:	bf00      	nop
 800b6a0:	e008      	b.n	800b6b4 <USBD_CDC_Setup+0x16c>
      break;
 800b6a2:	bf00      	nop
    }
    break;
 800b6a4:	e006      	b.n	800b6b4 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800b6a6:	6839      	ldr	r1, [r7, #0]
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f001 f9ab 	bl	800ca04 <USBD_CtlError>
    ret = USBD_FAIL;
 800b6ae:	2303      	movs	r3, #3
 800b6b0:	75fb      	strb	r3, [r7, #23]
    break;
 800b6b2:	bf00      	nop
  }

  return (uint8_t)ret;
 800b6b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3718      	adds	r7, #24
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop

0800b6c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b6d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d101      	bne.n	800b6e2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b6de:	2303      	movs	r3, #3
 800b6e0:	e049      	b.n	800b776 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b6ea:	78fa      	ldrb	r2, [r7, #3]
 800b6ec:	6879      	ldr	r1, [r7, #4]
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	009b      	lsls	r3, r3, #2
 800b6f2:	4413      	add	r3, r2
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	440b      	add	r3, r1
 800b6f8:	3318      	adds	r3, #24
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d029      	beq.n	800b754 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b700:	78fa      	ldrb	r2, [r7, #3]
 800b702:	6879      	ldr	r1, [r7, #4]
 800b704:	4613      	mov	r3, r2
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	4413      	add	r3, r2
 800b70a:	009b      	lsls	r3, r3, #2
 800b70c:	440b      	add	r3, r1
 800b70e:	3318      	adds	r3, #24
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	78f9      	ldrb	r1, [r7, #3]
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	460b      	mov	r3, r1
 800b718:	00db      	lsls	r3, r3, #3
 800b71a:	1a5b      	subs	r3, r3, r1
 800b71c:	009b      	lsls	r3, r3, #2
 800b71e:	4403      	add	r3, r0
 800b720:	3344      	adds	r3, #68	; 0x44
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	fbb2 f1f3 	udiv	r1, r2, r3
 800b728:	fb03 f301 	mul.w	r3, r3, r1
 800b72c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d110      	bne.n	800b754 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b732:	78fa      	ldrb	r2, [r7, #3]
 800b734:	6879      	ldr	r1, [r7, #4]
 800b736:	4613      	mov	r3, r2
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	4413      	add	r3, r2
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	440b      	add	r3, r1
 800b740:	3318      	adds	r3, #24
 800b742:	2200      	movs	r2, #0
 800b744:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b746:	78f9      	ldrb	r1, [r7, #3]
 800b748:	2300      	movs	r3, #0
 800b74a:	2200      	movs	r2, #0
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f005 f86e 	bl	801082e <USBD_LL_Transmit>
 800b752:	e00f      	b.n	800b774 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	2200      	movs	r2, #0
 800b758:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b762:	691b      	ldr	r3, [r3, #16]
 800b764:	68ba      	ldr	r2, [r7, #8]
 800b766:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b76a:	68ba      	ldr	r2, [r7, #8]
 800b76c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b770:	78fa      	ldrb	r2, [r7, #3]
 800b772:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800b774:	2300      	movs	r3, #0
}
 800b776:	4618      	mov	r0, r3
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b77e:	b580      	push	{r7, lr}
 800b780:	b084      	sub	sp, #16
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
 800b786:	460b      	mov	r3, r1
 800b788:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b790:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d101      	bne.n	800b7a0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b79c:	2303      	movs	r3, #3
 800b79e:	e015      	b.n	800b7cc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b7a0:	78fb      	ldrb	r3, [r7, #3]
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f005 f884 	bl	80108b2 <USBD_LL_GetRxDataSize>
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	68fa      	ldr	r2, [r7, #12]
 800b7bc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b7c0:	68fa      	ldr	r2, [r7, #12]
 800b7c2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b7c6:	4611      	mov	r1, r2
 800b7c8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b7ca:	2300      	movs	r3, #0
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3710      	adds	r7, #16
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7e2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d015      	beq.n	800b81a <USBD_CDC_EP0_RxReady+0x46>
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b7f4:	2bff      	cmp	r3, #255	; 0xff
 800b7f6:	d010      	beq.n	800b81a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7fe:	689b      	ldr	r3, [r3, #8]
 800b800:	68fa      	ldr	r2, [r7, #12]
 800b802:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b806:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b808:	68fa      	ldr	r2, [r7, #12]
 800b80a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b80e:	b292      	uxth	r2, r2
 800b810:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	22ff      	movs	r2, #255	; 0xff
 800b816:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800b81a:	2300      	movs	r3, #0
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3710      	adds	r7, #16
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b824:	b480      	push	{r7}
 800b826:	b083      	sub	sp, #12
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2243      	movs	r2, #67	; 0x43
 800b830:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b832:	4b03      	ldr	r3, [pc, #12]	; (800b840 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b834:	4618      	mov	r0, r3
 800b836:	370c      	adds	r7, #12
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr
 800b840:	20000094 	.word	0x20000094

0800b844 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2243      	movs	r2, #67	; 0x43
 800b850:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b852:	4b03      	ldr	r3, [pc, #12]	; (800b860 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b854:	4618      	mov	r0, r3
 800b856:	370c      	adds	r7, #12
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr
 800b860:	20000050 	.word	0x20000050

0800b864 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b864:	b480      	push	{r7}
 800b866:	b083      	sub	sp, #12
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2243      	movs	r2, #67	; 0x43
 800b870:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b872:	4b03      	ldr	r3, [pc, #12]	; (800b880 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b874:	4618      	mov	r0, r3
 800b876:	370c      	adds	r7, #12
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr
 800b880:	200000d8 	.word	0x200000d8

0800b884 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	220a      	movs	r2, #10
 800b890:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b892:	4b03      	ldr	r3, [pc, #12]	; (800b8a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b894:	4618      	mov	r0, r3
 800b896:	370c      	adds	r7, #12
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr
 800b8a0:	2000000c 	.word	0x2000000c

0800b8a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b083      	sub	sp, #12
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d101      	bne.n	800b8b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	e004      	b.n	800b8c2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	683a      	ldr	r2, [r7, #0]
 800b8bc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b8c0:	2300      	movs	r3, #0
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	370c      	adds	r7, #12
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8cc:	4770      	bx	lr

0800b8ce <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b8ce:	b480      	push	{r7}
 800b8d0:	b087      	sub	sp, #28
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	60f8      	str	r0, [r7, #12]
 800b8d6:	60b9      	str	r1, [r7, #8]
 800b8d8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8e0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	68ba      	ldr	r2, [r7, #8]
 800b8e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b8f2:	2300      	movs	r3, #0
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	371c      	adds	r7, #28
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr

0800b900 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b900:	b480      	push	{r7}
 800b902:	b085      	sub	sp, #20
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b910:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	683a      	ldr	r2, [r7, #0]
 800b916:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b91a:	2300      	movs	r3, #0
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3714      	adds	r7, #20
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr

0800b928 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b936:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b938:	2301      	movs	r3, #1
 800b93a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b942:	2b00      	cmp	r3, #0
 800b944:	d101      	bne.n	800b94a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b946:	2303      	movs	r3, #3
 800b948:	e01a      	b.n	800b980 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b950:	2b00      	cmp	r3, #0
 800b952:	d114      	bne.n	800b97e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	2201      	movs	r2, #1
 800b958:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b972:	2181      	movs	r1, #129	; 0x81
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f004 ff5a 	bl	801082e <USBD_LL_Transmit>

    ret = USBD_OK;
 800b97a:	2300      	movs	r3, #0
 800b97c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b97e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b980:	4618      	mov	r0, r3
 800b982:	3710      	adds	r7, #16
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b996:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d101      	bne.n	800b9a6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b9a2:	2303      	movs	r3, #3
 800b9a4:	e016      	b.n	800b9d4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	7c1b      	ldrb	r3, [r3, #16]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d109      	bne.n	800b9c2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9b8:	2101      	movs	r1, #1
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f004 ff58 	bl	8010870 <USBD_LL_PrepareReceive>
 800b9c0:	e007      	b.n	800b9d2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9c8:	2340      	movs	r3, #64	; 0x40
 800b9ca:	2101      	movs	r1, #1
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f004 ff4f 	bl	8010870 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b9d2:	2300      	movs	r3, #0
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3710      	adds	r7, #16
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b086      	sub	sp, #24
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	60f8      	str	r0, [r7, #12]
 800b9e4:	60b9      	str	r1, [r7, #8]
 800b9e6:	4613      	mov	r3, r2
 800b9e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d101      	bne.n	800b9f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b9f0:	2303      	movs	r3, #3
 800b9f2:	e025      	b.n	800ba40 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d003      	beq.n	800ba06 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2200      	movs	r2, #0
 800ba02:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d003      	beq.n	800ba18 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	2200      	movs	r2, #0
 800ba14:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d003      	beq.n	800ba26 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	68ba      	ldr	r2, [r7, #8]
 800ba22:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	79fa      	ldrb	r2, [r7, #7]
 800ba32:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ba34:	68f8      	ldr	r0, [r7, #12]
 800ba36:	f004 fdc5 	bl	80105c4 <USBD_LL_Init>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ba3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3718      	adds	r7, #24
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}

0800ba48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba52:	2300      	movs	r3, #0
 800ba54:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d101      	bne.n	800ba60 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ba5c:	2303      	movs	r3, #3
 800ba5e:	e010      	b.n	800ba82 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	683a      	ldr	r2, [r7, #0]
 800ba64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba70:	f107 020e 	add.w	r2, r7, #14
 800ba74:	4610      	mov	r0, r2
 800ba76:	4798      	blx	r3
 800ba78:	4602      	mov	r2, r0
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800ba80:	2300      	movs	r3, #0
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3710      	adds	r7, #16
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b082      	sub	sp, #8
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f004 fde2 	bl	801065c <USBD_LL_Start>
 800ba98:	4603      	mov	r3, r0
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3708      	adds	r7, #8
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}

0800baa2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800baa2:	b480      	push	{r7}
 800baa4:	b083      	sub	sp, #12
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800baaa:	2300      	movs	r3, #0
}
 800baac:	4618      	mov	r0, r3
 800baae:	370c      	adds	r7, #12
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr

0800bab8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b084      	sub	sp, #16
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	460b      	mov	r3, r1
 800bac2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bac4:	2303      	movs	r3, #3
 800bac6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d009      	beq.n	800bae6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	78fa      	ldrb	r2, [r7, #3]
 800badc:	4611      	mov	r1, r2
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	4798      	blx	r3
 800bae2:	4603      	mov	r3, r0
 800bae4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bae6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3710      	adds	r7, #16
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	460b      	mov	r3, r1
 800bafa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d007      	beq.n	800bb16 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	78fa      	ldrb	r2, [r7, #3]
 800bb10:	4611      	mov	r1, r2
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	4798      	blx	r3
  }

  return USBD_OK;
 800bb16:	2300      	movs	r3, #0
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3708      	adds	r7, #8
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b084      	sub	sp, #16
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb30:	6839      	ldr	r1, [r7, #0]
 800bb32:	4618      	mov	r0, r3
 800bb34:	f000 ff2c 	bl	800c990 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bb46:	461a      	mov	r2, r3
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bb54:	f003 031f 	and.w	r3, r3, #31
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d00e      	beq.n	800bb7a <USBD_LL_SetupStage+0x5a>
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d302      	bcc.n	800bb66 <USBD_LL_SetupStage+0x46>
 800bb60:	2b02      	cmp	r3, #2
 800bb62:	d014      	beq.n	800bb8e <USBD_LL_SetupStage+0x6e>
 800bb64:	e01d      	b.n	800bba2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f000 fa18 	bl	800bfa4 <USBD_StdDevReq>
 800bb74:	4603      	mov	r3, r0
 800bb76:	73fb      	strb	r3, [r7, #15]
      break;
 800bb78:	e020      	b.n	800bbbc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb80:	4619      	mov	r1, r3
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f000 fa7c 	bl	800c080 <USBD_StdItfReq>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	73fb      	strb	r3, [r7, #15]
      break;
 800bb8c:	e016      	b.n	800bbbc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb94:	4619      	mov	r1, r3
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 fab8 	bl	800c10c <USBD_StdEPReq>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	73fb      	strb	r3, [r7, #15]
      break;
 800bba0:	e00c      	b.n	800bbbc <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bba8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	4619      	mov	r1, r3
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f004 fdb3 	bl	801071c <USBD_LL_StallEP>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	73fb      	strb	r3, [r7, #15]
      break;
 800bbba:	bf00      	nop
  }

  return ret;
 800bbbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3710      	adds	r7, #16
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}

0800bbc6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bbc6:	b580      	push	{r7, lr}
 800bbc8:	b086      	sub	sp, #24
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	60f8      	str	r0, [r7, #12]
 800bbce:	460b      	mov	r3, r1
 800bbd0:	607a      	str	r2, [r7, #4]
 800bbd2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bbd4:	7afb      	ldrb	r3, [r7, #11]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d137      	bne.n	800bc4a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bbe0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bbe8:	2b03      	cmp	r3, #3
 800bbea:	d14a      	bne.n	800bc82 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	689a      	ldr	r2, [r3, #8]
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	68db      	ldr	r3, [r3, #12]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d913      	bls.n	800bc20 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	689a      	ldr	r2, [r3, #8]
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	1ad2      	subs	r2, r2, r3
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	68da      	ldr	r2, [r3, #12]
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	689b      	ldr	r3, [r3, #8]
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	bf28      	it	cs
 800bc12:	4613      	movcs	r3, r2
 800bc14:	461a      	mov	r2, r3
 800bc16:	6879      	ldr	r1, [r7, #4]
 800bc18:	68f8      	ldr	r0, [r7, #12]
 800bc1a:	f000 ffad 	bl	800cb78 <USBD_CtlContinueRx>
 800bc1e:	e030      	b.n	800bc82 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc26:	691b      	ldr	r3, [r3, #16]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d00a      	beq.n	800bc42 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bc32:	2b03      	cmp	r3, #3
 800bc34:	d105      	bne.n	800bc42 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc3c:	691b      	ldr	r3, [r3, #16]
 800bc3e:	68f8      	ldr	r0, [r7, #12]
 800bc40:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800bc42:	68f8      	ldr	r0, [r7, #12]
 800bc44:	f000 ffa9 	bl	800cb9a <USBD_CtlSendStatus>
 800bc48:	e01b      	b.n	800bc82 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc50:	699b      	ldr	r3, [r3, #24]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d013      	beq.n	800bc7e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bc5c:	2b03      	cmp	r3, #3
 800bc5e:	d10e      	bne.n	800bc7e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc66:	699b      	ldr	r3, [r3, #24]
 800bc68:	7afa      	ldrb	r2, [r7, #11]
 800bc6a:	4611      	mov	r1, r2
 800bc6c:	68f8      	ldr	r0, [r7, #12]
 800bc6e:	4798      	blx	r3
 800bc70:	4603      	mov	r3, r0
 800bc72:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800bc74:	7dfb      	ldrb	r3, [r7, #23]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d003      	beq.n	800bc82 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800bc7a:	7dfb      	ldrb	r3, [r7, #23]
 800bc7c:	e002      	b.n	800bc84 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bc7e:	2303      	movs	r3, #3
 800bc80:	e000      	b.n	800bc84 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800bc82:	2300      	movs	r3, #0
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3718      	adds	r7, #24
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b086      	sub	sp, #24
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	60f8      	str	r0, [r7, #12]
 800bc94:	460b      	mov	r3, r1
 800bc96:	607a      	str	r2, [r7, #4]
 800bc98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bc9a:	7afb      	ldrb	r3, [r7, #11]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d16a      	bne.n	800bd76 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	3314      	adds	r3, #20
 800bca4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bcac:	2b02      	cmp	r3, #2
 800bcae:	d155      	bne.n	800bd5c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	689a      	ldr	r2, [r3, #8]
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	68db      	ldr	r3, [r3, #12]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d914      	bls.n	800bce6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	689a      	ldr	r2, [r3, #8]
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	68db      	ldr	r3, [r3, #12]
 800bcc4:	1ad2      	subs	r2, r2, r3
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	689b      	ldr	r3, [r3, #8]
 800bcce:	461a      	mov	r2, r3
 800bcd0:	6879      	ldr	r1, [r7, #4]
 800bcd2:	68f8      	ldr	r0, [r7, #12]
 800bcd4:	f000 ff22 	bl	800cb1c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bcd8:	2300      	movs	r3, #0
 800bcda:	2200      	movs	r2, #0
 800bcdc:	2100      	movs	r1, #0
 800bcde:	68f8      	ldr	r0, [r7, #12]
 800bce0:	f004 fdc6 	bl	8010870 <USBD_LL_PrepareReceive>
 800bce4:	e03a      	b.n	800bd5c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	68da      	ldr	r2, [r3, #12]
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	689b      	ldr	r3, [r3, #8]
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	d11c      	bne.n	800bd2c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	685a      	ldr	r2, [r3, #4]
 800bcf6:	693b      	ldr	r3, [r7, #16]
 800bcf8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d316      	bcc.n	800bd2c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	685a      	ldr	r2, [r3, #4]
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d20f      	bcs.n	800bd2c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	2100      	movs	r1, #0
 800bd10:	68f8      	ldr	r0, [r7, #12]
 800bd12:	f000 ff03 	bl	800cb1c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd1e:	2300      	movs	r3, #0
 800bd20:	2200      	movs	r2, #0
 800bd22:	2100      	movs	r1, #0
 800bd24:	68f8      	ldr	r0, [r7, #12]
 800bd26:	f004 fda3 	bl	8010870 <USBD_LL_PrepareReceive>
 800bd2a:	e017      	b.n	800bd5c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd32:	68db      	ldr	r3, [r3, #12]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d00a      	beq.n	800bd4e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bd3e:	2b03      	cmp	r3, #3
 800bd40:	d105      	bne.n	800bd4e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd48:	68db      	ldr	r3, [r3, #12]
 800bd4a:	68f8      	ldr	r0, [r7, #12]
 800bd4c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd4e:	2180      	movs	r1, #128	; 0x80
 800bd50:	68f8      	ldr	r0, [r7, #12]
 800bd52:	f004 fce3 	bl	801071c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bd56:	68f8      	ldr	r0, [r7, #12]
 800bd58:	f000 ff32 	bl	800cbc0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bd62:	2b01      	cmp	r3, #1
 800bd64:	d123      	bne.n	800bdae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bd66:	68f8      	ldr	r0, [r7, #12]
 800bd68:	f7ff fe9b 	bl	800baa2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bd74:	e01b      	b.n	800bdae <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd7c:	695b      	ldr	r3, [r3, #20]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d013      	beq.n	800bdaa <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bd88:	2b03      	cmp	r3, #3
 800bd8a:	d10e      	bne.n	800bdaa <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd92:	695b      	ldr	r3, [r3, #20]
 800bd94:	7afa      	ldrb	r2, [r7, #11]
 800bd96:	4611      	mov	r1, r2
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	4798      	blx	r3
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800bda0:	7dfb      	ldrb	r3, [r7, #23]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d003      	beq.n	800bdae <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800bda6:	7dfb      	ldrb	r3, [r7, #23]
 800bda8:	e002      	b.n	800bdb0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bdaa:	2303      	movs	r3, #3
 800bdac:	e000      	b.n	800bdb0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800bdae:	2300      	movs	r3, #0
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3718      	adds	r7, #24
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}

0800bdb8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d009      	beq.n	800bdfc <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdee:	685b      	ldr	r3, [r3, #4]
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	6852      	ldr	r2, [r2, #4]
 800bdf4:	b2d2      	uxtb	r2, r2
 800bdf6:	4611      	mov	r1, r2
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bdfc:	2340      	movs	r3, #64	; 0x40
 800bdfe:	2200      	movs	r2, #0
 800be00:	2100      	movs	r1, #0
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f004 fc45 	bl	8010692 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2201      	movs	r2, #1
 800be0c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2240      	movs	r2, #64	; 0x40
 800be14:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be18:	2340      	movs	r3, #64	; 0x40
 800be1a:	2200      	movs	r2, #0
 800be1c:	2180      	movs	r1, #128	; 0x80
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f004 fc37 	bl	8010692 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2201      	movs	r2, #1
 800be28:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2240      	movs	r2, #64	; 0x40
 800be2e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800be30:	2300      	movs	r3, #0
}
 800be32:	4618      	mov	r0, r3
 800be34:	3708      	adds	r7, #8
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}

0800be3a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800be3a:	b480      	push	{r7}
 800be3c:	b083      	sub	sp, #12
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
 800be42:	460b      	mov	r3, r1
 800be44:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	78fa      	ldrb	r2, [r7, #3]
 800be4a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800be4c:	2300      	movs	r3, #0
}
 800be4e:	4618      	mov	r0, r3
 800be50:	370c      	adds	r7, #12
 800be52:	46bd      	mov	sp, r7
 800be54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be58:	4770      	bx	lr

0800be5a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800be5a:	b480      	push	{r7}
 800be5c:	b083      	sub	sp, #12
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2204      	movs	r2, #4
 800be72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800be76:	2300      	movs	r3, #0
}
 800be78:	4618      	mov	r0, r3
 800be7a:	370c      	adds	r7, #12
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr

0800be84 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be92:	2b04      	cmp	r3, #4
 800be94:	d105      	bne.n	800bea2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bea2:	2300      	movs	r3, #0
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	370c      	adds	r7, #12
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr

0800beb0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b082      	sub	sp, #8
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bebe:	2b03      	cmp	r3, #3
 800bec0:	d10b      	bne.n	800beda <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bec8:	69db      	ldr	r3, [r3, #28]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d005      	beq.n	800beda <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bed4:	69db      	ldr	r3, [r3, #28]
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800beda:	2300      	movs	r3, #0
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3708      	adds	r7, #8
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b083      	sub	sp, #12
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	460b      	mov	r3, r1
 800beee:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bef0:	2300      	movs	r3, #0
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	370c      	adds	r7, #12
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr

0800befe <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800befe:	b480      	push	{r7}
 800bf00:	b083      	sub	sp, #12
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]
 800bf06:	460b      	mov	r3, r1
 800bf08:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bf0a:	2300      	movs	r3, #0
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	370c      	adds	r7, #12
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr

0800bf18 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b083      	sub	sp, #12
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bf20:	2300      	movs	r3, #0
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	370c      	adds	r7, #12
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr

0800bf2e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bf2e:	b580      	push	{r7, lr}
 800bf30:	b082      	sub	sp, #8
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2201      	movs	r2, #1
 800bf3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d009      	beq.n	800bf5c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	6852      	ldr	r2, [r2, #4]
 800bf54:	b2d2      	uxtb	r2, r2
 800bf56:	4611      	mov	r1, r2
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	4798      	blx	r3
  }

  return USBD_OK;
 800bf5c:	2300      	movs	r3, #0
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3708      	adds	r7, #8
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}

0800bf66 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bf66:	b480      	push	{r7}
 800bf68:	b087      	sub	sp, #28
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bf84:	8a3b      	ldrh	r3, [r7, #16]
 800bf86:	021b      	lsls	r3, r3, #8
 800bf88:	b21a      	sxth	r2, r3
 800bf8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	b21b      	sxth	r3, r3
 800bf92:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bf94:	89fb      	ldrh	r3, [r7, #14]
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	371c      	adds	r7, #28
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr
	...

0800bfa4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b084      	sub	sp, #16
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfba:	2b20      	cmp	r3, #32
 800bfbc:	d004      	beq.n	800bfc8 <USBD_StdDevReq+0x24>
 800bfbe:	2b40      	cmp	r3, #64	; 0x40
 800bfc0:	d002      	beq.n	800bfc8 <USBD_StdDevReq+0x24>
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d00a      	beq.n	800bfdc <USBD_StdDevReq+0x38>
 800bfc6:	e050      	b.n	800c06a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	6839      	ldr	r1, [r7, #0]
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	4798      	blx	r3
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	73fb      	strb	r3, [r7, #15]
    break;
 800bfda:	e04b      	b.n	800c074 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	785b      	ldrb	r3, [r3, #1]
 800bfe0:	2b09      	cmp	r3, #9
 800bfe2:	d83c      	bhi.n	800c05e <USBD_StdDevReq+0xba>
 800bfe4:	a201      	add	r2, pc, #4	; (adr r2, 800bfec <USBD_StdDevReq+0x48>)
 800bfe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfea:	bf00      	nop
 800bfec:	0800c041 	.word	0x0800c041
 800bff0:	0800c055 	.word	0x0800c055
 800bff4:	0800c05f 	.word	0x0800c05f
 800bff8:	0800c04b 	.word	0x0800c04b
 800bffc:	0800c05f 	.word	0x0800c05f
 800c000:	0800c01f 	.word	0x0800c01f
 800c004:	0800c015 	.word	0x0800c015
 800c008:	0800c05f 	.word	0x0800c05f
 800c00c:	0800c037 	.word	0x0800c037
 800c010:	0800c029 	.word	0x0800c029
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800c014:	6839      	ldr	r1, [r7, #0]
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 f9ce 	bl	800c3b8 <USBD_GetDescriptor>
      break;
 800c01c:	e024      	b.n	800c068 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800c01e:	6839      	ldr	r1, [r7, #0]
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f000 fb33 	bl	800c68c <USBD_SetAddress>
      break;
 800c026:	e01f      	b.n	800c068 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800c028:	6839      	ldr	r1, [r7, #0]
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f000 fb70 	bl	800c710 <USBD_SetConfig>
 800c030:	4603      	mov	r3, r0
 800c032:	73fb      	strb	r3, [r7, #15]
      break;
 800c034:	e018      	b.n	800c068 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800c036:	6839      	ldr	r1, [r7, #0]
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f000 fc0d 	bl	800c858 <USBD_GetConfig>
      break;
 800c03e:	e013      	b.n	800c068 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800c040:	6839      	ldr	r1, [r7, #0]
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 fc3c 	bl	800c8c0 <USBD_GetStatus>
      break;
 800c048:	e00e      	b.n	800c068 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800c04a:	6839      	ldr	r1, [r7, #0]
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 fc6a 	bl	800c926 <USBD_SetFeature>
      break;
 800c052:	e009      	b.n	800c068 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800c054:	6839      	ldr	r1, [r7, #0]
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 fc79 	bl	800c94e <USBD_ClrFeature>
      break;
 800c05c:	e004      	b.n	800c068 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800c05e:	6839      	ldr	r1, [r7, #0]
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 fccf 	bl	800ca04 <USBD_CtlError>
      break;
 800c066:	bf00      	nop
    }
    break;
 800c068:	e004      	b.n	800c074 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800c06a:	6839      	ldr	r1, [r7, #0]
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 fcc9 	bl	800ca04 <USBD_CtlError>
    break;
 800c072:	bf00      	nop
  }

  return ret;
 800c074:	7bfb      	ldrb	r3, [r7, #15]
}
 800c076:	4618      	mov	r0, r3
 800c078:	3710      	adds	r7, #16
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop

0800c080 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c08a:	2300      	movs	r3, #0
 800c08c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c096:	2b20      	cmp	r3, #32
 800c098:	d003      	beq.n	800c0a2 <USBD_StdItfReq+0x22>
 800c09a:	2b40      	cmp	r3, #64	; 0x40
 800c09c:	d001      	beq.n	800c0a2 <USBD_StdItfReq+0x22>
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d12a      	bne.n	800c0f8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0a8:	3b01      	subs	r3, #1
 800c0aa:	2b02      	cmp	r3, #2
 800c0ac:	d81d      	bhi.n	800c0ea <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	889b      	ldrh	r3, [r3, #4]
 800c0b2:	b2db      	uxtb	r3, r3
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	d813      	bhi.n	800c0e0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	6839      	ldr	r1, [r7, #0]
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	4798      	blx	r3
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	88db      	ldrh	r3, [r3, #6]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d110      	bne.n	800c0f4 <USBD_StdItfReq+0x74>
 800c0d2:	7bfb      	ldrb	r3, [r7, #15]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d10d      	bne.n	800c0f4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 fd5e 	bl	800cb9a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c0de:	e009      	b.n	800c0f4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c0e0:	6839      	ldr	r1, [r7, #0]
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 fc8e 	bl	800ca04 <USBD_CtlError>
      break;
 800c0e8:	e004      	b.n	800c0f4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c0ea:	6839      	ldr	r1, [r7, #0]
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 fc89 	bl	800ca04 <USBD_CtlError>
      break;
 800c0f2:	e000      	b.n	800c0f6 <USBD_StdItfReq+0x76>
      break;
 800c0f4:	bf00      	nop
    }
    break;
 800c0f6:	e004      	b.n	800c102 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c0f8:	6839      	ldr	r1, [r7, #0]
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f000 fc82 	bl	800ca04 <USBD_CtlError>
    break;
 800c100:	bf00      	nop
  }

  return ret;
 800c102:	7bfb      	ldrb	r3, [r7, #15]
}
 800c104:	4618      	mov	r0, r3
 800c106:	3710      	adds	r7, #16
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b084      	sub	sp, #16
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c116:	2300      	movs	r3, #0
 800c118:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	889b      	ldrh	r3, [r3, #4]
 800c11e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c128:	2b20      	cmp	r3, #32
 800c12a:	d004      	beq.n	800c136 <USBD_StdEPReq+0x2a>
 800c12c:	2b40      	cmp	r3, #64	; 0x40
 800c12e:	d002      	beq.n	800c136 <USBD_StdEPReq+0x2a>
 800c130:	2b00      	cmp	r3, #0
 800c132:	d00a      	beq.n	800c14a <USBD_StdEPReq+0x3e>
 800c134:	e135      	b.n	800c3a2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c13c:	689b      	ldr	r3, [r3, #8]
 800c13e:	6839      	ldr	r1, [r7, #0]
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	4798      	blx	r3
 800c144:	4603      	mov	r3, r0
 800c146:	73fb      	strb	r3, [r7, #15]
    break;
 800c148:	e130      	b.n	800c3ac <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	785b      	ldrb	r3, [r3, #1]
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d03e      	beq.n	800c1d0 <USBD_StdEPReq+0xc4>
 800c152:	2b03      	cmp	r3, #3
 800c154:	d002      	beq.n	800c15c <USBD_StdEPReq+0x50>
 800c156:	2b00      	cmp	r3, #0
 800c158:	d077      	beq.n	800c24a <USBD_StdEPReq+0x13e>
 800c15a:	e11c      	b.n	800c396 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c162:	2b02      	cmp	r3, #2
 800c164:	d002      	beq.n	800c16c <USBD_StdEPReq+0x60>
 800c166:	2b03      	cmp	r3, #3
 800c168:	d015      	beq.n	800c196 <USBD_StdEPReq+0x8a>
 800c16a:	e02b      	b.n	800c1c4 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c16c:	7bbb      	ldrb	r3, [r7, #14]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d00c      	beq.n	800c18c <USBD_StdEPReq+0x80>
 800c172:	7bbb      	ldrb	r3, [r7, #14]
 800c174:	2b80      	cmp	r3, #128	; 0x80
 800c176:	d009      	beq.n	800c18c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c178:	7bbb      	ldrb	r3, [r7, #14]
 800c17a:	4619      	mov	r1, r3
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f004 facd 	bl	801071c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c182:	2180      	movs	r1, #128	; 0x80
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f004 fac9 	bl	801071c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c18a:	e020      	b.n	800c1ce <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800c18c:	6839      	ldr	r1, [r7, #0]
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 fc38 	bl	800ca04 <USBD_CtlError>
        break;
 800c194:	e01b      	b.n	800c1ce <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	885b      	ldrh	r3, [r3, #2]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d10e      	bne.n	800c1bc <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c19e:	7bbb      	ldrb	r3, [r7, #14]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d00b      	beq.n	800c1bc <USBD_StdEPReq+0xb0>
 800c1a4:	7bbb      	ldrb	r3, [r7, #14]
 800c1a6:	2b80      	cmp	r3, #128	; 0x80
 800c1a8:	d008      	beq.n	800c1bc <USBD_StdEPReq+0xb0>
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	88db      	ldrh	r3, [r3, #6]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d104      	bne.n	800c1bc <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800c1b2:	7bbb      	ldrb	r3, [r7, #14]
 800c1b4:	4619      	mov	r1, r3
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f004 fab0 	bl	801071c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 fcec 	bl	800cb9a <USBD_CtlSendStatus>

        break;
 800c1c2:	e004      	b.n	800c1ce <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800c1c4:	6839      	ldr	r1, [r7, #0]
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f000 fc1c 	bl	800ca04 <USBD_CtlError>
        break;
 800c1cc:	bf00      	nop
      }
      break;
 800c1ce:	e0e7      	b.n	800c3a0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1d6:	2b02      	cmp	r3, #2
 800c1d8:	d002      	beq.n	800c1e0 <USBD_StdEPReq+0xd4>
 800c1da:	2b03      	cmp	r3, #3
 800c1dc:	d015      	beq.n	800c20a <USBD_StdEPReq+0xfe>
 800c1de:	e02d      	b.n	800c23c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1e0:	7bbb      	ldrb	r3, [r7, #14]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d00c      	beq.n	800c200 <USBD_StdEPReq+0xf4>
 800c1e6:	7bbb      	ldrb	r3, [r7, #14]
 800c1e8:	2b80      	cmp	r3, #128	; 0x80
 800c1ea:	d009      	beq.n	800c200 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c1ec:	7bbb      	ldrb	r3, [r7, #14]
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f004 fa93 	bl	801071c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1f6:	2180      	movs	r1, #128	; 0x80
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f004 fa8f 	bl	801071c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c1fe:	e023      	b.n	800c248 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800c200:	6839      	ldr	r1, [r7, #0]
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 fbfe 	bl	800ca04 <USBD_CtlError>
        break;
 800c208:	e01e      	b.n	800c248 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	885b      	ldrh	r3, [r3, #2]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d119      	bne.n	800c246 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c212:	7bbb      	ldrb	r3, [r7, #14]
 800c214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d004      	beq.n	800c226 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c21c:	7bbb      	ldrb	r3, [r7, #14]
 800c21e:	4619      	mov	r1, r3
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f004 fa9a 	bl	801075a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 fcb7 	bl	800cb9a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c232:	689b      	ldr	r3, [r3, #8]
 800c234:	6839      	ldr	r1, [r7, #0]
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	4798      	blx	r3
        }
        break;
 800c23a:	e004      	b.n	800c246 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800c23c:	6839      	ldr	r1, [r7, #0]
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f000 fbe0 	bl	800ca04 <USBD_CtlError>
        break;
 800c244:	e000      	b.n	800c248 <USBD_StdEPReq+0x13c>
        break;
 800c246:	bf00      	nop
      }
      break;
 800c248:	e0aa      	b.n	800c3a0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c250:	2b02      	cmp	r3, #2
 800c252:	d002      	beq.n	800c25a <USBD_StdEPReq+0x14e>
 800c254:	2b03      	cmp	r3, #3
 800c256:	d032      	beq.n	800c2be <USBD_StdEPReq+0x1b2>
 800c258:	e097      	b.n	800c38a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c25a:	7bbb      	ldrb	r3, [r7, #14]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d007      	beq.n	800c270 <USBD_StdEPReq+0x164>
 800c260:	7bbb      	ldrb	r3, [r7, #14]
 800c262:	2b80      	cmp	r3, #128	; 0x80
 800c264:	d004      	beq.n	800c270 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800c266:	6839      	ldr	r1, [r7, #0]
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 fbcb 	bl	800ca04 <USBD_CtlError>
          break;
 800c26e:	e091      	b.n	800c394 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c270:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c274:	2b00      	cmp	r3, #0
 800c276:	da0b      	bge.n	800c290 <USBD_StdEPReq+0x184>
 800c278:	7bbb      	ldrb	r3, [r7, #14]
 800c27a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c27e:	4613      	mov	r3, r2
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	4413      	add	r3, r2
 800c284:	009b      	lsls	r3, r3, #2
 800c286:	3310      	adds	r3, #16
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	4413      	add	r3, r2
 800c28c:	3304      	adds	r3, #4
 800c28e:	e00b      	b.n	800c2a8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c290:	7bbb      	ldrb	r3, [r7, #14]
 800c292:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c296:	4613      	mov	r3, r2
 800c298:	009b      	lsls	r3, r3, #2
 800c29a:	4413      	add	r3, r2
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	4413      	add	r3, r2
 800c2a6:	3304      	adds	r3, #4
 800c2a8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	2202      	movs	r2, #2
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f000 fc15 	bl	800cae6 <USBD_CtlSendData>
        break;
 800c2bc:	e06a      	b.n	800c394 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800c2be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	da11      	bge.n	800c2ea <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c2c6:	7bbb      	ldrb	r3, [r7, #14]
 800c2c8:	f003 020f 	and.w	r2, r3, #15
 800c2cc:	6879      	ldr	r1, [r7, #4]
 800c2ce:	4613      	mov	r3, r2
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	4413      	add	r3, r2
 800c2d4:	009b      	lsls	r3, r3, #2
 800c2d6:	440b      	add	r3, r1
 800c2d8:	3324      	adds	r3, #36	; 0x24
 800c2da:	881b      	ldrh	r3, [r3, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d117      	bne.n	800c310 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c2e0:	6839      	ldr	r1, [r7, #0]
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 fb8e 	bl	800ca04 <USBD_CtlError>
            break;
 800c2e8:	e054      	b.n	800c394 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c2ea:	7bbb      	ldrb	r3, [r7, #14]
 800c2ec:	f003 020f 	and.w	r2, r3, #15
 800c2f0:	6879      	ldr	r1, [r7, #4]
 800c2f2:	4613      	mov	r3, r2
 800c2f4:	009b      	lsls	r3, r3, #2
 800c2f6:	4413      	add	r3, r2
 800c2f8:	009b      	lsls	r3, r3, #2
 800c2fa:	440b      	add	r3, r1
 800c2fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c300:	881b      	ldrh	r3, [r3, #0]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d104      	bne.n	800c310 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c306:	6839      	ldr	r1, [r7, #0]
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f000 fb7b 	bl	800ca04 <USBD_CtlError>
            break;
 800c30e:	e041      	b.n	800c394 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c310:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c314:	2b00      	cmp	r3, #0
 800c316:	da0b      	bge.n	800c330 <USBD_StdEPReq+0x224>
 800c318:	7bbb      	ldrb	r3, [r7, #14]
 800c31a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c31e:	4613      	mov	r3, r2
 800c320:	009b      	lsls	r3, r3, #2
 800c322:	4413      	add	r3, r2
 800c324:	009b      	lsls	r3, r3, #2
 800c326:	3310      	adds	r3, #16
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	4413      	add	r3, r2
 800c32c:	3304      	adds	r3, #4
 800c32e:	e00b      	b.n	800c348 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c330:	7bbb      	ldrb	r3, [r7, #14]
 800c332:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c336:	4613      	mov	r3, r2
 800c338:	009b      	lsls	r3, r3, #2
 800c33a:	4413      	add	r3, r2
 800c33c:	009b      	lsls	r3, r3, #2
 800c33e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	4413      	add	r3, r2
 800c346:	3304      	adds	r3, #4
 800c348:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c34a:	7bbb      	ldrb	r3, [r7, #14]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d002      	beq.n	800c356 <USBD_StdEPReq+0x24a>
 800c350:	7bbb      	ldrb	r3, [r7, #14]
 800c352:	2b80      	cmp	r3, #128	; 0x80
 800c354:	d103      	bne.n	800c35e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	2200      	movs	r2, #0
 800c35a:	601a      	str	r2, [r3, #0]
 800c35c:	e00e      	b.n	800c37c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c35e:	7bbb      	ldrb	r3, [r7, #14]
 800c360:	4619      	mov	r1, r3
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f004 fa18 	bl	8010798 <USBD_LL_IsStallEP>
 800c368:	4603      	mov	r3, r0
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d003      	beq.n	800c376 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	2201      	movs	r2, #1
 800c372:	601a      	str	r2, [r3, #0]
 800c374:	e002      	b.n	800c37c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	2200      	movs	r2, #0
 800c37a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	2202      	movs	r2, #2
 800c380:	4619      	mov	r1, r3
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 fbaf 	bl	800cae6 <USBD_CtlSendData>
          break;
 800c388:	e004      	b.n	800c394 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800c38a:	6839      	ldr	r1, [r7, #0]
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f000 fb39 	bl	800ca04 <USBD_CtlError>
        break;
 800c392:	bf00      	nop
      }
      break;
 800c394:	e004      	b.n	800c3a0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800c396:	6839      	ldr	r1, [r7, #0]
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f000 fb33 	bl	800ca04 <USBD_CtlError>
      break;
 800c39e:	bf00      	nop
    }
    break;
 800c3a0:	e004      	b.n	800c3ac <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800c3a2:	6839      	ldr	r1, [r7, #0]
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f000 fb2d 	bl	800ca04 <USBD_CtlError>
    break;
 800c3aa:	bf00      	nop
  }

  return ret;
 800c3ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3710      	adds	r7, #16
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
	...

0800c3b8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	885b      	ldrh	r3, [r3, #2]
 800c3d2:	0a1b      	lsrs	r3, r3, #8
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	3b01      	subs	r3, #1
 800c3d8:	2b06      	cmp	r3, #6
 800c3da:	f200 8128 	bhi.w	800c62e <USBD_GetDescriptor+0x276>
 800c3de:	a201      	add	r2, pc, #4	; (adr r2, 800c3e4 <USBD_GetDescriptor+0x2c>)
 800c3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e4:	0800c401 	.word	0x0800c401
 800c3e8:	0800c419 	.word	0x0800c419
 800c3ec:	0800c459 	.word	0x0800c459
 800c3f0:	0800c62f 	.word	0x0800c62f
 800c3f4:	0800c62f 	.word	0x0800c62f
 800c3f8:	0800c5cf 	.word	0x0800c5cf
 800c3fc:	0800c5fb 	.word	0x0800c5fb
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	687a      	ldr	r2, [r7, #4]
 800c40a:	7c12      	ldrb	r2, [r2, #16]
 800c40c:	f107 0108 	add.w	r1, r7, #8
 800c410:	4610      	mov	r0, r2
 800c412:	4798      	blx	r3
 800c414:	60f8      	str	r0, [r7, #12]
    break;
 800c416:	e112      	b.n	800c63e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	7c1b      	ldrb	r3, [r3, #16]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d10d      	bne.n	800c43c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c428:	f107 0208 	add.w	r2, r7, #8
 800c42c:	4610      	mov	r0, r2
 800c42e:	4798      	blx	r3
 800c430:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	3301      	adds	r3, #1
 800c436:	2202      	movs	r2, #2
 800c438:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c43a:	e100      	b.n	800c63e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c444:	f107 0208 	add.w	r2, r7, #8
 800c448:	4610      	mov	r0, r2
 800c44a:	4798      	blx	r3
 800c44c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	3301      	adds	r3, #1
 800c452:	2202      	movs	r2, #2
 800c454:	701a      	strb	r2, [r3, #0]
    break;
 800c456:	e0f2      	b.n	800c63e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	885b      	ldrh	r3, [r3, #2]
 800c45c:	b2db      	uxtb	r3, r3
 800c45e:	2b05      	cmp	r3, #5
 800c460:	f200 80ac 	bhi.w	800c5bc <USBD_GetDescriptor+0x204>
 800c464:	a201      	add	r2, pc, #4	; (adr r2, 800c46c <USBD_GetDescriptor+0xb4>)
 800c466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c46a:	bf00      	nop
 800c46c:	0800c485 	.word	0x0800c485
 800c470:	0800c4b9 	.word	0x0800c4b9
 800c474:	0800c4ed 	.word	0x0800c4ed
 800c478:	0800c521 	.word	0x0800c521
 800c47c:	0800c555 	.word	0x0800c555
 800c480:	0800c589 	.word	0x0800c589
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d00b      	beq.n	800c4a8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	687a      	ldr	r2, [r7, #4]
 800c49a:	7c12      	ldrb	r2, [r2, #16]
 800c49c:	f107 0108 	add.w	r1, r7, #8
 800c4a0:	4610      	mov	r0, r2
 800c4a2:	4798      	blx	r3
 800c4a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4a6:	e091      	b.n	800c5cc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c4a8:	6839      	ldr	r1, [r7, #0]
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 faaa 	bl	800ca04 <USBD_CtlError>
        err++;
 800c4b0:	7afb      	ldrb	r3, [r7, #11]
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	72fb      	strb	r3, [r7, #11]
      break;
 800c4b6:	e089      	b.n	800c5cc <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4be:	689b      	ldr	r3, [r3, #8]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d00b      	beq.n	800c4dc <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ca:	689b      	ldr	r3, [r3, #8]
 800c4cc:	687a      	ldr	r2, [r7, #4]
 800c4ce:	7c12      	ldrb	r2, [r2, #16]
 800c4d0:	f107 0108 	add.w	r1, r7, #8
 800c4d4:	4610      	mov	r0, r2
 800c4d6:	4798      	blx	r3
 800c4d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4da:	e077      	b.n	800c5cc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c4dc:	6839      	ldr	r1, [r7, #0]
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 fa90 	bl	800ca04 <USBD_CtlError>
        err++;
 800c4e4:	7afb      	ldrb	r3, [r7, #11]
 800c4e6:	3301      	adds	r3, #1
 800c4e8:	72fb      	strb	r3, [r7, #11]
      break;
 800c4ea:	e06f      	b.n	800c5cc <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4f2:	68db      	ldr	r3, [r3, #12]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d00b      	beq.n	800c510 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4fe:	68db      	ldr	r3, [r3, #12]
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	7c12      	ldrb	r2, [r2, #16]
 800c504:	f107 0108 	add.w	r1, r7, #8
 800c508:	4610      	mov	r0, r2
 800c50a:	4798      	blx	r3
 800c50c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c50e:	e05d      	b.n	800c5cc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c510:	6839      	ldr	r1, [r7, #0]
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f000 fa76 	bl	800ca04 <USBD_CtlError>
        err++;
 800c518:	7afb      	ldrb	r3, [r7, #11]
 800c51a:	3301      	adds	r3, #1
 800c51c:	72fb      	strb	r3, [r7, #11]
      break;
 800c51e:	e055      	b.n	800c5cc <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c526:	691b      	ldr	r3, [r3, #16]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d00b      	beq.n	800c544 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c532:	691b      	ldr	r3, [r3, #16]
 800c534:	687a      	ldr	r2, [r7, #4]
 800c536:	7c12      	ldrb	r2, [r2, #16]
 800c538:	f107 0108 	add.w	r1, r7, #8
 800c53c:	4610      	mov	r0, r2
 800c53e:	4798      	blx	r3
 800c540:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c542:	e043      	b.n	800c5cc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c544:	6839      	ldr	r1, [r7, #0]
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 fa5c 	bl	800ca04 <USBD_CtlError>
        err++;
 800c54c:	7afb      	ldrb	r3, [r7, #11]
 800c54e:	3301      	adds	r3, #1
 800c550:	72fb      	strb	r3, [r7, #11]
      break;
 800c552:	e03b      	b.n	800c5cc <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c55a:	695b      	ldr	r3, [r3, #20]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d00b      	beq.n	800c578 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c566:	695b      	ldr	r3, [r3, #20]
 800c568:	687a      	ldr	r2, [r7, #4]
 800c56a:	7c12      	ldrb	r2, [r2, #16]
 800c56c:	f107 0108 	add.w	r1, r7, #8
 800c570:	4610      	mov	r0, r2
 800c572:	4798      	blx	r3
 800c574:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c576:	e029      	b.n	800c5cc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c578:	6839      	ldr	r1, [r7, #0]
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 fa42 	bl	800ca04 <USBD_CtlError>
        err++;
 800c580:	7afb      	ldrb	r3, [r7, #11]
 800c582:	3301      	adds	r3, #1
 800c584:	72fb      	strb	r3, [r7, #11]
      break;
 800c586:	e021      	b.n	800c5cc <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c58e:	699b      	ldr	r3, [r3, #24]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d00b      	beq.n	800c5ac <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c59a:	699b      	ldr	r3, [r3, #24]
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	7c12      	ldrb	r2, [r2, #16]
 800c5a0:	f107 0108 	add.w	r1, r7, #8
 800c5a4:	4610      	mov	r0, r2
 800c5a6:	4798      	blx	r3
 800c5a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c5aa:	e00f      	b.n	800c5cc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c5ac:	6839      	ldr	r1, [r7, #0]
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 fa28 	bl	800ca04 <USBD_CtlError>
        err++;
 800c5b4:	7afb      	ldrb	r3, [r7, #11]
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	72fb      	strb	r3, [r7, #11]
      break;
 800c5ba:	e007      	b.n	800c5cc <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800c5bc:	6839      	ldr	r1, [r7, #0]
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 fa20 	bl	800ca04 <USBD_CtlError>
      err++;
 800c5c4:	7afb      	ldrb	r3, [r7, #11]
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800c5ca:	bf00      	nop
    }
    break;
 800c5cc:	e037      	b.n	800c63e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	7c1b      	ldrb	r3, [r3, #16]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d109      	bne.n	800c5ea <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5de:	f107 0208 	add.w	r2, r7, #8
 800c5e2:	4610      	mov	r0, r2
 800c5e4:	4798      	blx	r3
 800c5e6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c5e8:	e029      	b.n	800c63e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800c5ea:	6839      	ldr	r1, [r7, #0]
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f000 fa09 	bl	800ca04 <USBD_CtlError>
      err++;
 800c5f2:	7afb      	ldrb	r3, [r7, #11]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	72fb      	strb	r3, [r7, #11]
    break;
 800c5f8:	e021      	b.n	800c63e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	7c1b      	ldrb	r3, [r3, #16]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d10d      	bne.n	800c61e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c60a:	f107 0208 	add.w	r2, r7, #8
 800c60e:	4610      	mov	r0, r2
 800c610:	4798      	blx	r3
 800c612:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	3301      	adds	r3, #1
 800c618:	2207      	movs	r2, #7
 800c61a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c61c:	e00f      	b.n	800c63e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800c61e:	6839      	ldr	r1, [r7, #0]
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 f9ef 	bl	800ca04 <USBD_CtlError>
      err++;
 800c626:	7afb      	ldrb	r3, [r7, #11]
 800c628:	3301      	adds	r3, #1
 800c62a:	72fb      	strb	r3, [r7, #11]
    break;
 800c62c:	e007      	b.n	800c63e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800c62e:	6839      	ldr	r1, [r7, #0]
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f000 f9e7 	bl	800ca04 <USBD_CtlError>
    err++;
 800c636:	7afb      	ldrb	r3, [r7, #11]
 800c638:	3301      	adds	r3, #1
 800c63a:	72fb      	strb	r3, [r7, #11]
    break;
 800c63c:	bf00      	nop
  }

  if (err != 0U)
 800c63e:	7afb      	ldrb	r3, [r7, #11]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d11e      	bne.n	800c682 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	88db      	ldrh	r3, [r3, #6]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d016      	beq.n	800c67a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800c64c:	893b      	ldrh	r3, [r7, #8]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d00e      	beq.n	800c670 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	88da      	ldrh	r2, [r3, #6]
 800c656:	893b      	ldrh	r3, [r7, #8]
 800c658:	4293      	cmp	r3, r2
 800c65a:	bf28      	it	cs
 800c65c:	4613      	movcs	r3, r2
 800c65e:	b29b      	uxth	r3, r3
 800c660:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800c662:	893b      	ldrh	r3, [r7, #8]
 800c664:	461a      	mov	r2, r3
 800c666:	68f9      	ldr	r1, [r7, #12]
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f000 fa3c 	bl	800cae6 <USBD_CtlSendData>
 800c66e:	e009      	b.n	800c684 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800c670:	6839      	ldr	r1, [r7, #0]
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f000 f9c6 	bl	800ca04 <USBD_CtlError>
 800c678:	e004      	b.n	800c684 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f000 fa8d 	bl	800cb9a <USBD_CtlSendStatus>
 800c680:	e000      	b.n	800c684 <USBD_GetDescriptor+0x2cc>
    return;
 800c682:	bf00      	nop
    }
  }
}
 800c684:	3710      	adds	r7, #16
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
 800c68a:	bf00      	nop

0800c68c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b084      	sub	sp, #16
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	889b      	ldrh	r3, [r3, #4]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d130      	bne.n	800c700 <USBD_SetAddress+0x74>
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	88db      	ldrh	r3, [r3, #6]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d12c      	bne.n	800c700 <USBD_SetAddress+0x74>
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	885b      	ldrh	r3, [r3, #2]
 800c6aa:	2b7f      	cmp	r3, #127	; 0x7f
 800c6ac:	d828      	bhi.n	800c700 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	885b      	ldrh	r3, [r3, #2]
 800c6b2:	b2db      	uxtb	r3, r3
 800c6b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6c0:	2b03      	cmp	r3, #3
 800c6c2:	d104      	bne.n	800c6ce <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c6c4:	6839      	ldr	r1, [r7, #0]
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f000 f99c 	bl	800ca04 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6cc:	e01c      	b.n	800c708 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	7bfa      	ldrb	r2, [r7, #15]
 800c6d2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c6d6:	7bfb      	ldrb	r3, [r7, #15]
 800c6d8:	4619      	mov	r1, r3
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f004 f888 	bl	80107f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f000 fa5a 	bl	800cb9a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c6e6:	7bfb      	ldrb	r3, [r7, #15]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d004      	beq.n	800c6f6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2202      	movs	r2, #2
 800c6f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6f4:	e008      	b.n	800c708 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6fe:	e003      	b.n	800c708 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c700:	6839      	ldr	r1, [r7, #0]
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f000 f97e 	bl	800ca04 <USBD_CtlError>
  }
}
 800c708:	bf00      	nop
 800c70a:	3710      	adds	r7, #16
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c71a:	2300      	movs	r3, #0
 800c71c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	885b      	ldrh	r3, [r3, #2]
 800c722:	b2da      	uxtb	r2, r3
 800c724:	4b4b      	ldr	r3, [pc, #300]	; (800c854 <USBD_SetConfig+0x144>)
 800c726:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c728:	4b4a      	ldr	r3, [pc, #296]	; (800c854 <USBD_SetConfig+0x144>)
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	d905      	bls.n	800c73c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c730:	6839      	ldr	r1, [r7, #0]
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f000 f966 	bl	800ca04 <USBD_CtlError>
    return USBD_FAIL;
 800c738:	2303      	movs	r3, #3
 800c73a:	e087      	b.n	800c84c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c742:	2b02      	cmp	r3, #2
 800c744:	d002      	beq.n	800c74c <USBD_SetConfig+0x3c>
 800c746:	2b03      	cmp	r3, #3
 800c748:	d025      	beq.n	800c796 <USBD_SetConfig+0x86>
 800c74a:	e071      	b.n	800c830 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800c74c:	4b41      	ldr	r3, [pc, #260]	; (800c854 <USBD_SetConfig+0x144>)
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d01c      	beq.n	800c78e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800c754:	4b3f      	ldr	r3, [pc, #252]	; (800c854 <USBD_SetConfig+0x144>)
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	461a      	mov	r2, r3
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c75e:	4b3d      	ldr	r3, [pc, #244]	; (800c854 <USBD_SetConfig+0x144>)
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	4619      	mov	r1, r3
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f7ff f9a7 	bl	800bab8 <USBD_SetClassConfig>
 800c76a:	4603      	mov	r3, r0
 800c76c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800c76e:	7bfb      	ldrb	r3, [r7, #15]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d004      	beq.n	800c77e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800c774:	6839      	ldr	r1, [r7, #0]
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 f944 	bl	800ca04 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c77c:	e065      	b.n	800c84a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f000 fa0b 	bl	800cb9a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2203      	movs	r2, #3
 800c788:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c78c:	e05d      	b.n	800c84a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 fa03 	bl	800cb9a <USBD_CtlSendStatus>
    break;
 800c794:	e059      	b.n	800c84a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800c796:	4b2f      	ldr	r3, [pc, #188]	; (800c854 <USBD_SetConfig+0x144>)
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d112      	bne.n	800c7c4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2202      	movs	r2, #2
 800c7a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800c7a6:	4b2b      	ldr	r3, [pc, #172]	; (800c854 <USBD_SetConfig+0x144>)
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	461a      	mov	r2, r3
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c7b0:	4b28      	ldr	r3, [pc, #160]	; (800c854 <USBD_SetConfig+0x144>)
 800c7b2:	781b      	ldrb	r3, [r3, #0]
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f7ff f99a 	bl	800baf0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 f9ec 	bl	800cb9a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c7c2:	e042      	b.n	800c84a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800c7c4:	4b23      	ldr	r3, [pc, #140]	; (800c854 <USBD_SetConfig+0x144>)
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	d02a      	beq.n	800c828 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	685b      	ldr	r3, [r3, #4]
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	4619      	mov	r1, r3
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f7ff f988 	bl	800baf0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800c7e0:	4b1c      	ldr	r3, [pc, #112]	; (800c854 <USBD_SetConfig+0x144>)
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c7ea:	4b1a      	ldr	r3, [pc, #104]	; (800c854 <USBD_SetConfig+0x144>)
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f7ff f961 	bl	800bab8 <USBD_SetClassConfig>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800c7fa:	7bfb      	ldrb	r3, [r7, #15]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d00f      	beq.n	800c820 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800c800:	6839      	ldr	r1, [r7, #0]
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f000 f8fe 	bl	800ca04 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	b2db      	uxtb	r3, r3
 800c80e:	4619      	mov	r1, r3
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f7ff f96d 	bl	800baf0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2202      	movs	r2, #2
 800c81a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c81e:	e014      	b.n	800c84a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f000 f9ba 	bl	800cb9a <USBD_CtlSendStatus>
    break;
 800c826:	e010      	b.n	800c84a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f000 f9b6 	bl	800cb9a <USBD_CtlSendStatus>
    break;
 800c82e:	e00c      	b.n	800c84a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800c830:	6839      	ldr	r1, [r7, #0]
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f000 f8e6 	bl	800ca04 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c838:	4b06      	ldr	r3, [pc, #24]	; (800c854 <USBD_SetConfig+0x144>)
 800c83a:	781b      	ldrb	r3, [r3, #0]
 800c83c:	4619      	mov	r1, r3
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f7ff f956 	bl	800baf0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800c844:	2303      	movs	r3, #3
 800c846:	73fb      	strb	r3, [r7, #15]
    break;
 800c848:	bf00      	nop
  }

  return ret;
 800c84a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3710      	adds	r7, #16
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}
 800c854:	20000604 	.word	0x20000604

0800c858 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	88db      	ldrh	r3, [r3, #6]
 800c866:	2b01      	cmp	r3, #1
 800c868:	d004      	beq.n	800c874 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c86a:	6839      	ldr	r1, [r7, #0]
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f000 f8c9 	bl	800ca04 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800c872:	e021      	b.n	800c8b8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c87a:	2b01      	cmp	r3, #1
 800c87c:	db17      	blt.n	800c8ae <USBD_GetConfig+0x56>
 800c87e:	2b02      	cmp	r3, #2
 800c880:	dd02      	ble.n	800c888 <USBD_GetConfig+0x30>
 800c882:	2b03      	cmp	r3, #3
 800c884:	d00b      	beq.n	800c89e <USBD_GetConfig+0x46>
 800c886:	e012      	b.n	800c8ae <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2200      	movs	r2, #0
 800c88c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	3308      	adds	r3, #8
 800c892:	2201      	movs	r2, #1
 800c894:	4619      	mov	r1, r3
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 f925 	bl	800cae6 <USBD_CtlSendData>
      break;
 800c89c:	e00c      	b.n	800c8b8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	3304      	adds	r3, #4
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f000 f91d 	bl	800cae6 <USBD_CtlSendData>
      break;
 800c8ac:	e004      	b.n	800c8b8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800c8ae:	6839      	ldr	r1, [r7, #0]
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f000 f8a7 	bl	800ca04 <USBD_CtlError>
      break;
 800c8b6:	bf00      	nop
}
 800c8b8:	bf00      	nop
 800c8ba:	3708      	adds	r7, #8
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}

0800c8c0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b082      	sub	sp, #8
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
 800c8c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8d0:	3b01      	subs	r3, #1
 800c8d2:	2b02      	cmp	r3, #2
 800c8d4:	d81e      	bhi.n	800c914 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	88db      	ldrh	r3, [r3, #6]
 800c8da:	2b02      	cmp	r3, #2
 800c8dc:	d004      	beq.n	800c8e8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800c8de:	6839      	ldr	r1, [r7, #0]
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 f88f 	bl	800ca04 <USBD_CtlError>
      break;
 800c8e6:	e01a      	b.n	800c91e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d005      	beq.n	800c904 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	68db      	ldr	r3, [r3, #12]
 800c8fc:	f043 0202 	orr.w	r2, r3, #2
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	330c      	adds	r3, #12
 800c908:	2202      	movs	r2, #2
 800c90a:	4619      	mov	r1, r3
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f000 f8ea 	bl	800cae6 <USBD_CtlSendData>
    break;
 800c912:	e004      	b.n	800c91e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800c914:	6839      	ldr	r1, [r7, #0]
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 f874 	bl	800ca04 <USBD_CtlError>
    break;
 800c91c:	bf00      	nop
  }
}
 800c91e:	bf00      	nop
 800c920:	3708      	adds	r7, #8
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}

0800c926 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c926:	b580      	push	{r7, lr}
 800c928:	b082      	sub	sp, #8
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]
 800c92e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	885b      	ldrh	r3, [r3, #2]
 800c934:	2b01      	cmp	r3, #1
 800c936:	d106      	bne.n	800c946 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2201      	movs	r2, #1
 800c93c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f000 f92a 	bl	800cb9a <USBD_CtlSendStatus>
  }
}
 800c946:	bf00      	nop
 800c948:	3708      	adds	r7, #8
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c94e:	b580      	push	{r7, lr}
 800c950:	b082      	sub	sp, #8
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
 800c956:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c95e:	3b01      	subs	r3, #1
 800c960:	2b02      	cmp	r3, #2
 800c962:	d80b      	bhi.n	800c97c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	885b      	ldrh	r3, [r3, #2]
 800c968:	2b01      	cmp	r3, #1
 800c96a:	d10c      	bne.n	800c986 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2200      	movs	r2, #0
 800c970:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f000 f910 	bl	800cb9a <USBD_CtlSendStatus>
      }
      break;
 800c97a:	e004      	b.n	800c986 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c97c:	6839      	ldr	r1, [r7, #0]
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f000 f840 	bl	800ca04 <USBD_CtlError>
      break;
 800c984:	e000      	b.n	800c988 <USBD_ClrFeature+0x3a>
      break;
 800c986:	bf00      	nop
  }
}
 800c988:	bf00      	nop
 800c98a:	3708      	adds	r7, #8
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}

0800c990 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b084      	sub	sp, #16
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	781a      	ldrb	r2, [r3, #0]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	781a      	ldrb	r2, [r3, #0]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c9ba:	68f8      	ldr	r0, [r7, #12]
 800c9bc:	f7ff fad3 	bl	800bf66 <SWAPBYTE>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	461a      	mov	r2, r3
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	3301      	adds	r3, #1
 800c9cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c9d4:	68f8      	ldr	r0, [r7, #12]
 800c9d6:	f7ff fac6 	bl	800bf66 <SWAPBYTE>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	461a      	mov	r2, r3
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	3301      	adds	r3, #1
 800c9e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c9ee:	68f8      	ldr	r0, [r7, #12]
 800c9f0:	f7ff fab9 	bl	800bf66 <SWAPBYTE>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	80da      	strh	r2, [r3, #6]
}
 800c9fc:	bf00      	nop
 800c9fe:	3710      	adds	r7, #16
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca0e:	2180      	movs	r1, #128	; 0x80
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f003 fe83 	bl	801071c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ca16:	2100      	movs	r1, #0
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f003 fe7f 	bl	801071c <USBD_LL_StallEP>
}
 800ca1e:	bf00      	nop
 800ca20:	3708      	adds	r7, #8
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}

0800ca26 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ca26:	b580      	push	{r7, lr}
 800ca28:	b086      	sub	sp, #24
 800ca2a:	af00      	add	r7, sp, #0
 800ca2c:	60f8      	str	r0, [r7, #12]
 800ca2e:	60b9      	str	r1, [r7, #8]
 800ca30:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ca32:	2300      	movs	r3, #0
 800ca34:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d036      	beq.n	800caaa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ca40:	6938      	ldr	r0, [r7, #16]
 800ca42:	f000 f836 	bl	800cab2 <USBD_GetLen>
 800ca46:	4603      	mov	r3, r0
 800ca48:	3301      	adds	r3, #1
 800ca4a:	b29b      	uxth	r3, r3
 800ca4c:	005b      	lsls	r3, r3, #1
 800ca4e:	b29a      	uxth	r2, r3
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ca54:	7dfb      	ldrb	r3, [r7, #23]
 800ca56:	68ba      	ldr	r2, [r7, #8]
 800ca58:	4413      	add	r3, r2
 800ca5a:	687a      	ldr	r2, [r7, #4]
 800ca5c:	7812      	ldrb	r2, [r2, #0]
 800ca5e:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca60:	7dfb      	ldrb	r3, [r7, #23]
 800ca62:	3301      	adds	r3, #1
 800ca64:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ca66:	7dfb      	ldrb	r3, [r7, #23]
 800ca68:	68ba      	ldr	r2, [r7, #8]
 800ca6a:	4413      	add	r3, r2
 800ca6c:	2203      	movs	r2, #3
 800ca6e:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca70:	7dfb      	ldrb	r3, [r7, #23]
 800ca72:	3301      	adds	r3, #1
 800ca74:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ca76:	e013      	b.n	800caa0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ca78:	7dfb      	ldrb	r3, [r7, #23]
 800ca7a:	68ba      	ldr	r2, [r7, #8]
 800ca7c:	4413      	add	r3, r2
 800ca7e:	693a      	ldr	r2, [r7, #16]
 800ca80:	7812      	ldrb	r2, [r2, #0]
 800ca82:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	3301      	adds	r3, #1
 800ca88:	613b      	str	r3, [r7, #16]
    idx++;
 800ca8a:	7dfb      	ldrb	r3, [r7, #23]
 800ca8c:	3301      	adds	r3, #1
 800ca8e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ca90:	7dfb      	ldrb	r3, [r7, #23]
 800ca92:	68ba      	ldr	r2, [r7, #8]
 800ca94:	4413      	add	r3, r2
 800ca96:	2200      	movs	r2, #0
 800ca98:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca9a:	7dfb      	ldrb	r3, [r7, #23]
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d1e7      	bne.n	800ca78 <USBD_GetString+0x52>
 800caa8:	e000      	b.n	800caac <USBD_GetString+0x86>
    return;
 800caaa:	bf00      	nop
  }
}
 800caac:	3718      	adds	r7, #24
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}

0800cab2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cab2:	b480      	push	{r7}
 800cab4:	b085      	sub	sp, #20
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800caba:	2300      	movs	r3, #0
 800cabc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cac2:	e005      	b.n	800cad0 <USBD_GetLen+0x1e>
  {
    len++;
 800cac4:	7bfb      	ldrb	r3, [r7, #15]
 800cac6:	3301      	adds	r3, #1
 800cac8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	3301      	adds	r3, #1
 800cace:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d1f5      	bne.n	800cac4 <USBD_GetLen+0x12>
  }

  return len;
 800cad8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3714      	adds	r7, #20
 800cade:	46bd      	mov	sp, r7
 800cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae4:	4770      	bx	lr

0800cae6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cae6:	b580      	push	{r7, lr}
 800cae8:	b084      	sub	sp, #16
 800caea:	af00      	add	r7, sp, #0
 800caec:	60f8      	str	r0, [r7, #12]
 800caee:	60b9      	str	r1, [r7, #8]
 800caf0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2202      	movs	r2, #2
 800caf6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	687a      	ldr	r2, [r7, #4]
 800cb04:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	68ba      	ldr	r2, [r7, #8]
 800cb0a:	2100      	movs	r1, #0
 800cb0c:	68f8      	ldr	r0, [r7, #12]
 800cb0e:	f003 fe8e 	bl	801082e <USBD_LL_Transmit>

  return USBD_OK;
 800cb12:	2300      	movs	r3, #0
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3710      	adds	r7, #16
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}

0800cb1c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b084      	sub	sp, #16
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	60f8      	str	r0, [r7, #12]
 800cb24:	60b9      	str	r1, [r7, #8]
 800cb26:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	68ba      	ldr	r2, [r7, #8]
 800cb2c:	2100      	movs	r1, #0
 800cb2e:	68f8      	ldr	r0, [r7, #12]
 800cb30:	f003 fe7d 	bl	801082e <USBD_LL_Transmit>

  return USBD_OK;
 800cb34:	2300      	movs	r3, #0
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3710      	adds	r7, #16
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}

0800cb3e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cb3e:	b580      	push	{r7, lr}
 800cb40:	b084      	sub	sp, #16
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	60f8      	str	r0, [r7, #12]
 800cb46:	60b9      	str	r1, [r7, #8]
 800cb48:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2203      	movs	r2, #3
 800cb4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	687a      	ldr	r2, [r7, #4]
 800cb56:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	68ba      	ldr	r2, [r7, #8]
 800cb66:	2100      	movs	r1, #0
 800cb68:	68f8      	ldr	r0, [r7, #12]
 800cb6a:	f003 fe81 	bl	8010870 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb6e:	2300      	movs	r3, #0
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3710      	adds	r7, #16
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b084      	sub	sp, #16
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	60f8      	str	r0, [r7, #12]
 800cb80:	60b9      	str	r1, [r7, #8]
 800cb82:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	68ba      	ldr	r2, [r7, #8]
 800cb88:	2100      	movs	r1, #0
 800cb8a:	68f8      	ldr	r0, [r7, #12]
 800cb8c:	f003 fe70 	bl	8010870 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb90:	2300      	movs	r3, #0
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3710      	adds	r7, #16
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}

0800cb9a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb9a:	b580      	push	{r7, lr}
 800cb9c:	b082      	sub	sp, #8
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2204      	movs	r2, #4
 800cba6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cbaa:	2300      	movs	r3, #0
 800cbac:	2200      	movs	r2, #0
 800cbae:	2100      	movs	r1, #0
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f003 fe3c 	bl	801082e <USBD_LL_Transmit>

  return USBD_OK;
 800cbb6:	2300      	movs	r3, #0
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3708      	adds	r7, #8
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}

0800cbc0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2205      	movs	r2, #5
 800cbcc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	2100      	movs	r1, #0
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f003 fe4a 	bl	8010870 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cbdc:	2300      	movs	r3, #0
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3708      	adds	r7, #8
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}

0800cbe6 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cbe6:	b480      	push	{r7}
 800cbe8:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800cbea:	bf00      	nop
 800cbec:	46bd      	mov	sp, r7
 800cbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf2:	4770      	bx	lr

0800cbf4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cbf4:	b480      	push	{r7}
 800cbf6:	b085      	sub	sp, #20
 800cbf8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbfa:	f3ef 8305 	mrs	r3, IPSR
 800cbfe:	60bb      	str	r3, [r7, #8]
  return(result);
 800cc00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d10f      	bne.n	800cc26 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc06:	f3ef 8310 	mrs	r3, PRIMASK
 800cc0a:	607b      	str	r3, [r7, #4]
  return(result);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d105      	bne.n	800cc1e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cc12:	f3ef 8311 	mrs	r3, BASEPRI
 800cc16:	603b      	str	r3, [r7, #0]
  return(result);
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d007      	beq.n	800cc2e <osKernelInitialize+0x3a>
 800cc1e:	4b0e      	ldr	r3, [pc, #56]	; (800cc58 <osKernelInitialize+0x64>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	2b02      	cmp	r3, #2
 800cc24:	d103      	bne.n	800cc2e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800cc26:	f06f 0305 	mvn.w	r3, #5
 800cc2a:	60fb      	str	r3, [r7, #12]
 800cc2c:	e00c      	b.n	800cc48 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cc2e:	4b0a      	ldr	r3, [pc, #40]	; (800cc58 <osKernelInitialize+0x64>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d105      	bne.n	800cc42 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cc36:	4b08      	ldr	r3, [pc, #32]	; (800cc58 <osKernelInitialize+0x64>)
 800cc38:	2201      	movs	r2, #1
 800cc3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	60fb      	str	r3, [r7, #12]
 800cc40:	e002      	b.n	800cc48 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800cc42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc46:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cc48:	68fb      	ldr	r3, [r7, #12]
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3714      	adds	r7, #20
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc54:	4770      	bx	lr
 800cc56:	bf00      	nop
 800cc58:	20000608 	.word	0x20000608

0800cc5c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b084      	sub	sp, #16
 800cc60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc62:	f3ef 8305 	mrs	r3, IPSR
 800cc66:	60bb      	str	r3, [r7, #8]
  return(result);
 800cc68:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d10f      	bne.n	800cc8e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc6e:	f3ef 8310 	mrs	r3, PRIMASK
 800cc72:	607b      	str	r3, [r7, #4]
  return(result);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d105      	bne.n	800cc86 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cc7a:	f3ef 8311 	mrs	r3, BASEPRI
 800cc7e:	603b      	str	r3, [r7, #0]
  return(result);
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d007      	beq.n	800cc96 <osKernelStart+0x3a>
 800cc86:	4b0f      	ldr	r3, [pc, #60]	; (800ccc4 <osKernelStart+0x68>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	2b02      	cmp	r3, #2
 800cc8c:	d103      	bne.n	800cc96 <osKernelStart+0x3a>
    stat = osErrorISR;
 800cc8e:	f06f 0305 	mvn.w	r3, #5
 800cc92:	60fb      	str	r3, [r7, #12]
 800cc94:	e010      	b.n	800ccb8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cc96:	4b0b      	ldr	r3, [pc, #44]	; (800ccc4 <osKernelStart+0x68>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	2b01      	cmp	r3, #1
 800cc9c:	d109      	bne.n	800ccb2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cc9e:	f7ff ffa2 	bl	800cbe6 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cca2:	4b08      	ldr	r3, [pc, #32]	; (800ccc4 <osKernelStart+0x68>)
 800cca4:	2202      	movs	r2, #2
 800cca6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cca8:	f001 fb84 	bl	800e3b4 <vTaskStartScheduler>
      stat = osOK;
 800ccac:	2300      	movs	r3, #0
 800ccae:	60fb      	str	r3, [r7, #12]
 800ccb0:	e002      	b.n	800ccb8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800ccb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ccb6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ccb8:	68fb      	ldr	r3, [r7, #12]
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3710      	adds	r7, #16
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	20000608 	.word	0x20000608

0800ccc8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b090      	sub	sp, #64	; 0x40
 800cccc:	af04      	add	r7, sp, #16
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccd8:	f3ef 8305 	mrs	r3, IPSR
 800ccdc:	61fb      	str	r3, [r7, #28]
  return(result);
 800ccde:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	f040 808f 	bne.w	800ce04 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cce6:	f3ef 8310 	mrs	r3, PRIMASK
 800ccea:	61bb      	str	r3, [r7, #24]
  return(result);
 800ccec:	69bb      	ldr	r3, [r7, #24]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d105      	bne.n	800ccfe <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ccf2:	f3ef 8311 	mrs	r3, BASEPRI
 800ccf6:	617b      	str	r3, [r7, #20]
  return(result);
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d003      	beq.n	800cd06 <osThreadNew+0x3e>
 800ccfe:	4b44      	ldr	r3, [pc, #272]	; (800ce10 <osThreadNew+0x148>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	2b02      	cmp	r3, #2
 800cd04:	d07e      	beq.n	800ce04 <osThreadNew+0x13c>
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d07b      	beq.n	800ce04 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800cd0c:	2380      	movs	r3, #128	; 0x80
 800cd0e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800cd10:	2318      	movs	r3, #24
 800cd12:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800cd14:	2300      	movs	r3, #0
 800cd16:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800cd18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd1c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d045      	beq.n	800cdb0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d002      	beq.n	800cd32 <osThreadNew+0x6a>
        name = attr->name;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	699b      	ldr	r3, [r3, #24]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d002      	beq.n	800cd40 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	699b      	ldr	r3, [r3, #24]
 800cd3e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d008      	beq.n	800cd58 <osThreadNew+0x90>
 800cd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd48:	2b38      	cmp	r3, #56	; 0x38
 800cd4a:	d805      	bhi.n	800cd58 <osThreadNew+0x90>
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	f003 0301 	and.w	r3, r3, #1
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d001      	beq.n	800cd5c <osThreadNew+0x94>
        return (NULL);
 800cd58:	2300      	movs	r3, #0
 800cd5a:	e054      	b.n	800ce06 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	695b      	ldr	r3, [r3, #20]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d003      	beq.n	800cd6c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	695b      	ldr	r3, [r3, #20]
 800cd68:	089b      	lsrs	r3, r3, #2
 800cd6a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	689b      	ldr	r3, [r3, #8]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d00e      	beq.n	800cd92 <osThreadNew+0xca>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	68db      	ldr	r3, [r3, #12]
 800cd78:	2b63      	cmp	r3, #99	; 0x63
 800cd7a:	d90a      	bls.n	800cd92 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d006      	beq.n	800cd92 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	695b      	ldr	r3, [r3, #20]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d002      	beq.n	800cd92 <osThreadNew+0xca>
        mem = 1;
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	623b      	str	r3, [r7, #32]
 800cd90:	e010      	b.n	800cdb4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	689b      	ldr	r3, [r3, #8]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d10c      	bne.n	800cdb4 <osThreadNew+0xec>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	68db      	ldr	r3, [r3, #12]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d108      	bne.n	800cdb4 <osThreadNew+0xec>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	691b      	ldr	r3, [r3, #16]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d104      	bne.n	800cdb4 <osThreadNew+0xec>
          mem = 0;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	623b      	str	r3, [r7, #32]
 800cdae:	e001      	b.n	800cdb4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800cdb4:	6a3b      	ldr	r3, [r7, #32]
 800cdb6:	2b01      	cmp	r3, #1
 800cdb8:	d110      	bne.n	800cddc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cdc2:	9202      	str	r2, [sp, #8]
 800cdc4:	9301      	str	r3, [sp, #4]
 800cdc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc8:	9300      	str	r3, [sp, #0]
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cdd0:	68f8      	ldr	r0, [r7, #12]
 800cdd2:	f001 f89d 	bl	800df10 <xTaskCreateStatic>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	613b      	str	r3, [r7, #16]
 800cdda:	e013      	b.n	800ce04 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800cddc:	6a3b      	ldr	r3, [r7, #32]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d110      	bne.n	800ce04 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde4:	b29a      	uxth	r2, r3
 800cde6:	f107 0310 	add.w	r3, r7, #16
 800cdea:	9301      	str	r3, [sp, #4]
 800cdec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdee:	9300      	str	r3, [sp, #0]
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cdf4:	68f8      	ldr	r0, [r7, #12]
 800cdf6:	f001 f8e5 	bl	800dfc4 <xTaskCreate>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d001      	beq.n	800ce04 <osThreadNew+0x13c>
          hTask = NULL;
 800ce00:	2300      	movs	r3, #0
 800ce02:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ce04:	693b      	ldr	r3, [r7, #16]
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3730      	adds	r7, #48	; 0x30
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	bf00      	nop
 800ce10:	20000608 	.word	0x20000608

0800ce14 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b086      	sub	sp, #24
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce1c:	f3ef 8305 	mrs	r3, IPSR
 800ce20:	613b      	str	r3, [r7, #16]
  return(result);
 800ce22:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d10f      	bne.n	800ce48 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce28:	f3ef 8310 	mrs	r3, PRIMASK
 800ce2c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d105      	bne.n	800ce40 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce34:	f3ef 8311 	mrs	r3, BASEPRI
 800ce38:	60bb      	str	r3, [r7, #8]
  return(result);
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d007      	beq.n	800ce50 <osDelay+0x3c>
 800ce40:	4b0a      	ldr	r3, [pc, #40]	; (800ce6c <osDelay+0x58>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	2b02      	cmp	r3, #2
 800ce46:	d103      	bne.n	800ce50 <osDelay+0x3c>
    stat = osErrorISR;
 800ce48:	f06f 0305 	mvn.w	r3, #5
 800ce4c:	617b      	str	r3, [r7, #20]
 800ce4e:	e007      	b.n	800ce60 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800ce50:	2300      	movs	r3, #0
 800ce52:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d002      	beq.n	800ce60 <osDelay+0x4c>
      vTaskDelay(ticks);
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f001 fa76 	bl	800e34c <vTaskDelay>
    }
  }

  return (stat);
 800ce60:	697b      	ldr	r3, [r7, #20]
}
 800ce62:	4618      	mov	r0, r3
 800ce64:	3718      	adds	r7, #24
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
 800ce6a:	bf00      	nop
 800ce6c:	20000608 	.word	0x20000608

0800ce70 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b08c      	sub	sp, #48	; 0x30
 800ce74:	af02      	add	r7, sp, #8
 800ce76:	60f8      	str	r0, [r7, #12]
 800ce78:	60b9      	str	r1, [r7, #8]
 800ce7a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce80:	f3ef 8305 	mrs	r3, IPSR
 800ce84:	61bb      	str	r3, [r7, #24]
  return(result);
 800ce86:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d170      	bne.n	800cf6e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce8c:	f3ef 8310 	mrs	r3, PRIMASK
 800ce90:	617b      	str	r3, [r7, #20]
  return(result);
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d105      	bne.n	800cea4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce98:	f3ef 8311 	mrs	r3, BASEPRI
 800ce9c:	613b      	str	r3, [r7, #16]
  return(result);
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d003      	beq.n	800ceac <osMessageQueueNew+0x3c>
 800cea4:	4b34      	ldr	r3, [pc, #208]	; (800cf78 <osMessageQueueNew+0x108>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	2b02      	cmp	r3, #2
 800ceaa:	d060      	beq.n	800cf6e <osMessageQueueNew+0xfe>
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d05d      	beq.n	800cf6e <osMessageQueueNew+0xfe>
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d05a      	beq.n	800cf6e <osMessageQueueNew+0xfe>
    mem = -1;
 800ceb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cebc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d029      	beq.n	800cf18 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	689b      	ldr	r3, [r3, #8]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d012      	beq.n	800cef2 <osMessageQueueNew+0x82>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	68db      	ldr	r3, [r3, #12]
 800ced0:	2b4f      	cmp	r3, #79	; 0x4f
 800ced2:	d90e      	bls.n	800cef2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d00a      	beq.n	800cef2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	695a      	ldr	r2, [r3, #20]
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	68b9      	ldr	r1, [r7, #8]
 800cee4:	fb01 f303 	mul.w	r3, r1, r3
 800cee8:	429a      	cmp	r2, r3
 800ceea:	d302      	bcc.n	800cef2 <osMessageQueueNew+0x82>
        mem = 1;
 800ceec:	2301      	movs	r3, #1
 800ceee:	623b      	str	r3, [r7, #32]
 800cef0:	e014      	b.n	800cf1c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	689b      	ldr	r3, [r3, #8]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d110      	bne.n	800cf1c <osMessageQueueNew+0xac>
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	68db      	ldr	r3, [r3, #12]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d10c      	bne.n	800cf1c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d108      	bne.n	800cf1c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	695b      	ldr	r3, [r3, #20]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d104      	bne.n	800cf1c <osMessageQueueNew+0xac>
          mem = 0;
 800cf12:	2300      	movs	r3, #0
 800cf14:	623b      	str	r3, [r7, #32]
 800cf16:	e001      	b.n	800cf1c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800cf1c:	6a3b      	ldr	r3, [r7, #32]
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	d10c      	bne.n	800cf3c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	691a      	ldr	r2, [r3, #16]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6899      	ldr	r1, [r3, #8]
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	9300      	str	r3, [sp, #0]
 800cf2e:	460b      	mov	r3, r1
 800cf30:	68b9      	ldr	r1, [r7, #8]
 800cf32:	68f8      	ldr	r0, [r7, #12]
 800cf34:	f000 faa0 	bl	800d478 <xQueueGenericCreateStatic>
 800cf38:	6278      	str	r0, [r7, #36]	; 0x24
 800cf3a:	e008      	b.n	800cf4e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800cf3c:	6a3b      	ldr	r3, [r7, #32]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d105      	bne.n	800cf4e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800cf42:	2200      	movs	r2, #0
 800cf44:	68b9      	ldr	r1, [r7, #8]
 800cf46:	68f8      	ldr	r0, [r7, #12]
 800cf48:	f000 fb09 	bl	800d55e <xQueueGenericCreate>
 800cf4c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800cf4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d00c      	beq.n	800cf6e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d003      	beq.n	800cf62 <osMessageQueueNew+0xf2>
        name = attr->name;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	61fb      	str	r3, [r7, #28]
 800cf60:	e001      	b.n	800cf66 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800cf62:	2300      	movs	r3, #0
 800cf64:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800cf66:	69f9      	ldr	r1, [r7, #28]
 800cf68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf6a:	f000 ff75 	bl	800de58 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800cf6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3728      	adds	r7, #40	; 0x28
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}
 800cf78:	20000608 	.word	0x20000608

0800cf7c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b08a      	sub	sp, #40	; 0x28
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	60f8      	str	r0, [r7, #12]
 800cf84:	60b9      	str	r1, [r7, #8]
 800cf86:	603b      	str	r3, [r7, #0]
 800cf88:	4613      	mov	r3, r2
 800cf8a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cf90:	2300      	movs	r3, #0
 800cf92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf94:	f3ef 8305 	mrs	r3, IPSR
 800cf98:	61fb      	str	r3, [r7, #28]
  return(result);
 800cf9a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d10f      	bne.n	800cfc0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfa0:	f3ef 8310 	mrs	r3, PRIMASK
 800cfa4:	61bb      	str	r3, [r7, #24]
  return(result);
 800cfa6:	69bb      	ldr	r3, [r7, #24]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d105      	bne.n	800cfb8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cfac:	f3ef 8311 	mrs	r3, BASEPRI
 800cfb0:	617b      	str	r3, [r7, #20]
  return(result);
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d02c      	beq.n	800d012 <osMessageQueuePut+0x96>
 800cfb8:	4b28      	ldr	r3, [pc, #160]	; (800d05c <osMessageQueuePut+0xe0>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	2b02      	cmp	r3, #2
 800cfbe:	d128      	bne.n	800d012 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cfc0:	6a3b      	ldr	r3, [r7, #32]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d005      	beq.n	800cfd2 <osMessageQueuePut+0x56>
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d002      	beq.n	800cfd2 <osMessageQueuePut+0x56>
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d003      	beq.n	800cfda <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800cfd2:	f06f 0303 	mvn.w	r3, #3
 800cfd6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cfd8:	e039      	b.n	800d04e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cfde:	f107 0210 	add.w	r2, r7, #16
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	68b9      	ldr	r1, [r7, #8]
 800cfe6:	6a38      	ldr	r0, [r7, #32]
 800cfe8:	f000 fc16 	bl	800d818 <xQueueGenericSendFromISR>
 800cfec:	4603      	mov	r3, r0
 800cfee:	2b01      	cmp	r3, #1
 800cff0:	d003      	beq.n	800cffa <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800cff2:	f06f 0302 	mvn.w	r3, #2
 800cff6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cff8:	e029      	b.n	800d04e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d026      	beq.n	800d04e <osMessageQueuePut+0xd2>
 800d000:	4b17      	ldr	r3, [pc, #92]	; (800d060 <osMessageQueuePut+0xe4>)
 800d002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d006:	601a      	str	r2, [r3, #0]
 800d008:	f3bf 8f4f 	dsb	sy
 800d00c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d010:	e01d      	b.n	800d04e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d012:	6a3b      	ldr	r3, [r7, #32]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d002      	beq.n	800d01e <osMessageQueuePut+0xa2>
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d103      	bne.n	800d026 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800d01e:	f06f 0303 	mvn.w	r3, #3
 800d022:	627b      	str	r3, [r7, #36]	; 0x24
 800d024:	e014      	b.n	800d050 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d026:	2300      	movs	r3, #0
 800d028:	683a      	ldr	r2, [r7, #0]
 800d02a:	68b9      	ldr	r1, [r7, #8]
 800d02c:	6a38      	ldr	r0, [r7, #32]
 800d02e:	f000 faf9 	bl	800d624 <xQueueGenericSend>
 800d032:	4603      	mov	r3, r0
 800d034:	2b01      	cmp	r3, #1
 800d036:	d00b      	beq.n	800d050 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d003      	beq.n	800d046 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800d03e:	f06f 0301 	mvn.w	r3, #1
 800d042:	627b      	str	r3, [r7, #36]	; 0x24
 800d044:	e004      	b.n	800d050 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800d046:	f06f 0302 	mvn.w	r3, #2
 800d04a:	627b      	str	r3, [r7, #36]	; 0x24
 800d04c:	e000      	b.n	800d050 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d04e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d052:	4618      	mov	r0, r3
 800d054:	3728      	adds	r7, #40	; 0x28
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	20000608 	.word	0x20000608
 800d060:	e000ed04 	.word	0xe000ed04

0800d064 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d064:	b580      	push	{r7, lr}
 800d066:	b08a      	sub	sp, #40	; 0x28
 800d068:	af00      	add	r7, sp, #0
 800d06a:	60f8      	str	r0, [r7, #12]
 800d06c:	60b9      	str	r1, [r7, #8]
 800d06e:	607a      	str	r2, [r7, #4]
 800d070:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d076:	2300      	movs	r3, #0
 800d078:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d07a:	f3ef 8305 	mrs	r3, IPSR
 800d07e:	61fb      	str	r3, [r7, #28]
  return(result);
 800d080:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d082:	2b00      	cmp	r3, #0
 800d084:	d10f      	bne.n	800d0a6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d086:	f3ef 8310 	mrs	r3, PRIMASK
 800d08a:	61bb      	str	r3, [r7, #24]
  return(result);
 800d08c:	69bb      	ldr	r3, [r7, #24]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d105      	bne.n	800d09e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d092:	f3ef 8311 	mrs	r3, BASEPRI
 800d096:	617b      	str	r3, [r7, #20]
  return(result);
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d02c      	beq.n	800d0f8 <osMessageQueueGet+0x94>
 800d09e:	4b28      	ldr	r3, [pc, #160]	; (800d140 <osMessageQueueGet+0xdc>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	2b02      	cmp	r3, #2
 800d0a4:	d128      	bne.n	800d0f8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d0a6:	6a3b      	ldr	r3, [r7, #32]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d005      	beq.n	800d0b8 <osMessageQueueGet+0x54>
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d002      	beq.n	800d0b8 <osMessageQueueGet+0x54>
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d003      	beq.n	800d0c0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800d0b8:	f06f 0303 	mvn.w	r3, #3
 800d0bc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d0be:	e038      	b.n	800d132 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d0c4:	f107 0310 	add.w	r3, r7, #16
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	68b9      	ldr	r1, [r7, #8]
 800d0cc:	6a38      	ldr	r0, [r7, #32]
 800d0ce:	f000 fd13 	bl	800daf8 <xQueueReceiveFromISR>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d003      	beq.n	800d0e0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800d0d8:	f06f 0302 	mvn.w	r3, #2
 800d0dc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d0de:	e028      	b.n	800d132 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d025      	beq.n	800d132 <osMessageQueueGet+0xce>
 800d0e6:	4b17      	ldr	r3, [pc, #92]	; (800d144 <osMessageQueueGet+0xe0>)
 800d0e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0ec:	601a      	str	r2, [r3, #0]
 800d0ee:	f3bf 8f4f 	dsb	sy
 800d0f2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d0f6:	e01c      	b.n	800d132 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d0f8:	6a3b      	ldr	r3, [r7, #32]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d002      	beq.n	800d104 <osMessageQueueGet+0xa0>
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d103      	bne.n	800d10c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800d104:	f06f 0303 	mvn.w	r3, #3
 800d108:	627b      	str	r3, [r7, #36]	; 0x24
 800d10a:	e013      	b.n	800d134 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d10c:	683a      	ldr	r2, [r7, #0]
 800d10e:	68b9      	ldr	r1, [r7, #8]
 800d110:	6a38      	ldr	r0, [r7, #32]
 800d112:	f000 fc15 	bl	800d940 <xQueueReceive>
 800d116:	4603      	mov	r3, r0
 800d118:	2b01      	cmp	r3, #1
 800d11a:	d00b      	beq.n	800d134 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d003      	beq.n	800d12a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800d122:	f06f 0301 	mvn.w	r3, #1
 800d126:	627b      	str	r3, [r7, #36]	; 0x24
 800d128:	e004      	b.n	800d134 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800d12a:	f06f 0302 	mvn.w	r3, #2
 800d12e:	627b      	str	r3, [r7, #36]	; 0x24
 800d130:	e000      	b.n	800d134 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d132:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d136:	4618      	mov	r0, r3
 800d138:	3728      	adds	r7, #40	; 0x28
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	20000608 	.word	0x20000608
 800d144:	e000ed04 	.word	0xe000ed04

0800d148 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800d148:	b580      	push	{r7, lr}
 800d14a:	b08c      	sub	sp, #48	; 0x30
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800d154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d156:	2b00      	cmp	r3, #0
 800d158:	d102      	bne.n	800d160 <osMessageQueueGetSpace+0x18>
    space = 0U;
 800d15a:	2300      	movs	r3, #0
 800d15c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d15e:	e033      	b.n	800d1c8 <osMessageQueueGetSpace+0x80>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d160:	f3ef 8305 	mrs	r3, IPSR
 800d164:	623b      	str	r3, [r7, #32]
  return(result);
 800d166:	6a3b      	ldr	r3, [r7, #32]
  }
  else if (IS_IRQ()) {
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d10f      	bne.n	800d18c <osMessageQueueGetSpace+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d16c:	f3ef 8310 	mrs	r3, PRIMASK
 800d170:	61fb      	str	r3, [r7, #28]
  return(result);
 800d172:	69fb      	ldr	r3, [r7, #28]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d105      	bne.n	800d184 <osMessageQueueGetSpace+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d178:	f3ef 8311 	mrs	r3, BASEPRI
 800d17c:	61bb      	str	r3, [r7, #24]
  return(result);
 800d17e:	69bb      	ldr	r3, [r7, #24]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d01d      	beq.n	800d1c0 <osMessageQueueGetSpace+0x78>
 800d184:	4b13      	ldr	r3, [pc, #76]	; (800d1d4 <osMessageQueueGetSpace+0x8c>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	2b02      	cmp	r3, #2
 800d18a:	d119      	bne.n	800d1c0 <osMessageQueueGetSpace+0x78>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d18c:	f3ef 8211 	mrs	r2, BASEPRI
 800d190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d194:	f383 8811 	msr	BASEPRI, r3
 800d198:	f3bf 8f6f 	isb	sy
 800d19c:	f3bf 8f4f 	dsb	sy
 800d1a0:	613a      	str	r2, [r7, #16]
 800d1a2:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d1a4:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800d1a6:	627b      	str	r3, [r7, #36]	; 0x24

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800d1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b0:	1ad3      	subs	r3, r2, r3
 800d1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	f383 8811 	msr	BASEPRI, r3

    taskEXIT_CRITICAL_FROM_ISR(isrm);
 800d1be:	e003      	b.n	800d1c8 <osMessageQueueGetSpace+0x80>
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800d1c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1c2:	f000 fd16 	bl	800dbf2 <uxQueueSpacesAvailable>
 800d1c6:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return (space);
 800d1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3730      	adds	r7, #48	; 0x30
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	20000608 	.word	0x20000608

0800d1d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d1d8:	b480      	push	{r7}
 800d1da:	b085      	sub	sp, #20
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	60f8      	str	r0, [r7, #12]
 800d1e0:	60b9      	str	r1, [r7, #8]
 800d1e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	4a07      	ldr	r2, [pc, #28]	; (800d204 <vApplicationGetIdleTaskMemory+0x2c>)
 800d1e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	4a06      	ldr	r2, [pc, #24]	; (800d208 <vApplicationGetIdleTaskMemory+0x30>)
 800d1ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2280      	movs	r2, #128	; 0x80
 800d1f4:	601a      	str	r2, [r3, #0]
}
 800d1f6:	bf00      	nop
 800d1f8:	3714      	adds	r7, #20
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d200:	4770      	bx	lr
 800d202:	bf00      	nop
 800d204:	2000060c 	.word	0x2000060c
 800d208:	20000670 	.word	0x20000670

0800d20c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d20c:	b480      	push	{r7}
 800d20e:	b085      	sub	sp, #20
 800d210:	af00      	add	r7, sp, #0
 800d212:	60f8      	str	r0, [r7, #12]
 800d214:	60b9      	str	r1, [r7, #8]
 800d216:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	4a07      	ldr	r2, [pc, #28]	; (800d238 <vApplicationGetTimerTaskMemory+0x2c>)
 800d21c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	4a06      	ldr	r2, [pc, #24]	; (800d23c <vApplicationGetTimerTaskMemory+0x30>)
 800d222:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d22a:	601a      	str	r2, [r3, #0]
}
 800d22c:	bf00      	nop
 800d22e:	3714      	adds	r7, #20
 800d230:	46bd      	mov	sp, r7
 800d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d236:	4770      	bx	lr
 800d238:	20000870 	.word	0x20000870
 800d23c:	200008d4 	.word	0x200008d4

0800d240 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d240:	b480      	push	{r7}
 800d242:	b083      	sub	sp, #12
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f103 0208 	add.w	r2, r3, #8
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d258:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f103 0208 	add.w	r2, r3, #8
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f103 0208 	add.w	r2, r3, #8
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d274:	bf00      	nop
 800d276:	370c      	adds	r7, #12
 800d278:	46bd      	mov	sp, r7
 800d27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27e:	4770      	bx	lr

0800d280 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d280:	b480      	push	{r7}
 800d282:	b083      	sub	sp, #12
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2200      	movs	r2, #0
 800d28c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d28e:	bf00      	nop
 800d290:	370c      	adds	r7, #12
 800d292:	46bd      	mov	sp, r7
 800d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d298:	4770      	bx	lr

0800d29a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d29a:	b480      	push	{r7}
 800d29c:	b085      	sub	sp, #20
 800d29e:	af00      	add	r7, sp, #0
 800d2a0:	6078      	str	r0, [r7, #4]
 800d2a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	685b      	ldr	r3, [r3, #4]
 800d2a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	68fa      	ldr	r2, [r7, #12]
 800d2ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	689a      	ldr	r2, [r3, #8]
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	689b      	ldr	r3, [r3, #8]
 800d2bc:	683a      	ldr	r2, [r7, #0]
 800d2be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	683a      	ldr	r2, [r7, #0]
 800d2c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	687a      	ldr	r2, [r7, #4]
 800d2ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	1c5a      	adds	r2, r3, #1
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	601a      	str	r2, [r3, #0]
}
 800d2d6:	bf00      	nop
 800d2d8:	3714      	adds	r7, #20
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr

0800d2e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d2e2:	b480      	push	{r7}
 800d2e4:	b085      	sub	sp, #20
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
 800d2ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d2f8:	d103      	bne.n	800d302 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	691b      	ldr	r3, [r3, #16]
 800d2fe:	60fb      	str	r3, [r7, #12]
 800d300:	e00c      	b.n	800d31c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	3308      	adds	r3, #8
 800d306:	60fb      	str	r3, [r7, #12]
 800d308:	e002      	b.n	800d310 <vListInsert+0x2e>
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	685b      	ldr	r3, [r3, #4]
 800d30e:	60fb      	str	r3, [r7, #12]
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	68ba      	ldr	r2, [r7, #8]
 800d318:	429a      	cmp	r2, r3
 800d31a:	d2f6      	bcs.n	800d30a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	685a      	ldr	r2, [r3, #4]
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	683a      	ldr	r2, [r7, #0]
 800d32a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	68fa      	ldr	r2, [r7, #12]
 800d330:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	683a      	ldr	r2, [r7, #0]
 800d336:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	687a      	ldr	r2, [r7, #4]
 800d33c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	1c5a      	adds	r2, r3, #1
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	601a      	str	r2, [r3, #0]
}
 800d348:	bf00      	nop
 800d34a:	3714      	adds	r7, #20
 800d34c:	46bd      	mov	sp, r7
 800d34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d352:	4770      	bx	lr

0800d354 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d354:	b480      	push	{r7}
 800d356:	b085      	sub	sp, #20
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	691b      	ldr	r3, [r3, #16]
 800d360:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	685b      	ldr	r3, [r3, #4]
 800d366:	687a      	ldr	r2, [r7, #4]
 800d368:	6892      	ldr	r2, [r2, #8]
 800d36a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	689b      	ldr	r3, [r3, #8]
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	6852      	ldr	r2, [r2, #4]
 800d374:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	685b      	ldr	r3, [r3, #4]
 800d37a:	687a      	ldr	r2, [r7, #4]
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d103      	bne.n	800d388 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	689a      	ldr	r2, [r3, #8]
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2200      	movs	r2, #0
 800d38c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	1e5a      	subs	r2, r3, #1
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3714      	adds	r7, #20
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a6:	4770      	bx	lr

0800d3a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b084      	sub	sp, #16
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d109      	bne.n	800d3d0 <xQueueGenericReset+0x28>
	__asm volatile
 800d3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c0:	f383 8811 	msr	BASEPRI, r3
 800d3c4:	f3bf 8f6f 	isb	sy
 800d3c8:	f3bf 8f4f 	dsb	sy
 800d3cc:	60bb      	str	r3, [r7, #8]
 800d3ce:	e7fe      	b.n	800d3ce <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800d3d0:	f002 fac4 	bl	800f95c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681a      	ldr	r2, [r3, #0]
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3dc:	68f9      	ldr	r1, [r7, #12]
 800d3de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d3e0:	fb01 f303 	mul.w	r3, r1, r3
 800d3e4:	441a      	add	r2, r3
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681a      	ldr	r2, [r3, #0]
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681a      	ldr	r2, [r3, #0]
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d400:	3b01      	subs	r3, #1
 800d402:	68f9      	ldr	r1, [r7, #12]
 800d404:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d406:	fb01 f303 	mul.w	r3, r1, r3
 800d40a:	441a      	add	r2, r3
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	22ff      	movs	r2, #255	; 0xff
 800d414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	22ff      	movs	r2, #255	; 0xff
 800d41c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d114      	bne.n	800d450 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	691b      	ldr	r3, [r3, #16]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d01a      	beq.n	800d464 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	3310      	adds	r3, #16
 800d432:	4618      	mov	r0, r3
 800d434:	f001 fa5c 	bl	800e8f0 <xTaskRemoveFromEventList>
 800d438:	4603      	mov	r3, r0
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d012      	beq.n	800d464 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d43e:	4b0d      	ldr	r3, [pc, #52]	; (800d474 <xQueueGenericReset+0xcc>)
 800d440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d444:	601a      	str	r2, [r3, #0]
 800d446:	f3bf 8f4f 	dsb	sy
 800d44a:	f3bf 8f6f 	isb	sy
 800d44e:	e009      	b.n	800d464 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	3310      	adds	r3, #16
 800d454:	4618      	mov	r0, r3
 800d456:	f7ff fef3 	bl	800d240 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	3324      	adds	r3, #36	; 0x24
 800d45e:	4618      	mov	r0, r3
 800d460:	f7ff feee 	bl	800d240 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d464:	f002 faa8 	bl	800f9b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d468:	2301      	movs	r3, #1
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3710      	adds	r7, #16
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}
 800d472:	bf00      	nop
 800d474:	e000ed04 	.word	0xe000ed04

0800d478 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b08e      	sub	sp, #56	; 0x38
 800d47c:	af02      	add	r7, sp, #8
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	607a      	str	r2, [r7, #4]
 800d484:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d109      	bne.n	800d4a0 <xQueueGenericCreateStatic+0x28>
 800d48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d490:	f383 8811 	msr	BASEPRI, r3
 800d494:	f3bf 8f6f 	isb	sy
 800d498:	f3bf 8f4f 	dsb	sy
 800d49c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d49e:	e7fe      	b.n	800d49e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d109      	bne.n	800d4ba <xQueueGenericCreateStatic+0x42>
 800d4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4aa:	f383 8811 	msr	BASEPRI, r3
 800d4ae:	f3bf 8f6f 	isb	sy
 800d4b2:	f3bf 8f4f 	dsb	sy
 800d4b6:	627b      	str	r3, [r7, #36]	; 0x24
 800d4b8:	e7fe      	b.n	800d4b8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d002      	beq.n	800d4c6 <xQueueGenericCreateStatic+0x4e>
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d001      	beq.n	800d4ca <xQueueGenericCreateStatic+0x52>
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	e000      	b.n	800d4cc <xQueueGenericCreateStatic+0x54>
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d109      	bne.n	800d4e4 <xQueueGenericCreateStatic+0x6c>
 800d4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d4:	f383 8811 	msr	BASEPRI, r3
 800d4d8:	f3bf 8f6f 	isb	sy
 800d4dc:	f3bf 8f4f 	dsb	sy
 800d4e0:	623b      	str	r3, [r7, #32]
 800d4e2:	e7fe      	b.n	800d4e2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d102      	bne.n	800d4f0 <xQueueGenericCreateStatic+0x78>
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d101      	bne.n	800d4f4 <xQueueGenericCreateStatic+0x7c>
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	e000      	b.n	800d4f6 <xQueueGenericCreateStatic+0x7e>
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d109      	bne.n	800d50e <xQueueGenericCreateStatic+0x96>
 800d4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4fe:	f383 8811 	msr	BASEPRI, r3
 800d502:	f3bf 8f6f 	isb	sy
 800d506:	f3bf 8f4f 	dsb	sy
 800d50a:	61fb      	str	r3, [r7, #28]
 800d50c:	e7fe      	b.n	800d50c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d50e:	2350      	movs	r3, #80	; 0x50
 800d510:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	2b50      	cmp	r3, #80	; 0x50
 800d516:	d009      	beq.n	800d52c <xQueueGenericCreateStatic+0xb4>
 800d518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d51c:	f383 8811 	msr	BASEPRI, r3
 800d520:	f3bf 8f6f 	isb	sy
 800d524:	f3bf 8f4f 	dsb	sy
 800d528:	61bb      	str	r3, [r7, #24]
 800d52a:	e7fe      	b.n	800d52a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d52c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d534:	2b00      	cmp	r3, #0
 800d536:	d00d      	beq.n	800d554 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d53a:	2201      	movs	r2, #1
 800d53c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d540:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d546:	9300      	str	r3, [sp, #0]
 800d548:	4613      	mov	r3, r2
 800d54a:	687a      	ldr	r2, [r7, #4]
 800d54c:	68b9      	ldr	r1, [r7, #8]
 800d54e:	68f8      	ldr	r0, [r7, #12]
 800d550:	f000 f844 	bl	800d5dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d556:	4618      	mov	r0, r3
 800d558:	3730      	adds	r7, #48	; 0x30
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}

0800d55e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d55e:	b580      	push	{r7, lr}
 800d560:	b08a      	sub	sp, #40	; 0x28
 800d562:	af02      	add	r7, sp, #8
 800d564:	60f8      	str	r0, [r7, #12]
 800d566:	60b9      	str	r1, [r7, #8]
 800d568:	4613      	mov	r3, r2
 800d56a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d109      	bne.n	800d586 <xQueueGenericCreate+0x28>
 800d572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d576:	f383 8811 	msr	BASEPRI, r3
 800d57a:	f3bf 8f6f 	isb	sy
 800d57e:	f3bf 8f4f 	dsb	sy
 800d582:	613b      	str	r3, [r7, #16]
 800d584:	e7fe      	b.n	800d584 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d102      	bne.n	800d592 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d58c:	2300      	movs	r3, #0
 800d58e:	61fb      	str	r3, [r7, #28]
 800d590:	e004      	b.n	800d59c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	68ba      	ldr	r2, [r7, #8]
 800d596:	fb02 f303 	mul.w	r3, r2, r3
 800d59a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d59c:	69fb      	ldr	r3, [r7, #28]
 800d59e:	3350      	adds	r3, #80	; 0x50
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f002 faf5 	bl	800fb90 <pvPortMalloc>
 800d5a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d5a8:	69bb      	ldr	r3, [r7, #24]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d011      	beq.n	800d5d2 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d5ae:	69bb      	ldr	r3, [r7, #24]
 800d5b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	3350      	adds	r3, #80	; 0x50
 800d5b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d5b8:	69bb      	ldr	r3, [r7, #24]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d5c0:	79fa      	ldrb	r2, [r7, #7]
 800d5c2:	69bb      	ldr	r3, [r7, #24]
 800d5c4:	9300      	str	r3, [sp, #0]
 800d5c6:	4613      	mov	r3, r2
 800d5c8:	697a      	ldr	r2, [r7, #20]
 800d5ca:	68b9      	ldr	r1, [r7, #8]
 800d5cc:	68f8      	ldr	r0, [r7, #12]
 800d5ce:	f000 f805 	bl	800d5dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d5d2:	69bb      	ldr	r3, [r7, #24]
	}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	3720      	adds	r7, #32
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}

0800d5dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b084      	sub	sp, #16
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	60f8      	str	r0, [r7, #12]
 800d5e4:	60b9      	str	r1, [r7, #8]
 800d5e6:	607a      	str	r2, [r7, #4]
 800d5e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d103      	bne.n	800d5f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d5f0:	69bb      	ldr	r3, [r7, #24]
 800d5f2:	69ba      	ldr	r2, [r7, #24]
 800d5f4:	601a      	str	r2, [r3, #0]
 800d5f6:	e002      	b.n	800d5fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d5f8:	69bb      	ldr	r3, [r7, #24]
 800d5fa:	687a      	ldr	r2, [r7, #4]
 800d5fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d5fe:	69bb      	ldr	r3, [r7, #24]
 800d600:	68fa      	ldr	r2, [r7, #12]
 800d602:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d604:	69bb      	ldr	r3, [r7, #24]
 800d606:	68ba      	ldr	r2, [r7, #8]
 800d608:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d60a:	2101      	movs	r1, #1
 800d60c:	69b8      	ldr	r0, [r7, #24]
 800d60e:	f7ff fecb 	bl	800d3a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d612:	69bb      	ldr	r3, [r7, #24]
 800d614:	78fa      	ldrb	r2, [r7, #3]
 800d616:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d61a:	bf00      	nop
 800d61c:	3710      	adds	r7, #16
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
	...

0800d624 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b08e      	sub	sp, #56	; 0x38
 800d628:	af00      	add	r7, sp, #0
 800d62a:	60f8      	str	r0, [r7, #12]
 800d62c:	60b9      	str	r1, [r7, #8]
 800d62e:	607a      	str	r2, [r7, #4]
 800d630:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d632:	2300      	movs	r3, #0
 800d634:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d109      	bne.n	800d654 <xQueueGenericSend+0x30>
 800d640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d644:	f383 8811 	msr	BASEPRI, r3
 800d648:	f3bf 8f6f 	isb	sy
 800d64c:	f3bf 8f4f 	dsb	sy
 800d650:	62bb      	str	r3, [r7, #40]	; 0x28
 800d652:	e7fe      	b.n	800d652 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d103      	bne.n	800d662 <xQueueGenericSend+0x3e>
 800d65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d101      	bne.n	800d666 <xQueueGenericSend+0x42>
 800d662:	2301      	movs	r3, #1
 800d664:	e000      	b.n	800d668 <xQueueGenericSend+0x44>
 800d666:	2300      	movs	r3, #0
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d109      	bne.n	800d680 <xQueueGenericSend+0x5c>
 800d66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d670:	f383 8811 	msr	BASEPRI, r3
 800d674:	f3bf 8f6f 	isb	sy
 800d678:	f3bf 8f4f 	dsb	sy
 800d67c:	627b      	str	r3, [r7, #36]	; 0x24
 800d67e:	e7fe      	b.n	800d67e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	2b02      	cmp	r3, #2
 800d684:	d103      	bne.n	800d68e <xQueueGenericSend+0x6a>
 800d686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d68a:	2b01      	cmp	r3, #1
 800d68c:	d101      	bne.n	800d692 <xQueueGenericSend+0x6e>
 800d68e:	2301      	movs	r3, #1
 800d690:	e000      	b.n	800d694 <xQueueGenericSend+0x70>
 800d692:	2300      	movs	r3, #0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d109      	bne.n	800d6ac <xQueueGenericSend+0x88>
 800d698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d69c:	f383 8811 	msr	BASEPRI, r3
 800d6a0:	f3bf 8f6f 	isb	sy
 800d6a4:	f3bf 8f4f 	dsb	sy
 800d6a8:	623b      	str	r3, [r7, #32]
 800d6aa:	e7fe      	b.n	800d6aa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d6ac:	f001 fad6 	bl	800ec5c <xTaskGetSchedulerState>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d102      	bne.n	800d6bc <xQueueGenericSend+0x98>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d101      	bne.n	800d6c0 <xQueueGenericSend+0x9c>
 800d6bc:	2301      	movs	r3, #1
 800d6be:	e000      	b.n	800d6c2 <xQueueGenericSend+0x9e>
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d109      	bne.n	800d6da <xQueueGenericSend+0xb6>
 800d6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ca:	f383 8811 	msr	BASEPRI, r3
 800d6ce:	f3bf 8f6f 	isb	sy
 800d6d2:	f3bf 8f4f 	dsb	sy
 800d6d6:	61fb      	str	r3, [r7, #28]
 800d6d8:	e7fe      	b.n	800d6d8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d6da:	f002 f93f 	bl	800f95c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	d302      	bcc.n	800d6f0 <xQueueGenericSend+0xcc>
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	2b02      	cmp	r3, #2
 800d6ee:	d129      	bne.n	800d744 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d6f0:	683a      	ldr	r2, [r7, #0]
 800d6f2:	68b9      	ldr	r1, [r7, #8]
 800d6f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d6f6:	f000 fa9e 	bl	800dc36 <prvCopyDataToQueue>
 800d6fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d700:	2b00      	cmp	r3, #0
 800d702:	d010      	beq.n	800d726 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d706:	3324      	adds	r3, #36	; 0x24
 800d708:	4618      	mov	r0, r3
 800d70a:	f001 f8f1 	bl	800e8f0 <xTaskRemoveFromEventList>
 800d70e:	4603      	mov	r3, r0
 800d710:	2b00      	cmp	r3, #0
 800d712:	d013      	beq.n	800d73c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d714:	4b3f      	ldr	r3, [pc, #252]	; (800d814 <xQueueGenericSend+0x1f0>)
 800d716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d71a:	601a      	str	r2, [r3, #0]
 800d71c:	f3bf 8f4f 	dsb	sy
 800d720:	f3bf 8f6f 	isb	sy
 800d724:	e00a      	b.n	800d73c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d007      	beq.n	800d73c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d72c:	4b39      	ldr	r3, [pc, #228]	; (800d814 <xQueueGenericSend+0x1f0>)
 800d72e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d732:	601a      	str	r2, [r3, #0]
 800d734:	f3bf 8f4f 	dsb	sy
 800d738:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d73c:	f002 f93c 	bl	800f9b8 <vPortExitCritical>
				return pdPASS;
 800d740:	2301      	movs	r3, #1
 800d742:	e063      	b.n	800d80c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d103      	bne.n	800d752 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d74a:	f002 f935 	bl	800f9b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d74e:	2300      	movs	r3, #0
 800d750:	e05c      	b.n	800d80c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d754:	2b00      	cmp	r3, #0
 800d756:	d106      	bne.n	800d766 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d758:	f107 0314 	add.w	r3, r7, #20
 800d75c:	4618      	mov	r0, r3
 800d75e:	f001 f929 	bl	800e9b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d762:	2301      	movs	r3, #1
 800d764:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d766:	f002 f927 	bl	800f9b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d76a:	f000 fe89 	bl	800e480 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d76e:	f002 f8f5 	bl	800f95c <vPortEnterCritical>
 800d772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d774:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d778:	b25b      	sxtb	r3, r3
 800d77a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d77e:	d103      	bne.n	800d788 <xQueueGenericSend+0x164>
 800d780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d782:	2200      	movs	r2, #0
 800d784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d78a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d78e:	b25b      	sxtb	r3, r3
 800d790:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d794:	d103      	bne.n	800d79e <xQueueGenericSend+0x17a>
 800d796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d798:	2200      	movs	r2, #0
 800d79a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d79e:	f002 f90b 	bl	800f9b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d7a2:	1d3a      	adds	r2, r7, #4
 800d7a4:	f107 0314 	add.w	r3, r7, #20
 800d7a8:	4611      	mov	r1, r2
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f001 f918 	bl	800e9e0 <xTaskCheckForTimeOut>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d124      	bne.n	800d800 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d7b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7b8:	f000 fb35 	bl	800de26 <prvIsQueueFull>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d018      	beq.n	800d7f4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c4:	3310      	adds	r3, #16
 800d7c6:	687a      	ldr	r2, [r7, #4]
 800d7c8:	4611      	mov	r1, r2
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f001 f842 	bl	800e854 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d7d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7d2:	f000 fac0 	bl	800dd56 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d7d6:	f000 fe61 	bl	800e49c <xTaskResumeAll>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	f47f af7c 	bne.w	800d6da <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800d7e2:	4b0c      	ldr	r3, [pc, #48]	; (800d814 <xQueueGenericSend+0x1f0>)
 800d7e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7e8:	601a      	str	r2, [r3, #0]
 800d7ea:	f3bf 8f4f 	dsb	sy
 800d7ee:	f3bf 8f6f 	isb	sy
 800d7f2:	e772      	b.n	800d6da <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d7f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7f6:	f000 faae 	bl	800dd56 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d7fa:	f000 fe4f 	bl	800e49c <xTaskResumeAll>
 800d7fe:	e76c      	b.n	800d6da <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d802:	f000 faa8 	bl	800dd56 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d806:	f000 fe49 	bl	800e49c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d80a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	3738      	adds	r7, #56	; 0x38
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}
 800d814:	e000ed04 	.word	0xe000ed04

0800d818 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b08e      	sub	sp, #56	; 0x38
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	60f8      	str	r0, [r7, #12]
 800d820:	60b9      	str	r1, [r7, #8]
 800d822:	607a      	str	r2, [r7, #4]
 800d824:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d109      	bne.n	800d844 <xQueueGenericSendFromISR+0x2c>
 800d830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d834:	f383 8811 	msr	BASEPRI, r3
 800d838:	f3bf 8f6f 	isb	sy
 800d83c:	f3bf 8f4f 	dsb	sy
 800d840:	627b      	str	r3, [r7, #36]	; 0x24
 800d842:	e7fe      	b.n	800d842 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d103      	bne.n	800d852 <xQueueGenericSendFromISR+0x3a>
 800d84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d101      	bne.n	800d856 <xQueueGenericSendFromISR+0x3e>
 800d852:	2301      	movs	r3, #1
 800d854:	e000      	b.n	800d858 <xQueueGenericSendFromISR+0x40>
 800d856:	2300      	movs	r3, #0
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d109      	bne.n	800d870 <xQueueGenericSendFromISR+0x58>
 800d85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d860:	f383 8811 	msr	BASEPRI, r3
 800d864:	f3bf 8f6f 	isb	sy
 800d868:	f3bf 8f4f 	dsb	sy
 800d86c:	623b      	str	r3, [r7, #32]
 800d86e:	e7fe      	b.n	800d86e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	2b02      	cmp	r3, #2
 800d874:	d103      	bne.n	800d87e <xQueueGenericSendFromISR+0x66>
 800d876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d87a:	2b01      	cmp	r3, #1
 800d87c:	d101      	bne.n	800d882 <xQueueGenericSendFromISR+0x6a>
 800d87e:	2301      	movs	r3, #1
 800d880:	e000      	b.n	800d884 <xQueueGenericSendFromISR+0x6c>
 800d882:	2300      	movs	r3, #0
 800d884:	2b00      	cmp	r3, #0
 800d886:	d109      	bne.n	800d89c <xQueueGenericSendFromISR+0x84>
 800d888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d88c:	f383 8811 	msr	BASEPRI, r3
 800d890:	f3bf 8f6f 	isb	sy
 800d894:	f3bf 8f4f 	dsb	sy
 800d898:	61fb      	str	r3, [r7, #28]
 800d89a:	e7fe      	b.n	800d89a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d89c:	f002 f93a 	bl	800fb14 <vPortValidateInterruptPriority>
	__asm volatile
 800d8a0:	f3ef 8211 	mrs	r2, BASEPRI
 800d8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a8:	f383 8811 	msr	BASEPRI, r3
 800d8ac:	f3bf 8f6f 	isb	sy
 800d8b0:	f3bf 8f4f 	dsb	sy
 800d8b4:	61ba      	str	r2, [r7, #24]
 800d8b6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d8b8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d8ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8c4:	429a      	cmp	r2, r3
 800d8c6:	d302      	bcc.n	800d8ce <xQueueGenericSendFromISR+0xb6>
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	2b02      	cmp	r3, #2
 800d8cc:	d12c      	bne.n	800d928 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d8d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d8d8:	683a      	ldr	r2, [r7, #0]
 800d8da:	68b9      	ldr	r1, [r7, #8]
 800d8dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8de:	f000 f9aa 	bl	800dc36 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d8e2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d8e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8ea:	d112      	bne.n	800d912 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d016      	beq.n	800d922 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f6:	3324      	adds	r3, #36	; 0x24
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f000 fff9 	bl	800e8f0 <xTaskRemoveFromEventList>
 800d8fe:	4603      	mov	r3, r0
 800d900:	2b00      	cmp	r3, #0
 800d902:	d00e      	beq.n	800d922 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d00b      	beq.n	800d922 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2201      	movs	r2, #1
 800d90e:	601a      	str	r2, [r3, #0]
 800d910:	e007      	b.n	800d922 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d912:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d916:	3301      	adds	r3, #1
 800d918:	b2db      	uxtb	r3, r3
 800d91a:	b25a      	sxtb	r2, r3
 800d91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d922:	2301      	movs	r3, #1
 800d924:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d926:	e001      	b.n	800d92c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d928:	2300      	movs	r3, #0
 800d92a:	637b      	str	r3, [r7, #52]	; 0x34
 800d92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d92e:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d930:	693b      	ldr	r3, [r7, #16]
 800d932:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d938:	4618      	mov	r0, r3
 800d93a:	3738      	adds	r7, #56	; 0x38
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}

0800d940 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b08c      	sub	sp, #48	; 0x30
 800d944:	af00      	add	r7, sp, #0
 800d946:	60f8      	str	r0, [r7, #12]
 800d948:	60b9      	str	r1, [r7, #8]
 800d94a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d94c:	2300      	movs	r3, #0
 800d94e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d956:	2b00      	cmp	r3, #0
 800d958:	d109      	bne.n	800d96e <xQueueReceive+0x2e>
	__asm volatile
 800d95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d95e:	f383 8811 	msr	BASEPRI, r3
 800d962:	f3bf 8f6f 	isb	sy
 800d966:	f3bf 8f4f 	dsb	sy
 800d96a:	623b      	str	r3, [r7, #32]
 800d96c:	e7fe      	b.n	800d96c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d103      	bne.n	800d97c <xQueueReceive+0x3c>
 800d974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d101      	bne.n	800d980 <xQueueReceive+0x40>
 800d97c:	2301      	movs	r3, #1
 800d97e:	e000      	b.n	800d982 <xQueueReceive+0x42>
 800d980:	2300      	movs	r3, #0
 800d982:	2b00      	cmp	r3, #0
 800d984:	d109      	bne.n	800d99a <xQueueReceive+0x5a>
 800d986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d98a:	f383 8811 	msr	BASEPRI, r3
 800d98e:	f3bf 8f6f 	isb	sy
 800d992:	f3bf 8f4f 	dsb	sy
 800d996:	61fb      	str	r3, [r7, #28]
 800d998:	e7fe      	b.n	800d998 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d99a:	f001 f95f 	bl	800ec5c <xTaskGetSchedulerState>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d102      	bne.n	800d9aa <xQueueReceive+0x6a>
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d101      	bne.n	800d9ae <xQueueReceive+0x6e>
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	e000      	b.n	800d9b0 <xQueueReceive+0x70>
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d109      	bne.n	800d9c8 <xQueueReceive+0x88>
 800d9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b8:	f383 8811 	msr	BASEPRI, r3
 800d9bc:	f3bf 8f6f 	isb	sy
 800d9c0:	f3bf 8f4f 	dsb	sy
 800d9c4:	61bb      	str	r3, [r7, #24]
 800d9c6:	e7fe      	b.n	800d9c6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d9c8:	f001 ffc8 	bl	800f95c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9d0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d01f      	beq.n	800da18 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d9d8:	68b9      	ldr	r1, [r7, #8]
 800d9da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9dc:	f000 f995 	bl	800dd0a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e2:	1e5a      	subs	r2, r3, #1
 800d9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ea:	691b      	ldr	r3, [r3, #16]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d00f      	beq.n	800da10 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9f2:	3310      	adds	r3, #16
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f000 ff7b 	bl	800e8f0 <xTaskRemoveFromEventList>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d007      	beq.n	800da10 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800da00:	4b3c      	ldr	r3, [pc, #240]	; (800daf4 <xQueueReceive+0x1b4>)
 800da02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da06:	601a      	str	r2, [r3, #0]
 800da08:	f3bf 8f4f 	dsb	sy
 800da0c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800da10:	f001 ffd2 	bl	800f9b8 <vPortExitCritical>
				return pdPASS;
 800da14:	2301      	movs	r3, #1
 800da16:	e069      	b.n	800daec <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d103      	bne.n	800da26 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800da1e:	f001 ffcb 	bl	800f9b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800da22:	2300      	movs	r3, #0
 800da24:	e062      	b.n	800daec <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800da26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d106      	bne.n	800da3a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da2c:	f107 0310 	add.w	r3, r7, #16
 800da30:	4618      	mov	r0, r3
 800da32:	f000 ffbf 	bl	800e9b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800da36:	2301      	movs	r3, #1
 800da38:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800da3a:	f001 ffbd 	bl	800f9b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800da3e:	f000 fd1f 	bl	800e480 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da42:	f001 ff8b 	bl	800f95c <vPortEnterCritical>
 800da46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da4c:	b25b      	sxtb	r3, r3
 800da4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da52:	d103      	bne.n	800da5c <xQueueReceive+0x11c>
 800da54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da56:	2200      	movs	r2, #0
 800da58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da62:	b25b      	sxtb	r3, r3
 800da64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da68:	d103      	bne.n	800da72 <xQueueReceive+0x132>
 800da6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da6c:	2200      	movs	r2, #0
 800da6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da72:	f001 ffa1 	bl	800f9b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da76:	1d3a      	adds	r2, r7, #4
 800da78:	f107 0310 	add.w	r3, r7, #16
 800da7c:	4611      	mov	r1, r2
 800da7e:	4618      	mov	r0, r3
 800da80:	f000 ffae 	bl	800e9e0 <xTaskCheckForTimeOut>
 800da84:	4603      	mov	r3, r0
 800da86:	2b00      	cmp	r3, #0
 800da88:	d123      	bne.n	800dad2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da8c:	f000 f9b5 	bl	800ddfa <prvIsQueueEmpty>
 800da90:	4603      	mov	r3, r0
 800da92:	2b00      	cmp	r3, #0
 800da94:	d017      	beq.n	800dac6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800da96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da98:	3324      	adds	r3, #36	; 0x24
 800da9a:	687a      	ldr	r2, [r7, #4]
 800da9c:	4611      	mov	r1, r2
 800da9e:	4618      	mov	r0, r3
 800daa0:	f000 fed8 	bl	800e854 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800daa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800daa6:	f000 f956 	bl	800dd56 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800daaa:	f000 fcf7 	bl	800e49c <xTaskResumeAll>
 800daae:	4603      	mov	r3, r0
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d189      	bne.n	800d9c8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800dab4:	4b0f      	ldr	r3, [pc, #60]	; (800daf4 <xQueueReceive+0x1b4>)
 800dab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800daba:	601a      	str	r2, [r3, #0]
 800dabc:	f3bf 8f4f 	dsb	sy
 800dac0:	f3bf 8f6f 	isb	sy
 800dac4:	e780      	b.n	800d9c8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dac8:	f000 f945 	bl	800dd56 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dacc:	f000 fce6 	bl	800e49c <xTaskResumeAll>
 800dad0:	e77a      	b.n	800d9c8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dad2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dad4:	f000 f93f 	bl	800dd56 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dad8:	f000 fce0 	bl	800e49c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dadc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dade:	f000 f98c 	bl	800ddfa <prvIsQueueEmpty>
 800dae2:	4603      	mov	r3, r0
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	f43f af6f 	beq.w	800d9c8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800daea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800daec:	4618      	mov	r0, r3
 800daee:	3730      	adds	r7, #48	; 0x30
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}
 800daf4:	e000ed04 	.word	0xe000ed04

0800daf8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b08e      	sub	sp, #56	; 0x38
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	60f8      	str	r0, [r7, #12]
 800db00:	60b9      	str	r1, [r7, #8]
 800db02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800db08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d109      	bne.n	800db22 <xQueueReceiveFromISR+0x2a>
 800db0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db12:	f383 8811 	msr	BASEPRI, r3
 800db16:	f3bf 8f6f 	isb	sy
 800db1a:	f3bf 8f4f 	dsb	sy
 800db1e:	623b      	str	r3, [r7, #32]
 800db20:	e7fe      	b.n	800db20 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d103      	bne.n	800db30 <xQueueReceiveFromISR+0x38>
 800db28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d101      	bne.n	800db34 <xQueueReceiveFromISR+0x3c>
 800db30:	2301      	movs	r3, #1
 800db32:	e000      	b.n	800db36 <xQueueReceiveFromISR+0x3e>
 800db34:	2300      	movs	r3, #0
 800db36:	2b00      	cmp	r3, #0
 800db38:	d109      	bne.n	800db4e <xQueueReceiveFromISR+0x56>
 800db3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db3e:	f383 8811 	msr	BASEPRI, r3
 800db42:	f3bf 8f6f 	isb	sy
 800db46:	f3bf 8f4f 	dsb	sy
 800db4a:	61fb      	str	r3, [r7, #28]
 800db4c:	e7fe      	b.n	800db4c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db4e:	f001 ffe1 	bl	800fb14 <vPortValidateInterruptPriority>
	__asm volatile
 800db52:	f3ef 8211 	mrs	r2, BASEPRI
 800db56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db5a:	f383 8811 	msr	BASEPRI, r3
 800db5e:	f3bf 8f6f 	isb	sy
 800db62:	f3bf 8f4f 	dsb	sy
 800db66:	61ba      	str	r2, [r7, #24]
 800db68:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800db6a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db72:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db76:	2b00      	cmp	r3, #0
 800db78:	d02f      	beq.n	800dbda <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800db7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800db84:	68b9      	ldr	r1, [r7, #8]
 800db86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800db88:	f000 f8bf 	bl	800dd0a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800db8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db8e:	1e5a      	subs	r2, r3, #1
 800db90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db92:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800db94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800db98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db9c:	d112      	bne.n	800dbc4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba0:	691b      	ldr	r3, [r3, #16]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d016      	beq.n	800dbd4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba8:	3310      	adds	r3, #16
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f000 fea0 	bl	800e8f0 <xTaskRemoveFromEventList>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d00e      	beq.n	800dbd4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d00b      	beq.n	800dbd4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	601a      	str	r2, [r3, #0]
 800dbc2:	e007      	b.n	800dbd4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dbc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbc8:	3301      	adds	r3, #1
 800dbca:	b2db      	uxtb	r3, r3
 800dbcc:	b25a      	sxtb	r2, r3
 800dbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	637b      	str	r3, [r7, #52]	; 0x34
 800dbd8:	e001      	b.n	800dbde <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	637b      	str	r3, [r7, #52]	; 0x34
 800dbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dbe2:	693b      	ldr	r3, [r7, #16]
 800dbe4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dbe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3738      	adds	r7, #56	; 0x38
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}

0800dbf2 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800dbf2:	b580      	push	{r7, lr}
 800dbf4:	b086      	sub	sp, #24
 800dbf6:	af00      	add	r7, sp, #0
 800dbf8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d109      	bne.n	800dc18 <uxQueueSpacesAvailable+0x26>
	__asm volatile
 800dc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc08:	f383 8811 	msr	BASEPRI, r3
 800dc0c:	f3bf 8f6f 	isb	sy
 800dc10:	f3bf 8f4f 	dsb	sy
 800dc14:	60fb      	str	r3, [r7, #12]
 800dc16:	e7fe      	b.n	800dc16 <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 800dc18:	f001 fea0 	bl	800f95c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc24:	1ad3      	subs	r3, r2, r3
 800dc26:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800dc28:	f001 fec6 	bl	800f9b8 <vPortExitCritical>

	return uxReturn;
 800dc2c:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800dc2e:	4618      	mov	r0, r3
 800dc30:	3718      	adds	r7, #24
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}

0800dc36 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dc36:	b580      	push	{r7, lr}
 800dc38:	b086      	sub	sp, #24
 800dc3a:	af00      	add	r7, sp, #0
 800dc3c:	60f8      	str	r0, [r7, #12]
 800dc3e:	60b9      	str	r1, [r7, #8]
 800dc40:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dc42:	2300      	movs	r3, #0
 800dc44:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc4a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d10d      	bne.n	800dc70 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d14d      	bne.n	800dcf8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	689b      	ldr	r3, [r3, #8]
 800dc60:	4618      	mov	r0, r3
 800dc62:	f001 f819 	bl	800ec98 <xTaskPriorityDisinherit>
 800dc66:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	609a      	str	r2, [r3, #8]
 800dc6e:	e043      	b.n	800dcf8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d119      	bne.n	800dcaa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	6858      	ldr	r0, [r3, #4]
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc7e:	461a      	mov	r2, r3
 800dc80:	68b9      	ldr	r1, [r7, #8]
 800dc82:	f00b f80d 	bl	8018ca0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	685a      	ldr	r2, [r3, #4]
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc8e:	441a      	add	r2, r3
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	685a      	ldr	r2, [r3, #4]
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	689b      	ldr	r3, [r3, #8]
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	d32b      	bcc.n	800dcf8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	681a      	ldr	r2, [r3, #0]
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	605a      	str	r2, [r3, #4]
 800dca8:	e026      	b.n	800dcf8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	68d8      	ldr	r0, [r3, #12]
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	68b9      	ldr	r1, [r7, #8]
 800dcb6:	f00a fff3 	bl	8018ca0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	68da      	ldr	r2, [r3, #12]
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcc2:	425b      	negs	r3, r3
 800dcc4:	441a      	add	r2, r3
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	68da      	ldr	r2, [r3, #12]
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d207      	bcs.n	800dce6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	689a      	ldr	r2, [r3, #8]
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcde:	425b      	negs	r3, r3
 800dce0:	441a      	add	r2, r3
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2b02      	cmp	r3, #2
 800dcea:	d105      	bne.n	800dcf8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d002      	beq.n	800dcf8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	3b01      	subs	r3, #1
 800dcf6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	1c5a      	adds	r2, r3, #1
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800dd00:	697b      	ldr	r3, [r7, #20]
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3718      	adds	r7, #24
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}

0800dd0a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dd0a:	b580      	push	{r7, lr}
 800dd0c:	b082      	sub	sp, #8
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	6078      	str	r0, [r7, #4]
 800dd12:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d018      	beq.n	800dd4e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	68da      	ldr	r2, [r3, #12]
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd24:	441a      	add	r2, r3
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	68da      	ldr	r2, [r3, #12]
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	689b      	ldr	r3, [r3, #8]
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d303      	bcc.n	800dd3e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681a      	ldr	r2, [r3, #0]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	68d9      	ldr	r1, [r3, #12]
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd46:	461a      	mov	r2, r3
 800dd48:	6838      	ldr	r0, [r7, #0]
 800dd4a:	f00a ffa9 	bl	8018ca0 <memcpy>
	}
}
 800dd4e:	bf00      	nop
 800dd50:	3708      	adds	r7, #8
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}

0800dd56 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dd56:	b580      	push	{r7, lr}
 800dd58:	b084      	sub	sp, #16
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dd5e:	f001 fdfd 	bl	800f95c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd68:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd6a:	e011      	b.n	800dd90 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d012      	beq.n	800dd9a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	3324      	adds	r3, #36	; 0x24
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f000 fdb9 	bl	800e8f0 <xTaskRemoveFromEventList>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d001      	beq.n	800dd88 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dd84:	f000 fe8c 	bl	800eaa0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dd88:	7bfb      	ldrb	r3, [r7, #15]
 800dd8a:	3b01      	subs	r3, #1
 800dd8c:	b2db      	uxtb	r3, r3
 800dd8e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	dce9      	bgt.n	800dd6c <prvUnlockQueue+0x16>
 800dd98:	e000      	b.n	800dd9c <prvUnlockQueue+0x46>
					break;
 800dd9a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	22ff      	movs	r2, #255	; 0xff
 800dda0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dda4:	f001 fe08 	bl	800f9b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dda8:	f001 fdd8 	bl	800f95c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ddb2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ddb4:	e011      	b.n	800ddda <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	691b      	ldr	r3, [r3, #16]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d012      	beq.n	800dde4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	3310      	adds	r3, #16
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f000 fd94 	bl	800e8f0 <xTaskRemoveFromEventList>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d001      	beq.n	800ddd2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ddce:	f000 fe67 	bl	800eaa0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ddd2:	7bbb      	ldrb	r3, [r7, #14]
 800ddd4:	3b01      	subs	r3, #1
 800ddd6:	b2db      	uxtb	r3, r3
 800ddd8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ddda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	dce9      	bgt.n	800ddb6 <prvUnlockQueue+0x60>
 800dde2:	e000      	b.n	800dde6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dde4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	22ff      	movs	r2, #255	; 0xff
 800ddea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ddee:	f001 fde3 	bl	800f9b8 <vPortExitCritical>
}
 800ddf2:	bf00      	nop
 800ddf4:	3710      	adds	r7, #16
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}

0800ddfa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ddfa:	b580      	push	{r7, lr}
 800ddfc:	b084      	sub	sp, #16
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de02:	f001 fdab 	bl	800f95c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d102      	bne.n	800de14 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800de0e:	2301      	movs	r3, #1
 800de10:	60fb      	str	r3, [r7, #12]
 800de12:	e001      	b.n	800de18 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800de14:	2300      	movs	r3, #0
 800de16:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de18:	f001 fdce 	bl	800f9b8 <vPortExitCritical>

	return xReturn;
 800de1c:	68fb      	ldr	r3, [r7, #12]
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3710      	adds	r7, #16
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}

0800de26 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800de26:	b580      	push	{r7, lr}
 800de28:	b084      	sub	sp, #16
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de2e:	f001 fd95 	bl	800f95c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de3a:	429a      	cmp	r2, r3
 800de3c:	d102      	bne.n	800de44 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800de3e:	2301      	movs	r3, #1
 800de40:	60fb      	str	r3, [r7, #12]
 800de42:	e001      	b.n	800de48 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800de44:	2300      	movs	r3, #0
 800de46:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de48:	f001 fdb6 	bl	800f9b8 <vPortExitCritical>

	return xReturn;
 800de4c:	68fb      	ldr	r3, [r7, #12]
}
 800de4e:	4618      	mov	r0, r3
 800de50:	3710      	adds	r7, #16
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}
	...

0800de58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800de58:	b480      	push	{r7}
 800de5a:	b085      	sub	sp, #20
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
 800de60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de62:	2300      	movs	r3, #0
 800de64:	60fb      	str	r3, [r7, #12]
 800de66:	e014      	b.n	800de92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800de68:	4a0e      	ldr	r2, [pc, #56]	; (800dea4 <vQueueAddToRegistry+0x4c>)
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d10b      	bne.n	800de8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800de74:	490b      	ldr	r1, [pc, #44]	; (800dea4 <vQueueAddToRegistry+0x4c>)
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	683a      	ldr	r2, [r7, #0]
 800de7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800de7e:	4a09      	ldr	r2, [pc, #36]	; (800dea4 <vQueueAddToRegistry+0x4c>)
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	00db      	lsls	r3, r3, #3
 800de84:	4413      	add	r3, r2
 800de86:	687a      	ldr	r2, [r7, #4]
 800de88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800de8a:	e005      	b.n	800de98 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	3301      	adds	r3, #1
 800de90:	60fb      	str	r3, [r7, #12]
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	2b07      	cmp	r3, #7
 800de96:	d9e7      	bls.n	800de68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800de98:	bf00      	nop
 800de9a:	3714      	adds	r7, #20
 800de9c:	46bd      	mov	sp, r7
 800de9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea2:	4770      	bx	lr
 800dea4:	20006f8c 	.word	0x20006f8c

0800dea8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b086      	sub	sp, #24
 800deac:	af00      	add	r7, sp, #0
 800deae:	60f8      	str	r0, [r7, #12]
 800deb0:	60b9      	str	r1, [r7, #8]
 800deb2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800deb8:	f001 fd50 	bl	800f95c <vPortEnterCritical>
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dec2:	b25b      	sxtb	r3, r3
 800dec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dec8:	d103      	bne.n	800ded2 <vQueueWaitForMessageRestricted+0x2a>
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	2200      	movs	r2, #0
 800dece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ded8:	b25b      	sxtb	r3, r3
 800deda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dede:	d103      	bne.n	800dee8 <vQueueWaitForMessageRestricted+0x40>
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	2200      	movs	r2, #0
 800dee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dee8:	f001 fd66 	bl	800f9b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800def0:	2b00      	cmp	r3, #0
 800def2:	d106      	bne.n	800df02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	3324      	adds	r3, #36	; 0x24
 800def8:	687a      	ldr	r2, [r7, #4]
 800defa:	68b9      	ldr	r1, [r7, #8]
 800defc:	4618      	mov	r0, r3
 800defe:	f000 fccd 	bl	800e89c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800df02:	6978      	ldr	r0, [r7, #20]
 800df04:	f7ff ff27 	bl	800dd56 <prvUnlockQueue>
	}
 800df08:	bf00      	nop
 800df0a:	3718      	adds	r7, #24
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}

0800df10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800df10:	b580      	push	{r7, lr}
 800df12:	b08e      	sub	sp, #56	; 0x38
 800df14:	af04      	add	r7, sp, #16
 800df16:	60f8      	str	r0, [r7, #12]
 800df18:	60b9      	str	r1, [r7, #8]
 800df1a:	607a      	str	r2, [r7, #4]
 800df1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800df1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df20:	2b00      	cmp	r3, #0
 800df22:	d109      	bne.n	800df38 <xTaskCreateStatic+0x28>
 800df24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df28:	f383 8811 	msr	BASEPRI, r3
 800df2c:	f3bf 8f6f 	isb	sy
 800df30:	f3bf 8f4f 	dsb	sy
 800df34:	623b      	str	r3, [r7, #32]
 800df36:	e7fe      	b.n	800df36 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800df38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d109      	bne.n	800df52 <xTaskCreateStatic+0x42>
 800df3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df42:	f383 8811 	msr	BASEPRI, r3
 800df46:	f3bf 8f6f 	isb	sy
 800df4a:	f3bf 8f4f 	dsb	sy
 800df4e:	61fb      	str	r3, [r7, #28]
 800df50:	e7fe      	b.n	800df50 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800df52:	2364      	movs	r3, #100	; 0x64
 800df54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	2b64      	cmp	r3, #100	; 0x64
 800df5a:	d009      	beq.n	800df70 <xTaskCreateStatic+0x60>
 800df5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df60:	f383 8811 	msr	BASEPRI, r3
 800df64:	f3bf 8f6f 	isb	sy
 800df68:	f3bf 8f4f 	dsb	sy
 800df6c:	61bb      	str	r3, [r7, #24]
 800df6e:	e7fe      	b.n	800df6e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800df70:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800df72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df74:	2b00      	cmp	r3, #0
 800df76:	d01e      	beq.n	800dfb6 <xTaskCreateStatic+0xa6>
 800df78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d01b      	beq.n	800dfb6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800df7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df80:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800df82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df86:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800df88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8a:	2202      	movs	r2, #2
 800df8c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800df90:	2300      	movs	r3, #0
 800df92:	9303      	str	r3, [sp, #12]
 800df94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df96:	9302      	str	r3, [sp, #8]
 800df98:	f107 0314 	add.w	r3, r7, #20
 800df9c:	9301      	str	r3, [sp, #4]
 800df9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa0:	9300      	str	r3, [sp, #0]
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	687a      	ldr	r2, [r7, #4]
 800dfa6:	68b9      	ldr	r1, [r7, #8]
 800dfa8:	68f8      	ldr	r0, [r7, #12]
 800dfaa:	f000 f850 	bl	800e04e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dfae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dfb0:	f000 f8e2 	bl	800e178 <prvAddNewTaskToReadyList>
 800dfb4:	e001      	b.n	800dfba <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dfba:	697b      	ldr	r3, [r7, #20]
	}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3728      	adds	r7, #40	; 0x28
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}

0800dfc4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b08c      	sub	sp, #48	; 0x30
 800dfc8:	af04      	add	r7, sp, #16
 800dfca:	60f8      	str	r0, [r7, #12]
 800dfcc:	60b9      	str	r1, [r7, #8]
 800dfce:	603b      	str	r3, [r7, #0]
 800dfd0:	4613      	mov	r3, r2
 800dfd2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dfd4:	88fb      	ldrh	r3, [r7, #6]
 800dfd6:	009b      	lsls	r3, r3, #2
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f001 fdd9 	bl	800fb90 <pvPortMalloc>
 800dfde:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dfe0:	697b      	ldr	r3, [r7, #20]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d00e      	beq.n	800e004 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dfe6:	2064      	movs	r0, #100	; 0x64
 800dfe8:	f001 fdd2 	bl	800fb90 <pvPortMalloc>
 800dfec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dfee:	69fb      	ldr	r3, [r7, #28]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d003      	beq.n	800dffc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dff4:	69fb      	ldr	r3, [r7, #28]
 800dff6:	697a      	ldr	r2, [r7, #20]
 800dff8:	631a      	str	r2, [r3, #48]	; 0x30
 800dffa:	e005      	b.n	800e008 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dffc:	6978      	ldr	r0, [r7, #20]
 800dffe:	f001 fe89 	bl	800fd14 <vPortFree>
 800e002:	e001      	b.n	800e008 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e004:	2300      	movs	r3, #0
 800e006:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e008:	69fb      	ldr	r3, [r7, #28]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d017      	beq.n	800e03e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e00e:	69fb      	ldr	r3, [r7, #28]
 800e010:	2200      	movs	r2, #0
 800e012:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e016:	88fa      	ldrh	r2, [r7, #6]
 800e018:	2300      	movs	r3, #0
 800e01a:	9303      	str	r3, [sp, #12]
 800e01c:	69fb      	ldr	r3, [r7, #28]
 800e01e:	9302      	str	r3, [sp, #8]
 800e020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e022:	9301      	str	r3, [sp, #4]
 800e024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e026:	9300      	str	r3, [sp, #0]
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	68b9      	ldr	r1, [r7, #8]
 800e02c:	68f8      	ldr	r0, [r7, #12]
 800e02e:	f000 f80e 	bl	800e04e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e032:	69f8      	ldr	r0, [r7, #28]
 800e034:	f000 f8a0 	bl	800e178 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e038:	2301      	movs	r3, #1
 800e03a:	61bb      	str	r3, [r7, #24]
 800e03c:	e002      	b.n	800e044 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e03e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e042:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e044:	69bb      	ldr	r3, [r7, #24]
	}
 800e046:	4618      	mov	r0, r3
 800e048:	3720      	adds	r7, #32
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}

0800e04e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e04e:	b580      	push	{r7, lr}
 800e050:	b088      	sub	sp, #32
 800e052:	af00      	add	r7, sp, #0
 800e054:	60f8      	str	r0, [r7, #12]
 800e056:	60b9      	str	r1, [r7, #8]
 800e058:	607a      	str	r2, [r7, #4]
 800e05a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e05e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	009b      	lsls	r3, r3, #2
 800e064:	461a      	mov	r2, r3
 800e066:	21a5      	movs	r1, #165	; 0xa5
 800e068:	f00a fe25 	bl	8018cb6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e06e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e076:	3b01      	subs	r3, #1
 800e078:	009b      	lsls	r3, r3, #2
 800e07a:	4413      	add	r3, r2
 800e07c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e07e:	69bb      	ldr	r3, [r7, #24]
 800e080:	f023 0307 	bic.w	r3, r3, #7
 800e084:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e086:	69bb      	ldr	r3, [r7, #24]
 800e088:	f003 0307 	and.w	r3, r3, #7
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d009      	beq.n	800e0a4 <prvInitialiseNewTask+0x56>
 800e090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e094:	f383 8811 	msr	BASEPRI, r3
 800e098:	f3bf 8f6f 	isb	sy
 800e09c:	f3bf 8f4f 	dsb	sy
 800e0a0:	617b      	str	r3, [r7, #20]
 800e0a2:	e7fe      	b.n	800e0a2 <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800e0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a6:	69ba      	ldr	r2, [r7, #24]
 800e0a8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d01f      	beq.n	800e0f0 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	61fb      	str	r3, [r7, #28]
 800e0b4:	e012      	b.n	800e0dc <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e0b6:	68ba      	ldr	r2, [r7, #8]
 800e0b8:	69fb      	ldr	r3, [r7, #28]
 800e0ba:	4413      	add	r3, r2
 800e0bc:	7819      	ldrb	r1, [r3, #0]
 800e0be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0c0:	69fb      	ldr	r3, [r7, #28]
 800e0c2:	4413      	add	r3, r2
 800e0c4:	3334      	adds	r3, #52	; 0x34
 800e0c6:	460a      	mov	r2, r1
 800e0c8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e0ca:	68ba      	ldr	r2, [r7, #8]
 800e0cc:	69fb      	ldr	r3, [r7, #28]
 800e0ce:	4413      	add	r3, r2
 800e0d0:	781b      	ldrb	r3, [r3, #0]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d006      	beq.n	800e0e4 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e0d6:	69fb      	ldr	r3, [r7, #28]
 800e0d8:	3301      	adds	r3, #1
 800e0da:	61fb      	str	r3, [r7, #28]
 800e0dc:	69fb      	ldr	r3, [r7, #28]
 800e0de:	2b0f      	cmp	r3, #15
 800e0e0:	d9e9      	bls.n	800e0b6 <prvInitialiseNewTask+0x68>
 800e0e2:	e000      	b.n	800e0e6 <prvInitialiseNewTask+0x98>
			{
				break;
 800e0e4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e0ee:	e003      	b.n	800e0f8 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0fa:	2b37      	cmp	r3, #55	; 0x37
 800e0fc:	d901      	bls.n	800e102 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e0fe:	2337      	movs	r3, #55	; 0x37
 800e100:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e104:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e106:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e10a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e10c:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800e10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e110:	2200      	movs	r2, #0
 800e112:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e116:	3304      	adds	r3, #4
 800e118:	4618      	mov	r0, r3
 800e11a:	f7ff f8b1 	bl	800d280 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e120:	3318      	adds	r3, #24
 800e122:	4618      	mov	r0, r3
 800e124:	f7ff f8ac 	bl	800d280 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e12a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e12c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e130:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e136:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e13a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e13c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800e13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e140:	2200      	movs	r2, #0
 800e142:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e146:	2200      	movs	r2, #0
 800e148:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e14c:	2200      	movs	r2, #0
 800e14e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e152:	683a      	ldr	r2, [r7, #0]
 800e154:	68f9      	ldr	r1, [r7, #12]
 800e156:	69b8      	ldr	r0, [r7, #24]
 800e158:	f001 fad6 	bl	800f708 <pxPortInitialiseStack>
 800e15c:	4602      	mov	r2, r0
 800e15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e160:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e164:	2b00      	cmp	r3, #0
 800e166:	d002      	beq.n	800e16e <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e16a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e16c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e16e:	bf00      	nop
 800e170:	3720      	adds	r7, #32
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
	...

0800e178 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b082      	sub	sp, #8
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e180:	f001 fbec 	bl	800f95c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e184:	4b2d      	ldr	r3, [pc, #180]	; (800e23c <prvAddNewTaskToReadyList+0xc4>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	3301      	adds	r3, #1
 800e18a:	4a2c      	ldr	r2, [pc, #176]	; (800e23c <prvAddNewTaskToReadyList+0xc4>)
 800e18c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e18e:	4b2c      	ldr	r3, [pc, #176]	; (800e240 <prvAddNewTaskToReadyList+0xc8>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d109      	bne.n	800e1aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e196:	4a2a      	ldr	r2, [pc, #168]	; (800e240 <prvAddNewTaskToReadyList+0xc8>)
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e19c:	4b27      	ldr	r3, [pc, #156]	; (800e23c <prvAddNewTaskToReadyList+0xc4>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	d110      	bne.n	800e1c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e1a4:	f000 fca0 	bl	800eae8 <prvInitialiseTaskLists>
 800e1a8:	e00d      	b.n	800e1c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e1aa:	4b26      	ldr	r3, [pc, #152]	; (800e244 <prvAddNewTaskToReadyList+0xcc>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d109      	bne.n	800e1c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e1b2:	4b23      	ldr	r3, [pc, #140]	; (800e240 <prvAddNewTaskToReadyList+0xc8>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1bc:	429a      	cmp	r2, r3
 800e1be:	d802      	bhi.n	800e1c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e1c0:	4a1f      	ldr	r2, [pc, #124]	; (800e240 <prvAddNewTaskToReadyList+0xc8>)
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e1c6:	4b20      	ldr	r3, [pc, #128]	; (800e248 <prvAddNewTaskToReadyList+0xd0>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	3301      	adds	r3, #1
 800e1cc:	4a1e      	ldr	r2, [pc, #120]	; (800e248 <prvAddNewTaskToReadyList+0xd0>)
 800e1ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e1d0:	4b1d      	ldr	r3, [pc, #116]	; (800e248 <prvAddNewTaskToReadyList+0xd0>)
 800e1d2:	681a      	ldr	r2, [r3, #0]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1dc:	4b1b      	ldr	r3, [pc, #108]	; (800e24c <prvAddNewTaskToReadyList+0xd4>)
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	d903      	bls.n	800e1ec <prvAddNewTaskToReadyList+0x74>
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1e8:	4a18      	ldr	r2, [pc, #96]	; (800e24c <prvAddNewTaskToReadyList+0xd4>)
 800e1ea:	6013      	str	r3, [r2, #0]
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1f0:	4613      	mov	r3, r2
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	4413      	add	r3, r2
 800e1f6:	009b      	lsls	r3, r3, #2
 800e1f8:	4a15      	ldr	r2, [pc, #84]	; (800e250 <prvAddNewTaskToReadyList+0xd8>)
 800e1fa:	441a      	add	r2, r3
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	3304      	adds	r3, #4
 800e200:	4619      	mov	r1, r3
 800e202:	4610      	mov	r0, r2
 800e204:	f7ff f849 	bl	800d29a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e208:	f001 fbd6 	bl	800f9b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e20c:	4b0d      	ldr	r3, [pc, #52]	; (800e244 <prvAddNewTaskToReadyList+0xcc>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d00e      	beq.n	800e232 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e214:	4b0a      	ldr	r3, [pc, #40]	; (800e240 <prvAddNewTaskToReadyList+0xc8>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e21e:	429a      	cmp	r2, r3
 800e220:	d207      	bcs.n	800e232 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e222:	4b0c      	ldr	r3, [pc, #48]	; (800e254 <prvAddNewTaskToReadyList+0xdc>)
 800e224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e228:	601a      	str	r2, [r3, #0]
 800e22a:	f3bf 8f4f 	dsb	sy
 800e22e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e232:	bf00      	nop
 800e234:	3708      	adds	r7, #8
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}
 800e23a:	bf00      	nop
 800e23c:	200011a8 	.word	0x200011a8
 800e240:	20000cd4 	.word	0x20000cd4
 800e244:	200011b4 	.word	0x200011b4
 800e248:	200011c4 	.word	0x200011c4
 800e24c:	200011b0 	.word	0x200011b0
 800e250:	20000cd8 	.word	0x20000cd8
 800e254:	e000ed04 	.word	0xe000ed04

0800e258 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b08a      	sub	sp, #40	; 0x28
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e262:	2300      	movs	r3, #0
 800e264:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d109      	bne.n	800e280 <vTaskDelayUntil+0x28>
 800e26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e270:	f383 8811 	msr	BASEPRI, r3
 800e274:	f3bf 8f6f 	isb	sy
 800e278:	f3bf 8f4f 	dsb	sy
 800e27c:	617b      	str	r3, [r7, #20]
 800e27e:	e7fe      	b.n	800e27e <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d109      	bne.n	800e29a <vTaskDelayUntil+0x42>
 800e286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e28a:	f383 8811 	msr	BASEPRI, r3
 800e28e:	f3bf 8f6f 	isb	sy
 800e292:	f3bf 8f4f 	dsb	sy
 800e296:	613b      	str	r3, [r7, #16]
 800e298:	e7fe      	b.n	800e298 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800e29a:	4b29      	ldr	r3, [pc, #164]	; (800e340 <vTaskDelayUntil+0xe8>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d009      	beq.n	800e2b6 <vTaskDelayUntil+0x5e>
 800e2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2a6:	f383 8811 	msr	BASEPRI, r3
 800e2aa:	f3bf 8f6f 	isb	sy
 800e2ae:	f3bf 8f4f 	dsb	sy
 800e2b2:	60fb      	str	r3, [r7, #12]
 800e2b4:	e7fe      	b.n	800e2b4 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800e2b6:	f000 f8e3 	bl	800e480 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800e2ba:	4b22      	ldr	r3, [pc, #136]	; (800e344 <vTaskDelayUntil+0xec>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	683a      	ldr	r2, [r7, #0]
 800e2c6:	4413      	add	r3, r2
 800e2c8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	6a3a      	ldr	r2, [r7, #32]
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	d20b      	bcs.n	800e2ec <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	69fa      	ldr	r2, [r7, #28]
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	d211      	bcs.n	800e302 <vTaskDelayUntil+0xaa>
 800e2de:	69fa      	ldr	r2, [r7, #28]
 800e2e0:	6a3b      	ldr	r3, [r7, #32]
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	d90d      	bls.n	800e302 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	627b      	str	r3, [r7, #36]	; 0x24
 800e2ea:	e00a      	b.n	800e302 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	69fa      	ldr	r2, [r7, #28]
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d303      	bcc.n	800e2fe <vTaskDelayUntil+0xa6>
 800e2f6:	69fa      	ldr	r2, [r7, #28]
 800e2f8:	6a3b      	ldr	r3, [r7, #32]
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	d901      	bls.n	800e302 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800e2fe:	2301      	movs	r3, #1
 800e300:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	69fa      	ldr	r2, [r7, #28]
 800e306:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d006      	beq.n	800e31c <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e30e:	69fa      	ldr	r2, [r7, #28]
 800e310:	6a3b      	ldr	r3, [r7, #32]
 800e312:	1ad3      	subs	r3, r2, r3
 800e314:	2100      	movs	r1, #0
 800e316:	4618      	mov	r0, r3
 800e318:	f000 fe5c 	bl	800efd4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e31c:	f000 f8be 	bl	800e49c <xTaskResumeAll>
 800e320:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e322:	69bb      	ldr	r3, [r7, #24]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d107      	bne.n	800e338 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800e328:	4b07      	ldr	r3, [pc, #28]	; (800e348 <vTaskDelayUntil+0xf0>)
 800e32a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e32e:	601a      	str	r2, [r3, #0]
 800e330:	f3bf 8f4f 	dsb	sy
 800e334:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e338:	bf00      	nop
 800e33a:	3728      	adds	r7, #40	; 0x28
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}
 800e340:	200011d0 	.word	0x200011d0
 800e344:	200011ac 	.word	0x200011ac
 800e348:	e000ed04 	.word	0xe000ed04

0800e34c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b084      	sub	sp, #16
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e354:	2300      	movs	r3, #0
 800e356:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d016      	beq.n	800e38c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e35e:	4b13      	ldr	r3, [pc, #76]	; (800e3ac <vTaskDelay+0x60>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d009      	beq.n	800e37a <vTaskDelay+0x2e>
 800e366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e36a:	f383 8811 	msr	BASEPRI, r3
 800e36e:	f3bf 8f6f 	isb	sy
 800e372:	f3bf 8f4f 	dsb	sy
 800e376:	60bb      	str	r3, [r7, #8]
 800e378:	e7fe      	b.n	800e378 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800e37a:	f000 f881 	bl	800e480 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e37e:	2100      	movs	r1, #0
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f000 fe27 	bl	800efd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e386:	f000 f889 	bl	800e49c <xTaskResumeAll>
 800e38a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d107      	bne.n	800e3a2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800e392:	4b07      	ldr	r3, [pc, #28]	; (800e3b0 <vTaskDelay+0x64>)
 800e394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e398:	601a      	str	r2, [r3, #0]
 800e39a:	f3bf 8f4f 	dsb	sy
 800e39e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e3a2:	bf00      	nop
 800e3a4:	3710      	adds	r7, #16
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
 800e3aa:	bf00      	nop
 800e3ac:	200011d0 	.word	0x200011d0
 800e3b0:	e000ed04 	.word	0xe000ed04

0800e3b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b08a      	sub	sp, #40	; 0x28
 800e3b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e3c2:	463a      	mov	r2, r7
 800e3c4:	1d39      	adds	r1, r7, #4
 800e3c6:	f107 0308 	add.w	r3, r7, #8
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f7fe ff04 	bl	800d1d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e3d0:	6839      	ldr	r1, [r7, #0]
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	68ba      	ldr	r2, [r7, #8]
 800e3d6:	9202      	str	r2, [sp, #8]
 800e3d8:	9301      	str	r3, [sp, #4]
 800e3da:	2300      	movs	r3, #0
 800e3dc:	9300      	str	r3, [sp, #0]
 800e3de:	2300      	movs	r3, #0
 800e3e0:	460a      	mov	r2, r1
 800e3e2:	4921      	ldr	r1, [pc, #132]	; (800e468 <vTaskStartScheduler+0xb4>)
 800e3e4:	4821      	ldr	r0, [pc, #132]	; (800e46c <vTaskStartScheduler+0xb8>)
 800e3e6:	f7ff fd93 	bl	800df10 <xTaskCreateStatic>
 800e3ea:	4602      	mov	r2, r0
 800e3ec:	4b20      	ldr	r3, [pc, #128]	; (800e470 <vTaskStartScheduler+0xbc>)
 800e3ee:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e3f0:	4b1f      	ldr	r3, [pc, #124]	; (800e470 <vTaskStartScheduler+0xbc>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d002      	beq.n	800e3fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	617b      	str	r3, [r7, #20]
 800e3fc:	e001      	b.n	800e402 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e3fe:	2300      	movs	r3, #0
 800e400:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e402:	697b      	ldr	r3, [r7, #20]
 800e404:	2b01      	cmp	r3, #1
 800e406:	d102      	bne.n	800e40e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e408:	f000 fe38 	bl	800f07c <xTimerCreateTimerTask>
 800e40c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e40e:	697b      	ldr	r3, [r7, #20]
 800e410:	2b01      	cmp	r3, #1
 800e412:	d117      	bne.n	800e444 <vTaskStartScheduler+0x90>
 800e414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e418:	f383 8811 	msr	BASEPRI, r3
 800e41c:	f3bf 8f6f 	isb	sy
 800e420:	f3bf 8f4f 	dsb	sy
 800e424:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e426:	4b13      	ldr	r3, [pc, #76]	; (800e474 <vTaskStartScheduler+0xc0>)
 800e428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e42c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e42e:	4b12      	ldr	r3, [pc, #72]	; (800e478 <vTaskStartScheduler+0xc4>)
 800e430:	2201      	movs	r2, #1
 800e432:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e434:	4b11      	ldr	r3, [pc, #68]	; (800e47c <vTaskStartScheduler+0xc8>)
 800e436:	2200      	movs	r2, #0
 800e438:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e43a:	f7f2 f85b 	bl	80004f4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e43e:	f001 f9ef 	bl	800f820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e442:	e00d      	b.n	800e460 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e44a:	d109      	bne.n	800e460 <vTaskStartScheduler+0xac>
 800e44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e450:	f383 8811 	msr	BASEPRI, r3
 800e454:	f3bf 8f6f 	isb	sy
 800e458:	f3bf 8f4f 	dsb	sy
 800e45c:	60fb      	str	r3, [r7, #12]
 800e45e:	e7fe      	b.n	800e45e <vTaskStartScheduler+0xaa>
}
 800e460:	bf00      	nop
 800e462:	3718      	adds	r7, #24
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}
 800e468:	08018f4c 	.word	0x08018f4c
 800e46c:	0800eab9 	.word	0x0800eab9
 800e470:	200011cc 	.word	0x200011cc
 800e474:	200011c8 	.word	0x200011c8
 800e478:	200011b4 	.word	0x200011b4
 800e47c:	200011ac 	.word	0x200011ac

0800e480 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e480:	b480      	push	{r7}
 800e482:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e484:	4b04      	ldr	r3, [pc, #16]	; (800e498 <vTaskSuspendAll+0x18>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	3301      	adds	r3, #1
 800e48a:	4a03      	ldr	r2, [pc, #12]	; (800e498 <vTaskSuspendAll+0x18>)
 800e48c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e48e:	bf00      	nop
 800e490:	46bd      	mov	sp, r7
 800e492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e496:	4770      	bx	lr
 800e498:	200011d0 	.word	0x200011d0

0800e49c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b084      	sub	sp, #16
 800e4a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e4aa:	4b41      	ldr	r3, [pc, #260]	; (800e5b0 <xTaskResumeAll+0x114>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d109      	bne.n	800e4c6 <xTaskResumeAll+0x2a>
 800e4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b6:	f383 8811 	msr	BASEPRI, r3
 800e4ba:	f3bf 8f6f 	isb	sy
 800e4be:	f3bf 8f4f 	dsb	sy
 800e4c2:	603b      	str	r3, [r7, #0]
 800e4c4:	e7fe      	b.n	800e4c4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e4c6:	f001 fa49 	bl	800f95c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e4ca:	4b39      	ldr	r3, [pc, #228]	; (800e5b0 <xTaskResumeAll+0x114>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	3b01      	subs	r3, #1
 800e4d0:	4a37      	ldr	r2, [pc, #220]	; (800e5b0 <xTaskResumeAll+0x114>)
 800e4d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4d4:	4b36      	ldr	r3, [pc, #216]	; (800e5b0 <xTaskResumeAll+0x114>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d162      	bne.n	800e5a2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e4dc:	4b35      	ldr	r3, [pc, #212]	; (800e5b4 <xTaskResumeAll+0x118>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d05e      	beq.n	800e5a2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e4e4:	e02f      	b.n	800e546 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4e6:	4b34      	ldr	r3, [pc, #208]	; (800e5b8 <xTaskResumeAll+0x11c>)
 800e4e8:	68db      	ldr	r3, [r3, #12]
 800e4ea:	68db      	ldr	r3, [r3, #12]
 800e4ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	3318      	adds	r3, #24
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f7fe ff2e 	bl	800d354 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	3304      	adds	r3, #4
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7fe ff29 	bl	800d354 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e506:	4b2d      	ldr	r3, [pc, #180]	; (800e5bc <xTaskResumeAll+0x120>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	429a      	cmp	r2, r3
 800e50c:	d903      	bls.n	800e516 <xTaskResumeAll+0x7a>
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e512:	4a2a      	ldr	r2, [pc, #168]	; (800e5bc <xTaskResumeAll+0x120>)
 800e514:	6013      	str	r3, [r2, #0]
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e51a:	4613      	mov	r3, r2
 800e51c:	009b      	lsls	r3, r3, #2
 800e51e:	4413      	add	r3, r2
 800e520:	009b      	lsls	r3, r3, #2
 800e522:	4a27      	ldr	r2, [pc, #156]	; (800e5c0 <xTaskResumeAll+0x124>)
 800e524:	441a      	add	r2, r3
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	3304      	adds	r3, #4
 800e52a:	4619      	mov	r1, r3
 800e52c:	4610      	mov	r0, r2
 800e52e:	f7fe feb4 	bl	800d29a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e536:	4b23      	ldr	r3, [pc, #140]	; (800e5c4 <xTaskResumeAll+0x128>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d302      	bcc.n	800e546 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e540:	4b21      	ldr	r3, [pc, #132]	; (800e5c8 <xTaskResumeAll+0x12c>)
 800e542:	2201      	movs	r2, #1
 800e544:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e546:	4b1c      	ldr	r3, [pc, #112]	; (800e5b8 <xTaskResumeAll+0x11c>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d1cb      	bne.n	800e4e6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d001      	beq.n	800e558 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e554:	f000 fb62 	bl	800ec1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e558:	4b1c      	ldr	r3, [pc, #112]	; (800e5cc <xTaskResumeAll+0x130>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d010      	beq.n	800e586 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e564:	f000 f846 	bl	800e5f4 <xTaskIncrementTick>
 800e568:	4603      	mov	r3, r0
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d002      	beq.n	800e574 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e56e:	4b16      	ldr	r3, [pc, #88]	; (800e5c8 <xTaskResumeAll+0x12c>)
 800e570:	2201      	movs	r2, #1
 800e572:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	3b01      	subs	r3, #1
 800e578:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d1f1      	bne.n	800e564 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800e580:	4b12      	ldr	r3, [pc, #72]	; (800e5cc <xTaskResumeAll+0x130>)
 800e582:	2200      	movs	r2, #0
 800e584:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e586:	4b10      	ldr	r3, [pc, #64]	; (800e5c8 <xTaskResumeAll+0x12c>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d009      	beq.n	800e5a2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e58e:	2301      	movs	r3, #1
 800e590:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e592:	4b0f      	ldr	r3, [pc, #60]	; (800e5d0 <xTaskResumeAll+0x134>)
 800e594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e598:	601a      	str	r2, [r3, #0]
 800e59a:	f3bf 8f4f 	dsb	sy
 800e59e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e5a2:	f001 fa09 	bl	800f9b8 <vPortExitCritical>

	return xAlreadyYielded;
 800e5a6:	68bb      	ldr	r3, [r7, #8]
}
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	3710      	adds	r7, #16
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd80      	pop	{r7, pc}
 800e5b0:	200011d0 	.word	0x200011d0
 800e5b4:	200011a8 	.word	0x200011a8
 800e5b8:	20001168 	.word	0x20001168
 800e5bc:	200011b0 	.word	0x200011b0
 800e5c0:	20000cd8 	.word	0x20000cd8
 800e5c4:	20000cd4 	.word	0x20000cd4
 800e5c8:	200011bc 	.word	0x200011bc
 800e5cc:	200011b8 	.word	0x200011b8
 800e5d0:	e000ed04 	.word	0xe000ed04

0800e5d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b083      	sub	sp, #12
 800e5d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e5da:	4b05      	ldr	r3, [pc, #20]	; (800e5f0 <xTaskGetTickCount+0x1c>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e5e0:	687b      	ldr	r3, [r7, #4]
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	370c      	adds	r7, #12
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ec:	4770      	bx	lr
 800e5ee:	bf00      	nop
 800e5f0:	200011ac 	.word	0x200011ac

0800e5f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b086      	sub	sp, #24
 800e5f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5fe:	4b4e      	ldr	r3, [pc, #312]	; (800e738 <xTaskIncrementTick+0x144>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	2b00      	cmp	r3, #0
 800e604:	f040 8088 	bne.w	800e718 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e608:	4b4c      	ldr	r3, [pc, #304]	; (800e73c <xTaskIncrementTick+0x148>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	3301      	adds	r3, #1
 800e60e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e610:	4a4a      	ldr	r2, [pc, #296]	; (800e73c <xTaskIncrementTick+0x148>)
 800e612:	693b      	ldr	r3, [r7, #16]
 800e614:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e616:	693b      	ldr	r3, [r7, #16]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d11f      	bne.n	800e65c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800e61c:	4b48      	ldr	r3, [pc, #288]	; (800e740 <xTaskIncrementTick+0x14c>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d009      	beq.n	800e63a <xTaskIncrementTick+0x46>
 800e626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e62a:	f383 8811 	msr	BASEPRI, r3
 800e62e:	f3bf 8f6f 	isb	sy
 800e632:	f3bf 8f4f 	dsb	sy
 800e636:	603b      	str	r3, [r7, #0]
 800e638:	e7fe      	b.n	800e638 <xTaskIncrementTick+0x44>
 800e63a:	4b41      	ldr	r3, [pc, #260]	; (800e740 <xTaskIncrementTick+0x14c>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	60fb      	str	r3, [r7, #12]
 800e640:	4b40      	ldr	r3, [pc, #256]	; (800e744 <xTaskIncrementTick+0x150>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	4a3e      	ldr	r2, [pc, #248]	; (800e740 <xTaskIncrementTick+0x14c>)
 800e646:	6013      	str	r3, [r2, #0]
 800e648:	4a3e      	ldr	r2, [pc, #248]	; (800e744 <xTaskIncrementTick+0x150>)
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	6013      	str	r3, [r2, #0]
 800e64e:	4b3e      	ldr	r3, [pc, #248]	; (800e748 <xTaskIncrementTick+0x154>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	3301      	adds	r3, #1
 800e654:	4a3c      	ldr	r2, [pc, #240]	; (800e748 <xTaskIncrementTick+0x154>)
 800e656:	6013      	str	r3, [r2, #0]
 800e658:	f000 fae0 	bl	800ec1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e65c:	4b3b      	ldr	r3, [pc, #236]	; (800e74c <xTaskIncrementTick+0x158>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	693a      	ldr	r2, [r7, #16]
 800e662:	429a      	cmp	r2, r3
 800e664:	d349      	bcc.n	800e6fa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e666:	4b36      	ldr	r3, [pc, #216]	; (800e740 <xTaskIncrementTick+0x14c>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d104      	bne.n	800e67a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e670:	4b36      	ldr	r3, [pc, #216]	; (800e74c <xTaskIncrementTick+0x158>)
 800e672:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e676:	601a      	str	r2, [r3, #0]
					break;
 800e678:	e03f      	b.n	800e6fa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e67a:	4b31      	ldr	r3, [pc, #196]	; (800e740 <xTaskIncrementTick+0x14c>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	68db      	ldr	r3, [r3, #12]
 800e680:	68db      	ldr	r3, [r3, #12]
 800e682:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	685b      	ldr	r3, [r3, #4]
 800e688:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e68a:	693a      	ldr	r2, [r7, #16]
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	429a      	cmp	r2, r3
 800e690:	d203      	bcs.n	800e69a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e692:	4a2e      	ldr	r2, [pc, #184]	; (800e74c <xTaskIncrementTick+0x158>)
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e698:	e02f      	b.n	800e6fa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	3304      	adds	r3, #4
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f7fe fe58 	bl	800d354 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d004      	beq.n	800e6b6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	3318      	adds	r3, #24
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	f7fe fe4f 	bl	800d354 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e6b6:	68bb      	ldr	r3, [r7, #8]
 800e6b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6ba:	4b25      	ldr	r3, [pc, #148]	; (800e750 <xTaskIncrementTick+0x15c>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	429a      	cmp	r2, r3
 800e6c0:	d903      	bls.n	800e6ca <xTaskIncrementTick+0xd6>
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c6:	4a22      	ldr	r2, [pc, #136]	; (800e750 <xTaskIncrementTick+0x15c>)
 800e6c8:	6013      	str	r3, [r2, #0]
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6ce:	4613      	mov	r3, r2
 800e6d0:	009b      	lsls	r3, r3, #2
 800e6d2:	4413      	add	r3, r2
 800e6d4:	009b      	lsls	r3, r3, #2
 800e6d6:	4a1f      	ldr	r2, [pc, #124]	; (800e754 <xTaskIncrementTick+0x160>)
 800e6d8:	441a      	add	r2, r3
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	3304      	adds	r3, #4
 800e6de:	4619      	mov	r1, r3
 800e6e0:	4610      	mov	r0, r2
 800e6e2:	f7fe fdda 	bl	800d29a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6ea:	4b1b      	ldr	r3, [pc, #108]	; (800e758 <xTaskIncrementTick+0x164>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	d3b8      	bcc.n	800e666 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800e6f4:	2301      	movs	r3, #1
 800e6f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e6f8:	e7b5      	b.n	800e666 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e6fa:	4b17      	ldr	r3, [pc, #92]	; (800e758 <xTaskIncrementTick+0x164>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e700:	4914      	ldr	r1, [pc, #80]	; (800e754 <xTaskIncrementTick+0x160>)
 800e702:	4613      	mov	r3, r2
 800e704:	009b      	lsls	r3, r3, #2
 800e706:	4413      	add	r3, r2
 800e708:	009b      	lsls	r3, r3, #2
 800e70a:	440b      	add	r3, r1
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	2b01      	cmp	r3, #1
 800e710:	d907      	bls.n	800e722 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800e712:	2301      	movs	r3, #1
 800e714:	617b      	str	r3, [r7, #20]
 800e716:	e004      	b.n	800e722 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e718:	4b10      	ldr	r3, [pc, #64]	; (800e75c <xTaskIncrementTick+0x168>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	3301      	adds	r3, #1
 800e71e:	4a0f      	ldr	r2, [pc, #60]	; (800e75c <xTaskIncrementTick+0x168>)
 800e720:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e722:	4b0f      	ldr	r3, [pc, #60]	; (800e760 <xTaskIncrementTick+0x16c>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d001      	beq.n	800e72e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800e72a:	2301      	movs	r3, #1
 800e72c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e72e:	697b      	ldr	r3, [r7, #20]
}
 800e730:	4618      	mov	r0, r3
 800e732:	3718      	adds	r7, #24
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}
 800e738:	200011d0 	.word	0x200011d0
 800e73c:	200011ac 	.word	0x200011ac
 800e740:	20001160 	.word	0x20001160
 800e744:	20001164 	.word	0x20001164
 800e748:	200011c0 	.word	0x200011c0
 800e74c:	200011c8 	.word	0x200011c8
 800e750:	200011b0 	.word	0x200011b0
 800e754:	20000cd8 	.word	0x20000cd8
 800e758:	20000cd4 	.word	0x20000cd4
 800e75c:	200011b8 	.word	0x200011b8
 800e760:	200011bc 	.word	0x200011bc

0800e764 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b084      	sub	sp, #16
 800e768:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e76a:	4b33      	ldr	r3, [pc, #204]	; (800e838 <vTaskSwitchContext+0xd4>)
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d003      	beq.n	800e77a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e772:	4b32      	ldr	r3, [pc, #200]	; (800e83c <vTaskSwitchContext+0xd8>)
 800e774:	2201      	movs	r2, #1
 800e776:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e778:	e059      	b.n	800e82e <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 800e77a:	4b30      	ldr	r3, [pc, #192]	; (800e83c <vTaskSwitchContext+0xd8>)
 800e77c:	2200      	movs	r2, #0
 800e77e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e780:	f7f1 febf 	bl	8000502 <getRunTimeCounterValue>
 800e784:	4602      	mov	r2, r0
 800e786:	4b2e      	ldr	r3, [pc, #184]	; (800e840 <vTaskSwitchContext+0xdc>)
 800e788:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e78a:	4b2d      	ldr	r3, [pc, #180]	; (800e840 <vTaskSwitchContext+0xdc>)
 800e78c:	681a      	ldr	r2, [r3, #0]
 800e78e:	4b2d      	ldr	r3, [pc, #180]	; (800e844 <vTaskSwitchContext+0xe0>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	429a      	cmp	r2, r3
 800e794:	d909      	bls.n	800e7aa <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e796:	4b2c      	ldr	r3, [pc, #176]	; (800e848 <vTaskSwitchContext+0xe4>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800e79c:	4a28      	ldr	r2, [pc, #160]	; (800e840 <vTaskSwitchContext+0xdc>)
 800e79e:	6810      	ldr	r0, [r2, #0]
 800e7a0:	4a28      	ldr	r2, [pc, #160]	; (800e844 <vTaskSwitchContext+0xe0>)
 800e7a2:	6812      	ldr	r2, [r2, #0]
 800e7a4:	1a82      	subs	r2, r0, r2
 800e7a6:	440a      	add	r2, r1
 800e7a8:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800e7aa:	4b25      	ldr	r3, [pc, #148]	; (800e840 <vTaskSwitchContext+0xdc>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	4a25      	ldr	r2, [pc, #148]	; (800e844 <vTaskSwitchContext+0xe0>)
 800e7b0:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7b2:	4b26      	ldr	r3, [pc, #152]	; (800e84c <vTaskSwitchContext+0xe8>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	60fb      	str	r3, [r7, #12]
 800e7b8:	e00f      	b.n	800e7da <vTaskSwitchContext+0x76>
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d109      	bne.n	800e7d4 <vTaskSwitchContext+0x70>
 800e7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c4:	f383 8811 	msr	BASEPRI, r3
 800e7c8:	f3bf 8f6f 	isb	sy
 800e7cc:	f3bf 8f4f 	dsb	sy
 800e7d0:	607b      	str	r3, [r7, #4]
 800e7d2:	e7fe      	b.n	800e7d2 <vTaskSwitchContext+0x6e>
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	3b01      	subs	r3, #1
 800e7d8:	60fb      	str	r3, [r7, #12]
 800e7da:	491d      	ldr	r1, [pc, #116]	; (800e850 <vTaskSwitchContext+0xec>)
 800e7dc:	68fa      	ldr	r2, [r7, #12]
 800e7de:	4613      	mov	r3, r2
 800e7e0:	009b      	lsls	r3, r3, #2
 800e7e2:	4413      	add	r3, r2
 800e7e4:	009b      	lsls	r3, r3, #2
 800e7e6:	440b      	add	r3, r1
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d0e5      	beq.n	800e7ba <vTaskSwitchContext+0x56>
 800e7ee:	68fa      	ldr	r2, [r7, #12]
 800e7f0:	4613      	mov	r3, r2
 800e7f2:	009b      	lsls	r3, r3, #2
 800e7f4:	4413      	add	r3, r2
 800e7f6:	009b      	lsls	r3, r3, #2
 800e7f8:	4a15      	ldr	r2, [pc, #84]	; (800e850 <vTaskSwitchContext+0xec>)
 800e7fa:	4413      	add	r3, r2
 800e7fc:	60bb      	str	r3, [r7, #8]
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	685b      	ldr	r3, [r3, #4]
 800e802:	685a      	ldr	r2, [r3, #4]
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	605a      	str	r2, [r3, #4]
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	685a      	ldr	r2, [r3, #4]
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	3308      	adds	r3, #8
 800e810:	429a      	cmp	r2, r3
 800e812:	d104      	bne.n	800e81e <vTaskSwitchContext+0xba>
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	685b      	ldr	r3, [r3, #4]
 800e818:	685a      	ldr	r2, [r3, #4]
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	605a      	str	r2, [r3, #4]
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	685b      	ldr	r3, [r3, #4]
 800e822:	68db      	ldr	r3, [r3, #12]
 800e824:	4a08      	ldr	r2, [pc, #32]	; (800e848 <vTaskSwitchContext+0xe4>)
 800e826:	6013      	str	r3, [r2, #0]
 800e828:	4a08      	ldr	r2, [pc, #32]	; (800e84c <vTaskSwitchContext+0xe8>)
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	6013      	str	r3, [r2, #0]
}
 800e82e:	bf00      	nop
 800e830:	3710      	adds	r7, #16
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}
 800e836:	bf00      	nop
 800e838:	200011d0 	.word	0x200011d0
 800e83c:	200011bc 	.word	0x200011bc
 800e840:	200011d8 	.word	0x200011d8
 800e844:	200011d4 	.word	0x200011d4
 800e848:	20000cd4 	.word	0x20000cd4
 800e84c:	200011b0 	.word	0x200011b0
 800e850:	20000cd8 	.word	0x20000cd8

0800e854 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b084      	sub	sp, #16
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
 800e85c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d109      	bne.n	800e878 <vTaskPlaceOnEventList+0x24>
 800e864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e868:	f383 8811 	msr	BASEPRI, r3
 800e86c:	f3bf 8f6f 	isb	sy
 800e870:	f3bf 8f4f 	dsb	sy
 800e874:	60fb      	str	r3, [r7, #12]
 800e876:	e7fe      	b.n	800e876 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e878:	4b07      	ldr	r3, [pc, #28]	; (800e898 <vTaskPlaceOnEventList+0x44>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	3318      	adds	r3, #24
 800e87e:	4619      	mov	r1, r3
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f7fe fd2e 	bl	800d2e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e886:	2101      	movs	r1, #1
 800e888:	6838      	ldr	r0, [r7, #0]
 800e88a:	f000 fba3 	bl	800efd4 <prvAddCurrentTaskToDelayedList>
}
 800e88e:	bf00      	nop
 800e890:	3710      	adds	r7, #16
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop
 800e898:	20000cd4 	.word	0x20000cd4

0800e89c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b086      	sub	sp, #24
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	60f8      	str	r0, [r7, #12]
 800e8a4:	60b9      	str	r1, [r7, #8]
 800e8a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d109      	bne.n	800e8c2 <vTaskPlaceOnEventListRestricted+0x26>
 800e8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b2:	f383 8811 	msr	BASEPRI, r3
 800e8b6:	f3bf 8f6f 	isb	sy
 800e8ba:	f3bf 8f4f 	dsb	sy
 800e8be:	617b      	str	r3, [r7, #20]
 800e8c0:	e7fe      	b.n	800e8c0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e8c2:	4b0a      	ldr	r3, [pc, #40]	; (800e8ec <vTaskPlaceOnEventListRestricted+0x50>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	3318      	adds	r3, #24
 800e8c8:	4619      	mov	r1, r3
 800e8ca:	68f8      	ldr	r0, [r7, #12]
 800e8cc:	f7fe fce5 	bl	800d29a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d002      	beq.n	800e8dc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800e8d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e8da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e8dc:	6879      	ldr	r1, [r7, #4]
 800e8de:	68b8      	ldr	r0, [r7, #8]
 800e8e0:	f000 fb78 	bl	800efd4 <prvAddCurrentTaskToDelayedList>
	}
 800e8e4:	bf00      	nop
 800e8e6:	3718      	adds	r7, #24
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}
 800e8ec:	20000cd4 	.word	0x20000cd4

0800e8f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b086      	sub	sp, #24
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	68db      	ldr	r3, [r3, #12]
 800e8fc:	68db      	ldr	r3, [r3, #12]
 800e8fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d109      	bne.n	800e91a <xTaskRemoveFromEventList+0x2a>
 800e906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e90a:	f383 8811 	msr	BASEPRI, r3
 800e90e:	f3bf 8f6f 	isb	sy
 800e912:	f3bf 8f4f 	dsb	sy
 800e916:	60fb      	str	r3, [r7, #12]
 800e918:	e7fe      	b.n	800e918 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	3318      	adds	r3, #24
 800e91e:	4618      	mov	r0, r3
 800e920:	f7fe fd18 	bl	800d354 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e924:	4b1d      	ldr	r3, [pc, #116]	; (800e99c <xTaskRemoveFromEventList+0xac>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d11d      	bne.n	800e968 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e92c:	693b      	ldr	r3, [r7, #16]
 800e92e:	3304      	adds	r3, #4
 800e930:	4618      	mov	r0, r3
 800e932:	f7fe fd0f 	bl	800d354 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e93a:	4b19      	ldr	r3, [pc, #100]	; (800e9a0 <xTaskRemoveFromEventList+0xb0>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	429a      	cmp	r2, r3
 800e940:	d903      	bls.n	800e94a <xTaskRemoveFromEventList+0x5a>
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e946:	4a16      	ldr	r2, [pc, #88]	; (800e9a0 <xTaskRemoveFromEventList+0xb0>)
 800e948:	6013      	str	r3, [r2, #0]
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e94e:	4613      	mov	r3, r2
 800e950:	009b      	lsls	r3, r3, #2
 800e952:	4413      	add	r3, r2
 800e954:	009b      	lsls	r3, r3, #2
 800e956:	4a13      	ldr	r2, [pc, #76]	; (800e9a4 <xTaskRemoveFromEventList+0xb4>)
 800e958:	441a      	add	r2, r3
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	3304      	adds	r3, #4
 800e95e:	4619      	mov	r1, r3
 800e960:	4610      	mov	r0, r2
 800e962:	f7fe fc9a 	bl	800d29a <vListInsertEnd>
 800e966:	e005      	b.n	800e974 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e968:	693b      	ldr	r3, [r7, #16]
 800e96a:	3318      	adds	r3, #24
 800e96c:	4619      	mov	r1, r3
 800e96e:	480e      	ldr	r0, [pc, #56]	; (800e9a8 <xTaskRemoveFromEventList+0xb8>)
 800e970:	f7fe fc93 	bl	800d29a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e978:	4b0c      	ldr	r3, [pc, #48]	; (800e9ac <xTaskRemoveFromEventList+0xbc>)
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e97e:	429a      	cmp	r2, r3
 800e980:	d905      	bls.n	800e98e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e982:	2301      	movs	r3, #1
 800e984:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e986:	4b0a      	ldr	r3, [pc, #40]	; (800e9b0 <xTaskRemoveFromEventList+0xc0>)
 800e988:	2201      	movs	r2, #1
 800e98a:	601a      	str	r2, [r3, #0]
 800e98c:	e001      	b.n	800e992 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e98e:	2300      	movs	r3, #0
 800e990:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e992:	697b      	ldr	r3, [r7, #20]
}
 800e994:	4618      	mov	r0, r3
 800e996:	3718      	adds	r7, #24
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}
 800e99c:	200011d0 	.word	0x200011d0
 800e9a0:	200011b0 	.word	0x200011b0
 800e9a4:	20000cd8 	.word	0x20000cd8
 800e9a8:	20001168 	.word	0x20001168
 800e9ac:	20000cd4 	.word	0x20000cd4
 800e9b0:	200011bc 	.word	0x200011bc

0800e9b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b083      	sub	sp, #12
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e9bc:	4b06      	ldr	r3, [pc, #24]	; (800e9d8 <vTaskInternalSetTimeOutState+0x24>)
 800e9be:	681a      	ldr	r2, [r3, #0]
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e9c4:	4b05      	ldr	r3, [pc, #20]	; (800e9dc <vTaskInternalSetTimeOutState+0x28>)
 800e9c6:	681a      	ldr	r2, [r3, #0]
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	605a      	str	r2, [r3, #4]
}
 800e9cc:	bf00      	nop
 800e9ce:	370c      	adds	r7, #12
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d6:	4770      	bx	lr
 800e9d8:	200011c0 	.word	0x200011c0
 800e9dc:	200011ac 	.word	0x200011ac

0800e9e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b088      	sub	sp, #32
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d109      	bne.n	800ea04 <xTaskCheckForTimeOut+0x24>
 800e9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9f4:	f383 8811 	msr	BASEPRI, r3
 800e9f8:	f3bf 8f6f 	isb	sy
 800e9fc:	f3bf 8f4f 	dsb	sy
 800ea00:	613b      	str	r3, [r7, #16]
 800ea02:	e7fe      	b.n	800ea02 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d109      	bne.n	800ea1e <xTaskCheckForTimeOut+0x3e>
 800ea0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea0e:	f383 8811 	msr	BASEPRI, r3
 800ea12:	f3bf 8f6f 	isb	sy
 800ea16:	f3bf 8f4f 	dsb	sy
 800ea1a:	60fb      	str	r3, [r7, #12]
 800ea1c:	e7fe      	b.n	800ea1c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800ea1e:	f000 ff9d 	bl	800f95c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ea22:	4b1d      	ldr	r3, [pc, #116]	; (800ea98 <xTaskCheckForTimeOut+0xb8>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	685b      	ldr	r3, [r3, #4]
 800ea2c:	69ba      	ldr	r2, [r7, #24]
 800ea2e:	1ad3      	subs	r3, r2, r3
 800ea30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea3a:	d102      	bne.n	800ea42 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	61fb      	str	r3, [r7, #28]
 800ea40:	e023      	b.n	800ea8a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681a      	ldr	r2, [r3, #0]
 800ea46:	4b15      	ldr	r3, [pc, #84]	; (800ea9c <xTaskCheckForTimeOut+0xbc>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d007      	beq.n	800ea5e <xTaskCheckForTimeOut+0x7e>
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	685b      	ldr	r3, [r3, #4]
 800ea52:	69ba      	ldr	r2, [r7, #24]
 800ea54:	429a      	cmp	r2, r3
 800ea56:	d302      	bcc.n	800ea5e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ea58:	2301      	movs	r3, #1
 800ea5a:	61fb      	str	r3, [r7, #28]
 800ea5c:	e015      	b.n	800ea8a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	697a      	ldr	r2, [r7, #20]
 800ea64:	429a      	cmp	r2, r3
 800ea66:	d20b      	bcs.n	800ea80 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	681a      	ldr	r2, [r3, #0]
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	1ad2      	subs	r2, r2, r3
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f7ff ff9d 	bl	800e9b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	61fb      	str	r3, [r7, #28]
 800ea7e:	e004      	b.n	800ea8a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	2200      	movs	r2, #0
 800ea84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ea86:	2301      	movs	r3, #1
 800ea88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ea8a:	f000 ff95 	bl	800f9b8 <vPortExitCritical>

	return xReturn;
 800ea8e:	69fb      	ldr	r3, [r7, #28]
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	3720      	adds	r7, #32
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}
 800ea98:	200011ac 	.word	0x200011ac
 800ea9c:	200011c0 	.word	0x200011c0

0800eaa0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eaa4:	4b03      	ldr	r3, [pc, #12]	; (800eab4 <vTaskMissedYield+0x14>)
 800eaa6:	2201      	movs	r2, #1
 800eaa8:	601a      	str	r2, [r3, #0]
}
 800eaaa:	bf00      	nop
 800eaac:	46bd      	mov	sp, r7
 800eaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab2:	4770      	bx	lr
 800eab4:	200011bc 	.word	0x200011bc

0800eab8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b082      	sub	sp, #8
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eac0:	f000 f852 	bl	800eb68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eac4:	4b06      	ldr	r3, [pc, #24]	; (800eae0 <prvIdleTask+0x28>)
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	2b01      	cmp	r3, #1
 800eaca:	d9f9      	bls.n	800eac0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800eacc:	4b05      	ldr	r3, [pc, #20]	; (800eae4 <prvIdleTask+0x2c>)
 800eace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ead2:	601a      	str	r2, [r3, #0]
 800ead4:	f3bf 8f4f 	dsb	sy
 800ead8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800eadc:	e7f0      	b.n	800eac0 <prvIdleTask+0x8>
 800eade:	bf00      	nop
 800eae0:	20000cd8 	.word	0x20000cd8
 800eae4:	e000ed04 	.word	0xe000ed04

0800eae8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b082      	sub	sp, #8
 800eaec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eaee:	2300      	movs	r3, #0
 800eaf0:	607b      	str	r3, [r7, #4]
 800eaf2:	e00c      	b.n	800eb0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eaf4:	687a      	ldr	r2, [r7, #4]
 800eaf6:	4613      	mov	r3, r2
 800eaf8:	009b      	lsls	r3, r3, #2
 800eafa:	4413      	add	r3, r2
 800eafc:	009b      	lsls	r3, r3, #2
 800eafe:	4a12      	ldr	r2, [pc, #72]	; (800eb48 <prvInitialiseTaskLists+0x60>)
 800eb00:	4413      	add	r3, r2
 800eb02:	4618      	mov	r0, r3
 800eb04:	f7fe fb9c 	bl	800d240 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	3301      	adds	r3, #1
 800eb0c:	607b      	str	r3, [r7, #4]
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2b37      	cmp	r3, #55	; 0x37
 800eb12:	d9ef      	bls.n	800eaf4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eb14:	480d      	ldr	r0, [pc, #52]	; (800eb4c <prvInitialiseTaskLists+0x64>)
 800eb16:	f7fe fb93 	bl	800d240 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eb1a:	480d      	ldr	r0, [pc, #52]	; (800eb50 <prvInitialiseTaskLists+0x68>)
 800eb1c:	f7fe fb90 	bl	800d240 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eb20:	480c      	ldr	r0, [pc, #48]	; (800eb54 <prvInitialiseTaskLists+0x6c>)
 800eb22:	f7fe fb8d 	bl	800d240 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eb26:	480c      	ldr	r0, [pc, #48]	; (800eb58 <prvInitialiseTaskLists+0x70>)
 800eb28:	f7fe fb8a 	bl	800d240 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eb2c:	480b      	ldr	r0, [pc, #44]	; (800eb5c <prvInitialiseTaskLists+0x74>)
 800eb2e:	f7fe fb87 	bl	800d240 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eb32:	4b0b      	ldr	r3, [pc, #44]	; (800eb60 <prvInitialiseTaskLists+0x78>)
 800eb34:	4a05      	ldr	r2, [pc, #20]	; (800eb4c <prvInitialiseTaskLists+0x64>)
 800eb36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eb38:	4b0a      	ldr	r3, [pc, #40]	; (800eb64 <prvInitialiseTaskLists+0x7c>)
 800eb3a:	4a05      	ldr	r2, [pc, #20]	; (800eb50 <prvInitialiseTaskLists+0x68>)
 800eb3c:	601a      	str	r2, [r3, #0]
}
 800eb3e:	bf00      	nop
 800eb40:	3708      	adds	r7, #8
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}
 800eb46:	bf00      	nop
 800eb48:	20000cd8 	.word	0x20000cd8
 800eb4c:	20001138 	.word	0x20001138
 800eb50:	2000114c 	.word	0x2000114c
 800eb54:	20001168 	.word	0x20001168
 800eb58:	2000117c 	.word	0x2000117c
 800eb5c:	20001194 	.word	0x20001194
 800eb60:	20001160 	.word	0x20001160
 800eb64:	20001164 	.word	0x20001164

0800eb68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b082      	sub	sp, #8
 800eb6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb6e:	e019      	b.n	800eba4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eb70:	f000 fef4 	bl	800f95c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb74:	4b0f      	ldr	r3, [pc, #60]	; (800ebb4 <prvCheckTasksWaitingTermination+0x4c>)
 800eb76:	68db      	ldr	r3, [r3, #12]
 800eb78:	68db      	ldr	r3, [r3, #12]
 800eb7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	3304      	adds	r3, #4
 800eb80:	4618      	mov	r0, r3
 800eb82:	f7fe fbe7 	bl	800d354 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eb86:	4b0c      	ldr	r3, [pc, #48]	; (800ebb8 <prvCheckTasksWaitingTermination+0x50>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	3b01      	subs	r3, #1
 800eb8c:	4a0a      	ldr	r2, [pc, #40]	; (800ebb8 <prvCheckTasksWaitingTermination+0x50>)
 800eb8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eb90:	4b0a      	ldr	r3, [pc, #40]	; (800ebbc <prvCheckTasksWaitingTermination+0x54>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	3b01      	subs	r3, #1
 800eb96:	4a09      	ldr	r2, [pc, #36]	; (800ebbc <prvCheckTasksWaitingTermination+0x54>)
 800eb98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800eb9a:	f000 ff0d 	bl	800f9b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f000 f80e 	bl	800ebc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eba4:	4b05      	ldr	r3, [pc, #20]	; (800ebbc <prvCheckTasksWaitingTermination+0x54>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d1e1      	bne.n	800eb70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ebac:	bf00      	nop
 800ebae:	3708      	adds	r7, #8
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}
 800ebb4:	2000117c 	.word	0x2000117c
 800ebb8:	200011a8 	.word	0x200011a8
 800ebbc:	20001190 	.word	0x20001190

0800ebc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b084      	sub	sp, #16
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d108      	bne.n	800ebe4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f001 f89c 	bl	800fd14 <vPortFree>
				vPortFree( pxTCB );
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f001 f899 	bl	800fd14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ebe2:	e017      	b.n	800ec14 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ebea:	2b01      	cmp	r3, #1
 800ebec:	d103      	bne.n	800ebf6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f001 f890 	bl	800fd14 <vPortFree>
	}
 800ebf4:	e00e      	b.n	800ec14 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ebfc:	2b02      	cmp	r3, #2
 800ebfe:	d009      	beq.n	800ec14 <prvDeleteTCB+0x54>
 800ec00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec04:	f383 8811 	msr	BASEPRI, r3
 800ec08:	f3bf 8f6f 	isb	sy
 800ec0c:	f3bf 8f4f 	dsb	sy
 800ec10:	60fb      	str	r3, [r7, #12]
 800ec12:	e7fe      	b.n	800ec12 <prvDeleteTCB+0x52>
	}
 800ec14:	bf00      	nop
 800ec16:	3710      	adds	r7, #16
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}

0800ec1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ec1c:	b480      	push	{r7}
 800ec1e:	b083      	sub	sp, #12
 800ec20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec22:	4b0c      	ldr	r3, [pc, #48]	; (800ec54 <prvResetNextTaskUnblockTime+0x38>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d104      	bne.n	800ec36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ec2c:	4b0a      	ldr	r3, [pc, #40]	; (800ec58 <prvResetNextTaskUnblockTime+0x3c>)
 800ec2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ec32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ec34:	e008      	b.n	800ec48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec36:	4b07      	ldr	r3, [pc, #28]	; (800ec54 <prvResetNextTaskUnblockTime+0x38>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	68db      	ldr	r3, [r3, #12]
 800ec3c:	68db      	ldr	r3, [r3, #12]
 800ec3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	685b      	ldr	r3, [r3, #4]
 800ec44:	4a04      	ldr	r2, [pc, #16]	; (800ec58 <prvResetNextTaskUnblockTime+0x3c>)
 800ec46:	6013      	str	r3, [r2, #0]
}
 800ec48:	bf00      	nop
 800ec4a:	370c      	adds	r7, #12
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec52:	4770      	bx	lr
 800ec54:	20001160 	.word	0x20001160
 800ec58:	200011c8 	.word	0x200011c8

0800ec5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ec5c:	b480      	push	{r7}
 800ec5e:	b083      	sub	sp, #12
 800ec60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ec62:	4b0b      	ldr	r3, [pc, #44]	; (800ec90 <xTaskGetSchedulerState+0x34>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d102      	bne.n	800ec70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	607b      	str	r3, [r7, #4]
 800ec6e:	e008      	b.n	800ec82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec70:	4b08      	ldr	r3, [pc, #32]	; (800ec94 <xTaskGetSchedulerState+0x38>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d102      	bne.n	800ec7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ec78:	2302      	movs	r3, #2
 800ec7a:	607b      	str	r3, [r7, #4]
 800ec7c:	e001      	b.n	800ec82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ec82:	687b      	ldr	r3, [r7, #4]
	}
 800ec84:	4618      	mov	r0, r3
 800ec86:	370c      	adds	r7, #12
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8e:	4770      	bx	lr
 800ec90:	200011b4 	.word	0x200011b4
 800ec94:	200011d0 	.word	0x200011d0

0800ec98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b086      	sub	sp, #24
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eca4:	2300      	movs	r3, #0
 800eca6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d054      	beq.n	800ed58 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ecae:	4b2d      	ldr	r3, [pc, #180]	; (800ed64 <xTaskPriorityDisinherit+0xcc>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	693a      	ldr	r2, [r7, #16]
 800ecb4:	429a      	cmp	r2, r3
 800ecb6:	d009      	beq.n	800eccc <xTaskPriorityDisinherit+0x34>
 800ecb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecbc:	f383 8811 	msr	BASEPRI, r3
 800ecc0:	f3bf 8f6f 	isb	sy
 800ecc4:	f3bf 8f4f 	dsb	sy
 800ecc8:	60fb      	str	r3, [r7, #12]
 800ecca:	e7fe      	b.n	800ecca <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d109      	bne.n	800ece8 <xTaskPriorityDisinherit+0x50>
 800ecd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd8:	f383 8811 	msr	BASEPRI, r3
 800ecdc:	f3bf 8f6f 	isb	sy
 800ece0:	f3bf 8f4f 	dsb	sy
 800ece4:	60bb      	str	r3, [r7, #8]
 800ece6:	e7fe      	b.n	800ece6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800ece8:	693b      	ldr	r3, [r7, #16]
 800ecea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecec:	1e5a      	subs	r2, r3, #1
 800ecee:	693b      	ldr	r3, [r7, #16]
 800ecf0:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ecf2:	693b      	ldr	r3, [r7, #16]
 800ecf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecf6:	693b      	ldr	r3, [r7, #16]
 800ecf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	d02c      	beq.n	800ed58 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ecfe:	693b      	ldr	r3, [r7, #16]
 800ed00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d128      	bne.n	800ed58 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed06:	693b      	ldr	r3, [r7, #16]
 800ed08:	3304      	adds	r3, #4
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f7fe fb22 	bl	800d354 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ed10:	693b      	ldr	r3, [r7, #16]
 800ed12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ed14:	693b      	ldr	r3, [r7, #16]
 800ed16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed1c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ed24:	693b      	ldr	r3, [r7, #16]
 800ed26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed28:	4b0f      	ldr	r3, [pc, #60]	; (800ed68 <xTaskPriorityDisinherit+0xd0>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	d903      	bls.n	800ed38 <xTaskPriorityDisinherit+0xa0>
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed34:	4a0c      	ldr	r2, [pc, #48]	; (800ed68 <xTaskPriorityDisinherit+0xd0>)
 800ed36:	6013      	str	r3, [r2, #0]
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed3c:	4613      	mov	r3, r2
 800ed3e:	009b      	lsls	r3, r3, #2
 800ed40:	4413      	add	r3, r2
 800ed42:	009b      	lsls	r3, r3, #2
 800ed44:	4a09      	ldr	r2, [pc, #36]	; (800ed6c <xTaskPriorityDisinherit+0xd4>)
 800ed46:	441a      	add	r2, r3
 800ed48:	693b      	ldr	r3, [r7, #16]
 800ed4a:	3304      	adds	r3, #4
 800ed4c:	4619      	mov	r1, r3
 800ed4e:	4610      	mov	r0, r2
 800ed50:	f7fe faa3 	bl	800d29a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ed54:	2301      	movs	r3, #1
 800ed56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ed58:	697b      	ldr	r3, [r7, #20]
	}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3718      	adds	r7, #24
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}
 800ed62:	bf00      	nop
 800ed64:	20000cd4 	.word	0x20000cd4
 800ed68:	200011b0 	.word	0x200011b0
 800ed6c:	20000cd8 	.word	0x20000cd8

0800ed70 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b086      	sub	sp, #24
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	60f8      	str	r0, [r7, #12]
 800ed78:	60b9      	str	r1, [r7, #8]
 800ed7a:	607a      	str	r2, [r7, #4]
 800ed7c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800ed7e:	f000 fded 	bl	800f95c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ed82:	4b26      	ldr	r3, [pc, #152]	; (800ee1c <xTaskNotifyWait+0xac>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ed8a:	b2db      	uxtb	r3, r3
 800ed8c:	2b02      	cmp	r3, #2
 800ed8e:	d01a      	beq.n	800edc6 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800ed90:	4b22      	ldr	r3, [pc, #136]	; (800ee1c <xTaskNotifyWait+0xac>)
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ed96:	68fa      	ldr	r2, [r7, #12]
 800ed98:	43d2      	mvns	r2, r2
 800ed9a:	400a      	ands	r2, r1
 800ed9c:	65da      	str	r2, [r3, #92]	; 0x5c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ed9e:	4b1f      	ldr	r3, [pc, #124]	; (800ee1c <xTaskNotifyWait+0xac>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	2201      	movs	r2, #1
 800eda4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

				if( xTicksToWait > ( TickType_t ) 0 )
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d00b      	beq.n	800edc6 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800edae:	2101      	movs	r1, #1
 800edb0:	6838      	ldr	r0, [r7, #0]
 800edb2:	f000 f90f 	bl	800efd4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800edb6:	4b1a      	ldr	r3, [pc, #104]	; (800ee20 <xTaskNotifyWait+0xb0>)
 800edb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edbc:	601a      	str	r2, [r3, #0]
 800edbe:	f3bf 8f4f 	dsb	sy
 800edc2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800edc6:	f000 fdf7 	bl	800f9b8 <vPortExitCritical>

		taskENTER_CRITICAL();
 800edca:	f000 fdc7 	bl	800f95c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d004      	beq.n	800edde <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800edd4:	4b11      	ldr	r3, [pc, #68]	; (800ee1c <xTaskNotifyWait+0xac>)
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800edde:	4b0f      	ldr	r3, [pc, #60]	; (800ee1c <xTaskNotifyWait+0xac>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ede6:	b2db      	uxtb	r3, r3
 800ede8:	2b02      	cmp	r3, #2
 800edea:	d002      	beq.n	800edf2 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800edec:	2300      	movs	r3, #0
 800edee:	617b      	str	r3, [r7, #20]
 800edf0:	e008      	b.n	800ee04 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800edf2:	4b0a      	ldr	r3, [pc, #40]	; (800ee1c <xTaskNotifyWait+0xac>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800edf8:	68ba      	ldr	r2, [r7, #8]
 800edfa:	43d2      	mvns	r2, r2
 800edfc:	400a      	ands	r2, r1
 800edfe:	65da      	str	r2, [r3, #92]	; 0x5c
				xReturn = pdTRUE;
 800ee00:	2301      	movs	r3, #1
 800ee02:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ee04:	4b05      	ldr	r3, [pc, #20]	; (800ee1c <xTaskNotifyWait+0xac>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	2200      	movs	r2, #0
 800ee0a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		}
		taskEXIT_CRITICAL();
 800ee0e:	f000 fdd3 	bl	800f9b8 <vPortExitCritical>

		return xReturn;
 800ee12:	697b      	ldr	r3, [r7, #20]
	}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3718      	adds	r7, #24
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	20000cd4 	.word	0x20000cd4
 800ee20:	e000ed04 	.word	0xe000ed04

0800ee24 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b08e      	sub	sp, #56	; 0x38
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	60f8      	str	r0, [r7, #12]
 800ee2c:	60b9      	str	r1, [r7, #8]
 800ee2e:	603b      	str	r3, [r7, #0]
 800ee30:	4613      	mov	r3, r2
 800ee32:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800ee34:	2301      	movs	r3, #1
 800ee36:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d109      	bne.n	800ee52 <xTaskGenericNotifyFromISR+0x2e>
 800ee3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee42:	f383 8811 	msr	BASEPRI, r3
 800ee46:	f3bf 8f6f 	isb	sy
 800ee4a:	f3bf 8f4f 	dsb	sy
 800ee4e:	627b      	str	r3, [r7, #36]	; 0x24
 800ee50:	e7fe      	b.n	800ee50 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ee52:	f000 fe5f 	bl	800fb14 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800ee5a:	f3ef 8211 	mrs	r2, BASEPRI
 800ee5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee62:	f383 8811 	msr	BASEPRI, r3
 800ee66:	f3bf 8f6f 	isb	sy
 800ee6a:	f3bf 8f4f 	dsb	sy
 800ee6e:	623a      	str	r2, [r7, #32]
 800ee70:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800ee72:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ee74:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d003      	beq.n	800ee84 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ee7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ee84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee86:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ee8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ee8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee90:	2202      	movs	r2, #2
 800ee92:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 800ee96:	79fb      	ldrb	r3, [r7, #7]
 800ee98:	2b04      	cmp	r3, #4
 800ee9a:	d829      	bhi.n	800eef0 <xTaskGenericNotifyFromISR+0xcc>
 800ee9c:	a201      	add	r2, pc, #4	; (adr r2, 800eea4 <xTaskGenericNotifyFromISR+0x80>)
 800ee9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eea2:	bf00      	nop
 800eea4:	0800ef0f 	.word	0x0800ef0f
 800eea8:	0800eeb9 	.word	0x0800eeb9
 800eeac:	0800eec7 	.word	0x0800eec7
 800eeb0:	0800eed3 	.word	0x0800eed3
 800eeb4:	0800eedb 	.word	0x0800eedb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800eeb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	431a      	orrs	r2, r3
 800eec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec2:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 800eec4:	e026      	b.n	800ef14 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800eec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eeca:	1c5a      	adds	r2, r3, #1
 800eecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eece:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 800eed0:	e020      	b.n	800ef14 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800eed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed4:	68ba      	ldr	r2, [r7, #8]
 800eed6:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 800eed8:	e01c      	b.n	800ef14 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800eeda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800eede:	2b02      	cmp	r3, #2
 800eee0:	d003      	beq.n	800eeea <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800eee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eee4:	68ba      	ldr	r2, [r7, #8]
 800eee6:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800eee8:	e014      	b.n	800ef14 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 800eeea:	2300      	movs	r3, #0
 800eeec:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800eeee:	e011      	b.n	800ef14 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800eef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eef8:	d00b      	beq.n	800ef12 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 800eefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eefe:	f383 8811 	msr	BASEPRI, r3
 800ef02:	f3bf 8f6f 	isb	sy
 800ef06:	f3bf 8f4f 	dsb	sy
 800ef0a:	61bb      	str	r3, [r7, #24]
 800ef0c:	e7fe      	b.n	800ef0c <xTaskGenericNotifyFromISR+0xe8>
					break;
 800ef0e:	bf00      	nop
 800ef10:	e000      	b.n	800ef14 <xTaskGenericNotifyFromISR+0xf0>
					break;
 800ef12:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ef14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ef18:	2b01      	cmp	r3, #1
 800ef1a:	d145      	bne.n	800efa8 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ef1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d009      	beq.n	800ef38 <xTaskGenericNotifyFromISR+0x114>
 800ef24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef28:	f383 8811 	msr	BASEPRI, r3
 800ef2c:	f3bf 8f6f 	isb	sy
 800ef30:	f3bf 8f4f 	dsb	sy
 800ef34:	617b      	str	r3, [r7, #20]
 800ef36:	e7fe      	b.n	800ef36 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef38:	4b20      	ldr	r3, [pc, #128]	; (800efbc <xTaskGenericNotifyFromISR+0x198>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d11d      	bne.n	800ef7c <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef42:	3304      	adds	r3, #4
 800ef44:	4618      	mov	r0, r3
 800ef46:	f7fe fa05 	bl	800d354 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ef4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef4e:	4b1c      	ldr	r3, [pc, #112]	; (800efc0 <xTaskGenericNotifyFromISR+0x19c>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d903      	bls.n	800ef5e <xTaskGenericNotifyFromISR+0x13a>
 800ef56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef5a:	4a19      	ldr	r2, [pc, #100]	; (800efc0 <xTaskGenericNotifyFromISR+0x19c>)
 800ef5c:	6013      	str	r3, [r2, #0]
 800ef5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef62:	4613      	mov	r3, r2
 800ef64:	009b      	lsls	r3, r3, #2
 800ef66:	4413      	add	r3, r2
 800ef68:	009b      	lsls	r3, r3, #2
 800ef6a:	4a16      	ldr	r2, [pc, #88]	; (800efc4 <xTaskGenericNotifyFromISR+0x1a0>)
 800ef6c:	441a      	add	r2, r3
 800ef6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef70:	3304      	adds	r3, #4
 800ef72:	4619      	mov	r1, r3
 800ef74:	4610      	mov	r0, r2
 800ef76:	f7fe f990 	bl	800d29a <vListInsertEnd>
 800ef7a:	e005      	b.n	800ef88 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800ef7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef7e:	3318      	adds	r3, #24
 800ef80:	4619      	mov	r1, r3
 800ef82:	4811      	ldr	r0, [pc, #68]	; (800efc8 <xTaskGenericNotifyFromISR+0x1a4>)
 800ef84:	f7fe f989 	bl	800d29a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ef88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef8c:	4b0f      	ldr	r3, [pc, #60]	; (800efcc <xTaskGenericNotifyFromISR+0x1a8>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef92:	429a      	cmp	r2, r3
 800ef94:	d908      	bls.n	800efa8 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800ef96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d002      	beq.n	800efa2 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800ef9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef9e:	2201      	movs	r2, #1
 800efa0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800efa2:	4b0b      	ldr	r3, [pc, #44]	; (800efd0 <xTaskGenericNotifyFromISR+0x1ac>)
 800efa4:	2201      	movs	r2, #1
 800efa6:	601a      	str	r2, [r3, #0]
 800efa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efaa:	613b      	str	r3, [r7, #16]
	__asm volatile
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800efb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800efb4:	4618      	mov	r0, r3
 800efb6:	3738      	adds	r7, #56	; 0x38
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}
 800efbc:	200011d0 	.word	0x200011d0
 800efc0:	200011b0 	.word	0x200011b0
 800efc4:	20000cd8 	.word	0x20000cd8
 800efc8:	20001168 	.word	0x20001168
 800efcc:	20000cd4 	.word	0x20000cd4
 800efd0:	200011bc 	.word	0x200011bc

0800efd4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b084      	sub	sp, #16
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
 800efdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800efde:	4b21      	ldr	r3, [pc, #132]	; (800f064 <prvAddCurrentTaskToDelayedList+0x90>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800efe4:	4b20      	ldr	r3, [pc, #128]	; (800f068 <prvAddCurrentTaskToDelayedList+0x94>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	3304      	adds	r3, #4
 800efea:	4618      	mov	r0, r3
 800efec:	f7fe f9b2 	bl	800d354 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eff6:	d10a      	bne.n	800f00e <prvAddCurrentTaskToDelayedList+0x3a>
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d007      	beq.n	800f00e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800effe:	4b1a      	ldr	r3, [pc, #104]	; (800f068 <prvAddCurrentTaskToDelayedList+0x94>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	3304      	adds	r3, #4
 800f004:	4619      	mov	r1, r3
 800f006:	4819      	ldr	r0, [pc, #100]	; (800f06c <prvAddCurrentTaskToDelayedList+0x98>)
 800f008:	f7fe f947 	bl	800d29a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f00c:	e026      	b.n	800f05c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f00e:	68fa      	ldr	r2, [r7, #12]
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	4413      	add	r3, r2
 800f014:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f016:	4b14      	ldr	r3, [pc, #80]	; (800f068 <prvAddCurrentTaskToDelayedList+0x94>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	68ba      	ldr	r2, [r7, #8]
 800f01c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f01e:	68ba      	ldr	r2, [r7, #8]
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	429a      	cmp	r2, r3
 800f024:	d209      	bcs.n	800f03a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f026:	4b12      	ldr	r3, [pc, #72]	; (800f070 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f028:	681a      	ldr	r2, [r3, #0]
 800f02a:	4b0f      	ldr	r3, [pc, #60]	; (800f068 <prvAddCurrentTaskToDelayedList+0x94>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	3304      	adds	r3, #4
 800f030:	4619      	mov	r1, r3
 800f032:	4610      	mov	r0, r2
 800f034:	f7fe f955 	bl	800d2e2 <vListInsert>
}
 800f038:	e010      	b.n	800f05c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f03a:	4b0e      	ldr	r3, [pc, #56]	; (800f074 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f03c:	681a      	ldr	r2, [r3, #0]
 800f03e:	4b0a      	ldr	r3, [pc, #40]	; (800f068 <prvAddCurrentTaskToDelayedList+0x94>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	3304      	adds	r3, #4
 800f044:	4619      	mov	r1, r3
 800f046:	4610      	mov	r0, r2
 800f048:	f7fe f94b 	bl	800d2e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f04c:	4b0a      	ldr	r3, [pc, #40]	; (800f078 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	68ba      	ldr	r2, [r7, #8]
 800f052:	429a      	cmp	r2, r3
 800f054:	d202      	bcs.n	800f05c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f056:	4a08      	ldr	r2, [pc, #32]	; (800f078 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	6013      	str	r3, [r2, #0]
}
 800f05c:	bf00      	nop
 800f05e:	3710      	adds	r7, #16
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}
 800f064:	200011ac 	.word	0x200011ac
 800f068:	20000cd4 	.word	0x20000cd4
 800f06c:	20001194 	.word	0x20001194
 800f070:	20001164 	.word	0x20001164
 800f074:	20001160 	.word	0x20001160
 800f078:	200011c8 	.word	0x200011c8

0800f07c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b08a      	sub	sp, #40	; 0x28
 800f080:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f082:	2300      	movs	r3, #0
 800f084:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f086:	f000 faff 	bl	800f688 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f08a:	4b1c      	ldr	r3, [pc, #112]	; (800f0fc <xTimerCreateTimerTask+0x80>)
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d021      	beq.n	800f0d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f092:	2300      	movs	r3, #0
 800f094:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f096:	2300      	movs	r3, #0
 800f098:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f09a:	1d3a      	adds	r2, r7, #4
 800f09c:	f107 0108 	add.w	r1, r7, #8
 800f0a0:	f107 030c 	add.w	r3, r7, #12
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7fe f8b1 	bl	800d20c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f0aa:	6879      	ldr	r1, [r7, #4]
 800f0ac:	68bb      	ldr	r3, [r7, #8]
 800f0ae:	68fa      	ldr	r2, [r7, #12]
 800f0b0:	9202      	str	r2, [sp, #8]
 800f0b2:	9301      	str	r3, [sp, #4]
 800f0b4:	2302      	movs	r3, #2
 800f0b6:	9300      	str	r3, [sp, #0]
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	460a      	mov	r2, r1
 800f0bc:	4910      	ldr	r1, [pc, #64]	; (800f100 <xTimerCreateTimerTask+0x84>)
 800f0be:	4811      	ldr	r0, [pc, #68]	; (800f104 <xTimerCreateTimerTask+0x88>)
 800f0c0:	f7fe ff26 	bl	800df10 <xTaskCreateStatic>
 800f0c4:	4602      	mov	r2, r0
 800f0c6:	4b10      	ldr	r3, [pc, #64]	; (800f108 <xTimerCreateTimerTask+0x8c>)
 800f0c8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f0ca:	4b0f      	ldr	r3, [pc, #60]	; (800f108 <xTimerCreateTimerTask+0x8c>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d001      	beq.n	800f0d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f0d2:	2301      	movs	r3, #1
 800f0d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d109      	bne.n	800f0f0 <xTimerCreateTimerTask+0x74>
	__asm volatile
 800f0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0e0:	f383 8811 	msr	BASEPRI, r3
 800f0e4:	f3bf 8f6f 	isb	sy
 800f0e8:	f3bf 8f4f 	dsb	sy
 800f0ec:	613b      	str	r3, [r7, #16]
 800f0ee:	e7fe      	b.n	800f0ee <xTimerCreateTimerTask+0x72>
	return xReturn;
 800f0f0:	697b      	ldr	r3, [r7, #20]
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3718      	adds	r7, #24
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}
 800f0fa:	bf00      	nop
 800f0fc:	2000120c 	.word	0x2000120c
 800f100:	08018f54 	.word	0x08018f54
 800f104:	0800f23d 	.word	0x0800f23d
 800f108:	20001210 	.word	0x20001210

0800f10c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b08a      	sub	sp, #40	; 0x28
 800f110:	af00      	add	r7, sp, #0
 800f112:	60f8      	str	r0, [r7, #12]
 800f114:	60b9      	str	r1, [r7, #8]
 800f116:	607a      	str	r2, [r7, #4]
 800f118:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f11a:	2300      	movs	r3, #0
 800f11c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d109      	bne.n	800f138 <xTimerGenericCommand+0x2c>
 800f124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f128:	f383 8811 	msr	BASEPRI, r3
 800f12c:	f3bf 8f6f 	isb	sy
 800f130:	f3bf 8f4f 	dsb	sy
 800f134:	623b      	str	r3, [r7, #32]
 800f136:	e7fe      	b.n	800f136 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f138:	4b19      	ldr	r3, [pc, #100]	; (800f1a0 <xTimerGenericCommand+0x94>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d02a      	beq.n	800f196 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	2b05      	cmp	r3, #5
 800f150:	dc18      	bgt.n	800f184 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f152:	f7ff fd83 	bl	800ec5c <xTaskGetSchedulerState>
 800f156:	4603      	mov	r3, r0
 800f158:	2b02      	cmp	r3, #2
 800f15a:	d109      	bne.n	800f170 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f15c:	4b10      	ldr	r3, [pc, #64]	; (800f1a0 <xTimerGenericCommand+0x94>)
 800f15e:	6818      	ldr	r0, [r3, #0]
 800f160:	f107 0110 	add.w	r1, r7, #16
 800f164:	2300      	movs	r3, #0
 800f166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f168:	f7fe fa5c 	bl	800d624 <xQueueGenericSend>
 800f16c:	6278      	str	r0, [r7, #36]	; 0x24
 800f16e:	e012      	b.n	800f196 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f170:	4b0b      	ldr	r3, [pc, #44]	; (800f1a0 <xTimerGenericCommand+0x94>)
 800f172:	6818      	ldr	r0, [r3, #0]
 800f174:	f107 0110 	add.w	r1, r7, #16
 800f178:	2300      	movs	r3, #0
 800f17a:	2200      	movs	r2, #0
 800f17c:	f7fe fa52 	bl	800d624 <xQueueGenericSend>
 800f180:	6278      	str	r0, [r7, #36]	; 0x24
 800f182:	e008      	b.n	800f196 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f184:	4b06      	ldr	r3, [pc, #24]	; (800f1a0 <xTimerGenericCommand+0x94>)
 800f186:	6818      	ldr	r0, [r3, #0]
 800f188:	f107 0110 	add.w	r1, r7, #16
 800f18c:	2300      	movs	r3, #0
 800f18e:	683a      	ldr	r2, [r7, #0]
 800f190:	f7fe fb42 	bl	800d818 <xQueueGenericSendFromISR>
 800f194:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f198:	4618      	mov	r0, r3
 800f19a:	3728      	adds	r7, #40	; 0x28
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}
 800f1a0:	2000120c 	.word	0x2000120c

0800f1a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b088      	sub	sp, #32
 800f1a8:	af02      	add	r7, sp, #8
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1ae:	4b22      	ldr	r3, [pc, #136]	; (800f238 <prvProcessExpiredTimer+0x94>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	68db      	ldr	r3, [r3, #12]
 800f1b4:	68db      	ldr	r3, [r3, #12]
 800f1b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	3304      	adds	r3, #4
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f7fe f8c9 	bl	800d354 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f1c8:	f003 0304 	and.w	r3, r3, #4
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d021      	beq.n	800f214 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f1d0:	697b      	ldr	r3, [r7, #20]
 800f1d2:	699a      	ldr	r2, [r3, #24]
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	18d1      	adds	r1, r2, r3
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	683a      	ldr	r2, [r7, #0]
 800f1dc:	6978      	ldr	r0, [r7, #20]
 800f1de:	f000 f8d1 	bl	800f384 <prvInsertTimerInActiveList>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d01e      	beq.n	800f226 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	9300      	str	r3, [sp, #0]
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	687a      	ldr	r2, [r7, #4]
 800f1f0:	2100      	movs	r1, #0
 800f1f2:	6978      	ldr	r0, [r7, #20]
 800f1f4:	f7ff ff8a 	bl	800f10c <xTimerGenericCommand>
 800f1f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f1fa:	693b      	ldr	r3, [r7, #16]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d112      	bne.n	800f226 <prvProcessExpiredTimer+0x82>
 800f200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f204:	f383 8811 	msr	BASEPRI, r3
 800f208:	f3bf 8f6f 	isb	sy
 800f20c:	f3bf 8f4f 	dsb	sy
 800f210:	60fb      	str	r3, [r7, #12]
 800f212:	e7fe      	b.n	800f212 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f21a:	f023 0301 	bic.w	r3, r3, #1
 800f21e:	b2da      	uxtb	r2, r3
 800f220:	697b      	ldr	r3, [r7, #20]
 800f222:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f226:	697b      	ldr	r3, [r7, #20]
 800f228:	6a1b      	ldr	r3, [r3, #32]
 800f22a:	6978      	ldr	r0, [r7, #20]
 800f22c:	4798      	blx	r3
}
 800f22e:	bf00      	nop
 800f230:	3718      	adds	r7, #24
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}
 800f236:	bf00      	nop
 800f238:	20001204 	.word	0x20001204

0800f23c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b084      	sub	sp, #16
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f244:	f107 0308 	add.w	r3, r7, #8
 800f248:	4618      	mov	r0, r3
 800f24a:	f000 f857 	bl	800f2fc <prvGetNextExpireTime>
 800f24e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	4619      	mov	r1, r3
 800f254:	68f8      	ldr	r0, [r7, #12]
 800f256:	f000 f803 	bl	800f260 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f25a:	f000 f8d5 	bl	800f408 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f25e:	e7f1      	b.n	800f244 <prvTimerTask+0x8>

0800f260 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b084      	sub	sp, #16
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f26a:	f7ff f909 	bl	800e480 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f26e:	f107 0308 	add.w	r3, r7, #8
 800f272:	4618      	mov	r0, r3
 800f274:	f000 f866 	bl	800f344 <prvSampleTimeNow>
 800f278:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d130      	bne.n	800f2e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d10a      	bne.n	800f29c <prvProcessTimerOrBlockTask+0x3c>
 800f286:	687a      	ldr	r2, [r7, #4]
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	429a      	cmp	r2, r3
 800f28c:	d806      	bhi.n	800f29c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f28e:	f7ff f905 	bl	800e49c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f292:	68f9      	ldr	r1, [r7, #12]
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f7ff ff85 	bl	800f1a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f29a:	e024      	b.n	800f2e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d008      	beq.n	800f2b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f2a2:	4b13      	ldr	r3, [pc, #76]	; (800f2f0 <prvProcessTimerOrBlockTask+0x90>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d101      	bne.n	800f2b0 <prvProcessTimerOrBlockTask+0x50>
 800f2ac:	2301      	movs	r3, #1
 800f2ae:	e000      	b.n	800f2b2 <prvProcessTimerOrBlockTask+0x52>
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f2b4:	4b0f      	ldr	r3, [pc, #60]	; (800f2f4 <prvProcessTimerOrBlockTask+0x94>)
 800f2b6:	6818      	ldr	r0, [r3, #0]
 800f2b8:	687a      	ldr	r2, [r7, #4]
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	1ad3      	subs	r3, r2, r3
 800f2be:	683a      	ldr	r2, [r7, #0]
 800f2c0:	4619      	mov	r1, r3
 800f2c2:	f7fe fdf1 	bl	800dea8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f2c6:	f7ff f8e9 	bl	800e49c <xTaskResumeAll>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d10a      	bne.n	800f2e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f2d0:	4b09      	ldr	r3, [pc, #36]	; (800f2f8 <prvProcessTimerOrBlockTask+0x98>)
 800f2d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2d6:	601a      	str	r2, [r3, #0]
 800f2d8:	f3bf 8f4f 	dsb	sy
 800f2dc:	f3bf 8f6f 	isb	sy
}
 800f2e0:	e001      	b.n	800f2e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f2e2:	f7ff f8db 	bl	800e49c <xTaskResumeAll>
}
 800f2e6:	bf00      	nop
 800f2e8:	3710      	adds	r7, #16
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}
 800f2ee:	bf00      	nop
 800f2f0:	20001208 	.word	0x20001208
 800f2f4:	2000120c 	.word	0x2000120c
 800f2f8:	e000ed04 	.word	0xe000ed04

0800f2fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b085      	sub	sp, #20
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f304:	4b0e      	ldr	r3, [pc, #56]	; (800f340 <prvGetNextExpireTime+0x44>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d101      	bne.n	800f312 <prvGetNextExpireTime+0x16>
 800f30e:	2201      	movs	r2, #1
 800f310:	e000      	b.n	800f314 <prvGetNextExpireTime+0x18>
 800f312:	2200      	movs	r2, #0
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d105      	bne.n	800f32c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f320:	4b07      	ldr	r3, [pc, #28]	; (800f340 <prvGetNextExpireTime+0x44>)
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	68db      	ldr	r3, [r3, #12]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	60fb      	str	r3, [r7, #12]
 800f32a:	e001      	b.n	800f330 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f32c:	2300      	movs	r3, #0
 800f32e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f330:	68fb      	ldr	r3, [r7, #12]
}
 800f332:	4618      	mov	r0, r3
 800f334:	3714      	adds	r7, #20
 800f336:	46bd      	mov	sp, r7
 800f338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33c:	4770      	bx	lr
 800f33e:	bf00      	nop
 800f340:	20001204 	.word	0x20001204

0800f344 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b084      	sub	sp, #16
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f34c:	f7ff f942 	bl	800e5d4 <xTaskGetTickCount>
 800f350:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f352:	4b0b      	ldr	r3, [pc, #44]	; (800f380 <prvSampleTimeNow+0x3c>)
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	68fa      	ldr	r2, [r7, #12]
 800f358:	429a      	cmp	r2, r3
 800f35a:	d205      	bcs.n	800f368 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f35c:	f000 f930 	bl	800f5c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2201      	movs	r2, #1
 800f364:	601a      	str	r2, [r3, #0]
 800f366:	e002      	b.n	800f36e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2200      	movs	r2, #0
 800f36c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f36e:	4a04      	ldr	r2, [pc, #16]	; (800f380 <prvSampleTimeNow+0x3c>)
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f374:	68fb      	ldr	r3, [r7, #12]
}
 800f376:	4618      	mov	r0, r3
 800f378:	3710      	adds	r7, #16
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}
 800f37e:	bf00      	nop
 800f380:	20001214 	.word	0x20001214

0800f384 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b086      	sub	sp, #24
 800f388:	af00      	add	r7, sp, #0
 800f38a:	60f8      	str	r0, [r7, #12]
 800f38c:	60b9      	str	r1, [r7, #8]
 800f38e:	607a      	str	r2, [r7, #4]
 800f390:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f392:	2300      	movs	r3, #0
 800f394:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	68ba      	ldr	r2, [r7, #8]
 800f39a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	68fa      	ldr	r2, [r7, #12]
 800f3a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f3a2:	68ba      	ldr	r2, [r7, #8]
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	429a      	cmp	r2, r3
 800f3a8:	d812      	bhi.n	800f3d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3aa:	687a      	ldr	r2, [r7, #4]
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	1ad2      	subs	r2, r2, r3
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	699b      	ldr	r3, [r3, #24]
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	d302      	bcc.n	800f3be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	617b      	str	r3, [r7, #20]
 800f3bc:	e01b      	b.n	800f3f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f3be:	4b10      	ldr	r3, [pc, #64]	; (800f400 <prvInsertTimerInActiveList+0x7c>)
 800f3c0:	681a      	ldr	r2, [r3, #0]
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	3304      	adds	r3, #4
 800f3c6:	4619      	mov	r1, r3
 800f3c8:	4610      	mov	r0, r2
 800f3ca:	f7fd ff8a 	bl	800d2e2 <vListInsert>
 800f3ce:	e012      	b.n	800f3f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f3d0:	687a      	ldr	r2, [r7, #4]
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	d206      	bcs.n	800f3e6 <prvInsertTimerInActiveList+0x62>
 800f3d8:	68ba      	ldr	r2, [r7, #8]
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d302      	bcc.n	800f3e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f3e0:	2301      	movs	r3, #1
 800f3e2:	617b      	str	r3, [r7, #20]
 800f3e4:	e007      	b.n	800f3f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f3e6:	4b07      	ldr	r3, [pc, #28]	; (800f404 <prvInsertTimerInActiveList+0x80>)
 800f3e8:	681a      	ldr	r2, [r3, #0]
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	3304      	adds	r3, #4
 800f3ee:	4619      	mov	r1, r3
 800f3f0:	4610      	mov	r0, r2
 800f3f2:	f7fd ff76 	bl	800d2e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f3f6:	697b      	ldr	r3, [r7, #20]
}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	3718      	adds	r7, #24
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}
 800f400:	20001208 	.word	0x20001208
 800f404:	20001204 	.word	0x20001204

0800f408 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b08e      	sub	sp, #56	; 0x38
 800f40c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f40e:	e0c6      	b.n	800f59e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2b00      	cmp	r3, #0
 800f414:	da17      	bge.n	800f446 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f416:	1d3b      	adds	r3, r7, #4
 800f418:	3304      	adds	r3, #4
 800f41a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d109      	bne.n	800f436 <prvProcessReceivedCommands+0x2e>
 800f422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f426:	f383 8811 	msr	BASEPRI, r3
 800f42a:	f3bf 8f6f 	isb	sy
 800f42e:	f3bf 8f4f 	dsb	sy
 800f432:	61fb      	str	r3, [r7, #28]
 800f434:	e7fe      	b.n	800f434 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f43c:	6850      	ldr	r0, [r2, #4]
 800f43e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f440:	6892      	ldr	r2, [r2, #8]
 800f442:	4611      	mov	r1, r2
 800f444:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	f2c0 80a7 	blt.w	800f59c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f454:	695b      	ldr	r3, [r3, #20]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d004      	beq.n	800f464 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f45c:	3304      	adds	r3, #4
 800f45e:	4618      	mov	r0, r3
 800f460:	f7fd ff78 	bl	800d354 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f464:	463b      	mov	r3, r7
 800f466:	4618      	mov	r0, r3
 800f468:	f7ff ff6c 	bl	800f344 <prvSampleTimeNow>
 800f46c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2b09      	cmp	r3, #9
 800f472:	f200 8094 	bhi.w	800f59e <prvProcessReceivedCommands+0x196>
 800f476:	a201      	add	r2, pc, #4	; (adr r2, 800f47c <prvProcessReceivedCommands+0x74>)
 800f478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f47c:	0800f4a5 	.word	0x0800f4a5
 800f480:	0800f4a5 	.word	0x0800f4a5
 800f484:	0800f4a5 	.word	0x0800f4a5
 800f488:	0800f517 	.word	0x0800f517
 800f48c:	0800f52b 	.word	0x0800f52b
 800f490:	0800f573 	.word	0x0800f573
 800f494:	0800f4a5 	.word	0x0800f4a5
 800f498:	0800f4a5 	.word	0x0800f4a5
 800f49c:	0800f517 	.word	0x0800f517
 800f4a0:	0800f52b 	.word	0x0800f52b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4aa:	f043 0301 	orr.w	r3, r3, #1
 800f4ae:	b2da      	uxtb	r2, r3
 800f4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f4b6:	68ba      	ldr	r2, [r7, #8]
 800f4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ba:	699b      	ldr	r3, [r3, #24]
 800f4bc:	18d1      	adds	r1, r2, r3
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4c4:	f7ff ff5e 	bl	800f384 <prvInsertTimerInActiveList>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d067      	beq.n	800f59e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d0:	6a1b      	ldr	r3, [r3, #32]
 800f4d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4dc:	f003 0304 	and.w	r3, r3, #4
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d05c      	beq.n	800f59e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f4e4:	68ba      	ldr	r2, [r7, #8]
 800f4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e8:	699b      	ldr	r3, [r3, #24]
 800f4ea:	441a      	add	r2, r3
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	9300      	str	r3, [sp, #0]
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	2100      	movs	r1, #0
 800f4f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4f6:	f7ff fe09 	bl	800f10c <xTimerGenericCommand>
 800f4fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f4fc:	6a3b      	ldr	r3, [r7, #32]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d14d      	bne.n	800f59e <prvProcessReceivedCommands+0x196>
 800f502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f506:	f383 8811 	msr	BASEPRI, r3
 800f50a:	f3bf 8f6f 	isb	sy
 800f50e:	f3bf 8f4f 	dsb	sy
 800f512:	61bb      	str	r3, [r7, #24]
 800f514:	e7fe      	b.n	800f514 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f518:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f51c:	f023 0301 	bic.w	r3, r3, #1
 800f520:	b2da      	uxtb	r2, r3
 800f522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f524:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f528:	e039      	b.n	800f59e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f52c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f530:	f043 0301 	orr.w	r3, r3, #1
 800f534:	b2da      	uxtb	r2, r3
 800f536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f538:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f53c:	68ba      	ldr	r2, [r7, #8]
 800f53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f540:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f544:	699b      	ldr	r3, [r3, #24]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d109      	bne.n	800f55e <prvProcessReceivedCommands+0x156>
 800f54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f54e:	f383 8811 	msr	BASEPRI, r3
 800f552:	f3bf 8f6f 	isb	sy
 800f556:	f3bf 8f4f 	dsb	sy
 800f55a:	617b      	str	r3, [r7, #20]
 800f55c:	e7fe      	b.n	800f55c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f560:	699a      	ldr	r2, [r3, #24]
 800f562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f564:	18d1      	adds	r1, r2, r3
 800f566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f56a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f56c:	f7ff ff0a 	bl	800f384 <prvInsertTimerInActiveList>
					break;
 800f570:	e015      	b.n	800f59e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f574:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f578:	f003 0302 	and.w	r3, r3, #2
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d103      	bne.n	800f588 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800f580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f582:	f000 fbc7 	bl	800fd14 <vPortFree>
 800f586:	e00a      	b.n	800f59e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f58a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f58e:	f023 0301 	bic.w	r3, r3, #1
 800f592:	b2da      	uxtb	r2, r3
 800f594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f596:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f59a:	e000      	b.n	800f59e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f59c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f59e:	4b07      	ldr	r3, [pc, #28]	; (800f5bc <prvProcessReceivedCommands+0x1b4>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	1d39      	adds	r1, r7, #4
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f7fe f9ca 	bl	800d940 <xQueueReceive>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	f47f af2e 	bne.w	800f410 <prvProcessReceivedCommands+0x8>
	}
}
 800f5b4:	bf00      	nop
 800f5b6:	3730      	adds	r7, #48	; 0x30
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}
 800f5bc:	2000120c 	.word	0x2000120c

0800f5c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b088      	sub	sp, #32
 800f5c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f5c6:	e047      	b.n	800f658 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f5c8:	4b2d      	ldr	r3, [pc, #180]	; (800f680 <prvSwitchTimerLists+0xc0>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	68db      	ldr	r3, [r3, #12]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5d2:	4b2b      	ldr	r3, [pc, #172]	; (800f680 <prvSwitchTimerLists+0xc0>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	68db      	ldr	r3, [r3, #12]
 800f5d8:	68db      	ldr	r3, [r3, #12]
 800f5da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	3304      	adds	r3, #4
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	f7fd feb7 	bl	800d354 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	6a1b      	ldr	r3, [r3, #32]
 800f5ea:	68f8      	ldr	r0, [r7, #12]
 800f5ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5f4:	f003 0304 	and.w	r3, r3, #4
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d02d      	beq.n	800f658 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	699b      	ldr	r3, [r3, #24]
 800f600:	693a      	ldr	r2, [r7, #16]
 800f602:	4413      	add	r3, r2
 800f604:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f606:	68ba      	ldr	r2, [r7, #8]
 800f608:	693b      	ldr	r3, [r7, #16]
 800f60a:	429a      	cmp	r2, r3
 800f60c:	d90e      	bls.n	800f62c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	68ba      	ldr	r2, [r7, #8]
 800f612:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	68fa      	ldr	r2, [r7, #12]
 800f618:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f61a:	4b19      	ldr	r3, [pc, #100]	; (800f680 <prvSwitchTimerLists+0xc0>)
 800f61c:	681a      	ldr	r2, [r3, #0]
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	3304      	adds	r3, #4
 800f622:	4619      	mov	r1, r3
 800f624:	4610      	mov	r0, r2
 800f626:	f7fd fe5c 	bl	800d2e2 <vListInsert>
 800f62a:	e015      	b.n	800f658 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f62c:	2300      	movs	r3, #0
 800f62e:	9300      	str	r3, [sp, #0]
 800f630:	2300      	movs	r3, #0
 800f632:	693a      	ldr	r2, [r7, #16]
 800f634:	2100      	movs	r1, #0
 800f636:	68f8      	ldr	r0, [r7, #12]
 800f638:	f7ff fd68 	bl	800f10c <xTimerGenericCommand>
 800f63c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d109      	bne.n	800f658 <prvSwitchTimerLists+0x98>
 800f644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f648:	f383 8811 	msr	BASEPRI, r3
 800f64c:	f3bf 8f6f 	isb	sy
 800f650:	f3bf 8f4f 	dsb	sy
 800f654:	603b      	str	r3, [r7, #0]
 800f656:	e7fe      	b.n	800f656 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f658:	4b09      	ldr	r3, [pc, #36]	; (800f680 <prvSwitchTimerLists+0xc0>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d1b2      	bne.n	800f5c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f662:	4b07      	ldr	r3, [pc, #28]	; (800f680 <prvSwitchTimerLists+0xc0>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f668:	4b06      	ldr	r3, [pc, #24]	; (800f684 <prvSwitchTimerLists+0xc4>)
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	4a04      	ldr	r2, [pc, #16]	; (800f680 <prvSwitchTimerLists+0xc0>)
 800f66e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f670:	4a04      	ldr	r2, [pc, #16]	; (800f684 <prvSwitchTimerLists+0xc4>)
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	6013      	str	r3, [r2, #0]
}
 800f676:	bf00      	nop
 800f678:	3718      	adds	r7, #24
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}
 800f67e:	bf00      	nop
 800f680:	20001204 	.word	0x20001204
 800f684:	20001208 	.word	0x20001208

0800f688 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b082      	sub	sp, #8
 800f68c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f68e:	f000 f965 	bl	800f95c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f692:	4b15      	ldr	r3, [pc, #84]	; (800f6e8 <prvCheckForValidListAndQueue+0x60>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d120      	bne.n	800f6dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f69a:	4814      	ldr	r0, [pc, #80]	; (800f6ec <prvCheckForValidListAndQueue+0x64>)
 800f69c:	f7fd fdd0 	bl	800d240 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f6a0:	4813      	ldr	r0, [pc, #76]	; (800f6f0 <prvCheckForValidListAndQueue+0x68>)
 800f6a2:	f7fd fdcd 	bl	800d240 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f6a6:	4b13      	ldr	r3, [pc, #76]	; (800f6f4 <prvCheckForValidListAndQueue+0x6c>)
 800f6a8:	4a10      	ldr	r2, [pc, #64]	; (800f6ec <prvCheckForValidListAndQueue+0x64>)
 800f6aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f6ac:	4b12      	ldr	r3, [pc, #72]	; (800f6f8 <prvCheckForValidListAndQueue+0x70>)
 800f6ae:	4a10      	ldr	r2, [pc, #64]	; (800f6f0 <prvCheckForValidListAndQueue+0x68>)
 800f6b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	9300      	str	r3, [sp, #0]
 800f6b6:	4b11      	ldr	r3, [pc, #68]	; (800f6fc <prvCheckForValidListAndQueue+0x74>)
 800f6b8:	4a11      	ldr	r2, [pc, #68]	; (800f700 <prvCheckForValidListAndQueue+0x78>)
 800f6ba:	2110      	movs	r1, #16
 800f6bc:	200a      	movs	r0, #10
 800f6be:	f7fd fedb 	bl	800d478 <xQueueGenericCreateStatic>
 800f6c2:	4602      	mov	r2, r0
 800f6c4:	4b08      	ldr	r3, [pc, #32]	; (800f6e8 <prvCheckForValidListAndQueue+0x60>)
 800f6c6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f6c8:	4b07      	ldr	r3, [pc, #28]	; (800f6e8 <prvCheckForValidListAndQueue+0x60>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d005      	beq.n	800f6dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f6d0:	4b05      	ldr	r3, [pc, #20]	; (800f6e8 <prvCheckForValidListAndQueue+0x60>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	490b      	ldr	r1, [pc, #44]	; (800f704 <prvCheckForValidListAndQueue+0x7c>)
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	f7fe fbbe 	bl	800de58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f6dc:	f000 f96c 	bl	800f9b8 <vPortExitCritical>
}
 800f6e0:	bf00      	nop
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}
 800f6e6:	bf00      	nop
 800f6e8:	2000120c 	.word	0x2000120c
 800f6ec:	200011dc 	.word	0x200011dc
 800f6f0:	200011f0 	.word	0x200011f0
 800f6f4:	20001204 	.word	0x20001204
 800f6f8:	20001208 	.word	0x20001208
 800f6fc:	200012b8 	.word	0x200012b8
 800f700:	20001218 	.word	0x20001218
 800f704:	08018f5c 	.word	0x08018f5c

0800f708 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f708:	b480      	push	{r7}
 800f70a:	b085      	sub	sp, #20
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	60f8      	str	r0, [r7, #12]
 800f710:	60b9      	str	r1, [r7, #8]
 800f712:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	3b04      	subs	r3, #4
 800f718:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f720:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	3b04      	subs	r3, #4
 800f726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f728:	68bb      	ldr	r3, [r7, #8]
 800f72a:	f023 0201 	bic.w	r2, r3, #1
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	3b04      	subs	r3, #4
 800f736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f738:	4a0c      	ldr	r2, [pc, #48]	; (800f76c <pxPortInitialiseStack+0x64>)
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	3b14      	subs	r3, #20
 800f742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f744:	687a      	ldr	r2, [r7, #4]
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	3b04      	subs	r3, #4
 800f74e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	f06f 0202 	mvn.w	r2, #2
 800f756:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	3b20      	subs	r3, #32
 800f75c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f75e:	68fb      	ldr	r3, [r7, #12]
}
 800f760:	4618      	mov	r0, r3
 800f762:	3714      	adds	r7, #20
 800f764:	46bd      	mov	sp, r7
 800f766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76a:	4770      	bx	lr
 800f76c:	0800f771 	.word	0x0800f771

0800f770 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f770:	b480      	push	{r7}
 800f772:	b085      	sub	sp, #20
 800f774:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f776:	2300      	movs	r3, #0
 800f778:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f77a:	4b11      	ldr	r3, [pc, #68]	; (800f7c0 <prvTaskExitError+0x50>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f782:	d009      	beq.n	800f798 <prvTaskExitError+0x28>
 800f784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f788:	f383 8811 	msr	BASEPRI, r3
 800f78c:	f3bf 8f6f 	isb	sy
 800f790:	f3bf 8f4f 	dsb	sy
 800f794:	60fb      	str	r3, [r7, #12]
 800f796:	e7fe      	b.n	800f796 <prvTaskExitError+0x26>
 800f798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f79c:	f383 8811 	msr	BASEPRI, r3
 800f7a0:	f3bf 8f6f 	isb	sy
 800f7a4:	f3bf 8f4f 	dsb	sy
 800f7a8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f7aa:	bf00      	nop
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d0fc      	beq.n	800f7ac <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f7b2:	bf00      	nop
 800f7b4:	3714      	adds	r7, #20
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7bc:	4770      	bx	lr
 800f7be:	bf00      	nop
 800f7c0:	2000011c 	.word	0x2000011c
	...

0800f7d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f7d0:	4b07      	ldr	r3, [pc, #28]	; (800f7f0 <pxCurrentTCBConst2>)
 800f7d2:	6819      	ldr	r1, [r3, #0]
 800f7d4:	6808      	ldr	r0, [r1, #0]
 800f7d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7da:	f380 8809 	msr	PSP, r0
 800f7de:	f3bf 8f6f 	isb	sy
 800f7e2:	f04f 0000 	mov.w	r0, #0
 800f7e6:	f380 8811 	msr	BASEPRI, r0
 800f7ea:	4770      	bx	lr
 800f7ec:	f3af 8000 	nop.w

0800f7f0 <pxCurrentTCBConst2>:
 800f7f0:	20000cd4 	.word	0x20000cd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f7f4:	bf00      	nop
 800f7f6:	bf00      	nop

0800f7f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f7f8:	4808      	ldr	r0, [pc, #32]	; (800f81c <prvPortStartFirstTask+0x24>)
 800f7fa:	6800      	ldr	r0, [r0, #0]
 800f7fc:	6800      	ldr	r0, [r0, #0]
 800f7fe:	f380 8808 	msr	MSP, r0
 800f802:	f04f 0000 	mov.w	r0, #0
 800f806:	f380 8814 	msr	CONTROL, r0
 800f80a:	b662      	cpsie	i
 800f80c:	b661      	cpsie	f
 800f80e:	f3bf 8f4f 	dsb	sy
 800f812:	f3bf 8f6f 	isb	sy
 800f816:	df00      	svc	0
 800f818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f81a:	bf00      	nop
 800f81c:	e000ed08 	.word	0xe000ed08

0800f820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b086      	sub	sp, #24
 800f824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f826:	4b44      	ldr	r3, [pc, #272]	; (800f938 <xPortStartScheduler+0x118>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	4a44      	ldr	r2, [pc, #272]	; (800f93c <xPortStartScheduler+0x11c>)
 800f82c:	4293      	cmp	r3, r2
 800f82e:	d109      	bne.n	800f844 <xPortStartScheduler+0x24>
 800f830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f834:	f383 8811 	msr	BASEPRI, r3
 800f838:	f3bf 8f6f 	isb	sy
 800f83c:	f3bf 8f4f 	dsb	sy
 800f840:	613b      	str	r3, [r7, #16]
 800f842:	e7fe      	b.n	800f842 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f844:	4b3c      	ldr	r3, [pc, #240]	; (800f938 <xPortStartScheduler+0x118>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	4a3d      	ldr	r2, [pc, #244]	; (800f940 <xPortStartScheduler+0x120>)
 800f84a:	4293      	cmp	r3, r2
 800f84c:	d109      	bne.n	800f862 <xPortStartScheduler+0x42>
 800f84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f852:	f383 8811 	msr	BASEPRI, r3
 800f856:	f3bf 8f6f 	isb	sy
 800f85a:	f3bf 8f4f 	dsb	sy
 800f85e:	60fb      	str	r3, [r7, #12]
 800f860:	e7fe      	b.n	800f860 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f862:	4b38      	ldr	r3, [pc, #224]	; (800f944 <xPortStartScheduler+0x124>)
 800f864:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f866:	697b      	ldr	r3, [r7, #20]
 800f868:	781b      	ldrb	r3, [r3, #0]
 800f86a:	b2db      	uxtb	r3, r3
 800f86c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	22ff      	movs	r2, #255	; 0xff
 800f872:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	781b      	ldrb	r3, [r3, #0]
 800f878:	b2db      	uxtb	r3, r3
 800f87a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f87c:	78fb      	ldrb	r3, [r7, #3]
 800f87e:	b2db      	uxtb	r3, r3
 800f880:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f884:	b2da      	uxtb	r2, r3
 800f886:	4b30      	ldr	r3, [pc, #192]	; (800f948 <xPortStartScheduler+0x128>)
 800f888:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f88a:	4b30      	ldr	r3, [pc, #192]	; (800f94c <xPortStartScheduler+0x12c>)
 800f88c:	2207      	movs	r2, #7
 800f88e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f890:	e009      	b.n	800f8a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800f892:	4b2e      	ldr	r3, [pc, #184]	; (800f94c <xPortStartScheduler+0x12c>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	3b01      	subs	r3, #1
 800f898:	4a2c      	ldr	r2, [pc, #176]	; (800f94c <xPortStartScheduler+0x12c>)
 800f89a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f89c:	78fb      	ldrb	r3, [r7, #3]
 800f89e:	b2db      	uxtb	r3, r3
 800f8a0:	005b      	lsls	r3, r3, #1
 800f8a2:	b2db      	uxtb	r3, r3
 800f8a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f8a6:	78fb      	ldrb	r3, [r7, #3]
 800f8a8:	b2db      	uxtb	r3, r3
 800f8aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8ae:	2b80      	cmp	r3, #128	; 0x80
 800f8b0:	d0ef      	beq.n	800f892 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f8b2:	4b26      	ldr	r3, [pc, #152]	; (800f94c <xPortStartScheduler+0x12c>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	f1c3 0307 	rsb	r3, r3, #7
 800f8ba:	2b04      	cmp	r3, #4
 800f8bc:	d009      	beq.n	800f8d2 <xPortStartScheduler+0xb2>
 800f8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8c2:	f383 8811 	msr	BASEPRI, r3
 800f8c6:	f3bf 8f6f 	isb	sy
 800f8ca:	f3bf 8f4f 	dsb	sy
 800f8ce:	60bb      	str	r3, [r7, #8]
 800f8d0:	e7fe      	b.n	800f8d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f8d2:	4b1e      	ldr	r3, [pc, #120]	; (800f94c <xPortStartScheduler+0x12c>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	021b      	lsls	r3, r3, #8
 800f8d8:	4a1c      	ldr	r2, [pc, #112]	; (800f94c <xPortStartScheduler+0x12c>)
 800f8da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f8dc:	4b1b      	ldr	r3, [pc, #108]	; (800f94c <xPortStartScheduler+0x12c>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f8e4:	4a19      	ldr	r2, [pc, #100]	; (800f94c <xPortStartScheduler+0x12c>)
 800f8e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	b2da      	uxtb	r2, r3
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f8f0:	4b17      	ldr	r3, [pc, #92]	; (800f950 <xPortStartScheduler+0x130>)
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	4a16      	ldr	r2, [pc, #88]	; (800f950 <xPortStartScheduler+0x130>)
 800f8f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f8fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f8fc:	4b14      	ldr	r3, [pc, #80]	; (800f950 <xPortStartScheduler+0x130>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	4a13      	ldr	r2, [pc, #76]	; (800f950 <xPortStartScheduler+0x130>)
 800f902:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f906:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f908:	f000 f8d6 	bl	800fab8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f90c:	4b11      	ldr	r3, [pc, #68]	; (800f954 <xPortStartScheduler+0x134>)
 800f90e:	2200      	movs	r2, #0
 800f910:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f912:	f000 f8f5 	bl	800fb00 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f916:	4b10      	ldr	r3, [pc, #64]	; (800f958 <xPortStartScheduler+0x138>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	4a0f      	ldr	r2, [pc, #60]	; (800f958 <xPortStartScheduler+0x138>)
 800f91c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f920:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f922:	f7ff ff69 	bl	800f7f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f926:	f7fe ff1d 	bl	800e764 <vTaskSwitchContext>
	prvTaskExitError();
 800f92a:	f7ff ff21 	bl	800f770 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f92e:	2300      	movs	r3, #0
}
 800f930:	4618      	mov	r0, r3
 800f932:	3718      	adds	r7, #24
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}
 800f938:	e000ed00 	.word	0xe000ed00
 800f93c:	410fc271 	.word	0x410fc271
 800f940:	410fc270 	.word	0x410fc270
 800f944:	e000e400 	.word	0xe000e400
 800f948:	20001308 	.word	0x20001308
 800f94c:	2000130c 	.word	0x2000130c
 800f950:	e000ed20 	.word	0xe000ed20
 800f954:	2000011c 	.word	0x2000011c
 800f958:	e000ef34 	.word	0xe000ef34

0800f95c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f95c:	b480      	push	{r7}
 800f95e:	b083      	sub	sp, #12
 800f960:	af00      	add	r7, sp, #0
 800f962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f966:	f383 8811 	msr	BASEPRI, r3
 800f96a:	f3bf 8f6f 	isb	sy
 800f96e:	f3bf 8f4f 	dsb	sy
 800f972:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f974:	4b0e      	ldr	r3, [pc, #56]	; (800f9b0 <vPortEnterCritical+0x54>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	3301      	adds	r3, #1
 800f97a:	4a0d      	ldr	r2, [pc, #52]	; (800f9b0 <vPortEnterCritical+0x54>)
 800f97c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f97e:	4b0c      	ldr	r3, [pc, #48]	; (800f9b0 <vPortEnterCritical+0x54>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	2b01      	cmp	r3, #1
 800f984:	d10e      	bne.n	800f9a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f986:	4b0b      	ldr	r3, [pc, #44]	; (800f9b4 <vPortEnterCritical+0x58>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	b2db      	uxtb	r3, r3
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d009      	beq.n	800f9a4 <vPortEnterCritical+0x48>
 800f990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f994:	f383 8811 	msr	BASEPRI, r3
 800f998:	f3bf 8f6f 	isb	sy
 800f99c:	f3bf 8f4f 	dsb	sy
 800f9a0:	603b      	str	r3, [r7, #0]
 800f9a2:	e7fe      	b.n	800f9a2 <vPortEnterCritical+0x46>
	}
}
 800f9a4:	bf00      	nop
 800f9a6:	370c      	adds	r7, #12
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ae:	4770      	bx	lr
 800f9b0:	2000011c 	.word	0x2000011c
 800f9b4:	e000ed04 	.word	0xe000ed04

0800f9b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f9b8:	b480      	push	{r7}
 800f9ba:	b083      	sub	sp, #12
 800f9bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f9be:	4b11      	ldr	r3, [pc, #68]	; (800fa04 <vPortExitCritical+0x4c>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d109      	bne.n	800f9da <vPortExitCritical+0x22>
 800f9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ca:	f383 8811 	msr	BASEPRI, r3
 800f9ce:	f3bf 8f6f 	isb	sy
 800f9d2:	f3bf 8f4f 	dsb	sy
 800f9d6:	607b      	str	r3, [r7, #4]
 800f9d8:	e7fe      	b.n	800f9d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800f9da:	4b0a      	ldr	r3, [pc, #40]	; (800fa04 <vPortExitCritical+0x4c>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	3b01      	subs	r3, #1
 800f9e0:	4a08      	ldr	r2, [pc, #32]	; (800fa04 <vPortExitCritical+0x4c>)
 800f9e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f9e4:	4b07      	ldr	r3, [pc, #28]	; (800fa04 <vPortExitCritical+0x4c>)
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d104      	bne.n	800f9f6 <vPortExitCritical+0x3e>
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800f9f6:	bf00      	nop
 800f9f8:	370c      	adds	r7, #12
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa00:	4770      	bx	lr
 800fa02:	bf00      	nop
 800fa04:	2000011c 	.word	0x2000011c
	...

0800fa10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fa10:	f3ef 8009 	mrs	r0, PSP
 800fa14:	f3bf 8f6f 	isb	sy
 800fa18:	4b15      	ldr	r3, [pc, #84]	; (800fa70 <pxCurrentTCBConst>)
 800fa1a:	681a      	ldr	r2, [r3, #0]
 800fa1c:	f01e 0f10 	tst.w	lr, #16
 800fa20:	bf08      	it	eq
 800fa22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fa26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa2a:	6010      	str	r0, [r2, #0]
 800fa2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fa30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fa34:	f380 8811 	msr	BASEPRI, r0
 800fa38:	f3bf 8f4f 	dsb	sy
 800fa3c:	f3bf 8f6f 	isb	sy
 800fa40:	f7fe fe90 	bl	800e764 <vTaskSwitchContext>
 800fa44:	f04f 0000 	mov.w	r0, #0
 800fa48:	f380 8811 	msr	BASEPRI, r0
 800fa4c:	bc09      	pop	{r0, r3}
 800fa4e:	6819      	ldr	r1, [r3, #0]
 800fa50:	6808      	ldr	r0, [r1, #0]
 800fa52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa56:	f01e 0f10 	tst.w	lr, #16
 800fa5a:	bf08      	it	eq
 800fa5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fa60:	f380 8809 	msr	PSP, r0
 800fa64:	f3bf 8f6f 	isb	sy
 800fa68:	4770      	bx	lr
 800fa6a:	bf00      	nop
 800fa6c:	f3af 8000 	nop.w

0800fa70 <pxCurrentTCBConst>:
 800fa70:	20000cd4 	.word	0x20000cd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fa74:	bf00      	nop
 800fa76:	bf00      	nop

0800fa78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b082      	sub	sp, #8
 800fa7c:	af00      	add	r7, sp, #0
	__asm volatile
 800fa7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa82:	f383 8811 	msr	BASEPRI, r3
 800fa86:	f3bf 8f6f 	isb	sy
 800fa8a:	f3bf 8f4f 	dsb	sy
 800fa8e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fa90:	f7fe fdb0 	bl	800e5f4 <xTaskIncrementTick>
 800fa94:	4603      	mov	r3, r0
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d003      	beq.n	800faa2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fa9a:	4b06      	ldr	r3, [pc, #24]	; (800fab4 <SysTick_Handler+0x3c>)
 800fa9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800faa0:	601a      	str	r2, [r3, #0]
 800faa2:	2300      	movs	r3, #0
 800faa4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800faac:	bf00      	nop
 800faae:	3708      	adds	r7, #8
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}
 800fab4:	e000ed04 	.word	0xe000ed04

0800fab8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fab8:	b480      	push	{r7}
 800faba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fabc:	4b0b      	ldr	r3, [pc, #44]	; (800faec <vPortSetupTimerInterrupt+0x34>)
 800fabe:	2200      	movs	r2, #0
 800fac0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fac2:	4b0b      	ldr	r3, [pc, #44]	; (800faf0 <vPortSetupTimerInterrupt+0x38>)
 800fac4:	2200      	movs	r2, #0
 800fac6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fac8:	4b0a      	ldr	r3, [pc, #40]	; (800faf4 <vPortSetupTimerInterrupt+0x3c>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	4a0a      	ldr	r2, [pc, #40]	; (800faf8 <vPortSetupTimerInterrupt+0x40>)
 800face:	fba2 2303 	umull	r2, r3, r2, r3
 800fad2:	099b      	lsrs	r3, r3, #6
 800fad4:	4a09      	ldr	r2, [pc, #36]	; (800fafc <vPortSetupTimerInterrupt+0x44>)
 800fad6:	3b01      	subs	r3, #1
 800fad8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fada:	4b04      	ldr	r3, [pc, #16]	; (800faec <vPortSetupTimerInterrupt+0x34>)
 800fadc:	2207      	movs	r2, #7
 800fade:	601a      	str	r2, [r3, #0]
}
 800fae0:	bf00      	nop
 800fae2:	46bd      	mov	sp, r7
 800fae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae8:	4770      	bx	lr
 800faea:	bf00      	nop
 800faec:	e000e010 	.word	0xe000e010
 800faf0:	e000e018 	.word	0xe000e018
 800faf4:	20000000 	.word	0x20000000
 800faf8:	10624dd3 	.word	0x10624dd3
 800fafc:	e000e014 	.word	0xe000e014

0800fb00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fb00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fb10 <vPortEnableVFP+0x10>
 800fb04:	6801      	ldr	r1, [r0, #0]
 800fb06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fb0a:	6001      	str	r1, [r0, #0]
 800fb0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fb0e:	bf00      	nop
 800fb10:	e000ed88 	.word	0xe000ed88

0800fb14 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fb14:	b480      	push	{r7}
 800fb16:	b085      	sub	sp, #20
 800fb18:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fb1a:	f3ef 8305 	mrs	r3, IPSR
 800fb1e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	2b0f      	cmp	r3, #15
 800fb24:	d913      	bls.n	800fb4e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fb26:	4a16      	ldr	r2, [pc, #88]	; (800fb80 <vPortValidateInterruptPriority+0x6c>)
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	4413      	add	r3, r2
 800fb2c:	781b      	ldrb	r3, [r3, #0]
 800fb2e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fb30:	4b14      	ldr	r3, [pc, #80]	; (800fb84 <vPortValidateInterruptPriority+0x70>)
 800fb32:	781b      	ldrb	r3, [r3, #0]
 800fb34:	7afa      	ldrb	r2, [r7, #11]
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d209      	bcs.n	800fb4e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800fb3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb3e:	f383 8811 	msr	BASEPRI, r3
 800fb42:	f3bf 8f6f 	isb	sy
 800fb46:	f3bf 8f4f 	dsb	sy
 800fb4a:	607b      	str	r3, [r7, #4]
 800fb4c:	e7fe      	b.n	800fb4c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fb4e:	4b0e      	ldr	r3, [pc, #56]	; (800fb88 <vPortValidateInterruptPriority+0x74>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fb56:	4b0d      	ldr	r3, [pc, #52]	; (800fb8c <vPortValidateInterruptPriority+0x78>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d909      	bls.n	800fb72 <vPortValidateInterruptPriority+0x5e>
 800fb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb62:	f383 8811 	msr	BASEPRI, r3
 800fb66:	f3bf 8f6f 	isb	sy
 800fb6a:	f3bf 8f4f 	dsb	sy
 800fb6e:	603b      	str	r3, [r7, #0]
 800fb70:	e7fe      	b.n	800fb70 <vPortValidateInterruptPriority+0x5c>
	}
 800fb72:	bf00      	nop
 800fb74:	3714      	adds	r7, #20
 800fb76:	46bd      	mov	sp, r7
 800fb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7c:	4770      	bx	lr
 800fb7e:	bf00      	nop
 800fb80:	e000e3f0 	.word	0xe000e3f0
 800fb84:	20001308 	.word	0x20001308
 800fb88:	e000ed0c 	.word	0xe000ed0c
 800fb8c:	2000130c 	.word	0x2000130c

0800fb90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b08a      	sub	sp, #40	; 0x28
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fb98:	2300      	movs	r3, #0
 800fb9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fb9c:	f7fe fc70 	bl	800e480 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fba0:	4b57      	ldr	r3, [pc, #348]	; (800fd00 <pvPortMalloc+0x170>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d101      	bne.n	800fbac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fba8:	f000 f90c 	bl	800fdc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fbac:	4b55      	ldr	r3, [pc, #340]	; (800fd04 <pvPortMalloc+0x174>)
 800fbae:	681a      	ldr	r2, [r3, #0]
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	4013      	ands	r3, r2
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	f040 808c 	bne.w	800fcd2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d01c      	beq.n	800fbfa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800fbc0:	2208      	movs	r2, #8
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	4413      	add	r3, r2
 800fbc6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	f003 0307 	and.w	r3, r3, #7
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d013      	beq.n	800fbfa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	f023 0307 	bic.w	r3, r3, #7
 800fbd8:	3308      	adds	r3, #8
 800fbda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f003 0307 	and.w	r3, r3, #7
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d009      	beq.n	800fbfa <pvPortMalloc+0x6a>
 800fbe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbea:	f383 8811 	msr	BASEPRI, r3
 800fbee:	f3bf 8f6f 	isb	sy
 800fbf2:	f3bf 8f4f 	dsb	sy
 800fbf6:	617b      	str	r3, [r7, #20]
 800fbf8:	e7fe      	b.n	800fbf8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d068      	beq.n	800fcd2 <pvPortMalloc+0x142>
 800fc00:	4b41      	ldr	r3, [pc, #260]	; (800fd08 <pvPortMalloc+0x178>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	687a      	ldr	r2, [r7, #4]
 800fc06:	429a      	cmp	r2, r3
 800fc08:	d863      	bhi.n	800fcd2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fc0a:	4b40      	ldr	r3, [pc, #256]	; (800fd0c <pvPortMalloc+0x17c>)
 800fc0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fc0e:	4b3f      	ldr	r3, [pc, #252]	; (800fd0c <pvPortMalloc+0x17c>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fc14:	e004      	b.n	800fc20 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800fc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc22:	685b      	ldr	r3, [r3, #4]
 800fc24:	687a      	ldr	r2, [r7, #4]
 800fc26:	429a      	cmp	r2, r3
 800fc28:	d903      	bls.n	800fc32 <pvPortMalloc+0xa2>
 800fc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d1f1      	bne.n	800fc16 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fc32:	4b33      	ldr	r3, [pc, #204]	; (800fd00 <pvPortMalloc+0x170>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc38:	429a      	cmp	r2, r3
 800fc3a:	d04a      	beq.n	800fcd2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fc3c:	6a3b      	ldr	r3, [r7, #32]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	2208      	movs	r2, #8
 800fc42:	4413      	add	r3, r2
 800fc44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc48:	681a      	ldr	r2, [r3, #0]
 800fc4a:	6a3b      	ldr	r3, [r7, #32]
 800fc4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc50:	685a      	ldr	r2, [r3, #4]
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	1ad2      	subs	r2, r2, r3
 800fc56:	2308      	movs	r3, #8
 800fc58:	005b      	lsls	r3, r3, #1
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	d91e      	bls.n	800fc9c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fc5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	4413      	add	r3, r2
 800fc64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc66:	69bb      	ldr	r3, [r7, #24]
 800fc68:	f003 0307 	and.w	r3, r3, #7
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d009      	beq.n	800fc84 <pvPortMalloc+0xf4>
 800fc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc74:	f383 8811 	msr	BASEPRI, r3
 800fc78:	f3bf 8f6f 	isb	sy
 800fc7c:	f3bf 8f4f 	dsb	sy
 800fc80:	613b      	str	r3, [r7, #16]
 800fc82:	e7fe      	b.n	800fc82 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc86:	685a      	ldr	r2, [r3, #4]
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	1ad2      	subs	r2, r2, r3
 800fc8c:	69bb      	ldr	r3, [r7, #24]
 800fc8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc92:	687a      	ldr	r2, [r7, #4]
 800fc94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fc96:	69b8      	ldr	r0, [r7, #24]
 800fc98:	f000 f8f6 	bl	800fe88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fc9c:	4b1a      	ldr	r3, [pc, #104]	; (800fd08 <pvPortMalloc+0x178>)
 800fc9e:	681a      	ldr	r2, [r3, #0]
 800fca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca2:	685b      	ldr	r3, [r3, #4]
 800fca4:	1ad3      	subs	r3, r2, r3
 800fca6:	4a18      	ldr	r2, [pc, #96]	; (800fd08 <pvPortMalloc+0x178>)
 800fca8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fcaa:	4b17      	ldr	r3, [pc, #92]	; (800fd08 <pvPortMalloc+0x178>)
 800fcac:	681a      	ldr	r2, [r3, #0]
 800fcae:	4b18      	ldr	r3, [pc, #96]	; (800fd10 <pvPortMalloc+0x180>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	d203      	bcs.n	800fcbe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fcb6:	4b14      	ldr	r3, [pc, #80]	; (800fd08 <pvPortMalloc+0x178>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	4a15      	ldr	r2, [pc, #84]	; (800fd10 <pvPortMalloc+0x180>)
 800fcbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcc0:	685a      	ldr	r2, [r3, #4]
 800fcc2:	4b10      	ldr	r3, [pc, #64]	; (800fd04 <pvPortMalloc+0x174>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	431a      	orrs	r2, r3
 800fcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcce:	2200      	movs	r2, #0
 800fcd0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fcd2:	f7fe fbe3 	bl	800e49c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fcd6:	69fb      	ldr	r3, [r7, #28]
 800fcd8:	f003 0307 	and.w	r3, r3, #7
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d009      	beq.n	800fcf4 <pvPortMalloc+0x164>
 800fce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fce4:	f383 8811 	msr	BASEPRI, r3
 800fce8:	f3bf 8f6f 	isb	sy
 800fcec:	f3bf 8f4f 	dsb	sy
 800fcf0:	60fb      	str	r3, [r7, #12]
 800fcf2:	e7fe      	b.n	800fcf2 <pvPortMalloc+0x162>
	return pvReturn;
 800fcf4:	69fb      	ldr	r3, [r7, #28]
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	3728      	adds	r7, #40	; 0x28
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}
 800fcfe:	bf00      	nop
 800fd00:	20004f18 	.word	0x20004f18
 800fd04:	20004f24 	.word	0x20004f24
 800fd08:	20004f1c 	.word	0x20004f1c
 800fd0c:	20004f10 	.word	0x20004f10
 800fd10:	20004f20 	.word	0x20004f20

0800fd14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b086      	sub	sp, #24
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d046      	beq.n	800fdb4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fd26:	2308      	movs	r3, #8
 800fd28:	425b      	negs	r3, r3
 800fd2a:	697a      	ldr	r2, [r7, #20]
 800fd2c:	4413      	add	r3, r2
 800fd2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fd30:	697b      	ldr	r3, [r7, #20]
 800fd32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fd34:	693b      	ldr	r3, [r7, #16]
 800fd36:	685a      	ldr	r2, [r3, #4]
 800fd38:	4b20      	ldr	r3, [pc, #128]	; (800fdbc <vPortFree+0xa8>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	4013      	ands	r3, r2
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d109      	bne.n	800fd56 <vPortFree+0x42>
 800fd42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd46:	f383 8811 	msr	BASEPRI, r3
 800fd4a:	f3bf 8f6f 	isb	sy
 800fd4e:	f3bf 8f4f 	dsb	sy
 800fd52:	60fb      	str	r3, [r7, #12]
 800fd54:	e7fe      	b.n	800fd54 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fd56:	693b      	ldr	r3, [r7, #16]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d009      	beq.n	800fd72 <vPortFree+0x5e>
 800fd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd62:	f383 8811 	msr	BASEPRI, r3
 800fd66:	f3bf 8f6f 	isb	sy
 800fd6a:	f3bf 8f4f 	dsb	sy
 800fd6e:	60bb      	str	r3, [r7, #8]
 800fd70:	e7fe      	b.n	800fd70 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fd72:	693b      	ldr	r3, [r7, #16]
 800fd74:	685a      	ldr	r2, [r3, #4]
 800fd76:	4b11      	ldr	r3, [pc, #68]	; (800fdbc <vPortFree+0xa8>)
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	4013      	ands	r3, r2
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d019      	beq.n	800fdb4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fd80:	693b      	ldr	r3, [r7, #16]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d115      	bne.n	800fdb4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fd88:	693b      	ldr	r3, [r7, #16]
 800fd8a:	685a      	ldr	r2, [r3, #4]
 800fd8c:	4b0b      	ldr	r3, [pc, #44]	; (800fdbc <vPortFree+0xa8>)
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	43db      	mvns	r3, r3
 800fd92:	401a      	ands	r2, r3
 800fd94:	693b      	ldr	r3, [r7, #16]
 800fd96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fd98:	f7fe fb72 	bl	800e480 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fd9c:	693b      	ldr	r3, [r7, #16]
 800fd9e:	685a      	ldr	r2, [r3, #4]
 800fda0:	4b07      	ldr	r3, [pc, #28]	; (800fdc0 <vPortFree+0xac>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	4413      	add	r3, r2
 800fda6:	4a06      	ldr	r2, [pc, #24]	; (800fdc0 <vPortFree+0xac>)
 800fda8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fdaa:	6938      	ldr	r0, [r7, #16]
 800fdac:	f000 f86c 	bl	800fe88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800fdb0:	f7fe fb74 	bl	800e49c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fdb4:	bf00      	nop
 800fdb6:	3718      	adds	r7, #24
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}
 800fdbc:	20004f24 	.word	0x20004f24
 800fdc0:	20004f1c 	.word	0x20004f1c

0800fdc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	b085      	sub	sp, #20
 800fdc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fdca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fdce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fdd0:	4b27      	ldr	r3, [pc, #156]	; (800fe70 <prvHeapInit+0xac>)
 800fdd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	f003 0307 	and.w	r3, r3, #7
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d00c      	beq.n	800fdf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	3307      	adds	r3, #7
 800fde2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	f023 0307 	bic.w	r3, r3, #7
 800fdea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fdec:	68ba      	ldr	r2, [r7, #8]
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	1ad3      	subs	r3, r2, r3
 800fdf2:	4a1f      	ldr	r2, [pc, #124]	; (800fe70 <prvHeapInit+0xac>)
 800fdf4:	4413      	add	r3, r2
 800fdf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fdfc:	4a1d      	ldr	r2, [pc, #116]	; (800fe74 <prvHeapInit+0xb0>)
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fe02:	4b1c      	ldr	r3, [pc, #112]	; (800fe74 <prvHeapInit+0xb0>)
 800fe04:	2200      	movs	r2, #0
 800fe06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	68ba      	ldr	r2, [r7, #8]
 800fe0c:	4413      	add	r3, r2
 800fe0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fe10:	2208      	movs	r2, #8
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	1a9b      	subs	r3, r3, r2
 800fe16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	f023 0307 	bic.w	r3, r3, #7
 800fe1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	4a15      	ldr	r2, [pc, #84]	; (800fe78 <prvHeapInit+0xb4>)
 800fe24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fe26:	4b14      	ldr	r3, [pc, #80]	; (800fe78 <prvHeapInit+0xb4>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fe2e:	4b12      	ldr	r3, [pc, #72]	; (800fe78 <prvHeapInit+0xb4>)
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	2200      	movs	r2, #0
 800fe34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	68fa      	ldr	r2, [r7, #12]
 800fe3e:	1ad2      	subs	r2, r2, r3
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fe44:	4b0c      	ldr	r3, [pc, #48]	; (800fe78 <prvHeapInit+0xb4>)
 800fe46:	681a      	ldr	r2, [r3, #0]
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	685b      	ldr	r3, [r3, #4]
 800fe50:	4a0a      	ldr	r2, [pc, #40]	; (800fe7c <prvHeapInit+0xb8>)
 800fe52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	685b      	ldr	r3, [r3, #4]
 800fe58:	4a09      	ldr	r2, [pc, #36]	; (800fe80 <prvHeapInit+0xbc>)
 800fe5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fe5c:	4b09      	ldr	r3, [pc, #36]	; (800fe84 <prvHeapInit+0xc0>)
 800fe5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fe62:	601a      	str	r2, [r3, #0]
}
 800fe64:	bf00      	nop
 800fe66:	3714      	adds	r7, #20
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6e:	4770      	bx	lr
 800fe70:	20001310 	.word	0x20001310
 800fe74:	20004f10 	.word	0x20004f10
 800fe78:	20004f18 	.word	0x20004f18
 800fe7c:	20004f20 	.word	0x20004f20
 800fe80:	20004f1c 	.word	0x20004f1c
 800fe84:	20004f24 	.word	0x20004f24

0800fe88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fe88:	b480      	push	{r7}
 800fe8a:	b085      	sub	sp, #20
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fe90:	4b28      	ldr	r3, [pc, #160]	; (800ff34 <prvInsertBlockIntoFreeList+0xac>)
 800fe92:	60fb      	str	r3, [r7, #12]
 800fe94:	e002      	b.n	800fe9c <prvInsertBlockIntoFreeList+0x14>
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	60fb      	str	r3, [r7, #12]
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	687a      	ldr	r2, [r7, #4]
 800fea2:	429a      	cmp	r2, r3
 800fea4:	d8f7      	bhi.n	800fe96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	685b      	ldr	r3, [r3, #4]
 800feae:	68ba      	ldr	r2, [r7, #8]
 800feb0:	4413      	add	r3, r2
 800feb2:	687a      	ldr	r2, [r7, #4]
 800feb4:	429a      	cmp	r2, r3
 800feb6:	d108      	bne.n	800feca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	685a      	ldr	r2, [r3, #4]
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	685b      	ldr	r3, [r3, #4]
 800fec0:	441a      	add	r2, r3
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	685b      	ldr	r3, [r3, #4]
 800fed2:	68ba      	ldr	r2, [r7, #8]
 800fed4:	441a      	add	r2, r3
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	429a      	cmp	r2, r3
 800fedc:	d118      	bne.n	800ff10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	681a      	ldr	r2, [r3, #0]
 800fee2:	4b15      	ldr	r3, [pc, #84]	; (800ff38 <prvInsertBlockIntoFreeList+0xb0>)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d00d      	beq.n	800ff06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	685a      	ldr	r2, [r3, #4]
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	685b      	ldr	r3, [r3, #4]
 800fef4:	441a      	add	r2, r3
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	681a      	ldr	r2, [r3, #0]
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	601a      	str	r2, [r3, #0]
 800ff04:	e008      	b.n	800ff18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ff06:	4b0c      	ldr	r3, [pc, #48]	; (800ff38 <prvInsertBlockIntoFreeList+0xb0>)
 800ff08:	681a      	ldr	r2, [r3, #0]
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	601a      	str	r2, [r3, #0]
 800ff0e:	e003      	b.n	800ff18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	681a      	ldr	r2, [r3, #0]
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ff18:	68fa      	ldr	r2, [r7, #12]
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	d002      	beq.n	800ff26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	687a      	ldr	r2, [r7, #4]
 800ff24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ff26:	bf00      	nop
 800ff28:	3714      	adds	r7, #20
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff30:	4770      	bx	lr
 800ff32:	bf00      	nop
 800ff34:	20004f10 	.word	0x20004f10
 800ff38:	20004f18 	.word	0x20004f18

0800ff3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ff40:	2200      	movs	r2, #0
 800ff42:	4912      	ldr	r1, [pc, #72]	; (800ff8c <MX_USB_DEVICE_Init+0x50>)
 800ff44:	4812      	ldr	r0, [pc, #72]	; (800ff90 <MX_USB_DEVICE_Init+0x54>)
 800ff46:	f7fb fd49 	bl	800b9dc <USBD_Init>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d001      	beq.n	800ff54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ff50:	f7f1 fa2e 	bl	80013b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ff54:	490f      	ldr	r1, [pc, #60]	; (800ff94 <MX_USB_DEVICE_Init+0x58>)
 800ff56:	480e      	ldr	r0, [pc, #56]	; (800ff90 <MX_USB_DEVICE_Init+0x54>)
 800ff58:	f7fb fd76 	bl	800ba48 <USBD_RegisterClass>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d001      	beq.n	800ff66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ff62:	f7f1 fa25 	bl	80013b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ff66:	490c      	ldr	r1, [pc, #48]	; (800ff98 <MX_USB_DEVICE_Init+0x5c>)
 800ff68:	4809      	ldr	r0, [pc, #36]	; (800ff90 <MX_USB_DEVICE_Init+0x54>)
 800ff6a:	f7fb fc9b 	bl	800b8a4 <USBD_CDC_RegisterInterface>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d001      	beq.n	800ff78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ff74:	f7f1 fa1c 	bl	80013b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ff78:	4805      	ldr	r0, [pc, #20]	; (800ff90 <MX_USB_DEVICE_Init+0x54>)
 800ff7a:	f7fb fd86 	bl	800ba8a <USBD_Start>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d001      	beq.n	800ff88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ff84:	f7f1 fa14 	bl	80013b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ff88:	bf00      	nop
 800ff8a:	bd80      	pop	{r7, pc}
 800ff8c:	20000134 	.word	0x20000134
 800ff90:	20006fcc 	.word	0x20006fcc
 800ff94:	20000018 	.word	0x20000018
 800ff98:	20000120 	.word	0x20000120

0800ff9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	4905      	ldr	r1, [pc, #20]	; (800ffb8 <CDC_Init_FS+0x1c>)
 800ffa4:	4805      	ldr	r0, [pc, #20]	; (800ffbc <CDC_Init_FS+0x20>)
 800ffa6:	f7fb fc92 	bl	800b8ce <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ffaa:	4905      	ldr	r1, [pc, #20]	; (800ffc0 <CDC_Init_FS+0x24>)
 800ffac:	4803      	ldr	r0, [pc, #12]	; (800ffbc <CDC_Init_FS+0x20>)
 800ffae:	f7fb fca7 	bl	800b900 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ffb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	bd80      	pop	{r7, pc}
 800ffb8:	20007a9c 	.word	0x20007a9c
 800ffbc:	20006fcc 	.word	0x20006fcc
 800ffc0:	2000729c 	.word	0x2000729c

0800ffc4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ffc4:	b480      	push	{r7}
 800ffc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ffc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd2:	4770      	bx	lr

0800ffd4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ffd4:	b480      	push	{r7}
 800ffd6:	b083      	sub	sp, #12
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	4603      	mov	r3, r0
 800ffdc:	6039      	str	r1, [r7, #0]
 800ffde:	71fb      	strb	r3, [r7, #7]
 800ffe0:	4613      	mov	r3, r2
 800ffe2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ffe4:	79fb      	ldrb	r3, [r7, #7]
 800ffe6:	2b23      	cmp	r3, #35	; 0x23
 800ffe8:	d84a      	bhi.n	8010080 <CDC_Control_FS+0xac>
 800ffea:	a201      	add	r2, pc, #4	; (adr r2, 800fff0 <CDC_Control_FS+0x1c>)
 800ffec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fff0:	08010081 	.word	0x08010081
 800fff4:	08010081 	.word	0x08010081
 800fff8:	08010081 	.word	0x08010081
 800fffc:	08010081 	.word	0x08010081
 8010000:	08010081 	.word	0x08010081
 8010004:	08010081 	.word	0x08010081
 8010008:	08010081 	.word	0x08010081
 801000c:	08010081 	.word	0x08010081
 8010010:	08010081 	.word	0x08010081
 8010014:	08010081 	.word	0x08010081
 8010018:	08010081 	.word	0x08010081
 801001c:	08010081 	.word	0x08010081
 8010020:	08010081 	.word	0x08010081
 8010024:	08010081 	.word	0x08010081
 8010028:	08010081 	.word	0x08010081
 801002c:	08010081 	.word	0x08010081
 8010030:	08010081 	.word	0x08010081
 8010034:	08010081 	.word	0x08010081
 8010038:	08010081 	.word	0x08010081
 801003c:	08010081 	.word	0x08010081
 8010040:	08010081 	.word	0x08010081
 8010044:	08010081 	.word	0x08010081
 8010048:	08010081 	.word	0x08010081
 801004c:	08010081 	.word	0x08010081
 8010050:	08010081 	.word	0x08010081
 8010054:	08010081 	.word	0x08010081
 8010058:	08010081 	.word	0x08010081
 801005c:	08010081 	.word	0x08010081
 8010060:	08010081 	.word	0x08010081
 8010064:	08010081 	.word	0x08010081
 8010068:	08010081 	.word	0x08010081
 801006c:	08010081 	.word	0x08010081
 8010070:	08010081 	.word	0x08010081
 8010074:	08010081 	.word	0x08010081
 8010078:	08010081 	.word	0x08010081
 801007c:	08010081 	.word	0x08010081
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010080:	bf00      	nop
  }

  return (USBD_OK);
 8010082:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010084:	4618      	mov	r0, r3
 8010086:	370c      	adds	r7, #12
 8010088:	46bd      	mov	sp, r7
 801008a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008e:	4770      	bx	lr

08010090 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b082      	sub	sp, #8
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
 8010098:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	return impl_CDC_Receive_FS(Buf, Len);
 801009a:	6839      	ldr	r1, [r7, #0]
 801009c:	6878      	ldr	r0, [r7, #4]
 801009e:	f008 fa37 	bl	8018510 <impl_CDC_Receive_FS>
 80100a2:	4603      	mov	r3, r0

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80100a4:	4618      	mov	r0, r3
 80100a6:	3708      	adds	r7, #8
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bd80      	pop	{r7, pc}

080100ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b084      	sub	sp, #16
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
 80100b4:	460b      	mov	r3, r1
 80100b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80100b8:	2300      	movs	r3, #0
 80100ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80100bc:	4b0d      	ldr	r3, [pc, #52]	; (80100f4 <CDC_Transmit_FS+0x48>)
 80100be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80100c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80100c4:	68bb      	ldr	r3, [r7, #8]
 80100c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d001      	beq.n	80100d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80100ce:	2301      	movs	r3, #1
 80100d0:	e00b      	b.n	80100ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80100d2:	887b      	ldrh	r3, [r7, #2]
 80100d4:	461a      	mov	r2, r3
 80100d6:	6879      	ldr	r1, [r7, #4]
 80100d8:	4806      	ldr	r0, [pc, #24]	; (80100f4 <CDC_Transmit_FS+0x48>)
 80100da:	f7fb fbf8 	bl	800b8ce <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80100de:	4805      	ldr	r0, [pc, #20]	; (80100f4 <CDC_Transmit_FS+0x48>)
 80100e0:	f7fb fc22 	bl	800b928 <USBD_CDC_TransmitPacket>
 80100e4:	4603      	mov	r3, r0
 80100e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80100e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ea:	4618      	mov	r0, r3
 80100ec:	3710      	adds	r7, #16
 80100ee:	46bd      	mov	sp, r7
 80100f0:	bd80      	pop	{r7, pc}
 80100f2:	bf00      	nop
 80100f4:	20006fcc 	.word	0x20006fcc

080100f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80100f8:	b480      	push	{r7}
 80100fa:	b087      	sub	sp, #28
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	60f8      	str	r0, [r7, #12]
 8010100:	60b9      	str	r1, [r7, #8]
 8010102:	4613      	mov	r3, r2
 8010104:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010106:	2300      	movs	r3, #0
 8010108:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801010a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801010e:	4618      	mov	r0, r3
 8010110:	371c      	adds	r7, #28
 8010112:	46bd      	mov	sp, r7
 8010114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010118:	4770      	bx	lr
	...

0801011c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801011c:	b480      	push	{r7}
 801011e:	b083      	sub	sp, #12
 8010120:	af00      	add	r7, sp, #0
 8010122:	4603      	mov	r3, r0
 8010124:	6039      	str	r1, [r7, #0]
 8010126:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	2212      	movs	r2, #18
 801012c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801012e:	4b03      	ldr	r3, [pc, #12]	; (801013c <USBD_FS_DeviceDescriptor+0x20>)
}
 8010130:	4618      	mov	r0, r3
 8010132:	370c      	adds	r7, #12
 8010134:	46bd      	mov	sp, r7
 8010136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013a:	4770      	bx	lr
 801013c:	20000150 	.word	0x20000150

08010140 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010140:	b480      	push	{r7}
 8010142:	b083      	sub	sp, #12
 8010144:	af00      	add	r7, sp, #0
 8010146:	4603      	mov	r3, r0
 8010148:	6039      	str	r1, [r7, #0]
 801014a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801014c:	683b      	ldr	r3, [r7, #0]
 801014e:	2204      	movs	r2, #4
 8010150:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010152:	4b03      	ldr	r3, [pc, #12]	; (8010160 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010154:	4618      	mov	r0, r3
 8010156:	370c      	adds	r7, #12
 8010158:	46bd      	mov	sp, r7
 801015a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015e:	4770      	bx	lr
 8010160:	20000164 	.word	0x20000164

08010164 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b082      	sub	sp, #8
 8010168:	af00      	add	r7, sp, #0
 801016a:	4603      	mov	r3, r0
 801016c:	6039      	str	r1, [r7, #0]
 801016e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010170:	79fb      	ldrb	r3, [r7, #7]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d105      	bne.n	8010182 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010176:	683a      	ldr	r2, [r7, #0]
 8010178:	4907      	ldr	r1, [pc, #28]	; (8010198 <USBD_FS_ProductStrDescriptor+0x34>)
 801017a:	4808      	ldr	r0, [pc, #32]	; (801019c <USBD_FS_ProductStrDescriptor+0x38>)
 801017c:	f7fc fc53 	bl	800ca26 <USBD_GetString>
 8010180:	e004      	b.n	801018c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010182:	683a      	ldr	r2, [r7, #0]
 8010184:	4904      	ldr	r1, [pc, #16]	; (8010198 <USBD_FS_ProductStrDescriptor+0x34>)
 8010186:	4805      	ldr	r0, [pc, #20]	; (801019c <USBD_FS_ProductStrDescriptor+0x38>)
 8010188:	f7fc fc4d 	bl	800ca26 <USBD_GetString>
  }
  return USBD_StrDesc;
 801018c:	4b02      	ldr	r3, [pc, #8]	; (8010198 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801018e:	4618      	mov	r0, r3
 8010190:	3708      	adds	r7, #8
 8010192:	46bd      	mov	sp, r7
 8010194:	bd80      	pop	{r7, pc}
 8010196:	bf00      	nop
 8010198:	2000829c 	.word	0x2000829c
 801019c:	08018f64 	.word	0x08018f64

080101a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b082      	sub	sp, #8
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	4603      	mov	r3, r0
 80101a8:	6039      	str	r1, [r7, #0]
 80101aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80101ac:	683a      	ldr	r2, [r7, #0]
 80101ae:	4904      	ldr	r1, [pc, #16]	; (80101c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80101b0:	4804      	ldr	r0, [pc, #16]	; (80101c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80101b2:	f7fc fc38 	bl	800ca26 <USBD_GetString>
  return USBD_StrDesc;
 80101b6:	4b02      	ldr	r3, [pc, #8]	; (80101c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80101b8:	4618      	mov	r0, r3
 80101ba:	3708      	adds	r7, #8
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}
 80101c0:	2000829c 	.word	0x2000829c
 80101c4:	08018f7c 	.word	0x08018f7c

080101c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b082      	sub	sp, #8
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	4603      	mov	r3, r0
 80101d0:	6039      	str	r1, [r7, #0]
 80101d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	221a      	movs	r2, #26
 80101d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80101da:	f000 f843 	bl	8010264 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80101de:	4b02      	ldr	r3, [pc, #8]	; (80101e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	3708      	adds	r7, #8
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}
 80101e8:	20000168 	.word	0x20000168

080101ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b082      	sub	sp, #8
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	4603      	mov	r3, r0
 80101f4:	6039      	str	r1, [r7, #0]
 80101f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80101f8:	79fb      	ldrb	r3, [r7, #7]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d105      	bne.n	801020a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80101fe:	683a      	ldr	r2, [r7, #0]
 8010200:	4907      	ldr	r1, [pc, #28]	; (8010220 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010202:	4808      	ldr	r0, [pc, #32]	; (8010224 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010204:	f7fc fc0f 	bl	800ca26 <USBD_GetString>
 8010208:	e004      	b.n	8010214 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801020a:	683a      	ldr	r2, [r7, #0]
 801020c:	4904      	ldr	r1, [pc, #16]	; (8010220 <USBD_FS_ConfigStrDescriptor+0x34>)
 801020e:	4805      	ldr	r0, [pc, #20]	; (8010224 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010210:	f7fc fc09 	bl	800ca26 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010214:	4b02      	ldr	r3, [pc, #8]	; (8010220 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010216:	4618      	mov	r0, r3
 8010218:	3708      	adds	r7, #8
 801021a:	46bd      	mov	sp, r7
 801021c:	bd80      	pop	{r7, pc}
 801021e:	bf00      	nop
 8010220:	2000829c 	.word	0x2000829c
 8010224:	08018f90 	.word	0x08018f90

08010228 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b082      	sub	sp, #8
 801022c:	af00      	add	r7, sp, #0
 801022e:	4603      	mov	r3, r0
 8010230:	6039      	str	r1, [r7, #0]
 8010232:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010234:	79fb      	ldrb	r3, [r7, #7]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d105      	bne.n	8010246 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801023a:	683a      	ldr	r2, [r7, #0]
 801023c:	4907      	ldr	r1, [pc, #28]	; (801025c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801023e:	4808      	ldr	r0, [pc, #32]	; (8010260 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010240:	f7fc fbf1 	bl	800ca26 <USBD_GetString>
 8010244:	e004      	b.n	8010250 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010246:	683a      	ldr	r2, [r7, #0]
 8010248:	4904      	ldr	r1, [pc, #16]	; (801025c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801024a:	4805      	ldr	r0, [pc, #20]	; (8010260 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801024c:	f7fc fbeb 	bl	800ca26 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010250:	4b02      	ldr	r3, [pc, #8]	; (801025c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010252:	4618      	mov	r0, r3
 8010254:	3708      	adds	r7, #8
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}
 801025a:	bf00      	nop
 801025c:	2000829c 	.word	0x2000829c
 8010260:	08018f9c 	.word	0x08018f9c

08010264 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b084      	sub	sp, #16
 8010268:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801026a:	4b0f      	ldr	r3, [pc, #60]	; (80102a8 <Get_SerialNum+0x44>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010270:	4b0e      	ldr	r3, [pc, #56]	; (80102ac <Get_SerialNum+0x48>)
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010276:	4b0e      	ldr	r3, [pc, #56]	; (80102b0 <Get_SerialNum+0x4c>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801027c:	68fa      	ldr	r2, [r7, #12]
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	4413      	add	r3, r2
 8010282:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d009      	beq.n	801029e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801028a:	2208      	movs	r2, #8
 801028c:	4909      	ldr	r1, [pc, #36]	; (80102b4 <Get_SerialNum+0x50>)
 801028e:	68f8      	ldr	r0, [r7, #12]
 8010290:	f000 f814 	bl	80102bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010294:	2204      	movs	r2, #4
 8010296:	4908      	ldr	r1, [pc, #32]	; (80102b8 <Get_SerialNum+0x54>)
 8010298:	68b8      	ldr	r0, [r7, #8]
 801029a:	f000 f80f 	bl	80102bc <IntToUnicode>
  }
}
 801029e:	bf00      	nop
 80102a0:	3710      	adds	r7, #16
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}
 80102a6:	bf00      	nop
 80102a8:	1fff7a10 	.word	0x1fff7a10
 80102ac:	1fff7a14 	.word	0x1fff7a14
 80102b0:	1fff7a18 	.word	0x1fff7a18
 80102b4:	2000016a 	.word	0x2000016a
 80102b8:	2000017a 	.word	0x2000017a

080102bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80102bc:	b480      	push	{r7}
 80102be:	b087      	sub	sp, #28
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	60f8      	str	r0, [r7, #12]
 80102c4:	60b9      	str	r1, [r7, #8]
 80102c6:	4613      	mov	r3, r2
 80102c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80102ca:	2300      	movs	r3, #0
 80102cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80102ce:	2300      	movs	r3, #0
 80102d0:	75fb      	strb	r3, [r7, #23]
 80102d2:	e027      	b.n	8010324 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	0f1b      	lsrs	r3, r3, #28
 80102d8:	2b09      	cmp	r3, #9
 80102da:	d80b      	bhi.n	80102f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	0f1b      	lsrs	r3, r3, #28
 80102e0:	b2da      	uxtb	r2, r3
 80102e2:	7dfb      	ldrb	r3, [r7, #23]
 80102e4:	005b      	lsls	r3, r3, #1
 80102e6:	4619      	mov	r1, r3
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	440b      	add	r3, r1
 80102ec:	3230      	adds	r2, #48	; 0x30
 80102ee:	b2d2      	uxtb	r2, r2
 80102f0:	701a      	strb	r2, [r3, #0]
 80102f2:	e00a      	b.n	801030a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	0f1b      	lsrs	r3, r3, #28
 80102f8:	b2da      	uxtb	r2, r3
 80102fa:	7dfb      	ldrb	r3, [r7, #23]
 80102fc:	005b      	lsls	r3, r3, #1
 80102fe:	4619      	mov	r1, r3
 8010300:	68bb      	ldr	r3, [r7, #8]
 8010302:	440b      	add	r3, r1
 8010304:	3237      	adds	r2, #55	; 0x37
 8010306:	b2d2      	uxtb	r2, r2
 8010308:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	011b      	lsls	r3, r3, #4
 801030e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010310:	7dfb      	ldrb	r3, [r7, #23]
 8010312:	005b      	lsls	r3, r3, #1
 8010314:	3301      	adds	r3, #1
 8010316:	68ba      	ldr	r2, [r7, #8]
 8010318:	4413      	add	r3, r2
 801031a:	2200      	movs	r2, #0
 801031c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801031e:	7dfb      	ldrb	r3, [r7, #23]
 8010320:	3301      	adds	r3, #1
 8010322:	75fb      	strb	r3, [r7, #23]
 8010324:	7dfa      	ldrb	r2, [r7, #23]
 8010326:	79fb      	ldrb	r3, [r7, #7]
 8010328:	429a      	cmp	r2, r3
 801032a:	d3d3      	bcc.n	80102d4 <IntToUnicode+0x18>
  }
}
 801032c:	bf00      	nop
 801032e:	371c      	adds	r7, #28
 8010330:	46bd      	mov	sp, r7
 8010332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010336:	4770      	bx	lr

08010338 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b08a      	sub	sp, #40	; 0x28
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010340:	f107 0314 	add.w	r3, r7, #20
 8010344:	2200      	movs	r2, #0
 8010346:	601a      	str	r2, [r3, #0]
 8010348:	605a      	str	r2, [r3, #4]
 801034a:	609a      	str	r2, [r3, #8]
 801034c:	60da      	str	r2, [r3, #12]
 801034e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010358:	d13a      	bne.n	80103d0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801035a:	2300      	movs	r3, #0
 801035c:	613b      	str	r3, [r7, #16]
 801035e:	4b1e      	ldr	r3, [pc, #120]	; (80103d8 <HAL_PCD_MspInit+0xa0>)
 8010360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010362:	4a1d      	ldr	r2, [pc, #116]	; (80103d8 <HAL_PCD_MspInit+0xa0>)
 8010364:	f043 0301 	orr.w	r3, r3, #1
 8010368:	6313      	str	r3, [r2, #48]	; 0x30
 801036a:	4b1b      	ldr	r3, [pc, #108]	; (80103d8 <HAL_PCD_MspInit+0xa0>)
 801036c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801036e:	f003 0301 	and.w	r3, r3, #1
 8010372:	613b      	str	r3, [r7, #16]
 8010374:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010376:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801037a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801037c:	2302      	movs	r3, #2
 801037e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010380:	2300      	movs	r3, #0
 8010382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010384:	2303      	movs	r3, #3
 8010386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010388:	230a      	movs	r3, #10
 801038a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801038c:	f107 0314 	add.w	r3, r7, #20
 8010390:	4619      	mov	r1, r3
 8010392:	4812      	ldr	r0, [pc, #72]	; (80103dc <HAL_PCD_MspInit+0xa4>)
 8010394:	f7f2 fda4 	bl	8002ee0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010398:	4b0f      	ldr	r3, [pc, #60]	; (80103d8 <HAL_PCD_MspInit+0xa0>)
 801039a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801039c:	4a0e      	ldr	r2, [pc, #56]	; (80103d8 <HAL_PCD_MspInit+0xa0>)
 801039e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103a2:	6353      	str	r3, [r2, #52]	; 0x34
 80103a4:	2300      	movs	r3, #0
 80103a6:	60fb      	str	r3, [r7, #12]
 80103a8:	4b0b      	ldr	r3, [pc, #44]	; (80103d8 <HAL_PCD_MspInit+0xa0>)
 80103aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103ac:	4a0a      	ldr	r2, [pc, #40]	; (80103d8 <HAL_PCD_MspInit+0xa0>)
 80103ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80103b2:	6453      	str	r3, [r2, #68]	; 0x44
 80103b4:	4b08      	ldr	r3, [pc, #32]	; (80103d8 <HAL_PCD_MspInit+0xa0>)
 80103b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80103bc:	60fb      	str	r3, [r7, #12]
 80103be:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80103c0:	2200      	movs	r2, #0
 80103c2:	2105      	movs	r1, #5
 80103c4:	2043      	movs	r0, #67	; 0x43
 80103c6:	f7f2 f9c3 	bl	8002750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80103ca:	2043      	movs	r0, #67	; 0x43
 80103cc:	f7f2 f9dc 	bl	8002788 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80103d0:	bf00      	nop
 80103d2:	3728      	adds	r7, #40	; 0x28
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}
 80103d8:	40023800 	.word	0x40023800
 80103dc:	40020000 	.word	0x40020000

080103e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b082      	sub	sp, #8
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80103f4:	4619      	mov	r1, r3
 80103f6:	4610      	mov	r0, r2
 80103f8:	f7fb fb92 	bl	800bb20 <USBD_LL_SetupStage>
}
 80103fc:	bf00      	nop
 80103fe:	3708      	adds	r7, #8
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}

08010404 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b082      	sub	sp, #8
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
 801040c:	460b      	mov	r3, r1
 801040e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010416:	78fa      	ldrb	r2, [r7, #3]
 8010418:	6879      	ldr	r1, [r7, #4]
 801041a:	4613      	mov	r3, r2
 801041c:	00db      	lsls	r3, r3, #3
 801041e:	1a9b      	subs	r3, r3, r2
 8010420:	009b      	lsls	r3, r3, #2
 8010422:	440b      	add	r3, r1
 8010424:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010428:	681a      	ldr	r2, [r3, #0]
 801042a:	78fb      	ldrb	r3, [r7, #3]
 801042c:	4619      	mov	r1, r3
 801042e:	f7fb fbca 	bl	800bbc6 <USBD_LL_DataOutStage>
}
 8010432:	bf00      	nop
 8010434:	3708      	adds	r7, #8
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}

0801043a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801043a:	b580      	push	{r7, lr}
 801043c:	b082      	sub	sp, #8
 801043e:	af00      	add	r7, sp, #0
 8010440:	6078      	str	r0, [r7, #4]
 8010442:	460b      	mov	r3, r1
 8010444:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801044c:	78fa      	ldrb	r2, [r7, #3]
 801044e:	6879      	ldr	r1, [r7, #4]
 8010450:	4613      	mov	r3, r2
 8010452:	00db      	lsls	r3, r3, #3
 8010454:	1a9b      	subs	r3, r3, r2
 8010456:	009b      	lsls	r3, r3, #2
 8010458:	440b      	add	r3, r1
 801045a:	3348      	adds	r3, #72	; 0x48
 801045c:	681a      	ldr	r2, [r3, #0]
 801045e:	78fb      	ldrb	r3, [r7, #3]
 8010460:	4619      	mov	r1, r3
 8010462:	f7fb fc13 	bl	800bc8c <USBD_LL_DataInStage>
}
 8010466:	bf00      	nop
 8010468:	3708      	adds	r7, #8
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}

0801046e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801046e:	b580      	push	{r7, lr}
 8010470:	b082      	sub	sp, #8
 8010472:	af00      	add	r7, sp, #0
 8010474:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801047c:	4618      	mov	r0, r3
 801047e:	f7fb fd17 	bl	800beb0 <USBD_LL_SOF>
}
 8010482:	bf00      	nop
 8010484:	3708      	adds	r7, #8
 8010486:	46bd      	mov	sp, r7
 8010488:	bd80      	pop	{r7, pc}

0801048a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801048a:	b580      	push	{r7, lr}
 801048c:	b084      	sub	sp, #16
 801048e:	af00      	add	r7, sp, #0
 8010490:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010492:	2301      	movs	r3, #1
 8010494:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	68db      	ldr	r3, [r3, #12]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d102      	bne.n	80104a4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801049e:	2300      	movs	r3, #0
 80104a0:	73fb      	strb	r3, [r7, #15]
 80104a2:	e008      	b.n	80104b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	68db      	ldr	r3, [r3, #12]
 80104a8:	2b02      	cmp	r3, #2
 80104aa:	d102      	bne.n	80104b2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80104ac:	2301      	movs	r3, #1
 80104ae:	73fb      	strb	r3, [r7, #15]
 80104b0:	e001      	b.n	80104b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80104b2:	f7f0 ff7d 	bl	80013b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80104bc:	7bfa      	ldrb	r2, [r7, #15]
 80104be:	4611      	mov	r1, r2
 80104c0:	4618      	mov	r0, r3
 80104c2:	f7fb fcba 	bl	800be3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80104cc:	4618      	mov	r0, r3
 80104ce:	f7fb fc73 	bl	800bdb8 <USBD_LL_Reset>
}
 80104d2:	bf00      	nop
 80104d4:	3710      	adds	r7, #16
 80104d6:	46bd      	mov	sp, r7
 80104d8:	bd80      	pop	{r7, pc}
	...

080104dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b082      	sub	sp, #8
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80104ea:	4618      	mov	r0, r3
 80104ec:	f7fb fcb5 	bl	800be5a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	687a      	ldr	r2, [r7, #4]
 80104fc:	6812      	ldr	r2, [r2, #0]
 80104fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010502:	f043 0301 	orr.w	r3, r3, #1
 8010506:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	6a1b      	ldr	r3, [r3, #32]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d005      	beq.n	801051c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010510:	4b04      	ldr	r3, [pc, #16]	; (8010524 <HAL_PCD_SuspendCallback+0x48>)
 8010512:	691b      	ldr	r3, [r3, #16]
 8010514:	4a03      	ldr	r2, [pc, #12]	; (8010524 <HAL_PCD_SuspendCallback+0x48>)
 8010516:	f043 0306 	orr.w	r3, r3, #6
 801051a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801051c:	bf00      	nop
 801051e:	3708      	adds	r7, #8
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}
 8010524:	e000ed00 	.word	0xe000ed00

08010528 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b082      	sub	sp, #8
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010536:	4618      	mov	r0, r3
 8010538:	f7fb fca4 	bl	800be84 <USBD_LL_Resume>
}
 801053c:	bf00      	nop
 801053e:	3708      	adds	r7, #8
 8010540:	46bd      	mov	sp, r7
 8010542:	bd80      	pop	{r7, pc}

08010544 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b082      	sub	sp, #8
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
 801054c:	460b      	mov	r3, r1
 801054e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010556:	78fa      	ldrb	r2, [r7, #3]
 8010558:	4611      	mov	r1, r2
 801055a:	4618      	mov	r0, r3
 801055c:	f7fb fccf 	bl	800befe <USBD_LL_IsoOUTIncomplete>
}
 8010560:	bf00      	nop
 8010562:	3708      	adds	r7, #8
 8010564:	46bd      	mov	sp, r7
 8010566:	bd80      	pop	{r7, pc}

08010568 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010568:	b580      	push	{r7, lr}
 801056a:	b082      	sub	sp, #8
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	460b      	mov	r3, r1
 8010572:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801057a:	78fa      	ldrb	r2, [r7, #3]
 801057c:	4611      	mov	r1, r2
 801057e:	4618      	mov	r0, r3
 8010580:	f7fb fcb0 	bl	800bee4 <USBD_LL_IsoINIncomplete>
}
 8010584:	bf00      	nop
 8010586:	3708      	adds	r7, #8
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}

0801058c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b082      	sub	sp, #8
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801059a:	4618      	mov	r0, r3
 801059c:	f7fb fcbc 	bl	800bf18 <USBD_LL_DevConnected>
}
 80105a0:	bf00      	nop
 80105a2:	3708      	adds	r7, #8
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd80      	pop	{r7, pc}

080105a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b082      	sub	sp, #8
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7fb fcb9 	bl	800bf2e <USBD_LL_DevDisconnected>
}
 80105bc:	bf00      	nop
 80105be:	3708      	adds	r7, #8
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}

080105c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b082      	sub	sp, #8
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	781b      	ldrb	r3, [r3, #0]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d13c      	bne.n	801064e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80105d4:	4a20      	ldr	r2, [pc, #128]	; (8010658 <USBD_LL_Init+0x94>)
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	4a1e      	ldr	r2, [pc, #120]	; (8010658 <USBD_LL_Init+0x94>)
 80105e0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80105e4:	4b1c      	ldr	r3, [pc, #112]	; (8010658 <USBD_LL_Init+0x94>)
 80105e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80105ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80105ec:	4b1a      	ldr	r3, [pc, #104]	; (8010658 <USBD_LL_Init+0x94>)
 80105ee:	2204      	movs	r2, #4
 80105f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80105f2:	4b19      	ldr	r3, [pc, #100]	; (8010658 <USBD_LL_Init+0x94>)
 80105f4:	2202      	movs	r2, #2
 80105f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80105f8:	4b17      	ldr	r3, [pc, #92]	; (8010658 <USBD_LL_Init+0x94>)
 80105fa:	2200      	movs	r2, #0
 80105fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80105fe:	4b16      	ldr	r3, [pc, #88]	; (8010658 <USBD_LL_Init+0x94>)
 8010600:	2202      	movs	r2, #2
 8010602:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010604:	4b14      	ldr	r3, [pc, #80]	; (8010658 <USBD_LL_Init+0x94>)
 8010606:	2200      	movs	r2, #0
 8010608:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801060a:	4b13      	ldr	r3, [pc, #76]	; (8010658 <USBD_LL_Init+0x94>)
 801060c:	2200      	movs	r2, #0
 801060e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010610:	4b11      	ldr	r3, [pc, #68]	; (8010658 <USBD_LL_Init+0x94>)
 8010612:	2200      	movs	r2, #0
 8010614:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010616:	4b10      	ldr	r3, [pc, #64]	; (8010658 <USBD_LL_Init+0x94>)
 8010618:	2200      	movs	r2, #0
 801061a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801061c:	4b0e      	ldr	r3, [pc, #56]	; (8010658 <USBD_LL_Init+0x94>)
 801061e:	2200      	movs	r2, #0
 8010620:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010622:	480d      	ldr	r0, [pc, #52]	; (8010658 <USBD_LL_Init+0x94>)
 8010624:	f7f5 fc54 	bl	8005ed0 <HAL_PCD_Init>
 8010628:	4603      	mov	r3, r0
 801062a:	2b00      	cmp	r3, #0
 801062c:	d001      	beq.n	8010632 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801062e:	f7f0 febf 	bl	80013b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010632:	2180      	movs	r1, #128	; 0x80
 8010634:	4808      	ldr	r0, [pc, #32]	; (8010658 <USBD_LL_Init+0x94>)
 8010636:	f7f6 fdb2 	bl	800719e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801063a:	2240      	movs	r2, #64	; 0x40
 801063c:	2100      	movs	r1, #0
 801063e:	4806      	ldr	r0, [pc, #24]	; (8010658 <USBD_LL_Init+0x94>)
 8010640:	f7f6 fd66 	bl	8007110 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010644:	2280      	movs	r2, #128	; 0x80
 8010646:	2101      	movs	r1, #1
 8010648:	4803      	ldr	r0, [pc, #12]	; (8010658 <USBD_LL_Init+0x94>)
 801064a:	f7f6 fd61 	bl	8007110 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801064e:	2300      	movs	r3, #0
}
 8010650:	4618      	mov	r0, r3
 8010652:	3708      	adds	r7, #8
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}
 8010658:	2000849c 	.word	0x2000849c

0801065c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b084      	sub	sp, #16
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010664:	2300      	movs	r3, #0
 8010666:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010668:	2300      	movs	r3, #0
 801066a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010672:	4618      	mov	r0, r3
 8010674:	f7f5 fd49 	bl	800610a <HAL_PCD_Start>
 8010678:	4603      	mov	r3, r0
 801067a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801067c:	7bfb      	ldrb	r3, [r7, #15]
 801067e:	4618      	mov	r0, r3
 8010680:	f000 f92a 	bl	80108d8 <USBD_Get_USB_Status>
 8010684:	4603      	mov	r3, r0
 8010686:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010688:	7bbb      	ldrb	r3, [r7, #14]
}
 801068a:	4618      	mov	r0, r3
 801068c:	3710      	adds	r7, #16
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}

08010692 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010692:	b580      	push	{r7, lr}
 8010694:	b084      	sub	sp, #16
 8010696:	af00      	add	r7, sp, #0
 8010698:	6078      	str	r0, [r7, #4]
 801069a:	4608      	mov	r0, r1
 801069c:	4611      	mov	r1, r2
 801069e:	461a      	mov	r2, r3
 80106a0:	4603      	mov	r3, r0
 80106a2:	70fb      	strb	r3, [r7, #3]
 80106a4:	460b      	mov	r3, r1
 80106a6:	70bb      	strb	r3, [r7, #2]
 80106a8:	4613      	mov	r3, r2
 80106aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106ac:	2300      	movs	r3, #0
 80106ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106b0:	2300      	movs	r3, #0
 80106b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80106ba:	78bb      	ldrb	r3, [r7, #2]
 80106bc:	883a      	ldrh	r2, [r7, #0]
 80106be:	78f9      	ldrb	r1, [r7, #3]
 80106c0:	f7f6 f92d 	bl	800691e <HAL_PCD_EP_Open>
 80106c4:	4603      	mov	r3, r0
 80106c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106c8:	7bfb      	ldrb	r3, [r7, #15]
 80106ca:	4618      	mov	r0, r3
 80106cc:	f000 f904 	bl	80108d8 <USBD_Get_USB_Status>
 80106d0:	4603      	mov	r3, r0
 80106d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	3710      	adds	r7, #16
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}

080106de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80106de:	b580      	push	{r7, lr}
 80106e0:	b084      	sub	sp, #16
 80106e2:	af00      	add	r7, sp, #0
 80106e4:	6078      	str	r0, [r7, #4]
 80106e6:	460b      	mov	r3, r1
 80106e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106ea:	2300      	movs	r3, #0
 80106ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106ee:	2300      	movs	r3, #0
 80106f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80106f8:	78fa      	ldrb	r2, [r7, #3]
 80106fa:	4611      	mov	r1, r2
 80106fc:	4618      	mov	r0, r3
 80106fe:	f7f6 f976 	bl	80069ee <HAL_PCD_EP_Close>
 8010702:	4603      	mov	r3, r0
 8010704:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010706:	7bfb      	ldrb	r3, [r7, #15]
 8010708:	4618      	mov	r0, r3
 801070a:	f000 f8e5 	bl	80108d8 <USBD_Get_USB_Status>
 801070e:	4603      	mov	r3, r0
 8010710:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010712:	7bbb      	ldrb	r3, [r7, #14]
}
 8010714:	4618      	mov	r0, r3
 8010716:	3710      	adds	r7, #16
 8010718:	46bd      	mov	sp, r7
 801071a:	bd80      	pop	{r7, pc}

0801071c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b084      	sub	sp, #16
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
 8010724:	460b      	mov	r3, r1
 8010726:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010728:	2300      	movs	r3, #0
 801072a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801072c:	2300      	movs	r3, #0
 801072e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010736:	78fa      	ldrb	r2, [r7, #3]
 8010738:	4611      	mov	r1, r2
 801073a:	4618      	mov	r0, r3
 801073c:	f7f6 fa4e 	bl	8006bdc <HAL_PCD_EP_SetStall>
 8010740:	4603      	mov	r3, r0
 8010742:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010744:	7bfb      	ldrb	r3, [r7, #15]
 8010746:	4618      	mov	r0, r3
 8010748:	f000 f8c6 	bl	80108d8 <USBD_Get_USB_Status>
 801074c:	4603      	mov	r3, r0
 801074e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010750:	7bbb      	ldrb	r3, [r7, #14]
}
 8010752:	4618      	mov	r0, r3
 8010754:	3710      	adds	r7, #16
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}

0801075a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801075a:	b580      	push	{r7, lr}
 801075c:	b084      	sub	sp, #16
 801075e:	af00      	add	r7, sp, #0
 8010760:	6078      	str	r0, [r7, #4]
 8010762:	460b      	mov	r3, r1
 8010764:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010766:	2300      	movs	r3, #0
 8010768:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801076a:	2300      	movs	r3, #0
 801076c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010774:	78fa      	ldrb	r2, [r7, #3]
 8010776:	4611      	mov	r1, r2
 8010778:	4618      	mov	r0, r3
 801077a:	f7f6 fa93 	bl	8006ca4 <HAL_PCD_EP_ClrStall>
 801077e:	4603      	mov	r3, r0
 8010780:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010782:	7bfb      	ldrb	r3, [r7, #15]
 8010784:	4618      	mov	r0, r3
 8010786:	f000 f8a7 	bl	80108d8 <USBD_Get_USB_Status>
 801078a:	4603      	mov	r3, r0
 801078c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801078e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010790:	4618      	mov	r0, r3
 8010792:	3710      	adds	r7, #16
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}

08010798 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010798:	b480      	push	{r7}
 801079a:	b085      	sub	sp, #20
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
 80107a0:	460b      	mov	r3, r1
 80107a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80107aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80107ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	da0b      	bge.n	80107cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80107b4:	78fb      	ldrb	r3, [r7, #3]
 80107b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80107ba:	68f9      	ldr	r1, [r7, #12]
 80107bc:	4613      	mov	r3, r2
 80107be:	00db      	lsls	r3, r3, #3
 80107c0:	1a9b      	subs	r3, r3, r2
 80107c2:	009b      	lsls	r3, r3, #2
 80107c4:	440b      	add	r3, r1
 80107c6:	333e      	adds	r3, #62	; 0x3e
 80107c8:	781b      	ldrb	r3, [r3, #0]
 80107ca:	e00b      	b.n	80107e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80107cc:	78fb      	ldrb	r3, [r7, #3]
 80107ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80107d2:	68f9      	ldr	r1, [r7, #12]
 80107d4:	4613      	mov	r3, r2
 80107d6:	00db      	lsls	r3, r3, #3
 80107d8:	1a9b      	subs	r3, r3, r2
 80107da:	009b      	lsls	r3, r3, #2
 80107dc:	440b      	add	r3, r1
 80107de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80107e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80107e4:	4618      	mov	r0, r3
 80107e6:	3714      	adds	r7, #20
 80107e8:	46bd      	mov	sp, r7
 80107ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ee:	4770      	bx	lr

080107f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b084      	sub	sp, #16
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	460b      	mov	r3, r1
 80107fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80107fc:	2300      	movs	r3, #0
 80107fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010800:	2300      	movs	r3, #0
 8010802:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801080a:	78fa      	ldrb	r2, [r7, #3]
 801080c:	4611      	mov	r1, r2
 801080e:	4618      	mov	r0, r3
 8010810:	f7f6 f860 	bl	80068d4 <HAL_PCD_SetAddress>
 8010814:	4603      	mov	r3, r0
 8010816:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010818:	7bfb      	ldrb	r3, [r7, #15]
 801081a:	4618      	mov	r0, r3
 801081c:	f000 f85c 	bl	80108d8 <USBD_Get_USB_Status>
 8010820:	4603      	mov	r3, r0
 8010822:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010824:	7bbb      	ldrb	r3, [r7, #14]
}
 8010826:	4618      	mov	r0, r3
 8010828:	3710      	adds	r7, #16
 801082a:	46bd      	mov	sp, r7
 801082c:	bd80      	pop	{r7, pc}

0801082e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801082e:	b580      	push	{r7, lr}
 8010830:	b086      	sub	sp, #24
 8010832:	af00      	add	r7, sp, #0
 8010834:	60f8      	str	r0, [r7, #12]
 8010836:	607a      	str	r2, [r7, #4]
 8010838:	603b      	str	r3, [r7, #0]
 801083a:	460b      	mov	r3, r1
 801083c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801083e:	2300      	movs	r3, #0
 8010840:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010842:	2300      	movs	r3, #0
 8010844:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801084c:	7af9      	ldrb	r1, [r7, #11]
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	687a      	ldr	r2, [r7, #4]
 8010852:	f7f6 f979 	bl	8006b48 <HAL_PCD_EP_Transmit>
 8010856:	4603      	mov	r3, r0
 8010858:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801085a:	7dfb      	ldrb	r3, [r7, #23]
 801085c:	4618      	mov	r0, r3
 801085e:	f000 f83b 	bl	80108d8 <USBD_Get_USB_Status>
 8010862:	4603      	mov	r3, r0
 8010864:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010866:	7dbb      	ldrb	r3, [r7, #22]
}
 8010868:	4618      	mov	r0, r3
 801086a:	3718      	adds	r7, #24
 801086c:	46bd      	mov	sp, r7
 801086e:	bd80      	pop	{r7, pc}

08010870 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b086      	sub	sp, #24
 8010874:	af00      	add	r7, sp, #0
 8010876:	60f8      	str	r0, [r7, #12]
 8010878:	607a      	str	r2, [r7, #4]
 801087a:	603b      	str	r3, [r7, #0]
 801087c:	460b      	mov	r3, r1
 801087e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010880:	2300      	movs	r3, #0
 8010882:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010884:	2300      	movs	r3, #0
 8010886:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801088e:	7af9      	ldrb	r1, [r7, #11]
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	687a      	ldr	r2, [r7, #4]
 8010894:	f7f6 f8f5 	bl	8006a82 <HAL_PCD_EP_Receive>
 8010898:	4603      	mov	r3, r0
 801089a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801089c:	7dfb      	ldrb	r3, [r7, #23]
 801089e:	4618      	mov	r0, r3
 80108a0:	f000 f81a 	bl	80108d8 <USBD_Get_USB_Status>
 80108a4:	4603      	mov	r3, r0
 80108a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80108a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80108aa:	4618      	mov	r0, r3
 80108ac:	3718      	adds	r7, #24
 80108ae:	46bd      	mov	sp, r7
 80108b0:	bd80      	pop	{r7, pc}

080108b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80108b2:	b580      	push	{r7, lr}
 80108b4:	b082      	sub	sp, #8
 80108b6:	af00      	add	r7, sp, #0
 80108b8:	6078      	str	r0, [r7, #4]
 80108ba:	460b      	mov	r3, r1
 80108bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80108c4:	78fa      	ldrb	r2, [r7, #3]
 80108c6:	4611      	mov	r1, r2
 80108c8:	4618      	mov	r0, r3
 80108ca:	f7f6 f925 	bl	8006b18 <HAL_PCD_EP_GetRxCount>
 80108ce:	4603      	mov	r3, r0
}
 80108d0:	4618      	mov	r0, r3
 80108d2:	3708      	adds	r7, #8
 80108d4:	46bd      	mov	sp, r7
 80108d6:	bd80      	pop	{r7, pc}

080108d8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80108d8:	b480      	push	{r7}
 80108da:	b085      	sub	sp, #20
 80108dc:	af00      	add	r7, sp, #0
 80108de:	4603      	mov	r3, r0
 80108e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108e2:	2300      	movs	r3, #0
 80108e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80108e6:	79fb      	ldrb	r3, [r7, #7]
 80108e8:	2b03      	cmp	r3, #3
 80108ea:	d817      	bhi.n	801091c <USBD_Get_USB_Status+0x44>
 80108ec:	a201      	add	r2, pc, #4	; (adr r2, 80108f4 <USBD_Get_USB_Status+0x1c>)
 80108ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108f2:	bf00      	nop
 80108f4:	08010905 	.word	0x08010905
 80108f8:	0801090b 	.word	0x0801090b
 80108fc:	08010911 	.word	0x08010911
 8010900:	08010917 	.word	0x08010917
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010904:	2300      	movs	r3, #0
 8010906:	73fb      	strb	r3, [r7, #15]
    break;
 8010908:	e00b      	b.n	8010922 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801090a:	2303      	movs	r3, #3
 801090c:	73fb      	strb	r3, [r7, #15]
    break;
 801090e:	e008      	b.n	8010922 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010910:	2301      	movs	r3, #1
 8010912:	73fb      	strb	r3, [r7, #15]
    break;
 8010914:	e005      	b.n	8010922 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010916:	2303      	movs	r3, #3
 8010918:	73fb      	strb	r3, [r7, #15]
    break;
 801091a:	e002      	b.n	8010922 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801091c:	2303      	movs	r3, #3
 801091e:	73fb      	strb	r3, [r7, #15]
    break;
 8010920:	bf00      	nop
  }
  return usb_status;
 8010922:	7bfb      	ldrb	r3, [r7, #15]
}
 8010924:	4618      	mov	r0, r3
 8010926:	3714      	adds	r7, #20
 8010928:	46bd      	mov	sp, r7
 801092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092e:	4770      	bx	lr

08010930 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8010930:	b480      	push	{r7}
 8010932:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8010934:	bf00      	nop
 8010936:	46bd      	mov	sp, r7
 8010938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093c:	4770      	bx	lr
	...

08010940 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8010940:	b580      	push	{r7, lr}
 8010942:	b086      	sub	sp, #24
 8010944:	af04      	add	r7, sp, #16
 8010946:	4603      	mov	r3, r0
 8010948:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 801094a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801094e:	9302      	str	r3, [sp, #8]
 8010950:	2301      	movs	r3, #1
 8010952:	9301      	str	r3, [sp, #4]
 8010954:	1dfb      	adds	r3, r7, #7
 8010956:	9300      	str	r3, [sp, #0]
 8010958:	2301      	movs	r3, #1
 801095a:	2200      	movs	r2, #0
 801095c:	2178      	movs	r1, #120	; 0x78
 801095e:	4803      	ldr	r0, [pc, #12]	; (801096c <ssd1306_WriteCommand+0x2c>)
 8010960:	f7f2 fdaa 	bl	80034b8 <HAL_I2C_Mem_Write>
}
 8010964:	bf00      	nop
 8010966:	3708      	adds	r7, #8
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}
 801096c:	20005d60 	.word	0x20005d60

08010970 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8010970:	b580      	push	{r7, lr}
 8010972:	b086      	sub	sp, #24
 8010974:	af04      	add	r7, sp, #16
 8010976:	6078      	str	r0, [r7, #4]
 8010978:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	b29b      	uxth	r3, r3
 801097e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010982:	9202      	str	r2, [sp, #8]
 8010984:	9301      	str	r3, [sp, #4]
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	9300      	str	r3, [sp, #0]
 801098a:	2301      	movs	r3, #1
 801098c:	2240      	movs	r2, #64	; 0x40
 801098e:	2178      	movs	r1, #120	; 0x78
 8010990:	4803      	ldr	r0, [pc, #12]	; (80109a0 <ssd1306_WriteData+0x30>)
 8010992:	f7f2 fd91 	bl	80034b8 <HAL_I2C_Mem_Write>
}
 8010996:	bf00      	nop
 8010998:	3708      	adds	r7, #8
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}
 801099e:	bf00      	nop
 80109a0:	20005d60 	.word	0x20005d60

080109a4 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80109a4:	b580      	push	{r7, lr}
 80109a6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80109a8:	f7ff ffc2 	bl	8010930 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80109ac:	2064      	movs	r0, #100	; 0x64
 80109ae:	f7f1 fa1f 	bl	8001df0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80109b2:	2000      	movs	r0, #0
 80109b4:	f000 fb2a 	bl	801100c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80109b8:	2020      	movs	r0, #32
 80109ba:	f7ff ffc1 	bl	8010940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80109be:	2000      	movs	r0, #0
 80109c0:	f7ff ffbe 	bl	8010940 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80109c4:	20b0      	movs	r0, #176	; 0xb0
 80109c6:	f7ff ffbb 	bl	8010940 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80109ca:	20c8      	movs	r0, #200	; 0xc8
 80109cc:	f7ff ffb8 	bl	8010940 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80109d0:	2000      	movs	r0, #0
 80109d2:	f7ff ffb5 	bl	8010940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80109d6:	2010      	movs	r0, #16
 80109d8:	f7ff ffb2 	bl	8010940 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80109dc:	2040      	movs	r0, #64	; 0x40
 80109de:	f7ff ffaf 	bl	8010940 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80109e2:	20ff      	movs	r0, #255	; 0xff
 80109e4:	f000 faff 	bl	8010fe6 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80109e8:	20a1      	movs	r0, #161	; 0xa1
 80109ea:	f7ff ffa9 	bl	8010940 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80109ee:	20a6      	movs	r0, #166	; 0xa6
 80109f0:	f7ff ffa6 	bl	8010940 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80109f4:	20a8      	movs	r0, #168	; 0xa8
 80109f6:	f7ff ffa3 	bl	8010940 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 80109fa:	201f      	movs	r0, #31
 80109fc:	f7ff ffa0 	bl	8010940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8010a00:	20a4      	movs	r0, #164	; 0xa4
 8010a02:	f7ff ff9d 	bl	8010940 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8010a06:	20d3      	movs	r0, #211	; 0xd3
 8010a08:	f7ff ff9a 	bl	8010940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8010a0c:	2000      	movs	r0, #0
 8010a0e:	f7ff ff97 	bl	8010940 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8010a12:	20d5      	movs	r0, #213	; 0xd5
 8010a14:	f7ff ff94 	bl	8010940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8010a18:	20f0      	movs	r0, #240	; 0xf0
 8010a1a:	f7ff ff91 	bl	8010940 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8010a1e:	20d9      	movs	r0, #217	; 0xd9
 8010a20:	f7ff ff8e 	bl	8010940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8010a24:	2022      	movs	r0, #34	; 0x22
 8010a26:	f7ff ff8b 	bl	8010940 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8010a2a:	20da      	movs	r0, #218	; 0xda
 8010a2c:	f7ff ff88 	bl	8010940 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8010a30:	2002      	movs	r0, #2
 8010a32:	f7ff ff85 	bl	8010940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8010a36:	20db      	movs	r0, #219	; 0xdb
 8010a38:	f7ff ff82 	bl	8010940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8010a3c:	2020      	movs	r0, #32
 8010a3e:	f7ff ff7f 	bl	8010940 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8010a42:	208d      	movs	r0, #141	; 0x8d
 8010a44:	f7ff ff7c 	bl	8010940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8010a48:	2014      	movs	r0, #20
 8010a4a:	f7ff ff79 	bl	8010940 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8010a4e:	2001      	movs	r0, #1
 8010a50:	f000 fadc 	bl	801100c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8010a54:	2000      	movs	r0, #0
 8010a56:	f000 f80f 	bl	8010a78 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8010a5a:	f000 f8bd 	bl	8010bd8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8010a5e:	4b05      	ldr	r3, [pc, #20]	; (8010a74 <ssd1306_Init+0xd0>)
 8010a60:	2200      	movs	r2, #0
 8010a62:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8010a64:	4b03      	ldr	r3, [pc, #12]	; (8010a74 <ssd1306_Init+0xd0>)
 8010a66:	2200      	movs	r2, #0
 8010a68:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8010a6a:	4b02      	ldr	r3, [pc, #8]	; (8010a74 <ssd1306_Init+0xd0>)
 8010a6c:	2201      	movs	r2, #1
 8010a6e:	715a      	strb	r2, [r3, #5]
}
 8010a70:	bf00      	nop
 8010a72:	bd80      	pop	{r7, pc}
 8010a74:	20005128 	.word	0x20005128

08010a78 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8010a78:	b480      	push	{r7}
 8010a7a:	b085      	sub	sp, #20
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	4603      	mov	r3, r0
 8010a80:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8010a82:	2300      	movs	r3, #0
 8010a84:	60fb      	str	r3, [r7, #12]
 8010a86:	e00d      	b.n	8010aa4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8010a88:	79fb      	ldrb	r3, [r7, #7]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d101      	bne.n	8010a92 <ssd1306_Fill+0x1a>
 8010a8e:	2100      	movs	r1, #0
 8010a90:	e000      	b.n	8010a94 <ssd1306_Fill+0x1c>
 8010a92:	21ff      	movs	r1, #255	; 0xff
 8010a94:	4a08      	ldr	r2, [pc, #32]	; (8010ab8 <ssd1306_Fill+0x40>)
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	4413      	add	r3, r2
 8010a9a:	460a      	mov	r2, r1
 8010a9c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	3301      	adds	r3, #1
 8010aa2:	60fb      	str	r3, [r7, #12]
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010aaa:	d3ed      	bcc.n	8010a88 <ssd1306_Fill+0x10>
    }
}
 8010aac:	bf00      	nop
 8010aae:	3714      	adds	r7, #20
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab6:	4770      	bx	lr
 8010ab8:	20004f28 	.word	0x20004f28

08010abc <ssd1306_FillZone>:


void ssd1306_FillZone(uint8_t x, uint8_t y, uint8_t wx, uint8_t wy, SSD1306_COLOR color)
{
 8010abc:	b490      	push	{r4, r7}
 8010abe:	b08a      	sub	sp, #40	; 0x28
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	4604      	mov	r4, r0
 8010ac4:	4608      	mov	r0, r1
 8010ac6:	4611      	mov	r1, r2
 8010ac8:	461a      	mov	r2, r3
 8010aca:	4623      	mov	r3, r4
 8010acc:	71fb      	strb	r3, [r7, #7]
 8010ace:	4603      	mov	r3, r0
 8010ad0:	71bb      	strb	r3, [r7, #6]
 8010ad2:	460b      	mov	r3, r1
 8010ad4:	717b      	strb	r3, [r7, #5]
 8010ad6:	4613      	mov	r3, r2
 8010ad8:	713b      	strb	r3, [r7, #4]
    uint32_t xi;
    uint32_t yi;

    int by = y/8;
 8010ada:	79bb      	ldrb	r3, [r7, #6]
 8010adc:	08db      	lsrs	r3, r3, #3
 8010ade:	b2db      	uxtb	r3, r3
 8010ae0:	61bb      	str	r3, [r7, #24]
    int bly = (y+wy+7)/8;
 8010ae2:	79ba      	ldrb	r2, [r7, #6]
 8010ae4:	793b      	ldrb	r3, [r7, #4]
 8010ae6:	4413      	add	r3, r2
 8010ae8:	3307      	adds	r3, #7
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	da00      	bge.n	8010af0 <ssd1306_FillZone+0x34>
 8010aee:	3307      	adds	r3, #7
 8010af0:	10db      	asrs	r3, r3, #3
 8010af2:	617b      	str	r3, [r7, #20]

    for (yi = by; yi < bly; yi++) {
 8010af4:	69bb      	ldr	r3, [r7, #24]
 8010af6:	623b      	str	r3, [r7, #32]
 8010af8:	e063      	b.n	8010bc2 <ssd1306_FillZone+0x106>
    	uint8_t b = 0xFF;
 8010afa:	23ff      	movs	r3, #255	; 0xff
 8010afc:	77fb      	strb	r3, [r7, #31]
    	if (yi == by) {
 8010afe:	69bb      	ldr	r3, [r7, #24]
 8010b00:	6a3a      	ldr	r2, [r7, #32]
 8010b02:	429a      	cmp	r2, r3
 8010b04:	d106      	bne.n	8010b14 <ssd1306_FillZone+0x58>
    		b = b << (y & 0x7);
 8010b06:	7ffa      	ldrb	r2, [r7, #31]
 8010b08:	79bb      	ldrb	r3, [r7, #6]
 8010b0a:	f003 0307 	and.w	r3, r3, #7
 8010b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8010b12:	77fb      	strb	r3, [r7, #31]
    	}
    	if (yi == bly-1) {
 8010b14:	697b      	ldr	r3, [r7, #20]
 8010b16:	3b01      	subs	r3, #1
 8010b18:	461a      	mov	r2, r3
 8010b1a:	6a3b      	ldr	r3, [r7, #32]
 8010b1c:	4293      	cmp	r3, r2
 8010b1e:	d113      	bne.n	8010b48 <ssd1306_FillZone+0x8c>
    		int s = (y+wy) & 0x7;
 8010b20:	79ba      	ldrb	r2, [r7, #6]
 8010b22:	793b      	ldrb	r3, [r7, #4]
 8010b24:	4413      	add	r3, r2
 8010b26:	b2db      	uxtb	r3, r3
 8010b28:	f003 0307 	and.w	r3, r3, #7
 8010b2c:	613b      	str	r3, [r7, #16]
    		if (s) b &= ~(0xFFU << s);
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d009      	beq.n	8010b48 <ssd1306_FillZone+0x8c>
 8010b34:	22ff      	movs	r2, #255	; 0xff
 8010b36:	693b      	ldr	r3, [r7, #16]
 8010b38:	fa02 f303 	lsl.w	r3, r2, r3
 8010b3c:	b2db      	uxtb	r3, r3
 8010b3e:	43db      	mvns	r3, r3
 8010b40:	b2da      	uxtb	r2, r3
 8010b42:	7ffb      	ldrb	r3, [r7, #31]
 8010b44:	4013      	ands	r3, r2
 8010b46:	77fb      	strb	r3, [r7, #31]
    	}
    	for (xi = x; xi <x+wx; xi++) {
 8010b48:	79fb      	ldrb	r3, [r7, #7]
 8010b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8010b4c:	e02d      	b.n	8010baa <ssd1306_FillZone+0xee>
    		int i = yi*SSD1306_WIDTH+xi;
 8010b4e:	6a3b      	ldr	r3, [r7, #32]
 8010b50:	01da      	lsls	r2, r3, #7
 8010b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b54:	4413      	add	r3, r2
 8010b56:	60fb      	str	r3, [r7, #12]
    		if (i>=SSD1306_BUFFER_SIZE) break;
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b5e:	da2c      	bge.n	8010bba <ssd1306_FillZone+0xfe>
    		if (color == Black) {
 8010b60:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d111      	bne.n	8010b8c <ssd1306_FillZone+0xd0>
    			SSD1306_Buffer[i] &= ~b;
 8010b68:	4a1a      	ldr	r2, [pc, #104]	; (8010bd4 <ssd1306_FillZone+0x118>)
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	4413      	add	r3, r2
 8010b6e:	781b      	ldrb	r3, [r3, #0]
 8010b70:	b25a      	sxtb	r2, r3
 8010b72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010b76:	43db      	mvns	r3, r3
 8010b78:	b25b      	sxtb	r3, r3
 8010b7a:	4013      	ands	r3, r2
 8010b7c:	b25b      	sxtb	r3, r3
 8010b7e:	b2d9      	uxtb	r1, r3
 8010b80:	4a14      	ldr	r2, [pc, #80]	; (8010bd4 <ssd1306_FillZone+0x118>)
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	4413      	add	r3, r2
 8010b86:	460a      	mov	r2, r1
 8010b88:	701a      	strb	r2, [r3, #0]
 8010b8a:	e00b      	b.n	8010ba4 <ssd1306_FillZone+0xe8>
    		} else {
    			SSD1306_Buffer[i] |= b;
 8010b8c:	4a11      	ldr	r2, [pc, #68]	; (8010bd4 <ssd1306_FillZone+0x118>)
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	4413      	add	r3, r2
 8010b92:	781a      	ldrb	r2, [r3, #0]
 8010b94:	7ffb      	ldrb	r3, [r7, #31]
 8010b96:	4313      	orrs	r3, r2
 8010b98:	b2d9      	uxtb	r1, r3
 8010b9a:	4a0e      	ldr	r2, [pc, #56]	; (8010bd4 <ssd1306_FillZone+0x118>)
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	4413      	add	r3, r2
 8010ba0:	460a      	mov	r2, r1
 8010ba2:	701a      	strb	r2, [r3, #0]
    	for (xi = x; xi <x+wx; xi++) {
 8010ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba6:	3301      	adds	r3, #1
 8010ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8010baa:	79fa      	ldrb	r2, [r7, #7]
 8010bac:	797b      	ldrb	r3, [r7, #5]
 8010bae:	4413      	add	r3, r2
 8010bb0:	461a      	mov	r2, r3
 8010bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb4:	4293      	cmp	r3, r2
 8010bb6:	d3ca      	bcc.n	8010b4e <ssd1306_FillZone+0x92>
 8010bb8:	e000      	b.n	8010bbc <ssd1306_FillZone+0x100>
    		if (i>=SSD1306_BUFFER_SIZE) break;
 8010bba:	bf00      	nop
    for (yi = by; yi < bly; yi++) {
 8010bbc:	6a3b      	ldr	r3, [r7, #32]
 8010bbe:	3301      	adds	r3, #1
 8010bc0:	623b      	str	r3, [r7, #32]
 8010bc2:	697b      	ldr	r3, [r7, #20]
 8010bc4:	6a3a      	ldr	r2, [r7, #32]
 8010bc6:	429a      	cmp	r2, r3
 8010bc8:	d397      	bcc.n	8010afa <ssd1306_FillZone+0x3e>
    		}
    	}
    }

}
 8010bca:	bf00      	nop
 8010bcc:	3728      	adds	r7, #40	; 0x28
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bc90      	pop	{r4, r7}
 8010bd2:	4770      	bx	lr
 8010bd4:	20004f28 	.word	0x20004f28

08010bd8 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b082      	sub	sp, #8
 8010bdc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8010bde:	2300      	movs	r3, #0
 8010be0:	71fb      	strb	r3, [r7, #7]
 8010be2:	e016      	b.n	8010c12 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8010be4:	79fb      	ldrb	r3, [r7, #7]
 8010be6:	3b50      	subs	r3, #80	; 0x50
 8010be8:	b2db      	uxtb	r3, r3
 8010bea:	4618      	mov	r0, r3
 8010bec:	f7ff fea8 	bl	8010940 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8010bf0:	2000      	movs	r0, #0
 8010bf2:	f7ff fea5 	bl	8010940 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8010bf6:	2010      	movs	r0, #16
 8010bf8:	f7ff fea2 	bl	8010940 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8010bfc:	79fb      	ldrb	r3, [r7, #7]
 8010bfe:	01db      	lsls	r3, r3, #7
 8010c00:	4a07      	ldr	r2, [pc, #28]	; (8010c20 <ssd1306_UpdateScreen+0x48>)
 8010c02:	4413      	add	r3, r2
 8010c04:	2180      	movs	r1, #128	; 0x80
 8010c06:	4618      	mov	r0, r3
 8010c08:	f7ff feb2 	bl	8010970 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8010c0c:	79fb      	ldrb	r3, [r7, #7]
 8010c0e:	3301      	adds	r3, #1
 8010c10:	71fb      	strb	r3, [r7, #7]
 8010c12:	79fb      	ldrb	r3, [r7, #7]
 8010c14:	2b03      	cmp	r3, #3
 8010c16:	d9e5      	bls.n	8010be4 <ssd1306_UpdateScreen+0xc>
    }
}
 8010c18:	bf00      	nop
 8010c1a:	3708      	adds	r7, #8
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}
 8010c20:	20004f28 	.word	0x20004f28

08010c24 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8010c24:	b480      	push	{r7}
 8010c26:	b083      	sub	sp, #12
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	71fb      	strb	r3, [r7, #7]
 8010c2e:	460b      	mov	r3, r1
 8010c30:	71bb      	strb	r3, [r7, #6]
 8010c32:	4613      	mov	r3, r2
 8010c34:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8010c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	db48      	blt.n	8010cd0 <ssd1306_DrawPixel+0xac>
 8010c3e:	79bb      	ldrb	r3, [r7, #6]
 8010c40:	2b1f      	cmp	r3, #31
 8010c42:	d845      	bhi.n	8010cd0 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8010c44:	4b25      	ldr	r3, [pc, #148]	; (8010cdc <ssd1306_DrawPixel+0xb8>)
 8010c46:	791b      	ldrb	r3, [r3, #4]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d006      	beq.n	8010c5a <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8010c4c:	797b      	ldrb	r3, [r7, #5]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	bf0c      	ite	eq
 8010c52:	2301      	moveq	r3, #1
 8010c54:	2300      	movne	r3, #0
 8010c56:	b2db      	uxtb	r3, r3
 8010c58:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8010c5a:	797b      	ldrb	r3, [r7, #5]
 8010c5c:	2b01      	cmp	r3, #1
 8010c5e:	d11a      	bne.n	8010c96 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8010c60:	79fa      	ldrb	r2, [r7, #7]
 8010c62:	79bb      	ldrb	r3, [r7, #6]
 8010c64:	08db      	lsrs	r3, r3, #3
 8010c66:	b2d8      	uxtb	r0, r3
 8010c68:	4603      	mov	r3, r0
 8010c6a:	01db      	lsls	r3, r3, #7
 8010c6c:	4413      	add	r3, r2
 8010c6e:	4a1c      	ldr	r2, [pc, #112]	; (8010ce0 <ssd1306_DrawPixel+0xbc>)
 8010c70:	5cd3      	ldrb	r3, [r2, r3]
 8010c72:	b25a      	sxtb	r2, r3
 8010c74:	79bb      	ldrb	r3, [r7, #6]
 8010c76:	f003 0307 	and.w	r3, r3, #7
 8010c7a:	2101      	movs	r1, #1
 8010c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8010c80:	b25b      	sxtb	r3, r3
 8010c82:	4313      	orrs	r3, r2
 8010c84:	b259      	sxtb	r1, r3
 8010c86:	79fa      	ldrb	r2, [r7, #7]
 8010c88:	4603      	mov	r3, r0
 8010c8a:	01db      	lsls	r3, r3, #7
 8010c8c:	4413      	add	r3, r2
 8010c8e:	b2c9      	uxtb	r1, r1
 8010c90:	4a13      	ldr	r2, [pc, #76]	; (8010ce0 <ssd1306_DrawPixel+0xbc>)
 8010c92:	54d1      	strb	r1, [r2, r3]
 8010c94:	e01d      	b.n	8010cd2 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8010c96:	79fa      	ldrb	r2, [r7, #7]
 8010c98:	79bb      	ldrb	r3, [r7, #6]
 8010c9a:	08db      	lsrs	r3, r3, #3
 8010c9c:	b2d8      	uxtb	r0, r3
 8010c9e:	4603      	mov	r3, r0
 8010ca0:	01db      	lsls	r3, r3, #7
 8010ca2:	4413      	add	r3, r2
 8010ca4:	4a0e      	ldr	r2, [pc, #56]	; (8010ce0 <ssd1306_DrawPixel+0xbc>)
 8010ca6:	5cd3      	ldrb	r3, [r2, r3]
 8010ca8:	b25a      	sxtb	r2, r3
 8010caa:	79bb      	ldrb	r3, [r7, #6]
 8010cac:	f003 0307 	and.w	r3, r3, #7
 8010cb0:	2101      	movs	r1, #1
 8010cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8010cb6:	b25b      	sxtb	r3, r3
 8010cb8:	43db      	mvns	r3, r3
 8010cba:	b25b      	sxtb	r3, r3
 8010cbc:	4013      	ands	r3, r2
 8010cbe:	b259      	sxtb	r1, r3
 8010cc0:	79fa      	ldrb	r2, [r7, #7]
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	01db      	lsls	r3, r3, #7
 8010cc6:	4413      	add	r3, r2
 8010cc8:	b2c9      	uxtb	r1, r1
 8010cca:	4a05      	ldr	r2, [pc, #20]	; (8010ce0 <ssd1306_DrawPixel+0xbc>)
 8010ccc:	54d1      	strb	r1, [r2, r3]
 8010cce:	e000      	b.n	8010cd2 <ssd1306_DrawPixel+0xae>
        return;
 8010cd0:	bf00      	nop
    }
}
 8010cd2:	370c      	adds	r7, #12
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cda:	4770      	bx	lr
 8010cdc:	20005128 	.word	0x20005128
 8010ce0:	20004f28 	.word	0x20004f28

08010ce4 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8010ce4:	b590      	push	{r4, r7, lr}
 8010ce6:	b089      	sub	sp, #36	; 0x24
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	4604      	mov	r4, r0
 8010cec:	1d38      	adds	r0, r7, #4
 8010cee:	e880 0006 	stmia.w	r0, {r1, r2}
 8010cf2:	461a      	mov	r2, r3
 8010cf4:	4623      	mov	r3, r4
 8010cf6:	73fb      	strb	r3, [r7, #15]
 8010cf8:	4613      	mov	r3, r2
 8010cfa:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8010cfc:	7bfb      	ldrb	r3, [r7, #15]
 8010cfe:	2b1f      	cmp	r3, #31
 8010d00:	d902      	bls.n	8010d08 <ssd1306_WriteChar+0x24>
 8010d02:	7bfb      	ldrb	r3, [r7, #15]
 8010d04:	2b7e      	cmp	r3, #126	; 0x7e
 8010d06:	d901      	bls.n	8010d0c <ssd1306_WriteChar+0x28>
        return 0;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	e06d      	b.n	8010de8 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8010d0c:	4b38      	ldr	r3, [pc, #224]	; (8010df0 <ssd1306_WriteChar+0x10c>)
 8010d0e:	881b      	ldrh	r3, [r3, #0]
 8010d10:	461a      	mov	r2, r3
 8010d12:	793b      	ldrb	r3, [r7, #4]
 8010d14:	4413      	add	r3, r2
 8010d16:	2b80      	cmp	r3, #128	; 0x80
 8010d18:	dc06      	bgt.n	8010d28 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8010d1a:	4b35      	ldr	r3, [pc, #212]	; (8010df0 <ssd1306_WriteChar+0x10c>)
 8010d1c:	885b      	ldrh	r3, [r3, #2]
 8010d1e:	461a      	mov	r2, r3
 8010d20:	797b      	ldrb	r3, [r7, #5]
 8010d22:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8010d24:	2b20      	cmp	r3, #32
 8010d26:	dd01      	ble.n	8010d2c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8010d28:	2300      	movs	r3, #0
 8010d2a:	e05d      	b.n	8010de8 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	61fb      	str	r3, [r7, #28]
 8010d30:	e04c      	b.n	8010dcc <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8010d32:	68ba      	ldr	r2, [r7, #8]
 8010d34:	7bfb      	ldrb	r3, [r7, #15]
 8010d36:	3b20      	subs	r3, #32
 8010d38:	7979      	ldrb	r1, [r7, #5]
 8010d3a:	fb01 f303 	mul.w	r3, r1, r3
 8010d3e:	4619      	mov	r1, r3
 8010d40:	69fb      	ldr	r3, [r7, #28]
 8010d42:	440b      	add	r3, r1
 8010d44:	005b      	lsls	r3, r3, #1
 8010d46:	4413      	add	r3, r2
 8010d48:	881b      	ldrh	r3, [r3, #0]
 8010d4a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	61bb      	str	r3, [r7, #24]
 8010d50:	e034      	b.n	8010dbc <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8010d52:	697a      	ldr	r2, [r7, #20]
 8010d54:	69bb      	ldr	r3, [r7, #24]
 8010d56:	fa02 f303 	lsl.w	r3, r2, r3
 8010d5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d012      	beq.n	8010d88 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8010d62:	4b23      	ldr	r3, [pc, #140]	; (8010df0 <ssd1306_WriteChar+0x10c>)
 8010d64:	881b      	ldrh	r3, [r3, #0]
 8010d66:	b2da      	uxtb	r2, r3
 8010d68:	69bb      	ldr	r3, [r7, #24]
 8010d6a:	b2db      	uxtb	r3, r3
 8010d6c:	4413      	add	r3, r2
 8010d6e:	b2d8      	uxtb	r0, r3
 8010d70:	4b1f      	ldr	r3, [pc, #124]	; (8010df0 <ssd1306_WriteChar+0x10c>)
 8010d72:	885b      	ldrh	r3, [r3, #2]
 8010d74:	b2da      	uxtb	r2, r3
 8010d76:	69fb      	ldr	r3, [r7, #28]
 8010d78:	b2db      	uxtb	r3, r3
 8010d7a:	4413      	add	r3, r2
 8010d7c:	b2db      	uxtb	r3, r3
 8010d7e:	7bba      	ldrb	r2, [r7, #14]
 8010d80:	4619      	mov	r1, r3
 8010d82:	f7ff ff4f 	bl	8010c24 <ssd1306_DrawPixel>
 8010d86:	e016      	b.n	8010db6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8010d88:	4b19      	ldr	r3, [pc, #100]	; (8010df0 <ssd1306_WriteChar+0x10c>)
 8010d8a:	881b      	ldrh	r3, [r3, #0]
 8010d8c:	b2da      	uxtb	r2, r3
 8010d8e:	69bb      	ldr	r3, [r7, #24]
 8010d90:	b2db      	uxtb	r3, r3
 8010d92:	4413      	add	r3, r2
 8010d94:	b2d8      	uxtb	r0, r3
 8010d96:	4b16      	ldr	r3, [pc, #88]	; (8010df0 <ssd1306_WriteChar+0x10c>)
 8010d98:	885b      	ldrh	r3, [r3, #2]
 8010d9a:	b2da      	uxtb	r2, r3
 8010d9c:	69fb      	ldr	r3, [r7, #28]
 8010d9e:	b2db      	uxtb	r3, r3
 8010da0:	4413      	add	r3, r2
 8010da2:	b2d9      	uxtb	r1, r3
 8010da4:	7bbb      	ldrb	r3, [r7, #14]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	bf0c      	ite	eq
 8010daa:	2301      	moveq	r3, #1
 8010dac:	2300      	movne	r3, #0
 8010dae:	b2db      	uxtb	r3, r3
 8010db0:	461a      	mov	r2, r3
 8010db2:	f7ff ff37 	bl	8010c24 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8010db6:	69bb      	ldr	r3, [r7, #24]
 8010db8:	3301      	adds	r3, #1
 8010dba:	61bb      	str	r3, [r7, #24]
 8010dbc:	793b      	ldrb	r3, [r7, #4]
 8010dbe:	461a      	mov	r2, r3
 8010dc0:	69bb      	ldr	r3, [r7, #24]
 8010dc2:	4293      	cmp	r3, r2
 8010dc4:	d3c5      	bcc.n	8010d52 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8010dc6:	69fb      	ldr	r3, [r7, #28]
 8010dc8:	3301      	adds	r3, #1
 8010dca:	61fb      	str	r3, [r7, #28]
 8010dcc:	797b      	ldrb	r3, [r7, #5]
 8010dce:	461a      	mov	r2, r3
 8010dd0:	69fb      	ldr	r3, [r7, #28]
 8010dd2:	4293      	cmp	r3, r2
 8010dd4:	d3ad      	bcc.n	8010d32 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8010dd6:	4b06      	ldr	r3, [pc, #24]	; (8010df0 <ssd1306_WriteChar+0x10c>)
 8010dd8:	881a      	ldrh	r2, [r3, #0]
 8010dda:	793b      	ldrb	r3, [r7, #4]
 8010ddc:	b29b      	uxth	r3, r3
 8010dde:	4413      	add	r3, r2
 8010de0:	b29a      	uxth	r2, r3
 8010de2:	4b03      	ldr	r3, [pc, #12]	; (8010df0 <ssd1306_WriteChar+0x10c>)
 8010de4:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8010de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010de8:	4618      	mov	r0, r3
 8010dea:	3724      	adds	r7, #36	; 0x24
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd90      	pop	{r4, r7, pc}
 8010df0:	20005128 	.word	0x20005128

08010df4 <ssd1306_WriteString>:
    }

    // Everything ok
    return *str;
}
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color) {
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b084      	sub	sp, #16
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	60f8      	str	r0, [r7, #12]
 8010dfc:	1d38      	adds	r0, r7, #4
 8010dfe:	e880 0006 	stmia.w	r0, {r1, r2}
 8010e02:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8010e04:	e012      	b.n	8010e2c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	7818      	ldrb	r0, [r3, #0]
 8010e0a:	78fb      	ldrb	r3, [r7, #3]
 8010e0c:	1d3a      	adds	r2, r7, #4
 8010e0e:	ca06      	ldmia	r2, {r1, r2}
 8010e10:	f7ff ff68 	bl	8010ce4 <ssd1306_WriteChar>
 8010e14:	4603      	mov	r3, r0
 8010e16:	461a      	mov	r2, r3
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	781b      	ldrb	r3, [r3, #0]
 8010e1c:	429a      	cmp	r2, r3
 8010e1e:	d002      	beq.n	8010e26 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	781b      	ldrb	r3, [r3, #0]
 8010e24:	e008      	b.n	8010e38 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	3301      	adds	r3, #1
 8010e2a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	781b      	ldrb	r3, [r3, #0]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d1e8      	bne.n	8010e06 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	781b      	ldrb	r3, [r3, #0]
}
 8010e38:	4618      	mov	r0, r3
 8010e3a:	3710      	adds	r7, #16
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}

08010e40 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8010e40:	b480      	push	{r7}
 8010e42:	b083      	sub	sp, #12
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	4603      	mov	r3, r0
 8010e48:	460a      	mov	r2, r1
 8010e4a:	71fb      	strb	r3, [r7, #7]
 8010e4c:	4613      	mov	r3, r2
 8010e4e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8010e50:	79fb      	ldrb	r3, [r7, #7]
 8010e52:	b29a      	uxth	r2, r3
 8010e54:	4b05      	ldr	r3, [pc, #20]	; (8010e6c <ssd1306_SetCursor+0x2c>)
 8010e56:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8010e58:	79bb      	ldrb	r3, [r7, #6]
 8010e5a:	b29a      	uxth	r2, r3
 8010e5c:	4b03      	ldr	r3, [pc, #12]	; (8010e6c <ssd1306_SetCursor+0x2c>)
 8010e5e:	805a      	strh	r2, [r3, #2]
}
 8010e60:	bf00      	nop
 8010e62:	370c      	adds	r7, #12
 8010e64:	46bd      	mov	sp, r7
 8010e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6a:	4770      	bx	lr
 8010e6c:	20005128 	.word	0x20005128

08010e70 <ssd1306_GetCursorX>:

uint8_t ssd1306_GetCursorX(void)
{
 8010e70:	b480      	push	{r7}
 8010e72:	af00      	add	r7, sp, #0
	return SSD1306.CurrentX;
 8010e74:	4b03      	ldr	r3, [pc, #12]	; (8010e84 <ssd1306_GetCursorX+0x14>)
 8010e76:	881b      	ldrh	r3, [r3, #0]
 8010e78:	b2db      	uxtb	r3, r3
}
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e82:	4770      	bx	lr
 8010e84:	20005128 	.word	0x20005128

08010e88 <ssd1306_GetCursorY>:
uint8_t ssd1306_GetCursorY(void)
{
 8010e88:	b480      	push	{r7}
 8010e8a:	af00      	add	r7, sp, #0
	return SSD1306.CurrentY;
 8010e8c:	4b03      	ldr	r3, [pc, #12]	; (8010e9c <ssd1306_GetCursorY+0x14>)
 8010e8e:	885b      	ldrh	r3, [r3, #2]
 8010e90:	b2db      	uxtb	r3, r3
}
 8010e92:	4618      	mov	r0, r3
 8010e94:	46bd      	mov	sp, r7
 8010e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9a:	4770      	bx	lr
 8010e9c:	20005128 	.word	0x20005128

08010ea0 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8010ea0:	b590      	push	{r4, r7, lr}
 8010ea2:	b089      	sub	sp, #36	; 0x24
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	4604      	mov	r4, r0
 8010ea8:	4608      	mov	r0, r1
 8010eaa:	4611      	mov	r1, r2
 8010eac:	461a      	mov	r2, r3
 8010eae:	4623      	mov	r3, r4
 8010eb0:	71fb      	strb	r3, [r7, #7]
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	71bb      	strb	r3, [r7, #6]
 8010eb6:	460b      	mov	r3, r1
 8010eb8:	717b      	strb	r3, [r7, #5]
 8010eba:	4613      	mov	r3, r2
 8010ebc:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8010ebe:	797a      	ldrb	r2, [r7, #5]
 8010ec0:	79fb      	ldrb	r3, [r7, #7]
 8010ec2:	1ad3      	subs	r3, r2, r3
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	bfb8      	it	lt
 8010ec8:	425b      	neglt	r3, r3
 8010eca:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8010ecc:	793a      	ldrb	r2, [r7, #4]
 8010ece:	79bb      	ldrb	r3, [r7, #6]
 8010ed0:	1ad3      	subs	r3, r2, r3
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	bfb8      	it	lt
 8010ed6:	425b      	neglt	r3, r3
 8010ed8:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8010eda:	79fa      	ldrb	r2, [r7, #7]
 8010edc:	797b      	ldrb	r3, [r7, #5]
 8010ede:	429a      	cmp	r2, r3
 8010ee0:	d201      	bcs.n	8010ee6 <ssd1306_Line+0x46>
 8010ee2:	2301      	movs	r3, #1
 8010ee4:	e001      	b.n	8010eea <ssd1306_Line+0x4a>
 8010ee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010eea:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8010eec:	79ba      	ldrb	r2, [r7, #6]
 8010eee:	793b      	ldrb	r3, [r7, #4]
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	d201      	bcs.n	8010ef8 <ssd1306_Line+0x58>
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	e001      	b.n	8010efc <ssd1306_Line+0x5c>
 8010ef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010efc:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 8010efe:	69ba      	ldr	r2, [r7, #24]
 8010f00:	697b      	ldr	r3, [r7, #20]
 8010f02:	1ad3      	subs	r3, r2, r3
 8010f04:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 8010f06:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8010f0a:	7939      	ldrb	r1, [r7, #4]
 8010f0c:	797b      	ldrb	r3, [r7, #5]
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7ff fe88 	bl	8010c24 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8010f14:	e024      	b.n	8010f60 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8010f16:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8010f1a:	79b9      	ldrb	r1, [r7, #6]
 8010f1c:	79fb      	ldrb	r3, [r7, #7]
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7ff fe80 	bl	8010c24 <ssd1306_DrawPixel>
    error2 = error * 2;
 8010f24:	69fb      	ldr	r3, [r7, #28]
 8010f26:	005b      	lsls	r3, r3, #1
 8010f28:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 8010f2a:	697b      	ldr	r3, [r7, #20]
 8010f2c:	425b      	negs	r3, r3
 8010f2e:	68ba      	ldr	r2, [r7, #8]
 8010f30:	429a      	cmp	r2, r3
 8010f32:	dd08      	ble.n	8010f46 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8010f34:	69fa      	ldr	r2, [r7, #28]
 8010f36:	697b      	ldr	r3, [r7, #20]
 8010f38:	1ad3      	subs	r3, r2, r3
 8010f3a:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8010f3c:	693b      	ldr	r3, [r7, #16]
 8010f3e:	b2da      	uxtb	r2, r3
 8010f40:	79fb      	ldrb	r3, [r7, #7]
 8010f42:	4413      	add	r3, r2
 8010f44:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 8010f46:	68ba      	ldr	r2, [r7, #8]
 8010f48:	69bb      	ldr	r3, [r7, #24]
 8010f4a:	429a      	cmp	r2, r3
 8010f4c:	da08      	bge.n	8010f60 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 8010f4e:	69fa      	ldr	r2, [r7, #28]
 8010f50:	69bb      	ldr	r3, [r7, #24]
 8010f52:	4413      	add	r3, r2
 8010f54:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	b2da      	uxtb	r2, r3
 8010f5a:	79bb      	ldrb	r3, [r7, #6]
 8010f5c:	4413      	add	r3, r2
 8010f5e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8010f60:	79fa      	ldrb	r2, [r7, #7]
 8010f62:	797b      	ldrb	r3, [r7, #5]
 8010f64:	429a      	cmp	r2, r3
 8010f66:	d1d6      	bne.n	8010f16 <ssd1306_Line+0x76>
 8010f68:	79ba      	ldrb	r2, [r7, #6]
 8010f6a:	793b      	ldrb	r3, [r7, #4]
 8010f6c:	429a      	cmp	r2, r3
 8010f6e:	d1d2      	bne.n	8010f16 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8010f70:	bf00      	nop
}
 8010f72:	3724      	adds	r7, #36	; 0x24
 8010f74:	46bd      	mov	sp, r7
 8010f76:	bd90      	pop	{r4, r7, pc}

08010f78 <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8010f78:	b590      	push	{r4, r7, lr}
 8010f7a:	b085      	sub	sp, #20
 8010f7c:	af02      	add	r7, sp, #8
 8010f7e:	4604      	mov	r4, r0
 8010f80:	4608      	mov	r0, r1
 8010f82:	4611      	mov	r1, r2
 8010f84:	461a      	mov	r2, r3
 8010f86:	4623      	mov	r3, r4
 8010f88:	71fb      	strb	r3, [r7, #7]
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	71bb      	strb	r3, [r7, #6]
 8010f8e:	460b      	mov	r3, r1
 8010f90:	717b      	strb	r3, [r7, #5]
 8010f92:	4613      	mov	r3, r2
 8010f94:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 8010f96:	79bc      	ldrb	r4, [r7, #6]
 8010f98:	797a      	ldrb	r2, [r7, #5]
 8010f9a:	79b9      	ldrb	r1, [r7, #6]
 8010f9c:	79f8      	ldrb	r0, [r7, #7]
 8010f9e:	7e3b      	ldrb	r3, [r7, #24]
 8010fa0:	9300      	str	r3, [sp, #0]
 8010fa2:	4623      	mov	r3, r4
 8010fa4:	f7ff ff7c 	bl	8010ea0 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8010fa8:	793c      	ldrb	r4, [r7, #4]
 8010faa:	797a      	ldrb	r2, [r7, #5]
 8010fac:	79b9      	ldrb	r1, [r7, #6]
 8010fae:	7978      	ldrb	r0, [r7, #5]
 8010fb0:	7e3b      	ldrb	r3, [r7, #24]
 8010fb2:	9300      	str	r3, [sp, #0]
 8010fb4:	4623      	mov	r3, r4
 8010fb6:	f7ff ff73 	bl	8010ea0 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 8010fba:	793c      	ldrb	r4, [r7, #4]
 8010fbc:	79fa      	ldrb	r2, [r7, #7]
 8010fbe:	7939      	ldrb	r1, [r7, #4]
 8010fc0:	7978      	ldrb	r0, [r7, #5]
 8010fc2:	7e3b      	ldrb	r3, [r7, #24]
 8010fc4:	9300      	str	r3, [sp, #0]
 8010fc6:	4623      	mov	r3, r4
 8010fc8:	f7ff ff6a 	bl	8010ea0 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 8010fcc:	79bc      	ldrb	r4, [r7, #6]
 8010fce:	79fa      	ldrb	r2, [r7, #7]
 8010fd0:	7939      	ldrb	r1, [r7, #4]
 8010fd2:	79f8      	ldrb	r0, [r7, #7]
 8010fd4:	7e3b      	ldrb	r3, [r7, #24]
 8010fd6:	9300      	str	r3, [sp, #0]
 8010fd8:	4623      	mov	r3, r4
 8010fda:	f7ff ff61 	bl	8010ea0 <ssd1306_Line>

  return;
 8010fde:	bf00      	nop
}
 8010fe0:	370c      	adds	r7, #12
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd90      	pop	{r4, r7, pc}

08010fe6 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8010fe6:	b580      	push	{r7, lr}
 8010fe8:	b084      	sub	sp, #16
 8010fea:	af00      	add	r7, sp, #0
 8010fec:	4603      	mov	r3, r0
 8010fee:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8010ff0:	2381      	movs	r3, #129	; 0x81
 8010ff2:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8010ff4:	7bfb      	ldrb	r3, [r7, #15]
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	f7ff fca2 	bl	8010940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8010ffc:	79fb      	ldrb	r3, [r7, #7]
 8010ffe:	4618      	mov	r0, r3
 8011000:	f7ff fc9e 	bl	8010940 <ssd1306_WriteCommand>
}
 8011004:	bf00      	nop
 8011006:	3710      	adds	r7, #16
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}

0801100c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 801100c:	b580      	push	{r7, lr}
 801100e:	b084      	sub	sp, #16
 8011010:	af00      	add	r7, sp, #0
 8011012:	4603      	mov	r3, r0
 8011014:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8011016:	79fb      	ldrb	r3, [r7, #7]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d005      	beq.n	8011028 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 801101c:	23af      	movs	r3, #175	; 0xaf
 801101e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8011020:	4b08      	ldr	r3, [pc, #32]	; (8011044 <ssd1306_SetDisplayOn+0x38>)
 8011022:	2201      	movs	r2, #1
 8011024:	719a      	strb	r2, [r3, #6]
 8011026:	e004      	b.n	8011032 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8011028:	23ae      	movs	r3, #174	; 0xae
 801102a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 801102c:	4b05      	ldr	r3, [pc, #20]	; (8011044 <ssd1306_SetDisplayOn+0x38>)
 801102e:	2200      	movs	r2, #0
 8011030:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8011032:	7bfb      	ldrb	r3, [r7, #15]
 8011034:	4618      	mov	r0, r3
 8011036:	f7ff fc83 	bl	8010940 <ssd1306_WriteCommand>
}
 801103a:	bf00      	nop
 801103c:	3710      	adds	r7, #16
 801103e:	46bd      	mov	sp, r7
 8011040:	bd80      	pop	{r7, pc}
 8011042:	bf00      	nop
 8011044:	20005128 	.word	0x20005128

08011048 <itm_debug1>:
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b086      	sub	sp, #24
 801104c:	af02      	add	r7, sp, #8
 801104e:	60f8      	str	r0, [r7, #12]
 8011050:	60b9      	str	r1, [r7, #8]
 8011052:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8011054:	4b08      	ldr	r3, [pc, #32]	; (8011078 <itm_debug1+0x30>)
 8011056:	681a      	ldr	r2, [r3, #0]
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	4013      	ands	r3, r2
 801105c:	2b00      	cmp	r3, #0
 801105e:	d007      	beq.n	8011070 <itm_debug1+0x28>
 8011060:	2301      	movs	r3, #1
 8011062:	9300      	str	r3, [sp, #0]
 8011064:	2300      	movs	r3, #0
 8011066:	2200      	movs	r2, #0
 8011068:	6879      	ldr	r1, [r7, #4]
 801106a:	68b8      	ldr	r0, [r7, #8]
 801106c:	f007 fc02 	bl	8018874 <_itm_debug3>
}
 8011070:	bf00      	nop
 8011072:	3710      	adds	r7, #16
 8011074:	46bd      	mov	sp, r7
 8011076:	bd80      	pop	{r7, pc}
 8011078:	20000574 	.word	0x20000574

0801107c <itm_debug2>:
{
 801107c:	b580      	push	{r7, lr}
 801107e:	b086      	sub	sp, #24
 8011080:	af02      	add	r7, sp, #8
 8011082:	60f8      	str	r0, [r7, #12]
 8011084:	60b9      	str	r1, [r7, #8]
 8011086:	607a      	str	r2, [r7, #4]
 8011088:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 801108a:	4b09      	ldr	r3, [pc, #36]	; (80110b0 <itm_debug2+0x34>)
 801108c:	681a      	ldr	r2, [r3, #0]
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	4013      	ands	r3, r2
 8011092:	2b00      	cmp	r3, #0
 8011094:	d007      	beq.n	80110a6 <itm_debug2+0x2a>
 8011096:	2302      	movs	r3, #2
 8011098:	9300      	str	r3, [sp, #0]
 801109a:	2300      	movs	r3, #0
 801109c:	683a      	ldr	r2, [r7, #0]
 801109e:	6879      	ldr	r1, [r7, #4]
 80110a0:	68b8      	ldr	r0, [r7, #8]
 80110a2:	f007 fbe7 	bl	8018874 <_itm_debug3>
}
 80110a6:	bf00      	nop
 80110a8:	3710      	adds	r7, #16
 80110aa:	46bd      	mov	sp, r7
 80110ac:	bd80      	pop	{r7, pc}
 80110ae:	bf00      	nop
 80110b0:	20000574 	.word	0x20000574

080110b4 <itm_debug3>:
static inline void itm_debug3(uint32_t f, const char *msg, int v1, int v2, int v3)
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b086      	sub	sp, #24
 80110b8:	af02      	add	r7, sp, #8
 80110ba:	60f8      	str	r0, [r7, #12]
 80110bc:	60b9      	str	r1, [r7, #8]
 80110be:	607a      	str	r2, [r7, #4]
 80110c0:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 80110c2:	4b09      	ldr	r3, [pc, #36]	; (80110e8 <itm_debug3+0x34>)
 80110c4:	681a      	ldr	r2, [r3, #0]
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	4013      	ands	r3, r2
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d007      	beq.n	80110de <itm_debug3+0x2a>
 80110ce:	2303      	movs	r3, #3
 80110d0:	9300      	str	r3, [sp, #0]
 80110d2:	69bb      	ldr	r3, [r7, #24]
 80110d4:	683a      	ldr	r2, [r7, #0]
 80110d6:	6879      	ldr	r1, [r7, #4]
 80110d8:	68b8      	ldr	r0, [r7, #8]
 80110da:	f007 fbcb 	bl	8018874 <_itm_debug3>
}
 80110de:	bf00      	nop
 80110e0:	3710      	adds	r7, #16
 80110e2:	46bd      	mov	sp, r7
 80110e4:	bd80      	pop	{r7, pc}
 80110e6:	bf00      	nop
 80110e8:	20000574 	.word	0x20000574

080110ec <mqf_write_from_canton>:
#define CMD_TURNOUT_A		0x31
#define CMD_TURNOUT_B		0x32


LFMQUEUE_DEF_H(to_canton, msg_64_t)
LFMQUEUE_DEF_H(from_canton, msg_64_t)
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b082      	sub	sp, #8
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
 80110f4:	6879      	ldr	r1, [r7, #4]
 80110f6:	4804      	ldr	r0, [pc, #16]	; (8011108 <mqf_write_from_canton+0x1c>)
 80110f8:	f007 fcc2 	bl	8018a80 <mqf_write>
 80110fc:	4603      	mov	r3, r0
 80110fe:	4618      	mov	r0, r3
 8011100:	3708      	adds	r7, #8
 8011102:	46bd      	mov	sp, r7
 8011104:	bd80      	pop	{r7, pc}
 8011106:	bf00      	nop
 8011108:	200004dc 	.word	0x200004dc

0801110c <mqf_read_to_ctrl>:
/* from upper */
#define CMD_SET_TARGET_SPEED 0x10
#define CMD_SET_C1_C2		 0x11


LFMQUEUE_DEF_H(to_ctrl, msg_64_t)
 801110c:	b580      	push	{r7, lr}
 801110e:	b082      	sub	sp, #8
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
 8011114:	6879      	ldr	r1, [r7, #4]
 8011116:	4804      	ldr	r0, [pc, #16]	; (8011128 <mqf_read_to_ctrl+0x1c>)
 8011118:	f007 fd2c 	bl	8018b74 <mqf_read>
 801111c:	4603      	mov	r3, r0
 801111e:	4618      	mov	r0, r3
 8011120:	3708      	adds	r7, #8
 8011122:	46bd      	mov	sp, r7
 8011124:	bd80      	pop	{r7, pc}
 8011126:	bf00      	nop
 8011128:	20000530 	.word	0x20000530

0801112c <bkpoint>:
#ifndef INA3221_TASKRD
#error hu?
#endif

static void bkpoint(int loc, int err)
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b082      	sub	sp, #8
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
 8011134:	6039      	str	r1, [r7, #0]
	itm_debug2(DBG_ERR|DBG_INA3221, "INA ERR", loc, err);
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	687a      	ldr	r2, [r7, #4]
 801113a:	4904      	ldr	r1, [pc, #16]	; (801114c <bkpoint+0x20>)
 801113c:	4804      	ldr	r0, [pc, #16]	; (8011150 <bkpoint+0x24>)
 801113e:	f7ff ff9d 	bl	801107c <itm_debug2>
}
 8011142:	bf00      	nop
 8011144:	3708      	adds	r7, #8
 8011146:	46bd      	mov	sp, r7
 8011148:	bd80      	pop	{r7, pc}
 801114a:	bf00      	nop
 801114c:	08018fac 	.word	0x08018fac
 8011150:	80000020 	.word	0x80000020

08011154 <run_ina_task>:
static void handle_ina_notif(uint32_t notif);

static 	ina_state_t state = state_idle;

static void run_ina_task(void)
{
 8011154:	b580      	push	{r7, lr}
 8011156:	b086      	sub	sp, #24
 8011158:	af00      	add	r7, sp, #0
	ina3221_init_and_configure();
 801115a:	f000 fd9f 	bl	8011c9c <ina3221_init_and_configure>
	_UNUSED_ int nstuck = 0;
 801115e:	2300      	movs	r3, #0
 8011160:	617b      	str	r3, [r7, #20]
	for (;;) {
		uint32_t notif = 0;
 8011162:	2300      	movs	r3, #0
 8011164:	60fb      	str	r3, [r7, #12]
		xTaskNotifyWait(0, 0xFFFFFFFF, &notif, portMAX_DELAY);
 8011166:	f107 020c 	add.w	r2, r7, #12
 801116a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801116e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011172:	2000      	movs	r0, #0
 8011174:	f7fd fdfc 	bl	800ed70 <xTaskNotifyWait>
		handle_ina_notif(notif);
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	4618      	mov	r0, r3
 801117c:	f000 f828 	bl	80111d0 <handle_ina_notif>

		for (;;) {
			msg_64_t m;
			int rc = mqf_read_to_ctrl(&m);
 8011180:	463b      	mov	r3, r7
 8011182:	4618      	mov	r0, r3
 8011184:	f7ff ffc2 	bl	801110c <mqf_read_to_ctrl>
 8011188:	6138      	str	r0, [r7, #16]
			if (rc) break;
 801118a:	693b      	ldr	r3, [r7, #16]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d000      	beq.n	8011192 <run_ina_task+0x3e>
	for (;;) {
 8011190:	e7e7      	b.n	8011162 <run_ina_task+0xe>
			switch (m.cmd) {
 8011192:	78bb      	ldrb	r3, [r7, #2]
 8011194:	2bfc      	cmp	r3, #252	; 0xfc
 8011196:	d004      	beq.n	80111a2 <run_ina_task+0x4e>
 8011198:	2bfc      	cmp	r3, #252	; 0xfc
 801119a:	db10      	blt.n	80111be <run_ina_task+0x6a>
 801119c:	3bfe      	subs	r3, #254	; 0xfe
 801119e:	2b01      	cmp	r3, #1
					testerAddr = m.from;
				}
				continue;
				break;
			default:
				break;
 80111a0:	e00d      	b.n	80111be <run_ina_task+0x6a>
				if (run_mode != m.v1u) {
 80111a2:	4b09      	ldr	r3, [pc, #36]	; (80111c8 <run_ina_task+0x74>)
 80111a4:	781b      	ldrb	r3, [r3, #0]
 80111a6:	b29a      	uxth	r2, r3
 80111a8:	88bb      	ldrh	r3, [r7, #4]
 80111aa:	429a      	cmp	r2, r3
 80111ac:	d009      	beq.n	80111c2 <run_ina_task+0x6e>
					run_mode = m.v1u;
 80111ae:	88bb      	ldrh	r3, [r7, #4]
 80111b0:	b2da      	uxtb	r2, r3
 80111b2:	4b05      	ldr	r3, [pc, #20]	; (80111c8 <run_ina_task+0x74>)
 80111b4:	701a      	strb	r2, [r3, #0]
					testerAddr = m.from;
 80111b6:	787a      	ldrb	r2, [r7, #1]
 80111b8:	4b04      	ldr	r3, [pc, #16]	; (80111cc <run_ina_task+0x78>)
 80111ba:	701a      	strb	r2, [r3, #0]
				continue;
 80111bc:	e001      	b.n	80111c2 <run_ina_task+0x6e>
				break;
 80111be:	bf00      	nop
 80111c0:	e7de      	b.n	8011180 <run_ina_task+0x2c>
				continue;
 80111c2:	bf00      	nop
		for (;;) {
 80111c4:	e7dc      	b.n	8011180 <run_ina_task+0x2c>
 80111c6:	bf00      	nop
 80111c8:	20005130 	.word	0x20005130
 80111cc:	20005131 	.word	0x20005131

080111d0 <handle_ina_notif>:
		}
	}
}

static void handle_ina_notif(uint32_t notif)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b088      	sub	sp, #32
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
				continue;
			}
		}
#endif // INA3221_CONTIUNOUS
	}
	if (notif & NOTIF_INA_WRCOMPL) {
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	f003 0310 	and.w	r3, r3, #16
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d035      	beq.n	801124e <handle_ina_notif+0x7e>
		itm_debug1(DBG_INA3221, "WRcpl", state);
 80111e2:	4b74      	ldr	r3, [pc, #464]	; (80113b4 <handle_ina_notif+0x1e4>)
 80111e4:	781b      	ldrb	r3, [r3, #0]
 80111e6:	461a      	mov	r2, r3
 80111e8:	4973      	ldr	r1, [pc, #460]	; (80113b8 <handle_ina_notif+0x1e8>)
 80111ea:	2020      	movs	r0, #32
 80111ec:	f7ff ff2c 	bl	8011048 <itm_debug1>
		if ((state >= state_trig_0) && (state <= state_trig_3)) {
 80111f0:	4b70      	ldr	r3, [pc, #448]	; (80113b4 <handle_ina_notif+0x1e4>)
 80111f2:	781b      	ldrb	r3, [r3, #0]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d023      	beq.n	8011240 <handle_ina_notif+0x70>
 80111f8:	4b6e      	ldr	r3, [pc, #440]	; (80113b4 <handle_ina_notif+0x1e4>)
 80111fa:	781b      	ldrb	r3, [r3, #0]
 80111fc:	2b04      	cmp	r3, #4
 80111fe:	d81f      	bhi.n	8011240 <handle_ina_notif+0x70>
			int dev = state - state_trig_0;
 8011200:	4b6c      	ldr	r3, [pc, #432]	; (80113b4 <handle_ina_notif+0x1e4>)
 8011202:	781b      	ldrb	r3, [r3, #0]
 8011204:	3b01      	subs	r3, #1
 8011206:	61fb      	str	r3, [r7, #28]
			dev = _next_dev(dev);
 8011208:	69f8      	ldr	r0, [r7, #28]
 801120a:	f000 f8e3 	bl	80113d4 <_next_dev>
 801120e:	61f8      	str	r0, [r7, #28]
			if (dev >= 0) {
 8011210:	69fb      	ldr	r3, [r7, #28]
 8011212:	2b00      	cmp	r3, #0
 8011214:	db10      	blt.n	8011238 <handle_ina_notif+0x68>
				state = dev + state_trig_0;
 8011216:	69fb      	ldr	r3, [r7, #28]
 8011218:	b2db      	uxtb	r3, r3
 801121a:	3301      	adds	r3, #1
 801121c:	b2da      	uxtb	r2, r3
 801121e:	4b65      	ldr	r3, [pc, #404]	; (80113b4 <handle_ina_notif+0x1e4>)
 8011220:	701a      	strb	r2, [r3, #0]
				rc = _trig(dev);
 8011222:	69f8      	ldr	r0, [r7, #28]
 8011224:	f000 f8f6 	bl	8011414 <_trig>
 8011228:	61b8      	str	r0, [r7, #24]
				if (rc) {
 801122a:	69bb      	ldr	r3, [r7, #24]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d00d      	beq.n	801124c <handle_ina_notif+0x7c>
					state = state_idle;
 8011230:	4b60      	ldr	r3, [pc, #384]	; (80113b4 <handle_ina_notif+0x1e4>)
 8011232:	2200      	movs	r2, #0
 8011234:	701a      	strb	r2, [r3, #0]
					return;
 8011236:	e0b9      	b.n	80113ac <handle_ina_notif+0x1dc>
				}
			} else {
#if INA3221_TASKRD
state = state_idle;
 8011238:	4b5e      	ldr	r3, [pc, #376]	; (80113b4 <handle_ina_notif+0x1e4>)
 801123a:	2200      	movs	r2, #0
 801123c:	701a      	strb	r2, [r3, #0]
		if ((state >= state_trig_0) && (state <= state_trig_3)) {
 801123e:	e005      	b.n	801124c <handle_ina_notif+0x7c>
                        _read_complete(0);
                        state = state_idle;
                    }
                }*/
		} else {
			bkpoint(1,1000);
 8011240:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011244:	2001      	movs	r0, #1
 8011246:	f7ff ff71 	bl	801112c <bkpoint>
 801124a:	e000      	b.n	801124e <handle_ina_notif+0x7e>
		if ((state >= state_trig_0) && (state <= state_trig_3)) {
 801124c:	bf00      	nop
		}
	}
	if (notif & NOTIF_INA_READ) {
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	f003 0308 	and.w	r3, r3, #8
 8011254:	2b00      	cmp	r3, #0
 8011256:	d01c      	beq.n	8011292 <handle_ina_notif+0xc2>
#if INA3221_TASKRD
#if INA3221_CHECKCONV
		state = state_chk_cvrf;
		_read_cvrf();
#else
		int dev = _next_dev(-1);
 8011258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801125c:	f000 f8ba 	bl	80113d4 <_next_dev>
 8011260:	6178      	str	r0, [r7, #20]
		if (dev >= 0) {
 8011262:	697b      	ldr	r3, [r7, #20]
 8011264:	2b00      	cmp	r3, #0
 8011266:	db0e      	blt.n	8011286 <handle_ina_notif+0xb6>
			state = state_rd_0 + dev * 3;
 8011268:	697b      	ldr	r3, [r7, #20]
 801126a:	b2db      	uxtb	r3, r3
 801126c:	461a      	mov	r2, r3
 801126e:	0052      	lsls	r2, r2, #1
 8011270:	4413      	add	r3, r2
 8011272:	b2db      	uxtb	r3, r3
 8011274:	3305      	adds	r3, #5
 8011276:	b2da      	uxtb	r2, r3
 8011278:	4b4e      	ldr	r3, [pc, #312]	; (80113b4 <handle_ina_notif+0x1e4>)
 801127a:	701a      	strb	r2, [r3, #0]
			_reg_read(dev, 0);
 801127c:	2100      	movs	r1, #0
 801127e:	6978      	ldr	r0, [r7, #20]
 8011280:	f000 f8f4 	bl	801146c <_reg_read>
 8011284:	e005      	b.n	8011292 <handle_ina_notif+0xc2>
		} else {
			_read_complete(0);
 8011286:	2000      	movs	r0, #0
 8011288:	f000 f95a 	bl	8011540 <_read_complete>
			state = state_idle;
 801128c:	4b49      	ldr	r3, [pc, #292]	; (80113b4 <handle_ina_notif+0x1e4>)
 801128e:	2200      	movs	r2, #0
 8011290:	701a      	strb	r2, [r3, #0]
		}

#endif
#endif
	}
	if (notif & NOTIF_INA_RDCOMPL) {
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	f003 0320 	and.w	r3, r3, #32
 8011298:	2b00      	cmp	r3, #0
 801129a:	d055      	beq.n	8011348 <handle_ina_notif+0x178>
		itm_debug1(DBG_INA3221, "RDcpl", state);
 801129c:	4b45      	ldr	r3, [pc, #276]	; (80113b4 <handle_ina_notif+0x1e4>)
 801129e:	781b      	ldrb	r3, [r3, #0]
 80112a0:	461a      	mov	r2, r3
 80112a2:	4946      	ldr	r1, [pc, #280]	; (80113bc <handle_ina_notif+0x1ec>)
 80112a4:	2020      	movs	r0, #32
 80112a6:	f7ff fecf 	bl	8011048 <itm_debug1>
				_read_cvrf();
			}
#else
		if (0) {
#endif
		} else if ((state >= state_rd_0) && (state <= state_rd_11)) {
 80112aa:	4b42      	ldr	r3, [pc, #264]	; (80113b4 <handle_ina_notif+0x1e4>)
 80112ac:	781b      	ldrb	r3, [r3, #0]
 80112ae:	2b04      	cmp	r3, #4
 80112b0:	d945      	bls.n	801133e <handle_ina_notif+0x16e>
 80112b2:	4b40      	ldr	r3, [pc, #256]	; (80113b4 <handle_ina_notif+0x1e4>)
 80112b4:	781b      	ldrb	r3, [r3, #0]
 80112b6:	2b10      	cmp	r3, #16
 80112b8:	d841      	bhi.n	801133e <handle_ina_notif+0x16e>
			int reg = (state - state_rd_0) % 3;
 80112ba:	4b3e      	ldr	r3, [pc, #248]	; (80113b4 <handle_ina_notif+0x1e4>)
 80112bc:	781b      	ldrb	r3, [r3, #0]
 80112be:	1f5a      	subs	r2, r3, #5
 80112c0:	4b3f      	ldr	r3, [pc, #252]	; (80113c0 <handle_ina_notif+0x1f0>)
 80112c2:	fb83 3102 	smull	r3, r1, r3, r2
 80112c6:	17d3      	asrs	r3, r2, #31
 80112c8:	1ac9      	subs	r1, r1, r3
 80112ca:	460b      	mov	r3, r1
 80112cc:	005b      	lsls	r3, r3, #1
 80112ce:	440b      	add	r3, r1
 80112d0:	1ad3      	subs	r3, r2, r3
 80112d2:	613b      	str	r3, [r7, #16]
			int dev = (state - state_rd_0) / 3;
 80112d4:	4b37      	ldr	r3, [pc, #220]	; (80113b4 <handle_ina_notif+0x1e4>)
 80112d6:	781b      	ldrb	r3, [r3, #0]
 80112d8:	3b05      	subs	r3, #5
 80112da:	4a39      	ldr	r2, [pc, #228]	; (80113c0 <handle_ina_notif+0x1f0>)
 80112dc:	fb82 1203 	smull	r1, r2, r2, r3
 80112e0:	17db      	asrs	r3, r3, #31
 80112e2:	1ad3      	subs	r3, r2, r3
 80112e4:	60fb      	str	r3, [r7, #12]
			if (reg==2){
 80112e6:	693b      	ldr	r3, [r7, #16]
 80112e8:	2b02      	cmp	r3, #2
 80112ea:	d11b      	bne.n	8011324 <handle_ina_notif+0x154>
				dev = _next_dev(dev);
 80112ec:	68f8      	ldr	r0, [r7, #12]
 80112ee:	f000 f871 	bl	80113d4 <_next_dev>
 80112f2:	60f8      	str	r0, [r7, #12]
				if (dev >= 0) {
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	db0d      	blt.n	8011316 <handle_ina_notif+0x146>
					state = (state_rd_0 + dev) * 3;
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	3305      	adds	r3, #5
 80112fe:	b2db      	uxtb	r3, r3
 8011300:	461a      	mov	r2, r3
 8011302:	0052      	lsls	r2, r2, #1
 8011304:	4413      	add	r3, r2
 8011306:	b2da      	uxtb	r2, r3
 8011308:	4b2a      	ldr	r3, [pc, #168]	; (80113b4 <handle_ina_notif+0x1e4>)
 801130a:	701a      	strb	r2, [r3, #0]
					_reg_read(dev, 0);
 801130c:	2100      	movs	r1, #0
 801130e:	68f8      	ldr	r0, [r7, #12]
 8011310:	f000 f8ac 	bl	801146c <_reg_read>
		} else if ((state >= state_rd_0) && (state <= state_rd_11)) {
 8011314:	e018      	b.n	8011348 <handle_ina_notif+0x178>
				} else {
					_read_complete(0);
 8011316:	2000      	movs	r0, #0
 8011318:	f000 f912 	bl	8011540 <_read_complete>
					state = state_idle;
 801131c:	4b25      	ldr	r3, [pc, #148]	; (80113b4 <handle_ina_notif+0x1e4>)
 801131e:	2200      	movs	r2, #0
 8011320:	701a      	strb	r2, [r3, #0]
		} else if ((state >= state_rd_0) && (state <= state_rd_11)) {
 8011322:	e011      	b.n	8011348 <handle_ina_notif+0x178>
				}
			} else {
				state++;
 8011324:	4b23      	ldr	r3, [pc, #140]	; (80113b4 <handle_ina_notif+0x1e4>)
 8011326:	781b      	ldrb	r3, [r3, #0]
 8011328:	3301      	adds	r3, #1
 801132a:	b2da      	uxtb	r2, r3
 801132c:	4b21      	ldr	r3, [pc, #132]	; (80113b4 <handle_ina_notif+0x1e4>)
 801132e:	701a      	strb	r2, [r3, #0]
				_reg_read(dev, reg+1);
 8011330:	693b      	ldr	r3, [r7, #16]
 8011332:	3301      	adds	r3, #1
 8011334:	4619      	mov	r1, r3
 8011336:	68f8      	ldr	r0, [r7, #12]
 8011338:	f000 f898 	bl	801146c <_reg_read>
		} else if ((state >= state_rd_0) && (state <= state_rd_11)) {
 801133c:	e004      	b.n	8011348 <handle_ina_notif+0x178>
			}
		} else {
			bkpoint(2,1000);
 801133e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011342:	2002      	movs	r0, #2
 8011344:	f7ff fef2 	bl	801112c <bkpoint>
		}
	}
	if (notif & NOTIF_INA_ERR) {
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801134e:	2b00      	cmp	r3, #0
 8011350:	d02c      	beq.n	80113ac <handle_ina_notif+0x1dc>
		bkpoint(3, lastErr);
 8011352:	4b1c      	ldr	r3, [pc, #112]	; (80113c4 <handle_ina_notif+0x1f4>)
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	4619      	mov	r1, r3
 8011358:	2003      	movs	r0, #3
 801135a:	f7ff fee7 	bl	801112c <bkpoint>
		if ((state >= state_rd_0) && (state <= state_rd_11)) {
 801135e:	4b15      	ldr	r3, [pc, #84]	; (80113b4 <handle_ina_notif+0x1e4>)
 8011360:	781b      	ldrb	r3, [r3, #0]
 8011362:	2b04      	cmp	r3, #4
 8011364:	d907      	bls.n	8011376 <handle_ina_notif+0x1a6>
 8011366:	4b13      	ldr	r3, [pc, #76]	; (80113b4 <handle_ina_notif+0x1e4>)
 8011368:	781b      	ldrb	r3, [r3, #0]
 801136a:	2b10      	cmp	r3, #16
 801136c:	d803      	bhi.n	8011376 <handle_ina_notif+0x1a6>
			// write error
			// TODO
			state = state_idle;
 801136e:	4b11      	ldr	r3, [pc, #68]	; (80113b4 <handle_ina_notif+0x1e4>)
 8011370:	2200      	movs	r2, #0
 8011372:	701a      	strb	r2, [r3, #0]
 8011374:	e010      	b.n	8011398 <handle_ina_notif+0x1c8>
		} else if ((state >= state_trig_0) && (state <= state_trig_3)) {
 8011376:	4b0f      	ldr	r3, [pc, #60]	; (80113b4 <handle_ina_notif+0x1e4>)
 8011378:	781b      	ldrb	r3, [r3, #0]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d007      	beq.n	801138e <handle_ina_notif+0x1be>
 801137e:	4b0d      	ldr	r3, [pc, #52]	; (80113b4 <handle_ina_notif+0x1e4>)
 8011380:	781b      	ldrb	r3, [r3, #0]
 8011382:	2b04      	cmp	r3, #4
 8011384:	d803      	bhi.n	801138e <handle_ina_notif+0x1be>
			// read error
			// TODO
			state = state_idle;
 8011386:	4b0b      	ldr	r3, [pc, #44]	; (80113b4 <handle_ina_notif+0x1e4>)
 8011388:	2200      	movs	r2, #0
 801138a:	701a      	strb	r2, [r3, #0]
 801138c:	e004      	b.n	8011398 <handle_ina_notif+0x1c8>
		} else {
			bkpoint(3,1000);
 801138e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011392:	2003      	movs	r0, #3
 8011394:	f7ff feca 	bl	801112c <bkpoint>
		}
		itm_debug1(DBG_INA3221|DBG_ERR, "i2c rst", lastErr);
 8011398:	4b0a      	ldr	r3, [pc, #40]	; (80113c4 <handle_ina_notif+0x1f4>)
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	461a      	mov	r2, r3
 801139e:	490a      	ldr	r1, [pc, #40]	; (80113c8 <handle_ina_notif+0x1f8>)
 80113a0:	480a      	ldr	r0, [pc, #40]	; (80113cc <handle_ina_notif+0x1fc>)
 80113a2:	f7ff fe51 	bl	8011048 <itm_debug1>
		HAL_I2C_Init(&INA3221_I2C_PORT);
 80113a6:	480a      	ldr	r0, [pc, #40]	; (80113d0 <handle_ina_notif+0x200>)
 80113a8:	f7f1 ff4e 	bl	8003248 <HAL_I2C_Init>
	}
}
 80113ac:	3720      	adds	r7, #32
 80113ae:	46bd      	mov	sp, r7
 80113b0:	bd80      	pop	{r7, pc}
 80113b2:	bf00      	nop
 80113b4:	2000517c 	.word	0x2000517c
 80113b8:	08018fb4 	.word	0x08018fb4
 80113bc:	08018fbc 	.word	0x08018fbc
 80113c0:	55555556 	.word	0x55555556
 80113c4:	20005174 	.word	0x20005174
 80113c8:	08018fc4 	.word	0x08018fc4
 80113cc:	80000020 	.word	0x80000020
 80113d0:	200055f4 	.word	0x200055f4

080113d4 <_next_dev>:




static int _next_dev(int dev)
{
 80113d4:	b480      	push	{r7}
 80113d6:	b083      	sub	sp, #12
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
	dev = dev+1;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	3301      	adds	r3, #1
 80113e0:	607b      	str	r3, [r7, #4]
	for (;dev<=3;dev++) {
 80113e2:	e00a      	b.n	80113fa <_next_dev+0x26>
		if (ina3221_devices[dev]) return dev;
 80113e4:	4a0a      	ldr	r2, [pc, #40]	; (8011410 <_next_dev+0x3c>)
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	4413      	add	r3, r2
 80113ea:	781b      	ldrb	r3, [r3, #0]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d001      	beq.n	80113f4 <_next_dev+0x20>
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	e007      	b.n	8011404 <_next_dev+0x30>
	for (;dev<=3;dev++) {
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	3301      	adds	r3, #1
 80113f8:	607b      	str	r3, [r7, #4]
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	2b03      	cmp	r3, #3
 80113fe:	ddf1      	ble.n	80113e4 <_next_dev+0x10>
	}
	return -1;
 8011400:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011404:	4618      	mov	r0, r3
 8011406:	370c      	adds	r7, #12
 8011408:	46bd      	mov	sp, r7
 801140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140e:	4770      	bx	lr
 8011410:	20005134 	.word	0x20005134

08011414 <_trig>:


static int  _trig(int dev)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b084      	sub	sp, #16
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
	if (disable_ina3221) return 0;
 801141c:	4b0f      	ldr	r3, [pc, #60]	; (801145c <_trig+0x48>)
 801141e:	781b      	ldrb	r3, [r3, #0]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d001      	beq.n	8011428 <_trig+0x14>
 8011424:	2300      	movs	r3, #0
 8011426:	e014      	b.n	8011452 <_trig+0x3e>
	cvrf_dev = dev;
 8011428:	4a0d      	ldr	r2, [pc, #52]	; (8011460 <_trig+0x4c>)
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6013      	str	r3, [r2, #0]
	int addr = 0x40 + dev;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	3340      	adds	r3, #64	; 0x40
 8011432:	60fb      	str	r3, [r7, #12]
	itm_debug2(DBG_INA3221, "TRIG", dev, addr);
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	687a      	ldr	r2, [r7, #4]
 8011438:	490a      	ldr	r1, [pc, #40]	; (8011464 <_trig+0x50>)
 801143a:	2020      	movs	r0, #32
 801143c:	f7ff fe1e 	bl	801107c <itm_debug2>
	return ina3221_write16it(addr, INA3221_REG_CONFIG, ina_conf_val);
 8011440:	4b09      	ldr	r3, [pc, #36]	; (8011468 <_trig+0x54>)
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	b29b      	uxth	r3, r3
 8011446:	461a      	mov	r2, r3
 8011448:	2100      	movs	r1, #0
 801144a:	68f8      	ldr	r0, [r7, #12]
 801144c:	f000 fa68 	bl	8011920 <ina3221_write16it>
 8011450:	4603      	mov	r3, r0
}
 8011452:	4618      	mov	r0, r3
 8011454:	3710      	adds	r7, #16
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}
 801145a:	bf00      	nop
 801145c:	2000513a 	.word	0x2000513a
 8011460:	20005178 	.word	0x20005178
 8011464:	08018fcc 	.word	0x08018fcc
 8011468:	20005140 	.word	0x20005140

0801146c <_reg_read>:
static void _reg_read(int dev, int nreg)
{
 801146c:	b590      	push	{r4, r7, lr}
 801146e:	b089      	sub	sp, #36	; 0x24
 8011470:	af02      	add	r7, sp, #8
 8011472:	6078      	str	r0, [r7, #4]
 8011474:	6039      	str	r1, [r7, #0]
	int addr = 0x40 + dev;
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	3340      	adds	r3, #64	; 0x40
 801147a:	613b      	str	r3, [r7, #16]
	int hwreg;
	switch (nreg) {
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	2b01      	cmp	r3, #1
 8011480:	d006      	beq.n	8011490 <_reg_read+0x24>
 8011482:	2b02      	cmp	r3, #2
 8011484:	d007      	beq.n	8011496 <_reg_read+0x2a>
 8011486:	2b00      	cmp	r3, #0
 8011488:	d108      	bne.n	801149c <_reg_read+0x30>
	case 0: hwreg = INA3221_REG_CH1_SHUNTVOLT; break;
 801148a:	2301      	movs	r3, #1
 801148c:	617b      	str	r3, [r7, #20]
 801148e:	e00b      	b.n	80114a8 <_reg_read+0x3c>
	case 1: hwreg = INA3221_REG_CH2_SHUNTVOLT; break;
 8011490:	2303      	movs	r3, #3
 8011492:	617b      	str	r3, [r7, #20]
 8011494:	e008      	b.n	80114a8 <_reg_read+0x3c>
	case 2: hwreg = INA3221_REG_CH3_SHUNTVOLT; break;
 8011496:	2305      	movs	r3, #5
 8011498:	617b      	str	r3, [r7, #20]
 801149a:	e005      	b.n	80114a8 <_reg_read+0x3c>
	default:
		itm_debug1(DBG_ERR|DBG_INA3221, "hu?", nreg);
 801149c:	683a      	ldr	r2, [r7, #0]
 801149e:	4921      	ldr	r1, [pc, #132]	; (8011524 <_reg_read+0xb8>)
 80114a0:	4821      	ldr	r0, [pc, #132]	; (8011528 <_reg_read+0xbc>)
 80114a2:	f7ff fdd1 	bl	8011048 <itm_debug1>
		return;
 80114a6:	e039      	b.n	801151c <_reg_read+0xb0>
	}
	itm_debug3(DBG_INA3221, "gns read", dev, nreg, hwreg);
 80114a8:	697b      	ldr	r3, [r7, #20]
 80114aa:	9300      	str	r3, [sp, #0]
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	687a      	ldr	r2, [r7, #4]
 80114b0:	491e      	ldr	r1, [pc, #120]	; (801152c <_reg_read+0xc0>)
 80114b2:	2020      	movs	r0, #32
 80114b4:	f7ff fdfe 	bl	80110b4 <itm_debug3>
	HAL_StatusTypeDef status;

	if (__HAL_I2C_GET_FLAG(&INA3221_I2C_PORT, I2C_FLAG_BUSY) != RESET) {
 80114b8:	4b1d      	ldr	r3, [pc, #116]	; (8011530 <_reg_read+0xc4>)
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	699b      	ldr	r3, [r3, #24]
 80114be:	f003 0302 	and.w	r3, r3, #2
 80114c2:	2b02      	cmp	r3, #2
 80114c4:	d105      	bne.n	80114d2 <_reg_read+0x66>
		itm_debug1(DBG_ERR|DBG_INA3221, "busy", 0);
 80114c6:	2200      	movs	r2, #0
 80114c8:	491a      	ldr	r1, [pc, #104]	; (8011534 <_reg_read+0xc8>)
 80114ca:	4817      	ldr	r0, [pc, #92]	; (8011528 <_reg_read+0xbc>)
 80114cc:	f7ff fdbc 	bl	8011048 <itm_debug1>
		// TODO _end_next_reg(1);
		return;
 80114d0:	e024      	b.n	801151c <_reg_read+0xb0>
	}

	status = HAL_I2C_Mem_Read_IT(&INA3221_I2C_PORT, addr<<1, hwreg, I2C_MEMADD_SIZE_8BIT,
 80114d2:	693b      	ldr	r3, [r7, #16]
 80114d4:	b29b      	uxth	r3, r3
 80114d6:	005b      	lsls	r3, r3, #1
 80114d8:	b298      	uxth	r0, r3
 80114da:	697b      	ldr	r3, [r7, #20]
 80114dc:	b29c      	uxth	r4, r3
 80114de:	4b16      	ldr	r3, [pc, #88]	; (8011538 <_reg_read+0xcc>)
 80114e0:	6819      	ldr	r1, [r3, #0]
			(uint8_t *)&cur_values[dev*3+nreg], 2);
 80114e2:	687a      	ldr	r2, [r7, #4]
 80114e4:	4613      	mov	r3, r2
 80114e6:	005b      	lsls	r3, r3, #1
 80114e8:	441a      	add	r2, r3
 80114ea:	683b      	ldr	r3, [r7, #0]
 80114ec:	4413      	add	r3, r2
 80114ee:	005b      	lsls	r3, r3, #1
 80114f0:	440b      	add	r3, r1
	status = HAL_I2C_Mem_Read_IT(&INA3221_I2C_PORT, addr<<1, hwreg, I2C_MEMADD_SIZE_8BIT,
 80114f2:	2202      	movs	r2, #2
 80114f4:	9201      	str	r2, [sp, #4]
 80114f6:	9300      	str	r3, [sp, #0]
 80114f8:	2301      	movs	r3, #1
 80114fa:	4622      	mov	r2, r4
 80114fc:	4601      	mov	r1, r0
 80114fe:	480c      	ldr	r0, [pc, #48]	; (8011530 <_reg_read+0xc4>)
 8011500:	f7f2 fafa 	bl	8003af8 <HAL_I2C_Mem_Read_IT>
 8011504:	4603      	mov	r3, r0
 8011506:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8011508:	7bfb      	ldrb	r3, [r7, #15]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d006      	beq.n	801151c <_reg_read+0xb0>
		itm_debug1(DBG_INA3221|DBG_ERR, "readit", status);
 801150e:	7bfb      	ldrb	r3, [r7, #15]
 8011510:	461a      	mov	r2, r3
 8011512:	490a      	ldr	r1, [pc, #40]	; (801153c <_reg_read+0xd0>)
 8011514:	4804      	ldr	r0, [pc, #16]	; (8011528 <_reg_read+0xbc>)
 8011516:	f7ff fd97 	bl	8011048 <itm_debug1>
		// TODO
		return;
 801151a:	bf00      	nop
	}
}
 801151c:	371c      	adds	r7, #28
 801151e:	46bd      	mov	sp, r7
 8011520:	bd90      	pop	{r4, r7, pc}
 8011522:	bf00      	nop
 8011524:	08018fd4 	.word	0x08018fd4
 8011528:	80000020 	.word	0x80000020
 801152c:	08018fd8 	.word	0x08018fd8
 8011530:	200055f4 	.word	0x200055f4
 8011534:	08018fe4 	.word	0x08018fe4
 8011538:	2000019c 	.word	0x2000019c
 801153c:	08018fec 	.word	0x08018fec

08011540 <_read_complete>:
	return 0;
}
#endif

static void _read_complete(_UNUSED_ int err)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b08c      	sub	sp, #48	; 0x30
 8011544:	af02      	add	r7, sp, #8
 8011546:	6078      	str	r0, [r7, #4]
	uint16_t *valu = (uint16_t *) cur_values;
 8011548:	4b3d      	ldr	r3, [pc, #244]	; (8011640 <_read_complete+0x100>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	61fb      	str	r3, [r7, #28]
	int16_t  *vals = (int16_t *) cur_values;
 801154e:	4b3c      	ldr	r3, [pc, #240]	; (8011640 <_read_complete+0x100>)
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	61bb      	str	r3, [r7, #24]
	static int8_t presence[INA3221_NUM_VALS] = {0};
	for (int i = 0; i<INA3221_NUM_VALS; i++) {
 8011554:	2300      	movs	r3, #0
 8011556:	627b      	str	r3, [r7, #36]	; 0x24
 8011558:	e066      	b.n	8011628 <_read_complete+0xe8>
		valu[i] = __builtin_bswap16(valu[i]);
 801155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801155c:	005b      	lsls	r3, r3, #1
 801155e:	69fa      	ldr	r2, [r7, #28]
 8011560:	4413      	add	r3, r2
 8011562:	881a      	ldrh	r2, [r3, #0]
 8011564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011566:	005b      	lsls	r3, r3, #1
 8011568:	69f9      	ldr	r1, [r7, #28]
 801156a:	440b      	add	r3, r1
 801156c:	ba52      	rev16	r2, r2
 801156e:	b292      	uxth	r2, r2
 8011570:	801a      	strh	r2, [r3, #0]
		itm_debug2(DBG_INA3221, "ina val", i, vals[i]);
 8011572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011574:	005b      	lsls	r3, r3, #1
 8011576:	69ba      	ldr	r2, [r7, #24]
 8011578:	4413      	add	r3, r2
 801157a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801157e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011580:	4930      	ldr	r1, [pc, #192]	; (8011644 <_read_complete+0x104>)
 8011582:	2020      	movs	r0, #32
 8011584:	f7ff fd7a 	bl	801107c <itm_debug2>

		int p = (abs(vals[i])>1000) ? 1 : 0;
 8011588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801158a:	005b      	lsls	r3, r3, #1
 801158c:	69ba      	ldr	r2, [r7, #24]
 801158e:	4413      	add	r3, r2
 8011590:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011594:	2b00      	cmp	r3, #0
 8011596:	bfb8      	it	lt
 8011598:	425b      	neglt	r3, r3
 801159a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801159e:	bfcc      	ite	gt
 80115a0:	2301      	movgt	r3, #1
 80115a2:	2300      	movle	r3, #0
 80115a4:	b2db      	uxtb	r3, r3
 80115a6:	623b      	str	r3, [r7, #32]
		if (p == presence[i]) continue;
 80115a8:	4a27      	ldr	r2, [pc, #156]	; (8011648 <_read_complete+0x108>)
 80115aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ac:	4413      	add	r3, r2
 80115ae:	f993 3000 	ldrsb.w	r3, [r3]
 80115b2:	461a      	mov	r2, r3
 80115b4:	6a3b      	ldr	r3, [r7, #32]
 80115b6:	4293      	cmp	r3, r2
 80115b8:	d032      	beq.n	8011620 <_read_complete+0xe0>
		presence[i] = p;
 80115ba:	6a3b      	ldr	r3, [r7, #32]
 80115bc:	b259      	sxtb	r1, r3
 80115be:	4a22      	ldr	r2, [pc, #136]	; (8011648 <_read_complete+0x108>)
 80115c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115c2:	4413      	add	r3, r2
 80115c4:	460a      	mov	r2, r1
 80115c6:	701a      	strb	r2, [r3, #0]
		itm_debug3(DBG_INA3221|DBG_PRES, "PRSCH", i,p, vals[i]);
 80115c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ca:	005b      	lsls	r3, r3, #1
 80115cc:	69ba      	ldr	r2, [r7, #24]
 80115ce:	4413      	add	r3, r2
 80115d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80115d4:	9300      	str	r3, [sp, #0]
 80115d6:	6a3b      	ldr	r3, [r7, #32]
 80115d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115da:	491c      	ldr	r1, [pc, #112]	; (801164c <_read_complete+0x10c>)
 80115dc:	2060      	movs	r0, #96	; 0x60
 80115de:	f7ff fd69 	bl	80110b4 <itm_debug3>
		// notify change
		msg_64_t m;
		m.from = MA_CANTON(localBoardNum, 0);
 80115e2:	4b1b      	ldr	r3, [pc, #108]	; (8011650 <_read_complete+0x110>)
 80115e4:	781b      	ldrb	r3, [r3, #0]
 80115e6:	00db      	lsls	r3, r3, #3
 80115e8:	b2db      	uxtb	r3, r3
 80115ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80115ee:	b2db      	uxtb	r3, r3
 80115f0:	747b      	strb	r3, [r7, #17]
		m.to = MA_CONTROL();
 80115f2:	23d7      	movs	r3, #215	; 0xd7
 80115f4:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_PRESENCE_CHANGE;
 80115f6:	2312      	movs	r3, #18
 80115f8:	74bb      	strb	r3, [r7, #18]
		m.sub = i;
 80115fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115fc:	b2db      	uxtb	r3, r3
 80115fe:	74fb      	strb	r3, [r7, #19]
		m.v1u = p;
 8011600:	6a3b      	ldr	r3, [r7, #32]
 8011602:	b29b      	uxth	r3, r3
 8011604:	82bb      	strh	r3, [r7, #20]
		m.v2 = vals[i];
 8011606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011608:	005b      	lsls	r3, r3, #1
 801160a:	69ba      	ldr	r2, [r7, #24]
 801160c:	4413      	add	r3, r2
 801160e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011612:	82fb      	strh	r3, [r7, #22]
		mqf_write_from_canton(&m);
 8011614:	f107 0310 	add.w	r3, r7, #16
 8011618:	4618      	mov	r0, r3
 801161a:	f7ff fd67 	bl	80110ec <mqf_write_from_canton>
 801161e:	e000      	b.n	8011622 <_read_complete+0xe2>
		if (p == presence[i]) continue;
 8011620:	bf00      	nop
	for (int i = 0; i<INA3221_NUM_VALS; i++) {
 8011622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011624:	3301      	adds	r3, #1
 8011626:	627b      	str	r3, [r7, #36]	; 0x24
 8011628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801162a:	2b0b      	cmp	r3, #11
 801162c:	dd95      	ble.n	801155a <_read_complete+0x1a>
	}

	static int cnt=0;
	cnt++;
 801162e:	4b09      	ldr	r3, [pc, #36]	; (8011654 <_read_complete+0x114>)
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	3301      	adds	r3, #1
 8011634:	4a07      	ldr	r2, [pc, #28]	; (8011654 <_read_complete+0x114>)
 8011636:	6013      	str	r3, [r2, #0]
		m.to = MA_UI(1);
		m.cmd = CMD_INA3221_REPORT;
		m.v32u = (uint32_t) v;
		mqf_write_from_canton(&m);
	}
}
 8011638:	bf00      	nop
 801163a:	3728      	adds	r7, #40	; 0x28
 801163c:	46bd      	mov	sp, r7
 801163e:	bd80      	pop	{r7, pc}
 8011640:	2000019c 	.word	0x2000019c
 8011644:	08018ff4 	.word	0x08018ff4
 8011648:	20005180 	.word	0x20005180
 801164c:	08018ffc 	.word	0x08018ffc
 8011650:	200053a5 	.word	0x200053a5
 8011654:	2000518c 	.word	0x2000518c

08011658 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(_UNUSED_ I2C_HandleTypeDef *hi2c)
{
 8011658:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 801165c:	b08a      	sub	sp, #40	; 0x28
 801165e:	af02      	add	r7, sp, #8
 8011660:	6078      	str	r0, [r7, #4]
	BEGIN_ISR
 8011662:	f004 f941 	bl	80158e8 <GetCycleCount64>
 8011666:	4603      	mov	r3, r0
 8011668:	460c      	mov	r4, r1
 801166a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	BaseType_t higher=0;
 801166e:	2300      	movs	r3, #0
 8011670:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(ina3221_taskHandle, NOTIF_INA_WRCOMPL, eSetBits, &higher);
 8011672:	4b1b      	ldr	r3, [pc, #108]	; (80116e0 <HAL_I2C_MemTxCpltCallback+0x88>)
 8011674:	6818      	ldr	r0, [r3, #0]
 8011676:	f107 030c 	add.w	r3, r7, #12
 801167a:	9300      	str	r3, [sp, #0]
 801167c:	2300      	movs	r3, #0
 801167e:	2201      	movs	r2, #1
 8011680:	2110      	movs	r1, #16
 8011682:	f7fd fbcf 	bl	800ee24 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d007      	beq.n	801169c <HAL_I2C_MemTxCpltCallback+0x44>
 801168c:	4b15      	ldr	r3, [pc, #84]	; (80116e4 <HAL_I2C_MemTxCpltCallback+0x8c>)
 801168e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011692:	601a      	str	r2, [r3, #0]
 8011694:	f3bf 8f4f 	dsb	sy
 8011698:	f3bf 8f6f 	isb	sy
	END_ISR;
 801169c:	f004 f924 	bl	80158e8 <GetCycleCount64>
 80116a0:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80116a4:	e9d7 bc04 	ldrd	fp, ip, [r7, #16]
 80116a8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80116ac:	460b      	mov	r3, r1
 80116ae:	4614      	mov	r4, r2
 80116b0:	ebb3 030b 	subs.w	r3, r3, fp
 80116b4:	eb64 040c 	sbc.w	r4, r4, ip
 80116b8:	f64b 3180 	movw	r1, #48000	; 0xbb80
 80116bc:	f04f 0200 	mov.w	r2, #0
 80116c0:	42a2      	cmp	r2, r4
 80116c2:	bf08      	it	eq
 80116c4:	4299      	cmpeq	r1, r3
 80116c6:	d206      	bcs.n	80116d6 <HAL_I2C_MemTxCpltCallback+0x7e>
 80116c8:	69ba      	ldr	r2, [r7, #24]
 80116ca:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80116ce:	1ad3      	subs	r3, r2, r3
 80116d0:	4618      	mov	r0, r3
 80116d2:	f004 f8f7 	bl	80158c4 <long_isr>
}
 80116d6:	bf00      	nop
 80116d8:	3720      	adds	r7, #32
 80116da:	46bd      	mov	sp, r7
 80116dc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80116e0:	20006d04 	.word	0x20006d04
 80116e4:	e000ed04 	.word	0xe000ed04

080116e8 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(_UNUSED_ I2C_HandleTypeDef *hi2c)
{
 80116e8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80116ec:	b08a      	sub	sp, #40	; 0x28
 80116ee:	af02      	add	r7, sp, #8
 80116f0:	6078      	str	r0, [r7, #4]
	BEGIN_ISR
 80116f2:	f004 f8f9 	bl	80158e8 <GetCycleCount64>
 80116f6:	4603      	mov	r3, r0
 80116f8:	460c      	mov	r4, r1
 80116fa:	e9c7 3404 	strd	r3, r4, [r7, #16]
	BaseType_t higher=0;
 80116fe:	2300      	movs	r3, #0
 8011700:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(ina3221_taskHandle, NOTIF_INA_RDCOMPL, eSetBits, &higher);
 8011702:	4b1b      	ldr	r3, [pc, #108]	; (8011770 <HAL_I2C_MemRxCpltCallback+0x88>)
 8011704:	6818      	ldr	r0, [r3, #0]
 8011706:	f107 030c 	add.w	r3, r7, #12
 801170a:	9300      	str	r3, [sp, #0]
 801170c:	2300      	movs	r3, #0
 801170e:	2201      	movs	r2, #1
 8011710:	2120      	movs	r1, #32
 8011712:	f7fd fb87 	bl	800ee24 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d007      	beq.n	801172c <HAL_I2C_MemRxCpltCallback+0x44>
 801171c:	4b15      	ldr	r3, [pc, #84]	; (8011774 <HAL_I2C_MemRxCpltCallback+0x8c>)
 801171e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011722:	601a      	str	r2, [r3, #0]
 8011724:	f3bf 8f4f 	dsb	sy
 8011728:	f3bf 8f6f 	isb	sy
	END_ISR;
 801172c:	f004 f8dc 	bl	80158e8 <GetCycleCount64>
 8011730:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8011734:	e9d7 bc04 	ldrd	fp, ip, [r7, #16]
 8011738:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801173c:	460b      	mov	r3, r1
 801173e:	4614      	mov	r4, r2
 8011740:	ebb3 030b 	subs.w	r3, r3, fp
 8011744:	eb64 040c 	sbc.w	r4, r4, ip
 8011748:	f64b 3180 	movw	r1, #48000	; 0xbb80
 801174c:	f04f 0200 	mov.w	r2, #0
 8011750:	42a2      	cmp	r2, r4
 8011752:	bf08      	it	eq
 8011754:	4299      	cmpeq	r1, r3
 8011756:	d206      	bcs.n	8011766 <HAL_I2C_MemRxCpltCallback+0x7e>
 8011758:	69ba      	ldr	r2, [r7, #24]
 801175a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801175e:	1ad3      	subs	r3, r2, r3
 8011760:	4618      	mov	r0, r3
 8011762:	f004 f8af 	bl	80158c4 <long_isr>
}
 8011766:	bf00      	nop
 8011768:	3720      	adds	r7, #32
 801176a:	46bd      	mov	sp, r7
 801176c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8011770:	20006d04 	.word	0x20006d04
 8011774:	e000ed04 	.word	0xe000ed04

08011778 <HAL_I2C_ErrorCallback>:



void HAL_I2C_ErrorCallback(_UNUSED_ I2C_HandleTypeDef *hi2c)
{
 8011778:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 801177c:	b08a      	sub	sp, #40	; 0x28
 801177e:	af02      	add	r7, sp, #8
 8011780:	6078      	str	r0, [r7, #4]
	BEGIN_ISR
 8011782:	f004 f8b1 	bl	80158e8 <GetCycleCount64>
 8011786:	4603      	mov	r3, r0
 8011788:	460c      	mov	r4, r1
 801178a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	lastErr = hi2c->ErrorCode;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011792:	461a      	mov	r2, r3
 8011794:	4b1d      	ldr	r3, [pc, #116]	; (801180c <HAL_I2C_ErrorCallback+0x94>)
 8011796:	601a      	str	r2, [r3, #0]
	BaseType_t higher=0;
 8011798:	2300      	movs	r3, #0
 801179a:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(ina3221_taskHandle, NOTIF_INA_ERR, eSetBits, &higher);
 801179c:	4b1c      	ldr	r3, [pc, #112]	; (8011810 <HAL_I2C_ErrorCallback+0x98>)
 801179e:	6818      	ldr	r0, [r3, #0]
 80117a0:	f107 030c 	add.w	r3, r7, #12
 80117a4:	9300      	str	r3, [sp, #0]
 80117a6:	2300      	movs	r3, #0
 80117a8:	2201      	movs	r2, #1
 80117aa:	2140      	movs	r1, #64	; 0x40
 80117ac:	f7fd fb3a 	bl	800ee24 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d007      	beq.n	80117c6 <HAL_I2C_ErrorCallback+0x4e>
 80117b6:	4b17      	ldr	r3, [pc, #92]	; (8011814 <HAL_I2C_ErrorCallback+0x9c>)
 80117b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117bc:	601a      	str	r2, [r3, #0]
 80117be:	f3bf 8f4f 	dsb	sy
 80117c2:	f3bf 8f6f 	isb	sy
	END_ISR;
 80117c6:	f004 f88f 	bl	80158e8 <GetCycleCount64>
 80117ca:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80117ce:	e9d7 bc04 	ldrd	fp, ip, [r7, #16]
 80117d2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80117d6:	460b      	mov	r3, r1
 80117d8:	4614      	mov	r4, r2
 80117da:	ebb3 030b 	subs.w	r3, r3, fp
 80117de:	eb64 040c 	sbc.w	r4, r4, ip
 80117e2:	f64b 3180 	movw	r1, #48000	; 0xbb80
 80117e6:	f04f 0200 	mov.w	r2, #0
 80117ea:	42a2      	cmp	r2, r4
 80117ec:	bf08      	it	eq
 80117ee:	4299      	cmpeq	r1, r3
 80117f0:	d206      	bcs.n	8011800 <HAL_I2C_ErrorCallback+0x88>
 80117f2:	69ba      	ldr	r2, [r7, #24]
 80117f4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80117f8:	1ad3      	subs	r3, r2, r3
 80117fa:	4618      	mov	r0, r3
 80117fc:	f004 f862 	bl	80158c4 <long_isr>
}
 8011800:	bf00      	nop
 8011802:	3720      	adds	r7, #32
 8011804:	46bd      	mov	sp, r7
 8011806:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 801180a:	bf00      	nop
 801180c:	20005174 	.word	0x20005174
 8011810:	20006d04 	.word	0x20006d04
 8011814:	e000ed04 	.word	0xe000ed04

08011818 <ina3221_read16>:

// ----------------------------------------------------------------------------------


static uint16_t ina3221_read16(int a, int reg)
{
 8011818:	b580      	push	{r7, lr}
 801181a:	b088      	sub	sp, #32
 801181c:	af04      	add	r7, sp, #16
 801181e:	6078      	str	r0, [r7, #4]
 8011820:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
	uint16_t w16;
    status = HAL_I2C_Mem_Read(&INA3221_I2C_PORT, a<<1, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&w16, 2, HAL_MAX_DELAY);
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	b29b      	uxth	r3, r3
 8011826:	005b      	lsls	r3, r3, #1
 8011828:	b299      	uxth	r1, r3
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	b29a      	uxth	r2, r3
 801182e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011832:	9302      	str	r3, [sp, #8]
 8011834:	2302      	movs	r3, #2
 8011836:	9301      	str	r3, [sp, #4]
 8011838:	f107 030c 	add.w	r3, r7, #12
 801183c:	9300      	str	r3, [sp, #0]
 801183e:	2301      	movs	r3, #1
 8011840:	4811      	ldr	r0, [pc, #68]	; (8011888 <ina3221_read16+0x70>)
 8011842:	f7f1 ff33 	bl	80036ac <HAL_I2C_Mem_Read>
 8011846:	4603      	mov	r3, r0
 8011848:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 801184a:	7bfb      	ldrb	r3, [r7, #15]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d013      	beq.n	8011878 <ina3221_read16+0x60>
    	itm_debug1(DBG_INA3221|DBG_ERR, "i2c r err", status);
 8011850:	7bfb      	ldrb	r3, [r7, #15]
 8011852:	461a      	mov	r2, r3
 8011854:	490d      	ldr	r1, [pc, #52]	; (801188c <ina3221_read16+0x74>)
 8011856:	480e      	ldr	r0, [pc, #56]	; (8011890 <ina3221_read16+0x78>)
 8011858:	f7ff fbf6 	bl	8011048 <itm_debug1>
    	ina3221_errors++;
 801185c:	4b0d      	ldr	r3, [pc, #52]	; (8011894 <ina3221_read16+0x7c>)
 801185e:	881b      	ldrh	r3, [r3, #0]
 8011860:	3301      	adds	r3, #1
 8011862:	b29a      	uxth	r2, r3
 8011864:	4b0b      	ldr	r3, [pc, #44]	; (8011894 <ina3221_read16+0x7c>)
 8011866:	801a      	strh	r2, [r3, #0]
    	bkpoint(1, INA3221_I2C_PORT.ErrorCode);
 8011868:	4b07      	ldr	r3, [pc, #28]	; (8011888 <ina3221_read16+0x70>)
 801186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801186c:	4619      	mov	r1, r3
 801186e:	2001      	movs	r0, #1
 8011870:	f7ff fc5c 	bl	801112c <bkpoint>
    	return 0;
 8011874:	2300      	movs	r3, #0
 8011876:	e002      	b.n	801187e <ina3221_read16+0x66>
    } else {
    	return __builtin_bswap16(w16);
 8011878:	89bb      	ldrh	r3, [r7, #12]
 801187a:	ba5b      	rev16	r3, r3
 801187c:	b29b      	uxth	r3, r3
    }
}
 801187e:	4618      	mov	r0, r3
 8011880:	3710      	adds	r7, #16
 8011882:	46bd      	mov	sp, r7
 8011884:	bd80      	pop	{r7, pc}
 8011886:	bf00      	nop
 8011888:	200055f4 	.word	0x200055f4
 801188c:	08019004 	.word	0x08019004
 8011890:	80000020 	.word	0x80000020
 8011894:	20005138 	.word	0x20005138

08011898 <ina3221_write16>:

static int ina3221_write16(int a, int reg, uint16_t v)
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b08a      	sub	sp, #40	; 0x28
 801189c:	af04      	add	r7, sp, #16
 801189e:	60f8      	str	r0, [r7, #12]
 80118a0:	60b9      	str	r1, [r7, #8]
 80118a2:	4613      	mov	r3, r2
 80118a4:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint16_t w16;
	if ((1)) w16 = __builtin_bswap16(v);
 80118a6:	88fb      	ldrh	r3, [r7, #6]
 80118a8:	ba5b      	rev16	r3, r3
 80118aa:	b29b      	uxth	r3, r3
 80118ac:	82bb      	strh	r3, [r7, #20]
	else w16=v;
    status = HAL_I2C_Mem_Write(&INA3221_I2C_PORT, a<<1, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&w16, 2, HAL_MAX_DELAY);
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	b29b      	uxth	r3, r3
 80118b2:	005b      	lsls	r3, r3, #1
 80118b4:	b299      	uxth	r1, r3
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	b29a      	uxth	r2, r3
 80118ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80118be:	9302      	str	r3, [sp, #8]
 80118c0:	2302      	movs	r3, #2
 80118c2:	9301      	str	r3, [sp, #4]
 80118c4:	f107 0314 	add.w	r3, r7, #20
 80118c8:	9300      	str	r3, [sp, #0]
 80118ca:	2301      	movs	r3, #1
 80118cc:	4810      	ldr	r0, [pc, #64]	; (8011910 <ina3221_write16+0x78>)
 80118ce:	f7f1 fdf3 	bl	80034b8 <HAL_I2C_Mem_Write>
 80118d2:	4603      	mov	r3, r0
 80118d4:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) {
 80118d6:	7dfb      	ldrb	r3, [r7, #23]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d014      	beq.n	8011906 <ina3221_write16+0x6e>
    	itm_debug1(DBG_INA3221|DBG_ERR, "i2c w err", status);
 80118dc:	7dfb      	ldrb	r3, [r7, #23]
 80118de:	461a      	mov	r2, r3
 80118e0:	490c      	ldr	r1, [pc, #48]	; (8011914 <ina3221_write16+0x7c>)
 80118e2:	480d      	ldr	r0, [pc, #52]	; (8011918 <ina3221_write16+0x80>)
 80118e4:	f7ff fbb0 	bl	8011048 <itm_debug1>
       	ina3221_errors++;
 80118e8:	4b0c      	ldr	r3, [pc, #48]	; (801191c <ina3221_write16+0x84>)
 80118ea:	881b      	ldrh	r3, [r3, #0]
 80118ec:	3301      	adds	r3, #1
 80118ee:	b29a      	uxth	r2, r3
 80118f0:	4b0a      	ldr	r3, [pc, #40]	; (801191c <ina3221_write16+0x84>)
 80118f2:	801a      	strh	r2, [r3, #0]
    	bkpoint(2, INA3221_I2C_PORT.ErrorCode);
 80118f4:	4b06      	ldr	r3, [pc, #24]	; (8011910 <ina3221_write16+0x78>)
 80118f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118f8:	4619      	mov	r1, r3
 80118fa:	2002      	movs	r0, #2
 80118fc:	f7ff fc16 	bl	801112c <bkpoint>
    	return -1;
 8011900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011904:	e000      	b.n	8011908 <ina3221_write16+0x70>
    }
    return 0;
 8011906:	2300      	movs	r3, #0
}
 8011908:	4618      	mov	r0, r3
 801190a:	3718      	adds	r7, #24
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}
 8011910:	200055f4 	.word	0x200055f4
 8011914:	08019010 	.word	0x08019010
 8011918:	80000020 	.word	0x80000020
 801191c:	20005138 	.word	0x20005138

08011920 <ina3221_write16it>:




_UNUSED_ static int ina3221_write16it(int a, int reg, uint16_t v)
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b088      	sub	sp, #32
 8011924:	af02      	add	r7, sp, #8
 8011926:	60f8      	str	r0, [r7, #12]
 8011928:	60b9      	str	r1, [r7, #8]
 801192a:	4613      	mov	r3, r2
 801192c:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint16_t w16;
	if ((1)) w16 = __builtin_bswap16(v);
 801192e:	88fb      	ldrh	r3, [r7, #6]
 8011930:	ba5b      	rev16	r3, r3
 8011932:	b29b      	uxth	r3, r3
 8011934:	82bb      	strh	r3, [r7, #20]
	else w16=v;

	if (HAL_I2C_GetState(&INA3221_I2C_PORT) != HAL_I2C_STATE_READY) {
 8011936:	4824      	ldr	r0, [pc, #144]	; (80119c8 <ina3221_write16it+0xa8>)
 8011938:	f7f2 fd28 	bl	800438c <HAL_I2C_GetState>
 801193c:	4603      	mov	r3, r0
 801193e:	2b20      	cmp	r3, #32
 8011940:	d00a      	beq.n	8011958 <ina3221_write16it+0x38>
    	bkpoint(3, INA3221_I2C_PORT.State);
 8011942:	4b21      	ldr	r3, [pc, #132]	; (80119c8 <ina3221_write16it+0xa8>)
 8011944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011948:	b2db      	uxtb	r3, r3
 801194a:	4619      	mov	r1, r3
 801194c:	2003      	movs	r0, #3
 801194e:	f7ff fbed 	bl	801112c <bkpoint>
    	return -1;
 8011952:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011956:	e033      	b.n	80119c0 <ina3221_write16it+0xa0>
	}
#if 0
    status = HAL_I2C_Mem_Write_IT(&INA3221_I2C_PORT, a<<1, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&w16, 2);
#else
    status = HAL_I2C_Mem_Write_IT_NW(&INA3221_I2C_PORT, a<<1, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&w16, 2);
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	b29b      	uxth	r3, r3
 801195c:	005b      	lsls	r3, r3, #1
 801195e:	b299      	uxth	r1, r3
 8011960:	68bb      	ldr	r3, [r7, #8]
 8011962:	b29a      	uxth	r2, r3
 8011964:	2302      	movs	r3, #2
 8011966:	9301      	str	r3, [sp, #4]
 8011968:	f107 0314 	add.w	r3, r7, #20
 801196c:	9300      	str	r3, [sp, #0]
 801196e:	2301      	movs	r3, #1
 8011970:	4815      	ldr	r0, [pc, #84]	; (80119c8 <ina3221_write16it+0xa8>)
 8011972:	f000 f835 	bl	80119e0 <HAL_I2C_Mem_Write_IT_NW>
 8011976:	4603      	mov	r3, r0
 8011978:	75fb      	strb	r3, [r7, #23]
#endif
    if (status != HAL_OK) {
 801197a:	7dfb      	ldrb	r3, [r7, #23]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d01e      	beq.n	80119be <ina3221_write16it+0x9e>
    	itm_debug1(DBG_INA3221|DBG_ERR, "i2c w err", status);
 8011980:	7dfb      	ldrb	r3, [r7, #23]
 8011982:	461a      	mov	r2, r3
 8011984:	4911      	ldr	r1, [pc, #68]	; (80119cc <ina3221_write16it+0xac>)
 8011986:	4812      	ldr	r0, [pc, #72]	; (80119d0 <ina3221_write16it+0xb0>)
 8011988:	f7ff fb5e 	bl	8011048 <itm_debug1>
       	ina3221_errors++;
 801198c:	4b11      	ldr	r3, [pc, #68]	; (80119d4 <ina3221_write16it+0xb4>)
 801198e:	881b      	ldrh	r3, [r3, #0]
 8011990:	3301      	adds	r3, #1
 8011992:	b29a      	uxth	r2, r3
 8011994:	4b0f      	ldr	r3, [pc, #60]	; (80119d4 <ina3221_write16it+0xb4>)
 8011996:	801a      	strh	r2, [r3, #0]
    	bkpoint(3, INA3221_I2C_PORT.ErrorCode);
 8011998:	4b0b      	ldr	r3, [pc, #44]	; (80119c8 <ina3221_write16it+0xa8>)
 801199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801199c:	4619      	mov	r1, r3
 801199e:	2003      	movs	r0, #3
 80119a0:	f7ff fbc4 	bl	801112c <bkpoint>
    	itm_debug1(DBG_INA3221|DBG_ERR, "i2c rst", lastErr);
 80119a4:	4b0c      	ldr	r3, [pc, #48]	; (80119d8 <ina3221_write16it+0xb8>)
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	461a      	mov	r2, r3
 80119aa:	490c      	ldr	r1, [pc, #48]	; (80119dc <ina3221_write16it+0xbc>)
 80119ac:	4808      	ldr	r0, [pc, #32]	; (80119d0 <ina3221_write16it+0xb0>)
 80119ae:	f7ff fb4b 	bl	8011048 <itm_debug1>
    	HAL_I2C_Init(&INA3221_I2C_PORT);
 80119b2:	4805      	ldr	r0, [pc, #20]	; (80119c8 <ina3221_write16it+0xa8>)
 80119b4:	f7f1 fc48 	bl	8003248 <HAL_I2C_Init>
    	return -1;
 80119b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80119bc:	e000      	b.n	80119c0 <ina3221_write16it+0xa0>
    }
    return 0;
 80119be:	2300      	movs	r3, #0
}
 80119c0:	4618      	mov	r0, r3
 80119c2:	3718      	adds	r7, #24
 80119c4:	46bd      	mov	sp, r7
 80119c6:	bd80      	pop	{r7, pc}
 80119c8:	200055f4 	.word	0x200055f4
 80119cc:	08019010 	.word	0x08019010
 80119d0:	80000020 	.word	0x80000020
 80119d4:	20005138 	.word	0x20005138
 80119d8:	20005174 	.word	0x20005174
 80119dc:	08018fc4 	.word	0x08018fc4

080119e0 <HAL_I2C_Mem_Write_IT_NW>:
#define I2C_TIMEOUT_BUSY_FLAG     25U         /*!< Timeout 25 ms             */
#define I2C_TIMEOUT_STOP_FLAG     5U          /*!< Timeout 5 ms              */
#define I2C_NO_OPTION_FRAME       0xFFFF0000U /*!< XferOptions default value */

HAL_StatusTypeDef HAL_I2C_Mem_Write_IT_NW(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80119e0:	b480      	push	{r7}
 80119e2:	b087      	sub	sp, #28
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	60f8      	str	r0, [r7, #12]
 80119e8:	4608      	mov	r0, r1
 80119ea:	4611      	mov	r1, r2
 80119ec:	461a      	mov	r2, r3
 80119ee:	4603      	mov	r3, r0
 80119f0:	817b      	strh	r3, [r7, #10]
 80119f2:	460b      	mov	r3, r1
 80119f4:	813b      	strh	r3, [r7, #8]
 80119f6:	4613      	mov	r3, r2
 80119f8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80119fa:	2300      	movs	r3, #0
 80119fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011a04:	b2db      	uxtb	r3, r3
 8011a06:	2b20      	cmp	r3, #32
 8011a08:	f040 8083 	bne.w	8011b12 <HAL_I2C_Mem_Write_IT_NW+0x132>
  {
    /* Wait until BUSY flag is reset */
    count = 2; //I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8011a0c:	2302      	movs	r3, #2
 8011a0e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8011a10:	697b      	ldr	r3, [r7, #20]
 8011a12:	3b01      	subs	r3, #1
 8011a14:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8011a16:	697b      	ldr	r3, [r7, #20]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d116      	bne.n	8011a4a <HAL_I2C_Mem_Write_IT_NW+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	2200      	movs	r2, #0
 8011a20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	2220      	movs	r2, #32
 8011a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	2200      	movs	r2, #0
 8011a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a36:	f043 0220 	orr.w	r2, r3, #32
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	2200      	movs	r2, #0
 8011a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8011a46:	2301      	movs	r3, #1
 8011a48:	e064      	b.n	8011b14 <HAL_I2C_Mem_Write_IT_NW+0x134>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	699b      	ldr	r3, [r3, #24]
 8011a50:	f003 0302 	and.w	r3, r3, #2
 8011a54:	2b02      	cmp	r3, #2
 8011a56:	d0db      	beq.n	8011a10 <HAL_I2C_Mem_Write_IT_NW+0x30>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011a5e:	2b01      	cmp	r3, #1
 8011a60:	d101      	bne.n	8011a66 <HAL_I2C_Mem_Write_IT_NW+0x86>
 8011a62:	2302      	movs	r3, #2
 8011a64:	e056      	b.n	8011b14 <HAL_I2C_Mem_Write_IT_NW+0x134>
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	2201      	movs	r2, #1
 8011a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	f003 0301 	and.w	r3, r3, #1
 8011a78:	2b01      	cmp	r3, #1
 8011a7a:	d007      	beq.n	8011a8c <HAL_I2C_Mem_Write_IT_NW+0xac>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	681a      	ldr	r2, [r3, #0]
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	f042 0201 	orr.w	r2, r2, #1
 8011a8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	681a      	ldr	r2, [r3, #0]
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011a9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	2221      	movs	r2, #33	; 0x21
 8011aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	2240      	movs	r2, #64	; 0x40
 8011aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	2200      	movs	r2, #0
 8011ab0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	6a3a      	ldr	r2, [r7, #32]
 8011ab6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011abc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011ac2:	b29a      	uxth	r2, r3
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	4a15      	ldr	r2, [pc, #84]	; (8011b20 <HAL_I2C_Mem_Write_IT_NW+0x140>)
 8011acc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8011ace:	897a      	ldrh	r2, [r7, #10]
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8011ad4:	893a      	ldrh	r2, [r7, #8]
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8011ada:	88fa      	ldrh	r2, [r7, #6]
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	681a      	ldr	r2, [r3, #0]
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011af4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	2200      	movs	r2, #0
 8011afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	685a      	ldr	r2, [r3, #4]
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8011b0c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8011b0e:	2300      	movs	r3, #0
 8011b10:	e000      	b.n	8011b14 <HAL_I2C_Mem_Write_IT_NW+0x134>
  }
  else
  {
    return HAL_BUSY;
 8011b12:	2302      	movs	r3, #2
  }
}
 8011b14:	4618      	mov	r0, r3
 8011b16:	371c      	adds	r7, #28
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1e:	4770      	bx	lr
 8011b20:	ffff0000 	.word	0xffff0000

08011b24 <_ina3221_configure>:
    return HAL_BUSY;
  }
}

static void _ina3221_configure(int a, int continuous)
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b088      	sub	sp, #32
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
 8011b2c:	6039      	str	r1, [r7, #0]
	//HAL_StatusTypeDef status;
	uint16_t w16;

    _UNUSED_ uint16_t mid = ina3221_read16(a, INA3221_REG_MANUFACTURER_ID);
 8011b2e:	21fe      	movs	r1, #254	; 0xfe
 8011b30:	6878      	ldr	r0, [r7, #4]
 8011b32:	f7ff fe71 	bl	8011818 <ina3221_read16>
 8011b36:	4603      	mov	r3, r0
 8011b38:	83bb      	strh	r3, [r7, #28]
     // 0x5449
    _UNUSED_ uint16_t did = ina3221_read16(a,  INA3221_REG_DIE_ID);
 8011b3a:	21ff      	movs	r1, #255	; 0xff
 8011b3c:	6878      	ldr	r0, [r7, #4]
 8011b3e:	f7ff fe6b 	bl	8011818 <ina3221_read16>
 8011b42:	4603      	mov	r3, r0
 8011b44:	837b      	strh	r3, [r7, #26]
    // 0x3220

    _UNUSED_ uint16_t cnfbr = ina3221_read16(a,  INA3221_REG_CONFIG);
 8011b46:	2100      	movs	r1, #0
 8011b48:	6878      	ldr	r0, [r7, #4]
 8011b4a:	f7ff fe65 	bl	8011818 <ina3221_read16>
 8011b4e:	4603      	mov	r3, r0
 8011b50:	833b      	strh	r3, [r7, #24]

    if ((1)) {
    	w16 = INA3221_CONF_RESET;
 8011b52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011b56:	83fb      	strh	r3, [r7, #30]
    	int rc = ina3221_write16(a, INA3221_REG_CONFIG, w16);
 8011b58:	8bfb      	ldrh	r3, [r7, #30]
 8011b5a:	461a      	mov	r2, r3
 8011b5c:	2100      	movs	r1, #0
 8011b5e:	6878      	ldr	r0, [r7, #4]
 8011b60:	f7ff fe9a 	bl	8011898 <ina3221_write16>
 8011b64:	6178      	str	r0, [r7, #20]
    	if (rc) {
 8011b66:	697b      	ldr	r3, [r7, #20]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d003      	beq.n	8011b74 <_ina3221_configure+0x50>
    		bkpoint(100,rc);
 8011b6c:	6979      	ldr	r1, [r7, #20]
 8011b6e:	2064      	movs	r0, #100	; 0x64
 8011b70:	f7ff fadc 	bl	801112c <bkpoint>
    	}
    	osDelay(1000);
 8011b74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011b78:	f7fb f94c 	bl	800ce14 <osDelay>
    	//if ((1)) return;
    }
    _UNUSED_ uint16_t cnfar = ina3221_read16(a,  INA3221_REG_CONFIG);
 8011b7c:	2100      	movs	r1, #0
 8011b7e:	6878      	ldr	r0, [r7, #4]
 8011b80:	f7ff fe4a 	bl	8011818 <ina3221_read16>
 8011b84:	4603      	mov	r3, r0
 8011b86:	827b      	strh	r3, [r7, #18]

    w16 = INA3221_CONF_CH1_EN | INA3221_CONF_CH2_EN | INA3221_CONF_CH3_EN
 8011b88:	f247 0301 	movw	r3, #28673	; 0x7001
 8011b8c:	83fb      	strh	r3, [r7, #30]
    		| INA3221_CONF_VS_CT_140u
			| INA3221_CONF_MODE_SHUNT;
    w16 |= (continuous ? INA3221_CONF_AVG1 : INA3221_CONF_AVG16);
 8011b8e:	683b      	ldr	r3, [r7, #0]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d001      	beq.n	8011b98 <_ina3221_configure+0x74>
 8011b94:	2200      	movs	r2, #0
 8011b96:	e001      	b.n	8011b9c <_ina3221_configure+0x78>
 8011b98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011b9c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011ba0:	4313      	orrs	r3, r2
 8011ba2:	b21b      	sxth	r3, r3
 8011ba4:	83fb      	strh	r3, [r7, #30]

    if (continuous) w16 |= INA3221_CONF_MODE_CONTINUOUS;
 8011ba6:	683b      	ldr	r3, [r7, #0]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d003      	beq.n	8011bb4 <_ina3221_configure+0x90>
 8011bac:	8bfb      	ldrh	r3, [r7, #30]
 8011bae:	f043 0304 	orr.w	r3, r3, #4
 8011bb2:	83fb      	strh	r3, [r7, #30]
	ina_conf_val = w16;
 8011bb4:	8bfb      	ldrh	r3, [r7, #30]
 8011bb6:	4a13      	ldr	r2, [pc, #76]	; (8011c04 <_ina3221_configure+0xe0>)
 8011bb8:	6013      	str	r3, [r2, #0]
	int rc = ina3221_write16(a, INA3221_REG_CONFIG, w16);
 8011bba:	8bfb      	ldrh	r3, [r7, #30]
 8011bbc:	461a      	mov	r2, r3
 8011bbe:	2100      	movs	r1, #0
 8011bc0:	6878      	ldr	r0, [r7, #4]
 8011bc2:	f7ff fe69 	bl	8011898 <ina3221_write16>
 8011bc6:	60f8      	str	r0, [r7, #12]
    if ((0)) osDelay(100*1);
    if (rc) bkpoint(101, rc);
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d003      	beq.n	8011bd6 <_ina3221_configure+0xb2>
 8011bce:	68f9      	ldr	r1, [r7, #12]
 8011bd0:	2065      	movs	r0, #101	; 0x65
 8011bd2:	f7ff faab 	bl	801112c <bkpoint>
    rc = ina3221_write16(a, INA3221_REG_MASK_ENABLE, 0);
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	210f      	movs	r1, #15
 8011bda:	6878      	ldr	r0, [r7, #4]
 8011bdc:	f7ff fe5c 	bl	8011898 <ina3221_write16>
 8011be0:	60f8      	str	r0, [r7, #12]
    if (rc) bkpoint(102, rc);
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d003      	beq.n	8011bf0 <_ina3221_configure+0xcc>
 8011be8:	68f9      	ldr	r1, [r7, #12]
 8011bea:	2066      	movs	r0, #102	; 0x66
 8011bec:	f7ff fa9e 	bl	801112c <bkpoint>

    _UNUSED_ uint16_t cnfac = ina3221_read16(a,  INA3221_REG_CONFIG);
 8011bf0:	2100      	movs	r1, #0
 8011bf2:	6878      	ldr	r0, [r7, #4]
 8011bf4:	f7ff fe10 	bl	8011818 <ina3221_read16>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	817b      	strh	r3, [r7, #10]
    //if ((0)) ina3221_start_read();

    return;
 8011bfc:	bf00      	nop
}
 8011bfe:	3720      	adds	r7, #32
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}
 8011c04:	20005140 	.word	0x20005140

08011c08 <_ina3221_init>:

void _ina3221_init(int continuous)
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b086      	sub	sp, #24
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
	if (disable_ina3221) return;
 8011c10:	4b1d      	ldr	r3, [pc, #116]	; (8011c88 <_ina3221_init+0x80>)
 8011c12:	781b      	ldrb	r3, [r3, #0]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d132      	bne.n	8011c7e <_ina3221_init+0x76>
	//I2C_Scan();
	for (int dev = 0; dev<4; dev++) {
 8011c18:	2300      	movs	r3, #0
 8011c1a:	617b      	str	r3, [r7, #20]
 8011c1c:	e028      	b.n	8011c70 <_ina3221_init+0x68>
		int addr = 0x40 + dev;
 8011c1e:	697b      	ldr	r3, [r7, #20]
 8011c20:	3340      	adds	r3, #64	; 0x40
 8011c22:	613b      	str	r3, [r7, #16]
	    HAL_StatusTypeDef res;
        res = HAL_I2C_IsDeviceReady(&INA3221_I2C_PORT, addr << 1, 1, 10);
 8011c24:	693b      	ldr	r3, [r7, #16]
 8011c26:	b29b      	uxth	r3, r3
 8011c28:	005b      	lsls	r3, r3, #1
 8011c2a:	b299      	uxth	r1, r3
 8011c2c:	230a      	movs	r3, #10
 8011c2e:	2201      	movs	r2, #1
 8011c30:	4816      	ldr	r0, [pc, #88]	; (8011c8c <_ina3221_init+0x84>)
 8011c32:	f7f2 f81f 	bl	8003c74 <HAL_I2C_IsDeviceReady>
 8011c36:	4603      	mov	r3, r0
 8011c38:	73fb      	strb	r3, [r7, #15]
        if (res == HAL_OK) {
 8011c3a:	7bfb      	ldrb	r3, [r7, #15]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d10f      	bne.n	8011c60 <_ina3221_init+0x58>
        	_ina3221_configure(addr, continuous);
 8011c40:	6879      	ldr	r1, [r7, #4]
 8011c42:	6938      	ldr	r0, [r7, #16]
 8011c44:	f7ff ff6e 	bl	8011b24 <_ina3221_configure>
        	itm_debug2(DBG_PRES|DBG_INA3221, "INA@", dev, addr);
 8011c48:	693b      	ldr	r3, [r7, #16]
 8011c4a:	697a      	ldr	r2, [r7, #20]
 8011c4c:	4910      	ldr	r1, [pc, #64]	; (8011c90 <_ina3221_init+0x88>)
 8011c4e:	2060      	movs	r0, #96	; 0x60
 8011c50:	f7ff fa14 	bl	801107c <itm_debug2>
        	ina3221_devices[dev]=1;
 8011c54:	4a0f      	ldr	r2, [pc, #60]	; (8011c94 <_ina3221_init+0x8c>)
 8011c56:	697b      	ldr	r3, [r7, #20]
 8011c58:	4413      	add	r3, r2
 8011c5a:	2201      	movs	r2, #1
 8011c5c:	701a      	strb	r2, [r3, #0]
 8011c5e:	e004      	b.n	8011c6a <_ina3221_init+0x62>
        } else {
        	ina3221_devices[dev]=0;
 8011c60:	4a0c      	ldr	r2, [pc, #48]	; (8011c94 <_ina3221_init+0x8c>)
 8011c62:	697b      	ldr	r3, [r7, #20]
 8011c64:	4413      	add	r3, r2
 8011c66:	2200      	movs	r2, #0
 8011c68:	701a      	strb	r2, [r3, #0]
	for (int dev = 0; dev<4; dev++) {
 8011c6a:	697b      	ldr	r3, [r7, #20]
 8011c6c:	3301      	adds	r3, #1
 8011c6e:	617b      	str	r3, [r7, #20]
 8011c70:	697b      	ldr	r3, [r7, #20]
 8011c72:	2b03      	cmp	r3, #3
 8011c74:	ddd3      	ble.n	8011c1e <_ina3221_init+0x16>
        }
	}
	ina3221_init_done = 1;
 8011c76:	4b08      	ldr	r3, [pc, #32]	; (8011c98 <_ina3221_init+0x90>)
 8011c78:	2201      	movs	r2, #1
 8011c7a:	601a      	str	r2, [r3, #0]
 8011c7c:	e000      	b.n	8011c80 <_ina3221_init+0x78>
	if (disable_ina3221) return;
 8011c7e:	bf00      	nop
}
 8011c80:	3718      	adds	r7, #24
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bd80      	pop	{r7, pc}
 8011c86:	bf00      	nop
 8011c88:	2000513a 	.word	0x2000513a
 8011c8c:	200055f4 	.word	0x200055f4
 8011c90:	0801901c 	.word	0x0801901c
 8011c94:	20005134 	.word	0x20005134
 8011c98:	2000513c 	.word	0x2000513c

08011c9c <ina3221_init_and_configure>:

static void ina3221_init_and_configure(void)
{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	af00      	add	r7, sp, #0
	_ina3221_init(INA3221_CONTIUNOUS);
 8011ca0:	2001      	movs	r0, #1
 8011ca2:	f7ff ffb1 	bl	8011c08 <_ina3221_init>
}
 8011ca6:	bf00      	nop
 8011ca8:	bd80      	pop	{r7, pc}

08011caa <ina3221_task_start>:

// ----------------------------------------------------------------------------------

void ina3221_task_start(_UNUSED_ void *argument)
{
 8011caa:	b580      	push	{r7, lr}
 8011cac:	b082      	sub	sp, #8
 8011cae:	af00      	add	r7, sp, #0
 8011cb0:	6078      	str	r0, [r7, #4]
	if (DISABLE_INA3221) {
		for(;;) {
			osDelay(1);
		}
	}
	run_ina_task();
 8011cb2:	f7ff fa4f 	bl	8011154 <run_ina_task>
#else
	for(;;) {
		osDelay(1);
	}
#endif
}
 8011cb6:	bf00      	nop
 8011cb8:	3708      	adds	r7, #8
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}
	...

08011cc0 <itm_debug1>:
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b086      	sub	sp, #24
 8011cc4:	af02      	add	r7, sp, #8
 8011cc6:	60f8      	str	r0, [r7, #12]
 8011cc8:	60b9      	str	r1, [r7, #8]
 8011cca:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8011ccc:	4b08      	ldr	r3, [pc, #32]	; (8011cf0 <itm_debug1+0x30>)
 8011cce:	681a      	ldr	r2, [r3, #0]
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	4013      	ands	r3, r2
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d007      	beq.n	8011ce8 <itm_debug1+0x28>
 8011cd8:	2301      	movs	r3, #1
 8011cda:	9300      	str	r3, [sp, #0]
 8011cdc:	2300      	movs	r3, #0
 8011cde:	2200      	movs	r2, #0
 8011ce0:	6879      	ldr	r1, [r7, #4]
 8011ce2:	68b8      	ldr	r0, [r7, #8]
 8011ce4:	f006 fdc6 	bl	8018874 <_itm_debug3>
}
 8011ce8:	bf00      	nop
 8011cea:	3710      	adds	r7, #16
 8011cec:	46bd      	mov	sp, r7
 8011cee:	bd80      	pop	{r7, pc}
 8011cf0:	20000574 	.word	0x20000574

08011cf4 <ihm_setlayout>:
		CODE_ZONE_TEXT3s,  CODE_SVAL4,  6, /*CODE_STR|7,*/ CODE_SVAL4,  7, /*CODE_STR|7,*/ CODE_SVAL4,  8,
		CODE_END
};

void ihm_setlayout(int numdisp, int numlayout)
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b084      	sub	sp, #16
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
 8011cfc:	6039      	str	r1, [r7, #0]
	const uint8_t *p = NULL;
 8011cfe:	2300      	movs	r3, #0
 8011d00:	60fb      	str	r3, [r7, #12]
	switch (numlayout) {
 8011d02:	683b      	ldr	r3, [r7, #0]
 8011d04:	2b03      	cmp	r3, #3
 8011d06:	d015      	beq.n	8011d34 <ihm_setlayout+0x40>
 8011d08:	2b03      	cmp	r3, #3
 8011d0a:	dc06      	bgt.n	8011d1a <ihm_setlayout+0x26>
 8011d0c:	2b01      	cmp	r3, #1
 8011d0e:	d00b      	beq.n	8011d28 <ihm_setlayout+0x34>
 8011d10:	2b01      	cmp	r3, #1
 8011d12:	dc0c      	bgt.n	8011d2e <ihm_setlayout+0x3a>
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d01f      	beq.n	8011d58 <ihm_setlayout+0x64>
 8011d18:	e018      	b.n	8011d4c <ihm_setlayout+0x58>
 8011d1a:	2bc8      	cmp	r3, #200	; 0xc8
 8011d1c:	d00d      	beq.n	8011d3a <ihm_setlayout+0x46>
 8011d1e:	2bc9      	cmp	r3, #201	; 0xc9
 8011d20:	d00e      	beq.n	8011d40 <ihm_setlayout+0x4c>
 8011d22:	2b04      	cmp	r3, #4
 8011d24:	d00f      	beq.n	8011d46 <ihm_setlayout+0x52>
 8011d26:	e011      	b.n	8011d4c <ihm_setlayout+0x58>
	case LAYOUT_DEFAULT: // default
		break;
	case LAYOUT_INIT:
		p = layout_init;
 8011d28:	4b10      	ldr	r3, [pc, #64]	; (8011d6c <ihm_setlayout+0x78>)
 8011d2a:	60fb      	str	r3, [r7, #12]
		break;
 8011d2c:	e015      	b.n	8011d5a <ihm_setlayout+0x66>
	case LAYOUT_MANUAL: // speed mode
		p = layout_manual;
 8011d2e:	4b10      	ldr	r3, [pc, #64]	; (8011d70 <ihm_setlayout+0x7c>)
 8011d30:	60fb      	str	r3, [r7, #12]
		break;
 8011d32:	e012      	b.n	8011d5a <ihm_setlayout+0x66>
	case LAYOUT_AUTO:
		p = layout_auto;
 8011d34:	4b0f      	ldr	r3, [pc, #60]	; (8011d74 <ihm_setlayout+0x80>)
 8011d36:	60fb      	str	r3, [r7, #12]
		break;
 8011d38:	e00f      	b.n	8011d5a <ihm_setlayout+0x66>
	case LAYOUT_INA3221_DETECT: // ina3221 I2C detection
		p = layout_ina3221_i2c;
 8011d3a:	4b0f      	ldr	r3, [pc, #60]	; (8011d78 <ihm_setlayout+0x84>)
 8011d3c:	60fb      	str	r3, [r7, #12]
		break;
 8011d3e:	e00c      	b.n	8011d5a <ihm_setlayout+0x66>
	case LAYOUT_INA3221_VAL:
		p = layout_ina3221_val;
 8011d40:	4b0e      	ldr	r3, [pc, #56]	; (8011d7c <ihm_setlayout+0x88>)
 8011d42:	60fb      	str	r3, [r7, #12]
		break;
 8011d44:	e009      	b.n	8011d5a <ihm_setlayout+0x66>
	case LAYOUT_OFF:
		p = layout_off;
 8011d46:	4b0e      	ldr	r3, [pc, #56]	; (8011d80 <ihm_setlayout+0x8c>)
 8011d48:	60fb      	str	r3, [r7, #12]
		break;
 8011d4a:	e006      	b.n	8011d5a <ihm_setlayout+0x66>
	default:
		itm_debug1(DBG_ERR|DBG_UI, "bad layout", numlayout);
 8011d4c:	683a      	ldr	r2, [r7, #0]
 8011d4e:	490d      	ldr	r1, [pc, #52]	; (8011d84 <ihm_setlayout+0x90>)
 8011d50:	480d      	ldr	r0, [pc, #52]	; (8011d88 <ihm_setlayout+0x94>)
 8011d52:	f7ff ffb5 	bl	8011cc0 <itm_debug1>
		break;
 8011d56:	e000      	b.n	8011d5a <ihm_setlayout+0x66>
		break;
 8011d58:	bf00      	nop
	}
	disp[numdisp] = p;
 8011d5a:	490c      	ldr	r1, [pc, #48]	; (8011d8c <ihm_setlayout+0x98>)
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	68fa      	ldr	r2, [r7, #12]
 8011d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8011d64:	bf00      	nop
 8011d66:	3710      	adds	r7, #16
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bd80      	pop	{r7, pc}
 8011d6c:	0801b3b0 	.word	0x0801b3b0
 8011d70:	0801b3b8 	.word	0x0801b3b8
 8011d74:	0801b3d0 	.word	0x0801b3d0
 8011d78:	0801b3e4 	.word	0x0801b3e4
 8011d7c:	0801b3fc 	.word	0x0801b3fc
 8011d80:	0801b3a0 	.word	0x0801b3a0
 8011d84:	08019024 	.word	0x08019024
 8011d88:	80000800 	.word	0x80000800
 8011d8c:	20005190 	.word	0x20005190

08011d90 <ihm_setvar>:
// ----------------------------------------------------------------

static uint16_t regs[DISP_MAX_REGS][MAX_DISP];

void ihm_setvar(int numdisp, int varnum, uint16_t val)
{
 8011d90:	b480      	push	{r7}
 8011d92:	b085      	sub	sp, #20
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	60f8      	str	r0, [r7, #12]
 8011d98:	60b9      	str	r1, [r7, #8]
 8011d9a:	4613      	mov	r3, r2
 8011d9c:	80fb      	strh	r3, [r7, #6]
	if (varnum>DISP_MAX_REGS) return;
 8011d9e:	68bb      	ldr	r3, [r7, #8]
 8011da0:	2b10      	cmp	r3, #16
 8011da2:	dc0a      	bgt.n	8011dba <ihm_setvar+0x2a>
	if (numdisp>MAX_DISP) return;
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	2b01      	cmp	r3, #1
 8011da8:	dc09      	bgt.n	8011dbe <ihm_setvar+0x2e>
	regs[varnum][numdisp] = val;
 8011daa:	4908      	ldr	r1, [pc, #32]	; (8011dcc <ihm_setvar+0x3c>)
 8011dac:	68ba      	ldr	r2, [r7, #8]
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	4413      	add	r3, r2
 8011db2:	88fa      	ldrh	r2, [r7, #6]
 8011db4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8011db8:	e002      	b.n	8011dc0 <ihm_setvar+0x30>
	if (varnum>DISP_MAX_REGS) return;
 8011dba:	bf00      	nop
 8011dbc:	e000      	b.n	8011dc0 <ihm_setvar+0x30>
	if (numdisp>MAX_DISP) return;
 8011dbe:	bf00      	nop
}
 8011dc0:	3714      	adds	r7, #20
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc8:	4770      	bx	lr
 8011dca:	bf00      	nop
 8011dcc:	20005194 	.word	0x20005194

08011dd0 <ihm_getvar>:
uint16_t ihm_getvar(int numdisp, int varnum)
{
 8011dd0:	b480      	push	{r7}
 8011dd2:	b083      	sub	sp, #12
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
 8011dd8:	6039      	str	r1, [r7, #0]
	if (varnum>DISP_MAX_REGS) return 0;
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	2b10      	cmp	r3, #16
 8011dde:	dd01      	ble.n	8011de4 <ihm_getvar+0x14>
 8011de0:	2300      	movs	r3, #0
 8011de2:	e00a      	b.n	8011dfa <ihm_getvar+0x2a>
	if (numdisp>MAX_DISP) return 0;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	2b01      	cmp	r3, #1
 8011de8:	dd01      	ble.n	8011dee <ihm_getvar+0x1e>
 8011dea:	2300      	movs	r3, #0
 8011dec:	e005      	b.n	8011dfa <ihm_getvar+0x2a>
	return regs[varnum][numdisp];
 8011dee:	4906      	ldr	r1, [pc, #24]	; (8011e08 <ihm_getvar+0x38>)
 8011df0:	683a      	ldr	r2, [r7, #0]
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	4413      	add	r3, r2
 8011df6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
}
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	370c      	adds	r7, #12
 8011dfe:	46bd      	mov	sp, r7
 8011e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e04:	4770      	bx	lr
 8011e06:	bf00      	nop
 8011e08:	20005194 	.word	0x20005194

08011e0c <disp_layout>:
static void write_snum4(int16_t v, FontDef *curfont);
static void write_bargraph(int16_t v, int16_t min, int16_t max);
static void write_sbargraph(int16_t v, int16_t min, int16_t max);

void disp_layout(int numdisp)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b08c      	sub	sp, #48	; 0x30
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
	uint32_t t0 = HAL_GetTick();
 8011e14:	f7ef ffe0 	bl	8001dd8 <HAL_GetTick>
 8011e18:	61f8      	str	r0, [r7, #28]
	const uint8_t *d = disp[numdisp];
 8011e1a:	4ace      	ldr	r2, [pc, #824]	; (8012154 <disp_layout+0x348>)
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e22:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (!d) d = default_layout;
 8011e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d101      	bne.n	8011e2e <disp_layout+0x22>
 8011e2a:	4bcb      	ldr	r3, [pc, #812]	; (8012158 <disp_layout+0x34c>)
 8011e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	ssd1306_Fill(Black);
 8011e2e:	2000      	movs	r0, #0
 8011e30:	f7fe fe22 	bl	8010a78 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8011e34:	2100      	movs	r1, #0
 8011e36:	2000      	movs	r0, #0
 8011e38:	f7ff f802 	bl	8010e40 <ssd1306_SetCursor>
	FontDef *curfont = &Font_7x10;
 8011e3c:	4bc7      	ldr	r3, [pc, #796]	; (801215c <disp_layout+0x350>)
 8011e3e:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t v16s;
	//uint16_t *puval;
	static uint16_t last_dur1=0;
	static uint16_t last_dur2=0;

	for (int i=0; i<MAX_OPCODE_PER_DISPLAY; i++) {
 8011e40:	2300      	movs	r3, #0
 8011e42:	623b      	str	r3, [r7, #32]
 8011e44:	e26a      	b.n	801231c <disp_layout+0x510>
		if (CODE_END == d[i]) break;
 8011e46:	6a3b      	ldr	r3, [r7, #32]
 8011e48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e4a:	4413      	add	r3, r2
 8011e4c:	781b      	ldrb	r3, [r3, #0]
 8011e4e:	2bfe      	cmp	r3, #254	; 0xfe
 8011e50:	f000 8269 	beq.w	8012326 <disp_layout+0x51a>
		if ((d[i] & 0x80)==0) { // CODE_STR
 8011e54:	6a3b      	ldr	r3, [r7, #32]
 8011e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e58:	4413      	add	r3, r2
 8011e5a:	781b      	ldrb	r3, [r3, #0]
 8011e5c:	b25b      	sxtb	r3, r3
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	db10      	blt.n	8011e84 <disp_layout+0x78>
			const char * stri = ui_strings[d[i]&0x7F];
 8011e62:	6a3b      	ldr	r3, [r7, #32]
 8011e64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e66:	4413      	add	r3, r2
 8011e68:	781b      	ldrb	r3, [r3, #0]
 8011e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e6e:	4abc      	ldr	r2, [pc, #752]	; (8012160 <disp_layout+0x354>)
 8011e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e74:	613b      	str	r3, [r7, #16]
			ssd1306_WriteString(stri, *curfont, White);
 8011e76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e78:	2301      	movs	r3, #1
 8011e7a:	ca06      	ldmia	r2, {r1, r2}
 8011e7c:	6938      	ldr	r0, [r7, #16]
 8011e7e:	f7fe ffb9 	bl	8010df4 <ssd1306_WriteString>
			continue;
 8011e82:	e248      	b.n	8012316 <disp_layout+0x50a>
		}
		switch (d[i]) {
 8011e84:	6a3b      	ldr	r3, [r7, #32]
 8011e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011e88:	4413      	add	r3, r2
 8011e8a:	781b      	ldrb	r3, [r3, #0]
 8011e8c:	3b80      	subs	r3, #128	; 0x80
 8011e8e:	2b7f      	cmp	r3, #127	; 0x7f
 8011e90:	f200 8233 	bhi.w	80122fa <disp_layout+0x4ee>
 8011e94:	a201      	add	r2, pc, #4	; (adr r2, 8011e9c <disp_layout+0x90>)
 8011e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e9a:	bf00      	nop
 8011e9c:	0801209d 	.word	0x0801209d
 8011ea0:	080120ab 	.word	0x080120ab
 8011ea4:	080120b9 	.word	0x080120b9
 8011ea8:	080120c7 	.word	0x080120c7
 8011eac:	080120d5 	.word	0x080120d5
 8011eb0:	080120e3 	.word	0x080120e3
 8011eb4:	080120f1 	.word	0x080120f1
 8011eb8:	080120ff 	.word	0x080120ff
 8011ebc:	0801226d 	.word	0x0801226d
 8011ec0:	080122fb 	.word	0x080122fb
 8011ec4:	080122fb 	.word	0x080122fb
 8011ec8:	080122fb 	.word	0x080122fb
 8011ecc:	080122fb 	.word	0x080122fb
 8011ed0:	080122fb 	.word	0x080122fb
 8011ed4:	080122fb 	.word	0x080122fb
 8011ed8:	08012281 	.word	0x08012281
 8011edc:	080122fb 	.word	0x080122fb
 8011ee0:	080122fb 	.word	0x080122fb
 8011ee4:	080122fb 	.word	0x080122fb
 8011ee8:	080122fb 	.word	0x080122fb
 8011eec:	080122fb 	.word	0x080122fb
 8011ef0:	080122fb 	.word	0x080122fb
 8011ef4:	080122fb 	.word	0x080122fb
 8011ef8:	080122fb 	.word	0x080122fb
 8011efc:	080122fb 	.word	0x080122fb
 8011f00:	080122fb 	.word	0x080122fb
 8011f04:	080122fb 	.word	0x080122fb
 8011f08:	080122fb 	.word	0x080122fb
 8011f0c:	080122fb 	.word	0x080122fb
 8011f10:	080122fb 	.word	0x080122fb
 8011f14:	080122fb 	.word	0x080122fb
 8011f18:	080122fb 	.word	0x080122fb
 8011f1c:	080122fb 	.word	0x080122fb
 8011f20:	080122fb 	.word	0x080122fb
 8011f24:	080122fb 	.word	0x080122fb
 8011f28:	080122fb 	.word	0x080122fb
 8011f2c:	080122fb 	.word	0x080122fb
 8011f30:	080122fb 	.word	0x080122fb
 8011f34:	080122fb 	.word	0x080122fb
 8011f38:	080122fb 	.word	0x080122fb
 8011f3c:	080122fb 	.word	0x080122fb
 8011f40:	080122fb 	.word	0x080122fb
 8011f44:	080122fb 	.word	0x080122fb
 8011f48:	080122fb 	.word	0x080122fb
 8011f4c:	080122fb 	.word	0x080122fb
 8011f50:	080122fb 	.word	0x080122fb
 8011f54:	080122fb 	.word	0x080122fb
 8011f58:	080122fb 	.word	0x080122fb
 8011f5c:	080122fb 	.word	0x080122fb
 8011f60:	080122fb 	.word	0x080122fb
 8011f64:	080122fb 	.word	0x080122fb
 8011f68:	080122fb 	.word	0x080122fb
 8011f6c:	080122fb 	.word	0x080122fb
 8011f70:	080122fb 	.word	0x080122fb
 8011f74:	080122fb 	.word	0x080122fb
 8011f78:	080122fb 	.word	0x080122fb
 8011f7c:	080122fb 	.word	0x080122fb
 8011f80:	080122fb 	.word	0x080122fb
 8011f84:	080122fb 	.word	0x080122fb
 8011f88:	080122fb 	.word	0x080122fb
 8011f8c:	080122fb 	.word	0x080122fb
 8011f90:	080122fb 	.word	0x080122fb
 8011f94:	080122fb 	.word	0x080122fb
 8011f98:	080122fb 	.word	0x080122fb
 8011f9c:	0801216d 	.word	0x0801216d
 8011fa0:	080122a7 	.word	0x080122a7
 8011fa4:	080121f1 	.word	0x080121f1
 8011fa8:	080122fb 	.word	0x080122fb
 8011fac:	080121a1 	.word	0x080121a1
 8011fb0:	080121c9 	.word	0x080121c9
 8011fb4:	08012217 	.word	0x08012217
 8011fb8:	08012241 	.word	0x08012241
 8011fbc:	0801210d 	.word	0x0801210d
 8011fc0:	080122fb 	.word	0x080122fb
 8011fc4:	080122fb 	.word	0x080122fb
 8011fc8:	080122fb 	.word	0x080122fb
 8011fcc:	080122fb 	.word	0x080122fb
 8011fd0:	080122fb 	.word	0x080122fb
 8011fd4:	080122fb 	.word	0x080122fb
 8011fd8:	080122fb 	.word	0x080122fb
 8011fdc:	080122fb 	.word	0x080122fb
 8011fe0:	080122fb 	.word	0x080122fb
 8011fe4:	080122fb 	.word	0x080122fb
 8011fe8:	080122fb 	.word	0x080122fb
 8011fec:	080122fb 	.word	0x080122fb
 8011ff0:	080122fb 	.word	0x080122fb
 8011ff4:	080122fb 	.word	0x080122fb
 8011ff8:	080122fb 	.word	0x080122fb
 8011ffc:	080122fb 	.word	0x080122fb
 8012000:	080122fb 	.word	0x080122fb
 8012004:	080122fb 	.word	0x080122fb
 8012008:	080122fb 	.word	0x080122fb
 801200c:	080122fb 	.word	0x080122fb
 8012010:	080122fb 	.word	0x080122fb
 8012014:	080122fb 	.word	0x080122fb
 8012018:	080122fb 	.word	0x080122fb
 801201c:	080122fb 	.word	0x080122fb
 8012020:	080122fb 	.word	0x080122fb
 8012024:	080122fb 	.word	0x080122fb
 8012028:	080122fb 	.word	0x080122fb
 801202c:	080122fb 	.word	0x080122fb
 8012030:	080122fb 	.word	0x080122fb
 8012034:	080122fb 	.word	0x080122fb
 8012038:	080122fb 	.word	0x080122fb
 801203c:	080122fb 	.word	0x080122fb
 8012040:	080122fb 	.word	0x080122fb
 8012044:	080122fb 	.word	0x080122fb
 8012048:	080122fb 	.word	0x080122fb
 801204c:	080122fb 	.word	0x080122fb
 8012050:	080122fb 	.word	0x080122fb
 8012054:	080122fb 	.word	0x080122fb
 8012058:	080122fb 	.word	0x080122fb
 801205c:	080122fb 	.word	0x080122fb
 8012060:	080122fb 	.word	0x080122fb
 8012064:	080122fb 	.word	0x080122fb
 8012068:	080122fb 	.word	0x080122fb
 801206c:	080122fb 	.word	0x080122fb
 8012070:	080122fb 	.word	0x080122fb
 8012074:	080122fb 	.word	0x080122fb
 8012078:	080122fb 	.word	0x080122fb
 801207c:	080122fb 	.word	0x080122fb
 8012080:	080122fb 	.word	0x080122fb
 8012084:	080122fb 	.word	0x080122fb
 8012088:	080122fb 	.word	0x080122fb
 801208c:	080122fb 	.word	0x080122fb
 8012090:	080122fb 	.word	0x080122fb
 8012094:	080122fb 	.word	0x080122fb
 8012098:	08012315 	.word	0x08012315
		case CODE_NOP: break;
		case CODE_ZONE_STATUS:
			ssd1306_SetCursor(0, 0);
 801209c:	2100      	movs	r1, #0
 801209e:	2000      	movs	r0, #0
 80120a0:	f7fe fece 	bl	8010e40 <ssd1306_SetCursor>
			curfont = &Font_7x10;
 80120a4:	4b2d      	ldr	r3, [pc, #180]	; (801215c <disp_layout+0x350>)
 80120a6:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80120a8:	e135      	b.n	8012316 <disp_layout+0x50a>
		case CODE_ZONE_MODE:
			ssd1306_SetCursor(RIGHT_X, 0);
 80120aa:	2100      	movs	r1, #0
 80120ac:	2040      	movs	r0, #64	; 0x40
 80120ae:	f7fe fec7 	bl	8010e40 <ssd1306_SetCursor>
			curfont = &Font_7x10;
 80120b2:	4b2a      	ldr	r3, [pc, #168]	; (801215c <disp_layout+0x350>)
 80120b4:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80120b6:	e12e      	b.n	8012316 <disp_layout+0x50a>
		case CODE_ZONE_TEXT1:
			ssd1306_SetCursor(0, TEXT_Y);
 80120b8:	210c      	movs	r1, #12
 80120ba:	2000      	movs	r0, #0
 80120bc:	f7fe fec0 	bl	8010e40 <ssd1306_SetCursor>
			curfont = &Font_11x18;
 80120c0:	4b28      	ldr	r3, [pc, #160]	; (8012164 <disp_layout+0x358>)
 80120c2:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80120c4:	e127      	b.n	8012316 <disp_layout+0x50a>
		case CODE_ZONE_TEXT2:
			ssd1306_SetCursor(RIGHT_X, TEXT_Y);
 80120c6:	210c      	movs	r1, #12
 80120c8:	2040      	movs	r0, #64	; 0x40
 80120ca:	f7fe feb9 	bl	8010e40 <ssd1306_SetCursor>
			curfont = &Font_11x18;
 80120ce:	4b25      	ldr	r3, [pc, #148]	; (8012164 <disp_layout+0x358>)
 80120d0:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80120d2:	e120      	b.n	8012316 <disp_layout+0x50a>
		case CODE_ZONE_TEXT1s:
			ssd1306_SetCursor(0, TEXT_Y);
 80120d4:	210c      	movs	r1, #12
 80120d6:	2000      	movs	r0, #0
 80120d8:	f7fe feb2 	bl	8010e40 <ssd1306_SetCursor>
			curfont = &Font_7x10;
 80120dc:	4b1f      	ldr	r3, [pc, #124]	; (801215c <disp_layout+0x350>)
 80120de:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80120e0:	e119      	b.n	8012316 <disp_layout+0x50a>
		case CODE_ZONE_TEXT2s:
			ssd1306_SetCursor(RIGHT_X, TEXT_Y);
 80120e2:	210c      	movs	r1, #12
 80120e4:	2040      	movs	r0, #64	; 0x40
 80120e6:	f7fe feab 	bl	8010e40 <ssd1306_SetCursor>
			curfont = &Font_7x10;
 80120ea:	4b1c      	ldr	r3, [pc, #112]	; (801215c <disp_layout+0x350>)
 80120ec:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 80120ee:	e112      	b.n	8012316 <disp_layout+0x50a>
		case CODE_ZONE_TEXT3s:
#ifdef SSD1306_INCLUDE_FONT_6x8
			ssd1306_SetCursor(0, TEXT_Y+12);
 80120f0:	2118      	movs	r1, #24
 80120f2:	2000      	movs	r0, #0
 80120f4:	f7fe fea4 	bl	8010e40 <ssd1306_SetCursor>
			curfont = &Font_6x8;
 80120f8:	4b1b      	ldr	r3, [pc, #108]	; (8012168 <disp_layout+0x35c>)
 80120fa:	62bb      	str	r3, [r7, #40]	; 0x28
#else
			ssd1306_SetCursor(0, TEXT_Y+10);
			curfont = &Font_7x10;
#endif
			break;
 80120fc:	e10b      	b.n	8012316 <disp_layout+0x50a>
		case CODE_ZONE_TEXT4s:
#ifdef SSD1306_INCLUDE_FONT_6x8
			ssd1306_SetCursor(RIGHT_X, TEXT_Y+12);
 80120fe:	2118      	movs	r1, #24
 8012100:	2040      	movs	r0, #64	; 0x40
 8012102:	f7fe fe9d 	bl	8010e40 <ssd1306_SetCursor>
			curfont = &Font_6x8;
 8012106:	4b18      	ldr	r3, [pc, #96]	; (8012168 <disp_layout+0x35c>)
 8012108:	62bb      	str	r3, [r7, #40]	; 0x28
#else
			ssd1306_SetCursor(RIGHT_X, TEXT_Y+10);
			curfont = &Font_7x10;
#endif
			break;
 801210a:	e104      	b.n	8012316 <disp_layout+0x50a>
			curfont = &Font_16x26;
			break;
#endif

		case CODE_SPTR:
			i++;
 801210c:	6a3b      	ldr	r3, [r7, #32]
 801210e:	3301      	adds	r3, #1
 8012110:	623b      	str	r3, [r7, #32]
			v16u = (int16_t) _GET_REG(numdisp, d[i]);
 8012112:	6a3b      	ldr	r3, [r7, #32]
 8012114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012116:	4413      	add	r3, r2
 8012118:	781b      	ldrb	r3, [r3, #0]
 801211a:	4619      	mov	r1, r3
 801211c:	6878      	ldr	r0, [r7, #4]
 801211e:	f7ff fe57 	bl	8011dd0 <ihm_getvar>
 8012122:	4603      	mov	r3, r0
 8012124:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (v16u<10) v16u = 10;
 8012126:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012128:	2b09      	cmp	r3, #9
 801212a:	d801      	bhi.n	8012130 <disp_layout+0x324>
 801212c:	230a      	movs	r3, #10
 801212e:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (v16u>100) v16u = 100;
 8012130:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012132:	2b64      	cmp	r3, #100	; 0x64
 8012134:	d901      	bls.n	801213a <disp_layout+0x32e>
 8012136:	2364      	movs	r3, #100	; 0x64
 8012138:	84fb      	strh	r3, [r7, #38]	; 0x26
			const char * stri = ui_strings[v16u];
 801213a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801213c:	4a08      	ldr	r2, [pc, #32]	; (8012160 <disp_layout+0x354>)
 801213e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012142:	61bb      	str	r3, [r7, #24]
			ssd1306_WriteString(stri, *curfont, White);
 8012144:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012146:	2301      	movs	r3, #1
 8012148:	ca06      	ldmia	r2, {r1, r2}
 801214a:	69b8      	ldr	r0, [r7, #24]
 801214c:	f7fe fe52 	bl	8010df4 <ssd1306_WriteString>
			break;
 8012150:	e0e1      	b.n	8012316 <disp_layout+0x50a>
 8012152:	bf00      	nop
 8012154:	20005190 	.word	0x20005190
 8012158:	0801b3a8 	.word	0x0801b3a8
 801215c:	2000018c 	.word	0x2000018c
 8012160:	200001a0 	.word	0x200001a0
 8012164:	20000194 	.word	0x20000194
 8012168:	20000184 	.word	0x20000184
		case CODE_DIGIT:
			i++;
 801216c:	6a3b      	ldr	r3, [r7, #32]
 801216e:	3301      	adds	r3, #1
 8012170:	623b      	str	r3, [r7, #32]
			v16u = (int16_t) _GET_REG(numdisp, d[i]);
 8012172:	6a3b      	ldr	r3, [r7, #32]
 8012174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012176:	4413      	add	r3, r2
 8012178:	781b      	ldrb	r3, [r3, #0]
 801217a:	4619      	mov	r1, r3
 801217c:	6878      	ldr	r0, [r7, #4]
 801217e:	f7ff fe27 	bl	8011dd0 <ihm_getvar>
 8012182:	4603      	mov	r3, r0
 8012184:	84fb      	strh	r3, [r7, #38]	; 0x26
			ssd1306_WriteChar('0'+(v16u & 0xF) , *curfont, White);
 8012186:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012188:	b2db      	uxtb	r3, r3
 801218a:	f003 030f 	and.w	r3, r3, #15
 801218e:	b2db      	uxtb	r3, r3
 8012190:	3330      	adds	r3, #48	; 0x30
 8012192:	b2d8      	uxtb	r0, r3
 8012194:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012196:	2301      	movs	r3, #1
 8012198:	ca06      	ldmia	r2, {r1, r2}
 801219a:	f7fe fda3 	bl	8010ce4 <ssd1306_WriteChar>
			break;
 801219e:	e0ba      	b.n	8012316 <disp_layout+0x50a>
		case CODE_SVAL:
			i++;
 80121a0:	6a3b      	ldr	r3, [r7, #32]
 80121a2:	3301      	adds	r3, #1
 80121a4:	623b      	str	r3, [r7, #32]
			v16s = (int16_t) _GET_REG(numdisp, d[i]);
 80121a6:	6a3b      	ldr	r3, [r7, #32]
 80121a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121aa:	4413      	add	r3, r2
 80121ac:	781b      	ldrb	r3, [r3, #0]
 80121ae:	4619      	mov	r1, r3
 80121b0:	6878      	ldr	r0, [r7, #4]
 80121b2:	f7ff fe0d 	bl	8011dd0 <ihm_getvar>
 80121b6:	4603      	mov	r3, r0
 80121b8:	82fb      	strh	r3, [r7, #22]
			write_snum(v16s, curfont);
 80121ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80121be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80121c0:	4618      	mov	r0, r3
 80121c2:	f000 f935 	bl	8012430 <write_snum>
			break;
 80121c6:	e0a6      	b.n	8012316 <disp_layout+0x50a>
		case CODE_SVAL4:
			i++;
 80121c8:	6a3b      	ldr	r3, [r7, #32]
 80121ca:	3301      	adds	r3, #1
 80121cc:	623b      	str	r3, [r7, #32]
			v16s = (int16_t) _GET_REG(numdisp, d[i]);
 80121ce:	6a3b      	ldr	r3, [r7, #32]
 80121d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121d2:	4413      	add	r3, r2
 80121d4:	781b      	ldrb	r3, [r3, #0]
 80121d6:	4619      	mov	r1, r3
 80121d8:	6878      	ldr	r0, [r7, #4]
 80121da:	f7ff fdf9 	bl	8011dd0 <ihm_getvar>
 80121de:	4603      	mov	r3, r0
 80121e0:	82fb      	strh	r3, [r7, #22]
			write_snum4(v16s, curfont);
 80121e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80121e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80121e8:	4618      	mov	r0, r3
 80121ea:	f000 f95f 	bl	80124ac <write_snum4>
			break;
 80121ee:	e092      	b.n	8012316 <disp_layout+0x50a>
		case CODE_UVAL:
			i++;
 80121f0:	6a3b      	ldr	r3, [r7, #32]
 80121f2:	3301      	adds	r3, #1
 80121f4:	623b      	str	r3, [r7, #32]
			v16u = _GET_REG(numdisp, d[i]);
 80121f6:	6a3b      	ldr	r3, [r7, #32]
 80121f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121fa:	4413      	add	r3, r2
 80121fc:	781b      	ldrb	r3, [r3, #0]
 80121fe:	4619      	mov	r1, r3
 8012200:	6878      	ldr	r0, [r7, #4]
 8012202:	f7ff fde5 	bl	8011dd0 <ihm_getvar>
 8012206:	4603      	mov	r3, r0
 8012208:	84fb      	strh	r3, [r7, #38]	; 0x26
			write_unum(v16u, curfont);
 801220a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801220c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801220e:	4618      	mov	r0, r3
 8012210:	f000 f8fe 	bl	8012410 <write_unum>
			break;
 8012214:	e07f      	b.n	8012316 <disp_layout+0x50a>
		case CODE_GRAPH_LEVEL:
			i++;
 8012216:	6a3b      	ldr	r3, [r7, #32]
 8012218:	3301      	adds	r3, #1
 801221a:	623b      	str	r3, [r7, #32]
			v16u = _GET_REG(numdisp, d[i]);
 801221c:	6a3b      	ldr	r3, [r7, #32]
 801221e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012220:	4413      	add	r3, r2
 8012222:	781b      	ldrb	r3, [r3, #0]
 8012224:	4619      	mov	r1, r3
 8012226:	6878      	ldr	r0, [r7, #4]
 8012228:	f7ff fdd2 	bl	8011dd0 <ihm_getvar>
 801222c:	4603      	mov	r3, r0
 801222e:	84fb      	strh	r3, [r7, #38]	; 0x26
			write_bargraph(v16u, 0, 100);
 8012230:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012234:	2264      	movs	r2, #100	; 0x64
 8012236:	2100      	movs	r1, #0
 8012238:	4618      	mov	r0, r3
 801223a:	f000 f971 	bl	8012520 <write_bargraph>
			break;
 801223e:	e06a      	b.n	8012316 <disp_layout+0x50a>
		case CODE_GRAPH_SLEVEL:
			i++;
 8012240:	6a3b      	ldr	r3, [r7, #32]
 8012242:	3301      	adds	r3, #1
 8012244:	623b      	str	r3, [r7, #32]
			v16s = _GET_REG(numdisp, d[i]);
 8012246:	6a3b      	ldr	r3, [r7, #32]
 8012248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801224a:	4413      	add	r3, r2
 801224c:	781b      	ldrb	r3, [r3, #0]
 801224e:	4619      	mov	r1, r3
 8012250:	6878      	ldr	r0, [r7, #4]
 8012252:	f7ff fdbd 	bl	8011dd0 <ihm_getvar>
 8012256:	4603      	mov	r3, r0
 8012258:	82fb      	strh	r3, [r7, #22]
			write_sbargraph(v16s, -100, 100);
 801225a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801225e:	2264      	movs	r2, #100	; 0x64
 8012260:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8012264:	4618      	mov	r0, r3
 8012266:	f000 f9c7 	bl	80125f8 <write_sbargraph>
			break;
 801226a:	e054      	b.n	8012316 <disp_layout+0x50a>
		case CODE_TIM4_CNT: {
			extern TIM_HandleTypeDef htim4;
			v16u = htim4.Instance->CNT;
 801226c:	4b3c      	ldr	r3, [pc, #240]	; (8012360 <disp_layout+0x554>)
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012272:	84fb      	strh	r3, [r7, #38]	; 0x26
			write_unum(v16u, curfont);
 8012274:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012276:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012278:	4618      	mov	r0, r3
 801227a:	f000 f8c9 	bl	8012410 <write_unum>
			break;
 801227e:	e04a      	b.n	8012316 <disp_layout+0x50a>
		}
		case CODE_PROFILE:
			write_unum((int16_t)last_dur1, curfont);
 8012280:	4b38      	ldr	r3, [pc, #224]	; (8012364 <disp_layout+0x558>)
 8012282:	881b      	ldrh	r3, [r3, #0]
 8012284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012286:	4618      	mov	r0, r3
 8012288:	f000 f8c2 	bl	8012410 <write_unum>
			ssd1306_WriteChar('/', *curfont, White);
 801228c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801228e:	2301      	movs	r3, #1
 8012290:	ca06      	ldmia	r2, {r1, r2}
 8012292:	202f      	movs	r0, #47	; 0x2f
 8012294:	f7fe fd26 	bl	8010ce4 <ssd1306_WriteChar>
			write_unum((int16_t)last_dur2, curfont);
 8012298:	4b33      	ldr	r3, [pc, #204]	; (8012368 <disp_layout+0x55c>)
 801229a:	881b      	ldrh	r3, [r3, #0]
 801229c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801229e:	4618      	mov	r0, r3
 80122a0:	f000 f8b6 	bl	8012410 <write_unum>
			break;
 80122a4:	e037      	b.n	8012316 <disp_layout+0x50a>
		case CODE_DIR:
			i+=1;
 80122a6:	6a3b      	ldr	r3, [r7, #32]
 80122a8:	3301      	adds	r3, #1
 80122aa:	623b      	str	r3, [r7, #32]
			v16s = _GET_REG(numdisp, d[i]);
 80122ac:	6a3b      	ldr	r3, [r7, #32]
 80122ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122b0:	4413      	add	r3, r2
 80122b2:	781b      	ldrb	r3, [r3, #0]
 80122b4:	4619      	mov	r1, r3
 80122b6:	6878      	ldr	r0, [r7, #4]
 80122b8:	f7ff fd8a 	bl	8011dd0 <ihm_getvar>
 80122bc:	4603      	mov	r3, r0
 80122be:	82fb      	strh	r3, [r7, #22]
			if (v16s > 0) ssd1306_WriteChar('>', *curfont, White);
 80122c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	dd06      	ble.n	80122d6 <disp_layout+0x4ca>
 80122c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80122ca:	2301      	movs	r3, #1
 80122cc:	ca06      	ldmia	r2, {r1, r2}
 80122ce:	203e      	movs	r0, #62	; 0x3e
 80122d0:	f7fe fd08 	bl	8010ce4 <ssd1306_WriteChar>
			else if (v16s < 0) ssd1306_WriteChar('<', *curfont, White);
			else ssd1306_WriteChar('|', *curfont, White);
			break;
 80122d4:	e01f      	b.n	8012316 <disp_layout+0x50a>
			else if (v16s < 0) ssd1306_WriteChar('<', *curfont, White);
 80122d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	da06      	bge.n	80122ec <disp_layout+0x4e0>
 80122de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80122e0:	2301      	movs	r3, #1
 80122e2:	ca06      	ldmia	r2, {r1, r2}
 80122e4:	203c      	movs	r0, #60	; 0x3c
 80122e6:	f7fe fcfd 	bl	8010ce4 <ssd1306_WriteChar>
			break;
 80122ea:	e014      	b.n	8012316 <disp_layout+0x50a>
			else ssd1306_WriteChar('|', *curfont, White);
 80122ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80122ee:	2301      	movs	r3, #1
 80122f0:	ca06      	ldmia	r2, {r1, r2}
 80122f2:	207c      	movs	r0, #124	; 0x7c
 80122f4:	f7fe fcf6 	bl	8010ce4 <ssd1306_WriteChar>
			break;
 80122f8:	e00d      	b.n	8012316 <disp_layout+0x50a>


		default:
			switch (d[i] & 0xC0) {
 80122fa:	6a3b      	ldr	r3, [r7, #32]
 80122fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122fe:	4413      	add	r3, r2
 8012300:	781b      	ldrb	r3, [r3, #0]
 8012302:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012306:	2bc0      	cmp	r3, #192	; 0xc0
 8012308:	d000      	beq.n	801230c <disp_layout+0x500>
			default:
			case 0x80: break;
 801230a:	e004      	b.n	8012316 <disp_layout+0x50a>
			case 0xC0: i++; break;
 801230c:	6a3b      	ldr	r3, [r7, #32]
 801230e:	3301      	adds	r3, #1
 8012310:	623b      	str	r3, [r7, #32]
 8012312:	e000      	b.n	8012316 <disp_layout+0x50a>
		case CODE_NOP: break;
 8012314:	bf00      	nop
	for (int i=0; i<MAX_OPCODE_PER_DISPLAY; i++) {
 8012316:	6a3b      	ldr	r3, [r7, #32]
 8012318:	3301      	adds	r3, #1
 801231a:	623b      	str	r3, [r7, #32]
 801231c:	6a3b      	ldr	r3, [r7, #32]
 801231e:	2b17      	cmp	r3, #23
 8012320:	f77f ad91 	ble.w	8011e46 <disp_layout+0x3a>
 8012324:	e000      	b.n	8012328 <disp_layout+0x51c>
		if (CODE_END == d[i]) break;
 8012326:	bf00      	nop
			//case 0xB0: i+=2; break;
			//case 0xD0: i+=4; break;
			}
		}
	}
	uint32_t t1 = HAL_GetTick();
 8012328:	f7ef fd56 	bl	8001dd8 <HAL_GetTick>
 801232c:	60f8      	str	r0, [r7, #12]
	ssd1306_UpdateScreen();
 801232e:	f7fe fc53 	bl	8010bd8 <ssd1306_UpdateScreen>
	uint32_t t2 = HAL_GetTick();
 8012332:	f7ef fd51 	bl	8001dd8 <HAL_GetTick>
 8012336:	60b8      	str	r0, [r7, #8]
	last_dur1 = t2-t0;
 8012338:	68bb      	ldr	r3, [r7, #8]
 801233a:	b29a      	uxth	r2, r3
 801233c:	69fb      	ldr	r3, [r7, #28]
 801233e:	b29b      	uxth	r3, r3
 8012340:	1ad3      	subs	r3, r2, r3
 8012342:	b29a      	uxth	r2, r3
 8012344:	4b07      	ldr	r3, [pc, #28]	; (8012364 <disp_layout+0x558>)
 8012346:	801a      	strh	r2, [r3, #0]
	last_dur2 = t2-t1;
 8012348:	68bb      	ldr	r3, [r7, #8]
 801234a:	b29a      	uxth	r2, r3
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	b29b      	uxth	r3, r3
 8012350:	1ad3      	subs	r3, r2, r3
 8012352:	b29a      	uxth	r2, r3
 8012354:	4b04      	ldr	r3, [pc, #16]	; (8012368 <disp_layout+0x55c>)
 8012356:	801a      	strh	r2, [r3, #0]
}
 8012358:	bf00      	nop
 801235a:	3730      	adds	r7, #48	; 0x30
 801235c:	46bd      	mov	sp, r7
 801235e:	bd80      	pop	{r7, pc}
 8012360:	20005d1c 	.word	0x20005d1c
 8012364:	200051b4 	.word	0x200051b4
 8012368:	200051b6 	.word	0x200051b6

0801236c <_write_unum>:
	}
}
*/

static void _write_unum(uint16_t v, FontDef *curfont, uint8_t hzero)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b086      	sub	sp, #24
 8012370:	af00      	add	r7, sp, #0
 8012372:	4603      	mov	r3, r0
 8012374:	6039      	str	r1, [r7, #0]
 8012376:	80fb      	strh	r3, [r7, #6]
 8012378:	4613      	mov	r3, r2
 801237a:	717b      	strb	r3, [r7, #5]
	int f = 0;
 801237c:	2300      	movs	r3, #0
 801237e:	617b      	str	r3, [r7, #20]
	for (int i=10000;i>0; i = i /10) {
 8012380:	f242 7310 	movw	r3, #10000	; 0x2710
 8012384:	613b      	str	r3, [r7, #16]
 8012386:	e039      	b.n	80123fc <_write_unum+0x90>
		int n = v/i;
 8012388:	88fa      	ldrh	r2, [r7, #6]
 801238a:	693b      	ldr	r3, [r7, #16]
 801238c:	fb92 f3f3 	sdiv	r3, r2, r3
 8012390:	60fb      	str	r3, [r7, #12]
		if (!n && !f && (i>1)) {
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d112      	bne.n	80123be <_write_unum+0x52>
 8012398:	697b      	ldr	r3, [r7, #20]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d10f      	bne.n	80123be <_write_unum+0x52>
 801239e:	693b      	ldr	r3, [r7, #16]
 80123a0:	2b01      	cmp	r3, #1
 80123a2:	dd0c      	ble.n	80123be <_write_unum+0x52>
			if (!hzero) continue;
 80123a4:	797b      	ldrb	r3, [r7, #5]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d01f      	beq.n	80123ea <_write_unum+0x7e>
			if (hzero == ' ') {
 80123aa:	797b      	ldrb	r3, [r7, #5]
 80123ac:	2b20      	cmp	r3, #32
 80123ae:	d106      	bne.n	80123be <_write_unum+0x52>
				ssd1306_WriteChar(' ', *curfont, White);
 80123b0:	683a      	ldr	r2, [r7, #0]
 80123b2:	2301      	movs	r3, #1
 80123b4:	ca06      	ldmia	r2, {r1, r2}
 80123b6:	2020      	movs	r0, #32
 80123b8:	f7fe fc94 	bl	8010ce4 <ssd1306_WriteChar>
				continue;
 80123bc:	e016      	b.n	80123ec <_write_unum+0x80>
			}
		}
		f = 1;
 80123be:	2301      	movs	r3, #1
 80123c0:	617b      	str	r3, [r7, #20]
		ssd1306_WriteChar(n+'0', *curfont, White);
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	b2db      	uxtb	r3, r3
 80123c6:	3330      	adds	r3, #48	; 0x30
 80123c8:	b2d8      	uxtb	r0, r3
 80123ca:	683a      	ldr	r2, [r7, #0]
 80123cc:	2301      	movs	r3, #1
 80123ce:	ca06      	ldmia	r2, {r1, r2}
 80123d0:	f7fe fc88 	bl	8010ce4 <ssd1306_WriteChar>
		v = v - i*n;
 80123d4:	693b      	ldr	r3, [r7, #16]
 80123d6:	b29a      	uxth	r2, r3
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	b29b      	uxth	r3, r3
 80123dc:	fb12 f303 	smulbb	r3, r2, r3
 80123e0:	b29b      	uxth	r3, r3
 80123e2:	88fa      	ldrh	r2, [r7, #6]
 80123e4:	1ad3      	subs	r3, r2, r3
 80123e6:	80fb      	strh	r3, [r7, #6]
 80123e8:	e000      	b.n	80123ec <_write_unum+0x80>
			if (!hzero) continue;
 80123ea:	bf00      	nop
	for (int i=10000;i>0; i = i /10) {
 80123ec:	693b      	ldr	r3, [r7, #16]
 80123ee:	4a07      	ldr	r2, [pc, #28]	; (801240c <_write_unum+0xa0>)
 80123f0:	fb82 1203 	smull	r1, r2, r2, r3
 80123f4:	1092      	asrs	r2, r2, #2
 80123f6:	17db      	asrs	r3, r3, #31
 80123f8:	1ad3      	subs	r3, r2, r3
 80123fa:	613b      	str	r3, [r7, #16]
 80123fc:	693b      	ldr	r3, [r7, #16]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	dcc2      	bgt.n	8012388 <_write_unum+0x1c>
	}
}
 8012402:	bf00      	nop
 8012404:	3718      	adds	r7, #24
 8012406:	46bd      	mov	sp, r7
 8012408:	bd80      	pop	{r7, pc}
 801240a:	bf00      	nop
 801240c:	66666667 	.word	0x66666667

08012410 <write_unum>:
static void write_unum(uint16_t v, FontDef *curfont)
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b082      	sub	sp, #8
 8012414:	af00      	add	r7, sp, #0
 8012416:	4603      	mov	r3, r0
 8012418:	6039      	str	r1, [r7, #0]
 801241a:	80fb      	strh	r3, [r7, #6]
	_write_unum(v, curfont, 0);
 801241c:	88fb      	ldrh	r3, [r7, #6]
 801241e:	2200      	movs	r2, #0
 8012420:	6839      	ldr	r1, [r7, #0]
 8012422:	4618      	mov	r0, r3
 8012424:	f7ff ffa2 	bl	801236c <_write_unum>
}
 8012428:	bf00      	nop
 801242a:	3708      	adds	r7, #8
 801242c:	46bd      	mov	sp, r7
 801242e:	bd80      	pop	{r7, pc}

08012430 <write_snum>:
static void write_snum(int16_t v, FontDef *curfont)
{
 8012430:	b580      	push	{r7, lr}
 8012432:	b082      	sub	sp, #8
 8012434:	af00      	add	r7, sp, #0
 8012436:	4603      	mov	r3, r0
 8012438:	6039      	str	r1, [r7, #0]
 801243a:	80fb      	strh	r3, [r7, #6]
	if ((v<-5000)||(v>5000)) {
 801243c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012440:	4a17      	ldr	r2, [pc, #92]	; (80124a0 <write_snum+0x70>)
 8012442:	4293      	cmp	r3, r2
 8012444:	db05      	blt.n	8012452 <write_snum+0x22>
 8012446:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801244a:	f241 3288 	movw	r2, #5000	; 0x1388
 801244e:	4293      	cmp	r3, r2
 8012450:	dd06      	ble.n	8012460 <write_snum+0x30>
		itm_debug1(DBG_UI|DBG_ERR, "strange here", v);
 8012452:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012456:	461a      	mov	r2, r3
 8012458:	4912      	ldr	r1, [pc, #72]	; (80124a4 <write_snum+0x74>)
 801245a:	4813      	ldr	r0, [pc, #76]	; (80124a8 <write_snum+0x78>)
 801245c:	f7ff fc30 	bl	8011cc0 <itm_debug1>
	}
	if (v < 0) {
 8012460:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012464:	2b00      	cmp	r3, #0
 8012466:	da06      	bge.n	8012476 <write_snum+0x46>
		ssd1306_WriteChar('-', *curfont, White);
 8012468:	683a      	ldr	r2, [r7, #0]
 801246a:	2301      	movs	r3, #1
 801246c:	ca06      	ldmia	r2, {r1, r2}
 801246e:	202d      	movs	r0, #45	; 0x2d
 8012470:	f7fe fc38 	bl	8010ce4 <ssd1306_WriteChar>
 8012474:	e005      	b.n	8012482 <write_snum+0x52>
	} else {
		ssd1306_WriteChar('+', *curfont, White);
 8012476:	683a      	ldr	r2, [r7, #0]
 8012478:	2301      	movs	r3, #1
 801247a:	ca06      	ldmia	r2, {r1, r2}
 801247c:	202b      	movs	r0, #43	; 0x2b
 801247e:	f7fe fc31 	bl	8010ce4 <ssd1306_WriteChar>
	}
	write_unum(abs(v), curfont);
 8012482:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012486:	2b00      	cmp	r3, #0
 8012488:	bfb8      	it	lt
 801248a:	425b      	neglt	r3, r3
 801248c:	b29b      	uxth	r3, r3
 801248e:	6839      	ldr	r1, [r7, #0]
 8012490:	4618      	mov	r0, r3
 8012492:	f7ff ffbd 	bl	8012410 <write_unum>
}
 8012496:	bf00      	nop
 8012498:	3708      	adds	r7, #8
 801249a:	46bd      	mov	sp, r7
 801249c:	bd80      	pop	{r7, pc}
 801249e:	bf00      	nop
 80124a0:	ffffec78 	.word	0xffffec78
 80124a4:	080190cc 	.word	0x080190cc
 80124a8:	80000800 	.word	0x80000800

080124ac <write_snum4>:

static void write_snum4(int16_t v, FontDef *curfont)
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	b082      	sub	sp, #8
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	4603      	mov	r3, r0
 80124b4:	6039      	str	r1, [r7, #0]
 80124b6:	80fb      	strh	r3, [r7, #6]
	if (v<-9999) v=-9999;
 80124b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80124bc:	4a17      	ldr	r2, [pc, #92]	; (801251c <write_snum4+0x70>)
 80124be:	4293      	cmp	r3, r2
 80124c0:	da02      	bge.n	80124c8 <write_snum4+0x1c>
 80124c2:	f64d 03f1 	movw	r3, #55537	; 0xd8f1
 80124c6:	80fb      	strh	r3, [r7, #6]
	if (v>9999) v=9999;
 80124c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80124cc:	f242 720f 	movw	r2, #9999	; 0x270f
 80124d0:	4293      	cmp	r3, r2
 80124d2:	dd02      	ble.n	80124da <write_snum4+0x2e>
 80124d4:	f242 730f 	movw	r3, #9999	; 0x270f
 80124d8:	80fb      	strh	r3, [r7, #6]
	if (v < 0) {
 80124da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	da06      	bge.n	80124f0 <write_snum4+0x44>
		ssd1306_WriteChar('-', *curfont, White);
 80124e2:	683a      	ldr	r2, [r7, #0]
 80124e4:	2301      	movs	r3, #1
 80124e6:	ca06      	ldmia	r2, {r1, r2}
 80124e8:	202d      	movs	r0, #45	; 0x2d
 80124ea:	f7fe fbfb 	bl	8010ce4 <ssd1306_WriteChar>
 80124ee:	e005      	b.n	80124fc <write_snum4+0x50>
	} else {
		ssd1306_WriteChar('+', *curfont, White);
 80124f0:	683a      	ldr	r2, [r7, #0]
 80124f2:	2301      	movs	r3, #1
 80124f4:	ca06      	ldmia	r2, {r1, r2}
 80124f6:	202b      	movs	r0, #43	; 0x2b
 80124f8:	f7fe fbf4 	bl	8010ce4 <ssd1306_WriteChar>
	}
	_write_unum(abs(v), curfont,1);
 80124fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012500:	2b00      	cmp	r3, #0
 8012502:	bfb8      	it	lt
 8012504:	425b      	neglt	r3, r3
 8012506:	b29b      	uxth	r3, r3
 8012508:	2201      	movs	r2, #1
 801250a:	6839      	ldr	r1, [r7, #0]
 801250c:	4618      	mov	r0, r3
 801250e:	f7ff ff2d 	bl	801236c <_write_unum>
}
 8012512:	bf00      	nop
 8012514:	3708      	adds	r7, #8
 8012516:	46bd      	mov	sp, r7
 8012518:	bd80      	pop	{r7, pc}
 801251a:	bf00      	nop
 801251c:	ffffd8f1 	.word	0xffffd8f1

08012520 <write_bargraph>:

static void write_bargraph(int16_t v, int16_t min, int16_t max)
{
 8012520:	b590      	push	{r4, r7, lr}
 8012522:	b087      	sub	sp, #28
 8012524:	af02      	add	r7, sp, #8
 8012526:	4603      	mov	r3, r0
 8012528:	80fb      	strh	r3, [r7, #6]
 801252a:	460b      	mov	r3, r1
 801252c:	80bb      	strh	r3, [r7, #4]
 801252e:	4613      	mov	r3, r2
 8012530:	807b      	strh	r3, [r7, #2]
	uint8_t x0 = ssd1306_GetCursorX();
 8012532:	f7fe fc9d 	bl	8010e70 <ssd1306_GetCursorX>
 8012536:	4603      	mov	r3, r0
 8012538:	73fb      	strb	r3, [r7, #15]
	uint8_t y0 = ssd1306_GetCursorY();
 801253a:	f7fe fca5 	bl	8010e88 <ssd1306_GetCursorY>
 801253e:	4603      	mov	r3, r0
 8012540:	73bb      	strb	r3, [r7, #14]
	const uint8_t w = 50;
 8012542:	2332      	movs	r3, #50	; 0x32
 8012544:	737b      	strb	r3, [r7, #13]
	const uint8_t h = 11; //y0+=3;
 8012546:	230b      	movs	r3, #11
 8012548:	733b      	strb	r3, [r7, #12]
	ssd1306_DrawRectangle(x0, y0, x0+w, y0+h, White);
 801254a:	7bfa      	ldrb	r2, [r7, #15]
 801254c:	7b7b      	ldrb	r3, [r7, #13]
 801254e:	4413      	add	r3, r2
 8012550:	b2dc      	uxtb	r4, r3
 8012552:	7bba      	ldrb	r2, [r7, #14]
 8012554:	7b3b      	ldrb	r3, [r7, #12]
 8012556:	4413      	add	r3, r2
 8012558:	b2da      	uxtb	r2, r3
 801255a:	7bb9      	ldrb	r1, [r7, #14]
 801255c:	7bf8      	ldrb	r0, [r7, #15]
 801255e:	2301      	movs	r3, #1
 8012560:	9300      	str	r3, [sp, #0]
 8012562:	4613      	mov	r3, r2
 8012564:	4622      	mov	r2, r4
 8012566:	f7fe fd07 	bl	8010f78 <ssd1306_DrawRectangle>

	if (v>max) v=max;
 801256a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801256e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012572:	429a      	cmp	r2, r3
 8012574:	dd01      	ble.n	801257a <write_bargraph+0x5a>
 8012576:	887b      	ldrh	r3, [r7, #2]
 8012578:	80fb      	strh	r3, [r7, #6]
	if (v<min) v=min;
 801257a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801257e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012582:	429a      	cmp	r2, r3
 8012584:	da01      	bge.n	801258a <write_bargraph+0x6a>
 8012586:	88bb      	ldrh	r3, [r7, #4]
 8012588:	80fb      	strh	r3, [r7, #6]
	int l = ((int)w*(v-min))/(max-min);
 801258a:	7b7b      	ldrb	r3, [r7, #13]
 801258c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8012590:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012594:	1a8a      	subs	r2, r1, r2
 8012596:	fb02 f203 	mul.w	r2, r2, r3
 801259a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801259e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80125a2:	1acb      	subs	r3, r1, r3
 80125a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80125a8:	60bb      	str	r3, [r7, #8]
	if (l>0) ssd1306_FillZone(x0, y0, l, h, White);
 80125aa:	68bb      	ldr	r3, [r7, #8]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	dd09      	ble.n	80125c4 <write_bargraph+0xa4>
 80125b0:	68bb      	ldr	r3, [r7, #8]
 80125b2:	b2da      	uxtb	r2, r3
 80125b4:	7b3c      	ldrb	r4, [r7, #12]
 80125b6:	7bb9      	ldrb	r1, [r7, #14]
 80125b8:	7bf8      	ldrb	r0, [r7, #15]
 80125ba:	2301      	movs	r3, #1
 80125bc:	9300      	str	r3, [sp, #0]
 80125be:	4623      	mov	r3, r4
 80125c0:	f7fe fa7c 	bl	8010abc <ssd1306_FillZone>
	if ((min<0) && (max>0)) {
 80125c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	da11      	bge.n	80125f0 <write_bargraph+0xd0>
 80125cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	dd0d      	ble.n	80125f0 <write_bargraph+0xd0>
		l = ((int)w*(0-min))/(max-min);
 80125d4:	7b7b      	ldrb	r3, [r7, #13]
 80125d6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80125da:	4252      	negs	r2, r2
 80125dc:	fb02 f203 	mul.w	r2, r2, r3
 80125e0:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80125e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80125e8:	1acb      	subs	r3, r1, r3
 80125ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80125ee:	60bb      	str	r3, [r7, #8]
		/// TODO ?
	}
}
 80125f0:	bf00      	nop
 80125f2:	3714      	adds	r7, #20
 80125f4:	46bd      	mov	sp, r7
 80125f6:	bd90      	pop	{r4, r7, pc}

080125f8 <write_sbargraph>:



static void write_sbargraph(int16_t v, int16_t min, int16_t max)
{
 80125f8:	b590      	push	{r4, r7, lr}
 80125fa:	b089      	sub	sp, #36	; 0x24
 80125fc:	af02      	add	r7, sp, #8
 80125fe:	4603      	mov	r3, r0
 8012600:	80fb      	strh	r3, [r7, #6]
 8012602:	460b      	mov	r3, r1
 8012604:	80bb      	strh	r3, [r7, #4]
 8012606:	4613      	mov	r3, r2
 8012608:	807b      	strh	r3, [r7, #2]
	uint8_t x0 = ssd1306_GetCursorX();
 801260a:	f7fe fc31 	bl	8010e70 <ssd1306_GetCursorX>
 801260e:	4603      	mov	r3, r0
 8012610:	75fb      	strb	r3, [r7, #23]
	uint8_t y0 = ssd1306_GetCursorY();
 8012612:	f7fe fc39 	bl	8010e88 <ssd1306_GetCursorY>
 8012616:	4603      	mov	r3, r0
 8012618:	75bb      	strb	r3, [r7, #22]
	const uint8_t w = 50;
 801261a:	2332      	movs	r3, #50	; 0x32
 801261c:	757b      	strb	r3, [r7, #21]
	const uint8_t h = 11; //y0+=3;
 801261e:	230b      	movs	r3, #11
 8012620:	753b      	strb	r3, [r7, #20]
	ssd1306_DrawRectangle(x0, y0, x0+w, y0+h, White);
 8012622:	7dfa      	ldrb	r2, [r7, #23]
 8012624:	7d7b      	ldrb	r3, [r7, #21]
 8012626:	4413      	add	r3, r2
 8012628:	b2dc      	uxtb	r4, r3
 801262a:	7dba      	ldrb	r2, [r7, #22]
 801262c:	7d3b      	ldrb	r3, [r7, #20]
 801262e:	4413      	add	r3, r2
 8012630:	b2da      	uxtb	r2, r3
 8012632:	7db9      	ldrb	r1, [r7, #22]
 8012634:	7df8      	ldrb	r0, [r7, #23]
 8012636:	2301      	movs	r3, #1
 8012638:	9300      	str	r3, [sp, #0]
 801263a:	4613      	mov	r3, r2
 801263c:	4622      	mov	r2, r4
 801263e:	f7fe fc9b 	bl	8010f78 <ssd1306_DrawRectangle>

	if (v>max) v=max;
 8012642:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012646:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801264a:	429a      	cmp	r2, r3
 801264c:	dd01      	ble.n	8012652 <write_sbargraph+0x5a>
 801264e:	887b      	ldrh	r3, [r7, #2]
 8012650:	80fb      	strh	r3, [r7, #6]
	if (v<min) v=min;
 8012652:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012656:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801265a:	429a      	cmp	r2, r3
 801265c:	da01      	bge.n	8012662 <write_sbargraph+0x6a>
 801265e:	88bb      	ldrh	r3, [r7, #4]
 8012660:	80fb      	strh	r3, [r7, #6]
	int m = ((int)w*(0-min))/(max-min);
 8012662:	7d7b      	ldrb	r3, [r7, #21]
 8012664:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012668:	4252      	negs	r2, r2
 801266a:	fb02 f203 	mul.w	r2, r2, r3
 801266e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8012672:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012676:	1acb      	subs	r3, r1, r3
 8012678:	fb92 f3f3 	sdiv	r3, r2, r3
 801267c:	613b      	str	r3, [r7, #16]
	int l = ((int)w*(v-min))/(max-min);
 801267e:	7d7b      	ldrb	r3, [r7, #21]
 8012680:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8012684:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012688:	1a8a      	subs	r2, r1, r2
 801268a:	fb02 f203 	mul.w	r2, r2, r3
 801268e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8012692:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012696:	1acb      	subs	r3, r1, r3
 8012698:	fb92 f3f3 	sdiv	r3, r2, r3
 801269c:	60fb      	str	r3, [r7, #12]
	if (l>m) ssd1306_FillZone(x0+m, y0, l-m, h, White);
 801269e:	68fa      	ldr	r2, [r7, #12]
 80126a0:	693b      	ldr	r3, [r7, #16]
 80126a2:	429a      	cmp	r2, r3
 80126a4:	dd12      	ble.n	80126cc <write_sbargraph+0xd4>
 80126a6:	693b      	ldr	r3, [r7, #16]
 80126a8:	b2da      	uxtb	r2, r3
 80126aa:	7dfb      	ldrb	r3, [r7, #23]
 80126ac:	4413      	add	r3, r2
 80126ae:	b2d8      	uxtb	r0, r3
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	b2da      	uxtb	r2, r3
 80126b4:	693b      	ldr	r3, [r7, #16]
 80126b6:	b2db      	uxtb	r3, r3
 80126b8:	1ad3      	subs	r3, r2, r3
 80126ba:	b2da      	uxtb	r2, r3
 80126bc:	7d3c      	ldrb	r4, [r7, #20]
 80126be:	7db9      	ldrb	r1, [r7, #22]
 80126c0:	2301      	movs	r3, #1
 80126c2:	9300      	str	r3, [sp, #0]
 80126c4:	4623      	mov	r3, r4
 80126c6:	f7fe f9f9 	bl	8010abc <ssd1306_FillZone>
 80126ca:	e011      	b.n	80126f0 <write_sbargraph+0xf8>
	else ssd1306_FillZone(x0+l, y0, m-l, h, White);
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	b2da      	uxtb	r2, r3
 80126d0:	7dfb      	ldrb	r3, [r7, #23]
 80126d2:	4413      	add	r3, r2
 80126d4:	b2d8      	uxtb	r0, r3
 80126d6:	693b      	ldr	r3, [r7, #16]
 80126d8:	b2da      	uxtb	r2, r3
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	b2db      	uxtb	r3, r3
 80126de:	1ad3      	subs	r3, r2, r3
 80126e0:	b2da      	uxtb	r2, r3
 80126e2:	7d3c      	ldrb	r4, [r7, #20]
 80126e4:	7db9      	ldrb	r1, [r7, #22]
 80126e6:	2301      	movs	r3, #1
 80126e8:	9300      	str	r3, [sp, #0]
 80126ea:	4623      	mov	r3, r4
 80126ec:	f7fe f9e6 	bl	8010abc <ssd1306_FillZone>
	ssd1306_Line(x0+m, y0-1, x0+m, y0+h+2, White);
 80126f0:	693b      	ldr	r3, [r7, #16]
 80126f2:	b2da      	uxtb	r2, r3
 80126f4:	7dfb      	ldrb	r3, [r7, #23]
 80126f6:	4413      	add	r3, r2
 80126f8:	b2d8      	uxtb	r0, r3
 80126fa:	7dbb      	ldrb	r3, [r7, #22]
 80126fc:	3b01      	subs	r3, #1
 80126fe:	b2d9      	uxtb	r1, r3
 8012700:	693b      	ldr	r3, [r7, #16]
 8012702:	b2da      	uxtb	r2, r3
 8012704:	7dfb      	ldrb	r3, [r7, #23]
 8012706:	4413      	add	r3, r2
 8012708:	b2dc      	uxtb	r4, r3
 801270a:	7dba      	ldrb	r2, [r7, #22]
 801270c:	7d3b      	ldrb	r3, [r7, #20]
 801270e:	4413      	add	r3, r2
 8012710:	b2db      	uxtb	r3, r3
 8012712:	3302      	adds	r3, #2
 8012714:	b2da      	uxtb	r2, r3
 8012716:	2301      	movs	r3, #1
 8012718:	9300      	str	r3, [sp, #0]
 801271a:	4613      	mov	r3, r2
 801271c:	4622      	mov	r2, r4
 801271e:	f7fe fbbf 	bl	8010ea0 <ssd1306_Line>
	if ((min<0) && (max>0)) {
 8012722:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012726:	2b00      	cmp	r3, #0
 8012728:	da11      	bge.n	801274e <write_sbargraph+0x156>
 801272a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801272e:	2b00      	cmp	r3, #0
 8012730:	dd0d      	ble.n	801274e <write_sbargraph+0x156>
		l = ((int)w*(0-min))/(max-min);
 8012732:	7d7b      	ldrb	r3, [r7, #21]
 8012734:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012738:	4252      	negs	r2, r2
 801273a:	fb02 f203 	mul.w	r2, r2, r3
 801273e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8012742:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012746:	1acb      	subs	r3, r1, r3
 8012748:	fb92 f3f3 	sdiv	r3, r2, r3
 801274c:	60fb      	str	r3, [r7, #12]
		/// TODO
	}
}
 801274e:	bf00      	nop
 8012750:	371c      	adds	r7, #28
 8012752:	46bd      	mov	sp, r7
 8012754:	bd90      	pop	{r4, r7, pc}
	...

08012758 <itm_debug1>:
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b086      	sub	sp, #24
 801275c:	af02      	add	r7, sp, #8
 801275e:	60f8      	str	r0, [r7, #12]
 8012760:	60b9      	str	r1, [r7, #8]
 8012762:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8012764:	4b08      	ldr	r3, [pc, #32]	; (8012788 <itm_debug1+0x30>)
 8012766:	681a      	ldr	r2, [r3, #0]
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	4013      	ands	r3, r2
 801276c:	2b00      	cmp	r3, #0
 801276e:	d007      	beq.n	8012780 <itm_debug1+0x28>
 8012770:	2301      	movs	r3, #1
 8012772:	9300      	str	r3, [sp, #0]
 8012774:	2300      	movs	r3, #0
 8012776:	2200      	movs	r2, #0
 8012778:	6879      	ldr	r1, [r7, #4]
 801277a:	68b8      	ldr	r0, [r7, #8]
 801277c:	f006 f87a 	bl	8018874 <_itm_debug3>
}
 8012780:	bf00      	nop
 8012782:	3710      	adds	r7, #16
 8012784:	46bd      	mov	sp, r7
 8012786:	bd80      	pop	{r7, pc}
 8012788:	20000574 	.word	0x20000574

0801278c <itm_debug2>:
{
 801278c:	b580      	push	{r7, lr}
 801278e:	b086      	sub	sp, #24
 8012790:	af02      	add	r7, sp, #8
 8012792:	60f8      	str	r0, [r7, #12]
 8012794:	60b9      	str	r1, [r7, #8]
 8012796:	607a      	str	r2, [r7, #4]
 8012798:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 801279a:	4b09      	ldr	r3, [pc, #36]	; (80127c0 <itm_debug2+0x34>)
 801279c:	681a      	ldr	r2, [r3, #0]
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	4013      	ands	r3, r2
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d007      	beq.n	80127b6 <itm_debug2+0x2a>
 80127a6:	2302      	movs	r3, #2
 80127a8:	9300      	str	r3, [sp, #0]
 80127aa:	2300      	movs	r3, #0
 80127ac:	683a      	ldr	r2, [r7, #0]
 80127ae:	6879      	ldr	r1, [r7, #4]
 80127b0:	68b8      	ldr	r0, [r7, #8]
 80127b2:	f006 f85f 	bl	8018874 <_itm_debug3>
}
 80127b6:	bf00      	nop
 80127b8:	3710      	adds	r7, #16
 80127ba:	46bd      	mov	sp, r7
 80127bc:	bd80      	pop	{r7, pc}
 80127be:	bf00      	nop
 80127c0:	20000574 	.word	0x20000574

080127c4 <mqf_read_to_ui>:

LFMQUEUE_DEF_H(to_forward_usb, msg_64_t)
LFMQUEUE_DEF_H(from_forward_usb, msg_64_t)


LFMQUEUE_DEF_H(to_ui, msg_64_t)
 80127c4:	b580      	push	{r7, lr}
 80127c6:	b082      	sub	sp, #8
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	6078      	str	r0, [r7, #4]
 80127cc:	6879      	ldr	r1, [r7, #4]
 80127ce:	4804      	ldr	r0, [pc, #16]	; (80127e0 <mqf_read_to_ui+0x1c>)
 80127d0:	f006 f9d0 	bl	8018b74 <mqf_read>
 80127d4:	4603      	mov	r3, r0
 80127d6:	4618      	mov	r0, r3
 80127d8:	3708      	adds	r7, #8
 80127da:	46bd      	mov	sp, r7
 80127dc:	bd80      	pop	{r7, pc}
 80127de:	bf00      	nop
 80127e0:	20000548 	.word	0x20000548

080127e4 <mqf_write_from_ui>:
LFMQUEUE_DEF_H(from_ui, msg_64_t)
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b082      	sub	sp, #8
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
 80127ec:	6879      	ldr	r1, [r7, #4]
 80127ee:	4804      	ldr	r0, [pc, #16]	; (8012800 <mqf_write_from_ui+0x1c>)
 80127f0:	f006 f946 	bl	8018a80 <mqf_write>
 80127f4:	4603      	mov	r3, r0
 80127f6:	4618      	mov	r0, r3
 80127f8:	3708      	adds	r7, #8
 80127fa:	46bd      	mov	sp, r7
 80127fc:	bd80      	pop	{r7, pc}
 80127fe:	bf00      	nop
 8012800:	20000554 	.word	0x20000554

08012804 <get_srotary>:
	return ((p<<ENC_MUL2)>>ENC_DIV2);//>>1;
}


static int16_t get_srotary(TIM_HandleTypeDef *ptdef)
{
 8012804:	b480      	push	{r7}
 8012806:	b085      	sub	sp, #20
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]
	int16_t p = __HAL_TIM_GET_COUNTER(ptdef);
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012812:	81fb      	strh	r3, [r7, #14]
	if (p<-ENC_MAX-MIDDLE_ZERO) {
 8012814:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012818:	f113 0f36 	cmn.w	r3, #54	; 0x36
 801281c:	da08      	bge.n	8012830 <get_srotary+0x2c>
		p = -ENC_MAX-MIDDLE_ZERO;
 801281e:	f64f 73ca 	movw	r3, #65482	; 0xffca
 8012822:	81fb      	strh	r3, [r7, #14]
		__HAL_TIM_SET_COUNTER(ptdef, p);
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801282c:	625a      	str	r2, [r3, #36]	; 0x24
 801282e:	e00a      	b.n	8012846 <get_srotary+0x42>
	} else if (p>=ENC_MAX+MIDDLE_ZERO) {
 8012830:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012834:	2b35      	cmp	r3, #53	; 0x35
 8012836:	dd06      	ble.n	8012846 <get_srotary+0x42>
		p=ENC_MAX+MIDDLE_ZERO;
 8012838:	2336      	movs	r3, #54	; 0x36
 801283a:	81fb      	strh	r3, [r7, #14]
		__HAL_TIM_SET_COUNTER(ptdef, p);
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012844:	625a      	str	r2, [r3, #36]	; 0x24
	}
	if (abs(p)<MIDDLE_ZERO) p=0;
 8012846:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801284a:	f113 0f03 	cmn.w	r3, #3
 801284e:	db06      	blt.n	801285e <get_srotary+0x5a>
 8012850:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012854:	2b03      	cmp	r3, #3
 8012856:	dc02      	bgt.n	801285e <get_srotary+0x5a>
 8012858:	2300      	movs	r3, #0
 801285a:	81fb      	strh	r3, [r7, #14]
 801285c:	e00c      	b.n	8012878 <get_srotary+0x74>
	else if (p>0) p=p-MIDDLE_ZERO;
 801285e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012862:	2b00      	cmp	r3, #0
 8012864:	dd04      	ble.n	8012870 <get_srotary+0x6c>
 8012866:	89fb      	ldrh	r3, [r7, #14]
 8012868:	3b04      	subs	r3, #4
 801286a:	b29b      	uxth	r3, r3
 801286c:	81fb      	strh	r3, [r7, #14]
 801286e:	e003      	b.n	8012878 <get_srotary+0x74>
	else p=p+MIDDLE_ZERO;
 8012870:	89fb      	ldrh	r3, [r7, #14]
 8012872:	3304      	adds	r3, #4
 8012874:	b29b      	uxth	r3, r3
 8012876:	81fb      	strh	r3, [r7, #14]
	return ((p<<ENC_MUL2)>>ENC_DIV2);//>>1;
 8012878:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801287c:	005b      	lsls	r3, r3, #1
 801287e:	b21b      	sxth	r3, r3
}
 8012880:	4618      	mov	r0, r3
 8012882:	3714      	adds	r7, #20
 8012884:	46bd      	mov	sp, r7
 8012886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288a:	4770      	bx	lr

0801288c <ihm_runtick>:
static void ihm_runtick_testcanton(int);
static void ihm_runtick_detect(int);
static void ihm_runtick_detect1(int);

void ihm_runtick(void)
{
 801288c:	b580      	push	{r7, lr}
 801288e:	b082      	sub	sp, #8
 8012890:	af00      	add	r7, sp, #0
	static int performInit = 1;
	runmode_t orm = run_mode;
 8012892:	4b24      	ldr	r3, [pc, #144]	; (8012924 <ihm_runtick+0x98>)
 8012894:	781b      	ldrb	r3, [r3, #0]
 8012896:	71fb      	strb	r3, [r7, #7]
	switch (run_mode) {
 8012898:	4b22      	ldr	r3, [pc, #136]	; (8012924 <ihm_runtick+0x98>)
 801289a:	781b      	ldrb	r3, [r3, #0]
 801289c:	2b04      	cmp	r3, #4
 801289e:	d82b      	bhi.n	80128f8 <ihm_runtick+0x6c>
 80128a0:	a201      	add	r2, pc, #4	; (adr r2, 80128a8 <ihm_runtick+0x1c>)
 80128a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128a6:	bf00      	nop
 80128a8:	080128c9 	.word	0x080128c9
 80128ac:	080128bd 	.word	0x080128bd
 80128b0:	080128d5 	.word	0x080128d5
 80128b4:	080128e1 	.word	0x080128e1
 80128b8:	080128ed 	.word	0x080128ed
	case runmode_normal:	ihm_runtick_normal(performInit); 	break;
 80128bc:	4b1a      	ldr	r3, [pc, #104]	; (8012928 <ihm_runtick+0x9c>)
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	4618      	mov	r0, r3
 80128c2:	f000 f8a3 	bl	8012a0c <ihm_runtick_normal>
 80128c6:	e01d      	b.n	8012904 <ihm_runtick+0x78>
	case runmode_off:		ihm_runtick_off(performInit); 		break;
 80128c8:	4b17      	ldr	r3, [pc, #92]	; (8012928 <ihm_runtick+0x9c>)
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	4618      	mov	r0, r3
 80128ce:	f000 fad7 	bl	8012e80 <ihm_runtick_off>
 80128d2:	e017      	b.n	8012904 <ihm_runtick+0x78>
	case runmode_testcanton:ihm_runtick_testcanton(performInit); break;
 80128d4:	4b14      	ldr	r3, [pc, #80]	; (8012928 <ihm_runtick+0x9c>)
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	4618      	mov	r0, r3
 80128da:	f000 fb1b 	bl	8012f14 <ihm_runtick_testcanton>
 80128de:	e011      	b.n	8012904 <ihm_runtick+0x78>
	case runmode_detect1:	ihm_runtick_detect1(performInit);	break;
 80128e0:	4b11      	ldr	r3, [pc, #68]	; (8012928 <ihm_runtick+0x9c>)
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	4618      	mov	r0, r3
 80128e6:	f000 fb2b 	bl	8012f40 <ihm_runtick_detect1>
 80128ea:	e00b      	b.n	8012904 <ihm_runtick+0x78>
	case runmode_detect:	ihm_runtick_detect(performInit);	break;
 80128ec:	4b0e      	ldr	r3, [pc, #56]	; (8012928 <ihm_runtick+0x9c>)
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	4618      	mov	r0, r3
 80128f2:	f000 fb1a 	bl	8012f2a <ihm_runtick_detect>
 80128f6:	e005      	b.n	8012904 <ihm_runtick+0x78>
	default:				ihm_runtick_off(performInit);		break;
 80128f8:	4b0b      	ldr	r3, [pc, #44]	; (8012928 <ihm_runtick+0x9c>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	4618      	mov	r0, r3
 80128fe:	f000 fabf 	bl	8012e80 <ihm_runtick_off>
 8012902:	bf00      	nop
	}
	performInit = (run_mode == orm) ? 0 : 1;
 8012904:	4b07      	ldr	r3, [pc, #28]	; (8012924 <ihm_runtick+0x98>)
 8012906:	781b      	ldrb	r3, [r3, #0]
 8012908:	79fa      	ldrb	r2, [r7, #7]
 801290a:	429a      	cmp	r2, r3
 801290c:	bf14      	ite	ne
 801290e:	2301      	movne	r3, #1
 8012910:	2300      	moveq	r3, #0
 8012912:	b2db      	uxtb	r3, r3
 8012914:	461a      	mov	r2, r3
 8012916:	4b04      	ldr	r3, [pc, #16]	; (8012928 <ihm_runtick+0x9c>)
 8012918:	601a      	str	r2, [r3, #0]
}
 801291a:	bf00      	nop
 801291c:	3708      	adds	r7, #8
 801291e:	46bd      	mov	sp, r7
 8012920:	bd80      	pop	{r7, pc}
 8012922:	bf00      	nop
 8012924:	200051b9 	.word	0x200051b9
 8012928:	20000214 	.word	0x20000214

0801292c <set_displayout>:
// TODO : change this for per display struct
static ihm_mode_t ihm_dispmode = mode_init;
//static int ihm_train = 0;

static void set_displayout(void)
{
 801292c:	b580      	push	{r7, lr}
 801292e:	af00      	add	r7, sp, #0
	switch (ihm_dispmode) {
 8012930:	4b18      	ldr	r3, [pc, #96]	; (8012994 <set_displayout+0x68>)
 8012932:	781b      	ldrb	r3, [r3, #0]
 8012934:	3b01      	subs	r3, #1
 8012936:	2b03      	cmp	r3, #3
 8012938:	d80a      	bhi.n	8012950 <set_displayout+0x24>
 801293a:	a201      	add	r2, pc, #4	; (adr r2, 8012940 <set_displayout+0x14>)
 801293c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012940:	0801295b 	.word	0x0801295b
 8012944:	08012965 	.word	0x08012965
 8012948:	0801296f 	.word	0x0801296f
 801294c:	08012979 	.word	0x08012979
	default:
	case mode_init: 	  	ihm_setlayout(0, LAYOUT_INIT); break;
 8012950:	2101      	movs	r1, #1
 8012952:	2000      	movs	r0, #0
 8012954:	f7ff f9ce 	bl	8011cf4 <ihm_setlayout>
 8012958:	e013      	b.n	8012982 <set_displayout+0x56>
	case mode_ina_detect:	ihm_setlayout(0, LAYOUT_INA3221_DETECT); break;
 801295a:	21c8      	movs	r1, #200	; 0xc8
 801295c:	2000      	movs	r0, #0
 801295e:	f7ff f9c9 	bl	8011cf4 <ihm_setlayout>
 8012962:	e00e      	b.n	8012982 <set_displayout+0x56>
	case mode_ina_val:		ihm_setlayout(0, LAYOUT_INA3221_VAL); break;
 8012964:	21c9      	movs	r1, #201	; 0xc9
 8012966:	2000      	movs	r0, #0
 8012968:	f7ff f9c4 	bl	8011cf4 <ihm_setlayout>
 801296c:	e009      	b.n	8012982 <set_displayout+0x56>

	case mode_manual:		ihm_setlayout(0, LAYOUT_MANUAL); break;
 801296e:	2102      	movs	r1, #2
 8012970:	2000      	movs	r0, #0
 8012972:	f7ff f9bf 	bl	8011cf4 <ihm_setlayout>
 8012976:	e004      	b.n	8012982 <set_displayout+0x56>
	case mode_auto: 		ihm_setlayout(0, LAYOUT_AUTO); break;
 8012978:	2103      	movs	r1, #3
 801297a:	2000      	movs	r0, #0
 801297c:	f7ff f9ba 	bl	8011cf4 <ihm_setlayout>
 8012980:	bf00      	nop
	}
	SET_NEEDSREFRESH(0);
 8012982:	4b05      	ldr	r3, [pc, #20]	; (8012998 <set_displayout+0x6c>)
 8012984:	781b      	ldrb	r3, [r3, #0]
 8012986:	f043 0301 	orr.w	r3, r3, #1
 801298a:	b2da      	uxtb	r2, r3
 801298c:	4b02      	ldr	r3, [pc, #8]	; (8012998 <set_displayout+0x6c>)
 801298e:	701a      	strb	r2, [r3, #0]
}
 8012990:	bf00      	nop
 8012992:	bd80      	pop	{r7, pc}
 8012994:	200051ba 	.word	0x200051ba
 8012998:	200051b8 	.word	0x200051b8

0801299c <is_special_dispmode>:

static int is_special_dispmode(void)
{
 801299c:	b480      	push	{r7}
 801299e:	af00      	add	r7, sp, #0
	switch (ihm_dispmode) {
 80129a0:	4b0e      	ldr	r3, [pc, #56]	; (80129dc <is_special_dispmode+0x40>)
 80129a2:	781b      	ldrb	r3, [r3, #0]
 80129a4:	3b01      	subs	r3, #1
 80129a6:	2b03      	cmp	r3, #3
 80129a8:	d80a      	bhi.n	80129c0 <is_special_dispmode+0x24>
 80129aa:	a201      	add	r2, pc, #4	; (adr r2, 80129b0 <is_special_dispmode+0x14>)
 80129ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129b0:	080129c5 	.word	0x080129c5
 80129b4:	080129c9 	.word	0x080129c9
 80129b8:	080129cd 	.word	0x080129cd
 80129bc:	080129d1 	.word	0x080129d1
	default:
	case mode_init: 	  	return 0;
 80129c0:	2300      	movs	r3, #0
 80129c2:	e006      	b.n	80129d2 <is_special_dispmode+0x36>
	case mode_ina_detect:	return 1;
 80129c4:	2301      	movs	r3, #1
 80129c6:	e004      	b.n	80129d2 <is_special_dispmode+0x36>
	case mode_ina_val:		return 1;
 80129c8:	2301      	movs	r3, #1
 80129ca:	e002      	b.n	80129d2 <is_special_dispmode+0x36>

	case mode_manual:		return 0;
 80129cc:	2300      	movs	r3, #0
 80129ce:	e000      	b.n	80129d2 <is_special_dispmode+0x36>
	case mode_auto: 		return 0;
 80129d0:	2300      	movs	r3, #0
	}
}
 80129d2:	4618      	mov	r0, r3
 80129d4:	46bd      	mov	sp, r7
 80129d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129da:	4770      	bx	lr
 80129dc:	200051ba 	.word	0x200051ba

080129e0 <set_dispmode>:

static void set_dispmode(ihm_mode_t m)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b082      	sub	sp, #8
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	4603      	mov	r3, r0
 80129e8:	71fb      	strb	r3, [r7, #7]
	if (ihm_dispmode == m) return;
 80129ea:	4b07      	ldr	r3, [pc, #28]	; (8012a08 <set_dispmode+0x28>)
 80129ec:	781b      	ldrb	r3, [r3, #0]
 80129ee:	79fa      	ldrb	r2, [r7, #7]
 80129f0:	429a      	cmp	r2, r3
 80129f2:	d005      	beq.n	8012a00 <set_dispmode+0x20>
	ihm_dispmode = m;
 80129f4:	4a04      	ldr	r2, [pc, #16]	; (8012a08 <set_dispmode+0x28>)
 80129f6:	79fb      	ldrb	r3, [r7, #7]
 80129f8:	7013      	strb	r3, [r2, #0]
	set_displayout();
 80129fa:	f7ff ff97 	bl	801292c <set_displayout>
 80129fe:	e000      	b.n	8012a02 <set_dispmode+0x22>
	if (ihm_dispmode == m) return;
 8012a00:	bf00      	nop
}
 8012a02:	3708      	adds	r7, #8
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bd80      	pop	{r7, pc}
 8012a08:	200051ba 	.word	0x200051ba

08012a0c <ihm_runtick_normal>:

void ihm_runtick_normal(int init)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b08a      	sub	sp, #40	; 0x28
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
	//static int cnt=0;
	if (init) {
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d016      	beq.n	8012a48 <ihm_runtick_normal+0x3c>
		itm_debug1(DBG_UI, "UI init", 0);
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	4963      	ldr	r1, [pc, #396]	; (8012bac <ihm_runtick_normal+0x1a0>)
 8012a1e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012a22:	f7ff fe99 	bl	8012758 <itm_debug1>
		set_dispmode(mode_init);
 8012a26:	2000      	movs	r0, #0
 8012a28:	f7ff ffda 	bl	80129e0 <set_dispmode>
		for (int i = 0; i<DISP_MAX_REGS; i++) {
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8012a30:	e007      	b.n	8012a42 <ihm_runtick_normal+0x36>
			ihm_setvar(0, i, 0);
 8012a32:	2200      	movs	r2, #0
 8012a34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012a36:	2000      	movs	r0, #0
 8012a38:	f7ff f9aa 	bl	8011d90 <ihm_setvar>
		for (int i = 0; i<DISP_MAX_REGS; i++) {
 8012a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a3e:	3301      	adds	r3, #1
 8012a40:	627b      	str	r3, [r7, #36]	; 0x24
 8012a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a44:	2b0f      	cmp	r3, #15
 8012a46:	ddf4      	ble.n	8012a32 <ihm_runtick_normal+0x26>
		}
	}
	itm_debug1(DBG_UI, "UI tick", 0);
 8012a48:	2200      	movs	r2, #0
 8012a4a:	4959      	ldr	r1, [pc, #356]	; (8012bb0 <ihm_runtick_normal+0x1a4>)
 8012a4c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012a50:	f7ff fe82 	bl	8012758 <itm_debug1>

	needsrefresh_mask = 0;
 8012a54:	4b57      	ldr	r3, [pc, #348]	; (8012bb4 <ihm_runtick_normal+0x1a8>)
 8012a56:	2200      	movs	r2, #0
 8012a58:	701a      	strb	r2, [r3, #0]
	// scan rotary encoder -----------
	for (int i=0; i<MAX_ROTARY; i++) {
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	623b      	str	r3, [r7, #32]
 8012a5e:	e066      	b.n	8012b2e <ihm_runtick_normal+0x122>
				m.v1u = rot_position[i];
				mqf_write_from_ui(&m);
			}
		}
#else
		int16_t p = get_srotary(&htim4);
 8012a60:	4855      	ldr	r0, [pc, #340]	; (8012bb8 <ihm_runtick_normal+0x1ac>)
 8012a62:	f7ff fecf 	bl	8012804 <get_srotary>
 8012a66:	4603      	mov	r3, r0
 8012a68:	82fb      	strh	r3, [r7, #22]
		if (p != rot_position[i]) {
 8012a6a:	4a54      	ldr	r2, [pc, #336]	; (8012bbc <ihm_runtick_normal+0x1b0>)
 8012a6c:	6a3b      	ldr	r3, [r7, #32]
 8012a6e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012a72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012a76:	429a      	cmp	r2, r3
 8012a78:	d056      	beq.n	8012b28 <ihm_runtick_normal+0x11c>
			// pos changed
			rot_position[i] = p;
 8012a7a:	4950      	ldr	r1, [pc, #320]	; (8012bbc <ihm_runtick_normal+0x1b0>)
 8012a7c:	6a3b      	ldr	r3, [r7, #32]
 8012a7e:	8afa      	ldrh	r2, [r7, #22]
 8012a80:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			if (ihm_dispmode==mode_manual) {
 8012a84:	4b4e      	ldr	r3, [pc, #312]	; (8012bc0 <ihm_runtick_normal+0x1b4>)
 8012a86:	781b      	ldrb	r3, [r3, #0]
 8012a88:	2b03      	cmp	r3, #3
 8012a8a:	d10f      	bne.n	8012aac <ihm_runtick_normal+0xa0>
				ihm_setvar(0, 1, (uint16_t) rot_position[0]);
 8012a8c:	4b4b      	ldr	r3, [pc, #300]	; (8012bbc <ihm_runtick_normal+0x1b0>)
 8012a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a92:	b29b      	uxth	r3, r3
 8012a94:	461a      	mov	r2, r3
 8012a96:	2101      	movs	r1, #1
 8012a98:	2000      	movs	r0, #0
 8012a9a:	f7ff f979 	bl	8011d90 <ihm_setvar>
				//ihm_setvar(0, 1, ((int)rot0_position - 50));
				SET_NEEDSREFRESH(0);
 8012a9e:	4b45      	ldr	r3, [pc, #276]	; (8012bb4 <ihm_runtick_normal+0x1a8>)
 8012aa0:	781b      	ldrb	r3, [r3, #0]
 8012aa2:	f043 0301 	orr.w	r3, r3, #1
 8012aa6:	b2da      	uxtb	r2, r3
 8012aa8:	4b42      	ldr	r3, [pc, #264]	; (8012bb4 <ihm_runtick_normal+0x1a8>)
 8012aaa:	701a      	strb	r2, [r3, #0]
			}
			if (drive_mode[i]) {	// TODO refactor drive_mode
 8012aac:	4a45      	ldr	r2, [pc, #276]	; (8012bc4 <ihm_runtick_normal+0x1b8>)
 8012aae:	6a3b      	ldr	r3, [r7, #32]
 8012ab0:	4413      	add	r3, r2
 8012ab2:	781b      	ldrb	r3, [r3, #0]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d037      	beq.n	8012b28 <ihm_runtick_normal+0x11c>
				msg_64_t m;
				m.from = MA_UI(i);
 8012ab8:	6a3b      	ldr	r3, [r7, #32]
 8012aba:	b25b      	sxtb	r3, r3
 8012abc:	f003 031f 	and.w	r3, r3, #31
 8012ac0:	b25b      	sxtb	r3, r3
 8012ac2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012ac6:	b25b      	sxtb	r3, r3
 8012ac8:	b2db      	uxtb	r3, r3
 8012aca:	727b      	strb	r3, [r7, #9]
				m.to = MA_CONTROL_T(i);
 8012acc:	6a3b      	ldr	r3, [r7, #32]
 8012ace:	b25b      	sxtb	r3, r3
 8012ad0:	f003 0307 	and.w	r3, r3, #7
 8012ad4:	b25b      	sxtb	r3, r3
 8012ad6:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8012ada:	b25b      	sxtb	r3, r3
 8012adc:	b2db      	uxtb	r3, r3
 8012ade:	723b      	strb	r3, [r7, #8]
				m.cmd = CMD_MDRIVE_SPEED_DIR;
 8012ae0:	2317      	movs	r3, #23
 8012ae2:	72bb      	strb	r3, [r7, #10]
				m.v1u = abs(rot_position[i]);
 8012ae4:	4a35      	ldr	r2, [pc, #212]	; (8012bbc <ihm_runtick_normal+0x1b0>)
 8012ae6:	6a3b      	ldr	r3, [r7, #32]
 8012ae8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	bfb8      	it	lt
 8012af0:	425b      	neglt	r3, r3
 8012af2:	b29b      	uxth	r3, r3
 8012af4:	81bb      	strh	r3, [r7, #12]
				m.v2 = SIGNOF0(rot_position[i]);
 8012af6:	4a31      	ldr	r2, [pc, #196]	; (8012bbc <ihm_runtick_normal+0x1b0>)
 8012af8:	6a3b      	ldr	r3, [r7, #32]
 8012afa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	db0a      	blt.n	8012b18 <ihm_runtick_normal+0x10c>
 8012b02:	4a2e      	ldr	r2, [pc, #184]	; (8012bbc <ihm_runtick_normal+0x1b0>)
 8012b04:	6a3b      	ldr	r3, [r7, #32]
 8012b06:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	bfcc      	ite	gt
 8012b0e:	2301      	movgt	r3, #1
 8012b10:	2300      	movle	r3, #0
 8012b12:	b2db      	uxtb	r3, r3
 8012b14:	b21b      	sxth	r3, r3
 8012b16:	e001      	b.n	8012b1c <ihm_runtick_normal+0x110>
 8012b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012b1c:	81fb      	strh	r3, [r7, #14]
				// TODO handle dir
				mqf_write_from_ui(&m);
 8012b1e:	f107 0308 	add.w	r3, r7, #8
 8012b22:	4618      	mov	r0, r3
 8012b24:	f7ff fe5e 	bl	80127e4 <mqf_write_from_ui>
	for (int i=0; i<MAX_ROTARY; i++) {
 8012b28:	6a3b      	ldr	r3, [r7, #32]
 8012b2a:	3301      	adds	r3, #1
 8012b2c:	623b      	str	r3, [r7, #32]
 8012b2e:	6a3b      	ldr	r3, [r7, #32]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	dd95      	ble.n	8012a60 <ihm_runtick_normal+0x54>
	}

	// scan buttons ------------------

	// mode test hook
	if (ihm_dispmode==mode_ina_detect) {
 8012b34:	4b22      	ldr	r3, [pc, #136]	; (8012bc0 <ihm_runtick_normal+0x1b4>)
 8012b36:	781b      	ldrb	r3, [r3, #0]
 8012b38:	2b01      	cmp	r3, #1
 8012b3a:	d119      	bne.n	8012b70 <ihm_runtick_normal+0x164>
		// ina3221 detection
		for (int i=0; i<4; i++) {
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	61fb      	str	r3, [r7, #28]
 8012b40:	e00c      	b.n	8012b5c <ihm_runtick_normal+0x150>
			ihm_setvar(0, i, ina3221_devices[i]);
 8012b42:	4a21      	ldr	r2, [pc, #132]	; (8012bc8 <ihm_runtick_normal+0x1bc>)
 8012b44:	69fb      	ldr	r3, [r7, #28]
 8012b46:	4413      	add	r3, r2
 8012b48:	781b      	ldrb	r3, [r3, #0]
 8012b4a:	b29b      	uxth	r3, r3
 8012b4c:	461a      	mov	r2, r3
 8012b4e:	69f9      	ldr	r1, [r7, #28]
 8012b50:	2000      	movs	r0, #0
 8012b52:	f7ff f91d 	bl	8011d90 <ihm_setvar>
		for (int i=0; i<4; i++) {
 8012b56:	69fb      	ldr	r3, [r7, #28]
 8012b58:	3301      	adds	r3, #1
 8012b5a:	61fb      	str	r3, [r7, #28]
 8012b5c:	69fb      	ldr	r3, [r7, #28]
 8012b5e:	2b03      	cmp	r3, #3
 8012b60:	ddef      	ble.n	8012b42 <ihm_runtick_normal+0x136>
		}
		SET_NEEDSREFRESH(0);
 8012b62:	4b14      	ldr	r3, [pc, #80]	; (8012bb4 <ihm_runtick_normal+0x1a8>)
 8012b64:	781b      	ldrb	r3, [r3, #0]
 8012b66:	f043 0301 	orr.w	r3, r3, #1
 8012b6a:	b2da      	uxtb	r2, r3
 8012b6c:	4b11      	ldr	r3, [pc, #68]	; (8012bb4 <ihm_runtick_normal+0x1a8>)
 8012b6e:	701a      	strb	r2, [r3, #0]
	}
	// process messages --------------
	ui_process_msg();
 8012b70:	f000 f82c 	bl	8012bcc <ui_process_msg>

	// update displays ---------------
	for (int i=0; i<MAX_DISP; i++) {
 8012b74:	2300      	movs	r3, #0
 8012b76:	61bb      	str	r3, [r7, #24]
 8012b78:	e010      	b.n	8012b9c <ihm_runtick_normal+0x190>
		if (NEEDSREFRESH(i)) {
 8012b7a:	4b0e      	ldr	r3, [pc, #56]	; (8012bb4 <ihm_runtick_normal+0x1a8>)
 8012b7c:	781b      	ldrb	r3, [r3, #0]
 8012b7e:	461a      	mov	r2, r3
 8012b80:	69bb      	ldr	r3, [r7, #24]
 8012b82:	fa42 f303 	asr.w	r3, r2, r3
 8012b86:	f003 0301 	and.w	r3, r3, #1
 8012b8a:	b2db      	uxtb	r3, r3
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d002      	beq.n	8012b96 <ihm_runtick_normal+0x18a>
			disp_layout(i);
 8012b90:	69b8      	ldr	r0, [r7, #24]
 8012b92:	f7ff f93b 	bl	8011e0c <disp_layout>
	for (int i=0; i<MAX_DISP; i++) {
 8012b96:	69bb      	ldr	r3, [r7, #24]
 8012b98:	3301      	adds	r3, #1
 8012b9a:	61bb      	str	r3, [r7, #24]
 8012b9c:	69bb      	ldr	r3, [r7, #24]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	ddeb      	ble.n	8012b7a <ihm_runtick_normal+0x16e>
		}
	}
}
 8012ba2:	bf00      	nop
 8012ba4:	3728      	adds	r7, #40	; 0x28
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	bd80      	pop	{r7, pc}
 8012baa:	bf00      	nop
 8012bac:	080190dc 	.word	0x080190dc
 8012bb0:	080190e4 	.word	0x080190e4
 8012bb4:	200051b8 	.word	0x200051b8
 8012bb8:	20005d1c 	.word	0x20005d1c
 8012bbc:	2000020c 	.word	0x2000020c
 8012bc0:	200051ba 	.word	0x200051ba
 8012bc4:	20000210 	.word	0x20000210
 8012bc8:	20005134 	.word	0x20005134

08012bcc <ui_process_msg>:


static void ui_process_msg(void)
{
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	b088      	sub	sp, #32
 8012bd0:	af00      	add	r7, sp, #0
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_ui(&m);
 8012bd2:	463b      	mov	r3, r7
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f7ff fdf5 	bl	80127c4 <mqf_read_to_ui>
 8012bda:	61b8      	str	r0, [r7, #24]
		if (rc) break;
 8012bdc:	69bb      	ldr	r3, [r7, #24]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	f040 810d 	bne.w	8012dfe <ui_process_msg+0x232>

		if (m.cmd == CMD_TRTSPD_NOTIF) {
 8012be4:	78bb      	ldrb	r3, [r7, #2]
 8012be6:	2b24      	cmp	r3, #36	; 0x24
 8012be8:	d105      	bne.n	8012bf6 <ui_process_msg+0x2a>
			itm_debug1(DBG_UI, "hop", 0);
 8012bea:	2200      	movs	r2, #0
 8012bec:	498d      	ldr	r1, [pc, #564]	; (8012e24 <ui_process_msg+0x258>)
 8012bee:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012bf2:	f7ff fdb1 	bl	8012758 <itm_debug1>
		}

		switch(m.cmd) {
 8012bf6:	78bb      	ldrb	r3, [r7, #2]
 8012bf8:	2b25      	cmp	r3, #37	; 0x25
 8012bfa:	f000 8102 	beq.w	8012e02 <ui_process_msg+0x236>
 8012bfe:	2bfc      	cmp	r3, #252	; 0xfc
 8012c00:	d00a      	beq.n	8012c18 <ui_process_msg+0x4c>
 8012c02:	2b01      	cmp	r3, #1
 8012c04:	f000 80ff 	beq.w	8012e06 <ui_process_msg+0x23a>
		default:
			break;
 8012c08:	bf00      	nop
        		SET_NEEDSREFRESH(0);
        	}
        	return;
        	break;
        }
		if (IS_CONTROL_T(m.from)) {
 8012c0a:	787b      	ldrb	r3, [r7, #1]
 8012c0c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8012c10:	2bd0      	cmp	r3, #208	; 0xd0
 8012c12:	f040 80a1 	bne.w	8012d58 <ui_process_msg+0x18c>
 8012c16:	e004      	b.n	8012c22 <ui_process_msg+0x56>
            run_mode = m.v1u;
 8012c18:	88bb      	ldrh	r3, [r7, #4]
 8012c1a:	b2da      	uxtb	r2, r3
 8012c1c:	4b82      	ldr	r3, [pc, #520]	; (8012e28 <ui_process_msg+0x25c>)
 8012c1e:	701a      	strb	r2, [r3, #0]
            return;
 8012c20:	e0fc      	b.n	8012e1c <ui_process_msg+0x250>
			int trnum = m.from & 0x07;
 8012c22:	787b      	ldrb	r3, [r7, #1]
 8012c24:	f003 0307 	and.w	r3, r3, #7
 8012c28:	617b      	str	r3, [r7, #20]
			if (trnum != 0) break; // TODO
 8012c2a:	697b      	ldr	r3, [r7, #20]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	f040 80ec 	bne.w	8012e0a <ui_process_msg+0x23e>
			switch (m.cmd) {
 8012c32:	78bb      	ldrb	r3, [r7, #2]
 8012c34:	2b23      	cmp	r3, #35	; 0x23
 8012c36:	d03f      	beq.n	8012cb8 <ui_process_msg+0xec>
 8012c38:	2b23      	cmp	r3, #35	; 0x23
 8012c3a:	dc04      	bgt.n	8012c46 <ui_process_msg+0x7a>
 8012c3c:	2b21      	cmp	r3, #33	; 0x21
 8012c3e:	d051      	beq.n	8012ce4 <ui_process_msg+0x118>
 8012c40:	2b22      	cmp	r3, #34	; 0x22
 8012c42:	d008      	beq.n	8012c56 <ui_process_msg+0x8a>
 8012c44:	e07f      	b.n	8012d46 <ui_process_msg+0x17a>
 8012c46:	2b26      	cmp	r3, #38	; 0x26
 8012c48:	d068      	beq.n	8012d1c <ui_process_msg+0x150>
 8012c4a:	2ba1      	cmp	r3, #161	; 0xa1
 8012c4c:	f000 8086 	beq.w	8012d5c <ui_process_msg+0x190>
 8012c50:	2b24      	cmp	r3, #36	; 0x24
 8012c52:	d00d      	beq.n	8012c70 <ui_process_msg+0xa4>
 8012c54:	e077      	b.n	8012d46 <ui_process_msg+0x17a>
			case CMD_TRSTATUS_NOTIF:
				// unused
				// TODO trnum -> display num
				if (ihm_dispmode == mode_auto) {
 8012c56:	4b75      	ldr	r3, [pc, #468]	; (8012e2c <ui_process_msg+0x260>)
 8012c58:	781b      	ldrb	r3, [r3, #0]
 8012c5a:	2b04      	cmp	r3, #4
 8012c5c:	f040 80d7 	bne.w	8012e0e <ui_process_msg+0x242>
					//TODO
					//ihm_setvar(0, 2, m.v1u);
					SET_NEEDSREFRESH(0);
 8012c60:	4b73      	ldr	r3, [pc, #460]	; (8012e30 <ui_process_msg+0x264>)
 8012c62:	781b      	ldrb	r3, [r3, #0]
 8012c64:	f043 0301 	orr.w	r3, r3, #1
 8012c68:	b2da      	uxtb	r2, r3
 8012c6a:	4b71      	ldr	r3, [pc, #452]	; (8012e30 <ui_process_msg+0x264>)
 8012c6c:	701a      	strb	r2, [r3, #0]
				}
				return;
 8012c6e:	e0ce      	b.n	8012e0e <ui_process_msg+0x242>
				break;
			case CMD_TRTSPD_NOTIF:
				itm_debug2(DBG_UI|DBG_CTRL, "rx tspd notif", trnum, m.v1u);
 8012c70:	88bb      	ldrh	r3, [r7, #4]
 8012c72:	697a      	ldr	r2, [r7, #20]
 8012c74:	496f      	ldr	r1, [pc, #444]	; (8012e34 <ui_process_msg+0x268>)
 8012c76:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8012c7a:	f7ff fd87 	bl	801278c <itm_debug2>
				// TODO trnum -> display num
				if (!NOTIF_VOFF && ((ihm_dispmode == mode_manual) || (ihm_dispmode == mode_auto))) {
 8012c7e:	4b6b      	ldr	r3, [pc, #428]	; (8012e2c <ui_process_msg+0x260>)
 8012c80:	781b      	ldrb	r3, [r3, #0]
 8012c82:	2b03      	cmp	r3, #3
 8012c84:	d004      	beq.n	8012c90 <ui_process_msg+0xc4>
 8012c86:	4b69      	ldr	r3, [pc, #420]	; (8012e2c <ui_process_msg+0x260>)
 8012c88:	781b      	ldrb	r3, [r3, #0]
 8012c8a:	2b04      	cmp	r3, #4
 8012c8c:	f040 80c1 	bne.w	8012e12 <ui_process_msg+0x246>
					ihm_setvar(0, 2, m.v2 * m.v1u);
 8012c90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012c94:	b29a      	uxth	r2, r3
 8012c96:	88bb      	ldrh	r3, [r7, #4]
 8012c98:	fb12 f303 	smulbb	r3, r2, r3
 8012c9c:	b29b      	uxth	r3, r3
 8012c9e:	461a      	mov	r2, r3
 8012ca0:	2102      	movs	r1, #2
 8012ca2:	2000      	movs	r0, #0
 8012ca4:	f7ff f874 	bl	8011d90 <ihm_setvar>
					SET_NEEDSREFRESH(0);
 8012ca8:	4b61      	ldr	r3, [pc, #388]	; (8012e30 <ui_process_msg+0x264>)
 8012caa:	781b      	ldrb	r3, [r3, #0]
 8012cac:	f043 0301 	orr.w	r3, r3, #1
 8012cb0:	b2da      	uxtb	r2, r3
 8012cb2:	4b5f      	ldr	r3, [pc, #380]	; (8012e30 <ui_process_msg+0x264>)
 8012cb4:	701a      	strb	r2, [r3, #0]
				}
				return;
 8012cb6:	e0ac      	b.n	8012e12 <ui_process_msg+0x246>
				break;

			case CMD_TRDIR_NOTIF:
				if (!is_special_dispmode()) {
 8012cb8:	f7ff fe70 	bl	801299c <is_special_dispmode>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	f040 80a9 	bne.w	8012e16 <ui_process_msg+0x24a>
					ihm_setvar(0, 4, m.v1);
 8012cc4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012cc8:	b29b      	uxth	r3, r3
 8012cca:	461a      	mov	r2, r3
 8012ccc:	2104      	movs	r1, #4
 8012cce:	2000      	movs	r0, #0
 8012cd0:	f7ff f85e 	bl	8011d90 <ihm_setvar>
					SET_NEEDSREFRESH(0);
 8012cd4:	4b56      	ldr	r3, [pc, #344]	; (8012e30 <ui_process_msg+0x264>)
 8012cd6:	781b      	ldrb	r3, [r3, #0]
 8012cd8:	f043 0301 	orr.w	r3, r3, #1
 8012cdc:	b2da      	uxtb	r2, r3
 8012cde:	4b54      	ldr	r3, [pc, #336]	; (8012e30 <ui_process_msg+0x264>)
 8012ce0:	701a      	strb	r2, [r3, #0]
				}
				return;
 8012ce2:	e098      	b.n	8012e16 <ui_process_msg+0x24a>
				break;
			case CMD_TRMODE_NOTIF:
				// TODO
				if (!is_special_dispmode()) {
 8012ce4:	f7ff fe5a 	bl	801299c <is_special_dispmode>
 8012ce8:	4603      	mov	r3, r0
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d114      	bne.n	8012d18 <ui_process_msg+0x14c>
					train_mode_t cm = (train_mode_t) m.v1u;
 8012cee:	88bb      	ldrh	r3, [r7, #4]
 8012cf0:	74fb      	strb	r3, [r7, #19]
					switch (cm) {
 8012cf2:	7cfb      	ldrb	r3, [r7, #19]
 8012cf4:	2b01      	cmp	r3, #1
 8012cf6:	db03      	blt.n	8012d00 <ui_process_msg+0x134>
 8012cf8:	2b02      	cmp	r3, #2
 8012cfa:	dd05      	ble.n	8012d08 <ui_process_msg+0x13c>
 8012cfc:	2b03      	cmp	r3, #3
 8012cfe:	d007      	beq.n	8012d10 <ui_process_msg+0x144>
					default:
					case train_notrunning:
						set_dispmode(mode_init);
 8012d00:	2000      	movs	r0, #0
 8012d02:	f7ff fe6d 	bl	80129e0 <set_dispmode>
						break;
 8012d06:	e008      	b.n	8012d1a <ui_process_msg+0x14e>
					case train_manual:
					case train_fullmanual:
						set_dispmode(mode_manual);
 8012d08:	2003      	movs	r0, #3
 8012d0a:	f7ff fe69 	bl	80129e0 <set_dispmode>
						break;
 8012d0e:	e004      	b.n	8012d1a <ui_process_msg+0x14e>
					case train_auto:
						set_dispmode(mode_auto);
 8012d10:	2004      	movs	r0, #4
 8012d12:	f7ff fe65 	bl	80129e0 <set_dispmode>
						break;
 8012d16:	e000      	b.n	8012d1a <ui_process_msg+0x14e>
					}
				}
 8012d18:	bf00      	nop
				return;
 8012d1a:	e07f      	b.n	8012e1c <ui_process_msg+0x250>
				break;
			case CMD_TRSTATE_NOTIF:
				if (!is_special_dispmode()) {
 8012d1c:	f7ff fe3e 	bl	801299c <is_special_dispmode>
 8012d20:	4603      	mov	r3, r0
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d179      	bne.n	8012e1a <ui_process_msg+0x24e>
					ihm_setvar(0, 3, 10+m.v1u);
 8012d26:	88bb      	ldrh	r3, [r7, #4]
 8012d28:	330a      	adds	r3, #10
 8012d2a:	b29b      	uxth	r3, r3
 8012d2c:	461a      	mov	r2, r3
 8012d2e:	2103      	movs	r1, #3
 8012d30:	2000      	movs	r0, #0
 8012d32:	f7ff f82d 	bl	8011d90 <ihm_setvar>
					SET_NEEDSREFRESH(0);
 8012d36:	4b3e      	ldr	r3, [pc, #248]	; (8012e30 <ui_process_msg+0x264>)
 8012d38:	781b      	ldrb	r3, [r3, #0]
 8012d3a:	f043 0301 	orr.w	r3, r3, #1
 8012d3e:	b2da      	uxtb	r2, r3
 8012d40:	4b3b      	ldr	r3, [pc, #236]	; (8012e30 <ui_process_msg+0x264>)
 8012d42:	701a      	strb	r2, [r3, #0]
				}
				return;
 8012d44:	e069      	b.n	8012e1a <ui_process_msg+0x24e>
				break;
			case CMD_UI_MSG:
				break; // see below
			default:
				itm_debug1(DBG_UI, "unk ctl", m.cmd);
 8012d46:	78bb      	ldrb	r3, [r7, #2]
 8012d48:	461a      	mov	r2, r3
 8012d4a:	493b      	ldr	r1, [pc, #236]	; (8012e38 <ui_process_msg+0x26c>)
 8012d4c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012d50:	f7ff fd02 	bl	8012758 <itm_debug1>
				return;
 8012d54:	bf00      	nop
 8012d56:	e061      	b.n	8012e1c <ui_process_msg+0x250>
				break;
			}
		}
 8012d58:	bf00      	nop
 8012d5a:	e000      	b.n	8012d5e <ui_process_msg+0x192>
				break; // see below
 8012d5c:	bf00      	nop
		if (IS_UI(m.to)) {
 8012d5e:	783b      	ldrb	r3, [r7, #0]
 8012d60:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8012d64:	2b80      	cmp	r3, #128	; 0x80
 8012d66:	d13f      	bne.n	8012de8 <ui_process_msg+0x21c>
			int dn = m.to & 0x1F;
 8012d68:	783b      	ldrb	r3, [r7, #0]
 8012d6a:	f003 031f 	and.w	r3, r3, #31
 8012d6e:	60fb      	str	r3, [r7, #12]
			if (dn != 1) {
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	2b01      	cmp	r3, #1
 8012d74:	d006      	beq.n	8012d84 <ui_process_msg+0x1b8>
				itm_debug1(DBG_UI, "?dn", dn);
 8012d76:	68fa      	ldr	r2, [r7, #12]
 8012d78:	4930      	ldr	r1, [pc, #192]	; (8012e3c <ui_process_msg+0x270>)
 8012d7a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012d7e:	f7ff fceb 	bl	8012758 <itm_debug1>
 8012d82:	e726      	b.n	8012bd2 <ui_process_msg+0x6>
				continue;
			}
			switch (m.cmd) {
 8012d84:	78bb      	ldrb	r3, [r7, #2]
 8012d86:	2b20      	cmp	r3, #32
 8012d88:	d002      	beq.n	8012d90 <ui_process_msg+0x1c4>
 8012d8a:	2ba1      	cmp	r3, #161	; 0xa1
 8012d8c:	d033      	beq.n	8012df6 <ui_process_msg+0x22a>
 8012d8e:	e022      	b.n	8012dd6 <ui_process_msg+0x20a>
			case CMD_UI_MSG:
				//ui_msg5(dn, (char *) m.rbytes+1);
				break;
			case CMD_INA3221_REPORT:
				if (ihm_dispmode == mode_ina_val) {
 8012d90:	4b26      	ldr	r3, [pc, #152]	; (8012e2c <ui_process_msg+0x260>)
 8012d92:	781b      	ldrb	r3, [r3, #0]
 8012d94:	2b02      	cmp	r3, #2
 8012d96:	d130      	bne.n	8012dfa <ui_process_msg+0x22e>
					int16_t *values = (int16_t *) m.v32u;
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	60bb      	str	r3, [r7, #8]
					for (int i =0; i<12; i++) {
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	61fb      	str	r3, [r7, #28]
 8012da0:	e00e      	b.n	8012dc0 <ui_process_msg+0x1f4>
						ihm_setvar(0, i, values[i]);
 8012da2:	69fb      	ldr	r3, [r7, #28]
 8012da4:	005b      	lsls	r3, r3, #1
 8012da6:	68ba      	ldr	r2, [r7, #8]
 8012da8:	4413      	add	r3, r2
 8012daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012dae:	b29b      	uxth	r3, r3
 8012db0:	461a      	mov	r2, r3
 8012db2:	69f9      	ldr	r1, [r7, #28]
 8012db4:	2000      	movs	r0, #0
 8012db6:	f7fe ffeb 	bl	8011d90 <ihm_setvar>
					for (int i =0; i<12; i++) {
 8012dba:	69fb      	ldr	r3, [r7, #28]
 8012dbc:	3301      	adds	r3, #1
 8012dbe:	61fb      	str	r3, [r7, #28]
 8012dc0:	69fb      	ldr	r3, [r7, #28]
 8012dc2:	2b0b      	cmp	r3, #11
 8012dc4:	dded      	ble.n	8012da2 <ui_process_msg+0x1d6>
					}
					SET_NEEDSREFRESH(0);
 8012dc6:	4b1a      	ldr	r3, [pc, #104]	; (8012e30 <ui_process_msg+0x264>)
 8012dc8:	781b      	ldrb	r3, [r3, #0]
 8012dca:	f043 0301 	orr.w	r3, r3, #1
 8012dce:	b2da      	uxtb	r2, r3
 8012dd0:	4b17      	ldr	r3, [pc, #92]	; (8012e30 <ui_process_msg+0x264>)
 8012dd2:	701a      	strb	r2, [r3, #0]
				}
				break;
 8012dd4:	e011      	b.n	8012dfa <ui_process_msg+0x22e>

			default:
				itm_debug1(DBG_UI, "cmd?", m.cmd);
 8012dd6:	78bb      	ldrb	r3, [r7, #2]
 8012dd8:	461a      	mov	r2, r3
 8012dda:	4919      	ldr	r1, [pc, #100]	; (8012e40 <ui_process_msg+0x274>)
 8012ddc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012de0:	f7ff fcba 	bl	8012758 <itm_debug1>
				break;
 8012de4:	bf00      	nop
 8012de6:	e009      	b.n	8012dfc <ui_process_msg+0x230>
			}
		} else {
			itm_debug1(DBG_UI, "non ui msg", 0);
 8012de8:	2200      	movs	r2, #0
 8012dea:	4916      	ldr	r1, [pc, #88]	; (8012e44 <ui_process_msg+0x278>)
 8012dec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012df0:	f7ff fcb2 	bl	8012758 <itm_debug1>
 8012df4:	e6ed      	b.n	8012bd2 <ui_process_msg+0x6>
				break;
 8012df6:	bf00      	nop
 8012df8:	e6eb      	b.n	8012bd2 <ui_process_msg+0x6>
				break;
 8012dfa:	bf00      	nop
	for (;;) {
 8012dfc:	e6e9      	b.n	8012bd2 <ui_process_msg+0x6>
		if (rc) break;
 8012dfe:	bf00      	nop
 8012e00:	e00c      	b.n	8012e1c <ui_process_msg+0x250>
        	return;
 8012e02:	bf00      	nop
 8012e04:	e00a      	b.n	8012e1c <ui_process_msg+0x250>
        	return;
 8012e06:	bf00      	nop
 8012e08:	e008      	b.n	8012e1c <ui_process_msg+0x250>
			if (trnum != 0) break; // TODO
 8012e0a:	bf00      	nop
 8012e0c:	e006      	b.n	8012e1c <ui_process_msg+0x250>
				return;
 8012e0e:	bf00      	nop
 8012e10:	e004      	b.n	8012e1c <ui_process_msg+0x250>
				return;
 8012e12:	bf00      	nop
 8012e14:	e002      	b.n	8012e1c <ui_process_msg+0x250>
				return;
 8012e16:	bf00      	nop
 8012e18:	e000      	b.n	8012e1c <ui_process_msg+0x250>
				return;
 8012e1a:	bf00      	nop
		}
	}
}
 8012e1c:	3720      	adds	r7, #32
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	bd80      	pop	{r7, pc}
 8012e22:	bf00      	nop
 8012e24:	080190ec 	.word	0x080190ec
 8012e28:	200051b9 	.word	0x200051b9
 8012e2c:	200051ba 	.word	0x200051ba
 8012e30:	200051b8 	.word	0x200051b8
 8012e34:	080190f0 	.word	0x080190f0
 8012e38:	08019100 	.word	0x08019100
 8012e3c:	08019108 	.word	0x08019108
 8012e40:	0801910c 	.word	0x0801910c
 8012e44:	08019114 	.word	0x08019114

08012e48 <ui_process_msg_off>:
// ---------------------------------



static void ui_process_msg_off(void)
{
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	b084      	sub	sp, #16
 8012e4c:	af00      	add	r7, sp, #0
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_ui(&m);
 8012e4e:	463b      	mov	r3, r7
 8012e50:	4618      	mov	r0, r3
 8012e52:	f7ff fcb7 	bl	80127c4 <mqf_read_to_ui>
 8012e56:	60f8      	str	r0, [r7, #12]
		if (rc) break;
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d109      	bne.n	8012e72 <ui_process_msg_off+0x2a>

		switch(m.cmd) {
 8012e5e:	78bb      	ldrb	r3, [r7, #2]
 8012e60:	2bfc      	cmp	r3, #252	; 0xfc
 8012e62:	d000      	beq.n	8012e66 <ui_process_msg_off+0x1e>
		default:
			break;
 8012e64:	e004      	b.n	8012e70 <ui_process_msg_off+0x28>
        case CMD_SETRUN_MODE:
            run_mode = m.v1u;
 8012e66:	88bb      	ldrh	r3, [r7, #4]
 8012e68:	b2da      	uxtb	r2, r3
 8012e6a:	4b04      	ldr	r3, [pc, #16]	; (8012e7c <ui_process_msg_off+0x34>)
 8012e6c:	701a      	strb	r2, [r3, #0]
 8012e6e:	e001      	b.n	8012e74 <ui_process_msg_off+0x2c>
	for (;;) {
 8012e70:	e7ed      	b.n	8012e4e <ui_process_msg_off+0x6>
		if (rc) break;
 8012e72:	bf00      	nop
            return;
            break;
		}
	}
}
 8012e74:	3710      	adds	r7, #16
 8012e76:	46bd      	mov	sp, r7
 8012e78:	bd80      	pop	{r7, pc}
 8012e7a:	bf00      	nop
 8012e7c:	200051b9 	.word	0x200051b9

08012e80 <ihm_runtick_off>:

void ihm_runtick_off(int init)
{
 8012e80:	b580      	push	{r7, lr}
 8012e82:	b084      	sub	sp, #16
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	6078      	str	r0, [r7, #4]
	needsrefresh_mask = 0;
 8012e88:	4b20      	ldr	r3, [pc, #128]	; (8012f0c <ihm_runtick_off+0x8c>)
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	701a      	strb	r2, [r3, #0]

	if (init) {
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d01e      	beq.n	8012ed2 <ihm_runtick_off+0x52>
		itm_debug1(DBG_UI, "UI init", 0);
 8012e94:	2200      	movs	r2, #0
 8012e96:	491e      	ldr	r1, [pc, #120]	; (8012f10 <ihm_runtick_off+0x90>)
 8012e98:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012e9c:	f7ff fc5c 	bl	8012758 <itm_debug1>
		ihm_setlayout(0, LAYOUT_OFF);
 8012ea0:	2104      	movs	r1, #4
 8012ea2:	2000      	movs	r0, #0
 8012ea4:	f7fe ff26 	bl	8011cf4 <ihm_setlayout>
		for (int i = 0; i<DISP_MAX_REGS; i++) {
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	60fb      	str	r3, [r7, #12]
 8012eac:	e007      	b.n	8012ebe <ihm_runtick_off+0x3e>
			ihm_setvar(0, i, 0);
 8012eae:	2200      	movs	r2, #0
 8012eb0:	68f9      	ldr	r1, [r7, #12]
 8012eb2:	2000      	movs	r0, #0
 8012eb4:	f7fe ff6c 	bl	8011d90 <ihm_setvar>
		for (int i = 0; i<DISP_MAX_REGS; i++) {
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	3301      	adds	r3, #1
 8012ebc:	60fb      	str	r3, [r7, #12]
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	2b0f      	cmp	r3, #15
 8012ec2:	ddf4      	ble.n	8012eae <ihm_runtick_off+0x2e>
		}
		SET_NEEDSREFRESH(0);
 8012ec4:	4b11      	ldr	r3, [pc, #68]	; (8012f0c <ihm_runtick_off+0x8c>)
 8012ec6:	781b      	ldrb	r3, [r3, #0]
 8012ec8:	f043 0301 	orr.w	r3, r3, #1
 8012ecc:	b2da      	uxtb	r2, r3
 8012ece:	4b0f      	ldr	r3, [pc, #60]	; (8012f0c <ihm_runtick_off+0x8c>)
 8012ed0:	701a      	strb	r2, [r3, #0]
	}
	// process messages --------------
	ui_process_msg_off();
 8012ed2:	f7ff ffb9 	bl	8012e48 <ui_process_msg_off>

	// update displays ---------------
	for (int i=0; i<MAX_DISP; i++) {
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	60bb      	str	r3, [r7, #8]
 8012eda:	e010      	b.n	8012efe <ihm_runtick_off+0x7e>
		if (NEEDSREFRESH(i)) {
 8012edc:	4b0b      	ldr	r3, [pc, #44]	; (8012f0c <ihm_runtick_off+0x8c>)
 8012ede:	781b      	ldrb	r3, [r3, #0]
 8012ee0:	461a      	mov	r2, r3
 8012ee2:	68bb      	ldr	r3, [r7, #8]
 8012ee4:	fa42 f303 	asr.w	r3, r2, r3
 8012ee8:	f003 0301 	and.w	r3, r3, #1
 8012eec:	b2db      	uxtb	r3, r3
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d002      	beq.n	8012ef8 <ihm_runtick_off+0x78>
			disp_layout(i);
 8012ef2:	68b8      	ldr	r0, [r7, #8]
 8012ef4:	f7fe ff8a 	bl	8011e0c <disp_layout>
	for (int i=0; i<MAX_DISP; i++) {
 8012ef8:	68bb      	ldr	r3, [r7, #8]
 8012efa:	3301      	adds	r3, #1
 8012efc:	60bb      	str	r3, [r7, #8]
 8012efe:	68bb      	ldr	r3, [r7, #8]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	ddeb      	ble.n	8012edc <ihm_runtick_off+0x5c>
		}
	}
}
 8012f04:	bf00      	nop
 8012f06:	3710      	adds	r7, #16
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	bd80      	pop	{r7, pc}
 8012f0c:	200051b8 	.word	0x200051b8
 8012f10:	080190dc 	.word	0x080190dc

08012f14 <ihm_runtick_testcanton>:
// ---------------------------------
// run mode Cantontest
// ---------------------------------

static void ihm_runtick_testcanton(int f)
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b082      	sub	sp, #8
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]
	ihm_runtick_off(f);
 8012f1c:	6878      	ldr	r0, [r7, #4]
 8012f1e:	f7ff ffaf 	bl	8012e80 <ihm_runtick_off>
}
 8012f22:	bf00      	nop
 8012f24:	3708      	adds	r7, #8
 8012f26:	46bd      	mov	sp, r7
 8012f28:	bd80      	pop	{r7, pc}

08012f2a <ihm_runtick_detect>:
// ---------------------------------
// run mode detect
// ---------------------------------

static void ihm_runtick_detect(int f)
{
 8012f2a:	b580      	push	{r7, lr}
 8012f2c:	b082      	sub	sp, #8
 8012f2e:	af00      	add	r7, sp, #0
 8012f30:	6078      	str	r0, [r7, #4]
	ihm_runtick_off(f);
 8012f32:	6878      	ldr	r0, [r7, #4]
 8012f34:	f7ff ffa4 	bl	8012e80 <ihm_runtick_off>
}
 8012f38:	bf00      	nop
 8012f3a:	3708      	adds	r7, #8
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	bd80      	pop	{r7, pc}

08012f40 <ihm_runtick_detect1>:
// ---------------------------------
// run mode detect1
// ---------------------------------

static void ihm_runtick_detect1(int f)
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b082      	sub	sp, #8
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
	ihm_runtick_off(f);
 8012f48:	6878      	ldr	r0, [r7, #4]
 8012f4a:	f7ff ff99 	bl	8012e80 <ihm_runtick_off>
}
 8012f4e:	bf00      	nop
 8012f50:	3708      	adds	r7, #8
 8012f52:	46bd      	mov	sp, r7
 8012f54:	bd80      	pop	{r7, pc}
	...

08012f58 <itm_debug1>:
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b086      	sub	sp, #24
 8012f5c:	af02      	add	r7, sp, #8
 8012f5e:	60f8      	str	r0, [r7, #12]
 8012f60:	60b9      	str	r1, [r7, #8]
 8012f62:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8012f64:	4b08      	ldr	r3, [pc, #32]	; (8012f88 <itm_debug1+0x30>)
 8012f66:	681a      	ldr	r2, [r3, #0]
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	4013      	ands	r3, r2
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d007      	beq.n	8012f80 <itm_debug1+0x28>
 8012f70:	2301      	movs	r3, #1
 8012f72:	9300      	str	r3, [sp, #0]
 8012f74:	2300      	movs	r3, #0
 8012f76:	2200      	movs	r2, #0
 8012f78:	6879      	ldr	r1, [r7, #4]
 8012f7a:	68b8      	ldr	r0, [r7, #8]
 8012f7c:	f005 fc7a 	bl	8018874 <_itm_debug3>
}
 8012f80:	bf00      	nop
 8012f82:	3710      	adds	r7, #16
 8012f84:	46bd      	mov	sp, r7
 8012f86:	bd80      	pop	{r7, pc}
 8012f88:	20000574 	.word	0x20000574

08012f8c <itm_debug2>:
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b086      	sub	sp, #24
 8012f90:	af02      	add	r7, sp, #8
 8012f92:	60f8      	str	r0, [r7, #12]
 8012f94:	60b9      	str	r1, [r7, #8]
 8012f96:	607a      	str	r2, [r7, #4]
 8012f98:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8012f9a:	4b09      	ldr	r3, [pc, #36]	; (8012fc0 <itm_debug2+0x34>)
 8012f9c:	681a      	ldr	r2, [r3, #0]
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	4013      	ands	r3, r2
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d007      	beq.n	8012fb6 <itm_debug2+0x2a>
 8012fa6:	2302      	movs	r3, #2
 8012fa8:	9300      	str	r3, [sp, #0]
 8012faa:	2300      	movs	r3, #0
 8012fac:	683a      	ldr	r2, [r7, #0]
 8012fae:	6879      	ldr	r1, [r7, #4]
 8012fb0:	68b8      	ldr	r0, [r7, #8]
 8012fb2:	f005 fc5f 	bl	8018874 <_itm_debug3>
}
 8012fb6:	bf00      	nop
 8012fb8:	3710      	adds	r7, #16
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	bd80      	pop	{r7, pc}
 8012fbe:	bf00      	nop
 8012fc0:	20000574 	.word	0x20000574

08012fc4 <itm_debug3>:
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b086      	sub	sp, #24
 8012fc8:	af02      	add	r7, sp, #8
 8012fca:	60f8      	str	r0, [r7, #12]
 8012fcc:	60b9      	str	r1, [r7, #8]
 8012fce:	607a      	str	r2, [r7, #4]
 8012fd0:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 8012fd2:	4b09      	ldr	r3, [pc, #36]	; (8012ff8 <itm_debug3+0x34>)
 8012fd4:	681a      	ldr	r2, [r3, #0]
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	4013      	ands	r3, r2
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d007      	beq.n	8012fee <itm_debug3+0x2a>
 8012fde:	2303      	movs	r3, #3
 8012fe0:	9300      	str	r3, [sp, #0]
 8012fe2:	69bb      	ldr	r3, [r7, #24]
 8012fe4:	683a      	ldr	r2, [r7, #0]
 8012fe6:	6879      	ldr	r1, [r7, #4]
 8012fe8:	68b8      	ldr	r0, [r7, #8]
 8012fea:	f005 fc43 	bl	8018874 <_itm_debug3>
}
 8012fee:	bf00      	nop
 8012ff0:	3710      	adds	r7, #16
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	bd80      	pop	{r7, pc}
 8012ff6:	bf00      	nop
 8012ff8:	20000574 	.word	0x20000574

08012ffc <mqf_read_to_ctrl>:
/* from upper */
#define CMD_SET_TARGET_SPEED 0x10
#define CMD_SET_C1_C2		 0x11


LFMQUEUE_DEF_H(to_ctrl, msg_64_t)
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b082      	sub	sp, #8
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
 8013004:	6879      	ldr	r1, [r7, #4]
 8013006:	4804      	ldr	r0, [pc, #16]	; (8013018 <mqf_read_to_ctrl+0x1c>)
 8013008:	f005 fdb4 	bl	8018b74 <mqf_read>
 801300c:	4603      	mov	r3, r0
 801300e:	4618      	mov	r0, r3
 8013010:	3708      	adds	r7, #8
 8013012:	46bd      	mov	sp, r7
 8013014:	bd80      	pop	{r7, pc}
 8013016:	bf00      	nop
 8013018:	20000530 	.word	0x20000530

0801301c <mqf_write_from_ctrl>:
LFMQUEUE_DEF_H(from_ctrl, msg_64_t)
 801301c:	b580      	push	{r7, lr}
 801301e:	b082      	sub	sp, #8
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
 8013024:	6879      	ldr	r1, [r7, #4]
 8013026:	4804      	ldr	r0, [pc, #16]	; (8013038 <mqf_write_from_ctrl+0x1c>)
 8013028:	f005 fd2a 	bl	8018a80 <mqf_write>
 801302c:	4603      	mov	r3, r0
 801302e:	4618      	mov	r0, r3
 8013030:	3708      	adds	r7, #8
 8013032:	46bd      	mov	sp, r7
 8013034:	bd80      	pop	{r7, pc}
 8013036:	bf00      	nop
 8013038:	2000053c 	.word	0x2000053c

0801303c <_sub_addr_to_sub_num>:
 l2r : (sw t 2) (blk 5.1) (blk 5.2)
 */
#include "../msg/trainmsg.h"

static inline int _sub_addr_to_sub_num(uint8_t addr, uint8_t sub)
{
 801303c:	b480      	push	{r7}
 801303e:	b085      	sub	sp, #20
 8013040:	af00      	add	r7, sp, #0
 8013042:	4603      	mov	r3, r0
 8013044:	460a      	mov	r2, r1
 8013046:	71fb      	strb	r3, [r7, #7]
 8013048:	4613      	mov	r3, r2
 801304a:	71bb      	strb	r3, [r7, #6]
    int brd = MA_2_BOARD(addr);
 801304c:	79fb      	ldrb	r3, [r7, #7]
 801304e:	10db      	asrs	r3, r3, #3
 8013050:	f003 0307 	and.w	r3, r3, #7
 8013054:	60fb      	str	r3, [r7, #12]
    int n = brd * 12 + sub;
 8013056:	68fa      	ldr	r2, [r7, #12]
 8013058:	4613      	mov	r3, r2
 801305a:	005b      	lsls	r3, r3, #1
 801305c:	4413      	add	r3, r2
 801305e:	009b      	lsls	r3, r3, #2
 8013060:	461a      	mov	r2, r3
 8013062:	79bb      	ldrb	r3, [r7, #6]
 8013064:	4413      	add	r3, r2
 8013066:	60bb      	str	r3, [r7, #8]
    return n;
 8013068:	68bb      	ldr	r3, [r7, #8]
}
 801306a:	4618      	mov	r0, r3
 801306c:	3714      	adds	r7, #20
 801306e:	46bd      	mov	sp, r7
 8013070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013074:	4770      	bx	lr

08013076 <_blk_addr_to_blk_num>:

static inline int _blk_addr_to_blk_num(uint8_t addr)
{
 8013076:	b480      	push	{r7}
 8013078:	b085      	sub	sp, #20
 801307a:	af00      	add	r7, sp, #0
 801307c:	4603      	mov	r3, r0
 801307e:	71fb      	strb	r3, [r7, #7]
    int brd = MA_2_BOARD(addr);
 8013080:	79fb      	ldrb	r3, [r7, #7]
 8013082:	10db      	asrs	r3, r3, #3
 8013084:	f003 0307 	and.w	r3, r3, #7
 8013088:	60fb      	str	r3, [r7, #12]
    int nc = addr & 0x07;
 801308a:	79fb      	ldrb	r3, [r7, #7]
 801308c:	f003 0307 	and.w	r3, r3, #7
 8013090:	60bb      	str	r3, [r7, #8]
    return brd*6+nc;
 8013092:	68fa      	ldr	r2, [r7, #12]
 8013094:	4613      	mov	r3, r2
 8013096:	005b      	lsls	r3, r3, #1
 8013098:	4413      	add	r3, r2
 801309a:	005b      	lsls	r3, r3, #1
 801309c:	461a      	mov	r2, r3
 801309e:	68bb      	ldr	r3, [r7, #8]
 80130a0:	4413      	add	r3, r2
}
 80130a2:	4618      	mov	r0, r3
 80130a4:	3714      	adds	r7, #20
 80130a6:	46bd      	mov	sp, r7
 80130a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ac:	4770      	bx	lr
	...

080130b0 <_blk_num_to_blk_addr>:
    int brd = subnum/12;
    return MA_CANTON(brd, 0);
}

static uint8_t _blk_num_to_blk_addr(int blknum)
{
 80130b0:	b480      	push	{r7}
 80130b2:	b085      	sub	sp, #20
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
	if (blknum == -1) return 0xFF;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80130be:	d101      	bne.n	80130c4 <_blk_num_to_blk_addr+0x14>
 80130c0:	23ff      	movs	r3, #255	; 0xff
 80130c2:	e020      	b.n	8013106 <_blk_num_to_blk_addr+0x56>
    int nc = blknum % 6;
 80130c4:	687a      	ldr	r2, [r7, #4]
 80130c6:	4b13      	ldr	r3, [pc, #76]	; (8013114 <_blk_num_to_blk_addr+0x64>)
 80130c8:	fb83 3102 	smull	r3, r1, r3, r2
 80130cc:	17d3      	asrs	r3, r2, #31
 80130ce:	1ac9      	subs	r1, r1, r3
 80130d0:	460b      	mov	r3, r1
 80130d2:	005b      	lsls	r3, r3, #1
 80130d4:	440b      	add	r3, r1
 80130d6:	005b      	lsls	r3, r3, #1
 80130d8:	1ad3      	subs	r3, r2, r3
 80130da:	60fb      	str	r3, [r7, #12]
    int brd = blknum/6;
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	4a0d      	ldr	r2, [pc, #52]	; (8013114 <_blk_num_to_blk_addr+0x64>)
 80130e0:	fb82 1203 	smull	r1, r2, r2, r3
 80130e4:	17db      	asrs	r3, r3, #31
 80130e6:	1ad3      	subs	r3, r2, r3
 80130e8:	60bb      	str	r3, [r7, #8]
    return MA_CANTON(brd, nc);
 80130ea:	68bb      	ldr	r3, [r7, #8]
 80130ec:	00db      	lsls	r3, r3, #3
 80130ee:	b25b      	sxtb	r3, r3
 80130f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80130f4:	b25a      	sxtb	r2, r3
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	b25b      	sxtb	r3, r3
 80130fa:	f003 0307 	and.w	r3, r3, #7
 80130fe:	b25b      	sxtb	r3, r3
 8013100:	4313      	orrs	r3, r2
 8013102:	b25b      	sxtb	r3, r3
 8013104:	b2db      	uxtb	r3, r3
}
 8013106:	4618      	mov	r0, r3
 8013108:	3714      	adds	r7, #20
 801310a:	46bd      	mov	sp, r7
 801310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013110:	4770      	bx	lr
 8013112:	bf00      	nop
 8013114:	2aaaaaab 	.word	0x2aaaaaab

08013118 <blk_addr_for_sub_addr>:
int _next_sub_num_for_sub_num(int subnum, uint8_t left);

// ---------------------------------------------------------------------

static inline uint8_t blk_addr_for_sub_addr(uint8_t addr, uint8_t sub)
{
 8013118:	b580      	push	{r7, lr}
 801311a:	b084      	sub	sp, #16
 801311c:	af00      	add	r7, sp, #0
 801311e:	4603      	mov	r3, r0
 8013120:	460a      	mov	r2, r1
 8013122:	71fb      	strb	r3, [r7, #7]
 8013124:	4613      	mov	r3, r2
 8013126:	71bb      	strb	r3, [r7, #6]
    int n = _sub_addr_to_sub_num(addr, sub);
 8013128:	79ba      	ldrb	r2, [r7, #6]
 801312a:	79fb      	ldrb	r3, [r7, #7]
 801312c:	4611      	mov	r1, r2
 801312e:	4618      	mov	r0, r3
 8013130:	f7ff ff84 	bl	801303c <_sub_addr_to_sub_num>
 8013134:	60f8      	str	r0, [r7, #12]
    n = _blk_num_for_sub_num(n);
 8013136:	68f8      	ldr	r0, [r7, #12]
 8013138:	f005 fa4a 	bl	80185d0 <_blk_num_for_sub_num>
 801313c:	60f8      	str	r0, [r7, #12]
    return _blk_num_to_blk_addr(n);
 801313e:	68f8      	ldr	r0, [r7, #12]
 8013140:	f7ff ffb6 	bl	80130b0 <_blk_num_to_blk_addr>
 8013144:	4603      	mov	r3, r0
}
 8013146:	4618      	mov	r0, r3
 8013148:	3710      	adds	r7, #16
 801314a:	46bd      	mov	sp, r7
 801314c:	bd80      	pop	{r7, pc}
	...

08013150 <fatal>:

static void ctrl_reset(void);


static void fatal(void)
{
 8013150:	b580      	push	{r7, lr}
 8013152:	af00      	add	r7, sp, #0
	itm_debug1(DBG_ERR, "fatal", 0);
 8013154:	2200      	movs	r2, #0
 8013156:	4905      	ldr	r1, [pc, #20]	; (801316c <fatal+0x1c>)
 8013158:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801315c:	f7ff fefc 	bl	8012f58 <itm_debug1>
#ifdef TRAIN_SIMU
    abort();
#else
    for (;;) osDelay(1000);
 8013160:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013164:	f7f9 fe56 	bl	800ce14 <osDelay>
 8013168:	e7fa      	b.n	8013160 <fatal+0x10>
 801316a:	bf00      	nop
 801316c:	08019120 	.word	0x08019120

08013170 <ctrl_reset>:

static void check_behaviour(uint32_t tick);


static void ctrl_reset(void)
{
 8013170:	b480      	push	{r7}
 8013172:	af00      	add	r7, sp, #0
	//TODO
}
 8013174:	bf00      	nop
 8013176:	46bd      	mov	sp, r7
 8013178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317c:	4770      	bx	lr
	...

08013180 <set_state>:
// ----------------------------------------------------------------------------


static inline void set_state(int tidx, train_ctrl_t *tvar, train_state_t ns)
{
 8013180:	b580      	push	{r7, lr}
 8013182:	b086      	sub	sp, #24
 8013184:	af00      	add	r7, sp, #0
 8013186:	60f8      	str	r0, [r7, #12]
 8013188:	60b9      	str	r1, [r7, #8]
 801318a:	4613      	mov	r3, r2
 801318c:	71fb      	strb	r3, [r7, #7]
	switch (ns) {
 801318e:	79fb      	ldrb	r3, [r7, #7]
 8013190:	2b05      	cmp	r3, #5
 8013192:	d839      	bhi.n	8013208 <set_state+0x88>
 8013194:	a201      	add	r2, pc, #4	; (adr r2, 801319c <set_state+0x1c>)
 8013196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801319a:	bf00      	nop
 801319c:	080131b5 	.word	0x080131b5
 80131a0:	080131c3 	.word	0x080131c3
 80131a4:	080131d1 	.word	0x080131d1
 80131a8:	080131df 	.word	0x080131df
 80131ac:	080131ed 	.word	0x080131ed
 80131b0:	080131fb 	.word	0x080131fb
	case train_off: 			itm_debug1(DBG_CTRL, "ST->OFF", tidx); break;
 80131b4:	68fa      	ldr	r2, [r7, #12]
 80131b6:	4927      	ldr	r1, [pc, #156]	; (8013254 <set_state+0xd4>)
 80131b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80131bc:	f7ff fecc 	bl	8012f58 <itm_debug1>
 80131c0:	e02a      	b.n	8013218 <set_state+0x98>
	case train_running_c1: 		itm_debug1(DBG_CTRL, "ST->RC1", tidx); break;
 80131c2:	68fa      	ldr	r2, [r7, #12]
 80131c4:	4924      	ldr	r1, [pc, #144]	; (8013258 <set_state+0xd8>)
 80131c6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80131ca:	f7ff fec5 	bl	8012f58 <itm_debug1>
 80131ce:	e023      	b.n	8013218 <set_state+0x98>
	case train_running_c1c2: 	itm_debug1(DBG_CTRL, "ST->C1C2", tidx); break;
 80131d0:	68fa      	ldr	r2, [r7, #12]
 80131d2:	4922      	ldr	r1, [pc, #136]	; (801325c <set_state+0xdc>)
 80131d4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80131d8:	f7ff febe 	bl	8012f58 <itm_debug1>
 80131dc:	e01c      	b.n	8013218 <set_state+0x98>
	case train_station:			itm_debug1(DBG_CTRL, "ST->STA", tidx); break;
 80131de:	68fa      	ldr	r2, [r7, #12]
 80131e0:	491f      	ldr	r1, [pc, #124]	; (8013260 <set_state+0xe0>)
 80131e2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80131e6:	f7ff feb7 	bl	8012f58 <itm_debug1>
 80131ea:	e015      	b.n	8013218 <set_state+0x98>
	case train_blk_wait:	 	itm_debug1(DBG_CTRL, "ST->BLKW", tidx); break;
 80131ec:	68fa      	ldr	r2, [r7, #12]
 80131ee:	491d      	ldr	r1, [pc, #116]	; (8013264 <set_state+0xe4>)
 80131f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80131f4:	f7ff feb0 	bl	8012f58 <itm_debug1>
 80131f8:	e00e      	b.n	8013218 <set_state+0x98>
	case train_end_of_track:	itm_debug1(DBG_CTRL, "ST->EOT", tidx); break;
 80131fa:	68fa      	ldr	r2, [r7, #12]
 80131fc:	491a      	ldr	r1, [pc, #104]	; (8013268 <set_state+0xe8>)
 80131fe:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013202:	f7ff fea9 	bl	8012f58 <itm_debug1>
 8013206:	e007      	b.n	8013218 <set_state+0x98>
	default: 					itm_debug2(DBG_CTRL, "ST->?", tidx, ns); break;
 8013208:	79fb      	ldrb	r3, [r7, #7]
 801320a:	68fa      	ldr	r2, [r7, #12]
 801320c:	4917      	ldr	r1, [pc, #92]	; (801326c <set_state+0xec>)
 801320e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013212:	f7ff febb 	bl	8012f8c <itm_debug2>
 8013216:	bf00      	nop
	}
	tvar->_state = ns;
 8013218:	68bb      	ldr	r3, [r7, #8]
 801321a:	79fa      	ldrb	r2, [r7, #7]
 801321c:	705a      	strb	r2, [r3, #1]
	// notif UI
	msg_64_t m;
	m.from = MA_CONTROL_T(tidx);
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	b25b      	sxtb	r3, r3
 8013222:	f003 0307 	and.w	r3, r3, #7
 8013226:	b25b      	sxtb	r3, r3
 8013228:	f063 032f 	orn	r3, r3, #47	; 0x2f
 801322c:	b25b      	sxtb	r3, r3
 801322e:	b2db      	uxtb	r3, r3
 8013230:	747b      	strb	r3, [r7, #17]
	m.to = MA_UI(1); // fix me
 8013232:	2381      	movs	r3, #129	; 0x81
 8013234:	743b      	strb	r3, [r7, #16]
	m.cmd = CMD_TRSTATE_NOTIF;
 8013236:	2326      	movs	r3, #38	; 0x26
 8013238:	74bb      	strb	r3, [r7, #18]
	m.v1u = ns;
 801323a:	79fb      	ldrb	r3, [r7, #7]
 801323c:	b29b      	uxth	r3, r3
 801323e:	82bb      	strh	r3, [r7, #20]
	mqf_write_from_ctrl(&m);
 8013240:	f107 0310 	add.w	r3, r7, #16
 8013244:	4618      	mov	r0, r3
 8013246:	f7ff fee9 	bl	801301c <mqf_write_from_ctrl>
}
 801324a:	bf00      	nop
 801324c:	3718      	adds	r7, #24
 801324e:	46bd      	mov	sp, r7
 8013250:	bd80      	pop	{r7, pc}
 8013252:	bf00      	nop
 8013254:	08019128 	.word	0x08019128
 8013258:	08019130 	.word	0x08019130
 801325c:	08019138 	.word	0x08019138
 8013260:	08019144 	.word	0x08019144
 8013264:	0801914c 	.word	0x0801914c
 8013268:	08019158 	.word	0x08019158
 801326c:	08019160 	.word	0x08019160

08013270 <ctrl_set_mode>:
static void ctrl_set_mode(int trnum, train_mode_t mode)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b084      	sub	sp, #16
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
 8013278:	460b      	mov	r3, r1
 801327a:	70fb      	strb	r3, [r7, #3]
	itm_debug2(DBG_CTRL, "set mode", trnum, mode);
 801327c:	78fb      	ldrb	r3, [r7, #3]
 801327e:	687a      	ldr	r2, [r7, #4]
 8013280:	4919      	ldr	r1, [pc, #100]	; (80132e8 <ctrl_set_mode+0x78>)
 8013282:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013286:	f7ff fe81 	bl	8012f8c <itm_debug2>
	if (trctl[trnum]._mode == mode) return;
 801328a:	4918      	ldr	r1, [pc, #96]	; (80132ec <ctrl_set_mode+0x7c>)
 801328c:	687a      	ldr	r2, [r7, #4]
 801328e:	4613      	mov	r3, r2
 8013290:	005b      	lsls	r3, r3, #1
 8013292:	4413      	add	r3, r2
 8013294:	00db      	lsls	r3, r3, #3
 8013296:	440b      	add	r3, r1
 8013298:	781b      	ldrb	r3, [r3, #0]
 801329a:	78fa      	ldrb	r2, [r7, #3]
 801329c:	429a      	cmp	r2, r3
 801329e:	d01f      	beq.n	80132e0 <ctrl_set_mode+0x70>
	trctl[trnum]._mode = mode;
 80132a0:	4912      	ldr	r1, [pc, #72]	; (80132ec <ctrl_set_mode+0x7c>)
 80132a2:	687a      	ldr	r2, [r7, #4]
 80132a4:	4613      	mov	r3, r2
 80132a6:	005b      	lsls	r3, r3, #1
 80132a8:	4413      	add	r3, r2
 80132aa:	00db      	lsls	r3, r3, #3
 80132ac:	440b      	add	r3, r1
 80132ae:	78fa      	ldrb	r2, [r7, #3]
 80132b0:	701a      	strb	r2, [r3, #0]
	// notif UI
	msg_64_t m;
	m.from = MA_CONTROL_T(trnum);
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	b25b      	sxtb	r3, r3
 80132b6:	f003 0307 	and.w	r3, r3, #7
 80132ba:	b25b      	sxtb	r3, r3
 80132bc:	f063 032f 	orn	r3, r3, #47	; 0x2f
 80132c0:	b25b      	sxtb	r3, r3
 80132c2:	b2db      	uxtb	r3, r3
 80132c4:	727b      	strb	r3, [r7, #9]
	m.to = MA_UI(1); // fix me
 80132c6:	2381      	movs	r3, #129	; 0x81
 80132c8:	723b      	strb	r3, [r7, #8]
	m.cmd = CMD_TRMODE_NOTIF;
 80132ca:	2321      	movs	r3, #33	; 0x21
 80132cc:	72bb      	strb	r3, [r7, #10]
	m.v1u = mode;
 80132ce:	78fb      	ldrb	r3, [r7, #3]
 80132d0:	b29b      	uxth	r3, r3
 80132d2:	81bb      	strh	r3, [r7, #12]
	mqf_write_from_ctrl(&m);
 80132d4:	f107 0308 	add.w	r3, r7, #8
 80132d8:	4618      	mov	r0, r3
 80132da:	f7ff fe9f 	bl	801301c <mqf_write_from_ctrl>
 80132de:	e000      	b.n	80132e2 <ctrl_set_mode+0x72>
	if (trctl[trnum]._mode == mode) return;
 80132e0:	bf00      	nop
}
 80132e2:	3710      	adds	r7, #16
 80132e4:	46bd      	mov	sp, r7
 80132e6:	bd80      	pop	{r7, pc}
 80132e8:	08019168 	.word	0x08019168
 80132ec:	200051bc 	.word	0x200051bc

080132f0 <ctrl_init>:
}
*/


static void ctrl_init(void)
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	af00      	add	r7, sp, #0
	memset(trctl, 0, sizeof(train_ctrl_t)*NUM_TRAINS);
 80132f4:	22c0      	movs	r2, #192	; 0xc0
 80132f6:	2100      	movs	r1, #0
 80132f8:	481f      	ldr	r0, [pc, #124]	; (8013378 <ctrl_init+0x88>)
 80132fa:	f005 fcdc 	bl	8018cb6 <memset>
	ctrl_set_mode(0, train_manual);
 80132fe:	2101      	movs	r1, #1
 8013300:	2000      	movs	r0, #0
 8013302:	f7ff ffb5 	bl	8013270 <ctrl_set_mode>
	ctrl_set_mode(1, train_auto);
 8013306:	2103      	movs	r1, #3
 8013308:	2001      	movs	r0, #1
 801330a:	f7ff ffb1 	bl	8013270 <ctrl_set_mode>
	set_turnout(0, 0);
 801330e:	2100      	movs	r1, #0
 8013310:	2000      	movs	r0, #0
 8013312:	f001 f949 	bl	80145a8 <set_turnout>
	if ((1)) {
		trctl[0].canton1_addr = MA_CANTON(0, 1);//MA_CANTON(0, 1); // initial blk
 8013316:	4b18      	ldr	r3, [pc, #96]	; (8013378 <ctrl_init+0x88>)
 8013318:	2201      	movs	r2, #1
 801331a:	715a      	strb	r2, [r3, #5]
		trctl[0].canton2_addr = 0xFF;
 801331c:	4b16      	ldr	r3, [pc, #88]	; (8013378 <ctrl_init+0x88>)
 801331e:	22ff      	movs	r2, #255	; 0xff
 8013320:	719a      	strb	r2, [r3, #6]
		trctl[0]._dir = 0;
 8013322:	4b15      	ldr	r3, [pc, #84]	; (8013378 <ctrl_init+0x88>)
 8013324:	2200      	movs	r2, #0
 8013326:	711a      	strb	r2, [r3, #4]
		trctl[0].desired_speed = 0;
 8013328:	4b13      	ldr	r3, [pc, #76]	; (8013378 <ctrl_init+0x88>)
 801332a:	2200      	movs	r2, #0
 801332c:	815a      	strh	r2, [r3, #10]
		trctl[0]._target_speed = 0;
 801332e:	4b12      	ldr	r3, [pc, #72]	; (8013378 <ctrl_init+0x88>)
 8013330:	2200      	movs	r2, #0
 8013332:	805a      	strh	r2, [r3, #2]
		set_state(0, &trctl[0], train_station);
 8013334:	2203      	movs	r2, #3
 8013336:	4910      	ldr	r1, [pc, #64]	; (8013378 <ctrl_init+0x88>)
 8013338:	2000      	movs	r0, #0
 801333a:	f7ff ff21 	bl	8013180 <set_state>
		set_block_addr_occupency(trctl[0].canton1_addr, BLK_OCC_STOP);
 801333e:	4b0e      	ldr	r3, [pc, #56]	; (8013378 <ctrl_init+0x88>)
 8013340:	795b      	ldrb	r3, [r3, #5]
 8013342:	2101      	movs	r1, #1
 8013344:	4618      	mov	r0, r3
 8013346:	f000 fa97 	bl	8013878 <set_block_addr_occupency>

			if ((1)) {
				evt_cmd_set_setdirspeed(1, &trctl[1], 1, 30, 1);
			}
		} else {
			trctl[1].canton1_addr = 0xFF;
 801334a:	4b0b      	ldr	r3, [pc, #44]	; (8013378 <ctrl_init+0x88>)
 801334c:	22ff      	movs	r2, #255	; 0xff
 801334e:	775a      	strb	r2, [r3, #29]
			trctl[1].canton2_addr = 0xFF;
 8013350:	4b09      	ldr	r3, [pc, #36]	; (8013378 <ctrl_init+0x88>)
 8013352:	22ff      	movs	r2, #255	; 0xff
 8013354:	779a      	strb	r2, [r3, #30]
			ctrl_set_mode(1, train_notrunning);
 8013356:	2100      	movs	r1, #0
 8013358:	2001      	movs	r0, #1
 801335a:	f7ff ff89 	bl	8013270 <ctrl_set_mode>
			set_state(1, &trctl[1], train_off);
 801335e:	2200      	movs	r2, #0
 8013360:	4906      	ldr	r1, [pc, #24]	; (801337c <ctrl_init+0x8c>)
 8013362:	2001      	movs	r0, #1
 8013364:	f7ff ff0c 	bl	8013180 <set_state>
			//trctl[1].enabled = 0;
			update_c2_state_limits(0, &trctl[0], upd_init);
 8013368:	2200      	movs	r2, #0
 801336a:	4903      	ldr	r1, [pc, #12]	; (8013378 <ctrl_init+0x88>)
 801336c:	2000      	movs	r0, #0
 801336e:	f000 fd9b 	bl	8013ea8 <update_c2_state_limits>

		}
	}
}
 8013372:	bf00      	nop
 8013374:	bd80      	pop	{r7, pc}
 8013376:	bf00      	nop
 8013378:	200051bc 	.word	0x200051bc
 801337c:	200051d4 	.word	0x200051d4

08013380 <reset_timer>:
// ----------------------------------------------------------------------------
// timers


static void reset_timer(int tidx, train_ctrl_t *tvar, int numtimer)
{
 8013380:	b580      	push	{r7, lr}
 8013382:	b084      	sub	sp, #16
 8013384:	af00      	add	r7, sp, #0
 8013386:	60f8      	str	r0, [r7, #12]
 8013388:	60b9      	str	r1, [r7, #8]
 801338a:	607a      	str	r2, [r7, #4]
	itm_debug2(DBG_CTRL, "reset_timer", tidx, numtimer);
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	68fa      	ldr	r2, [r7, #12]
 8013390:	490b      	ldr	r1, [pc, #44]	; (80133c0 <reset_timer+0x40>)
 8013392:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013396:	f7ff fdf9 	bl	8012f8c <itm_debug2>
	if (numtimer<0 || numtimer>=NUM_TIMERS) fatal();
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	2b00      	cmp	r3, #0
 801339e:	db02      	blt.n	80133a6 <reset_timer+0x26>
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	2b01      	cmp	r3, #1
 80133a4:	dd01      	ble.n	80133aa <reset_timer+0x2a>
 80133a6:	f7ff fed3 	bl	8013150 <fatal>
	tvar->timertick[numtimer] = 0;
 80133aa:	68bb      	ldr	r3, [r7, #8]
 80133ac:	687a      	ldr	r2, [r7, #4]
 80133ae:	3204      	adds	r2, #4
 80133b0:	2100      	movs	r1, #0
 80133b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80133b6:	bf00      	nop
 80133b8:	3710      	adds	r7, #16
 80133ba:	46bd      	mov	sp, r7
 80133bc:	bd80      	pop	{r7, pc}
 80133be:	bf00      	nop
 80133c0:	08019174 	.word	0x08019174

080133c4 <set_timer>:
static void set_timer(int tidx, train_ctrl_t *tvar, int numtimer, uint32_t tval)
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b086      	sub	sp, #24
 80133c8:	af02      	add	r7, sp, #8
 80133ca:	60f8      	str	r0, [r7, #12]
 80133cc:	60b9      	str	r1, [r7, #8]
 80133ce:	607a      	str	r2, [r7, #4]
 80133d0:	603b      	str	r3, [r7, #0]
	itm_debug3(DBG_CTRL, "set_timer", tidx, numtimer, tval);
 80133d2:	683b      	ldr	r3, [r7, #0]
 80133d4:	9300      	str	r3, [sp, #0]
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	68fa      	ldr	r2, [r7, #12]
 80133da:	490d      	ldr	r1, [pc, #52]	; (8013410 <set_timer+0x4c>)
 80133dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80133e0:	f7ff fdf0 	bl	8012fc4 <itm_debug3>
	if (numtimer<0 || numtimer>=NUM_TIMERS) fatal();
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	db02      	blt.n	80133f0 <set_timer+0x2c>
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	2b01      	cmp	r3, #1
 80133ee:	dd01      	ble.n	80133f4 <set_timer+0x30>
 80133f0:	f7ff feae 	bl	8013150 <fatal>
	tvar->timertick[numtimer] = HAL_GetTick() + tval;
 80133f4:	f7ee fcf0 	bl	8001dd8 <HAL_GetTick>
 80133f8:	4602      	mov	r2, r0
 80133fa:	683b      	ldr	r3, [r7, #0]
 80133fc:	18d1      	adds	r1, r2, r3
 80133fe:	68bb      	ldr	r3, [r7, #8]
 8013400:	687a      	ldr	r2, [r7, #4]
 8013402:	3204      	adds	r2, #4
 8013404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8013408:	bf00      	nop
 801340a:	3710      	adds	r7, #16
 801340c:	46bd      	mov	sp, r7
 801340e:	bd80      	pop	{r7, pc}
 8013410:	08019180 	.word	0x08019180

08013414 <check_timers>:

static void check_timers(uint32_t tick)
{
 8013414:	b580      	push	{r7, lr}
 8013416:	b088      	sub	sp, #32
 8013418:	af02      	add	r7, sp, #8
 801341a:	6078      	str	r0, [r7, #4]
	//uint32_t t = HAL_GetTick();
	for (int tidx = 0; tidx<NUM_TRAINS; tidx++) {
 801341c:	2300      	movs	r3, #0
 801341e:	617b      	str	r3, [r7, #20]
 8013420:	e036      	b.n	8013490 <check_timers+0x7c>
		train_ctrl_t *tvar = &trctl[tidx];
 8013422:	697a      	ldr	r2, [r7, #20]
 8013424:	4613      	mov	r3, r2
 8013426:	005b      	lsls	r3, r3, #1
 8013428:	4413      	add	r3, r2
 801342a:	00db      	lsls	r3, r3, #3
 801342c:	4a1c      	ldr	r2, [pc, #112]	; (80134a0 <check_timers+0x8c>)
 801342e:	4413      	add	r3, r2
 8013430:	60fb      	str	r3, [r7, #12]
		for (int j=0; j<NUM_TIMERS; j++) {
 8013432:	2300      	movs	r3, #0
 8013434:	613b      	str	r3, [r7, #16]
 8013436:	e025      	b.n	8013484 <check_timers+0x70>
			uint32_t tv = tvar->timertick[j];
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	693a      	ldr	r2, [r7, #16]
 801343c:	3204      	adds	r2, #4
 801343e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013442:	60bb      	str	r3, [r7, #8]
			if (!tv) continue;
 8013444:	68bb      	ldr	r3, [r7, #8]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d018      	beq.n	801347c <check_timers+0x68>
			if (tv <= tick) {
 801344a:	68ba      	ldr	r2, [r7, #8]
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	429a      	cmp	r2, r3
 8013450:	d815      	bhi.n	801347e <check_timers+0x6a>
				itm_debug3(DBG_CTRL, "tim", tidx, j, tv);
 8013452:	68bb      	ldr	r3, [r7, #8]
 8013454:	9300      	str	r3, [sp, #0]
 8013456:	693b      	ldr	r3, [r7, #16]
 8013458:	697a      	ldr	r2, [r7, #20]
 801345a:	4912      	ldr	r1, [pc, #72]	; (80134a4 <check_timers+0x90>)
 801345c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013460:	f7ff fdb0 	bl	8012fc4 <itm_debug3>
				tvar->timertick[j] = 0;
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	693a      	ldr	r2, [r7, #16]
 8013468:	3204      	adds	r2, #4
 801346a:	2100      	movs	r1, #0
 801346c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				evt_timer(tidx, tvar, j);
 8013470:	693a      	ldr	r2, [r7, #16]
 8013472:	68f9      	ldr	r1, [r7, #12]
 8013474:	6978      	ldr	r0, [r7, #20]
 8013476:	f000 fce3 	bl	8013e40 <evt_timer>
 801347a:	e000      	b.n	801347e <check_timers+0x6a>
			if (!tv) continue;
 801347c:	bf00      	nop
		for (int j=0; j<NUM_TIMERS; j++) {
 801347e:	693b      	ldr	r3, [r7, #16]
 8013480:	3301      	adds	r3, #1
 8013482:	613b      	str	r3, [r7, #16]
 8013484:	693b      	ldr	r3, [r7, #16]
 8013486:	2b01      	cmp	r3, #1
 8013488:	ddd6      	ble.n	8013438 <check_timers+0x24>
	for (int tidx = 0; tidx<NUM_TRAINS; tidx++) {
 801348a:	697b      	ldr	r3, [r7, #20]
 801348c:	3301      	adds	r3, #1
 801348e:	617b      	str	r3, [r7, #20]
 8013490:	697b      	ldr	r3, [r7, #20]
 8013492:	2b07      	cmp	r3, #7
 8013494:	ddc5      	ble.n	8013422 <check_timers+0xe>
			}
		}
	}
}
 8013496:	bf00      	nop
 8013498:	3718      	adds	r7, #24
 801349a:	46bd      	mov	sp, r7
 801349c:	bd80      	pop	{r7, pc}
 801349e:	bf00      	nop
 80134a0:	200051bc 	.word	0x200051bc
 80134a4:	0801918c 	.word	0x0801918c

080134a8 <sub_presence_changed>:




static void sub_presence_changed(_UNUSED_ uint32_t tick, uint8_t from_addr, uint8_t lsegnum, uint16_t p, int16_t ival)
{
 80134a8:	b580      	push	{r7, lr}
 80134aa:	b08a      	sub	sp, #40	; 0x28
 80134ac:	af02      	add	r7, sp, #8
 80134ae:	6078      	str	r0, [r7, #4]
 80134b0:	4608      	mov	r0, r1
 80134b2:	4611      	mov	r1, r2
 80134b4:	461a      	mov	r2, r3
 80134b6:	4603      	mov	r3, r0
 80134b8:	70fb      	strb	r3, [r7, #3]
 80134ba:	460b      	mov	r3, r1
 80134bc:	70bb      	strb	r3, [r7, #2]
 80134be:	4613      	mov	r3, r2
 80134c0:	803b      	strh	r3, [r7, #0]
	int segnum = _sub_addr_to_sub_num(from_addr, lsegnum);
 80134c2:	78ba      	ldrb	r2, [r7, #2]
 80134c4:	78fb      	ldrb	r3, [r7, #3]
 80134c6:	4611      	mov	r1, r2
 80134c8:	4618      	mov	r0, r3
 80134ca:	f7ff fdb7 	bl	801303c <_sub_addr_to_sub_num>
 80134ce:	6178      	str	r0, [r7, #20]
	itm_debug3(DBG_PRES|DBG_CTRL, "PRC",  p, lsegnum, ival);
 80134d0:	883a      	ldrh	r2, [r7, #0]
 80134d2:	78b9      	ldrb	r1, [r7, #2]
 80134d4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80134d8:	9300      	str	r3, [sp, #0]
 80134da:	460b      	mov	r3, r1
 80134dc:	4947      	ldr	r1, [pc, #284]	; (80135fc <sub_presence_changed+0x154>)
 80134de:	f44f 6088 	mov.w	r0, #1088	; 0x440
 80134e2:	f7ff fd6f 	bl	8012fc4 <itm_debug3>
	if ((segnum<0) || (segnum>11)) return;
 80134e6:	697b      	ldr	r3, [r7, #20]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	f2c0 8082 	blt.w	80135f2 <sub_presence_changed+0x14a>
 80134ee:	697b      	ldr	r3, [r7, #20]
 80134f0:	2b0b      	cmp	r3, #11
 80134f2:	dc7e      	bgt.n	80135f2 <sub_presence_changed+0x14a>

	uint8_t canton = blk_addr_for_sub_addr(from_addr, segnum);
 80134f4:	697b      	ldr	r3, [r7, #20]
 80134f6:	b2da      	uxtb	r2, r3
 80134f8:	78fb      	ldrb	r3, [r7, #3]
 80134fa:	4611      	mov	r1, r2
 80134fc:	4618      	mov	r0, r3
 80134fe:	f7ff fe0b 	bl	8013118 <blk_addr_for_sub_addr>
 8013502:	4603      	mov	r3, r0
 8013504:	74fb      	strb	r3, [r7, #19]
	if (0xFF == canton) {
 8013506:	7cfb      	ldrb	r3, [r7, #19]
 8013508:	2bff      	cmp	r3, #255	; 0xff
 801350a:	d106      	bne.n	801351a <sub_presence_changed+0x72>
		itm_debug2(DBG_ERR|DBG_CTRL, "blk??", from_addr, segnum);
 801350c:	78fa      	ldrb	r2, [r7, #3]
 801350e:	697b      	ldr	r3, [r7, #20]
 8013510:	493b      	ldr	r1, [pc, #236]	; (8013600 <sub_presence_changed+0x158>)
 8013512:	483c      	ldr	r0, [pc, #240]	; (8013604 <sub_presence_changed+0x15c>)
 8013514:	f7ff fd3a 	bl	8012f8c <itm_debug2>
		return;
 8013518:	e06c      	b.n	80135f4 <sub_presence_changed+0x14c>
	}
	itm_debug3(DBG_PRES|DBG_CTRL, "PRBLK", p, segnum, canton);
 801351a:	883a      	ldrh	r2, [r7, #0]
 801351c:	7cfb      	ldrb	r3, [r7, #19]
 801351e:	9300      	str	r3, [sp, #0]
 8013520:	697b      	ldr	r3, [r7, #20]
 8013522:	4939      	ldr	r1, [pc, #228]	; (8013608 <sub_presence_changed+0x160>)
 8013524:	f44f 6088 	mov.w	r0, #1088	; 0x440
 8013528:	f7ff fd4c 	bl	8012fc4 <itm_debug3>

	int f = 0;
 801352c:	2300      	movs	r3, #0
 801352e:	61fb      	str	r3, [r7, #28]

	for (int tn = 0; tn < NUM_TRAINS; tn++) {
 8013530:	2300      	movs	r3, #0
 8013532:	61bb      	str	r3, [r7, #24]
 8013534:	e050      	b.n	80135d8 <sub_presence_changed+0x130>
		train_ctrl_t *tvar = &trctl[tn];
 8013536:	69ba      	ldr	r2, [r7, #24]
 8013538:	4613      	mov	r3, r2
 801353a:	005b      	lsls	r3, r3, #1
 801353c:	4413      	add	r3, r2
 801353e:	00db      	lsls	r3, r3, #3
 8013540:	4a32      	ldr	r2, [pc, #200]	; (801360c <sub_presence_changed+0x164>)
 8013542:	4413      	add	r3, r2
 8013544:	60fb      	str	r3, [r7, #12]
		const train_config_t *tconf = get_train_cnf(tn);
 8013546:	69b8      	ldr	r0, [r7, #24]
 8013548:	f002 fb4c 	bl	8015be4 <get_train_cnf>
 801354c:	60b8      	str	r0, [r7, #8]
		// check enabled
		if (!tconf->enabled) continue;
 801354e:	68bb      	ldr	r3, [r7, #8]
 8013550:	7c9b      	ldrb	r3, [r3, #18]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d03c      	beq.n	80135d0 <sub_presence_changed+0x128>
		itm_debug3(DBG_PRES|DBG_CTRL, "prblk?", tn, tvar->canton1_addr, tvar->canton2_addr);
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	795b      	ldrb	r3, [r3, #5]
 801355a:	461a      	mov	r2, r3
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	799b      	ldrb	r3, [r3, #6]
 8013560:	9300      	str	r3, [sp, #0]
 8013562:	4613      	mov	r3, r2
 8013564:	69ba      	ldr	r2, [r7, #24]
 8013566:	492a      	ldr	r1, [pc, #168]	; (8013610 <sub_presence_changed+0x168>)
 8013568:	f44f 6088 	mov.w	r0, #1088	; 0x440
 801356c:	f7ff fd2a 	bl	8012fc4 <itm_debug3>
		if (tvar->canton1_addr == canton) {
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	795b      	ldrb	r3, [r3, #5]
 8013574:	7cfa      	ldrb	r2, [r7, #19]
 8013576:	429a      	cmp	r2, r3
 8013578:	d115      	bne.n	80135a6 <sub_presence_changed+0xfe>
			if (p) {
 801357a:	883b      	ldrh	r3, [r7, #0]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d00b      	beq.n	8013598 <sub_presence_changed+0xf0>
				itm_debug2(DBG_PRES, "?enter c1", tn, segnum);
 8013580:	697b      	ldr	r3, [r7, #20]
 8013582:	69ba      	ldr	r2, [r7, #24]
 8013584:	4923      	ldr	r1, [pc, #140]	; (8013614 <sub_presence_changed+0x16c>)
 8013586:	2040      	movs	r0, #64	; 0x40
 8013588:	f7ff fd00 	bl	8012f8c <itm_debug2>
				evt_entered_c1(tn, tvar, 0);
 801358c:	2200      	movs	r2, #0
 801358e:	68f9      	ldr	r1, [r7, #12]
 8013590:	69b8      	ldr	r0, [r7, #24]
 8013592:	f000 fa97 	bl	8013ac4 <evt_entered_c1>
 8013596:	e003      	b.n	80135a0 <sub_presence_changed+0xf8>
			} else {
				evt_leaved_c1(tn, tvar);
 8013598:	68f9      	ldr	r1, [r7, #12]
 801359a:	69b8      	ldr	r0, [r7, #24]
 801359c:	f000 fa4a 	bl	8013a34 <evt_leaved_c1>
			}
			f = 1;
 80135a0:	2301      	movs	r3, #1
 80135a2:	61fb      	str	r3, [r7, #28]
 80135a4:	e015      	b.n	80135d2 <sub_presence_changed+0x12a>
		} else if (tvar->canton2_addr == canton) {
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	799b      	ldrb	r3, [r3, #6]
 80135aa:	7cfa      	ldrb	r2, [r7, #19]
 80135ac:	429a      	cmp	r2, r3
 80135ae:	d110      	bne.n	80135d2 <sub_presence_changed+0x12a>
			if (p) {
 80135b0:	883b      	ldrh	r3, [r7, #0]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d005      	beq.n	80135c2 <sub_presence_changed+0x11a>
				evt_entered_c2(tn, tvar, 0);
 80135b6:	2200      	movs	r2, #0
 80135b8:	68f9      	ldr	r1, [r7, #12]
 80135ba:	69b8      	ldr	r0, [r7, #24]
 80135bc:	f000 f9e6 	bl	801398c <evt_entered_c2>
 80135c0:	e003      	b.n	80135ca <sub_presence_changed+0x122>
			} else {
				evt_leaved_c2(tn, tvar);
 80135c2:	68f9      	ldr	r1, [r7, #12]
 80135c4:	69b8      	ldr	r0, [r7, #24]
 80135c6:	f000 fa93 	bl	8013af0 <evt_leaved_c2>
			}
			f = 1;
 80135ca:	2301      	movs	r3, #1
 80135cc:	61fb      	str	r3, [r7, #28]
 80135ce:	e000      	b.n	80135d2 <sub_presence_changed+0x12a>
		if (!tconf->enabled) continue;
 80135d0:	bf00      	nop
	for (int tn = 0; tn < NUM_TRAINS; tn++) {
 80135d2:	69bb      	ldr	r3, [r7, #24]
 80135d4:	3301      	adds	r3, #1
 80135d6:	61bb      	str	r3, [r7, #24]
 80135d8:	69bb      	ldr	r3, [r7, #24]
 80135da:	2b07      	cmp	r3, #7
 80135dc:	ddab      	ble.n	8013536 <sub_presence_changed+0x8e>
		}
	}
	if (!f) {
 80135de:	69fb      	ldr	r3, [r7, #28]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d107      	bne.n	80135f4 <sub_presence_changed+0x14c>
		// presence on unexpected canton
		itm_debug2(DBG_ERR|DBG_PRES, "?unexp", segnum, canton);
 80135e4:	7cfb      	ldrb	r3, [r7, #19]
 80135e6:	697a      	ldr	r2, [r7, #20]
 80135e8:	490b      	ldr	r1, [pc, #44]	; (8013618 <sub_presence_changed+0x170>)
 80135ea:	480c      	ldr	r0, [pc, #48]	; (801361c <sub_presence_changed+0x174>)
 80135ec:	f7ff fcce 	bl	8012f8c <itm_debug2>
 80135f0:	e000      	b.n	80135f4 <sub_presence_changed+0x14c>
	if ((segnum<0) || (segnum>11)) return;
 80135f2:	bf00      	nop
	}
}
 80135f4:	3720      	adds	r7, #32
 80135f6:	46bd      	mov	sp, r7
 80135f8:	bd80      	pop	{r7, pc}
 80135fa:	bf00      	nop
 80135fc:	08019190 	.word	0x08019190
 8013600:	08019194 	.word	0x08019194
 8013604:	80000400 	.word	0x80000400
 8013608:	0801919c 	.word	0x0801919c
 801360c:	200051bc 	.word	0x200051bc
 8013610:	080191a4 	.word	0x080191a4
 8013614:	080191ac 	.word	0x080191ac
 8013618:	080191b8 	.word	0x080191b8
 801361c:	80000040 	.word	0x80000040

08013620 <ctrl_run_tick>:

// ----------------------------------------------------------------------------


void ctrl_run_tick(_UNUSED_ uint32_t notif_flags, uint32_t tick, _UNUSED_ uint32_t dt)
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b08c      	sub	sp, #48	; 0x30
 8013624:	af02      	add	r7, sp, #8
 8013626:	60f8      	str	r0, [r7, #12]
 8013628:	60b9      	str	r1, [r7, #8]
 801362a:	607a      	str	r2, [r7, #4]
	static int first=1;
	if (first) {
 801362c:	4b62      	ldr	r3, [pc, #392]	; (80137b8 <ctrl_run_tick+0x198>)
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d006      	beq.n	8013642 <ctrl_run_tick+0x22>
		first = 0;
 8013634:	4b60      	ldr	r3, [pc, #384]	; (80137b8 <ctrl_run_tick+0x198>)
 8013636:	2200      	movs	r2, #0
 8013638:	601a      	str	r2, [r3, #0]
		ctrl_init();
 801363a:	f7ff fe59 	bl	80132f0 <ctrl_init>
		ctrl_reset();
 801363e:	f7ff fd97 	bl	8013170 <ctrl_reset>
    }

	check_block_delayed(tick);
 8013642:	68b8      	ldr	r0, [r7, #8]
 8013644:	f000 f958 	bl	80138f8 <check_block_delayed>

	/* process messages */
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_ctrl(&m);
 8013648:	f107 0310 	add.w	r3, r7, #16
 801364c:	4618      	mov	r0, r3
 801364e:	f7ff fcd5 	bl	8012ffc <mqf_read_to_ctrl>
 8013652:	6278      	str	r0, [r7, #36]	; 0x24
		if (rc) break;
 8013654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013656:	2b00      	cmp	r3, #0
 8013658:	d009      	beq.n	801366e <ctrl_run_tick+0x4e>
			}
		} else {
			itm_debug1(DBG_MSG|DBG_CTRL, "bad msg", m.to);
		}
	}
	check_timers(tick);
 801365a:	68b8      	ldr	r0, [r7, #8]
 801365c:	f7ff feda 	bl	8013414 <check_timers>
	check_blk_tick(tick);
 8013660:	68b8      	ldr	r0, [r7, #8]
 8013662:	f000 ff59 	bl	8014518 <check_blk_tick>
	check_behaviour(tick);
 8013666:	68b8      	ldr	r0, [r7, #8]
 8013668:	f000 ffe0 	bl	801462c <check_behaviour>
	//hi_tick(notif_flags, tick, dt);
}
 801366c:	e0a0      	b.n	80137b0 <ctrl_run_tick+0x190>
        switch (m.cmd) {
 801366e:	7cbb      	ldrb	r3, [r7, #18]
 8013670:	2bfc      	cmp	r3, #252	; 0xfc
 8013672:	d007      	beq.n	8013684 <ctrl_run_tick+0x64>
 8013674:	2bfc      	cmp	r3, #252	; 0xfc
 8013676:	db17      	blt.n	80136a8 <ctrl_run_tick+0x88>
 8013678:	3bfe      	subs	r3, #254	; 0xfe
 801367a:	2b01      	cmp	r3, #1
 801367c:	d814      	bhi.n	80136a8 <ctrl_run_tick+0x88>
                ctrl_reset(); // untested
 801367e:	f7ff fd77 	bl	8013170 <ctrl_reset>
                continue;
 8013682:	e094      	b.n	80137ae <ctrl_run_tick+0x18e>
            	if (run_mode != m.v1u) {
 8013684:	4b4d      	ldr	r3, [pc, #308]	; (80137bc <ctrl_run_tick+0x19c>)
 8013686:	781b      	ldrb	r3, [r3, #0]
 8013688:	b29a      	uxth	r2, r3
 801368a:	8abb      	ldrh	r3, [r7, #20]
 801368c:	429a      	cmp	r2, r3
 801368e:	f000 8089 	beq.w	80137a4 <ctrl_run_tick+0x184>
            		run_mode = m.v1u;
 8013692:	8abb      	ldrh	r3, [r7, #20]
 8013694:	b2da      	uxtb	r2, r3
 8013696:	4b49      	ldr	r3, [pc, #292]	; (80137bc <ctrl_run_tick+0x19c>)
 8013698:	701a      	strb	r2, [r3, #0]
            		testerAddr = m.from;
 801369a:	7c7a      	ldrb	r2, [r7, #17]
 801369c:	4b48      	ldr	r3, [pc, #288]	; (80137c0 <ctrl_run_tick+0x1a0>)
 801369e:	701a      	strb	r2, [r3, #0]
            		first = 1;
 80136a0:	4b45      	ldr	r3, [pc, #276]	; (80137b8 <ctrl_run_tick+0x198>)
 80136a2:	2201      	movs	r2, #1
 80136a4:	601a      	str	r2, [r3, #0]
                continue;
 80136a6:	e07d      	b.n	80137a4 <ctrl_run_tick+0x184>
            	break;
 80136a8:	bf00      	nop
        if (run_mode != runmode_normal) continue;
 80136aa:	4b44      	ldr	r3, [pc, #272]	; (80137bc <ctrl_run_tick+0x19c>)
 80136ac:	781b      	ldrb	r3, [r3, #0]
 80136ae:	2b01      	cmp	r3, #1
 80136b0:	d17a      	bne.n	80137a8 <ctrl_run_tick+0x188>
		if (IS_CONTROL_T(m.to)) {
 80136b2:	7c3b      	ldrb	r3, [r7, #16]
 80136b4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80136b8:	2bd0      	cmp	r3, #208	; 0xd0
 80136ba:	d16b      	bne.n	8013794 <ctrl_run_tick+0x174>
			int tidx = m.to & 0x7;
 80136bc:	7c3b      	ldrb	r3, [r7, #16]
 80136be:	f003 0307 	and.w	r3, r3, #7
 80136c2:	623b      	str	r3, [r7, #32]
			train_ctrl_t *tvar = &trctl[tidx];
 80136c4:	6a3a      	ldr	r2, [r7, #32]
 80136c6:	4613      	mov	r3, r2
 80136c8:	005b      	lsls	r3, r3, #1
 80136ca:	4413      	add	r3, r2
 80136cc:	00db      	lsls	r3, r3, #3
 80136ce:	4a3d      	ldr	r2, [pc, #244]	; (80137c4 <ctrl_run_tick+0x1a4>)
 80136d0:	4413      	add	r3, r2
 80136d2:	61fb      	str	r3, [r7, #28]
			switch (m.cmd) {
 80136d4:	7cbb      	ldrb	r3, [r7, #18]
 80136d6:	2b13      	cmp	r3, #19
 80136d8:	d018      	beq.n	801370c <ctrl_run_tick+0xec>
 80136da:	2b13      	cmp	r3, #19
 80136dc:	dc02      	bgt.n	80136e4 <ctrl_run_tick+0xc4>
 80136de:	2b12      	cmp	r3, #18
 80136e0:	d005      	beq.n	80136ee <ctrl_run_tick+0xce>
				break;
 80136e2:	e064      	b.n	80137ae <ctrl_run_tick+0x18e>
			switch (m.cmd) {
 80136e4:	2b17      	cmp	r3, #23
 80136e6:	d039      	beq.n	801375c <ctrl_run_tick+0x13c>
 80136e8:	2b51      	cmp	r3, #81	; 0x51
 80136ea:	d043      	beq.n	8013774 <ctrl_run_tick+0x154>
				break;
 80136ec:	e05f      	b.n	80137ae <ctrl_run_tick+0x18e>
				if (ignore_ina_presence) break;
 80136ee:	4b36      	ldr	r3, [pc, #216]	; (80137c8 <ctrl_run_tick+0x1a8>)
 80136f0:	781b      	ldrb	r3, [r3, #0]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d15a      	bne.n	80137ac <ctrl_run_tick+0x18c>
				sub_presence_changed(tick, m.from, m.sub, m.v1u, m.v2);
 80136f6:	7c79      	ldrb	r1, [r7, #17]
 80136f8:	7cfa      	ldrb	r2, [r7, #19]
 80136fa:	8ab8      	ldrh	r0, [r7, #20]
 80136fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013700:	9300      	str	r3, [sp, #0]
 8013702:	4603      	mov	r3, r0
 8013704:	68b8      	ldr	r0, [r7, #8]
 8013706:	f7ff fecf 	bl	80134a8 <sub_presence_changed>
				break;
 801370a:	e050      	b.n	80137ae <ctrl_run_tick+0x18e>
				itm_debug2(DBG_CTRL,"BEMF/C2", tidx,  m.v1u);
 801370c:	8abb      	ldrh	r3, [r7, #20]
 801370e:	6a3a      	ldr	r2, [r7, #32]
 8013710:	492e      	ldr	r1, [pc, #184]	; (80137cc <ctrl_run_tick+0x1ac>)
 8013712:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013716:	f7ff fc39 	bl	8012f8c <itm_debug2>
				train_ctrl_t *tvar = &trctl[tidx];
 801371a:	6a3a      	ldr	r2, [r7, #32]
 801371c:	4613      	mov	r3, r2
 801371e:	005b      	lsls	r3, r3, #1
 8013720:	4413      	add	r3, r2
 8013722:	00db      	lsls	r3, r3, #3
 8013724:	4a27      	ldr	r2, [pc, #156]	; (80137c4 <ctrl_run_tick+0x1a4>)
 8013726:	4413      	add	r3, r2
 8013728:	61bb      	str	r3, [r7, #24]
				if (m.v1u != tvar->canton2_addr) {
 801372a:	8aba      	ldrh	r2, [r7, #20]
 801372c:	69bb      	ldr	r3, [r7, #24]
 801372e:	799b      	ldrb	r3, [r3, #6]
 8013730:	b29b      	uxth	r3, r3
 8013732:	429a      	cmp	r2, r3
 8013734:	d00c      	beq.n	8013750 <ctrl_run_tick+0x130>
					itm_debug3(DBG_CTRL, "not c2", tidx, m.v1u, tvar->canton2_addr);
 8013736:	8abb      	ldrh	r3, [r7, #20]
 8013738:	461a      	mov	r2, r3
 801373a:	69bb      	ldr	r3, [r7, #24]
 801373c:	799b      	ldrb	r3, [r3, #6]
 801373e:	9300      	str	r3, [sp, #0]
 8013740:	4613      	mov	r3, r2
 8013742:	6a3a      	ldr	r2, [r7, #32]
 8013744:	4922      	ldr	r1, [pc, #136]	; (80137d0 <ctrl_run_tick+0x1b0>)
 8013746:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801374a:	f7ff fc3b 	bl	8012fc4 <itm_debug3>
					break;
 801374e:	e02e      	b.n	80137ae <ctrl_run_tick+0x18e>
				evt_entered_c2(tidx, tvar, 1);
 8013750:	2201      	movs	r2, #1
 8013752:	69b9      	ldr	r1, [r7, #24]
 8013754:	6a38      	ldr	r0, [r7, #32]
 8013756:	f000 f919 	bl	801398c <evt_entered_c2>
				break;
 801375a:	e028      	b.n	80137ae <ctrl_run_tick+0x18e>
				evt_cmd_set_setdirspeed(tidx, tvar, m.v2, m.v1u, 0);
 801375c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013760:	b25a      	sxtb	r2, r3
 8013762:	8ab9      	ldrh	r1, [r7, #20]
 8013764:	2300      	movs	r3, #0
 8013766:	9300      	str	r3, [sp, #0]
 8013768:	460b      	mov	r3, r1
 801376a:	69f9      	ldr	r1, [r7, #28]
 801376c:	6a38      	ldr	r0, [r7, #32]
 801376e:	f000 fa0d 	bl	8013b8c <evt_cmd_set_setdirspeed>
				break;
 8013772:	e01c      	b.n	80137ae <ctrl_run_tick+0x18e>
				itm_debug2(DBG_POSE, "Trig", m.v1u, m.v2u);
 8013774:	8abb      	ldrh	r3, [r7, #20]
 8013776:	461a      	mov	r2, r3
 8013778:	8afb      	ldrh	r3, [r7, #22]
 801377a:	4916      	ldr	r1, [pc, #88]	; (80137d4 <ctrl_run_tick+0x1b4>)
 801377c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8013780:	f7ff fc04 	bl	8012f8c <itm_debug2>
				evt_pose_triggered(tidx, tvar, m.v1u);
 8013784:	8abb      	ldrh	r3, [r7, #20]
 8013786:	b2db      	uxtb	r3, r3
 8013788:	461a      	mov	r2, r3
 801378a:	69f9      	ldr	r1, [r7, #28]
 801378c:	6a38      	ldr	r0, [r7, #32]
 801378e:	f000 fb09 	bl	8013da4 <evt_pose_triggered>
				break;
 8013792:	e00c      	b.n	80137ae <ctrl_run_tick+0x18e>
			itm_debug1(DBG_MSG|DBG_CTRL, "bad msg", m.to);
 8013794:	7c3b      	ldrb	r3, [r7, #16]
 8013796:	461a      	mov	r2, r3
 8013798:	490f      	ldr	r1, [pc, #60]	; (80137d8 <ctrl_run_tick+0x1b8>)
 801379a:	f240 4002 	movw	r0, #1026	; 0x402
 801379e:	f7ff fbdb 	bl	8012f58 <itm_debug1>
 80137a2:	e751      	b.n	8013648 <ctrl_run_tick+0x28>
                continue;
 80137a4:	bf00      	nop
 80137a6:	e74f      	b.n	8013648 <ctrl_run_tick+0x28>
        if (run_mode != runmode_normal) continue;
 80137a8:	bf00      	nop
 80137aa:	e74d      	b.n	8013648 <ctrl_run_tick+0x28>
				if (ignore_ina_presence) break;
 80137ac:	bf00      	nop
	for (;;) {
 80137ae:	e74b      	b.n	8013648 <ctrl_run_tick+0x28>
}
 80137b0:	3728      	adds	r7, #40	; 0x28
 80137b2:	46bd      	mov	sp, r7
 80137b4:	bd80      	pop	{r7, pc}
 80137b6:	bf00      	nop
 80137b8:	2000021c 	.word	0x2000021c
 80137bc:	2000527c 	.word	0x2000527c
 80137c0:	2000527d 	.word	0x2000527d
 80137c4:	200051bc 	.word	0x200051bc
 80137c8:	20000218 	.word	0x20000218
 80137cc:	080191c0 	.word	0x080191c0
 80137d0:	080191c8 	.word	0x080191c8
 80137d4:	080191d0 	.word	0x080191d0
 80137d8:	080191d8 	.word	0x080191d8

080137dc <set_block_num_occupency>:
static uint8_t blk_occup[NUM_CANTONS] = {0}; // TODO 32
static uint8_t occupency_changed = 0;


static void set_block_num_occupency(int blknum, uint8_t v)
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b084      	sub	sp, #16
 80137e0:	af02      	add	r7, sp, #8
 80137e2:	6078      	str	r0, [r7, #4]
 80137e4:	460b      	mov	r3, r1
 80137e6:	70fb      	strb	r3, [r7, #3]
	if (-1 == blknum) fatal();
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80137ee:	d101      	bne.n	80137f4 <set_block_num_occupency+0x18>
 80137f0:	f7ff fcae 	bl	8013150 <fatal>
	if (blk_occup[blknum] != v) {
 80137f4:	4a1c      	ldr	r2, [pc, #112]	; (8013868 <set_block_num_occupency+0x8c>)
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	4413      	add	r3, r2
 80137fa:	781b      	ldrb	r3, [r3, #0]
 80137fc:	78fa      	ldrb	r2, [r7, #3]
 80137fe:	429a      	cmp	r2, r3
 8013800:	d01e      	beq.n	8013840 <set_block_num_occupency+0x64>
		if (USE_BLOCK_DELAY_FREE && (v==BLK_OCC_FREE)) {
 8013802:	78fb      	ldrb	r3, [r7, #3]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d113      	bne.n	8013830 <set_block_num_occupency+0x54>
			if (blk_occup[blknum] >= BLK_OCC_DELAY1) fatal();
 8013808:	4a17      	ldr	r2, [pc, #92]	; (8013868 <set_block_num_occupency+0x8c>)
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	4413      	add	r3, r2
 801380e:	781b      	ldrb	r3, [r3, #0]
 8013810:	2b0f      	cmp	r3, #15
 8013812:	d901      	bls.n	8013818 <set_block_num_occupency+0x3c>
 8013814:	f7ff fc9c 	bl	8013150 <fatal>
			blk_occup[blknum] = BLK_OCC_DELAYM;
 8013818:	4a13      	ldr	r2, [pc, #76]	; (8013868 <set_block_num_occupency+0x8c>)
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	4413      	add	r3, r2
 801381e:	2216      	movs	r2, #22
 8013820:	701a      	strb	r2, [r3, #0]
			itm_debug1(DBG_CTRL, "delay free", blknum);
 8013822:	687a      	ldr	r2, [r7, #4]
 8013824:	4911      	ldr	r1, [pc, #68]	; (801386c <set_block_num_occupency+0x90>)
 8013826:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801382a:	f7ff fb95 	bl	8012f58 <itm_debug1>
 801382e:	e007      	b.n	8013840 <set_block_num_occupency+0x64>
		} else {
			blk_occup[blknum] = v;
 8013830:	4a0d      	ldr	r2, [pc, #52]	; (8013868 <set_block_num_occupency+0x8c>)
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	4413      	add	r3, r2
 8013836:	78fa      	ldrb	r2, [r7, #3]
 8013838:	701a      	strb	r2, [r3, #0]
			occupency_changed = 1;
 801383a:	4b0d      	ldr	r3, [pc, #52]	; (8013870 <set_block_num_occupency+0x94>)
 801383c:	2201      	movs	r2, #1
 801383e:	701a      	strb	r2, [r3, #0]
		}
	}
	if ((1)) {
		itm_debug3(DBG_CTRL, "BO123:", blk_occup[0], blk_occup[1], blk_occup[2]);
 8013840:	4b09      	ldr	r3, [pc, #36]	; (8013868 <set_block_num_occupency+0x8c>)
 8013842:	781b      	ldrb	r3, [r3, #0]
 8013844:	461a      	mov	r2, r3
 8013846:	4b08      	ldr	r3, [pc, #32]	; (8013868 <set_block_num_occupency+0x8c>)
 8013848:	785b      	ldrb	r3, [r3, #1]
 801384a:	4619      	mov	r1, r3
 801384c:	4b06      	ldr	r3, [pc, #24]	; (8013868 <set_block_num_occupency+0x8c>)
 801384e:	789b      	ldrb	r3, [r3, #2]
 8013850:	9300      	str	r3, [sp, #0]
 8013852:	460b      	mov	r3, r1
 8013854:	4907      	ldr	r1, [pc, #28]	; (8013874 <set_block_num_occupency+0x98>)
 8013856:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801385a:	f7ff fbb3 	bl	8012fc4 <itm_debug3>
	}
}
 801385e:	bf00      	nop
 8013860:	3708      	adds	r7, #8
 8013862:	46bd      	mov	sp, r7
 8013864:	bd80      	pop	{r7, pc}
 8013866:	bf00      	nop
 8013868:	20005280 	.word	0x20005280
 801386c:	080191e0 	.word	0x080191e0
 8013870:	20005288 	.word	0x20005288
 8013874:	080191ec 	.word	0x080191ec

08013878 <set_block_addr_occupency>:
static void set_block_addr_occupency(uint8_t blkaddr, uint8_t v)
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b082      	sub	sp, #8
 801387c:	af00      	add	r7, sp, #0
 801387e:	4603      	mov	r3, r0
 8013880:	460a      	mov	r2, r1
 8013882:	71fb      	strb	r3, [r7, #7]
 8013884:	4613      	mov	r3, r2
 8013886:	71bb      	strb	r3, [r7, #6]
	set_block_num_occupency(_blk_addr_to_blk_num(blkaddr), v);
 8013888:	79fb      	ldrb	r3, [r7, #7]
 801388a:	4618      	mov	r0, r3
 801388c:	f7ff fbf3 	bl	8013076 <_blk_addr_to_blk_num>
 8013890:	4602      	mov	r2, r0
 8013892:	79bb      	ldrb	r3, [r7, #6]
 8013894:	4619      	mov	r1, r3
 8013896:	4610      	mov	r0, r2
 8013898:	f7ff ffa0 	bl	80137dc <set_block_num_occupency>
}
 801389c:	bf00      	nop
 801389e:	3708      	adds	r7, #8
 80138a0:	46bd      	mov	sp, r7
 80138a2:	bd80      	pop	{r7, pc}

080138a4 <get_block_num_occupency>:

static uint8_t get_block_num_occupency(int blknum)
{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b082      	sub	sp, #8
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]
	if (-1 == blknum) fatal();
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80138b2:	d101      	bne.n	80138b8 <get_block_num_occupency+0x14>
 80138b4:	f7ff fc4c 	bl	8013150 <fatal>
	return blk_occup[blknum];
 80138b8:	4a03      	ldr	r2, [pc, #12]	; (80138c8 <get_block_num_occupency+0x24>)
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	4413      	add	r3, r2
 80138be:	781b      	ldrb	r3, [r3, #0]
}
 80138c0:	4618      	mov	r0, r3
 80138c2:	3708      	adds	r7, #8
 80138c4:	46bd      	mov	sp, r7
 80138c6:	bd80      	pop	{r7, pc}
 80138c8:	20005280 	.word	0x20005280

080138cc <occupied>:
{
	return get_block_num_occupency(_blk_addr_to_blk_num(blkaddr));
}

static uint8_t occupied(int dir)
{
 80138cc:	b480      	push	{r7}
 80138ce:	b083      	sub	sp, #12
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	6078      	str	r0, [r7, #4]
	if (dir<0) return BLK_OCC_LEFT;
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	da01      	bge.n	80138de <occupied+0x12>
 80138da:	2302      	movs	r3, #2
 80138dc:	e005      	b.n	80138ea <occupied+0x1e>
	if (dir>0) return BLK_OCC_RIGHT;
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	dd01      	ble.n	80138e8 <occupied+0x1c>
 80138e4:	2303      	movs	r3, #3
 80138e6:	e000      	b.n	80138ea <occupied+0x1e>
	return BLK_OCC_STOP;
 80138e8:	2301      	movs	r3, #1
}
 80138ea:	4618      	mov	r0, r3
 80138ec:	370c      	adds	r7, #12
 80138ee:	46bd      	mov	sp, r7
 80138f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f4:	4770      	bx	lr
	...

080138f8 <check_block_delayed>:

static void check_block_delayed(_UNUSED_ uint32_t tick)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b084      	sub	sp, #16
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	6078      	str	r0, [r7, #4]
	static int cnt = 0;
	cnt++;
	if (cnt % 10) return;
#else
	static uint32_t lastcheck = 0;
	if (tick<lastcheck+100) return;
 8013900:	4b1e      	ldr	r3, [pc, #120]	; (801397c <check_block_delayed+0x84>)
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	3364      	adds	r3, #100	; 0x64
 8013906:	687a      	ldr	r2, [r7, #4]
 8013908:	429a      	cmp	r2, r3
 801390a:	d332      	bcc.n	8013972 <check_block_delayed+0x7a>
	lastcheck = tick;
 801390c:	4a1b      	ldr	r2, [pc, #108]	; (801397c <check_block_delayed+0x84>)
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	6013      	str	r3, [r2, #0]
#endif
	for (int i=0; i<NUM_CANTONS; i++) {
 8013912:	2300      	movs	r3, #0
 8013914:	60fb      	str	r3, [r7, #12]
 8013916:	e028      	b.n	801396a <check_block_delayed+0x72>
		if (blk_occup[i] == BLK_OCC_DELAY1) {
 8013918:	4a19      	ldr	r2, [pc, #100]	; (8013980 <check_block_delayed+0x88>)
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	4413      	add	r3, r2
 801391e:	781b      	ldrb	r3, [r3, #0]
 8013920:	2b10      	cmp	r3, #16
 8013922:	d10e      	bne.n	8013942 <check_block_delayed+0x4a>
			itm_debug1(DBG_CTRL, "FREE(d)", i);
 8013924:	68fa      	ldr	r2, [r7, #12]
 8013926:	4917      	ldr	r1, [pc, #92]	; (8013984 <check_block_delayed+0x8c>)
 8013928:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801392c:	f7ff fb14 	bl	8012f58 <itm_debug1>
			blk_occup[i] = BLK_OCC_FREE;
 8013930:	4a13      	ldr	r2, [pc, #76]	; (8013980 <check_block_delayed+0x88>)
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	4413      	add	r3, r2
 8013936:	2200      	movs	r2, #0
 8013938:	701a      	strb	r2, [r3, #0]
			occupency_changed = 1;
 801393a:	4b13      	ldr	r3, [pc, #76]	; (8013988 <check_block_delayed+0x90>)
 801393c:	2201      	movs	r2, #1
 801393e:	701a      	strb	r2, [r3, #0]
 8013940:	e010      	b.n	8013964 <check_block_delayed+0x6c>
		} else if (blk_occup[i] > BLK_OCC_DELAY1) {
 8013942:	4a0f      	ldr	r2, [pc, #60]	; (8013980 <check_block_delayed+0x88>)
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	4413      	add	r3, r2
 8013948:	781b      	ldrb	r3, [r3, #0]
 801394a:	2b10      	cmp	r3, #16
 801394c:	d90a      	bls.n	8013964 <check_block_delayed+0x6c>
			blk_occup[i]--;
 801394e:	4a0c      	ldr	r2, [pc, #48]	; (8013980 <check_block_delayed+0x88>)
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	4413      	add	r3, r2
 8013954:	781b      	ldrb	r3, [r3, #0]
 8013956:	3b01      	subs	r3, #1
 8013958:	b2d9      	uxtb	r1, r3
 801395a:	4a09      	ldr	r2, [pc, #36]	; (8013980 <check_block_delayed+0x88>)
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	4413      	add	r3, r2
 8013960:	460a      	mov	r2, r1
 8013962:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<NUM_CANTONS; i++) {
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	3301      	adds	r3, #1
 8013968:	60fb      	str	r3, [r7, #12]
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	2b07      	cmp	r3, #7
 801396e:	ddd3      	ble.n	8013918 <check_block_delayed+0x20>
 8013970:	e000      	b.n	8013974 <check_block_delayed+0x7c>
	if (tick<lastcheck+100) return;
 8013972:	bf00      	nop
		}
	}
}
 8013974:	3710      	adds	r7, #16
 8013976:	46bd      	mov	sp, r7
 8013978:	bd80      	pop	{r7, pc}
 801397a:	bf00      	nop
 801397c:	2000528c 	.word	0x2000528c
 8013980:	20005280 	.word	0x20005280
 8013984:	080191f4 	.word	0x080191f4
 8013988:	20005288 	.word	0x20005288

0801398c <evt_entered_c2>:




static void evt_entered_c2(int tidx, train_ctrl_t *tvar, uint8_t from_bemf)
{
 801398c:	b590      	push	{r4, r7, lr}
 801398e:	b085      	sub	sp, #20
 8013990:	af00      	add	r7, sp, #0
 8013992:	60f8      	str	r0, [r7, #12]
 8013994:	60b9      	str	r1, [r7, #8]
 8013996:	4613      	mov	r3, r2
 8013998:	71fb      	strb	r3, [r7, #7]
	if (from_bemf && ignore_bemf_presence) return;
 801399a:	79fb      	ldrb	r3, [r7, #7]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d003      	beq.n	80139a8 <evt_entered_c2+0x1c>
 80139a0:	4b20      	ldr	r3, [pc, #128]	; (8013a24 <evt_entered_c2+0x98>)
 80139a2:	781b      	ldrb	r3, [r3, #0]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d136      	bne.n	8013a16 <evt_entered_c2+0x8a>
	switch (tvar->_state) {
 80139a8:	68bb      	ldr	r3, [r7, #8]
 80139aa:	785b      	ldrb	r3, [r3, #1]
 80139ac:	2b01      	cmp	r3, #1
 80139ae:	d002      	beq.n	80139b6 <evt_entered_c2+0x2a>
 80139b0:	2b02      	cmp	r3, #2
 80139b2:	d032      	beq.n	8013a1a <evt_entered_c2+0x8e>
 80139b4:	e026      	b.n	8013a04 <evt_entered_c2+0x78>
	case train_running_c1:
		if (from_bemf && ignore_ina_presence) {
 80139b6:	79fb      	ldrb	r3, [r7, #7]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d00a      	beq.n	80139d2 <evt_entered_c2+0x46>
 80139bc:	4b1a      	ldr	r3, [pc, #104]	; (8013a28 <evt_entered_c2+0x9c>)
 80139be:	781b      	ldrb	r3, [r3, #0]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d006      	beq.n	80139d2 <evt_entered_c2+0x46>
			set_timer(tidx, tvar, TLEAVE_C1, TLEAVE_C1_VALUE);
 80139c4:	2314      	movs	r3, #20
 80139c6:	2200      	movs	r2, #0
 80139c8:	68b9      	ldr	r1, [r7, #8]
 80139ca:	68f8      	ldr	r0, [r7, #12]
 80139cc:	f7ff fcfa 	bl	80133c4 <set_timer>
 80139d0:	e005      	b.n	80139de <evt_entered_c2+0x52>
		} else {
			set_timer(tidx, tvar, TLEAVE_C1, TGUARD_C1_VALUE);
 80139d2:	2364      	movs	r3, #100	; 0x64
 80139d4:	2200      	movs	r2, #0
 80139d6:	68b9      	ldr	r1, [r7, #8]
 80139d8:	68f8      	ldr	r0, [r7, #12]
 80139da:	f7ff fcf3 	bl	80133c4 <set_timer>
		}
		set_block_addr_occupency(tvar->canton2_addr, occupied(tvar->_dir));
 80139de:	68bb      	ldr	r3, [r7, #8]
 80139e0:	799c      	ldrb	r4, [r3, #6]
 80139e2:	68bb      	ldr	r3, [r7, #8]
 80139e4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80139e8:	4618      	mov	r0, r3
 80139ea:	f7ff ff6f 	bl	80138cc <occupied>
 80139ee:	4603      	mov	r3, r0
 80139f0:	4619      	mov	r1, r3
 80139f2:	4620      	mov	r0, r4
 80139f4:	f7ff ff40 	bl	8013878 <set_block_addr_occupency>
		set_state(tidx, tvar, train_running_c1c2);
 80139f8:	2202      	movs	r2, #2
 80139fa:	68b9      	ldr	r1, [r7, #8]
 80139fc:	68f8      	ldr	r0, [r7, #12]
 80139fe:	f7ff fbbf 	bl	8013180 <set_state>
		break;
 8013a02:	e00b      	b.n	8013a1c <evt_entered_c2+0x90>
	case train_running_c1c2:
		break;
	default:
		itm_debug2(DBG_ERR|DBG_CTRL, "bad st/1",tidx, tvar->_state);
 8013a04:	68bb      	ldr	r3, [r7, #8]
 8013a06:	785b      	ldrb	r3, [r3, #1]
 8013a08:	68fa      	ldr	r2, [r7, #12]
 8013a0a:	4908      	ldr	r1, [pc, #32]	; (8013a2c <evt_entered_c2+0xa0>)
 8013a0c:	4808      	ldr	r0, [pc, #32]	; (8013a30 <evt_entered_c2+0xa4>)
 8013a0e:	f7ff fabd 	bl	8012f8c <itm_debug2>
		break;
 8013a12:	bf00      	nop
 8013a14:	e002      	b.n	8013a1c <evt_entered_c2+0x90>
	if (from_bemf && ignore_bemf_presence) return;
 8013a16:	bf00      	nop
 8013a18:	e000      	b.n	8013a1c <evt_entered_c2+0x90>
		break;
 8013a1a:	bf00      	nop
	}
}
 8013a1c:	3714      	adds	r7, #20
 8013a1e:	46bd      	mov	sp, r7
 8013a20:	bd90      	pop	{r4, r7, pc}
 8013a22:	bf00      	nop
 8013a24:	200051bb 	.word	0x200051bb
 8013a28:	20000218 	.word	0x20000218
 8013a2c:	080191fc 	.word	0x080191fc
 8013a30:	80000400 	.word	0x80000400

08013a34 <evt_leaved_c1>:

static void evt_leaved_c1(int tidx, train_ctrl_t *tvars)
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b082      	sub	sp, #8
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
 8013a3c:	6039      	str	r1, [r7, #0]
	itm_debug2(DBG_CTRL, "evt_left_c1", tidx, tvars->_state);
 8013a3e:	683b      	ldr	r3, [r7, #0]
 8013a40:	785b      	ldrb	r3, [r3, #1]
 8013a42:	687a      	ldr	r2, [r7, #4]
 8013a44:	491c      	ldr	r1, [pc, #112]	; (8013ab8 <evt_leaved_c1+0x84>)
 8013a46:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013a4a:	f7ff fa9f 	bl	8012f8c <itm_debug2>
	switch (tvars->_state) {
 8013a4e:	683b      	ldr	r3, [r7, #0]
 8013a50:	785b      	ldrb	r3, [r3, #1]
 8013a52:	2b02      	cmp	r3, #2
 8013a54:	d123      	bne.n	8013a9e <evt_leaved_c1+0x6a>
	case train_running_c1c2:
		reset_timer(tidx, tvars, TLEAVE_C1);
 8013a56:	2200      	movs	r2, #0
 8013a58:	6839      	ldr	r1, [r7, #0]
 8013a5a:	6878      	ldr	r0, [r7, #4]
 8013a5c:	f7ff fc90 	bl	8013380 <reset_timer>
		set_block_addr_occupency(tvars->canton1_addr, BLK_OCC_FREE);
 8013a60:	683b      	ldr	r3, [r7, #0]
 8013a62:	795b      	ldrb	r3, [r3, #5]
 8013a64:	2100      	movs	r1, #0
 8013a66:	4618      	mov	r0, r3
 8013a68:	f7ff ff06 	bl	8013878 <set_block_addr_occupency>
		tvars->canton1_addr = tvars->canton2_addr;
 8013a6c:	683b      	ldr	r3, [r7, #0]
 8013a6e:	799a      	ldrb	r2, [r3, #6]
 8013a70:	683b      	ldr	r3, [r7, #0]
 8013a72:	715a      	strb	r2, [r3, #5]
		tvars->canton2_addr = 0xFF;
 8013a74:	683b      	ldr	r3, [r7, #0]
 8013a76:	22ff      	movs	r2, #255	; 0xff
 8013a78:	719a      	strb	r2, [r3, #6]
		set_state(tidx, tvars, train_running_c1);
 8013a7a:	2201      	movs	r2, #1
 8013a7c:	6839      	ldr	r1, [r7, #0]
 8013a7e:	6878      	ldr	r0, [r7, #4]
 8013a80:	f7ff fb7e 	bl	8013180 <set_state>
		update_c2_state_limits(tidx, tvars, upd_c1c2);
 8013a84:	2202      	movs	r2, #2
 8013a86:	6839      	ldr	r1, [r7, #0]
 8013a88:	6878      	ldr	r0, [r7, #4]
 8013a8a:	f000 fa0d 	bl	8013ea8 <update_c2_state_limits>
		tvars->behaviour_flags |= BEHAVE_CHBKLK;
 8013a8e:	683b      	ldr	r3, [r7, #0]
 8013a90:	899b      	ldrh	r3, [r3, #12]
 8013a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013a96:	b29a      	uxth	r2, r3
 8013a98:	683b      	ldr	r3, [r7, #0]
 8013a9a:	819a      	strh	r2, [r3, #12]
		break;
 8013a9c:	e007      	b.n	8013aae <evt_leaved_c1+0x7a>
	default:
		itm_debug2(DBG_ERR|DBG_CTRL, "bad st/2",tidx, tvars->_state);
 8013a9e:	683b      	ldr	r3, [r7, #0]
 8013aa0:	785b      	ldrb	r3, [r3, #1]
 8013aa2:	687a      	ldr	r2, [r7, #4]
 8013aa4:	4905      	ldr	r1, [pc, #20]	; (8013abc <evt_leaved_c1+0x88>)
 8013aa6:	4806      	ldr	r0, [pc, #24]	; (8013ac0 <evt_leaved_c1+0x8c>)
 8013aa8:	f7ff fa70 	bl	8012f8c <itm_debug2>
		break;
 8013aac:	bf00      	nop
	}
}
 8013aae:	bf00      	nop
 8013ab0:	3708      	adds	r7, #8
 8013ab2:	46bd      	mov	sp, r7
 8013ab4:	bd80      	pop	{r7, pc}
 8013ab6:	bf00      	nop
 8013ab8:	08019208 	.word	0x08019208
 8013abc:	08019214 	.word	0x08019214
 8013ac0:	80000400 	.word	0x80000400

08013ac4 <evt_entered_c1>:

static void evt_entered_c1(int tidx, train_ctrl_t *tvars, _UNUSED_ uint8_t from_bemf)
{
 8013ac4:	b580      	push	{r7, lr}
 8013ac6:	b084      	sub	sp, #16
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	60f8      	str	r0, [r7, #12]
 8013acc:	60b9      	str	r1, [r7, #8]
 8013ace:	4613      	mov	r3, r2
 8013ad0:	71fb      	strb	r3, [r7, #7]
	itm_debug2(DBG_CTRL, "enter C1", tidx, tvars->_state);
 8013ad2:	68bb      	ldr	r3, [r7, #8]
 8013ad4:	785b      	ldrb	r3, [r3, #1]
 8013ad6:	68fa      	ldr	r2, [r7, #12]
 8013ad8:	4904      	ldr	r1, [pc, #16]	; (8013aec <evt_entered_c1+0x28>)
 8013ada:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013ade:	f7ff fa55 	bl	8012f8c <itm_debug2>
}
 8013ae2:	bf00      	nop
 8013ae4:	3710      	adds	r7, #16
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bd80      	pop	{r7, pc}
 8013aea:	bf00      	nop
 8013aec:	08019220 	.word	0x08019220

08013af0 <evt_leaved_c2>:
static void evt_leaved_c2(int tidx, train_ctrl_t *tvar)
{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b082      	sub	sp, #8
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]
 8013af8:	6039      	str	r1, [r7, #0]
	itm_debug2(DBG_CTRL, "leave C2", tidx, tvar->_state);
 8013afa:	683b      	ldr	r3, [r7, #0]
 8013afc:	785b      	ldrb	r3, [r3, #1]
 8013afe:	687a      	ldr	r2, [r7, #4]
 8013b00:	4904      	ldr	r1, [pc, #16]	; (8013b14 <evt_leaved_c2+0x24>)
 8013b02:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013b06:	f7ff fa41 	bl	8012f8c <itm_debug2>
}
 8013b0a:	bf00      	nop
 8013b0c:	3708      	adds	r7, #8
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	bd80      	pop	{r7, pc}
 8013b12:	bf00      	nop
 8013b14:	0801922c 	.word	0x0801922c

08013b18 <evt_tleave>:

static void evt_tleave(int tidx, train_ctrl_t *tvars)
{
 8013b18:	b580      	push	{r7, lr}
 8013b1a:	b082      	sub	sp, #8
 8013b1c:	af00      	add	r7, sp, #0
 8013b1e:	6078      	str	r0, [r7, #4]
 8013b20:	6039      	str	r1, [r7, #0]
	if (ignore_ina_presence) {
 8013b22:	4b15      	ldr	r3, [pc, #84]	; (8013b78 <evt_tleave+0x60>)
 8013b24:	781b      	ldrb	r3, [r3, #0]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d00b      	beq.n	8013b42 <evt_tleave+0x2a>
		itm_debug2(DBG_ERR|DBG_CTRL, "TLeave", tidx, tvars->_state);
 8013b2a:	683b      	ldr	r3, [r7, #0]
 8013b2c:	785b      	ldrb	r3, [r3, #1]
 8013b2e:	687a      	ldr	r2, [r7, #4]
 8013b30:	4912      	ldr	r1, [pc, #72]	; (8013b7c <evt_tleave+0x64>)
 8013b32:	4813      	ldr	r0, [pc, #76]	; (8013b80 <evt_tleave+0x68>)
 8013b34:	f7ff fa2a 	bl	8012f8c <itm_debug2>
		evt_leaved_c1(tidx, tvars);
 8013b38:	6839      	ldr	r1, [r7, #0]
 8013b3a:	6878      	ldr	r0, [r7, #4]
 8013b3c:	f7ff ff7a 	bl	8013a34 <evt_leaved_c1>
		// for now we do the same, but more to do for long trains
		evt_leaved_c1(tidx, tvars);
	} else {
		itm_debug2(DBG_ERR|DBG_CTRL, "TGurd/bdst", tidx, tvars->_state);
	}
}
 8013b40:	e016      	b.n	8013b70 <evt_tleave+0x58>
	} else if (tvars->_state == train_running_c1c2){
 8013b42:	683b      	ldr	r3, [r7, #0]
 8013b44:	785b      	ldrb	r3, [r3, #1]
 8013b46:	2b02      	cmp	r3, #2
 8013b48:	d10b      	bne.n	8013b62 <evt_tleave+0x4a>
		itm_debug2(DBG_ERR|DBG_CTRL, "TGuard", tidx, tvars->_state);
 8013b4a:	683b      	ldr	r3, [r7, #0]
 8013b4c:	785b      	ldrb	r3, [r3, #1]
 8013b4e:	687a      	ldr	r2, [r7, #4]
 8013b50:	490c      	ldr	r1, [pc, #48]	; (8013b84 <evt_tleave+0x6c>)
 8013b52:	480b      	ldr	r0, [pc, #44]	; (8013b80 <evt_tleave+0x68>)
 8013b54:	f7ff fa1a 	bl	8012f8c <itm_debug2>
		evt_leaved_c1(tidx, tvars);
 8013b58:	6839      	ldr	r1, [r7, #0]
 8013b5a:	6878      	ldr	r0, [r7, #4]
 8013b5c:	f7ff ff6a 	bl	8013a34 <evt_leaved_c1>
}
 8013b60:	e006      	b.n	8013b70 <evt_tleave+0x58>
		itm_debug2(DBG_ERR|DBG_CTRL, "TGurd/bdst", tidx, tvars->_state);
 8013b62:	683b      	ldr	r3, [r7, #0]
 8013b64:	785b      	ldrb	r3, [r3, #1]
 8013b66:	687a      	ldr	r2, [r7, #4]
 8013b68:	4907      	ldr	r1, [pc, #28]	; (8013b88 <evt_tleave+0x70>)
 8013b6a:	4805      	ldr	r0, [pc, #20]	; (8013b80 <evt_tleave+0x68>)
 8013b6c:	f7ff fa0e 	bl	8012f8c <itm_debug2>
}
 8013b70:	bf00      	nop
 8013b72:	3708      	adds	r7, #8
 8013b74:	46bd      	mov	sp, r7
 8013b76:	bd80      	pop	{r7, pc}
 8013b78:	20000218 	.word	0x20000218
 8013b7c:	08019238 	.word	0x08019238
 8013b80:	80000400 	.word	0x80000400
 8013b84:	08019240 	.word	0x08019240
 8013b88:	08019248 	.word	0x08019248

08013b8c <evt_cmd_set_setdirspeed>:

static void evt_cmd_set_setdirspeed(int tidx, train_ctrl_t *tvars, int8_t dir, uint16_t tspd, _UNUSED_ uint8_t generated)
{
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b088      	sub	sp, #32
 8013b90:	af02      	add	r7, sp, #8
 8013b92:	60f8      	str	r0, [r7, #12]
 8013b94:	60b9      	str	r1, [r7, #8]
 8013b96:	4611      	mov	r1, r2
 8013b98:	461a      	mov	r2, r3
 8013b9a:	460b      	mov	r3, r1
 8013b9c:	71fb      	strb	r3, [r7, #7]
 8013b9e:	4613      	mov	r3, r2
 8013ba0:	80bb      	strh	r3, [r7, #4]
	itm_debug3(DBG_CTRL, "dirspd", tidx, dir, tspd);
 8013ba2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8013ba6:	88bb      	ldrh	r3, [r7, #4]
 8013ba8:	9300      	str	r3, [sp, #0]
 8013baa:	4613      	mov	r3, r2
 8013bac:	68fa      	ldr	r2, [r7, #12]
 8013bae:	4973      	ldr	r1, [pc, #460]	; (8013d7c <evt_cmd_set_setdirspeed+0x1f0>)
 8013bb0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013bb4:	f7ff fa06 	bl	8012fc4 <itm_debug3>

	if (tvars->_state == train_off) {
 8013bb8:	68bb      	ldr	r3, [r7, #8]
 8013bba:	785b      	ldrb	r3, [r3, #1]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d105      	bne.n	8013bcc <evt_cmd_set_setdirspeed+0x40>
		itm_debug1(DBG_ERR|DBG_CTRL, "dir ch off", tidx);
 8013bc0:	68fa      	ldr	r2, [r7, #12]
 8013bc2:	496f      	ldr	r1, [pc, #444]	; (8013d80 <evt_cmd_set_setdirspeed+0x1f4>)
 8013bc4:	486f      	ldr	r0, [pc, #444]	; (8013d84 <evt_cmd_set_setdirspeed+0x1f8>)
 8013bc6:	f7ff f9c7 	bl	8012f58 <itm_debug1>
		return;
 8013bca:	e0d4      	b.n	8013d76 <evt_cmd_set_setdirspeed+0x1ea>
	}
	int8_t odir = tvars->_dir;
 8013bcc:	68bb      	ldr	r3, [r7, #8]
 8013bce:	791b      	ldrb	r3, [r3, #4]
 8013bd0:	75fb      	strb	r3, [r7, #23]
	uint16_t otspd = tvars->_target_speed;
 8013bd2:	68bb      	ldr	r3, [r7, #8]
 8013bd4:	885b      	ldrh	r3, [r3, #2]
 8013bd6:	82bb      	strh	r3, [r7, #20]

	if (!dir && tspd) {
 8013bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d10a      	bne.n	8013bf6 <evt_cmd_set_setdirspeed+0x6a>
 8013be0:	88bb      	ldrh	r3, [r7, #4]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d007      	beq.n	8013bf6 <evt_cmd_set_setdirspeed+0x6a>
		itm_debug2(DBG_ERR|DBG_CTRL, "dir0spd", tidx, tspd);
 8013be6:	88bb      	ldrh	r3, [r7, #4]
 8013be8:	68fa      	ldr	r2, [r7, #12]
 8013bea:	4967      	ldr	r1, [pc, #412]	; (8013d88 <evt_cmd_set_setdirspeed+0x1fc>)
 8013bec:	4865      	ldr	r0, [pc, #404]	; (8013d84 <evt_cmd_set_setdirspeed+0x1f8>)
 8013bee:	f7ff f9cd 	bl	8012f8c <itm_debug2>
		tspd = 0;
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	80bb      	strh	r3, [r7, #4]
	}
	if (!tspd && dir) {
 8013bf6:	88bb      	ldrh	r3, [r7, #4]
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d10c      	bne.n	8013c16 <evt_cmd_set_setdirspeed+0x8a>
 8013bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d008      	beq.n	8013c16 <evt_cmd_set_setdirspeed+0x8a>
		itm_debug2(DBG_ERR|DBG_CTRL, "spd0dir", tidx, dir);
 8013c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013c08:	68fa      	ldr	r2, [r7, #12]
 8013c0a:	4960      	ldr	r1, [pc, #384]	; (8013d8c <evt_cmd_set_setdirspeed+0x200>)
 8013c0c:	485d      	ldr	r0, [pc, #372]	; (8013d84 <evt_cmd_set_setdirspeed+0x1f8>)
 8013c0e:	f7ff f9bd 	bl	8012f8c <itm_debug2>
		dir = 0;
 8013c12:	2300      	movs	r3, #0
 8013c14:	71fb      	strb	r3, [r7, #7]
	}
	tvars->desired_speed = tspd;
 8013c16:	68bb      	ldr	r3, [r7, #8]
 8013c18:	88ba      	ldrh	r2, [r7, #4]
 8013c1a:	815a      	strh	r2, [r3, #10]

	if ((tspd == otspd) && (dir == odir)) {
 8013c1c:	88ba      	ldrh	r2, [r7, #4]
 8013c1e:	8abb      	ldrh	r3, [r7, #20]
 8013c20:	429a      	cmp	r2, r3
 8013c22:	d111      	bne.n	8013c48 <evt_cmd_set_setdirspeed+0xbc>
 8013c24:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8013c28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013c2c:	429a      	cmp	r2, r3
 8013c2e:	d10b      	bne.n	8013c48 <evt_cmd_set_setdirspeed+0xbc>
		// no change
		itm_debug3(DBG_CTRL, "dirspd/=", tidx, dir, tspd);
 8013c30:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8013c34:	88bb      	ldrh	r3, [r7, #4]
 8013c36:	9300      	str	r3, [sp, #0]
 8013c38:	4613      	mov	r3, r2
 8013c3a:	68fa      	ldr	r2, [r7, #12]
 8013c3c:	4954      	ldr	r1, [pc, #336]	; (8013d90 <evt_cmd_set_setdirspeed+0x204>)
 8013c3e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013c42:	f7ff f9bf 	bl	8012fc4 <itm_debug3>
		return;
 8013c46:	e096      	b.n	8013d76 <evt_cmd_set_setdirspeed+0x1ea>
	}
	if ((tvars->_target_speed != 0) && (tvars->_dir != dir)) {
 8013c48:	68bb      	ldr	r3, [r7, #8]
 8013c4a:	885b      	ldrh	r3, [r3, #2]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d016      	beq.n	8013c7e <evt_cmd_set_setdirspeed+0xf2>
 8013c50:	68bb      	ldr	r3, [r7, #8]
 8013c52:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013c56:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8013c5a:	429a      	cmp	r2, r3
 8013c5c:	d00f      	beq.n	8013c7e <evt_cmd_set_setdirspeed+0xf2>
		itm_debug3(DBG_ERR|DBG_CTRL, "dir ch mov", tidx, dir, tvars->_target_speed);
 8013c5e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8013c62:	68bb      	ldr	r3, [r7, #8]
 8013c64:	885b      	ldrh	r3, [r3, #2]
 8013c66:	9300      	str	r3, [sp, #0]
 8013c68:	4613      	mov	r3, r2
 8013c6a:	68fa      	ldr	r2, [r7, #12]
 8013c6c:	4949      	ldr	r1, [pc, #292]	; (8013d94 <evt_cmd_set_setdirspeed+0x208>)
 8013c6e:	4845      	ldr	r0, [pc, #276]	; (8013d84 <evt_cmd_set_setdirspeed+0x1f8>)
 8013c70:	f7ff f9a8 	bl	8012fc4 <itm_debug3>
		set_state(tidx, tvars, train_station); // say it did stopped
 8013c74:	2203      	movs	r2, #3
 8013c76:	68b9      	ldr	r1, [r7, #8]
 8013c78:	68f8      	ldr	r0, [r7, #12]
 8013c7a:	f7ff fa81 	bl	8013180 <set_state>
		// change dir while not stopped... what do we do here ?
	}
	if ((tvars->_state == train_station) && dir && tspd) {
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	785b      	ldrb	r3, [r3, #1]
 8013c82:	2b03      	cmp	r3, #3
 8013c84:	d120      	bne.n	8013cc8 <evt_cmd_set_setdirspeed+0x13c>
 8013c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d01c      	beq.n	8013cc8 <evt_cmd_set_setdirspeed+0x13c>
 8013c8e:	88bb      	ldrh	r3, [r7, #4]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d019      	beq.n	8013cc8 <evt_cmd_set_setdirspeed+0x13c>
		itm_debug1(DBG_CTRL, "quit stop", tidx);
 8013c94:	68fa      	ldr	r2, [r7, #12]
 8013c96:	4940      	ldr	r1, [pc, #256]	; (8013d98 <evt_cmd_set_setdirspeed+0x20c>)
 8013c98:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013c9c:	f7ff f95c 	bl	8012f58 <itm_debug1>
		odir = 0;
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	75fb      	strb	r3, [r7, #23]
		set_state(tidx, tvars, train_running_c1);
 8013ca4:	2201      	movs	r2, #1
 8013ca6:	68b9      	ldr	r1, [r7, #8]
 8013ca8:	68f8      	ldr	r0, [r7, #12]
 8013caa:	f7ff fa69 	bl	8013180 <set_state>
		set_block_addr_occupency(tvars->canton1_addr, (dir>0)? BLK_OCC_RIGHT:BLK_OCC_LEFT);
 8013cae:	68bb      	ldr	r3, [r7, #8]
 8013cb0:	795a      	ldrb	r2, [r3, #5]
 8013cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	dd01      	ble.n	8013cbe <evt_cmd_set_setdirspeed+0x132>
 8013cba:	2303      	movs	r3, #3
 8013cbc:	e000      	b.n	8013cc0 <evt_cmd_set_setdirspeed+0x134>
 8013cbe:	2302      	movs	r3, #2
 8013cc0:	4619      	mov	r1, r3
 8013cc2:	4610      	mov	r0, r2
 8013cc4:	f7ff fdd8 	bl	8013878 <set_block_addr_occupency>
	}
	if (tvars->_state == train_running_c1c2 && (odir != dir) && dir) {
 8013cc8:	68bb      	ldr	r3, [r7, #8]
 8013cca:	785b      	ldrb	r3, [r3, #1]
 8013ccc:	2b02      	cmp	r3, #2
 8013cce:	d10e      	bne.n	8013cee <evt_cmd_set_setdirspeed+0x162>
 8013cd0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8013cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013cd8:	429a      	cmp	r2, r3
 8013cda:	d008      	beq.n	8013cee <evt_cmd_set_setdirspeed+0x162>
 8013cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d004      	beq.n	8013cee <evt_cmd_set_setdirspeed+0x162>
		// special care here TODO when reversing change while in c1 to c2 transition
		// TODO
		itm_debug1(DBG_ERR|DBG_CTRL, "c1c2 rev!", tidx);
 8013ce4:	68fa      	ldr	r2, [r7, #12]
 8013ce6:	492d      	ldr	r1, [pc, #180]	; (8013d9c <evt_cmd_set_setdirspeed+0x210>)
 8013ce8:	4826      	ldr	r0, [pc, #152]	; (8013d84 <evt_cmd_set_setdirspeed+0x1f8>)
 8013cea:	f7ff f935 	bl	8012f58 <itm_debug1>
	}

	if (dir != odir) {
 8013cee:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8013cf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013cf6:	429a      	cmp	r2, r3
 8013cf8:	d025      	beq.n	8013d46 <evt_cmd_set_setdirspeed+0x1ba>
		tvars->_dir = dir;
 8013cfa:	68bb      	ldr	r3, [r7, #8]
 8013cfc:	79fa      	ldrb	r2, [r7, #7]
 8013cfe:	711a      	strb	r2, [r3, #4]
		if (!dir) {
 8013d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d10c      	bne.n	8013d22 <evt_cmd_set_setdirspeed+0x196>
			itm_debug1(DBG_CTRL, "stopping", tidx);
 8013d08:	68fa      	ldr	r2, [r7, #12]
 8013d0a:	4925      	ldr	r1, [pc, #148]	; (8013da0 <evt_cmd_set_setdirspeed+0x214>)
 8013d0c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013d10:	f7ff f922 	bl	8012f58 <itm_debug1>
			set_block_addr_occupency(tvars->canton1_addr, BLK_OCC_STOP);
 8013d14:	68bb      	ldr	r3, [r7, #8]
 8013d16:	795b      	ldrb	r3, [r3, #5]
 8013d18:	2101      	movs	r1, #1
 8013d1a:	4618      	mov	r0, r3
 8013d1c:	f7ff fdac 	bl	8013878 <set_block_addr_occupency>
 8013d20:	e00c      	b.n	8013d3c <evt_cmd_set_setdirspeed+0x1b0>
		} else {
			set_block_addr_occupency(tvars->canton1_addr, (dir>0)? BLK_OCC_RIGHT:BLK_OCC_LEFT);
 8013d22:	68bb      	ldr	r3, [r7, #8]
 8013d24:	795a      	ldrb	r2, [r3, #5]
 8013d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	dd01      	ble.n	8013d32 <evt_cmd_set_setdirspeed+0x1a6>
 8013d2e:	2303      	movs	r3, #3
 8013d30:	e000      	b.n	8013d34 <evt_cmd_set_setdirspeed+0x1a8>
 8013d32:	2302      	movs	r3, #2
 8013d34:	4619      	mov	r1, r3
 8013d36:	4610      	mov	r0, r2
 8013d38:	f7ff fd9e 	bl	8013878 <set_block_addr_occupency>
		}
		update_c2_state_limits(tidx, tvars, upd_change_dir);
 8013d3c:	2201      	movs	r2, #1
 8013d3e:	68b9      	ldr	r1, [r7, #8]
 8013d40:	68f8      	ldr	r0, [r7, #12]
 8013d42:	f000 f8b1 	bl	8013ea8 <update_c2_state_limits>
	}

	ctrl_set_dir(tidx, tvars, dir, 0);
 8013d46:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8013d4a:	2300      	movs	r3, #0
 8013d4c:	68b9      	ldr	r1, [r7, #8]
 8013d4e:	68f8      	ldr	r0, [r7, #12]
 8013d50:	f000 fb42 	bl	80143d8 <ctrl_set_dir>

	if (tvars->_mode != train_fullmanual) {
 8013d54:	68bb      	ldr	r3, [r7, #8]
 8013d56:	781b      	ldrb	r3, [r3, #0]
 8013d58:	2b02      	cmp	r3, #2
 8013d5a:	d006      	beq.n	8013d6a <evt_cmd_set_setdirspeed+0x1de>
		tspd = MIN(tvars->spd_limit, tspd);
 8013d5c:	68bb      	ldr	r3, [r7, #8]
 8013d5e:	891b      	ldrh	r3, [r3, #8]
 8013d60:	88ba      	ldrh	r2, [r7, #4]
 8013d62:	4293      	cmp	r3, r2
 8013d64:	bf28      	it	cs
 8013d66:	4613      	movcs	r3, r2
 8013d68:	80bb      	strh	r3, [r7, #4]
	}
	//ctrl_set_status(tidx, tspd ? train_running : train_station);
	ctrl_set_tspeed(tidx, tvars, tspd);
 8013d6a:	88bb      	ldrh	r3, [r7, #4]
 8013d6c:	461a      	mov	r2, r3
 8013d6e:	68b9      	ldr	r1, [r7, #8]
 8013d70:	68f8      	ldr	r0, [r7, #12]
 8013d72:	f000 fadd 	bl	8014330 <ctrl_set_tspeed>
}
 8013d76:	3718      	adds	r7, #24
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	bd80      	pop	{r7, pc}
 8013d7c:	08019254 	.word	0x08019254
 8013d80:	0801925c 	.word	0x0801925c
 8013d84:	80000400 	.word	0x80000400
 8013d88:	08019268 	.word	0x08019268
 8013d8c:	08019270 	.word	0x08019270
 8013d90:	08019278 	.word	0x08019278
 8013d94:	08019284 	.word	0x08019284
 8013d98:	08019290 	.word	0x08019290
 8013d9c:	0801929c 	.word	0x0801929c
 8013da0:	080192a8 	.word	0x080192a8

08013da4 <evt_pose_triggered>:


static void evt_pose_triggered(int tidx, train_ctrl_t *tvar, uint8_t c_addr)
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b086      	sub	sp, #24
 8013da8:	af02      	add	r7, sp, #8
 8013daa:	60f8      	str	r0, [r7, #12]
 8013dac:	60b9      	str	r1, [r7, #8]
 8013dae:	4613      	mov	r3, r2
 8013db0:	71fb      	strb	r3, [r7, #7]
	itm_debug3(DBG_CTRL, "pose trgd", tidx, c_addr, tvar->_state);
 8013db2:	79fa      	ldrb	r2, [r7, #7]
 8013db4:	68bb      	ldr	r3, [r7, #8]
 8013db6:	785b      	ldrb	r3, [r3, #1]
 8013db8:	9300      	str	r3, [sp, #0]
 8013dba:	4613      	mov	r3, r2
 8013dbc:	68fa      	ldr	r2, [r7, #12]
 8013dbe:	491a      	ldr	r1, [pc, #104]	; (8013e28 <evt_pose_triggered+0x84>)
 8013dc0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013dc4:	f7ff f8fe 	bl	8012fc4 <itm_debug3>
	if (0==tidx) {
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d107      	bne.n	8013dde <evt_pose_triggered+0x3a>
		itm_debug2(DBG_CTRL, "----trg0", c_addr, tvar->_state);
 8013dce:	79fa      	ldrb	r2, [r7, #7]
 8013dd0:	68bb      	ldr	r3, [r7, #8]
 8013dd2:	785b      	ldrb	r3, [r3, #1]
 8013dd4:	4915      	ldr	r1, [pc, #84]	; (8013e2c <evt_pose_triggered+0x88>)
 8013dd6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013dda:	f7ff f8d7 	bl	8012f8c <itm_debug2>
	}
	switch (tvar->_state) {
 8013dde:	68bb      	ldr	r3, [r7, #8]
 8013de0:	785b      	ldrb	r3, [r3, #1]
 8013de2:	2b01      	cmp	r3, #1
 8013de4:	d115      	bne.n	8013e12 <evt_pose_triggered+0x6e>
	case train_running_c1:
		if (c_addr == tvar->canton1_addr) {
 8013de6:	68bb      	ldr	r3, [r7, #8]
 8013de8:	795b      	ldrb	r3, [r3, #5]
 8013dea:	79fa      	ldrb	r2, [r7, #7]
 8013dec:	429a      	cmp	r2, r3
 8013dee:	d105      	bne.n	8013dfc <evt_pose_triggered+0x58>
			update_c2_state_limits(tidx, tvar, upd_pose_trig);
 8013df0:	2203      	movs	r2, #3
 8013df2:	68b9      	ldr	r1, [r7, #8]
 8013df4:	68f8      	ldr	r0, [r7, #12]
 8013df6:	f000 f857 	bl	8013ea8 <update_c2_state_limits>
			//hi_pose_triggered(tidx, tvar, _blk_addr_to_blk_num(c_addr));
			// TODO
		} else {
			itm_debug3(DBG_ERR|DBG_POSE|DBG_CTRL, "ptrg bad", tidx, c_addr, tvar->canton1_addr);
		}
		break;
 8013dfa:	e011      	b.n	8013e20 <evt_pose_triggered+0x7c>
			itm_debug3(DBG_ERR|DBG_POSE|DBG_CTRL, "ptrg bad", tidx, c_addr, tvar->canton1_addr);
 8013dfc:	79fa      	ldrb	r2, [r7, #7]
 8013dfe:	68bb      	ldr	r3, [r7, #8]
 8013e00:	795b      	ldrb	r3, [r3, #5]
 8013e02:	9300      	str	r3, [sp, #0]
 8013e04:	4613      	mov	r3, r2
 8013e06:	68fa      	ldr	r2, [r7, #12]
 8013e08:	4909      	ldr	r1, [pc, #36]	; (8013e30 <evt_pose_triggered+0x8c>)
 8013e0a:	480a      	ldr	r0, [pc, #40]	; (8013e34 <evt_pose_triggered+0x90>)
 8013e0c:	f7ff f8da 	bl	8012fc4 <itm_debug3>
		break;
 8013e10:	e006      	b.n	8013e20 <evt_pose_triggered+0x7c>
	default:
		itm_debug2(DBG_ERR|DBG_CTRL, "bad st/3",tidx, tvar->_state);
 8013e12:	68bb      	ldr	r3, [r7, #8]
 8013e14:	785b      	ldrb	r3, [r3, #1]
 8013e16:	68fa      	ldr	r2, [r7, #12]
 8013e18:	4907      	ldr	r1, [pc, #28]	; (8013e38 <evt_pose_triggered+0x94>)
 8013e1a:	4808      	ldr	r0, [pc, #32]	; (8013e3c <evt_pose_triggered+0x98>)
 8013e1c:	f7ff f8b6 	bl	8012f8c <itm_debug2>
	}
}
 8013e20:	bf00      	nop
 8013e22:	3710      	adds	r7, #16
 8013e24:	46bd      	mov	sp, r7
 8013e26:	bd80      	pop	{r7, pc}
 8013e28:	080192b4 	.word	0x080192b4
 8013e2c:	080192c0 	.word	0x080192c0
 8013e30:	080192cc 	.word	0x080192cc
 8013e34:	80002400 	.word	0x80002400
 8013e38:	080192d8 	.word	0x080192d8
 8013e3c:	80000400 	.word	0x80000400

08013e40 <evt_timer>:




static void evt_timer(int tidx, train_ctrl_t *tvar, int tnum)
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b084      	sub	sp, #16
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	60f8      	str	r0, [r7, #12]
 8013e48:	60b9      	str	r1, [r7, #8]
 8013e4a:	607a      	str	r2, [r7, #4]
	itm_debug2(DBG_CTRL, "timer evt", tidx, tnum);
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	68fa      	ldr	r2, [r7, #12]
 8013e50:	4912      	ldr	r1, [pc, #72]	; (8013e9c <evt_timer+0x5c>)
 8013e52:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013e56:	f7ff f899 	bl	8012f8c <itm_debug2>
	switch (tnum) {
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d002      	beq.n	8013e66 <evt_timer+0x26>
 8013e60:	2b01      	cmp	r3, #1
 8013e62:	d005      	beq.n	8013e70 <evt_timer+0x30>
 8013e64:	e00c      	b.n	8013e80 <evt_timer+0x40>
	case TLEAVE_C1:
		evt_tleave(tidx, tvar);
 8013e66:	68b9      	ldr	r1, [r7, #8]
 8013e68:	68f8      	ldr	r0, [r7, #12]
 8013e6a:	f7ff fe55 	bl	8013b18 <evt_tleave>
		break;
 8013e6e:	e010      	b.n	8013e92 <evt_timer+0x52>
	case TBEHAVE:
		tvar->behaviour_flags |= BEHAVE_TBEHAVE;
 8013e70:	68bb      	ldr	r3, [r7, #8]
 8013e72:	899b      	ldrh	r3, [r3, #12]
 8013e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013e78:	b29a      	uxth	r2, r3
 8013e7a:	68bb      	ldr	r3, [r7, #8]
 8013e7c:	819a      	strh	r2, [r3, #12]
		break;
 8013e7e:	e008      	b.n	8013e92 <evt_timer+0x52>
	default:
		itm_debug2(DBG_ERR|DBG_CTRL, "?TIM", tidx, tnum);
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	68fa      	ldr	r2, [r7, #12]
 8013e84:	4906      	ldr	r1, [pc, #24]	; (8013ea0 <evt_timer+0x60>)
 8013e86:	4807      	ldr	r0, [pc, #28]	; (8013ea4 <evt_timer+0x64>)
 8013e88:	f7ff f880 	bl	8012f8c <itm_debug2>
		fatal();
 8013e8c:	f7ff f960 	bl	8013150 <fatal>
		break;
 8013e90:	bf00      	nop
	}
}
 8013e92:	bf00      	nop
 8013e94:	3710      	adds	r7, #16
 8013e96:	46bd      	mov	sp, r7
 8013e98:	bd80      	pop	{r7, pc}
 8013e9a:	bf00      	nop
 8013e9c:	080192e4 	.word	0x080192e4
 8013ea0:	080192f0 	.word	0x080192f0
 8013ea4:	80000400 	.word	0x80000400

08013ea8 <update_c2_state_limits>:




static void update_c2_state_limits(int tidx, train_ctrl_t *tvars, update_reason_t updreason)
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b092      	sub	sp, #72	; 0x48
 8013eac:	af02      	add	r7, sp, #8
 8013eae:	60f8      	str	r0, [r7, #12]
 8013eb0:	60b9      	str	r1, [r7, #8]
 8013eb2:	4613      	mov	r3, r2
 8013eb4:	71fb      	strb	r3, [r7, #7]
	itm_debug3(DBG_CTRLHI, "UPDC2", tidx, tvars->canton1_addr, updreason);
 8013eb6:	68bb      	ldr	r3, [r7, #8]
 8013eb8:	795b      	ldrb	r3, [r3, #5]
 8013eba:	461a      	mov	r2, r3
 8013ebc:	79fb      	ldrb	r3, [r7, #7]
 8013ebe:	9300      	str	r3, [sp, #0]
 8013ec0:	4613      	mov	r3, r2
 8013ec2:	68fa      	ldr	r2, [r7, #12]
 8013ec4:	4998      	ldr	r1, [pc, #608]	; (8014128 <update_c2_state_limits+0x280>)
 8013ec6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8013eca:	f7ff f87b 	bl	8012fc4 <itm_debug3>
	uint8_t c2addr = 0xFF;
 8013ece:	23ff      	movs	r3, #255	; 0xff
 8013ed0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint16_t olim = tvars->spd_limit;
 8013ed4:	68bb      	ldr	r3, [r7, #8]
 8013ed6:	891b      	ldrh	r3, [r3, #8]
 8013ed8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint32_t posetval = 0;
 8013eda:	2300      	movs	r3, #0
 8013edc:	63bb      	str	r3, [r7, #56]	; 0x38

	if (updreason == upd_pose_trig) tvars->behaviour_flags |= BEHAVE_PTRIG;
 8013ede:	79fb      	ldrb	r3, [r7, #7]
 8013ee0:	2b03      	cmp	r3, #3
 8013ee2:	d106      	bne.n	8013ef2 <update_c2_state_limits+0x4a>
 8013ee4:	68bb      	ldr	r3, [r7, #8]
 8013ee6:	899b      	ldrh	r3, [r3, #12]
 8013ee8:	f043 0320 	orr.w	r3, r3, #32
 8013eec:	b29a      	uxth	r2, r3
 8013eee:	68bb      	ldr	r3, [r7, #8]
 8013ef0:	819a      	strh	r2, [r3, #12]

	if ((tidx==1) && (tvars->canton1_addr==0x02) && (tvars->canton2_addr==0x01)) {
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	2b01      	cmp	r3, #1
 8013ef6:	d10d      	bne.n	8013f14 <update_c2_state_limits+0x6c>
 8013ef8:	68bb      	ldr	r3, [r7, #8]
 8013efa:	795b      	ldrb	r3, [r3, #5]
 8013efc:	2b02      	cmp	r3, #2
 8013efe:	d109      	bne.n	8013f14 <update_c2_state_limits+0x6c>
 8013f00:	68bb      	ldr	r3, [r7, #8]
 8013f02:	799b      	ldrb	r3, [r3, #6]
 8013f04:	2b01      	cmp	r3, #1
 8013f06:	d105      	bne.n	8013f14 <update_c2_state_limits+0x6c>
		itm_debug1(DBG_CTRL, "hop", tidx);
 8013f08:	68fa      	ldr	r2, [r7, #12]
 8013f0a:	4988      	ldr	r1, [pc, #544]	; (801412c <update_c2_state_limits+0x284>)
 8013f0c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013f10:	f7ff f822 	bl	8012f58 <itm_debug1>
	}
	switch (tvars->_state) {
 8013f14:	68bb      	ldr	r3, [r7, #8]
 8013f16:	785b      	ldrb	r3, [r3, #1]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d007      	beq.n	8013f2c <update_c2_state_limits+0x84>
 8013f1c:	2b03      	cmp	r3, #3
 8013f1e:	d005      	beq.n	8013f2c <update_c2_state_limits+0x84>
		tvars->_target_speed = 0;
		if (tvars->canton2_addr != 0xFF) set_block_addr_occupency(tvars->canton2_addr, BLK_OCC_FREE);
		tvars->canton2_addr = 0xFF;
		goto sendlow;
	default:
		break;
 8013f20:	bf00      	nop
	}
	if (tvars->canton1_addr == 0xFF) {
 8013f22:	68bb      	ldr	r3, [r7, #8]
 8013f24:	795b      	ldrb	r3, [r3, #5]
 8013f26:	2bff      	cmp	r3, #255	; 0xff
 8013f28:	d11a      	bne.n	8013f60 <update_c2_state_limits+0xb8>
 8013f2a:	e013      	b.n	8013f54 <update_c2_state_limits+0xac>
		tvars->_dir = 0;
 8013f2c:	68bb      	ldr	r3, [r7, #8]
 8013f2e:	2200      	movs	r2, #0
 8013f30:	711a      	strb	r2, [r3, #4]
		tvars->_target_speed = 0;
 8013f32:	68bb      	ldr	r3, [r7, #8]
 8013f34:	2200      	movs	r2, #0
 8013f36:	805a      	strh	r2, [r3, #2]
		if (tvars->canton2_addr != 0xFF) set_block_addr_occupency(tvars->canton2_addr, BLK_OCC_FREE);
 8013f38:	68bb      	ldr	r3, [r7, #8]
 8013f3a:	799b      	ldrb	r3, [r3, #6]
 8013f3c:	2bff      	cmp	r3, #255	; 0xff
 8013f3e:	d005      	beq.n	8013f4c <update_c2_state_limits+0xa4>
 8013f40:	68bb      	ldr	r3, [r7, #8]
 8013f42:	799b      	ldrb	r3, [r3, #6]
 8013f44:	2100      	movs	r1, #0
 8013f46:	4618      	mov	r0, r3
 8013f48:	f7ff fc96 	bl	8013878 <set_block_addr_occupency>
		tvars->canton2_addr = 0xFF;
 8013f4c:	68bb      	ldr	r3, [r7, #8]
 8013f4e:	22ff      	movs	r2, #255	; 0xff
 8013f50:	719a      	strb	r2, [r3, #6]
		goto sendlow;
 8013f52:	e157      	b.n	8014204 <update_c2_state_limits+0x35c>
		itm_debug1(DBG_ERR|DBG_CTRL, "*** NO C1", tidx);
 8013f54:	68fa      	ldr	r2, [r7, #12]
 8013f56:	4976      	ldr	r1, [pc, #472]	; (8014130 <update_c2_state_limits+0x288>)
 8013f58:	4876      	ldr	r0, [pc, #472]	; (8014134 <update_c2_state_limits+0x28c>)
 8013f5a:	f7fe fffd 	bl	8012f58 <itm_debug1>
		return;
 8013f5e:	e1d9      	b.n	8014314 <update_c2_state_limits+0x46c>
	}
	if (!tvars->_dir) {
 8013f60:	68bb      	ldr	r3, [r7, #8]
 8013f62:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d11c      	bne.n	8013fa4 <update_c2_state_limits+0xfc>
		set_state(tidx, tvars, train_station);
 8013f6a:	2203      	movs	r2, #3
 8013f6c:	68b9      	ldr	r1, [r7, #8]
 8013f6e:	68f8      	ldr	r0, [r7, #12]
 8013f70:	f7ff f906 	bl	8013180 <set_state>
		tvars->behaviour_flags |= BEHAVE_STOPPED;
 8013f74:	68bb      	ldr	r3, [r7, #8]
 8013f76:	899b      	ldrh	r3, [r3, #12]
 8013f78:	f043 0302 	orr.w	r3, r3, #2
 8013f7c:	b29a      	uxth	r2, r3
 8013f7e:	68bb      	ldr	r3, [r7, #8]
 8013f80:	819a      	strh	r2, [r3, #12]
		tvars->_target_speed = 0;
 8013f82:	68bb      	ldr	r3, [r7, #8]
 8013f84:	2200      	movs	r2, #0
 8013f86:	805a      	strh	r2, [r3, #2]
		if (tvars->canton2_addr != 0xFF) set_block_addr_occupency(tvars->canton2_addr, BLK_OCC_FREE);
 8013f88:	68bb      	ldr	r3, [r7, #8]
 8013f8a:	799b      	ldrb	r3, [r3, #6]
 8013f8c:	2bff      	cmp	r3, #255	; 0xff
 8013f8e:	d005      	beq.n	8013f9c <update_c2_state_limits+0xf4>
 8013f90:	68bb      	ldr	r3, [r7, #8]
 8013f92:	799b      	ldrb	r3, [r3, #6]
 8013f94:	2100      	movs	r1, #0
 8013f96:	4618      	mov	r0, r3
 8013f98:	f7ff fc6e 	bl	8013878 <set_block_addr_occupency>
		tvars->canton2_addr = 0xFF;
 8013f9c:	68bb      	ldr	r3, [r7, #8]
 8013f9e:	22ff      	movs	r2, #255	; 0xff
 8013fa0:	719a      	strb	r2, [r3, #6]
		goto sendlow;
 8013fa2:	e12f      	b.n	8014204 <update_c2_state_limits+0x35c>
	}
	int c1num = _blk_addr_to_blk_num(tvars->canton1_addr);
 8013fa4:	68bb      	ldr	r3, [r7, #8]
 8013fa6:	795b      	ldrb	r3, [r3, #5]
 8013fa8:	4618      	mov	r0, r3
 8013faa:	f7ff f864 	bl	8013076 <_blk_addr_to_blk_num>
 8013fae:	62b8      	str	r0, [r7, #40]	; 0x28
	int c2num = _next_block_num(c1num, (tvars->_dir<0));
 8013fb0:	68bb      	ldr	r3, [r7, #8]
 8013fb2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013fb6:	b2db      	uxtb	r3, r3
 8013fb8:	09db      	lsrs	r3, r3, #7
 8013fba:	b2db      	uxtb	r3, r3
 8013fbc:	4619      	mov	r1, r3
 8013fbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013fc0:	f004 fb21 	bl	8018606 <_next_block_num>
 8013fc4:	6378      	str	r0, [r7, #52]	; 0x34

	itm_debug3(DBG_CTRL, "prev c1c2", tidx, tvars->canton1_addr, tvars->canton2_addr);
 8013fc6:	68bb      	ldr	r3, [r7, #8]
 8013fc8:	795b      	ldrb	r3, [r3, #5]
 8013fca:	461a      	mov	r2, r3
 8013fcc:	68bb      	ldr	r3, [r7, #8]
 8013fce:	799b      	ldrb	r3, [r3, #6]
 8013fd0:	9300      	str	r3, [sp, #0]
 8013fd2:	4613      	mov	r3, r2
 8013fd4:	68fa      	ldr	r2, [r7, #12]
 8013fd6:	4958      	ldr	r1, [pc, #352]	; (8014138 <update_c2_state_limits+0x290>)
 8013fd8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013fdc:	f7fe fff2 	bl	8012fc4 <itm_debug3>
	itm_debug3(DBG_CTRL, "c1c2num", tidx, c1num, c2num);
 8013fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fe2:	9300      	str	r3, [sp, #0]
 8013fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fe6:	68fa      	ldr	r2, [r7, #12]
 8013fe8:	4954      	ldr	r1, [pc, #336]	; (801413c <update_c2_state_limits+0x294>)
 8013fea:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013fee:	f7fe ffe9 	bl	8012fc4 <itm_debug3>

	if (c2num < 0) {
 8013ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	da3f      	bge.n	8014078 <update_c2_state_limits+0x1d0>
		// end of track
		if (updreason == upd_c1c2) {
 8013ff8:	79fb      	ldrb	r3, [r7, #7]
 8013ffa:	2b02      	cmp	r3, #2
 8013ffc:	d122      	bne.n	8014044 <update_c2_state_limits+0x19c>
			itm_debug1(DBG_CTRL, "eot", tidx);
 8013ffe:	68fa      	ldr	r2, [r7, #12]
 8014000:	494f      	ldr	r1, [pc, #316]	; (8014140 <update_c2_state_limits+0x298>)
 8014002:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014006:	f7fe ffa7 	bl	8012f58 <itm_debug1>
			tvars->spd_limit = EOT_SPD_LIMIT;//			set_speed_limit(tn, 20);
 801400a:	68bb      	ldr	r3, [r7, #8]
 801400c:	2232      	movs	r2, #50	; 0x32
 801400e:	811a      	strh	r2, [r3, #8]
			const train_config_t *tconf = get_train_cnf(tidx);
 8014010:	68f8      	ldr	r0, [r7, #12]
 8014012:	f001 fde7 	bl	8015be4 <get_train_cnf>
 8014016:	6238      	str	r0, [r7, #32]
			posetval = pose_middle(_blk_addr_to_blk_num(tvars->canton1_addr), tconf, tvars->_dir);
 8014018:	68bb      	ldr	r3, [r7, #8]
 801401a:	795b      	ldrb	r3, [r3, #5]
 801401c:	4618      	mov	r0, r3
 801401e:	f7ff f82a 	bl	8013076 <_blk_addr_to_blk_num>
 8014022:	68bb      	ldr	r3, [r7, #8]
 8014024:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014028:	461a      	mov	r2, r3
 801402a:	6a39      	ldr	r1, [r7, #32]
 801402c:	f000 fa54 	bl	80144d8 <pose_middle>
 8014030:	4603      	mov	r3, r0
 8014032:	63bb      	str	r3, [r7, #56]	; 0x38
			tvars->behaviour_flags |= BEHAVE_EOT1;
 8014034:	68bb      	ldr	r3, [r7, #8]
 8014036:	899b      	ldrh	r3, [r3, #12]
 8014038:	f043 0304 	orr.w	r3, r3, #4
 801403c:	b29a      	uxth	r2, r3
 801403e:	68bb      	ldr	r3, [r7, #8]
 8014040:	819a      	strh	r2, [r3, #12]
 8014042:	e0bf      	b.n	80141c4 <update_c2_state_limits+0x31c>
		} else if (updreason == upd_pose_trig) {
 8014044:	79fb      	ldrb	r3, [r7, #7]
 8014046:	2b03      	cmp	r3, #3
 8014048:	f040 80bc 	bne.w	80141c4 <update_c2_state_limits+0x31c>
			itm_debug1(DBG_CTRL, "eot2", tidx);
 801404c:	68fa      	ldr	r2, [r7, #12]
 801404e:	493d      	ldr	r1, [pc, #244]	; (8014144 <update_c2_state_limits+0x29c>)
 8014050:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014054:	f7fe ff80 	bl	8012f58 <itm_debug1>
			set_state(tidx, tvars, train_end_of_track);
 8014058:	2205      	movs	r2, #5
 801405a:	68b9      	ldr	r1, [r7, #8]
 801405c:	68f8      	ldr	r0, [r7, #12]
 801405e:	f7ff f88f 	bl	8013180 <set_state>
			tvars->spd_limit = 0;
 8014062:	68bb      	ldr	r3, [r7, #8]
 8014064:	2200      	movs	r2, #0
 8014066:	811a      	strh	r2, [r3, #8]
			tvars->behaviour_flags |= BEHAVE_EOT2;
 8014068:	68bb      	ldr	r3, [r7, #8]
 801406a:	899b      	ldrh	r3, [r3, #12]
 801406c:	f043 0308 	orr.w	r3, r3, #8
 8014070:	b29a      	uxth	r2, r3
 8014072:	68bb      	ldr	r3, [r7, #8]
 8014074:	819a      	strh	r2, [r3, #12]
 8014076:	e0a5      	b.n	80141c4 <update_c2_state_limits+0x31c>
		}
	} else {
		switch (blk_occup[c2num]) {
 8014078:	4a33      	ldr	r2, [pc, #204]	; (8014148 <update_c2_state_limits+0x2a0>)
 801407a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801407c:	4413      	add	r3, r2
 801407e:	781b      	ldrb	r3, [r3, #0]
 8014080:	2b00      	cmp	r3, #0
 8014082:	d002      	beq.n	801408a <update_c2_state_limits+0x1e2>
 8014084:	2b04      	cmp	r3, #4
 8014086:	d046      	beq.n	8014116 <update_c2_state_limits+0x26e>
 8014088:	e026      	b.n	80140d8 <update_c2_state_limits+0x230>
			case BLK_OCC_FREE:
				itm_debug2(DBG_CTRL, "free", tidx, c2num);
 801408a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801408c:	68fa      	ldr	r2, [r7, #12]
 801408e:	492f      	ldr	r1, [pc, #188]	; (801414c <update_c2_state_limits+0x2a4>)
 8014090:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014094:	f7fe ff7a 	bl	8012f8c <itm_debug2>
				tvars->spd_limit = 100; //set_speed_limit(tidx, 100);
 8014098:	68bb      	ldr	r3, [r7, #8]
 801409a:	2264      	movs	r2, #100	; 0x64
 801409c:	811a      	strh	r2, [r3, #8]
				switch (tvars->_state) {
 801409e:	68bb      	ldr	r3, [r7, #8]
 80140a0:	785b      	ldrb	r3, [r3, #1]
 80140a2:	2b01      	cmp	r3, #1
 80140a4:	d016      	beq.n	80140d4 <update_c2_state_limits+0x22c>
 80140a6:	2b04      	cmp	r3, #4
 80140a8:	d10c      	bne.n	80140c4 <update_c2_state_limits+0x21c>
				case train_running_c1:
					break;
				case train_blk_wait:
					set_state(tidx, tvars, train_running_c1);
 80140aa:	2201      	movs	r2, #1
 80140ac:	68b9      	ldr	r1, [r7, #8]
 80140ae:	68f8      	ldr	r0, [r7, #12]
 80140b0:	f7ff f866 	bl	8013180 <set_state>
					tvars->behaviour_flags |= BEHAVE_RESTARTBLK;
 80140b4:	68bb      	ldr	r3, [r7, #8]
 80140b6:	899b      	ldrh	r3, [r3, #12]
 80140b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80140bc:	b29a      	uxth	r2, r3
 80140be:	68bb      	ldr	r3, [r7, #8]
 80140c0:	819a      	strh	r2, [r3, #12]
					break;
 80140c2:	e008      	b.n	80140d6 <update_c2_state_limits+0x22e>
				default:
					itm_debug2(DBG_ERR|DBG_CTRL, "bad st/4", tidx, tvars->_state);
 80140c4:	68bb      	ldr	r3, [r7, #8]
 80140c6:	785b      	ldrb	r3, [r3, #1]
 80140c8:	68fa      	ldr	r2, [r7, #12]
 80140ca:	4921      	ldr	r1, [pc, #132]	; (8014150 <update_c2_state_limits+0x2a8>)
 80140cc:	4819      	ldr	r0, [pc, #100]	; (8014134 <update_c2_state_limits+0x28c>)
 80140ce:	f7fe ff5d 	bl	8012f8c <itm_debug2>
					break;
 80140d2:	e000      	b.n	80140d6 <update_c2_state_limits+0x22e>
					break;
 80140d4:	bf00      	nop
				}
				break;
 80140d6:	e075      	b.n	80141c4 <update_c2_state_limits+0x31c>
			default:
			case BLK_OCC_RIGHT:
			case BLK_OCC_LEFT:
			case BLK_OCC_STOP:
				itm_debug3(DBG_CTRL, "occ", tidx, c2num, blk_occup[c2num]);
 80140d8:	4a1b      	ldr	r2, [pc, #108]	; (8014148 <update_c2_state_limits+0x2a0>)
 80140da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140dc:	4413      	add	r3, r2
 80140de:	781b      	ldrb	r3, [r3, #0]
 80140e0:	9300      	str	r3, [sp, #0]
 80140e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140e4:	68fa      	ldr	r2, [r7, #12]
 80140e6:	491b      	ldr	r1, [pc, #108]	; (8014154 <update_c2_state_limits+0x2ac>)
 80140e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80140ec:	f7fe ff6a 	bl	8012fc4 <itm_debug3>
				set_state(tidx, tvars, train_blk_wait);
 80140f0:	2204      	movs	r2, #4
 80140f2:	68b9      	ldr	r1, [r7, #8]
 80140f4:	68f8      	ldr	r0, [r7, #12]
 80140f6:	f7ff f843 	bl	8013180 <set_state>
				tvars->behaviour_flags |= BEHAVE_BLKW;
 80140fa:	68bb      	ldr	r3, [r7, #8]
 80140fc:	899b      	ldrh	r3, [r3, #12]
 80140fe:	f043 0310 	orr.w	r3, r3, #16
 8014102:	b29a      	uxth	r2, r3
 8014104:	68bb      	ldr	r3, [r7, #8]
 8014106:	819a      	strh	r2, [r3, #12]
				c2num = -1;
 8014108:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801410c:	637b      	str	r3, [r7, #52]	; 0x34
				tvars->spd_limit = 0;
 801410e:	68bb      	ldr	r3, [r7, #8]
 8014110:	2200      	movs	r2, #0
 8014112:	811a      	strh	r2, [r3, #8]
				break;
 8014114:	e056      	b.n	80141c4 <update_c2_state_limits+0x31c>
			case BLK_OCC_C2: {
			    uint8_t c2addr = (c2num>=0) ? _blk_num_to_blk_addr(c2num) : 0xFF;
 8014116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014118:	2b00      	cmp	r3, #0
 801411a:	db1d      	blt.n	8014158 <update_c2_state_limits+0x2b0>
 801411c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801411e:	f7fe ffc7 	bl	80130b0 <_blk_num_to_blk_addr>
 8014122:	4603      	mov	r3, r0
 8014124:	e019      	b.n	801415a <update_c2_state_limits+0x2b2>
 8014126:	bf00      	nop
 8014128:	080192f8 	.word	0x080192f8
 801412c:	08019300 	.word	0x08019300
 8014130:	08019304 	.word	0x08019304
 8014134:	80000400 	.word	0x80000400
 8014138:	08019310 	.word	0x08019310
 801413c:	0801931c 	.word	0x0801931c
 8014140:	08019324 	.word	0x08019324
 8014144:	08019328 	.word	0x08019328
 8014148:	20005280 	.word	0x20005280
 801414c:	08019330 	.word	0x08019330
 8014150:	08019338 	.word	0x08019338
 8014154:	08019344 	.word	0x08019344
 8014158:	23ff      	movs	r3, #255	; 0xff
 801415a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			    if (c2addr == tvars->canton2_addr) {
 801415e:	68bb      	ldr	r3, [r7, #8]
 8014160:	799b      	ldrb	r3, [r3, #6]
 8014162:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014166:	429a      	cmp	r2, r3
 8014168:	d02b      	beq.n	80141c2 <update_c2_state_limits+0x31a>
			    	// normal case, same C2
			    	break;
			    } else if (tvars->canton2_addr != 0xFF) {
 801416a:	68bb      	ldr	r3, [r7, #8]
 801416c:	799b      	ldrb	r3, [r3, #6]
 801416e:	2bff      	cmp	r3, #255	; 0xff
 8014170:	d014      	beq.n	801419c <update_c2_state_limits+0x2f4>
			    	// change C2. Can this occur ? if turnout is changed
			    	// but turnout should not be changed if C2 already set
			    	itm_debug3(DBG_ERR|DBG_CTRL, "C2 change", tidx, tvars->canton2_addr, c2addr);
 8014172:	68bb      	ldr	r3, [r7, #8]
 8014174:	799b      	ldrb	r3, [r3, #6]
 8014176:	461a      	mov	r2, r3
 8014178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801417c:	9300      	str	r3, [sp, #0]
 801417e:	4613      	mov	r3, r2
 8014180:	68fa      	ldr	r2, [r7, #12]
 8014182:	4966      	ldr	r1, [pc, #408]	; (801431c <update_c2_state_limits+0x474>)
 8014184:	4866      	ldr	r0, [pc, #408]	; (8014320 <update_c2_state_limits+0x478>)
 8014186:	f7fe ff1d 	bl	8012fc4 <itm_debug3>
			    	set_block_addr_occupency(tvars->canton2_addr, BLK_OCC_FREE);
 801418a:	68bb      	ldr	r3, [r7, #8]
 801418c:	799b      	ldrb	r3, [r3, #6]
 801418e:	2100      	movs	r1, #0
 8014190:	4618      	mov	r0, r3
 8014192:	f7ff fb71 	bl	8013878 <set_block_addr_occupency>
			    	tvars->canton2_addr = 0xFF;
 8014196:	68bb      	ldr	r3, [r7, #8]
 8014198:	22ff      	movs	r2, #255	; 0xff
 801419a:	719a      	strb	r2, [r3, #6]
			    }
			    // occupied
				itm_debug2(DBG_CTRL, "OCC C2", tidx, c2num);
 801419c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801419e:	68fa      	ldr	r2, [r7, #12]
 80141a0:	4960      	ldr	r1, [pc, #384]	; (8014324 <update_c2_state_limits+0x47c>)
 80141a2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80141a6:	f7fe fef1 	bl	8012f8c <itm_debug2>
				set_state(tidx, tvars, train_blk_wait);
 80141aa:	2204      	movs	r2, #4
 80141ac:	68b9      	ldr	r1, [r7, #8]
 80141ae:	68f8      	ldr	r0, [r7, #12]
 80141b0:	f7fe ffe6 	bl	8013180 <set_state>
				c2num = - 1;
 80141b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80141b8:	637b      	str	r3, [r7, #52]	; 0x34
				tvars->spd_limit = 0;
 80141ba:	68bb      	ldr	r3, [r7, #8]
 80141bc:	2200      	movs	r2, #0
 80141be:	811a      	strh	r2, [r3, #8]
				break;
 80141c0:	e000      	b.n	80141c4 <update_c2_state_limits+0x31c>
			    	break;
 80141c2:	bf00      	nop
			}
		}
	}
	if (c2num>=0) {
 80141c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	db11      	blt.n	80141ee <update_c2_state_limits+0x346>
		// sanity check, can be removed (TODO)
		if ((get_block_num_occupency(c2num) != BLK_OCC_FREE)
 80141ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80141cc:	f7ff fb6a 	bl	80138a4 <get_block_num_occupency>
 80141d0:	4603      	mov	r3, r0
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d007      	beq.n	80141e6 <update_c2_state_limits+0x33e>
				&& (get_block_num_occupency(c2num) != BLK_OCC_C2))fatal();
 80141d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80141d8:	f7ff fb64 	bl	80138a4 <get_block_num_occupency>
 80141dc:	4603      	mov	r3, r0
 80141de:	2b04      	cmp	r3, #4
 80141e0:	d001      	beq.n	80141e6 <update_c2_state_limits+0x33e>
 80141e2:	f7fe ffb5 	bl	8013150 <fatal>
		set_block_num_occupency(c2num, BLK_OCC_C2);
 80141e6:	2104      	movs	r1, #4
 80141e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80141ea:	f7ff faf7 	bl	80137dc <set_block_num_occupency>
	}
    c2addr = (c2num>=0) ? _blk_num_to_blk_addr(c2num) : 0xFF;
 80141ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	db04      	blt.n	80141fe <update_c2_state_limits+0x356>
 80141f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80141f6:	f7fe ff5b 	bl	80130b0 <_blk_num_to_blk_addr>
 80141fa:	4603      	mov	r3, r0
 80141fc:	e000      	b.n	8014200 <update_c2_state_limits+0x358>
 80141fe:	23ff      	movs	r3, #255	; 0xff
 8014200:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

sendlow:
	if ((c2addr != tvars->canton2_addr) || (updreason == upd_c1c2) || (updreason == upd_change_dir) ||(updreason==upd_init)) {
 8014204:	68bb      	ldr	r3, [r7, #8]
 8014206:	799b      	ldrb	r3, [r3, #6]
 8014208:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801420c:	429a      	cmp	r2, r3
 801420e:	d108      	bne.n	8014222 <update_c2_state_limits+0x37a>
 8014210:	79fb      	ldrb	r3, [r7, #7]
 8014212:	2b02      	cmp	r3, #2
 8014214:	d005      	beq.n	8014222 <update_c2_state_limits+0x37a>
 8014216:	79fb      	ldrb	r3, [r7, #7]
 8014218:	2b01      	cmp	r3, #1
 801421a:	d002      	beq.n	8014222 <update_c2_state_limits+0x37a>
 801421c:	79fb      	ldrb	r3, [r7, #7]
 801421e:	2b00      	cmp	r3, #0
 8014220:	d146      	bne.n	80142b0 <update_c2_state_limits+0x408>
		itm_debug3(DBG_CTRL, "C1C2", tidx, tvars->canton1_addr, tvars->canton2_addr);
 8014222:	68bb      	ldr	r3, [r7, #8]
 8014224:	795b      	ldrb	r3, [r3, #5]
 8014226:	461a      	mov	r2, r3
 8014228:	68bb      	ldr	r3, [r7, #8]
 801422a:	799b      	ldrb	r3, [r3, #6]
 801422c:	9300      	str	r3, [sp, #0]
 801422e:	4613      	mov	r3, r2
 8014230:	68fa      	ldr	r2, [r7, #12]
 8014232:	493d      	ldr	r1, [pc, #244]	; (8014328 <update_c2_state_limits+0x480>)
 8014234:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014238:	f7fe fec4 	bl	8012fc4 <itm_debug3>
		tvars->canton2_addr = c2addr;
 801423c:	68bb      	ldr	r3, [r7, #8]
 801423e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8014242:	719a      	strb	r2, [r3, #6]

		int dir = tvars->_dir;
 8014244:	68bb      	ldr	r3, [r7, #8]
 8014246:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801424a:	633b      	str	r3, [r7, #48]	; 0x30
		const train_config_t *tconf = get_train_cnf(tidx);
 801424c:	68f8      	ldr	r0, [r7, #12]
 801424e:	f001 fcc9 	bl	8015be4 <get_train_cnf>
 8014252:	61f8      	str	r0, [r7, #28]
		if (tconf->reversed) dir = -dir;
 8014254:	69fb      	ldr	r3, [r7, #28]
 8014256:	7edb      	ldrb	r3, [r3, #27]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d002      	beq.n	8014262 <update_c2_state_limits+0x3ba>
 801425c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801425e:	425b      	negs	r3, r3
 8014260:	633b      	str	r3, [r7, #48]	; 0x30

		msg_64_t m;
		m.from = MA_CONTROL_T(tidx);
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	b25b      	sxtb	r3, r3
 8014266:	f003 0307 	and.w	r3, r3, #7
 801426a:	b25b      	sxtb	r3, r3
 801426c:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8014270:	b25b      	sxtb	r3, r3
 8014272:	b2db      	uxtb	r3, r3
 8014274:	747b      	strb	r3, [r7, #17]
		m.to =  MA_TRAIN_SC(tidx);
 8014276:	68fb      	ldr	r3, [r7, #12]
 8014278:	b25b      	sxtb	r3, r3
 801427a:	f003 0307 	and.w	r3, r3, #7
 801427e:	b25b      	sxtb	r3, r3
 8014280:	f063 0337 	orn	r3, r3, #55	; 0x37
 8014284:	b25b      	sxtb	r3, r3
 8014286:	b2db      	uxtb	r3, r3
 8014288:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_SET_C1_C2;
 801428a:	2311      	movs	r3, #17
 801428c:	74bb      	strb	r3, [r7, #18]
		m.vbytes[0] = tvars->canton1_addr;
 801428e:	68bb      	ldr	r3, [r7, #8]
 8014290:	795b      	ldrb	r3, [r3, #5]
 8014292:	753b      	strb	r3, [r7, #20]
		m.vbytes[1] = dir;
 8014294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014296:	b2db      	uxtb	r3, r3
 8014298:	757b      	strb	r3, [r7, #21]
		m.vbytes[2] = tvars->canton2_addr;
 801429a:	68bb      	ldr	r3, [r7, #8]
 801429c:	799b      	ldrb	r3, [r3, #6]
 801429e:	75bb      	strb	r3, [r7, #22]
		m.vbytes[3] = dir; // 0;
 80142a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142a2:	b2db      	uxtb	r3, r3
 80142a4:	75fb      	strb	r3, [r7, #23]
		mqf_write_from_ctrl(&m);
 80142a6:	f107 0310 	add.w	r3, r7, #16
 80142aa:	4618      	mov	r0, r3
 80142ac:	f7fe feb6 	bl	801301c <mqf_write_from_ctrl>
	}
	if ((tvars->_mode != train_fullmanual) && (olim != tvars->spd_limit)) {
 80142b0:	68bb      	ldr	r3, [r7, #8]
 80142b2:	781b      	ldrb	r3, [r3, #0]
 80142b4:	2b02      	cmp	r3, #2
 80142b6:	d020      	beq.n	80142fa <update_c2_state_limits+0x452>
 80142b8:	68bb      	ldr	r3, [r7, #8]
 80142ba:	891b      	ldrh	r3, [r3, #8]
 80142bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80142be:	429a      	cmp	r2, r3
 80142c0:	d01b      	beq.n	80142fa <update_c2_state_limits+0x452>
		itm_debug2(DBG_CTRL, "lim upd", tidx, tvars->spd_limit);
 80142c2:	68bb      	ldr	r3, [r7, #8]
 80142c4:	891b      	ldrh	r3, [r3, #8]
 80142c6:	68fa      	ldr	r2, [r7, #12]
 80142c8:	4918      	ldr	r1, [pc, #96]	; (801432c <update_c2_state_limits+0x484>)
 80142ca:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80142ce:	f7fe fe5d 	bl	8012f8c <itm_debug2>
		uint16_t tspd = MIN(tvars->spd_limit, tvars->desired_speed);
 80142d2:	68bb      	ldr	r3, [r7, #8]
 80142d4:	895a      	ldrh	r2, [r3, #10]
 80142d6:	68bb      	ldr	r3, [r7, #8]
 80142d8:	891b      	ldrh	r3, [r3, #8]
 80142da:	4293      	cmp	r3, r2
 80142dc:	bf28      	it	cs
 80142de:	4613      	movcs	r3, r2
 80142e0:	837b      	strh	r3, [r7, #26]
		switch (updreason) {
 80142e2:	79fb      	ldrb	r3, [r7, #7]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d00a      	beq.n	80142fe <update_c2_state_limits+0x456>
 80142e8:	2b01      	cmp	r3, #1
 80142ea:	d00a      	beq.n	8014302 <update_c2_state_limits+0x45a>
		case upd_change_dir: // do nothing, ctrl_set_tspeed will be updated
			break;
		case upd_init:
			break;
		default:
			ctrl_set_tspeed(tidx, tvars, tspd);
 80142ec:	8b7b      	ldrh	r3, [r7, #26]
 80142ee:	461a      	mov	r2, r3
 80142f0:	68b9      	ldr	r1, [r7, #8]
 80142f2:	68f8      	ldr	r0, [r7, #12]
 80142f4:	f000 f81c 	bl	8014330 <ctrl_set_tspeed>
			break;
 80142f8:	e004      	b.n	8014304 <update_c2_state_limits+0x45c>
		}
	}
 80142fa:	bf00      	nop
 80142fc:	e002      	b.n	8014304 <update_c2_state_limits+0x45c>
			break;
 80142fe:	bf00      	nop
 8014300:	e000      	b.n	8014304 <update_c2_state_limits+0x45c>
			break;
 8014302:	bf00      	nop
	if (posetval) {
 8014304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014306:	2b00      	cmp	r3, #0
 8014308:	d004      	beq.n	8014314 <update_c2_state_limits+0x46c>
		//itm_debug2(DBG_CTRL, "set pose", tidx, posetval);
		// POSE trigger must be sent *after* CMD_SET_C1_C2
		set_pose_trig(tidx, posetval);
 801430a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801430c:	4619      	mov	r1, r3
 801430e:	68f8      	ldr	r0, [r7, #12]
 8014310:	f000 f89c 	bl	801444c <set_pose_trig>
	}

}
 8014314:	3740      	adds	r7, #64	; 0x40
 8014316:	46bd      	mov	sp, r7
 8014318:	bd80      	pop	{r7, pc}
 801431a:	bf00      	nop
 801431c:	08019348 	.word	0x08019348
 8014320:	80000400 	.word	0x80000400
 8014324:	08019354 	.word	0x08019354
 8014328:	0801935c 	.word	0x0801935c
 801432c:	08019364 	.word	0x08019364

08014330 <ctrl_set_tspeed>:


// ---------------------------------------------------------------

static void ctrl_set_tspeed(int trnum, train_ctrl_t *tvars, uint16_t tspd)
{
 8014330:	b580      	push	{r7, lr}
 8014332:	b086      	sub	sp, #24
 8014334:	af00      	add	r7, sp, #0
 8014336:	60f8      	str	r0, [r7, #12]
 8014338:	60b9      	str	r1, [r7, #8]
 801433a:	4613      	mov	r3, r2
 801433c:	80fb      	strh	r3, [r7, #6]
	if (tvars->_target_speed == tspd) return;
 801433e:	68bb      	ldr	r3, [r7, #8]
 8014340:	885b      	ldrh	r3, [r3, #2]
 8014342:	88fa      	ldrh	r2, [r7, #6]
 8014344:	429a      	cmp	r2, r3
 8014346:	d03f      	beq.n	80143c8 <ctrl_set_tspeed+0x98>
	tvars->_target_speed = tspd;
 8014348:	68bb      	ldr	r3, [r7, #8]
 801434a:	88fa      	ldrh	r2, [r7, #6]
 801434c:	805a      	strh	r2, [r3, #2]

	// notif UI
	itm_debug2(DBG_UI|DBG_CTRL, "ctrl_set_tspeed", trnum, tspd);
 801434e:	88fb      	ldrh	r3, [r7, #6]
 8014350:	68fa      	ldr	r2, [r7, #12]
 8014352:	491f      	ldr	r1, [pc, #124]	; (80143d0 <ctrl_set_tspeed+0xa0>)
 8014354:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8014358:	f7fe fe18 	bl	8012f8c <itm_debug2>
	msg_64_t m;
	m.from = MA_CONTROL_T(trnum);
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	b25b      	sxtb	r3, r3
 8014360:	f003 0307 	and.w	r3, r3, #7
 8014364:	b25b      	sxtb	r3, r3
 8014366:	f063 032f 	orn	r3, r3, #47	; 0x2f
 801436a:	b25b      	sxtb	r3, r3
 801436c:	b2db      	uxtb	r3, r3
 801436e:	747b      	strb	r3, [r7, #17]
	m.to = MA_UI(1); // TODO : fix me
 8014370:	2381      	movs	r3, #129	; 0x81
 8014372:	743b      	strb	r3, [r7, #16]
	m.cmd = CMD_TRTSPD_NOTIF;
 8014374:	2324      	movs	r3, #36	; 0x24
 8014376:	74bb      	strb	r3, [r7, #18]
	m.v1u = tspd;
 8014378:	88fb      	ldrh	r3, [r7, #6]
 801437a:	82bb      	strh	r3, [r7, #20]
	m.v2 = trctl[trnum]._dir;
 801437c:	4915      	ldr	r1, [pc, #84]	; (80143d4 <ctrl_set_tspeed+0xa4>)
 801437e:	68fa      	ldr	r2, [r7, #12]
 8014380:	4613      	mov	r3, r2
 8014382:	005b      	lsls	r3, r3, #1
 8014384:	4413      	add	r3, r2
 8014386:	00db      	lsls	r3, r3, #3
 8014388:	440b      	add	r3, r1
 801438a:	3304      	adds	r3, #4
 801438c:	f993 3000 	ldrsb.w	r3, [r3]
 8014390:	b21b      	sxth	r3, r3
 8014392:	82fb      	strh	r3, [r7, #22]
	mqf_write_from_ctrl(&m);
 8014394:	f107 0310 	add.w	r3, r7, #16
 8014398:	4618      	mov	r0, r3
 801439a:	f7fe fe3f 	bl	801301c <mqf_write_from_ctrl>

	m.to = MA_TRAIN_SC(trnum);
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	b25b      	sxtb	r3, r3
 80143a2:	f003 0307 	and.w	r3, r3, #7
 80143a6:	b25b      	sxtb	r3, r3
 80143a8:	f063 0337 	orn	r3, r3, #55	; 0x37
 80143ac:	b25b      	sxtb	r3, r3
 80143ae:	b2db      	uxtb	r3, r3
 80143b0:	743b      	strb	r3, [r7, #16]
	m.cmd = CMD_SET_TARGET_SPEED;
 80143b2:	2310      	movs	r3, #16
 80143b4:	74bb      	strb	r3, [r7, #18]
	// direction already given by SET_C1_C2
	//m.v1 = trctl[trnum]._dir*trctl[trnum]._target_speed;
	m.v1u = tvars->_target_speed;
 80143b6:	68bb      	ldr	r3, [r7, #8]
 80143b8:	885b      	ldrh	r3, [r3, #2]
 80143ba:	82bb      	strh	r3, [r7, #20]
	mqf_write_from_ctrl(&m);
 80143bc:	f107 0310 	add.w	r3, r7, #16
 80143c0:	4618      	mov	r0, r3
 80143c2:	f7fe fe2b 	bl	801301c <mqf_write_from_ctrl>
 80143c6:	e000      	b.n	80143ca <ctrl_set_tspeed+0x9a>
	if (tvars->_target_speed == tspd) return;
 80143c8:	bf00      	nop


}
 80143ca:	3718      	adds	r7, #24
 80143cc:	46bd      	mov	sp, r7
 80143ce:	bd80      	pop	{r7, pc}
 80143d0:	0801936c 	.word	0x0801936c
 80143d4:	200051bc 	.word	0x200051bc

080143d8 <ctrl_set_dir>:

static void ctrl_set_dir(int trnum,  train_ctrl_t *tvars, int  dir, int force)
{
 80143d8:	b580      	push	{r7, lr}
 80143da:	b086      	sub	sp, #24
 80143dc:	af00      	add	r7, sp, #0
 80143de:	60f8      	str	r0, [r7, #12]
 80143e0:	60b9      	str	r1, [r7, #8]
 80143e2:	607a      	str	r2, [r7, #4]
 80143e4:	603b      	str	r3, [r7, #0]
	if (!force && (tvars->_dir == dir)) return;
 80143e6:	683b      	ldr	r3, [r7, #0]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d106      	bne.n	80143fa <ctrl_set_dir+0x22>
 80143ec:	68bb      	ldr	r3, [r7, #8]
 80143ee:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80143f2:	461a      	mov	r2, r3
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	4293      	cmp	r3, r2
 80143f8:	d021      	beq.n	801443e <ctrl_set_dir+0x66>

	itm_debug2(DBG_CTRL, "setdir", trnum, dir);
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	68fa      	ldr	r2, [r7, #12]
 80143fe:	4912      	ldr	r1, [pc, #72]	; (8014448 <ctrl_set_dir+0x70>)
 8014400:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014404:	f7fe fdc2 	bl	8012f8c <itm_debug2>


	msg_64_t m;
	m.from = MA_CONTROL_T(trnum);
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	b25b      	sxtb	r3, r3
 801440c:	f003 0307 	and.w	r3, r3, #7
 8014410:	b25b      	sxtb	r3, r3
 8014412:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8014416:	b25b      	sxtb	r3, r3
 8014418:	b2db      	uxtb	r3, r3
 801441a:	747b      	strb	r3, [r7, #17]
	tvars->_dir = dir;
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	b25a      	sxtb	r2, r3
 8014420:	68bb      	ldr	r3, [r7, #8]
 8014422:	711a      	strb	r2, [r3, #4]

	// notif UI
	m.to = MA_UI(1); // fix me
 8014424:	2381      	movs	r3, #129	; 0x81
 8014426:	743b      	strb	r3, [r7, #16]
	m.cmd = CMD_TRDIR_NOTIF;
 8014428:	2323      	movs	r3, #35	; 0x23
 801442a:	74bb      	strb	r3, [r7, #18]
	m.v1 = dir;
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	b21b      	sxth	r3, r3
 8014430:	82bb      	strh	r3, [r7, #20]
	mqf_write_from_ctrl(&m);
 8014432:	f107 0310 	add.w	r3, r7, #16
 8014436:	4618      	mov	r0, r3
 8014438:	f7fe fdf0 	bl	801301c <mqf_write_from_ctrl>
 801443c:	e000      	b.n	8014440 <ctrl_set_dir+0x68>
	if (!force && (tvars->_dir == dir)) return;
 801443e:	bf00      	nop
}
 8014440:	3718      	adds	r7, #24
 8014442:	46bd      	mov	sp, r7
 8014444:	bd80      	pop	{r7, pc}
 8014446:	bf00      	nop
 8014448:	0801937c 	.word	0x0801937c

0801444c <set_pose_trig>:

// ---------------------------------------------------------------


static void set_pose_trig(int numtrain, int32_t pose)
{
 801444c:	b580      	push	{r7, lr}
 801444e:	b086      	sub	sp, #24
 8014450:	af00      	add	r7, sp, #0
 8014452:	6078      	str	r0, [r7, #4]
 8014454:	6039      	str	r1, [r7, #0]
	itm_debug2(DBG_CTRL, "set posetr", numtrain, pose);
 8014456:	683b      	ldr	r3, [r7, #0]
 8014458:	687a      	ldr	r2, [r7, #4]
 801445a:	491e      	ldr	r1, [pc, #120]	; (80144d4 <set_pose_trig+0x88>)
 801445c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014460:	f7fe fd94 	bl	8012f8c <itm_debug2>
	msg_64_t m;
	m.from = MA_CONTROL_T(numtrain);
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	b25b      	sxtb	r3, r3
 8014468:	f003 0307 	and.w	r3, r3, #7
 801446c:	b25b      	sxtb	r3, r3
 801446e:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8014472:	b25b      	sxtb	r3, r3
 8014474:	b2db      	uxtb	r3, r3
 8014476:	727b      	strb	r3, [r7, #9]
	m.from = MA_CONTROL_T(numtrain);
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	b25b      	sxtb	r3, r3
 801447c:	f003 0307 	and.w	r3, r3, #7
 8014480:	b25b      	sxtb	r3, r3
 8014482:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8014486:	b25b      	sxtb	r3, r3
 8014488:	b2db      	uxtb	r3, r3
 801448a:	727b      	strb	r3, [r7, #9]
	m.to =  MA_TRAIN_SC(numtrain);
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	b25b      	sxtb	r3, r3
 8014490:	f003 0307 	and.w	r3, r3, #7
 8014494:	b25b      	sxtb	r3, r3
 8014496:	f063 0337 	orn	r3, r3, #55	; 0x37
 801449a:	b25b      	sxtb	r3, r3
 801449c:	b2db      	uxtb	r3, r3
 801449e:	723b      	strb	r3, [r7, #8]
	m.cmd = CMD_POSE_SET_TRIG;
 80144a0:	2350      	movs	r3, #80	; 0x50
 80144a2:	72bb      	strb	r3, [r7, #10]
	const train_config_t *tconf = get_train_cnf(numtrain);
 80144a4:	6878      	ldr	r0, [r7, #4]
 80144a6:	f001 fb9d 	bl	8015be4 <get_train_cnf>
 80144aa:	6178      	str	r0, [r7, #20]
	if (tconf->reversed)  m.v32 = -pose;
 80144ac:	697b      	ldr	r3, [r7, #20]
 80144ae:	7edb      	ldrb	r3, [r3, #27]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d003      	beq.n	80144bc <set_pose_trig+0x70>
 80144b4:	683b      	ldr	r3, [r7, #0]
 80144b6:	425b      	negs	r3, r3
 80144b8:	60fb      	str	r3, [r7, #12]
 80144ba:	e001      	b.n	80144c0 <set_pose_trig+0x74>
	else m.v32 = pose;
 80144bc:	683b      	ldr	r3, [r7, #0]
 80144be:	60fb      	str	r3, [r7, #12]
	mqf_write_from_ctrl(&m);
 80144c0:	f107 0308 	add.w	r3, r7, #8
 80144c4:	4618      	mov	r0, r3
 80144c6:	f7fe fda9 	bl	801301c <mqf_write_from_ctrl>
}
 80144ca:	bf00      	nop
 80144cc:	3718      	adds	r7, #24
 80144ce:	46bd      	mov	sp, r7
 80144d0:	bd80      	pop	{r7, pc}
 80144d2:	bf00      	nop
 80144d4:	08019384 	.word	0x08019384

080144d8 <pose_middle>:


static int32_t pose_middle(int blknum, const train_config_t *tconf, int dir)
{
 80144d8:	b580      	push	{r7, lr}
 80144da:	b088      	sub	sp, #32
 80144dc:	af00      	add	r7, sp, #0
 80144de:	60f8      	str	r0, [r7, #12]
 80144e0:	60b9      	str	r1, [r7, #8]
 80144e2:	607a      	str	r2, [r7, #4]
	int cm = get_blk_len(blknum);
 80144e4:	68f8      	ldr	r0, [r7, #12]
 80144e6:	f004 f8c1 	bl	801866c <get_blk_len>
 80144ea:	61b8      	str	r0, [r7, #24]
	uint32_t p = cm * tconf->pose_per_cm;
 80144ec:	68bb      	ldr	r3, [r7, #8]
 80144ee:	8b9b      	ldrh	r3, [r3, #28]
 80144f0:	461a      	mov	r2, r3
 80144f2:	69bb      	ldr	r3, [r7, #24]
 80144f4:	fb03 f302 	mul.w	r3, r3, r2
 80144f8:	617b      	str	r3, [r7, #20]
	uint32_t pm = p/2;
 80144fa:	697b      	ldr	r3, [r7, #20]
 80144fc:	085b      	lsrs	r3, r3, #1
 80144fe:	61fb      	str	r3, [r7, #28]
	if (dir<0) pm = -pm;
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	2b00      	cmp	r3, #0
 8014504:	da02      	bge.n	801450c <pose_middle+0x34>
 8014506:	69fb      	ldr	r3, [r7, #28]
 8014508:	425b      	negs	r3, r3
 801450a:	61fb      	str	r3, [r7, #28]
	return pm;
 801450c:	69fb      	ldr	r3, [r7, #28]
}
 801450e:	4618      	mov	r0, r3
 8014510:	3720      	adds	r7, #32
 8014512:	46bd      	mov	sp, r7
 8014514:	bd80      	pop	{r7, pc}
	...

08014518 <check_blk_tick>:

// ---------------------------------------------------------------


static void check_blk_tick(_UNUSED_ uint32_t tick)
{
 8014518:	b580      	push	{r7, lr}
 801451a:	b086      	sub	sp, #24
 801451c:	af00      	add	r7, sp, #0
 801451e:	6078      	str	r0, [r7, #4]
	if ((0)) return;
	if (occupency_changed) {
 8014520:	4b1e      	ldr	r3, [pc, #120]	; (801459c <check_blk_tick+0x84>)
 8014522:	781b      	ldrb	r3, [r3, #0]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d036      	beq.n	8014596 <check_blk_tick+0x7e>
		occupency_changed = 0;
 8014528:	4b1c      	ldr	r3, [pc, #112]	; (801459c <check_blk_tick+0x84>)
 801452a:	2200      	movs	r2, #0
 801452c:	701a      	strb	r2, [r3, #0]
		for (int tidx=0; tidx<NUM_TRAINS; tidx++) {
 801452e:	2300      	movs	r3, #0
 8014530:	617b      	str	r3, [r7, #20]
 8014532:	e02d      	b.n	8014590 <check_blk_tick+0x78>
			train_ctrl_t *tvars = &trctl[tidx];
 8014534:	697a      	ldr	r2, [r7, #20]
 8014536:	4613      	mov	r3, r2
 8014538:	005b      	lsls	r3, r3, #1
 801453a:	4413      	add	r3, r2
 801453c:	00db      	lsls	r3, r3, #3
 801453e:	4a18      	ldr	r2, [pc, #96]	; (80145a0 <check_blk_tick+0x88>)
 8014540:	4413      	add	r3, r2
 8014542:	613b      	str	r3, [r7, #16]
			const train_config_t *tconf = get_train_cnf(tidx);
 8014544:	6978      	ldr	r0, [r7, #20]
 8014546:	f001 fb4d 	bl	8015be4 <get_train_cnf>
 801454a:	60f8      	str	r0, [r7, #12]
			if (!tconf->enabled) continue;
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	7c9b      	ldrb	r3, [r3, #18]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d017      	beq.n	8014584 <check_blk_tick+0x6c>
			if (tvars->_state == train_off) continue;
 8014554:	693b      	ldr	r3, [r7, #16]
 8014556:	785b      	ldrb	r3, [r3, #1]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d015      	beq.n	8014588 <check_blk_tick+0x70>
			if ((tvars->_state == train_blk_wait) || (tvars->spd_limit <100)) {
 801455c:	693b      	ldr	r3, [r7, #16]
 801455e:	785b      	ldrb	r3, [r3, #1]
 8014560:	2b04      	cmp	r3, #4
 8014562:	d003      	beq.n	801456c <check_blk_tick+0x54>
 8014564:	693b      	ldr	r3, [r7, #16]
 8014566:	891b      	ldrh	r3, [r3, #8]
 8014568:	2b63      	cmp	r3, #99	; 0x63
 801456a:	d80e      	bhi.n	801458a <check_blk_tick+0x72>
				itm_debug1(DBG_CTRL, "chk", tidx);
 801456c:	697a      	ldr	r2, [r7, #20]
 801456e:	490d      	ldr	r1, [pc, #52]	; (80145a4 <check_blk_tick+0x8c>)
 8014570:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014574:	f7fe fcf0 	bl	8012f58 <itm_debug1>
				update_c2_state_limits(tidx, tvars, upd_check);
 8014578:	2204      	movs	r2, #4
 801457a:	6939      	ldr	r1, [r7, #16]
 801457c:	6978      	ldr	r0, [r7, #20]
 801457e:	f7ff fc93 	bl	8013ea8 <update_c2_state_limits>
 8014582:	e002      	b.n	801458a <check_blk_tick+0x72>
			if (!tconf->enabled) continue;
 8014584:	bf00      	nop
 8014586:	e000      	b.n	801458a <check_blk_tick+0x72>
			if (tvars->_state == train_off) continue;
 8014588:	bf00      	nop
		for (int tidx=0; tidx<NUM_TRAINS; tidx++) {
 801458a:	697b      	ldr	r3, [r7, #20]
 801458c:	3301      	adds	r3, #1
 801458e:	617b      	str	r3, [r7, #20]
 8014590:	697b      	ldr	r3, [r7, #20]
 8014592:	2b07      	cmp	r3, #7
 8014594:	ddce      	ble.n	8014534 <check_blk_tick+0x1c>
			}
		}
	}
}
 8014596:	3718      	adds	r7, #24
 8014598:	46bd      	mov	sp, r7
 801459a:	bd80      	pop	{r7, pc}
 801459c:	20005288 	.word	0x20005288
 80145a0:	200051bc 	.word	0x200051bc
 80145a4:	08019390 	.word	0x08019390

080145a8 <set_turnout>:


// ---------------------------------------------------------------

static void set_turnout(int tn, int v)
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b084      	sub	sp, #16
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
 80145b0:	6039      	str	r1, [r7, #0]
	itm_debug2(DBG_CTRL, "TURN", tn, v);
 80145b2:	683b      	ldr	r3, [r7, #0]
 80145b4:	687a      	ldr	r2, [r7, #4]
 80145b6:	491b      	ldr	r1, [pc, #108]	; (8014624 <set_turnout+0x7c>)
 80145b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80145bc:	f7fe fce6 	bl	8012f8c <itm_debug2>
	if (tn<0) fatal();
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	da01      	bge.n	80145ca <set_turnout+0x22>
 80145c6:	f7fe fdc3 	bl	8013150 <fatal>
	if (tn>=NUM_TURNOUTS) fatal();
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	2b07      	cmp	r3, #7
 80145ce:	dd01      	ble.n	80145d4 <set_turnout+0x2c>
 80145d0:	f7fe fdbe 	bl	8013150 <fatal>
	if (tn>=NUM_LOCAL_TURNOUTS) fatal(); // TODO
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	2b07      	cmp	r3, #7
 80145d8:	dd01      	ble.n	80145de <set_turnout+0x36>
 80145da:	f7fe fdb9 	bl	8013150 <fatal>
	msg_64_t m;
	m.from = MA_CONTROL();
 80145de:	23d7      	movs	r3, #215	; 0xd7
 80145e0:	727b      	strb	r3, [r7, #9]
	m.to = MA_TURNOUT(0, tn); // TODO board num
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	b25b      	sxtb	r3, r3
 80145e6:	f003 0307 	and.w	r3, r3, #7
 80145ea:	b25b      	sxtb	r3, r3
 80145ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80145f0:	b25b      	sxtb	r3, r3
 80145f2:	b2db      	uxtb	r3, r3
 80145f4:	723b      	strb	r3, [r7, #8]
	m.cmd = v ? CMD_TURNOUT_B : CMD_TURNOUT_A;
 80145f6:	683b      	ldr	r3, [r7, #0]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d001      	beq.n	8014600 <set_turnout+0x58>
 80145fc:	2332      	movs	r3, #50	; 0x32
 80145fe:	e000      	b.n	8014602 <set_turnout+0x5a>
 8014600:	2331      	movs	r3, #49	; 0x31
 8014602:	72bb      	strb	r3, [r7, #10]

	mqf_write_from_ctrl(&m);
 8014604:	f107 0308 	add.w	r3, r7, #8
 8014608:	4618      	mov	r0, r3
 801460a:	f7fe fd07 	bl	801301c <mqf_write_from_ctrl>
	topolgy_set_turnout(tn, v);
 801460e:	6839      	ldr	r1, [r7, #0]
 8014610:	6878      	ldr	r0, [r7, #4]
 8014612:	f004 f843 	bl	801869c <topolgy_set_turnout>

	occupency_changed = 1;
 8014616:	4b04      	ldr	r3, [pc, #16]	; (8014628 <set_turnout+0x80>)
 8014618:	2201      	movs	r2, #1
 801461a:	701a      	strb	r2, [r3, #0]
}
 801461c:	bf00      	nop
 801461e:	3710      	adds	r7, #16
 8014620:	46bd      	mov	sp, r7
 8014622:	bd80      	pop	{r7, pc}
 8014624:	08019394 	.word	0x08019394
 8014628:	20005288 	.word	0x20005288

0801462c <check_behaviour>:

// ---------------------------------------------------------------

static void check_behaviour(_UNUSED_ uint32_t tick)
{
 801462c:	b580      	push	{r7, lr}
 801462e:	b084      	sub	sp, #16
 8014630:	af00      	add	r7, sp, #0
 8014632:	6078      	str	r0, [r7, #4]
	for (int tidx = 0; tidx<NUM_TRAINS; tidx++) {
 8014634:	2300      	movs	r3, #0
 8014636:	60fb      	str	r3, [r7, #12]
 8014638:	e00a      	b.n	8014650 <check_behaviour+0x24>
		const train_config_t *tconf = get_train_cnf(tidx);
 801463a:	68f8      	ldr	r0, [r7, #12]
 801463c:	f001 fad2 	bl	8015be4 <get_train_cnf>
 8014640:	60b8      	str	r0, [r7, #8]
		if (!tconf->enabled) continue;
 8014642:	68bb      	ldr	r3, [r7, #8]
 8014644:	7c9b      	ldrb	r3, [r3, #18]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d106      	bne.n	8014658 <check_behaviour+0x2c>
	for (int tidx = 0; tidx<NUM_TRAINS; tidx++) {
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	3301      	adds	r3, #1
 801464e:	60fb      	str	r3, [r7, #12]
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	2b07      	cmp	r3, #7
 8014654:	ddf1      	ble.n	801463a <check_behaviour+0xe>
 8014656:	e000      	b.n	801465a <check_behaviour+0x2e>

		if (!SCEN_TWOTRAIN) return; // XXX
 8014658:	bf00      	nop
				evt_cmd_set_setdirspeed(tidx, tvars, 0, 0, 1);
				continue;
			}
		}
	}
}
 801465a:	3710      	adds	r7, #16
 801465c:	46bd      	mov	sp, r7
 801465e:	bd80      	pop	{r7, pc}

08014660 <itm_debug1>:
{
 8014660:	b580      	push	{r7, lr}
 8014662:	b086      	sub	sp, #24
 8014664:	af02      	add	r7, sp, #8
 8014666:	60f8      	str	r0, [r7, #12]
 8014668:	60b9      	str	r1, [r7, #8]
 801466a:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 801466c:	4b08      	ldr	r3, [pc, #32]	; (8014690 <itm_debug1+0x30>)
 801466e:	681a      	ldr	r2, [r3, #0]
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	4013      	ands	r3, r2
 8014674:	2b00      	cmp	r3, #0
 8014676:	d007      	beq.n	8014688 <itm_debug1+0x28>
 8014678:	2301      	movs	r3, #1
 801467a:	9300      	str	r3, [sp, #0]
 801467c:	2300      	movs	r3, #0
 801467e:	2200      	movs	r2, #0
 8014680:	6879      	ldr	r1, [r7, #4]
 8014682:	68b8      	ldr	r0, [r7, #8]
 8014684:	f004 f8f6 	bl	8018874 <_itm_debug3>
}
 8014688:	bf00      	nop
 801468a:	3710      	adds	r7, #16
 801468c:	46bd      	mov	sp, r7
 801468e:	bd80      	pop	{r7, pc}
 8014690:	20000574 	.word	0x20000574

08014694 <itm_debug3>:
{
 8014694:	b580      	push	{r7, lr}
 8014696:	b086      	sub	sp, #24
 8014698:	af02      	add	r7, sp, #8
 801469a:	60f8      	str	r0, [r7, #12]
 801469c:	60b9      	str	r1, [r7, #8]
 801469e:	607a      	str	r2, [r7, #4]
 80146a0:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 80146a2:	4b09      	ldr	r3, [pc, #36]	; (80146c8 <itm_debug3+0x34>)
 80146a4:	681a      	ldr	r2, [r3, #0]
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	4013      	ands	r3, r2
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d007      	beq.n	80146be <itm_debug3+0x2a>
 80146ae:	2303      	movs	r3, #3
 80146b0:	9300      	str	r3, [sp, #0]
 80146b2:	69bb      	ldr	r3, [r7, #24]
 80146b4:	683a      	ldr	r2, [r7, #0]
 80146b6:	6879      	ldr	r1, [r7, #4]
 80146b8:	68b8      	ldr	r0, [r7, #8]
 80146ba:	f004 f8db 	bl	8018874 <_itm_debug3>
}
 80146be:	bf00      	nop
 80146c0:	3710      	adds	r7, #16
 80146c2:	46bd      	mov	sp, r7
 80146c4:	bd80      	pop	{r7, pc}
 80146c6:	bf00      	nop
 80146c8:	20000574 	.word	0x20000574

080146cc <canton_error>:
#define ERR_STRANGE			-4242

int trainctl_error(char l, int code, const char *msg);

static inline int canton_error(int code, const char *msg)
{
 80146cc:	b580      	push	{r7, lr}
 80146ce:	b082      	sub	sp, #8
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	6078      	str	r0, [r7, #4]
 80146d4:	6039      	str	r1, [r7, #0]
	return trainctl_error('C', code, msg);
 80146d6:	683a      	ldr	r2, [r7, #0]
 80146d8:	6879      	ldr	r1, [r7, #4]
 80146da:	2043      	movs	r0, #67	; 0x43
 80146dc:	f001 f8d2 	bl	8015884 <trainctl_error>
 80146e0:	4603      	mov	r3, r0
}
 80146e2:	4618      	mov	r0, r3
 80146e4:	3708      	adds	r7, #8
 80146e6:	46bd      	mov	sp, r7
 80146e8:	bd80      	pop	{r7, pc}

080146ea <canton_error_rc>:
static inline int canton_error_rc(int rc, int code, const char *msg)
{
 80146ea:	b580      	push	{r7, lr}
 80146ec:	b084      	sub	sp, #16
 80146ee:	af00      	add	r7, sp, #0
 80146f0:	60f8      	str	r0, [r7, #12]
 80146f2:	60b9      	str	r1, [r7, #8]
 80146f4:	607a      	str	r2, [r7, #4]
	trainctl_error('C', code, msg);
 80146f6:	687a      	ldr	r2, [r7, #4]
 80146f8:	68b9      	ldr	r1, [r7, #8]
 80146fa:	2043      	movs	r0, #67	; 0x43
 80146fc:	f001 f8c2 	bl	8015884 <trainctl_error>
	return rc;
 8014700:	68fb      	ldr	r3, [r7, #12]
}
 8014702:	4618      	mov	r0, r3
 8014704:	3710      	adds	r7, #16
 8014706:	46bd      	mov	sp, r7
 8014708:	bd80      	pop	{r7, pc}
	...

0801470c <mqf_read_to_canton>:
/* turnout command */
#define CMD_TURNOUT_A		0x31
#define CMD_TURNOUT_B		0x32


LFMQUEUE_DEF_H(to_canton, msg_64_t)
 801470c:	b580      	push	{r7, lr}
 801470e:	b082      	sub	sp, #8
 8014710:	af00      	add	r7, sp, #0
 8014712:	6078      	str	r0, [r7, #4]
 8014714:	6879      	ldr	r1, [r7, #4]
 8014716:	4804      	ldr	r0, [pc, #16]	; (8014728 <mqf_read_to_canton+0x1c>)
 8014718:	f004 fa2c 	bl	8018b74 <mqf_read>
 801471c:	4603      	mov	r3, r0
 801471e:	4618      	mov	r0, r3
 8014720:	3708      	adds	r7, #8
 8014722:	46bd      	mov	sp, r7
 8014724:	bd80      	pop	{r7, pc}
 8014726:	bf00      	nop
 8014728:	200004d0 	.word	0x200004d0

0801472c <mqf_write_from_canton>:
LFMQUEUE_DEF_H(from_canton, msg_64_t)
 801472c:	b580      	push	{r7, lr}
 801472e:	b082      	sub	sp, #8
 8014730:	af00      	add	r7, sp, #0
 8014732:	6078      	str	r0, [r7, #4]
 8014734:	6879      	ldr	r1, [r7, #4]
 8014736:	4804      	ldr	r0, [pc, #16]	; (8014748 <mqf_write_from_canton+0x1c>)
 8014738:	f004 f9a2 	bl	8018a80 <mqf_write>
 801473c:	4603      	mov	r3, r0
 801473e:	4618      	mov	r0, r3
 8014740:	3708      	adds	r7, #8
 8014742:	46bd      	mov	sp, r7
 8014744:	bd80      	pop	{r7, pc}
 8014746:	bf00      	nop
 8014748:	200004dc 	.word	0x200004dc

0801474c <canton_reset>:
//--------------------------------------------



static void canton_reset(void)
{
 801474c:	b580      	push	{r7, lr}
 801474e:	b086      	sub	sp, #24
 8014750:	af02      	add	r7, sp, #8
	for (int i = 0; i<NUM_LOCAL_CANTONS_SW; i++) {
 8014752:	2300      	movs	r3, #0
 8014754:	60fb      	str	r3, [r7, #12]
 8014756:	e01c      	b.n	8014792 <canton_reset+0x46>
		USE_CANTON(i)
 8014758:	68f8      	ldr	r0, [r7, #12]
 801475a:	f001 fa1b 	bl	8015b94 <get_canton_cnf>
 801475e:	60b8      	str	r0, [r7, #8]
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	00db      	lsls	r3, r3, #3
 8014764:	4a0e      	ldr	r2, [pc, #56]	; (80147a0 <canton_reset+0x54>)
 8014766:	4413      	add	r3, r2
 8014768:	607b      	str	r3, [r7, #4]
		cvars->cur_dir = 99;
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	2263      	movs	r2, #99	; 0x63
 801476e:	701a      	strb	r2, [r3, #0]
		canton_set_pwm(i, cconf, cvars, 0, 0);
 8014770:	2300      	movs	r3, #0
 8014772:	9300      	str	r3, [sp, #0]
 8014774:	2300      	movs	r3, #0
 8014776:	687a      	ldr	r2, [r7, #4]
 8014778:	68b9      	ldr	r1, [r7, #8]
 801477a:	68f8      	ldr	r0, [r7, #12]
 801477c:	f000 f97e 	bl	8014a7c <canton_set_pwm>
		canton_set_volt(i, cconf, cvars,  7);
 8014780:	2307      	movs	r3, #7
 8014782:	687a      	ldr	r2, [r7, #4]
 8014784:	68b9      	ldr	r1, [r7, #8]
 8014786:	68f8      	ldr	r0, [r7, #12]
 8014788:	f000 fad4 	bl	8014d34 <canton_set_volt>
	for (int i = 0; i<NUM_LOCAL_CANTONS_SW; i++) {
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	3301      	adds	r3, #1
 8014790:	60fb      	str	r3, [r7, #12]
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	2b07      	cmp	r3, #7
 8014796:	dddf      	ble.n	8014758 <canton_reset+0xc>
	}
}
 8014798:	bf00      	nop
 801479a:	3710      	adds	r7, #16
 801479c:	46bd      	mov	sp, r7
 801479e:	bd80      	pop	{r7, pc}
 80147a0:	200052b0 	.word	0x200052b0

080147a4 <handle_canton_cmd>:

static void handle_canton_cmd(int cidx, msg_64_t *m)
{
 80147a4:	b580      	push	{r7, lr}
 80147a6:	b086      	sub	sp, #24
 80147a8:	af02      	add	r7, sp, #8
 80147aa:	6078      	str	r0, [r7, #4]
 80147ac:	6039      	str	r1, [r7, #0]
	if (m->cmd & 0x40) {
 80147ae:	683b      	ldr	r3, [r7, #0]
 80147b0:	789b      	ldrb	r3, [r3, #2]
 80147b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d00b      	beq.n	80147d2 <handle_canton_cmd+0x2e>
		itm_debug1(DBG_LOWCTRL, "msg-bemf", m->to);
 80147ba:	683b      	ldr	r3, [r7, #0]
 80147bc:	781b      	ldrb	r3, [r3, #0]
 80147be:	461a      	mov	r2, r3
 80147c0:	493a      	ldr	r1, [pc, #232]	; (80148ac <handle_canton_cmd+0x108>)
 80147c2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80147c6:	f7ff ff4b 	bl	8014660 <itm_debug1>
		bemf_msg(m);
 80147ca:	6838      	ldr	r0, [r7, #0]
 80147cc:	f000 fc42 	bl	8015054 <bemf_msg>
		return;
 80147d0:	e069      	b.n	80148a6 <handle_canton_cmd+0x102>
	}


	USE_CANTON(cidx)
 80147d2:	6878      	ldr	r0, [r7, #4]
 80147d4:	f001 f9de 	bl	8015b94 <get_canton_cnf>
 80147d8:	60f8      	str	r0, [r7, #12]
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	00db      	lsls	r3, r3, #3
 80147de:	4a34      	ldr	r2, [pc, #208]	; (80148b0 <handle_canton_cmd+0x10c>)
 80147e0:	4413      	add	r3, r2
 80147e2:	60bb      	str	r3, [r7, #8]
	if (!cvars) {
 80147e4:	68bb      	ldr	r3, [r7, #8]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d105      	bne.n	80147f6 <handle_canton_cmd+0x52>
		itm_debug1(DBG_LOWCTRL|DBG_ERR, "no cvars", cidx);
 80147ea:	687a      	ldr	r2, [r7, #4]
 80147ec:	4931      	ldr	r1, [pc, #196]	; (80148b4 <handle_canton_cmd+0x110>)
 80147ee:	4832      	ldr	r0, [pc, #200]	; (80148b8 <handle_canton_cmd+0x114>)
 80147f0:	f7ff ff36 	bl	8014660 <itm_debug1>
		return;
 80147f4:	e057      	b.n	80148a6 <handle_canton_cmd+0x102>
	}
	switch (m->cmd) {
 80147f6:	683b      	ldr	r3, [r7, #0]
 80147f8:	789b      	ldrb	r3, [r3, #2]
 80147fa:	2b01      	cmp	r3, #1
 80147fc:	d016      	beq.n	801482c <handle_canton_cmd+0x88>
 80147fe:	2b02      	cmp	r3, #2
 8014800:	d148      	bne.n	8014894 <handle_canton_cmd+0xf0>
	case CMD_STOP:
		itm_debug1(DBG_LOWCTRL, "CMD STOP", 0);
 8014802:	2200      	movs	r2, #0
 8014804:	492d      	ldr	r1, [pc, #180]	; (80148bc <handle_canton_cmd+0x118>)
 8014806:	f44f 7080 	mov.w	r0, #256	; 0x100
 801480a:	f7ff ff29 	bl	8014660 <itm_debug1>
		canton_set_pwm(cidx, cconf, cvars, 0, 0);
 801480e:	2300      	movs	r3, #0
 8014810:	9300      	str	r3, [sp, #0]
 8014812:	2300      	movs	r3, #0
 8014814:	68ba      	ldr	r2, [r7, #8]
 8014816:	68f9      	ldr	r1, [r7, #12]
 8014818:	6878      	ldr	r0, [r7, #4]
 801481a:	f000 f92f 	bl	8014a7c <canton_set_pwm>
		canton_set_volt(cidx, cconf, cvars,  7);
 801481e:	2307      	movs	r3, #7
 8014820:	68ba      	ldr	r2, [r7, #8]
 8014822:	68f9      	ldr	r1, [r7, #12]
 8014824:	6878      	ldr	r0, [r7, #4]
 8014826:	f000 fa85 	bl	8014d34 <canton_set_volt>
		break;
 801482a:	e03c      	b.n	80148a6 <handle_canton_cmd+0x102>
	case CMD_SETVPWM:
		itm_debug3(DBG_LOWCTRL, "SETVPWM", cidx, m->v1u, m->v2);
 801482c:	683b      	ldr	r3, [r7, #0]
 801482e:	889b      	ldrh	r3, [r3, #4]
 8014830:	461a      	mov	r2, r3
 8014832:	683b      	ldr	r3, [r7, #0]
 8014834:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8014838:	9300      	str	r3, [sp, #0]
 801483a:	4613      	mov	r3, r2
 801483c:	687a      	ldr	r2, [r7, #4]
 801483e:	4920      	ldr	r1, [pc, #128]	; (80148c0 <handle_canton_cmd+0x11c>)
 8014840:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014844:	f7ff ff26 	bl	8014694 <itm_debug3>
		canton_set_pwm(cidx, cconf, cvars, SIGNOF0(m->v2), abs(m->v2));
 8014848:	683b      	ldr	r3, [r7, #0]
 801484a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801484e:	2b00      	cmp	r3, #0
 8014850:	db09      	blt.n	8014866 <handle_canton_cmd+0xc2>
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8014858:	2b00      	cmp	r3, #0
 801485a:	bfcc      	ite	gt
 801485c:	2301      	movgt	r3, #1
 801485e:	2300      	movle	r3, #0
 8014860:	b2db      	uxtb	r3, r3
 8014862:	b25a      	sxtb	r2, r3
 8014864:	e001      	b.n	801486a <handle_canton_cmd+0xc6>
 8014866:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801486a:	683b      	ldr	r3, [r7, #0]
 801486c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8014870:	2b00      	cmp	r3, #0
 8014872:	bfb8      	it	lt
 8014874:	425b      	neglt	r3, r3
 8014876:	9300      	str	r3, [sp, #0]
 8014878:	4613      	mov	r3, r2
 801487a:	68ba      	ldr	r2, [r7, #8]
 801487c:	68f9      	ldr	r1, [r7, #12]
 801487e:	6878      	ldr	r0, [r7, #4]
 8014880:	f000 f8fc 	bl	8014a7c <canton_set_pwm>
		canton_set_volt(cidx, cconf, cvars,  m->v1u);
 8014884:	683b      	ldr	r3, [r7, #0]
 8014886:	889b      	ldrh	r3, [r3, #4]
 8014888:	68ba      	ldr	r2, [r7, #8]
 801488a:	68f9      	ldr	r1, [r7, #12]
 801488c:	6878      	ldr	r0, [r7, #4]
 801488e:	f000 fa51 	bl	8014d34 <canton_set_volt>
		break;
 8014892:	e008      	b.n	80148a6 <handle_canton_cmd+0x102>
	default:
		itm_debug1(DBG_LOWCTRL, "not handled msg", m->cmd);
 8014894:	683b      	ldr	r3, [r7, #0]
 8014896:	789b      	ldrb	r3, [r3, #2]
 8014898:	461a      	mov	r2, r3
 801489a:	490a      	ldr	r1, [pc, #40]	; (80148c4 <handle_canton_cmd+0x120>)
 801489c:	f44f 7080 	mov.w	r0, #256	; 0x100
 80148a0:	f7ff fede 	bl	8014660 <itm_debug1>
		break;
 80148a4:	bf00      	nop
	}
}
 80148a6:	3710      	adds	r7, #16
 80148a8:	46bd      	mov	sp, r7
 80148aa:	bd80      	pop	{r7, pc}
 80148ac:	0801939c 	.word	0x0801939c
 80148b0:	200052b0 	.word	0x200052b0
 80148b4:	080193a8 	.word	0x080193a8
 80148b8:	80000100 	.word	0x80000100
 80148bc:	080193b4 	.word	0x080193b4
 80148c0:	080193c0 	.word	0x080193c0
 80148c4:	080193c8 	.word	0x080193c8

080148c8 <canton_tick>:

static void handle_msg_normal(msg_64_t *m);
static void handle_msg_cantontest(msg_64_t *m);

void canton_tick(_UNUSED_ uint32_t notif_flags, _UNUSED_ uint32_t tick, _UNUSED_ uint32_t dt)
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	b088      	sub	sp, #32
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	60f8      	str	r0, [r7, #12]
 80148d0:	60b9      	str	r1, [r7, #8]
 80148d2:	607a      	str	r2, [r7, #4]
	static int first=1;
	if (first) {
 80148d4:	4b2e      	ldr	r3, [pc, #184]	; (8014990 <canton_tick+0xc8>)
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d006      	beq.n	80148ea <canton_tick+0x22>
		first = 0;
 80148dc:	4b2c      	ldr	r3, [pc, #176]	; (8014990 <canton_tick+0xc8>)
 80148de:	2200      	movs	r2, #0
 80148e0:	601a      	str	r2, [r3, #0]
		canton_reset();
 80148e2:	f7ff ff33 	bl	801474c <canton_reset>
		bemf_reset();
 80148e6:	f000 fb9b 	bl	8015020 <bemf_reset>
	}
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_canton(&m);
 80148ea:	f107 0310 	add.w	r3, r7, #16
 80148ee:	4618      	mov	r0, r3
 80148f0:	f7ff ff0c 	bl	801470c <mqf_read_to_canton>
 80148f4:	61f8      	str	r0, [r7, #28]
		if (rc) break;
 80148f6:	69fb      	ldr	r3, [r7, #28]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d145      	bne.n	8014988 <canton_tick+0xc0>
        switch (m.cmd) {
 80148fc:	7cbb      	ldrb	r3, [r7, #18]
 80148fe:	2bfc      	cmp	r3, #252	; 0xfc
 8014900:	d009      	beq.n	8014916 <canton_tick+0x4e>
 8014902:	2bfc      	cmp	r3, #252	; 0xfc
 8014904:	db1e      	blt.n	8014944 <canton_tick+0x7c>
 8014906:	3bfe      	subs	r3, #254	; 0xfe
 8014908:	2b01      	cmp	r3, #1
 801490a:	d81b      	bhi.n	8014944 <canton_tick+0x7c>
        case CMD_RESET: // FALLTHRU
        case CMD_EMERGENCY_STOP:
            canton_reset();
 801490c:	f7ff ff1e 	bl	801474c <canton_reset>
            bemf_reset();
 8014910:	f000 fb86 	bl	8015020 <bemf_reset>
            break;
 8014914:	e019      	b.n	801494a <canton_tick+0x82>
        case CMD_SETRUN_MODE:
        	if (m.v1u != run_mode) {
 8014916:	8aba      	ldrh	r2, [r7, #20]
 8014918:	4b1e      	ldr	r3, [pc, #120]	; (8014994 <canton_tick+0xcc>)
 801491a:	781b      	ldrb	r3, [r3, #0]
 801491c:	b29b      	uxth	r3, r3
 801491e:	429a      	cmp	r2, r3
 8014920:	d012      	beq.n	8014948 <canton_tick+0x80>
        		run_mode = m.v1u;
 8014922:	8abb      	ldrh	r3, [r7, #20]
 8014924:	b2da      	uxtb	r2, r3
 8014926:	4b1b      	ldr	r3, [pc, #108]	; (8014994 <canton_tick+0xcc>)
 8014928:	701a      	strb	r2, [r3, #0]
        		testerAddr = m.from;
 801492a:	7c7a      	ldrb	r2, [r7, #17]
 801492c:	4b1a      	ldr	r3, [pc, #104]	; (8014998 <canton_tick+0xd0>)
 801492e:	701a      	strb	r2, [r3, #0]
        		bemf_run_mode = run_mode; //(m.to == MA_BROADCAST) ? 1 : 0;
 8014930:	4b18      	ldr	r3, [pc, #96]	; (8014994 <canton_tick+0xcc>)
 8014932:	781a      	ldrb	r2, [r3, #0]
 8014934:	4b19      	ldr	r3, [pc, #100]	; (801499c <canton_tick+0xd4>)
 8014936:	701a      	strb	r2, [r3, #0]
        		bemf_reset();
 8014938:	f000 fb72 	bl	8015020 <bemf_reset>
        		first = 1;
 801493c:	4b14      	ldr	r3, [pc, #80]	; (8014990 <canton_tick+0xc8>)
 801493e:	2201      	movs	r2, #1
 8014940:	601a      	str	r2, [r3, #0]
        	}
            break;
 8014942:	e001      	b.n	8014948 <canton_tick+0x80>
        default:
        	break;
 8014944:	bf00      	nop
 8014946:	e000      	b.n	801494a <canton_tick+0x82>
            break;
 8014948:	bf00      	nop
        }
        switch (run_mode) {
 801494a:	4b12      	ldr	r3, [pc, #72]	; (8014994 <canton_tick+0xcc>)
 801494c:	781b      	ldrb	r3, [r3, #0]
 801494e:	2b04      	cmp	r3, #4
 8014950:	d818      	bhi.n	8014984 <canton_tick+0xbc>
 8014952:	a201      	add	r2, pc, #4	; (adr r2, 8014958 <canton_tick+0x90>)
 8014954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014958:	08014985 	.word	0x08014985
 801495c:	0801496d 	.word	0x0801496d
 8014960:	08014979 	.word	0x08014979
 8014964:	08014985 	.word	0x08014985
 8014968:	08014985 	.word	0x08014985
        case runmode_off:
        	break;
        case runmode_normal:
        	handle_msg_normal(&m);
 801496c:	f107 0310 	add.w	r3, r7, #16
 8014970:	4618      	mov	r0, r3
 8014972:	f000 f815 	bl	80149a0 <handle_msg_normal>
        	break;
 8014976:	e006      	b.n	8014986 <canton_tick+0xbe>
        case runmode_detect:
        case runmode_detect1:
        	break;
        case runmode_testcanton:
        	handle_msg_cantontest(&m);
 8014978:	f107 0310 	add.w	r3, r7, #16
 801497c:	4618      	mov	r0, r3
 801497e:	f000 f82b 	bl	80149d8 <handle_msg_cantontest>
        	break;
 8014982:	e000      	b.n	8014986 <canton_tick+0xbe>
        default:
        	break;
 8014984:	bf00      	nop
	for (;;) {
 8014986:	e7b0      	b.n	80148ea <canton_tick+0x22>
        }
	}
}
 8014988:	bf00      	nop
 801498a:	3720      	adds	r7, #32
 801498c:	46bd      	mov	sp, r7
 801498e:	bd80      	pop	{r7, pc}
 8014990:	20000220 	.word	0x20000220
 8014994:	200052f0 	.word	0x200052f0
 8014998:	200052f1 	.word	0x200052f1
 801499c:	200052f2 	.word	0x200052f2

080149a0 <handle_msg_normal>:


static void handle_msg_normal(msg_64_t *m)
{
 80149a0:	b580      	push	{r7, lr}
 80149a2:	b084      	sub	sp, #16
 80149a4:	af00      	add	r7, sp, #0
 80149a6:	6078      	str	r0, [r7, #4]
    int cidx = -1;
 80149a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80149ac:	60fb      	str	r3, [r7, #12]
    if (!IS_CANTON(m->to)) return;
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	781b      	ldrb	r3, [r3, #0]
 80149b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d109      	bne.n	80149ce <handle_msg_normal+0x2e>
    cidx = m->to & 0x07;
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	781b      	ldrb	r3, [r3, #0]
 80149be:	f003 0307 	and.w	r3, r3, #7
 80149c2:	60fb      	str	r3, [r7, #12]
    handle_canton_cmd(cidx, m);
 80149c4:	6879      	ldr	r1, [r7, #4]
 80149c6:	68f8      	ldr	r0, [r7, #12]
 80149c8:	f7ff feec 	bl	80147a4 <handle_canton_cmd>
 80149cc:	e000      	b.n	80149d0 <handle_msg_normal+0x30>
    if (!IS_CANTON(m->to)) return;
 80149ce:	bf00      	nop
}
 80149d0:	3710      	adds	r7, #16
 80149d2:	46bd      	mov	sp, r7
 80149d4:	bd80      	pop	{r7, pc}
	...

080149d8 <handle_msg_cantontest>:

static void handle_msg_cantontest(msg_64_t *m)
{
 80149d8:	b580      	push	{r7, lr}
 80149da:	b086      	sub	sp, #24
 80149dc:	af00      	add	r7, sp, #0
 80149de:	6078      	str	r0, [r7, #4]
	int cidx = -1;
 80149e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80149e4:	617b      	str	r3, [r7, #20]
	if (IS_BROADCAST(m->to)) {
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	781b      	ldrb	r3, [r3, #0]
 80149ea:	2bff      	cmp	r3, #255	; 0xff
 80149ec:	d103      	bne.n	80149f6 <handle_msg_cantontest+0x1e>
		cidx = -1;
 80149ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80149f2:	617b      	str	r3, [r7, #20]
 80149f4:	e014      	b.n	8014a20 <handle_msg_cantontest+0x48>
	} else if (IS_CANTON(m->to)) {
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	781b      	ldrb	r3, [r3, #0]
 80149fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d105      	bne.n	8014a0e <handle_msg_cantontest+0x36>
		cidx = m->to & 0x07;
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	781b      	ldrb	r3, [r3, #0]
 8014a06:	f003 0307 	and.w	r3, r3, #7
 8014a0a:	617b      	str	r3, [r7, #20]
 8014a0c:	e008      	b.n	8014a20 <handle_msg_cantontest+0x48>
	} else {
		itm_debug1(DBG_LOWCTRL, "not handled msg", m->cmd);
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	789b      	ldrb	r3, [r3, #2]
 8014a12:	461a      	mov	r2, r3
 8014a14:	4918      	ldr	r1, [pc, #96]	; (8014a78 <handle_msg_cantontest+0xa0>)
 8014a16:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014a1a:	f7ff fe21 	bl	8014660 <itm_debug1>
		return;
 8014a1e:	e028      	b.n	8014a72 <handle_msg_cantontest+0x9a>
	}
    if (CMD_SETVPWM == m->cmd) {
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	789b      	ldrb	r3, [r3, #2]
 8014a24:	2b01      	cmp	r3, #1
 8014a26:	d10f      	bne.n	8014a48 <handle_msg_cantontest+0x70>
    	// in test mode, forward CMD_SETVPWM to UI for display
    	msg_64_t m2 = *m;
 8014a28:	687a      	ldr	r2, [r7, #4]
 8014a2a:	f107 0308 	add.w	r3, r7, #8
 8014a2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014a32:	e883 0003 	stmia.w	r3, {r0, r1}
    	m2.from = m2.to;
 8014a36:	7a3b      	ldrb	r3, [r7, #8]
 8014a38:	727b      	strb	r3, [r7, #9]
    	m2.to = MA_UI(1);
 8014a3a:	2381      	movs	r3, #129	; 0x81
 8014a3c:	723b      	strb	r3, [r7, #8]
    	mqf_write_from_canton(&m2);
 8014a3e:	f107 0308 	add.w	r3, r7, #8
 8014a42:	4618      	mov	r0, r3
 8014a44:	f7ff fe72 	bl	801472c <mqf_write_from_canton>
    }
    if (cidx>=0) handle_canton_cmd(cidx, m);
 8014a48:	697b      	ldr	r3, [r7, #20]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	db04      	blt.n	8014a58 <handle_msg_cantontest+0x80>
 8014a4e:	6879      	ldr	r1, [r7, #4]
 8014a50:	6978      	ldr	r0, [r7, #20]
 8014a52:	f7ff fea7 	bl	80147a4 <handle_canton_cmd>
 8014a56:	e00c      	b.n	8014a72 <handle_msg_cantontest+0x9a>
    else {
    	// broadcast
    	for (int i=0; i<NUM_LOCAL_CANTONS_HW; i++) {
 8014a58:	2300      	movs	r3, #0
 8014a5a:	613b      	str	r3, [r7, #16]
 8014a5c:	e006      	b.n	8014a6c <handle_msg_cantontest+0x94>
    		handle_canton_cmd(i, m);
 8014a5e:	6879      	ldr	r1, [r7, #4]
 8014a60:	6938      	ldr	r0, [r7, #16]
 8014a62:	f7ff fe9f 	bl	80147a4 <handle_canton_cmd>
    	for (int i=0; i<NUM_LOCAL_CANTONS_HW; i++) {
 8014a66:	693b      	ldr	r3, [r7, #16]
 8014a68:	3301      	adds	r3, #1
 8014a6a:	613b      	str	r3, [r7, #16]
 8014a6c:	693b      	ldr	r3, [r7, #16]
 8014a6e:	2b04      	cmp	r3, #4
 8014a70:	ddf5      	ble.n	8014a5e <handle_msg_cantontest+0x86>
    	}
    }
}
 8014a72:	3718      	adds	r7, #24
 8014a74:	46bd      	mov	sp, r7
 8014a76:	bd80      	pop	{r7, pc}
 8014a78:	080193c8 	.word	0x080193c8

08014a7c <canton_set_pwm>:
#define USE_PWM_STOP 0
/*
 * it seems that output goes to high impedence when we stop pwm ????
 */
static void canton_set_pwm(int cidx, const canton_config_t *c, canton_vars_t *v,  int8_t dir, int duty)
{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b08a      	sub	sp, #40	; 0x28
 8014a80:	af02      	add	r7, sp, #8
 8014a82:	60f8      	str	r0, [r7, #12]
 8014a84:	60b9      	str	r1, [r7, #8]
 8014a86:	607a      	str	r2, [r7, #4]
 8014a88:	70fb      	strb	r3, [r7, #3]
	itm_debug3(DBG_LOWCTRL, "c/set_pwm", cidx, dir, duty);
 8014a8a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a90:	9300      	str	r3, [sp, #0]
 8014a92:	4613      	mov	r3, r2
 8014a94:	68fa      	ldr	r2, [r7, #12]
 8014a96:	499c      	ldr	r1, [pc, #624]	; (8014d08 <canton_set_pwm+0x28c>)
 8014a98:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014a9c:	f7ff fdfa 	bl	8014694 <itm_debug3>
	int t = 2*duty; // with centered pwm (or normal)
 8014aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014aa2:	005b      	lsls	r3, r3, #1
 8014aa4:	617b      	str	r3, [r7, #20]

	if ((v->cur_dir == dir) && (v->cur_pwm_duty==duty)) {
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	f993 3000 	ldrsb.w	r3, [r3]
 8014aac:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014ab0:	429a      	cmp	r2, r3
 8014ab2:	d10c      	bne.n	8014ace <canton_set_pwm+0x52>
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	885b      	ldrh	r3, [r3, #2]
 8014ab8:	461a      	mov	r2, r3
 8014aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014abc:	4293      	cmp	r3, r2
 8014abe:	d106      	bne.n	8014ace <canton_set_pwm+0x52>
		itm_debug1(DBG_LOWCTRL, "c/same", duty);
 8014ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ac2:	4992      	ldr	r1, [pc, #584]	; (8014d0c <canton_set_pwm+0x290>)
 8014ac4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014ac8:	f7ff fdca 	bl	8014660 <itm_debug1>
		return;
 8014acc:	e118      	b.n	8014d00 <canton_set_pwm+0x284>
	}

	TIM_HandleTypeDef *pwm_timer = CantonTimerHandles[c->pwm_timer_num];
 8014ace:	68bb      	ldr	r3, [r7, #8]
 8014ad0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8014ad4:	461a      	mov	r2, r3
 8014ad6:	4b8e      	ldr	r3, [pc, #568]	; (8014d10 <canton_set_pwm+0x294>)
 8014ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014adc:	613b      	str	r3, [r7, #16]
	if (!pwm_timer) {
 8014ade:	693b      	ldr	r3, [r7, #16]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d108      	bne.n	8014af6 <canton_set_pwm+0x7a>
		itm_debug1(DBG_LOWCTRL|DBG_ERR, "c/notim", c->pwm_timer_num);
 8014ae4:	68bb      	ldr	r3, [r7, #8]
 8014ae6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8014aea:	461a      	mov	r2, r3
 8014aec:	4989      	ldr	r1, [pc, #548]	; (8014d14 <canton_set_pwm+0x298>)
 8014aee:	488a      	ldr	r0, [pc, #552]	; (8014d18 <canton_set_pwm+0x29c>)
 8014af0:	f7ff fdb6 	bl	8014660 <itm_debug1>
		return;
 8014af4:	e104      	b.n	8014d00 <canton_set_pwm+0x284>
	}
	if (v->cur_dir != dir) {
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	f993 3000 	ldrsb.w	r3, [r3]
 8014afc:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014b00:	429a      	cmp	r2, r3
 8014b02:	d03e      	beq.n	8014b82 <canton_set_pwm+0x106>
		v->cur_dir = dir;
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	78fa      	ldrb	r2, [r7, #3]
 8014b08:	701a      	strb	r2, [r3, #0]
		itm_debug3(DBG_LOWCTRL, "set dir", dir, c->ch0, c->ch1);
 8014b0a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014b0e:	68bb      	ldr	r3, [r7, #8]
 8014b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b12:	4619      	mov	r1, r3
 8014b14:	68bb      	ldr	r3, [r7, #8]
 8014b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b18:	9300      	str	r3, [sp, #0]
 8014b1a:	460b      	mov	r3, r1
 8014b1c:	497f      	ldr	r1, [pc, #508]	; (8014d1c <canton_set_pwm+0x2a0>)
 8014b1e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014b22:	f7ff fdb7 	bl	8014694 <itm_debug3>
		if (dir>0) {
 8014b26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	dd0c      	ble.n	8014b48 <canton_set_pwm+0xcc>
			if (USE_PWM_STOP) my_HAL_TIM_PWM_Stop(pwm_timer, c->ch1);
			else HAL_TIM_PWM_Start(pwm_timer, c->ch1);
 8014b2e:	68bb      	ldr	r3, [r7, #8]
 8014b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b32:	4619      	mov	r1, r3
 8014b34:	6938      	ldr	r0, [r7, #16]
 8014b36:	f7f3 fa53 	bl	8007fe0 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(pwm_timer, c->ch0);
 8014b3a:	68bb      	ldr	r3, [r7, #8]
 8014b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b3e:	4619      	mov	r1, r3
 8014b40:	6938      	ldr	r0, [r7, #16]
 8014b42:	f7f3 fa4d 	bl	8007fe0 <HAL_TIM_PWM_Start>
 8014b46:	e01c      	b.n	8014b82 <canton_set_pwm+0x106>
		} else if (dir<0) {
 8014b48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	da0c      	bge.n	8014b6a <canton_set_pwm+0xee>
			if (USE_PWM_STOP) my_HAL_TIM_PWM_Stop(pwm_timer, c->ch0);
			else HAL_TIM_PWM_Start(pwm_timer, c->ch0);
 8014b50:	68bb      	ldr	r3, [r7, #8]
 8014b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b54:	4619      	mov	r1, r3
 8014b56:	6938      	ldr	r0, [r7, #16]
 8014b58:	f7f3 fa42 	bl	8007fe0 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(pwm_timer, c->ch1);
 8014b5c:	68bb      	ldr	r3, [r7, #8]
 8014b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b60:	4619      	mov	r1, r3
 8014b62:	6938      	ldr	r0, [r7, #16]
 8014b64:	f7f3 fa3c 	bl	8007fe0 <HAL_TIM_PWM_Start>
 8014b68:	e00b      	b.n	8014b82 <canton_set_pwm+0x106>
		} else {
			if (USE_PWM_STOP) {
				my_HAL_TIM_PWM_Stop(pwm_timer, c->ch0);
				my_HAL_TIM_PWM_Stop(pwm_timer, c->ch1);
			} else {
				HAL_TIM_PWM_Start(pwm_timer, c->ch0);
 8014b6a:	68bb      	ldr	r3, [r7, #8]
 8014b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b6e:	4619      	mov	r1, r3
 8014b70:	6938      	ldr	r0, [r7, #16]
 8014b72:	f7f3 fa35 	bl	8007fe0 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(pwm_timer, c->ch1);
 8014b76:	68bb      	ldr	r3, [r7, #8]
 8014b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b7a:	4619      	mov	r1, r3
 8014b7c:	6938      	ldr	r0, [r7, #16]
 8014b7e:	f7f3 fa2f 	bl	8007fe0 <HAL_TIM_PWM_Start>
			}
		}
	}
	if (!dir) {
 8014b82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d101      	bne.n	8014b8e <canton_set_pwm+0x112>
		duty = 0;
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (USE_PWM_STOP) {
			v->cur_pwm_duty = 0;
			return;
		}
	}
	v->cur_pwm_duty = duty;
 8014b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b90:	b29a      	uxth	r2, r3
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	805a      	strh	r2, [r3, #2]
	uint32_t chon;
	uint32_t choff;
	if (dir>0) {
 8014b96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	dd06      	ble.n	8014bac <canton_set_pwm+0x130>
		chon = c->ch0;
 8014b9e:	68bb      	ldr	r3, [r7, #8]
 8014ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ba2:	61bb      	str	r3, [r7, #24]
		choff = c->ch1;
 8014ba4:	68bb      	ldr	r3, [r7, #8]
 8014ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ba8:	61fb      	str	r3, [r7, #28]
 8014baa:	e005      	b.n	8014bb8 <canton_set_pwm+0x13c>
	} else {
		chon = c->ch1;
 8014bac:	68bb      	ldr	r3, [r7, #8]
 8014bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014bb0:	61bb      	str	r3, [r7, #24]
		choff = c->ch0;
 8014bb2:	68bb      	ldr	r3, [r7, #8]
 8014bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bb6:	61fb      	str	r3, [r7, #28]
	}
	if (!USE_PWM_STOP) {
		switch (choff) {
 8014bb8:	69fb      	ldr	r3, [r7, #28]
 8014bba:	2b0c      	cmp	r3, #12
 8014bbc:	d848      	bhi.n	8014c50 <canton_set_pwm+0x1d4>
 8014bbe:	a201      	add	r2, pc, #4	; (adr r2, 8014bc4 <canton_set_pwm+0x148>)
 8014bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014bc4:	08014bf9 	.word	0x08014bf9
 8014bc8:	08014c51 	.word	0x08014c51
 8014bcc:	08014c51 	.word	0x08014c51
 8014bd0:	08014c51 	.word	0x08014c51
 8014bd4:	08014c0f 	.word	0x08014c0f
 8014bd8:	08014c51 	.word	0x08014c51
 8014bdc:	08014c51 	.word	0x08014c51
 8014be0:	08014c51 	.word	0x08014c51
 8014be4:	08014c25 	.word	0x08014c25
 8014be8:	08014c51 	.word	0x08014c51
 8014bec:	08014c51 	.word	0x08014c51
 8014bf0:	08014c51 	.word	0x08014c51
 8014bf4:	08014c3b 	.word	0x08014c3b
		case TIM_CHANNEL_1:
			itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH1/CCR1", 0);
 8014bf8:	2200      	movs	r2, #0
 8014bfa:	4949      	ldr	r1, [pc, #292]	; (8014d20 <canton_set_pwm+0x2a4>)
 8014bfc:	f240 1001 	movw	r0, #257	; 0x101
 8014c00:	f7ff fd2e 	bl	8014660 <itm_debug1>
			pwm_timer->Instance->CCR1 = 0;
 8014c04:	693b      	ldr	r3, [r7, #16]
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	2200      	movs	r2, #0
 8014c0a:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8014c0c:	e026      	b.n	8014c5c <canton_set_pwm+0x1e0>
		case TIM_CHANNEL_2:
			itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH2/CCR1", 0);
 8014c0e:	2200      	movs	r2, #0
 8014c10:	4944      	ldr	r1, [pc, #272]	; (8014d24 <canton_set_pwm+0x2a8>)
 8014c12:	f240 1001 	movw	r0, #257	; 0x101
 8014c16:	f7ff fd23 	bl	8014660 <itm_debug1>
			pwm_timer->Instance->CCR2 = 0;
 8014c1a:	693b      	ldr	r3, [r7, #16]
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	2200      	movs	r2, #0
 8014c20:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8014c22:	e01b      	b.n	8014c5c <canton_set_pwm+0x1e0>
		case TIM_CHANNEL_3:
			itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH3/CCR1", 0);
 8014c24:	2200      	movs	r2, #0
 8014c26:	4940      	ldr	r1, [pc, #256]	; (8014d28 <canton_set_pwm+0x2ac>)
 8014c28:	f240 1001 	movw	r0, #257	; 0x101
 8014c2c:	f7ff fd18 	bl	8014660 <itm_debug1>
			pwm_timer->Instance->CCR3 = 0;
 8014c30:	693b      	ldr	r3, [r7, #16]
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	2200      	movs	r2, #0
 8014c36:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8014c38:	e010      	b.n	8014c5c <canton_set_pwm+0x1e0>
		case TIM_CHANNEL_4:
			itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH4/CCR1", 0);
 8014c3a:	2200      	movs	r2, #0
 8014c3c:	493b      	ldr	r1, [pc, #236]	; (8014d2c <canton_set_pwm+0x2b0>)
 8014c3e:	f240 1001 	movw	r0, #257	; 0x101
 8014c42:	f7ff fd0d 	bl	8014660 <itm_debug1>
			pwm_timer->Instance->CCR4 = 0;
 8014c46:	693b      	ldr	r3, [r7, #16]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8014c4e:	e005      	b.n	8014c5c <canton_set_pwm+0x1e0>
		default:
			canton_error(ERR_BAD_PARAM_TIM, "bad timer channel");
 8014c50:	4937      	ldr	r1, [pc, #220]	; (8014d30 <canton_set_pwm+0x2b4>)
 8014c52:	f06f 0002 	mvn.w	r0, #2
 8014c56:	f7ff fd39 	bl	80146cc <canton_error>
			break;
 8014c5a:	bf00      	nop
		}
	}
	switch (chon) {
 8014c5c:	69bb      	ldr	r3, [r7, #24]
 8014c5e:	2b0c      	cmp	r3, #12
 8014c60:	d848      	bhi.n	8014cf4 <canton_set_pwm+0x278>
 8014c62:	a201      	add	r2, pc, #4	; (adr r2, 8014c68 <canton_set_pwm+0x1ec>)
 8014c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c68:	08014c9d 	.word	0x08014c9d
 8014c6c:	08014cf5 	.word	0x08014cf5
 8014c70:	08014cf5 	.word	0x08014cf5
 8014c74:	08014cf5 	.word	0x08014cf5
 8014c78:	08014cb3 	.word	0x08014cb3
 8014c7c:	08014cf5 	.word	0x08014cf5
 8014c80:	08014cf5 	.word	0x08014cf5
 8014c84:	08014cf5 	.word	0x08014cf5
 8014c88:	08014cc9 	.word	0x08014cc9
 8014c8c:	08014cf5 	.word	0x08014cf5
 8014c90:	08014cf5 	.word	0x08014cf5
 8014c94:	08014cf5 	.word	0x08014cf5
 8014c98:	08014cdf 	.word	0x08014cdf
	case TIM_CHANNEL_1:
		itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH1/CCR1", t);
 8014c9c:	697a      	ldr	r2, [r7, #20]
 8014c9e:	4920      	ldr	r1, [pc, #128]	; (8014d20 <canton_set_pwm+0x2a4>)
 8014ca0:	f240 1001 	movw	r0, #257	; 0x101
 8014ca4:	f7ff fcdc 	bl	8014660 <itm_debug1>
		pwm_timer->Instance->CCR1 = t;
 8014ca8:	693b      	ldr	r3, [r7, #16]
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	697a      	ldr	r2, [r7, #20]
 8014cae:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8014cb0:	e026      	b.n	8014d00 <canton_set_pwm+0x284>
	case TIM_CHANNEL_2:
		itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH2/CCR1", t);
 8014cb2:	697a      	ldr	r2, [r7, #20]
 8014cb4:	491b      	ldr	r1, [pc, #108]	; (8014d24 <canton_set_pwm+0x2a8>)
 8014cb6:	f240 1001 	movw	r0, #257	; 0x101
 8014cba:	f7ff fcd1 	bl	8014660 <itm_debug1>
		pwm_timer->Instance->CCR2 = t;
 8014cbe:	693b      	ldr	r3, [r7, #16]
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	697a      	ldr	r2, [r7, #20]
 8014cc4:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8014cc6:	e01b      	b.n	8014d00 <canton_set_pwm+0x284>
	case TIM_CHANNEL_3:
		itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH3/CCR1", t);
 8014cc8:	697a      	ldr	r2, [r7, #20]
 8014cca:	4917      	ldr	r1, [pc, #92]	; (8014d28 <canton_set_pwm+0x2ac>)
 8014ccc:	f240 1001 	movw	r0, #257	; 0x101
 8014cd0:	f7ff fcc6 	bl	8014660 <itm_debug1>
		pwm_timer->Instance->CCR3 = t;
 8014cd4:	693b      	ldr	r3, [r7, #16]
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	697a      	ldr	r2, [r7, #20]
 8014cda:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8014cdc:	e010      	b.n	8014d00 <canton_set_pwm+0x284>
	case TIM_CHANNEL_4:
		itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH4/CCR1", t);
 8014cde:	697a      	ldr	r2, [r7, #20]
 8014ce0:	4912      	ldr	r1, [pc, #72]	; (8014d2c <canton_set_pwm+0x2b0>)
 8014ce2:	f240 1001 	movw	r0, #257	; 0x101
 8014ce6:	f7ff fcbb 	bl	8014660 <itm_debug1>
		pwm_timer->Instance->CCR4 = t;
 8014cea:	693b      	ldr	r3, [r7, #16]
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	697a      	ldr	r2, [r7, #20]
 8014cf0:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8014cf2:	e005      	b.n	8014d00 <canton_set_pwm+0x284>
	default:
		canton_error(ERR_BAD_PARAM_TIM, "bad timer channel");
 8014cf4:	490e      	ldr	r1, [pc, #56]	; (8014d30 <canton_set_pwm+0x2b4>)
 8014cf6:	f06f 0002 	mvn.w	r0, #2
 8014cfa:	f7ff fce7 	bl	80146cc <canton_error>
		break;
 8014cfe:	bf00      	nop
	}

}
 8014d00:	3720      	adds	r7, #32
 8014d02:	46bd      	mov	sp, r7
 8014d04:	bd80      	pop	{r7, pc}
 8014d06:	bf00      	nop
 8014d08:	080193d8 	.word	0x080193d8
 8014d0c:	080193e4 	.word	0x080193e4
 8014d10:	20005290 	.word	0x20005290
 8014d14:	080193ec 	.word	0x080193ec
 8014d18:	80000100 	.word	0x80000100
 8014d1c:	080193f4 	.word	0x080193f4
 8014d20:	080193fc 	.word	0x080193fc
 8014d24:	08019408 	.word	0x08019408
 8014d28:	08019414 	.word	0x08019414
 8014d2c:	08019420 	.word	0x08019420
 8014d30:	0801942c 	.word	0x0801942c

08014d34 <canton_set_volt>:
void canton_set_volt(int cidx, const canton_config_t *c, canton_vars_t *v, int voltidx)
{
 8014d34:	b580      	push	{r7, lr}
 8014d36:	b086      	sub	sp, #24
 8014d38:	af02      	add	r7, sp, #8
 8014d3a:	60f8      	str	r0, [r7, #12]
 8014d3c:	60b9      	str	r1, [r7, #8]
 8014d3e:	607a      	str	r2, [r7, #4]
 8014d40:	603b      	str	r3, [r7, #0]
	v->cur_voltidx = voltidx;
 8014d42:	683b      	ldr	r3, [r7, #0]
 8014d44:	b2da      	uxtb	r2, r3
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	705a      	strb	r2, [r3, #1]
    v->selected_centivolt =  (c->volts_cv[v->cur_voltidx]);
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	785b      	ldrb	r3, [r3, #1]
 8014d4e:	461a      	mov	r2, r3
 8014d50:	68bb      	ldr	r3, [r7, #8]
 8014d52:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8014d56:	461a      	mov	r2, r3
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	605a      	str	r2, [r3, #4]
	itm_debug3(DBG_LOWCTRL, "c/set_volt", cidx, voltidx, v->selected_centivolt);
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	685b      	ldr	r3, [r3, #4]
 8014d60:	9300      	str	r3, [sp, #0]
 8014d62:	683b      	ldr	r3, [r7, #0]
 8014d64:	68fa      	ldr	r2, [r7, #12]
 8014d66:	4917      	ldr	r1, [pc, #92]	; (8014dc4 <canton_set_volt+0x90>)
 8014d68:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014d6c:	f7ff fc92 	bl	8014694 <itm_debug3>
    if ((0)) debug_info('C', 0, "SET VLT ", voltidx,  v->selected_centivolt,0);
    if ((0)) debug_info('C', 0, "VLT BIT ", (voltidx & 0x03) ? 1 : 0,
    				(voltidx & 0x02) ? 1 : 0,
    				(voltidx & 0x01) ? 1 : 0);

	HAL_GPIO_WritePin(c->volt_port_b0, c->volt_b0, (voltidx & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8014d70:	68bb      	ldr	r3, [r7, #8]
 8014d72:	6918      	ldr	r0, [r3, #16]
 8014d74:	68bb      	ldr	r3, [r7, #8]
 8014d76:	8b99      	ldrh	r1, [r3, #28]
 8014d78:	683b      	ldr	r3, [r7, #0]
 8014d7a:	b2db      	uxtb	r3, r3
 8014d7c:	f003 0301 	and.w	r3, r3, #1
 8014d80:	b2db      	uxtb	r3, r3
 8014d82:	461a      	mov	r2, r3
 8014d84:	f7ee fa46 	bl	8003214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c->volt_port_b1, c->volt_b1, (voltidx & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8014d88:	68bb      	ldr	r3, [r7, #8]
 8014d8a:	6958      	ldr	r0, [r3, #20]
 8014d8c:	68bb      	ldr	r3, [r7, #8]
 8014d8e:	8bd9      	ldrh	r1, [r3, #30]
 8014d90:	683b      	ldr	r3, [r7, #0]
 8014d92:	105b      	asrs	r3, r3, #1
 8014d94:	b2db      	uxtb	r3, r3
 8014d96:	f003 0301 	and.w	r3, r3, #1
 8014d9a:	b2db      	uxtb	r3, r3
 8014d9c:	461a      	mov	r2, r3
 8014d9e:	f7ee fa39 	bl	8003214 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c->volt_port_b2, c->volt_b2, (voltidx & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8014da2:	68bb      	ldr	r3, [r7, #8]
 8014da4:	6998      	ldr	r0, [r3, #24]
 8014da6:	68bb      	ldr	r3, [r7, #8]
 8014da8:	8c19      	ldrh	r1, [r3, #32]
 8014daa:	683b      	ldr	r3, [r7, #0]
 8014dac:	109b      	asrs	r3, r3, #2
 8014dae:	b2db      	uxtb	r3, r3
 8014db0:	f003 0301 	and.w	r3, r3, #1
 8014db4:	b2db      	uxtb	r3, r3
 8014db6:	461a      	mov	r2, r3
 8014db8:	f7ee fa2c 	bl	8003214 <HAL_GPIO_WritePin>
	if (voltidx & 0x04) s |= VOLT_0_SEL2_Pin; else r |=  c->volt_b2;
	if (voltidx & 0x08) s |= VOLT_0_SEL3_Pin; else r |=  c->volt_b3;
	HAL_GPIO_WritePin(c->volt_port, s, GPIO_PIN_SET);
	HAL_GPIO_WritePin(c->volt_port, r, GPIO_PIN_RESET);
#endif
}
 8014dbc:	bf00      	nop
 8014dbe:	3710      	adds	r7, #16
 8014dc0:	46bd      	mov	sp, r7
 8014dc2:	bd80      	pop	{r7, pc}
 8014dc4:	08019440 	.word	0x08019440

08014dc8 <volt_index>:
int volt_index(uint16_t mili_power,
		const canton_config_t *c1, //canton_vars_t *v1,
		_UNUSED_ const canton_config_t *c2, //canton_vars_t *v2,
		int *pvi1, int *pvi2,
		train_volt_policy_t pol)
{
 8014dc8:	b580      	push	{r7, lr}
 8014dca:	b08a      	sub	sp, #40	; 0x28
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	60b9      	str	r1, [r7, #8]
 8014dd0:	607a      	str	r2, [r7, #4]
 8014dd2:	603b      	str	r3, [r7, #0]
 8014dd4:	4603      	mov	r3, r0
 8014dd6:	81fb      	strh	r3, [r7, #14]
	int duty=0;
 8014dd8:	2300      	movs	r3, #0
 8014dda:	627b      	str	r3, [r7, #36]	; 0x24
	*pvi1 = MAX_PVI;
 8014ddc:	683b      	ldr	r3, [r7, #0]
 8014dde:	2207      	movs	r2, #7
 8014de0:	601a      	str	r2, [r3, #0]
	*pvi2 = MAX_PVI;
 8014de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014de4:	2207      	movs	r2, #7
 8014de6:	601a      	str	r2, [r3, #0]

	//if (mili_power <0)    return canton_error_rc(0, ERR_BAD_PARAM_MPOW, "negative milipower");
	if (mili_power >1000) return canton_error_rc(0, ERR_BAD_PARAM_MPOW, "milipower should be 0-999");
 8014de8:	89fb      	ldrh	r3, [r7, #14]
 8014dea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014dee:	d907      	bls.n	8014e00 <volt_index+0x38>
 8014df0:	4a54      	ldr	r2, [pc, #336]	; (8014f44 <volt_index+0x17c>)
 8014df2:	f06f 0103 	mvn.w	r1, #3
 8014df6:	2000      	movs	r0, #0
 8014df8:	f7ff fc77 	bl	80146ea <canton_error_rc>
 8014dfc:	4603      	mov	r3, r0
 8014dfe:	e09d      	b.n	8014f3c <volt_index+0x174>
	switch (pol) {
 8014e00:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8014e04:	2b01      	cmp	r3, #1
 8014e06:	d00d      	beq.n	8014e24 <volt_index+0x5c>
 8014e08:	2b02      	cmp	r3, #2
 8014e0a:	d052      	beq.n	8014eb2 <volt_index+0xea>
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d017      	beq.n	8014e40 <volt_index+0x78>
	default :
        duty = 0;
 8014e10:	2300      	movs	r3, #0
 8014e12:	627b      	str	r3, [r7, #36]	; 0x24
		return canton_error_rc(0, ERR_BAD_PARAM_VPOL, "bad volt policy");
 8014e14:	4a4c      	ldr	r2, [pc, #304]	; (8014f48 <volt_index+0x180>)
 8014e16:	f06f 0104 	mvn.w	r1, #4
 8014e1a:	2000      	movs	r0, #0
 8014e1c:	f7ff fc65 	bl	80146ea <canton_error_rc>
 8014e20:	4603      	mov	r3, r0
 8014e22:	e08b      	b.n	8014f3c <volt_index+0x174>
		break;
	case vpolicy_pure_pwm:
		*pvi1 = 0;
 8014e24:	683b      	ldr	r3, [r7, #0]
 8014e26:	2200      	movs	r2, #0
 8014e28:	601a      	str	r2, [r3, #0]
		*pvi2 = 0;
 8014e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e2c:	2200      	movs	r2, #0
 8014e2e:	601a      	str	r2, [r3, #0]
		duty = mili_power / 10;
 8014e30:	89fb      	ldrh	r3, [r7, #14]
 8014e32:	4a46      	ldr	r2, [pc, #280]	; (8014f4c <volt_index+0x184>)
 8014e34:	fba2 2303 	umull	r2, r3, r2, r3
 8014e38:	08db      	lsrs	r3, r3, #3
 8014e3a:	b29b      	uxth	r3, r3
 8014e3c:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8014e3e:	e077      	b.n	8014f30 <volt_index+0x168>
    case vpolicy_normal:
            // fall back to full volt +  pwm
            *pvi1 = *pvi2 = 0;
 8014e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e42:	2200      	movs	r2, #0
 8014e44:	601a      	str	r2, [r3, #0]
 8014e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e48:	681a      	ldr	r2, [r3, #0]
 8014e4a:	683b      	ldr	r3, [r7, #0]
 8014e4c:	601a      	str	r2, [r3, #0]
            duty = mili_power / 10;
 8014e4e:	89fb      	ldrh	r3, [r7, #14]
 8014e50:	4a3e      	ldr	r2, [pc, #248]	; (8014f4c <volt_index+0x184>)
 8014e52:	fba2 2303 	umull	r2, r3, r2, r3
 8014e56:	08db      	lsrs	r3, r3, #3
 8014e58:	b29b      	uxth	r3, r3
 8014e5a:	627b      	str	r3, [r7, #36]	; 0x24
            for (int i=MAX_PVI; i>=0; i--) {
 8014e5c:	2307      	movs	r3, #7
 8014e5e:	623b      	str	r3, [r7, #32]
 8014e60:	e023      	b.n	8014eaa <volt_index+0xe2>
                if (!c1->volts_cv[i]) continue;
 8014e62:	68bb      	ldr	r3, [r7, #8]
 8014e64:	6a3a      	ldr	r2, [r7, #32]
 8014e66:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d017      	beq.n	8014e9e <volt_index+0xd6>
                // c1->volts in 0.01V unit
                int d = 100*mili_power / c1->volts_cv[i];
 8014e6e:	89fb      	ldrh	r3, [r7, #14]
 8014e70:	2264      	movs	r2, #100	; 0x64
 8014e72:	fb02 f303 	mul.w	r3, r2, r3
 8014e76:	68ba      	ldr	r2, [r7, #8]
 8014e78:	6a39      	ldr	r1, [r7, #32]
 8014e7a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8014e7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8014e82:	613b      	str	r3, [r7, #16]
                if (d>MAX_PWM) {
 8014e84:	693b      	ldr	r3, [r7, #16]
 8014e86:	2b5a      	cmp	r3, #90	; 0x5a
 8014e88:	dc0b      	bgt.n	8014ea2 <volt_index+0xda>
                    continue;
                }
                // XXX for now we assume all canton have same board with same voltage level
                *pvi1 = *pvi2 = i;
 8014e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e8c:	6a3a      	ldr	r2, [r7, #32]
 8014e8e:	601a      	str	r2, [r3, #0]
 8014e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e92:	681a      	ldr	r2, [r3, #0]
 8014e94:	683b      	ldr	r3, [r7, #0]
 8014e96:	601a      	str	r2, [r3, #0]
                duty = d;
 8014e98:	693b      	ldr	r3, [r7, #16]
 8014e9a:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8014e9c:	e008      	b.n	8014eb0 <volt_index+0xe8>
                if (!c1->volts_cv[i]) continue;
 8014e9e:	bf00      	nop
 8014ea0:	e000      	b.n	8014ea4 <volt_index+0xdc>
                    continue;
 8014ea2:	bf00      	nop
            for (int i=MAX_PVI; i>=0; i--) {
 8014ea4:	6a3b      	ldr	r3, [r7, #32]
 8014ea6:	3b01      	subs	r3, #1
 8014ea8:	623b      	str	r3, [r7, #32]
 8014eaa:	6a3b      	ldr	r3, [r7, #32]
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	dad8      	bge.n	8014e62 <volt_index+0x9a>
            }
		break;
 8014eb0:	e03e      	b.n	8014f30 <volt_index+0x168>
			break;
    	}
    	break;
#endif
	case vpolicy_pure_volt:
		duty = MAX_PWM;
 8014eb2:	235a      	movs	r3, #90	; 0x5a
 8014eb4:	627b      	str	r3, [r7, #36]	; 0x24
        int s = 0;
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	61fb      	str	r3, [r7, #28]
		for (int i=MAX_PVI; i>=0; i--) {
 8014eba:	2307      	movs	r3, #7
 8014ebc:	61bb      	str	r3, [r7, #24]
 8014ebe:	e031      	b.n	8014f24 <volt_index+0x15c>
			if (!c1->volts_cv[i]) continue;
 8014ec0:	68bb      	ldr	r3, [r7, #8]
 8014ec2:	69ba      	ldr	r2, [r7, #24]
 8014ec4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d027      	beq.n	8014f1c <volt_index+0x154>
			// c1->volts in 0.01V unit. 10V = 1000
			int p = c1->volts_cv[i]*MAX_PWM/100;  // 0.01V * % , ex : 345*90
 8014ecc:	68bb      	ldr	r3, [r7, #8]
 8014ece:	69ba      	ldr	r2, [r7, #24]
 8014ed0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8014ed4:	461a      	mov	r2, r3
 8014ed6:	235a      	movs	r3, #90	; 0x5a
 8014ed8:	fb03 f302 	mul.w	r3, r3, r2
 8014edc:	4a1c      	ldr	r2, [pc, #112]	; (8014f50 <volt_index+0x188>)
 8014ede:	fb82 1203 	smull	r1, r2, r2, r3
 8014ee2:	1152      	asrs	r2, r2, #5
 8014ee4:	17db      	asrs	r3, r3, #31
 8014ee6:	1ad3      	subs	r3, r2, r3
 8014ee8:	617b      	str	r3, [r7, #20]
			if (p <= mili_power) {
 8014eea:	89fb      	ldrh	r3, [r7, #14]
 8014eec:	697a      	ldr	r2, [r7, #20]
 8014eee:	429a      	cmp	r2, r3
 8014ef0:	dc08      	bgt.n	8014f04 <volt_index+0x13c>
                s = 1;
 8014ef2:	2301      	movs	r3, #1
 8014ef4:	61fb      	str	r3, [r7, #28]
				*pvi1 = i;
 8014ef6:	683b      	ldr	r3, [r7, #0]
 8014ef8:	69ba      	ldr	r2, [r7, #24]
 8014efa:	601a      	str	r2, [r3, #0]
				*pvi2 = i;
 8014efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014efe:	69ba      	ldr	r2, [r7, #24]
 8014f00:	601a      	str	r2, [r3, #0]
 8014f02:	e00c      	b.n	8014f1e <volt_index+0x156>
			} else {
                if (!s) {
 8014f04:	69fb      	ldr	r3, [r7, #28]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d110      	bne.n	8014f2c <volt_index+0x164>
                    // lower than minimal power
                    *pvi1 = i;
 8014f0a:	683b      	ldr	r3, [r7, #0]
 8014f0c:	69ba      	ldr	r2, [r7, #24]
 8014f0e:	601a      	str	r2, [r3, #0]
                    *pvi2 = i;
 8014f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f12:	69ba      	ldr	r2, [r7, #24]
 8014f14:	601a      	str	r2, [r3, #0]
                    duty = 0;
 8014f16:	2300      	movs	r3, #0
 8014f18:	627b      	str	r3, [r7, #36]	; 0x24
                }
                // ok
				break;
 8014f1a:	e007      	b.n	8014f2c <volt_index+0x164>
			if (!c1->volts_cv[i]) continue;
 8014f1c:	bf00      	nop
		for (int i=MAX_PVI; i>=0; i--) {
 8014f1e:	69bb      	ldr	r3, [r7, #24]
 8014f20:	3b01      	subs	r3, #1
 8014f22:	61bb      	str	r3, [r7, #24]
 8014f24:	69bb      	ldr	r3, [r7, #24]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	daca      	bge.n	8014ec0 <volt_index+0xf8>
 8014f2a:	e000      	b.n	8014f2e <volt_index+0x166>
				break;
 8014f2c:	bf00      	nop
			}
		}
		break;
 8014f2e:	bf00      	nop
	}
    if (duty>MAX_PWM) {
 8014f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f32:	2b5a      	cmp	r3, #90	; 0x5a
 8014f34:	dd01      	ble.n	8014f3a <volt_index+0x172>
        duty = MAX_PWM;
 8014f36:	235a      	movs	r3, #90	; 0x5a
 8014f38:	627b      	str	r3, [r7, #36]	; 0x24
        //canton_error(ERR_BAD_PARAM_MPOW, "test msg");
    }
	return duty;
 8014f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	3728      	adds	r7, #40	; 0x28
 8014f40:	46bd      	mov	sp, r7
 8014f42:	bd80      	pop	{r7, pc}
 8014f44:	0801944c 	.word	0x0801944c
 8014f48:	08019468 	.word	0x08019468
 8014f4c:	cccccccd 	.word	0xcccccccd
 8014f50:	51eb851f 	.word	0x51eb851f

08014f54 <itm_debug1>:
{
 8014f54:	b580      	push	{r7, lr}
 8014f56:	b086      	sub	sp, #24
 8014f58:	af02      	add	r7, sp, #8
 8014f5a:	60f8      	str	r0, [r7, #12]
 8014f5c:	60b9      	str	r1, [r7, #8]
 8014f5e:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8014f60:	4b08      	ldr	r3, [pc, #32]	; (8014f84 <itm_debug1+0x30>)
 8014f62:	681a      	ldr	r2, [r3, #0]
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	4013      	ands	r3, r2
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d007      	beq.n	8014f7c <itm_debug1+0x28>
 8014f6c:	2301      	movs	r3, #1
 8014f6e:	9300      	str	r3, [sp, #0]
 8014f70:	2300      	movs	r3, #0
 8014f72:	2200      	movs	r2, #0
 8014f74:	6879      	ldr	r1, [r7, #4]
 8014f76:	68b8      	ldr	r0, [r7, #8]
 8014f78:	f003 fc7c 	bl	8018874 <_itm_debug3>
}
 8014f7c:	bf00      	nop
 8014f7e:	3710      	adds	r7, #16
 8014f80:	46bd      	mov	sp, r7
 8014f82:	bd80      	pop	{r7, pc}
 8014f84:	20000574 	.word	0x20000574

08014f88 <itm_debug2>:
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	b086      	sub	sp, #24
 8014f8c:	af02      	add	r7, sp, #8
 8014f8e:	60f8      	str	r0, [r7, #12]
 8014f90:	60b9      	str	r1, [r7, #8]
 8014f92:	607a      	str	r2, [r7, #4]
 8014f94:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8014f96:	4b09      	ldr	r3, [pc, #36]	; (8014fbc <itm_debug2+0x34>)
 8014f98:	681a      	ldr	r2, [r3, #0]
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	4013      	ands	r3, r2
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d007      	beq.n	8014fb2 <itm_debug2+0x2a>
 8014fa2:	2302      	movs	r3, #2
 8014fa4:	9300      	str	r3, [sp, #0]
 8014fa6:	2300      	movs	r3, #0
 8014fa8:	683a      	ldr	r2, [r7, #0]
 8014faa:	6879      	ldr	r1, [r7, #4]
 8014fac:	68b8      	ldr	r0, [r7, #8]
 8014fae:	f003 fc61 	bl	8018874 <_itm_debug3>
}
 8014fb2:	bf00      	nop
 8014fb4:	3710      	adds	r7, #16
 8014fb6:	46bd      	mov	sp, r7
 8014fb8:	bd80      	pop	{r7, pc}
 8014fba:	bf00      	nop
 8014fbc:	20000574 	.word	0x20000574

08014fc0 <itm_debug3>:
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b086      	sub	sp, #24
 8014fc4:	af02      	add	r7, sp, #8
 8014fc6:	60f8      	str	r0, [r7, #12]
 8014fc8:	60b9      	str	r1, [r7, #8]
 8014fca:	607a      	str	r2, [r7, #4]
 8014fcc:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 8014fce:	4b09      	ldr	r3, [pc, #36]	; (8014ff4 <itm_debug3+0x34>)
 8014fd0:	681a      	ldr	r2, [r3, #0]
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	4013      	ands	r3, r2
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d007      	beq.n	8014fea <itm_debug3+0x2a>
 8014fda:	2303      	movs	r3, #3
 8014fdc:	9300      	str	r3, [sp, #0]
 8014fde:	69bb      	ldr	r3, [r7, #24]
 8014fe0:	683a      	ldr	r2, [r7, #0]
 8014fe2:	6879      	ldr	r1, [r7, #4]
 8014fe4:	68b8      	ldr	r0, [r7, #8]
 8014fe6:	f003 fc45 	bl	8018874 <_itm_debug3>
}
 8014fea:	bf00      	nop
 8014fec:	3710      	adds	r7, #16
 8014fee:	46bd      	mov	sp, r7
 8014ff0:	bd80      	pop	{r7, pc}
 8014ff2:	bf00      	nop
 8014ff4:	20000574 	.word	0x20000574

08014ff8 <runtime_error>:
	trainctl_error('G', code, msg);
	return NULL;
}

static inline void *runtime_error(int code, const char *msg)
{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	b082      	sub	sp, #8
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	6078      	str	r0, [r7, #4]
 8015000:	6039      	str	r1, [r7, #0]
	itm_debug1(DBG_CONFIG, msg, code);
 8015002:	687a      	ldr	r2, [r7, #4]
 8015004:	6839      	ldr	r1, [r7, #0]
 8015006:	2080      	movs	r0, #128	; 0x80
 8015008:	f7ff ffa4 	bl	8014f54 <itm_debug1>
	trainctl_error('G', code, msg);
 801500c:	683a      	ldr	r2, [r7, #0]
 801500e:	6879      	ldr	r1, [r7, #4]
 8015010:	2047      	movs	r0, #71	; 0x47
 8015012:	f000 fc37 	bl	8015884 <trainctl_error>
	return NULL;
 8015016:	2300      	movs	r3, #0
}
 8015018:	4618      	mov	r0, r3
 801501a:	3708      	adds	r7, #8
 801501c:	46bd      	mov	sp, r7
 801501e:	bd80      	pop	{r7, pc}

08015020 <bemf_reset>:
#define USE_CANTON(_idx) \
		const canton_config_t *cconf = get_canton_cnf(_idx); \
		//canton_vars_t         *cvars = &canton_vars[_idx];

void bemf_reset(void)
{
 8015020:	b480      	push	{r7}
 8015022:	b083      	sub	sp, #12
 8015024:	af00      	add	r7, sp, #0
	for (int i=0; i<NUM_LOCAL_CANTONS_SW; i++) {
 8015026:	2300      	movs	r3, #0
 8015028:	607b      	str	r3, [r7, #4]
 801502a:	e007      	b.n	801503c <bemf_reset+0x1c>
		bemf_to[i]=0xFF;
 801502c:	4a08      	ldr	r2, [pc, #32]	; (8015050 <bemf_reset+0x30>)
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	4413      	add	r3, r2
 8015032:	22ff      	movs	r2, #255	; 0xff
 8015034:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<NUM_LOCAL_CANTONS_SW; i++) {
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	3301      	adds	r3, #1
 801503a:	607b      	str	r3, [r7, #4]
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	2b07      	cmp	r3, #7
 8015040:	ddf4      	ble.n	801502c <bemf_reset+0xc>
	}
}
 8015042:	bf00      	nop
 8015044:	370c      	adds	r7, #12
 8015046:	46bd      	mov	sp, r7
 8015048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801504c:	4770      	bx	lr
 801504e:	bf00      	nop
 8015050:	20000224 	.word	0x20000224

08015054 <bemf_msg>:

void bemf_msg(msg_64_t *m)
{
 8015054:	b580      	push	{r7, lr}
 8015056:	b084      	sub	sp, #16
 8015058:	af00      	add	r7, sp, #0
 801505a:	6078      	str	r0, [r7, #4]
	if (!IS_CANTON(m->to)) {
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	781b      	ldrb	r3, [r3, #0]
 8015060:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8015064:	2b00      	cmp	r3, #0
 8015066:	d008      	beq.n	801507a <bemf_msg+0x26>
		// error
		itm_debug1(DBG_ERR, "bad bemf c", m->to);
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	781b      	ldrb	r3, [r3, #0]
 801506c:	461a      	mov	r2, r3
 801506e:	491c      	ldr	r1, [pc, #112]	; (80150e0 <bemf_msg+0x8c>)
 8015070:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8015074:	f7ff ff6e 	bl	8014f54 <itm_debug1>
		return;
 8015078:	e02f      	b.n	80150da <bemf_msg+0x86>
	}
	int idx = m->to & 0x07;
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	781b      	ldrb	r3, [r3, #0]
 801507e:	f003 0307 	and.w	r3, r3, #7
 8015082:	60fb      	str	r3, [r7, #12]
	switch(m->cmd) {
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	789b      	ldrb	r3, [r3, #2]
 8015088:	2b40      	cmp	r3, #64	; 0x40
 801508a:	d00d      	beq.n	80150a8 <bemf_msg+0x54>
 801508c:	2b41      	cmp	r3, #65	; 0x41
 801508e:	d11b      	bne.n	80150c8 <bemf_msg+0x74>
	case CMD_BEMF_OFF:
		itm_debug1(DBG_SPDCTL|DBG_CTRL, "BEMF OFF", idx);
 8015090:	68fa      	ldr	r2, [r7, #12]
 8015092:	4914      	ldr	r1, [pc, #80]	; (80150e4 <bemf_msg+0x90>)
 8015094:	f44f 6082 	mov.w	r0, #1040	; 0x410
 8015098:	f7ff ff5c 	bl	8014f54 <itm_debug1>
		bemf_to[idx] = 0xFF;
 801509c:	4a12      	ldr	r2, [pc, #72]	; (80150e8 <bemf_msg+0x94>)
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	4413      	add	r3, r2
 80150a2:	22ff      	movs	r2, #255	; 0xff
 80150a4:	701a      	strb	r2, [r3, #0]
		break;
 80150a6:	e018      	b.n	80150da <bemf_msg+0x86>
	case CMD_BEMF_ON:
		itm_debug2(DBG_SPDCTL|DBG_CTRL, "BEMF ON", idx, m->from);
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	785b      	ldrb	r3, [r3, #1]
 80150ac:	68fa      	ldr	r2, [r7, #12]
 80150ae:	490f      	ldr	r1, [pc, #60]	; (80150ec <bemf_msg+0x98>)
 80150b0:	f44f 6082 	mov.w	r0, #1040	; 0x410
 80150b4:	f7ff ff68 	bl	8014f88 <itm_debug2>
		bemf_to[idx] = m->from;
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	7859      	ldrb	r1, [r3, #1]
 80150bc:	4a0a      	ldr	r2, [pc, #40]	; (80150e8 <bemf_msg+0x94>)
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	4413      	add	r3, r2
 80150c2:	460a      	mov	r2, r1
 80150c4:	701a      	strb	r2, [r3, #0]
		break;
 80150c6:	e008      	b.n	80150da <bemf_msg+0x86>
	default:
		itm_debug1(DBG_ERR, "bad bemf c", m->to);
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	781b      	ldrb	r3, [r3, #0]
 80150cc:	461a      	mov	r2, r3
 80150ce:	4904      	ldr	r1, [pc, #16]	; (80150e0 <bemf_msg+0x8c>)
 80150d0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80150d4:	f7ff ff3e 	bl	8014f54 <itm_debug1>
		break;
 80150d8:	bf00      	nop
	}
}
 80150da:	3710      	adds	r7, #16
 80150dc:	46bd      	mov	sp, r7
 80150de:	bd80      	pop	{r7, pc}
 80150e0:	08019478 	.word	0x08019478
 80150e4:	08019484 	.word	0x08019484
 80150e8:	20000224 	.word	0x20000224
 80150ec:	08019490 	.word	0x08019490

080150f0 <bemf_tick>:

void bemf_tick(uint32_t notif_flags, _UNUSED_ uint32_t tick, _UNUSED_ uint32_t dt)
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b084      	sub	sp, #16
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	60f8      	str	r0, [r7, #12]
 80150f8:	60b9      	str	r1, [r7, #8]
 80150fa:	607a      	str	r2, [r7, #4]
	if (bemf_run_mode == runmode_off) return;
 80150fc:	4b18      	ldr	r3, [pc, #96]	; (8015160 <bemf_tick+0x70>)
 80150fe:	781b      	ldrb	r3, [r3, #0]
 8015100:	2b00      	cmp	r3, #0
 8015102:	d029      	beq.n	8015158 <bemf_tick+0x68>

	itm_debug1(DBG_ADC, "------- btk", (int) notif_flags);
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	461a      	mov	r2, r3
 8015108:	4916      	ldr	r1, [pc, #88]	; (8015164 <bemf_tick+0x74>)
 801510a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801510e:	f7ff ff21 	bl	8014f54 <itm_debug1>
	if (notif_flags & NOTIF_NEW_ADC_1) {
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	f003 0301 	and.w	r3, r3, #1
 8015118:	2b00      	cmp	r3, #0
 801511a:	d013      	beq.n	8015144 <bemf_tick+0x54>
		if (notif_flags & NOTIF_NEW_ADC_2) {
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	f003 0302 	and.w	r3, r3, #2
 8015122:	2b00      	cmp	r3, #0
 8015124:	d00a      	beq.n	801513c <bemf_tick+0x4c>
			itm_debug1(DBG_ERR|DBG_LOWCTRL|DBG_TIM, "both", (int) notif_flags);
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	461a      	mov	r2, r3
 801512a:	490f      	ldr	r1, [pc, #60]	; (8015168 <bemf_tick+0x78>)
 801512c:	480f      	ldr	r0, [pc, #60]	; (801516c <bemf_tick+0x7c>)
 801512e:	f7ff ff11 	bl	8014f54 <itm_debug1>
			runtime_error(ERR_DMA, "both NEW_ADC1 and NEW_ADC2");
 8015132:	490f      	ldr	r1, [pc, #60]	; (8015170 <bemf_tick+0x80>)
 8015134:	f06f 000b 	mvn.w	r0, #11
 8015138:	f7ff ff5e 	bl	8014ff8 <runtime_error>
		}
		process_adc(&train_adc_buf[0], dt);
 801513c:	6879      	ldr	r1, [r7, #4]
 801513e:	480d      	ldr	r0, [pc, #52]	; (8015174 <bemf_tick+0x84>)
 8015140:	f000 f836 	bl	80151b0 <process_adc>
	}
	if (notif_flags & NOTIF_NEW_ADC_2) {
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	f003 0302 	and.w	r3, r3, #2
 801514a:	2b00      	cmp	r3, #0
 801514c:	d005      	beq.n	801515a <bemf_tick+0x6a>
		process_adc(&train_adc_buf[1], dt);
 801514e:	6879      	ldr	r1, [r7, #4]
 8015150:	4809      	ldr	r0, [pc, #36]	; (8015178 <bemf_tick+0x88>)
 8015152:	f000 f82d 	bl	80151b0 <process_adc>
 8015156:	e000      	b.n	801515a <bemf_tick+0x6a>
	if (bemf_run_mode == runmode_off) return;
 8015158:	bf00      	nop
	}
}
 801515a:	3710      	adds	r7, #16
 801515c:	46bd      	mov	sp, r7
 801515e:	bd80      	pop	{r7, pc}
 8015160:	200052f2 	.word	0x200052f2
 8015164:	08019498 	.word	0x08019498
 8015168:	080194a4 	.word	0x080194a4
 801516c:	80000101 	.word	0x80000101
 8015170:	080194ac 	.word	0x080194ac
 8015174:	200088a4 	.word	0x200088a4
 8015178:	200088cc 	.word	0x200088cc

0801517c <bemf_convert_to_centivolt>:
	return ((m * 4545 * 33) / (4096*100));
}


static inline int32_t bemf_convert_to_centivolt(_UNUSED_ const canton_config_t *c, int32_t m)
{
 801517c:	b480      	push	{r7}
 801517e:	b083      	sub	sp, #12
 8015180:	af00      	add	r7, sp, #0
 8015182:	6078      	str	r0, [r7, #4]
 8015184:	6039      	str	r1, [r7, #0]
			m = 2200*m/2000;
		}
	}
#endif

	return ((m * 4545 * 33) / (4096*100));
 8015186:	683b      	ldr	r3, [r7, #0]
 8015188:	4a07      	ldr	r2, [pc, #28]	; (80151a8 <bemf_convert_to_centivolt+0x2c>)
 801518a:	fb02 f303 	mul.w	r3, r2, r3
 801518e:	4a07      	ldr	r2, [pc, #28]	; (80151ac <bemf_convert_to_centivolt+0x30>)
 8015190:	fb82 1203 	smull	r1, r2, r2, r3
 8015194:	1452      	asrs	r2, r2, #17
 8015196:	17db      	asrs	r3, r3, #31
 8015198:	1ad3      	subs	r3, r2, r3
}
 801519a:	4618      	mov	r0, r3
 801519c:	370c      	adds	r7, #12
 801519e:	46bd      	mov	sp, r7
 80151a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a4:	4770      	bx	lr
 80151a6:	bf00      	nop
 80151a8:	000249e1 	.word	0x000249e1
 80151ac:	51eb851f 	.word	0x51eb851f

080151b0 <process_adc>:

/// ---------------------------------------------------------------------------------------

static void process_adc(volatile adc_buf_t *buf, _UNUSED_ uint32_t deltaticks)
{
 80151b0:	b580      	push	{r7, lr}
 80151b2:	b092      	sub	sp, #72	; 0x48
 80151b4:	af02      	add	r7, sp, #8
 80151b6:	6078      	str	r0, [r7, #4]
 80151b8:	6039      	str	r1, [r7, #0]
	for (int i=0; i<NUM_LOCAL_CANTONS_HW; i++) {
 80151ba:	2300      	movs	r3, #0
 80151bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80151be:	e0ae      	b.n	801531e <process_adc+0x16e>
		USE_CANTON(i)
 80151c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80151c2:	f000 fce7 	bl	8015b94 <get_canton_cnf>
 80151c6:	6338      	str	r0, [r7, #48]	; 0x30
		// process BEMF
#ifndef USE_INA3221
	    canton_intensity(cconf, cvars, buf[i].intOff, buf[i].intOn);
#error ohla
#endif
		int skp = 0;
 80151c8:	2300      	movs	r3, #0
 80151ca:	63bb      	str	r3, [r7, #56]	; 0x38
		if ((bemf_run_mode == runmode_testcanton) && (i<3)) {
 80151cc:	4b58      	ldr	r3, [pc, #352]	; (8015330 <process_adc+0x180>)
 80151ce:	781b      	ldrb	r3, [r3, #0]
 80151d0:	2b02      	cmp	r3, #2
 80151d2:	d105      	bne.n	80151e0 <process_adc+0x30>
 80151d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80151d6:	2b02      	cmp	r3, #2
 80151d8:	dc02      	bgt.n	80151e0 <process_adc+0x30>
			skp = 1;
 80151da:	2301      	movs	r3, #1
 80151dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80151de:	e006      	b.n	80151ee <process_adc+0x3e>
		} else if (0xFF == bemf_to[i]) {
 80151e0:	4a54      	ldr	r2, [pc, #336]	; (8015334 <process_adc+0x184>)
 80151e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80151e4:	4413      	add	r3, r2
 80151e6:	781b      	ldrb	r3, [r3, #0]
 80151e8:	2bff      	cmp	r3, #255	; 0xff
 80151ea:	f000 8092 	beq.w	8015312 <process_adc+0x162>
			continue;
		}

		const canton_config_t *c = get_canton_cnf(i);
 80151ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80151f0:	f000 fcd0 	bl	8015b94 <get_canton_cnf>
 80151f4:	62f8      	str	r0, [r7, #44]	; 0x2c
		int32_t voffa = bemf_convert_to_centivolt(c, buf[i].voffA);
		int32_t voffb = bemf_convert_to_centivolt(c, buf[i].voffB);
		int32_t vona = bemf_convert_to_centivolt(c, buf[i].vonA);
		int32_t vonb = bemf_convert_to_centivolt(c, buf[i].vonB);
		 */
		int32_t voffa = bemf_convert_to_centivolt(c, buf->off[i].vA);
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80151fa:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80151fe:	b29b      	uxth	r3, r3
 8015200:	4619      	mov	r1, r3
 8015202:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015204:	f7ff ffba 	bl	801517c <bemf_convert_to_centivolt>
 8015208:	62b8      	str	r0, [r7, #40]	; 0x28
		int32_t voffb = bemf_convert_to_centivolt(c, buf->off[i].vB);
 801520a:	687a      	ldr	r2, [r7, #4]
 801520c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801520e:	009b      	lsls	r3, r3, #2
 8015210:	4413      	add	r3, r2
 8015212:	885b      	ldrh	r3, [r3, #2]
 8015214:	b29b      	uxth	r3, r3
 8015216:	4619      	mov	r1, r3
 8015218:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801521a:	f7ff ffaf 	bl	801517c <bemf_convert_to_centivolt>
 801521e:	6278      	str	r0, [r7, #36]	; 0x24
		int32_t vona =  bemf_convert_to_centivolt(c, buf->on[i].vA);
 8015220:	687a      	ldr	r2, [r7, #4]
 8015222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015224:	3304      	adds	r3, #4
 8015226:	009b      	lsls	r3, r3, #2
 8015228:	4413      	add	r3, r2
 801522a:	889b      	ldrh	r3, [r3, #4]
 801522c:	b29b      	uxth	r3, r3
 801522e:	4619      	mov	r1, r3
 8015230:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015232:	f7ff ffa3 	bl	801517c <bemf_convert_to_centivolt>
 8015236:	6238      	str	r0, [r7, #32]
		int32_t vonb =  bemf_convert_to_centivolt(c, buf->on[i].vB);
 8015238:	687a      	ldr	r2, [r7, #4]
 801523a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801523c:	3304      	adds	r3, #4
 801523e:	009b      	lsls	r3, r3, #2
 8015240:	4413      	add	r3, r2
 8015242:	88db      	ldrh	r3, [r3, #6]
 8015244:	b29b      	uxth	r3, r3
 8015246:	4619      	mov	r1, r3
 8015248:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801524a:	f7ff ff97 	bl	801517c <bemf_convert_to_centivolt>
 801524e:	61f8      	str	r0, [r7, #28]

		int16_t voff = (int16_t)(voffb-voffa);
 8015250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015252:	b29a      	uxth	r2, r3
 8015254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015256:	b29b      	uxth	r3, r3
 8015258:	1ad3      	subs	r3, r2, r3
 801525a:	b29b      	uxth	r3, r3
 801525c:	86fb      	strh	r3, [r7, #54]	; 0x36
		int16_t von  = (int16_t)(vonb-vona);
 801525e:	69fb      	ldr	r3, [r7, #28]
 8015260:	b29a      	uxth	r2, r3
 8015262:	6a3b      	ldr	r3, [r7, #32]
 8015264:	b29b      	uxth	r3, r3
 8015266:	1ad3      	subs	r3, r2, r3
 8015268:	b29b      	uxth	r3, r3
 801526a:	86bb      	strh	r3, [r7, #52]	; 0x34

		if (cconf->reverse_bemf) {
 801526c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801526e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015272:	f003 0302 	and.w	r3, r3, #2
 8015276:	b2db      	uxtb	r3, r3
 8015278:	2b00      	cmp	r3, #0
 801527a:	d007      	beq.n	801528c <process_adc+0xdc>
			voff = -voff;
 801527c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801527e:	425b      	negs	r3, r3
 8015280:	b29b      	uxth	r3, r3
 8015282:	86fb      	strh	r3, [r7, #54]	; 0x36
			von = -von;
 8015284:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015286:	425b      	negs	r3, r3
 8015288:	b29b      	uxth	r3, r3
 801528a:	86bb      	strh	r3, [r7, #52]	; 0x34
		}
		if ((1)) {
			itm_debug3(DBG_ADC|DBG_LOWCTRL, "ADC/Voff", i, voffa, voffb);
 801528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801528e:	9300      	str	r3, [sp, #0]
 8015290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015292:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015294:	4928      	ldr	r1, [pc, #160]	; (8015338 <process_adc+0x188>)
 8015296:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 801529a:	f7ff fe91 	bl	8014fc0 <itm_debug3>
			itm_debug3(DBG_ADC|DBG_LOWCTRL, "ADC/Von",  i, vona, vonb);
 801529e:	69fb      	ldr	r3, [r7, #28]
 80152a0:	9300      	str	r3, [sp, #0]
 80152a2:	6a3b      	ldr	r3, [r7, #32]
 80152a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80152a6:	4925      	ldr	r1, [pc, #148]	; (801533c <process_adc+0x18c>)
 80152a8:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 80152ac:	f7ff fe88 	bl	8014fc0 <itm_debug3>
			itm_debug3(DBG_ADC|DBG_LOWCTRL, "ADCoi", i,  voff, von);
 80152b0:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80152b4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80152b8:	9300      	str	r3, [sp, #0]
 80152ba:	4613      	mov	r3, r2
 80152bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80152be:	4920      	ldr	r1, [pc, #128]	; (8015340 <process_adc+0x190>)
 80152c0:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 80152c4:	f7ff fe7c 	bl	8014fc0 <itm_debug3>
		}
		if (skp) continue;
 80152c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d123      	bne.n	8015316 <process_adc+0x166>
				m.v2 = von;
				mqf_write(&from_canton, &m);
			}
		}
		msg_64_t m;
		m.from = MA_CANTON(localBoardNum, i);
 80152ce:	4b1d      	ldr	r3, [pc, #116]	; (8015344 <process_adc+0x194>)
 80152d0:	781b      	ldrb	r3, [r3, #0]
 80152d2:	00db      	lsls	r3, r3, #3
 80152d4:	b25b      	sxtb	r3, r3
 80152d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80152da:	b25a      	sxtb	r2, r3
 80152dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80152de:	b25b      	sxtb	r3, r3
 80152e0:	f003 0307 	and.w	r3, r3, #7
 80152e4:	b25b      	sxtb	r3, r3
 80152e6:	4313      	orrs	r3, r2
 80152e8:	b25b      	sxtb	r3, r3
 80152ea:	b2db      	uxtb	r3, r3
 80152ec:	747b      	strb	r3, [r7, #17]
		m.to = bemf_to[i];
 80152ee:	4a11      	ldr	r2, [pc, #68]	; (8015334 <process_adc+0x184>)
 80152f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80152f2:	4413      	add	r3, r2
 80152f4:	781b      	ldrb	r3, [r3, #0]
 80152f6:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_BEMF_NOTIF;
 80152f8:	2303      	movs	r3, #3
 80152fa:	74bb      	strb	r3, [r7, #18]
		m.v1 = voff;
 80152fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80152fe:	82bb      	strh	r3, [r7, #20]
		m.v2 = von;
 8015300:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015302:	82fb      	strh	r3, [r7, #22]
		mqf_write(&from_canton, &m);
 8015304:	f107 0310 	add.w	r3, r7, #16
 8015308:	4619      	mov	r1, r3
 801530a:	480f      	ldr	r0, [pc, #60]	; (8015348 <process_adc+0x198>)
 801530c:	f003 fbb8 	bl	8018a80 <mqf_write>
 8015310:	e002      	b.n	8015318 <process_adc+0x168>
			continue;
 8015312:	bf00      	nop
 8015314:	e000      	b.n	8015318 <process_adc+0x168>
		if (skp) continue;
 8015316:	bf00      	nop
	for (int i=0; i<NUM_LOCAL_CANTONS_HW; i++) {
 8015318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801531a:	3301      	adds	r3, #1
 801531c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801531e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015320:	2b04      	cmp	r3, #4
 8015322:	f77f af4d 	ble.w	80151c0 <process_adc+0x10>

	}
}
 8015326:	bf00      	nop
 8015328:	3740      	adds	r7, #64	; 0x40
 801532a:	46bd      	mov	sp, r7
 801532c:	bd80      	pop	{r7, pc}
 801532e:	bf00      	nop
 8015330:	200052f2 	.word	0x200052f2
 8015334:	20000224 	.word	0x20000224
 8015338:	080194c8 	.word	0x080194c8
 801533c:	080194d4 	.word	0x080194d4
 8015340:	080194dc 	.word	0x080194dc
 8015344:	200053a5 	.word	0x200053a5
 8015348:	200004dc 	.word	0x200004dc

0801534c <presdect_tick>:
#include "railconfig.h"


#if INA3221_TASK
void presdect_tick(_UNUSED_ uint32_t notif_flags, _UNUSED_ uint32_t tick, _UNUSED_ uint32_t dt)
{
 801534c:	b480      	push	{r7}
 801534e:	b085      	sub	sp, #20
 8015350:	af00      	add	r7, sp, #0
 8015352:	60f8      	str	r0, [r7, #12]
 8015354:	60b9      	str	r1, [r7, #8]
 8015356:	607a      	str	r2, [r7, #4]
}
 8015358:	bf00      	nop
 801535a:	3714      	adds	r7, #20
 801535c:	46bd      	mov	sp, r7
 801535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015362:	4770      	bx	lr

08015364 <itm_debug1>:
{
 8015364:	b580      	push	{r7, lr}
 8015366:	b086      	sub	sp, #24
 8015368:	af02      	add	r7, sp, #8
 801536a:	60f8      	str	r0, [r7, #12]
 801536c:	60b9      	str	r1, [r7, #8]
 801536e:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8015370:	4b08      	ldr	r3, [pc, #32]	; (8015394 <itm_debug1+0x30>)
 8015372:	681a      	ldr	r2, [r3, #0]
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	4013      	ands	r3, r2
 8015378:	2b00      	cmp	r3, #0
 801537a:	d007      	beq.n	801538c <itm_debug1+0x28>
 801537c:	2301      	movs	r3, #1
 801537e:	9300      	str	r3, [sp, #0]
 8015380:	2300      	movs	r3, #0
 8015382:	2200      	movs	r2, #0
 8015384:	6879      	ldr	r1, [r7, #4]
 8015386:	68b8      	ldr	r0, [r7, #8]
 8015388:	f003 fa74 	bl	8018874 <_itm_debug3>
}
 801538c:	bf00      	nop
 801538e:	3710      	adds	r7, #16
 8015390:	46bd      	mov	sp, r7
 8015392:	bd80      	pop	{r7, pc}
 8015394:	20000574 	.word	0x20000574

08015398 <itm_debug2>:
{
 8015398:	b580      	push	{r7, lr}
 801539a:	b086      	sub	sp, #24
 801539c:	af02      	add	r7, sp, #8
 801539e:	60f8      	str	r0, [r7, #12]
 80153a0:	60b9      	str	r1, [r7, #8]
 80153a2:	607a      	str	r2, [r7, #4]
 80153a4:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 80153a6:	4b09      	ldr	r3, [pc, #36]	; (80153cc <itm_debug2+0x34>)
 80153a8:	681a      	ldr	r2, [r3, #0]
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	4013      	ands	r3, r2
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d007      	beq.n	80153c2 <itm_debug2+0x2a>
 80153b2:	2302      	movs	r3, #2
 80153b4:	9300      	str	r3, [sp, #0]
 80153b6:	2300      	movs	r3, #0
 80153b8:	683a      	ldr	r2, [r7, #0]
 80153ba:	6879      	ldr	r1, [r7, #4]
 80153bc:	68b8      	ldr	r0, [r7, #8]
 80153be:	f003 fa59 	bl	8018874 <_itm_debug3>
}
 80153c2:	bf00      	nop
 80153c4:	3710      	adds	r7, #16
 80153c6:	46bd      	mov	sp, r7
 80153c8:	bd80      	pop	{r7, pc}
 80153ca:	bf00      	nop
 80153cc:	20000574 	.word	0x20000574

080153d0 <turnout_error>:
{
 80153d0:	b580      	push	{r7, lr}
 80153d2:	b082      	sub	sp, #8
 80153d4:	af00      	add	r7, sp, #0
 80153d6:	6078      	str	r0, [r7, #4]
 80153d8:	6039      	str	r1, [r7, #0]
	return trainctl_error('A', code, msg);
 80153da:	683a      	ldr	r2, [r7, #0]
 80153dc:	6879      	ldr	r1, [r7, #4]
 80153de:	2041      	movs	r0, #65	; 0x41
 80153e0:	f000 fa50 	bl	8015884 <trainctl_error>
 80153e4:	4603      	mov	r3, r0
}
 80153e6:	4618      	mov	r0, r3
 80153e8:	3708      	adds	r7, #8
 80153ea:	46bd      	mov	sp, r7
 80153ec:	bd80      	pop	{r7, pc}

080153ee <debug_info>:
{
	trainctl_notif('T', train_idx, cmd, dta, dtalen);
}

static inline void debug_info(uint32_t sel, uint32_t num, char *msg, int v1, int v2, int v3)
{
 80153ee:	b580      	push	{r7, lr}
 80153f0:	b088      	sub	sp, #32
 80153f2:	af04      	add	r7, sp, #16
 80153f4:	60f8      	str	r0, [r7, #12]
 80153f6:	60b9      	str	r1, [r7, #8]
 80153f8:	607a      	str	r2, [r7, #4]
 80153fa:	603b      	str	r3, [r7, #0]
	trainctl_notif2(sel, num, 'D', msg, v1, v2, v3);
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	b2d8      	uxtb	r0, r3
 8015400:	68bb      	ldr	r3, [r7, #8]
 8015402:	b2d9      	uxtb	r1, r3
 8015404:	69fb      	ldr	r3, [r7, #28]
 8015406:	9302      	str	r3, [sp, #8]
 8015408:	69bb      	ldr	r3, [r7, #24]
 801540a:	9301      	str	r3, [sp, #4]
 801540c:	683b      	ldr	r3, [r7, #0]
 801540e:	9300      	str	r3, [sp, #0]
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	2244      	movs	r2, #68	; 0x44
 8015414:	f001 f8f2 	bl	80165fc <trainctl_notif2>
}
 8015418:	bf00      	nop
 801541a:	3710      	adds	r7, #16
 801541c:	46bd      	mov	sp, r7
 801541e:	bd80      	pop	{r7, pc}

08015420 <mqf_read_to_turnout>:
LFMQUEUE_DEF_H(to_turnout, msg_64_t)
 8015420:	b580      	push	{r7, lr}
 8015422:	b082      	sub	sp, #8
 8015424:	af00      	add	r7, sp, #0
 8015426:	6078      	str	r0, [r7, #4]
 8015428:	6879      	ldr	r1, [r7, #4]
 801542a:	4804      	ldr	r0, [pc, #16]	; (801543c <mqf_read_to_turnout+0x1c>)
 801542c:	f003 fba2 	bl	8018b74 <mqf_read>
 8015430:	4603      	mov	r3, r0
 8015432:	4618      	mov	r0, r3
 8015434:	3708      	adds	r7, #8
 8015436:	46bd      	mov	sp, r7
 8015438:	bd80      	pop	{r7, pc}
 801543a:	bf00      	nop
 801543c:	200004b8 	.word	0x200004b8

08015440 <turnout_tick>:
static void process_turnout_timers(uint32_t tick, uint32_t dt);
static void process_turnout_cmd(msg_64_t *m, uint32_t tick, uint32_t dt);


void turnout_tick(_UNUSED_ uint32_t notif_flags, uint32_t tick, uint32_t dt)
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b088      	sub	sp, #32
 8015444:	af00      	add	r7, sp, #0
 8015446:	60f8      	str	r0, [r7, #12]
 8015448:	60b9      	str	r1, [r7, #8]
 801544a:	607a      	str	r2, [r7, #4]
	static int first=1;
	if (first) {
 801544c:	4b20      	ldr	r3, [pc, #128]	; (80154d0 <turnout_tick+0x90>)
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	2b00      	cmp	r3, #0
 8015452:	d004      	beq.n	801545e <turnout_tick+0x1e>
		first = 0;
 8015454:	4b1e      	ldr	r3, [pc, #120]	; (80154d0 <turnout_tick+0x90>)
 8015456:	2200      	movs	r2, #0
 8015458:	601a      	str	r2, [r3, #0]
		turnout_reset();
 801545a:	f000 f8d3 	bl	8015604 <turnout_reset>
	}
	static int cnt = 0;
	cnt ++;
 801545e:	4b1d      	ldr	r3, [pc, #116]	; (80154d4 <turnout_tick+0x94>)
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	3301      	adds	r3, #1
 8015464:	4a1b      	ldr	r2, [pc, #108]	; (80154d4 <turnout_tick+0x94>)
 8015466:	6013      	str	r3, [r2, #0]
	if (cnt%4) return; // half freq
 8015468:	4b1a      	ldr	r3, [pc, #104]	; (80154d4 <turnout_tick+0x94>)
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	f003 0303 	and.w	r3, r3, #3
 8015470:	2b00      	cmp	r3, #0
 8015472:	d126      	bne.n	80154c2 <turnout_tick+0x82>
	// TODO we need a fixed freq for turnout

	process_turnout_timers(tick, dt);
 8015474:	6879      	ldr	r1, [r7, #4]
 8015476:	68b8      	ldr	r0, [r7, #8]
 8015478:	f000 f920 	bl	80156bc <process_turnout_timers>
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_turnout(&m);
 801547c:	f107 0310 	add.w	r3, r7, #16
 8015480:	4618      	mov	r0, r3
 8015482:	f7ff ffcd 	bl	8015420 <mqf_read_to_turnout>
 8015486:	61f8      	str	r0, [r7, #28]
		if (rc) break;
 8015488:	69fb      	ldr	r3, [r7, #28]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d11b      	bne.n	80154c6 <turnout_tick+0x86>
		if (IS_TURNOUT(m.to)) {
 801548e:	7c3b      	ldrb	r3, [r7, #16]
 8015490:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8015494:	2b40      	cmp	r3, #64	; 0x40
 8015496:	d107      	bne.n	80154a8 <turnout_tick+0x68>
			process_turnout_cmd(&m, tick, dt);
 8015498:	f107 0310 	add.w	r3, r7, #16
 801549c:	687a      	ldr	r2, [r7, #4]
 801549e:	68b9      	ldr	r1, [r7, #8]
 80154a0:	4618      	mov	r0, r3
 80154a2:	f000 f819 	bl	80154d8 <process_turnout_cmd>
 80154a6:	e7e9      	b.n	801547c <turnout_tick+0x3c>
		} else if (IS_BROADCAST(m.to)) {
 80154a8:	7c3b      	ldrb	r3, [r7, #16]
 80154aa:	2bff      	cmp	r3, #255	; 0xff
 80154ac:	d1e6      	bne.n	801547c <turnout_tick+0x3c>
			switch (m.cmd) {
 80154ae:	7cbb      	ldrb	r3, [r7, #18]
 80154b0:	3bfe      	subs	r3, #254	; 0xfe
 80154b2:	2b01      	cmp	r3, #1
 80154b4:	d803      	bhi.n	80154be <turnout_tick+0x7e>
			default:
				break;
			case CMD_RESET: // FALLTHRU
			case CMD_EMERGENCY_STOP:
				turnout_reset();
 80154b6:	f000 f8a5 	bl	8015604 <turnout_reset>
				break;
 80154ba:	bf00      	nop
 80154bc:	e000      	b.n	80154c0 <turnout_tick+0x80>
				break;
 80154be:	bf00      	nop
	for (;;) {
 80154c0:	e7dc      	b.n	801547c <turnout_tick+0x3c>
	if (cnt%4) return; // half freq
 80154c2:	bf00      	nop
 80154c4:	e000      	b.n	80154c8 <turnout_tick+0x88>
		if (rc) break;
 80154c6:	bf00      	nop
			}
		} else {
			// error
		}
	}
}
 80154c8:	3720      	adds	r7, #32
 80154ca:	46bd      	mov	sp, r7
 80154cc:	bd80      	pop	{r7, pc}
 80154ce:	bf00      	nop
 80154d0:	2000022c 	.word	0x2000022c
 80154d4:	20005304 	.word	0x20005304

080154d8 <process_turnout_cmd>:
		const turnout_config_t *aconf = get_turnout_cnf(_idx); \
		turnout_vars_t         *avars = &tvars[_idx];


static void process_turnout_cmd(msg_64_t *m, _UNUSED_ uint32_t tick, _UNUSED_ uint32_t dt)
{
 80154d8:	b580      	push	{r7, lr}
 80154da:	b08a      	sub	sp, #40	; 0x28
 80154dc:	af02      	add	r7, sp, #8
 80154de:	60f8      	str	r0, [r7, #12]
 80154e0:	60b9      	str	r1, [r7, #8]
 80154e2:	607a      	str	r2, [r7, #4]
	uint8_t tidx = m->to & 0x07;
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	781b      	ldrb	r3, [r3, #0]
 80154e8:	f003 0307 	and.w	r3, r3, #7
 80154ec:	77fb      	strb	r3, [r7, #31]
	USE_TURNOUT(tidx)
 80154ee:	7ffb      	ldrb	r3, [r7, #31]
 80154f0:	4618      	mov	r0, r3
 80154f2:	f000 fb9d 	bl	8015c30 <get_turnout_cnf>
 80154f6:	61b8      	str	r0, [r7, #24]
 80154f8:	7ffb      	ldrb	r3, [r7, #31]
 80154fa:	005b      	lsls	r3, r3, #1
 80154fc:	4a3a      	ldr	r2, [pc, #232]	; (80155e8 <process_turnout_cmd+0x110>)
 80154fe:	4413      	add	r3, r2
 8015500:	617b      	str	r3, [r7, #20]
	if (!aconf || !avars) {
 8015502:	69bb      	ldr	r3, [r7, #24]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d002      	beq.n	801550e <process_turnout_cmd+0x36>
 8015508:	697b      	ldr	r3, [r7, #20]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d105      	bne.n	801551a <process_turnout_cmd+0x42>
		turnout_error(ERR_BAD_PARAM, "bad idx");
 801550e:	4937      	ldr	r1, [pc, #220]	; (80155ec <process_turnout_cmd+0x114>)
 8015510:	f06f 0001 	mvn.w	r0, #1
 8015514:	f7ff ff5c 	bl	80153d0 <turnout_error>
		return;
 8015518:	e063      	b.n	80155e2 <process_turnout_cmd+0x10a>
	}
	debug_info('A', 0, "CMD", tidx, m->cmd, avars->value);
 801551a:	7ffa      	ldrb	r2, [r7, #31]
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	789b      	ldrb	r3, [r3, #2]
 8015520:	4619      	mov	r1, r3
 8015522:	697b      	ldr	r3, [r7, #20]
 8015524:	f993 3000 	ldrsb.w	r3, [r3]
 8015528:	9301      	str	r3, [sp, #4]
 801552a:	9100      	str	r1, [sp, #0]
 801552c:	4613      	mov	r3, r2
 801552e:	4a30      	ldr	r2, [pc, #192]	; (80155f0 <process_turnout_cmd+0x118>)
 8015530:	2100      	movs	r1, #0
 8015532:	2041      	movs	r0, #65	; 0x41
 8015534:	f7ff ff5b 	bl	80153ee <debug_info>
#ifndef TRAIN_SIMU
	if (!aconf->cmd_port) return;
 8015538:	69bb      	ldr	r3, [r7, #24]
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d04f      	beq.n	80155e0 <process_turnout_cmd+0x108>
#endif
	switch (m->cmd) {
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	789b      	ldrb	r3, [r3, #2]
 8015544:	2b31      	cmp	r3, #49	; 0x31
 8015546:	d002      	beq.n	801554e <process_turnout_cmd+0x76>
 8015548:	2b32      	cmp	r3, #50	; 0x32
 801554a:	d020      	beq.n	801558e <process_turnout_cmd+0xb6>
 801554c:	e03f      	b.n	80155ce <process_turnout_cmd+0xf6>
	case CMD_TURNOUT_A:
		itm_debug2(DBG_TURNOUT, "TA", tidx, avars->value);
 801554e:	7ffa      	ldrb	r2, [r7, #31]
 8015550:	697b      	ldr	r3, [r7, #20]
 8015552:	f993 3000 	ldrsb.w	r3, [r3]
 8015556:	4927      	ldr	r1, [pc, #156]	; (80155f4 <process_turnout_cmd+0x11c>)
 8015558:	f44f 7000 	mov.w	r0, #512	; 0x200
 801555c:	f7ff ff1c 	bl	8015398 <itm_debug2>
		avars->value = -1;
 8015560:	697b      	ldr	r3, [r7, #20]
 8015562:	22ff      	movs	r2, #255	; 0xff
 8015564:	701a      	strb	r2, [r3, #0]
#ifndef TRAIN_SIMU
	    HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_RESET);
 8015566:	69bb      	ldr	r3, [r7, #24]
 8015568:	6818      	ldr	r0, [r3, #0]
 801556a:	69bb      	ldr	r3, [r7, #24]
 801556c:	889b      	ldrh	r3, [r3, #4]
 801556e:	2200      	movs	r2, #0
 8015570:	4619      	mov	r1, r3
 8015572:	f7ed fe4f 	bl	8003214 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_RESET);
 8015576:	69bb      	ldr	r3, [r7, #24]
 8015578:	6818      	ldr	r0, [r3, #0]
 801557a:	69bb      	ldr	r3, [r7, #24]
 801557c:	88db      	ldrh	r3, [r3, #6]
 801557e:	2200      	movs	r2, #0
 8015580:	4619      	mov	r1, r3
 8015582:	f7ed fe47 	bl	8003214 <HAL_GPIO_WritePin>
#endif
		avars->st = ST_SETA;
 8015586:	697b      	ldr	r3, [r7, #20]
 8015588:	2201      	movs	r2, #1
 801558a:	705a      	strb	r2, [r3, #1]
		break;
 801558c:	e029      	b.n	80155e2 <process_turnout_cmd+0x10a>
	case CMD_TURNOUT_B:
		itm_debug2(DBG_TURNOUT, "TB", tidx, avars->value);
 801558e:	7ffa      	ldrb	r2, [r7, #31]
 8015590:	697b      	ldr	r3, [r7, #20]
 8015592:	f993 3000 	ldrsb.w	r3, [r3]
 8015596:	4918      	ldr	r1, [pc, #96]	; (80155f8 <process_turnout_cmd+0x120>)
 8015598:	f44f 7000 	mov.w	r0, #512	; 0x200
 801559c:	f7ff fefc 	bl	8015398 <itm_debug2>
		avars->value = -1;
 80155a0:	697b      	ldr	r3, [r7, #20]
 80155a2:	22ff      	movs	r2, #255	; 0xff
 80155a4:	701a      	strb	r2, [r3, #0]
#ifndef TRAIN_SIMU
	    HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_RESET);
 80155a6:	69bb      	ldr	r3, [r7, #24]
 80155a8:	6818      	ldr	r0, [r3, #0]
 80155aa:	69bb      	ldr	r3, [r7, #24]
 80155ac:	889b      	ldrh	r3, [r3, #4]
 80155ae:	2200      	movs	r2, #0
 80155b0:	4619      	mov	r1, r3
 80155b2:	f7ed fe2f 	bl	8003214 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_RESET);
 80155b6:	69bb      	ldr	r3, [r7, #24]
 80155b8:	6818      	ldr	r0, [r3, #0]
 80155ba:	69bb      	ldr	r3, [r7, #24]
 80155bc:	88db      	ldrh	r3, [r3, #6]
 80155be:	2200      	movs	r2, #0
 80155c0:	4619      	mov	r1, r3
 80155c2:	f7ed fe27 	bl	8003214 <HAL_GPIO_WritePin>
#endif
		avars->st = ST_SETB;
 80155c6:	697b      	ldr	r3, [r7, #20]
 80155c8:	2203      	movs	r2, #3
 80155ca:	705a      	strb	r2, [r3, #1]
		break;
 80155cc:	e009      	b.n	80155e2 <process_turnout_cmd+0x10a>
	default:
		itm_debug1(DBG_ERR|DBG_TURNOUT, "inv cmd", m->cmd);
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	789b      	ldrb	r3, [r3, #2]
 80155d2:	461a      	mov	r2, r3
 80155d4:	4909      	ldr	r1, [pc, #36]	; (80155fc <process_turnout_cmd+0x124>)
 80155d6:	480a      	ldr	r0, [pc, #40]	; (8015600 <process_turnout_cmd+0x128>)
 80155d8:	f7ff fec4 	bl	8015364 <itm_debug1>
		break;
 80155dc:	bf00      	nop
 80155de:	e000      	b.n	80155e2 <process_turnout_cmd+0x10a>
	if (!aconf->cmd_port) return;
 80155e0:	bf00      	nop
	}
}
 80155e2:	3720      	adds	r7, #32
 80155e4:	46bd      	mov	sp, r7
 80155e6:	bd80      	pop	{r7, pc}
 80155e8:	200052f4 	.word	0x200052f4
 80155ec:	080194e4 	.word	0x080194e4
 80155f0:	080194ec 	.word	0x080194ec
 80155f4:	080194f0 	.word	0x080194f0
 80155f8:	080194f4 	.word	0x080194f4
 80155fc:	080194f8 	.word	0x080194f8
 8015600:	80000200 	.word	0x80000200

08015604 <turnout_reset>:


static void turnout_reset(void)
{
 8015604:	b580      	push	{r7, lr}
 8015606:	b086      	sub	sp, #24
 8015608:	af02      	add	r7, sp, #8
	for (int tidx=0; tidx<NUM_LOCAL_TURNOUTS; tidx++) {
 801560a:	2300      	movs	r3, #0
 801560c:	60fb      	str	r3, [r7, #12]
 801560e:	e044      	b.n	801569a <turnout_reset+0x96>
		USE_TURNOUT(tidx) 	// aconf avars
 8015610:	68f8      	ldr	r0, [r7, #12]
 8015612:	f000 fb0d 	bl	8015c30 <get_turnout_cnf>
 8015616:	60b8      	str	r0, [r7, #8]
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	005b      	lsls	r3, r3, #1
 801561c:	4a23      	ldr	r2, [pc, #140]	; (80156ac <turnout_reset+0xa8>)
 801561e:	4413      	add	r3, r2
 8015620:	607b      	str	r3, [r7, #4]
		memset(avars, 0, sizeof(*avars));
 8015622:	2202      	movs	r2, #2
 8015624:	2100      	movs	r1, #0
 8015626:	6878      	ldr	r0, [r7, #4]
 8015628:	f003 fb45 	bl	8018cb6 <memset>
		avars->value = 0;
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	2200      	movs	r2, #0
 8015630:	701a      	strb	r2, [r3, #0]
		avars->st = ST_IDLE;
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	2200      	movs	r2, #0
 8015636:	705a      	strb	r2, [r3, #1]
		if (!aconf) {
 8015638:	68bb      	ldr	r3, [r7, #8]
 801563a:	2b00      	cmp	r3, #0
 801563c:	d106      	bne.n	801564c <turnout_reset+0x48>
			itm_debug1(DBG_TURNOUT, "tn skip", tidx);
 801563e:	68fa      	ldr	r2, [r7, #12]
 8015640:	491b      	ldr	r1, [pc, #108]	; (80156b0 <turnout_reset+0xac>)
 8015642:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015646:	f7ff fe8d 	bl	8015364 <itm_debug1>
			continue;
 801564a:	e023      	b.n	8015694 <turnout_reset+0x90>
		}
#ifndef TRAIN_SIMU
		if (!aconf->cmd_port) return;
 801564c:	68bb      	ldr	r3, [r7, #8]
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	2b00      	cmp	r3, #0
 8015652:	d026      	beq.n	80156a2 <turnout_reset+0x9e>

		HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_RESET);
 8015654:	68bb      	ldr	r3, [r7, #8]
 8015656:	6818      	ldr	r0, [r3, #0]
 8015658:	68bb      	ldr	r3, [r7, #8]
 801565a:	889b      	ldrh	r3, [r3, #4]
 801565c:	2200      	movs	r2, #0
 801565e:	4619      	mov	r1, r3
 8015660:	f7ed fdd8 	bl	8003214 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_RESET);
 8015664:	68bb      	ldr	r3, [r7, #8]
 8015666:	6818      	ldr	r0, [r3, #0]
 8015668:	68bb      	ldr	r3, [r7, #8]
 801566a:	88db      	ldrh	r3, [r3, #6]
 801566c:	2200      	movs	r2, #0
 801566e:	4619      	mov	r1, r3
 8015670:	f7ed fdd0 	bl	8003214 <HAL_GPIO_WritePin>
#endif
		itm_debug1(DBG_TURNOUT, "A/RESET", tidx);
 8015674:	68fa      	ldr	r2, [r7, #12]
 8015676:	490f      	ldr	r1, [pc, #60]	; (80156b4 <turnout_reset+0xb0>)
 8015678:	f44f 7000 	mov.w	r0, #512	; 0x200
 801567c:	f7ff fe72 	bl	8015364 <itm_debug1>
		debug_info('A', 0, "RESET", 0, 0,0);
 8015680:	2300      	movs	r3, #0
 8015682:	9301      	str	r3, [sp, #4]
 8015684:	2300      	movs	r3, #0
 8015686:	9300      	str	r3, [sp, #0]
 8015688:	2300      	movs	r3, #0
 801568a:	4a0b      	ldr	r2, [pc, #44]	; (80156b8 <turnout_reset+0xb4>)
 801568c:	2100      	movs	r1, #0
 801568e:	2041      	movs	r0, #65	; 0x41
 8015690:	f7ff fead 	bl	80153ee <debug_info>
	for (int tidx=0; tidx<NUM_LOCAL_TURNOUTS; tidx++) {
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	3301      	adds	r3, #1
 8015698:	60fb      	str	r3, [r7, #12]
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	2b07      	cmp	r3, #7
 801569e:	ddb7      	ble.n	8015610 <turnout_reset+0xc>
 80156a0:	e000      	b.n	80156a4 <turnout_reset+0xa0>
		if (!aconf->cmd_port) return;
 80156a2:	bf00      	nop
		(void)aconf; // unused
	}
}
 80156a4:	3710      	adds	r7, #16
 80156a6:	46bd      	mov	sp, r7
 80156a8:	bd80      	pop	{r7, pc}
 80156aa:	bf00      	nop
 80156ac:	200052f4 	.word	0x200052f4
 80156b0:	08019500 	.word	0x08019500
 80156b4:	08019508 	.word	0x08019508
 80156b8:	08019510 	.word	0x08019510

080156bc <process_turnout_timers>:




static void process_turnout_timers(_UNUSED_ uint32_t tick, _UNUSED_ uint32_t dt)
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b088      	sub	sp, #32
 80156c0:	af02      	add	r7, sp, #8
 80156c2:	6078      	str	r0, [r7, #4]
 80156c4:	6039      	str	r1, [r7, #0]
	for (int i=0; i<NUM_LOCAL_TURNOUTS; i++) {
 80156c6:	2300      	movs	r3, #0
 80156c8:	617b      	str	r3, [r7, #20]
 80156ca:	e0a2      	b.n	8015812 <process_turnout_timers+0x156>
		USE_TURNOUT(i)		// aconf , avars
 80156cc:	6978      	ldr	r0, [r7, #20]
 80156ce:	f000 faaf 	bl	8015c30 <get_turnout_cnf>
 80156d2:	6138      	str	r0, [r7, #16]
 80156d4:	697b      	ldr	r3, [r7, #20]
 80156d6:	005b      	lsls	r3, r3, #1
 80156d8:	4a52      	ldr	r2, [pc, #328]	; (8015824 <process_turnout_timers+0x168>)
 80156da:	4413      	add	r3, r2
 80156dc:	60fb      	str	r3, [r7, #12]
#ifndef TRAIN_SIMU
        if (!aconf->cmd_port) continue;
 80156de:	693b      	ldr	r3, [r7, #16]
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	f000 808f 	beq.w	8015806 <process_turnout_timers+0x14a>
#endif
		switch (avars->st) {
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	785b      	ldrb	r3, [r3, #1]
 80156ec:	2b04      	cmp	r3, #4
 80156ee:	d87d      	bhi.n	80157ec <process_turnout_timers+0x130>
 80156f0:	a201      	add	r2, pc, #4	; (adr r2, 80156f8 <process_turnout_timers+0x3c>)
 80156f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156f6:	bf00      	nop
 80156f8:	0801580b 	.word	0x0801580b
 80156fc:	0801570d 	.word	0x0801570d
 8015700:	0801577d 	.word	0x0801577d
 8015704:	08015745 	.word	0x08015745
 8015708:	080157b5 	.word	0x080157b5
		case ST_IDLE:
			break;
		case ST_SETA:
#ifndef TRAIN_SIMU
			HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_SET);
 801570c:	693b      	ldr	r3, [r7, #16]
 801570e:	6818      	ldr	r0, [r3, #0]
 8015710:	693b      	ldr	r3, [r7, #16]
 8015712:	889b      	ldrh	r3, [r3, #4]
 8015714:	2201      	movs	r2, #1
 8015716:	4619      	mov	r1, r3
 8015718:	f7ed fd7c 	bl	8003214 <HAL_GPIO_WritePin>
#else
			(void)aconf; // unused in SIMU
#endif
			avars->st = ST_RESETA;
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	2202      	movs	r2, #2
 8015720:	705a      	strb	r2, [r3, #1]
			itm_debug1(DBG_TURNOUT, "A/SETA", i);
 8015722:	697a      	ldr	r2, [r7, #20]
 8015724:	4940      	ldr	r1, [pc, #256]	; (8015828 <process_turnout_timers+0x16c>)
 8015726:	f44f 7000 	mov.w	r0, #512	; 0x200
 801572a:	f7ff fe1b 	bl	8015364 <itm_debug1>
			debug_info('A', 0, "A0/SETA", 0, 0,0);
 801572e:	2300      	movs	r3, #0
 8015730:	9301      	str	r3, [sp, #4]
 8015732:	2300      	movs	r3, #0
 8015734:	9300      	str	r3, [sp, #0]
 8015736:	2300      	movs	r3, #0
 8015738:	4a3c      	ldr	r2, [pc, #240]	; (801582c <process_turnout_timers+0x170>)
 801573a:	2100      	movs	r1, #0
 801573c:	2041      	movs	r0, #65	; 0x41
 801573e:	f7ff fe56 	bl	80153ee <debug_info>
			break;
 8015742:	e063      	b.n	801580c <process_turnout_timers+0x150>
		case ST_SETB:
#ifndef TRAIN_SIMU
			HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_SET);
 8015744:	693b      	ldr	r3, [r7, #16]
 8015746:	6818      	ldr	r0, [r3, #0]
 8015748:	693b      	ldr	r3, [r7, #16]
 801574a:	88db      	ldrh	r3, [r3, #6]
 801574c:	2201      	movs	r2, #1
 801574e:	4619      	mov	r1, r3
 8015750:	f7ed fd60 	bl	8003214 <HAL_GPIO_WritePin>
#endif
			avars->st = ST_RESETB;
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	2204      	movs	r2, #4
 8015758:	705a      	strb	r2, [r3, #1]
			itm_debug1(DBG_TURNOUT, "A/SETB", i);
 801575a:	697a      	ldr	r2, [r7, #20]
 801575c:	4934      	ldr	r1, [pc, #208]	; (8015830 <process_turnout_timers+0x174>)
 801575e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015762:	f7ff fdff 	bl	8015364 <itm_debug1>
			debug_info('A', 0, "A0/SETB", 0, 0,0);
 8015766:	2300      	movs	r3, #0
 8015768:	9301      	str	r3, [sp, #4]
 801576a:	2300      	movs	r3, #0
 801576c:	9300      	str	r3, [sp, #0]
 801576e:	2300      	movs	r3, #0
 8015770:	4a30      	ldr	r2, [pc, #192]	; (8015834 <process_turnout_timers+0x178>)
 8015772:	2100      	movs	r1, #0
 8015774:	2041      	movs	r0, #65	; 0x41
 8015776:	f7ff fe3a 	bl	80153ee <debug_info>
			break;
 801577a:	e047      	b.n	801580c <process_turnout_timers+0x150>
		case ST_RESETA:
#ifndef TRAIN_SIMU
			HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_RESET);
 801577c:	693b      	ldr	r3, [r7, #16]
 801577e:	6818      	ldr	r0, [r3, #0]
 8015780:	693b      	ldr	r3, [r7, #16]
 8015782:	889b      	ldrh	r3, [r3, #4]
 8015784:	2200      	movs	r2, #0
 8015786:	4619      	mov	r1, r3
 8015788:	f7ed fd44 	bl	8003214 <HAL_GPIO_WritePin>
#endif
			avars->st = ST_IDLE;
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	2200      	movs	r2, #0
 8015790:	705a      	strb	r2, [r3, #1]
			itm_debug1(DBG_TURNOUT, "A/RESETA", i);
 8015792:	697a      	ldr	r2, [r7, #20]
 8015794:	4928      	ldr	r1, [pc, #160]	; (8015838 <process_turnout_timers+0x17c>)
 8015796:	f44f 7000 	mov.w	r0, #512	; 0x200
 801579a:	f7ff fde3 	bl	8015364 <itm_debug1>
			debug_info('A', 0, "A0/RESETA", 0, 0,0);
 801579e:	2300      	movs	r3, #0
 80157a0:	9301      	str	r3, [sp, #4]
 80157a2:	2300      	movs	r3, #0
 80157a4:	9300      	str	r3, [sp, #0]
 80157a6:	2300      	movs	r3, #0
 80157a8:	4a24      	ldr	r2, [pc, #144]	; (801583c <process_turnout_timers+0x180>)
 80157aa:	2100      	movs	r1, #0
 80157ac:	2041      	movs	r0, #65	; 0x41
 80157ae:	f7ff fe1e 	bl	80153ee <debug_info>
			break;
 80157b2:	e02b      	b.n	801580c <process_turnout_timers+0x150>
		case ST_RESETB:
#ifndef TRAIN_SIMU
			HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_RESET);
 80157b4:	693b      	ldr	r3, [r7, #16]
 80157b6:	6818      	ldr	r0, [r3, #0]
 80157b8:	693b      	ldr	r3, [r7, #16]
 80157ba:	88db      	ldrh	r3, [r3, #6]
 80157bc:	2200      	movs	r2, #0
 80157be:	4619      	mov	r1, r3
 80157c0:	f7ed fd28 	bl	8003214 <HAL_GPIO_WritePin>
#endif
			avars->st = ST_IDLE;
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	2200      	movs	r2, #0
 80157c8:	705a      	strb	r2, [r3, #1]
			itm_debug1(DBG_TURNOUT, "A/RESETB", i);
 80157ca:	697a      	ldr	r2, [r7, #20]
 80157cc:	491c      	ldr	r1, [pc, #112]	; (8015840 <process_turnout_timers+0x184>)
 80157ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80157d2:	f7ff fdc7 	bl	8015364 <itm_debug1>
			debug_info('A', 0, "A0/RESETB", 0, 0,0);
 80157d6:	2300      	movs	r3, #0
 80157d8:	9301      	str	r3, [sp, #4]
 80157da:	2300      	movs	r3, #0
 80157dc:	9300      	str	r3, [sp, #0]
 80157de:	2300      	movs	r3, #0
 80157e0:	4a18      	ldr	r2, [pc, #96]	; (8015844 <process_turnout_timers+0x188>)
 80157e2:	2100      	movs	r1, #0
 80157e4:	2041      	movs	r0, #65	; 0x41
 80157e6:	f7ff fe02 	bl	80153ee <debug_info>
			break;
 80157ea:	e00f      	b.n	801580c <process_turnout_timers+0x150>
			HAL_GPIO_TogglePin(aconf->cmd_port, aconf->pinB);
#endif
			break;
			 */
		default:
			itm_debug1(DBG_TURNOUT|DBG_ERR, "bad state", avars->st);
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	785b      	ldrb	r3, [r3, #1]
 80157f0:	461a      	mov	r2, r3
 80157f2:	4915      	ldr	r1, [pc, #84]	; (8015848 <process_turnout_timers+0x18c>)
 80157f4:	4815      	ldr	r0, [pc, #84]	; (801584c <process_turnout_timers+0x190>)
 80157f6:	f7ff fdb5 	bl	8015364 <itm_debug1>
			turnout_error(ERR_BAD_STATE, "bad state");
 80157fa:	4913      	ldr	r1, [pc, #76]	; (8015848 <process_turnout_timers+0x18c>)
 80157fc:	f06f 0008 	mvn.w	r0, #8
 8015800:	f7ff fde6 	bl	80153d0 <turnout_error>
			break;
 8015804:	e002      	b.n	801580c <process_turnout_timers+0x150>
        if (!aconf->cmd_port) continue;
 8015806:	bf00      	nop
 8015808:	e000      	b.n	801580c <process_turnout_timers+0x150>
			break;
 801580a:	bf00      	nop
	for (int i=0; i<NUM_LOCAL_TURNOUTS; i++) {
 801580c:	697b      	ldr	r3, [r7, #20]
 801580e:	3301      	adds	r3, #1
 8015810:	617b      	str	r3, [r7, #20]
 8015812:	697b      	ldr	r3, [r7, #20]
 8015814:	2b07      	cmp	r3, #7
 8015816:	f77f af59 	ble.w	80156cc <process_turnout_timers+0x10>
		}
	}
}
 801581a:	bf00      	nop
 801581c:	3718      	adds	r7, #24
 801581e:	46bd      	mov	sp, r7
 8015820:	bd80      	pop	{r7, pc}
 8015822:	bf00      	nop
 8015824:	200052f4 	.word	0x200052f4
 8015828:	08019518 	.word	0x08019518
 801582c:	08019520 	.word	0x08019520
 8015830:	08019528 	.word	0x08019528
 8015834:	08019530 	.word	0x08019530
 8015838:	08019538 	.word	0x08019538
 801583c:	08019544 	.word	0x08019544
 8015840:	08019550 	.word	0x08019550
 8015844:	0801955c 	.word	0x0801955c
 8015848:	08019568 	.word	0x08019568
 801584c:	80000200 	.word	0x80000200

08015850 <itm_debug1>:
//void _itm_debug1(const char *msg, int v);
//void _itm_debug2(const char *msg, int v1, int v2);
void _itm_debug3(const char *msg, int v1, int v2, int v3, int n);

static inline void itm_debug1(uint32_t f, const char *msg, int v)
{
 8015850:	b580      	push	{r7, lr}
 8015852:	b086      	sub	sp, #24
 8015854:	af02      	add	r7, sp, #8
 8015856:	60f8      	str	r0, [r7, #12]
 8015858:	60b9      	str	r1, [r7, #8]
 801585a:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 801585c:	4b08      	ldr	r3, [pc, #32]	; (8015880 <itm_debug1+0x30>)
 801585e:	681a      	ldr	r2, [r3, #0]
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	4013      	ands	r3, r2
 8015864:	2b00      	cmp	r3, #0
 8015866:	d007      	beq.n	8015878 <itm_debug1+0x28>
 8015868:	2301      	movs	r3, #1
 801586a:	9300      	str	r3, [sp, #0]
 801586c:	2300      	movs	r3, #0
 801586e:	2200      	movs	r2, #0
 8015870:	6879      	ldr	r1, [r7, #4]
 8015872:	68b8      	ldr	r0, [r7, #8]
 8015874:	f002 fffe 	bl	8018874 <_itm_debug3>
}
 8015878:	bf00      	nop
 801587a:	3710      	adds	r7, #16
 801587c:	46bd      	mov	sp, r7
 801587e:	bd80      	pop	{r7, pc}
 8015880:	20000574 	.word	0x20000574

08015884 <trainctl_error>:




int trainctl_error(_UNUSED_ char l, int code, _UNUSED_ const char *msg)
{
 8015884:	b580      	push	{r7, lr}
 8015886:	b088      	sub	sp, #32
 8015888:	af02      	add	r7, sp, #8
 801588a:	4603      	mov	r3, r0
 801588c:	60b9      	str	r1, [r7, #8]
 801588e:	607a      	str	r2, [r7, #4]
 8015890:	73fb      	strb	r3, [r7, #15]
	int16_t c = code;
 8015892:	68bb      	ldr	r3, [r7, #8]
 8015894:	b21b      	sxth	r3, r3
 8015896:	82fb      	strh	r3, [r7, #22]
	// add debug msg or notification here
	if (c >=0) c=-1;
 8015898:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801589c:	2b00      	cmp	r3, #0
 801589e:	db02      	blt.n	80158a6 <trainctl_error+0x22>
 80158a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80158a4:	82fb      	strh	r3, [r7, #22]
	trainctl_notif('G', 0, 'E', (void *)&c, sizeof(c));
 80158a6:	f107 0216 	add.w	r2, r7, #22
 80158aa:	2302      	movs	r3, #2
 80158ac:	9300      	str	r3, [sp, #0]
 80158ae:	4613      	mov	r3, r2
 80158b0:	2245      	movs	r2, #69	; 0x45
 80158b2:	2100      	movs	r1, #0
 80158b4:	2047      	movs	r0, #71	; 0x47
 80158b6:	f000 fe7d 	bl	80165b4 <trainctl_notif>
	return code;
 80158ba:	68bb      	ldr	r3, [r7, #8]
}
 80158bc:	4618      	mov	r0, r3
 80158be:	3718      	adds	r7, #24
 80158c0:	46bd      	mov	sp, r7
 80158c2:	bd80      	pop	{r7, pc}

080158c4 <long_isr>:
}



void long_isr(uint32_t dur)
{
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b082      	sub	sp, #8
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]
	itm_debug1(DBG_ERR, "long isr", dur);
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	461a      	mov	r2, r3
 80158d0:	4904      	ldr	r1, [pc, #16]	; (80158e4 <long_isr+0x20>)
 80158d2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80158d6:	f7ff ffbb 	bl	8015850 <itm_debug1>
	//for (int i=0; i<100; i++) {
	//	itm_debug1(DBG_ERR, "micro", GetCurrentMicro());
	//}
}
 80158da:	bf00      	nop
 80158dc:	3708      	adds	r7, #8
 80158de:	46bd      	mov	sp, r7
 80158e0:	bd80      	pop	{r7, pc}
 80158e2:	bf00      	nop
 80158e4:	08019574 	.word	0x08019574

080158e8 <GetCycleCount64>:
 */
volatile uint64_t last_cycle_count_64 = 0;

// Call at least every 2^32 cycles (every 59.6 seconds @ 72 MHz).
uint64_t GetCycleCount64(void)
{
 80158e8:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80158ec:	b085      	sub	sp, #20
 80158ee:	af00      	add	r7, sp, #0
#ifdef TRAIN_SIMU
    return 0;
#else
  uint32_t primask;
  asm volatile ("mrs %0, PRIMASK" : "=r"(primask));
 80158f0:	f3ef 8310 	mrs	r3, PRIMASK
 80158f4:	60fb      	str	r3, [r7, #12]
  asm volatile ("cpsid i");  // Disable interrupts.
 80158f6:	b672      	cpsid	i
  int64_t r = last_cycle_count_64;
 80158f8:	4b12      	ldr	r3, [pc, #72]	; (8015944 <GetCycleCount64+0x5c>)
 80158fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80158fe:	e9c7 3400 	strd	r3, r4, [r7]
  r += DWT->CYCCNT - (uint32_t)(r);
 8015902:	4b11      	ldr	r3, [pc, #68]	; (8015948 <GetCycleCount64+0x60>)
 8015904:	685a      	ldr	r2, [r3, #4]
 8015906:	683b      	ldr	r3, [r7, #0]
 8015908:	1ad3      	subs	r3, r2, r3
 801590a:	469b      	mov	fp, r3
 801590c:	f04f 0c00 	mov.w	ip, #0
 8015910:	e9d7 1200 	ldrd	r1, r2, [r7]
 8015914:	eb1b 0301 	adds.w	r3, fp, r1
 8015918:	eb4c 0402 	adc.w	r4, ip, r2
 801591c:	e9c7 3400 	strd	r3, r4, [r7]
  last_cycle_count_64 = r;
 8015920:	e9d7 3400 	ldrd	r3, r4, [r7]
 8015924:	4a07      	ldr	r2, [pc, #28]	; (8015944 <GetCycleCount64+0x5c>)
 8015926:	e9c2 3400 	strd	r3, r4, [r2]
  asm volatile ("msr PRIMASK, %0" : : "r"(primask));  // Restore interrupts.
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	f383 8810 	msr	PRIMASK, r3
  return r;
 8015930:	e9d7 3400 	ldrd	r3, r4, [r7]
#endif
}
 8015934:	4618      	mov	r0, r3
 8015936:	4621      	mov	r1, r4
 8015938:	3714      	adds	r7, #20
 801593a:	46bd      	mov	sp, r7
 801593c:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8015940:	4770      	bx	lr
 8015942:	bf00      	nop
 8015944:	20005308 	.word	0x20005308
 8015948:	e0001000 	.word	0xe0001000

0801594c <startCycleCounter>:

void startCycleCounter(void)
{
 801594c:	b480      	push	{r7}
 801594e:	af00      	add	r7, sp, #0
#ifndef TRAIN_SIMU
	DWT->CYCCNT |= DWT_CTRL_CYCCNTENA_Msk;  // Set bit 0.
 8015950:	4b05      	ldr	r3, [pc, #20]	; (8015968 <startCycleCounter+0x1c>)
 8015952:	685b      	ldr	r3, [r3, #4]
 8015954:	4a04      	ldr	r2, [pc, #16]	; (8015968 <startCycleCounter+0x1c>)
 8015956:	f043 0301 	orr.w	r3, r3, #1
 801595a:	6053      	str	r3, [r2, #4]
#endif
}
 801595c:	bf00      	nop
 801595e:	46bd      	mov	sp, r7
 8015960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015964:	4770      	bx	lr
 8015966:	bf00      	nop
 8015968:	e0001000 	.word	0xe0001000

0801596c <get_param_def>:
#include <stddef.h>
#include <string.h>
#include "param.h"

static param_t *get_param_def(const param_t *rgpar, const char *n)
{
 801596c:	b580      	push	{r7, lr}
 801596e:	b084      	sub	sp, #16
 8015970:	af00      	add	r7, sp, #0
 8015972:	6078      	str	r0, [r7, #4]
 8015974:	6039      	str	r1, [r7, #0]
	for (param_t *p = (param_t*) rgpar; p->name; p++) {
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	60fb      	str	r3, [r7, #12]
 801597a:	e00d      	b.n	8015998 <get_param_def+0x2c>
		if (!strcmp(p->name, n)) return p;
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	6839      	ldr	r1, [r7, #0]
 8015982:	4618      	mov	r0, r3
 8015984:	f7ea fc24 	bl	80001d0 <strcmp>
 8015988:	4603      	mov	r3, r0
 801598a:	2b00      	cmp	r3, #0
 801598c:	d101      	bne.n	8015992 <get_param_def+0x26>
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	e007      	b.n	80159a2 <get_param_def+0x36>
	for (param_t *p = (param_t*) rgpar; p->name; p++) {
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	3324      	adds	r3, #36	; 0x24
 8015996:	60fb      	str	r3, [r7, #12]
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d1ed      	bne.n	801597c <get_param_def+0x10>
	}
	return NULL;
 80159a0:	2300      	movs	r3, #0
}
 80159a2:	4618      	mov	r0, r3
 80159a4:	3710      	adds	r7, #16
 80159a6:	46bd      	mov	sp, r7
 80159a8:	bd80      	pop	{r7, pc}

080159aa <param_get_value>:

int param_get_value(const param_t *params, void *ptr, const char *name, int32_t *pvalue, int32_t *pdef, int32_t *pmin, int32_t *pmax)
{
 80159aa:	b580      	push	{r7, lr}
 80159ac:	b088      	sub	sp, #32
 80159ae:	af00      	add	r7, sp, #0
 80159b0:	60f8      	str	r0, [r7, #12]
 80159b2:	60b9      	str	r1, [r7, #8]
 80159b4:	607a      	str	r2, [r7, #4]
 80159b6:	603b      	str	r3, [r7, #0]
	param_t *prm = get_param_def(params, name);
 80159b8:	6879      	ldr	r1, [r7, #4]
 80159ba:	68f8      	ldr	r0, [r7, #12]
 80159bc:	f7ff ffd6 	bl	801596c <get_param_def>
 80159c0:	6178      	str	r0, [r7, #20]
	if (!prm) {
 80159c2:	697b      	ldr	r3, [r7, #20]
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d101      	bne.n	80159cc <param_get_value+0x22>
		return 10;
 80159c8:	230a      	movs	r3, #10
 80159ca:	e05c      	b.n	8015a86 <param_get_value+0xdc>
	}
	if (pmin) *pmin = prm->min;
 80159cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d003      	beq.n	80159da <param_get_value+0x30>
 80159d2:	697b      	ldr	r3, [r7, #20]
 80159d4:	699a      	ldr	r2, [r3, #24]
 80159d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159d8:	601a      	str	r2, [r3, #0]
	if (pmax) *pmax = prm->max;
 80159da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d003      	beq.n	80159e8 <param_get_value+0x3e>
 80159e0:	697b      	ldr	r3, [r7, #20]
 80159e2:	69da      	ldr	r2, [r3, #28]
 80159e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159e6:	601a      	str	r2, [r3, #0]
	if (pdef) *pdef = prm->def;
 80159e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d003      	beq.n	80159f6 <param_get_value+0x4c>
 80159ee:	697b      	ldr	r3, [r7, #20]
 80159f0:	6a1a      	ldr	r2, [r3, #32]
 80159f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159f4:	601a      	str	r2, [r3, #0]
	if (pvalue) {
 80159f6:	683b      	ldr	r3, [r7, #0]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d043      	beq.n	8015a84 <param_get_value+0xda>
		if (prm->getter) {
 80159fc:	697b      	ldr	r3, [r7, #20]
 80159fe:	68db      	ldr	r3, [r3, #12]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d007      	beq.n	8015a14 <param_get_value+0x6a>
			*pvalue = prm->getter(prm);
 8015a04:	697b      	ldr	r3, [r7, #20]
 8015a06:	68db      	ldr	r3, [r3, #12]
 8015a08:	6978      	ldr	r0, [r7, #20]
 8015a0a:	4798      	blx	r3
 8015a0c:	4602      	mov	r2, r0
 8015a0e:	683b      	ldr	r3, [r7, #0]
 8015a10:	601a      	str	r2, [r3, #0]
 8015a12:	e037      	b.n	8015a84 <param_get_value+0xda>
		} else {
			uint8_t *p = ptr;
 8015a14:	68bb      	ldr	r3, [r7, #8]
 8015a16:	61fb      	str	r3, [r7, #28]
			if (prm->ptr) p = prm->ptr;
 8015a18:	697b      	ldr	r3, [r7, #20]
 8015a1a:	685b      	ldr	r3, [r3, #4]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d002      	beq.n	8015a26 <param_get_value+0x7c>
 8015a20:	697b      	ldr	r3, [r7, #20]
 8015a22:	685b      	ldr	r3, [r3, #4]
 8015a24:	61fb      	str	r3, [r7, #28]
			p += prm->offset;
 8015a26:	697b      	ldr	r3, [r7, #20]
 8015a28:	689b      	ldr	r3, [r3, #8]
 8015a2a:	461a      	mov	r2, r3
 8015a2c:	69fb      	ldr	r3, [r7, #28]
 8015a2e:	4413      	add	r3, r2
 8015a30:	61fb      	str	r3, [r7, #28]
			if (!p) return 11;
 8015a32:	69fb      	ldr	r3, [r7, #28]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d101      	bne.n	8015a3c <param_get_value+0x92>
 8015a38:	230b      	movs	r3, #11
 8015a3a:	e024      	b.n	8015a86 <param_get_value+0xdc>
			if ((int)p<0x100) return 12; // probably an error if low ptr
 8015a3c:	69fb      	ldr	r3, [r7, #28]
 8015a3e:	2bff      	cmp	r3, #255	; 0xff
 8015a40:	dc01      	bgt.n	8015a46 <param_get_value+0x9c>
 8015a42:	230c      	movs	r3, #12
 8015a44:	e01f      	b.n	8015a86 <param_get_value+0xdc>

			int8_t v8; int16_t v16; int32_t v32;
			switch (prm->size) {
 8015a46:	697b      	ldr	r3, [r7, #20]
 8015a48:	695b      	ldr	r3, [r3, #20]
 8015a4a:	2b02      	cmp	r3, #2
 8015a4c:	d00a      	beq.n	8015a64 <param_get_value+0xba>
 8015a4e:	2b04      	cmp	r3, #4
 8015a50:	d00f      	beq.n	8015a72 <param_get_value+0xc8>
 8015a52:	2b01      	cmp	r3, #1
 8015a54:	d111      	bne.n	8015a7a <param_get_value+0xd0>
			case 1:
				v8 = *((int8_t *)p);
 8015a56:	69fb      	ldr	r3, [r7, #28]
 8015a58:	781b      	ldrb	r3, [r3, #0]
 8015a5a:	747b      	strb	r3, [r7, #17]
				v32 = (int32_t)v8;
 8015a5c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8015a60:	61bb      	str	r3, [r7, #24]
				break;
 8015a62:	e00c      	b.n	8015a7e <param_get_value+0xd4>
			case 2:
				v16 = *((int16_t *)p);
 8015a64:	69fb      	ldr	r3, [r7, #28]
 8015a66:	881b      	ldrh	r3, [r3, #0]
 8015a68:	827b      	strh	r3, [r7, #18]
				v32 = (int32_t)v16;
 8015a6a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015a6e:	61bb      	str	r3, [r7, #24]
				break;
 8015a70:	e005      	b.n	8015a7e <param_get_value+0xd4>
			case 4:
				v32 = *((int32_t *)p);
 8015a72:	69fb      	ldr	r3, [r7, #28]
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	61bb      	str	r3, [r7, #24]
				break;
 8015a78:	e001      	b.n	8015a7e <param_get_value+0xd4>
			default:
				return 12;
 8015a7a:	230c      	movs	r3, #12
 8015a7c:	e003      	b.n	8015a86 <param_get_value+0xdc>
			}
			*pvalue = v32;
 8015a7e:	683b      	ldr	r3, [r7, #0]
 8015a80:	69ba      	ldr	r2, [r7, #24]
 8015a82:	601a      	str	r2, [r3, #0]
		}
	}
	return 0;
 8015a84:	2300      	movs	r3, #0
}
 8015a86:	4618      	mov	r0, r3
 8015a88:	3720      	adds	r7, #32
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	bd80      	pop	{r7, pc}

08015a8e <param_set_value>:
int param_set_value(const param_t *params, void *ptr, const char *name, int32_t value)
{
 8015a8e:	b580      	push	{r7, lr}
 8015a90:	b088      	sub	sp, #32
 8015a92:	af00      	add	r7, sp, #0
 8015a94:	60f8      	str	r0, [r7, #12]
 8015a96:	60b9      	str	r1, [r7, #8]
 8015a98:	607a      	str	r2, [r7, #4]
 8015a9a:	603b      	str	r3, [r7, #0]
	param_t *prm = get_param_def(params, name);
 8015a9c:	6879      	ldr	r1, [r7, #4]
 8015a9e:	68f8      	ldr	r0, [r7, #12]
 8015aa0:	f7ff ff64 	bl	801596c <get_param_def>
 8015aa4:	61b8      	str	r0, [r7, #24]
	if (!prm) {
 8015aa6:	69bb      	ldr	r3, [r7, #24]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d101      	bne.n	8015ab0 <param_set_value+0x22>
		return 10;
 8015aac:	230a      	movs	r3, #10
 8015aae:	e03f      	b.n	8015b30 <param_set_value+0xa2>
	}
	if (prm->setter) {
 8015ab0:	69bb      	ldr	r3, [r7, #24]
 8015ab2:	691b      	ldr	r3, [r3, #16]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d005      	beq.n	8015ac4 <param_set_value+0x36>
		//if ((1)) return 42;
		prm->setter(prm, value);
 8015ab8:	69bb      	ldr	r3, [r7, #24]
 8015aba:	691b      	ldr	r3, [r3, #16]
 8015abc:	6839      	ldr	r1, [r7, #0]
 8015abe:	69b8      	ldr	r0, [r7, #24]
 8015ac0:	4798      	blx	r3
 8015ac2:	e034      	b.n	8015b2e <param_set_value+0xa0>
	} else {
		uint8_t *p = ptr;
 8015ac4:	68bb      	ldr	r3, [r7, #8]
 8015ac6:	61fb      	str	r3, [r7, #28]
		if (prm->ptr) p = prm->ptr;
 8015ac8:	69bb      	ldr	r3, [r7, #24]
 8015aca:	685b      	ldr	r3, [r3, #4]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d002      	beq.n	8015ad6 <param_set_value+0x48>
 8015ad0:	69bb      	ldr	r3, [r7, #24]
 8015ad2:	685b      	ldr	r3, [r3, #4]
 8015ad4:	61fb      	str	r3, [r7, #28]
		p += prm->offset;
 8015ad6:	69bb      	ldr	r3, [r7, #24]
 8015ad8:	689b      	ldr	r3, [r3, #8]
 8015ada:	461a      	mov	r2, r3
 8015adc:	69fb      	ldr	r3, [r7, #28]
 8015ade:	4413      	add	r3, r2
 8015ae0:	61fb      	str	r3, [r7, #28]
		if (!p) return 11;
 8015ae2:	69fb      	ldr	r3, [r7, #28]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d101      	bne.n	8015aec <param_set_value+0x5e>
 8015ae8:	230b      	movs	r3, #11
 8015aea:	e021      	b.n	8015b30 <param_set_value+0xa2>
		if ((int)p<0x100) return 12; // probably an error if low ptr
 8015aec:	69fb      	ldr	r3, [r7, #28]
 8015aee:	2bff      	cmp	r3, #255	; 0xff
 8015af0:	dc01      	bgt.n	8015af6 <param_set_value+0x68>
 8015af2:	230c      	movs	r3, #12
 8015af4:	e01c      	b.n	8015b30 <param_set_value+0xa2>

		int8_t v8; int16_t v16; int32_t v32;
		v32 = value;
 8015af6:	683b      	ldr	r3, [r7, #0]
 8015af8:	617b      	str	r3, [r7, #20]
		switch (prm->size) {
 8015afa:	69bb      	ldr	r3, [r7, #24]
 8015afc:	695b      	ldr	r3, [r3, #20]
 8015afe:	2b02      	cmp	r3, #2
 8015b00:	d009      	beq.n	8015b16 <param_set_value+0x88>
 8015b02:	2b04      	cmp	r3, #4
 8015b04:	d00d      	beq.n	8015b22 <param_set_value+0x94>
 8015b06:	2b01      	cmp	r3, #1
 8015b08:	d10f      	bne.n	8015b2a <param_set_value+0x9c>
		case 1:
			v8 = (int8_t) v32;
 8015b0a:	697b      	ldr	r3, [r7, #20]
 8015b0c:	747b      	strb	r3, [r7, #17]
			*((int8_t *)p) = v8;
 8015b0e:	69fb      	ldr	r3, [r7, #28]
 8015b10:	7c7a      	ldrb	r2, [r7, #17]
 8015b12:	701a      	strb	r2, [r3, #0]
			break;
 8015b14:	e00b      	b.n	8015b2e <param_set_value+0xa0>
		case 2:
			v16 = (int16_t) v32;
 8015b16:	697b      	ldr	r3, [r7, #20]
 8015b18:	827b      	strh	r3, [r7, #18]
			*((int16_t *)p) = v16;
 8015b1a:	69fb      	ldr	r3, [r7, #28]
 8015b1c:	8a7a      	ldrh	r2, [r7, #18]
 8015b1e:	801a      	strh	r2, [r3, #0]
			break;
 8015b20:	e005      	b.n	8015b2e <param_set_value+0xa0>
		case 4:
			*((int32_t *)p) = v32;
 8015b22:	69fb      	ldr	r3, [r7, #28]
 8015b24:	697a      	ldr	r2, [r7, #20]
 8015b26:	601a      	str	r2, [r3, #0]
			break;
 8015b28:	e001      	b.n	8015b2e <param_set_value+0xa0>
		default:
			return 12;
 8015b2a:	230c      	movs	r3, #12
 8015b2c:	e000      	b.n	8015b30 <param_set_value+0xa2>
		}
	}
	return 0;
 8015b2e:	2300      	movs	r3, #0
}
 8015b30:	4618      	mov	r0, r3
 8015b32:	3720      	adds	r7, #32
 8015b34:	46bd      	mov	sp, r7
 8015b36:	bd80      	pop	{r7, pc}

08015b38 <itm_debug1>:
{
 8015b38:	b580      	push	{r7, lr}
 8015b3a:	b086      	sub	sp, #24
 8015b3c:	af02      	add	r7, sp, #8
 8015b3e:	60f8      	str	r0, [r7, #12]
 8015b40:	60b9      	str	r1, [r7, #8]
 8015b42:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8015b44:	4b08      	ldr	r3, [pc, #32]	; (8015b68 <itm_debug1+0x30>)
 8015b46:	681a      	ldr	r2, [r3, #0]
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	4013      	ands	r3, r2
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d007      	beq.n	8015b60 <itm_debug1+0x28>
 8015b50:	2301      	movs	r3, #1
 8015b52:	9300      	str	r3, [sp, #0]
 8015b54:	2300      	movs	r3, #0
 8015b56:	2200      	movs	r2, #0
 8015b58:	6879      	ldr	r1, [r7, #4]
 8015b5a:	68b8      	ldr	r0, [r7, #8]
 8015b5c:	f002 fe8a 	bl	8018874 <_itm_debug3>
}
 8015b60:	bf00      	nop
 8015b62:	3710      	adds	r7, #16
 8015b64:	46bd      	mov	sp, r7
 8015b66:	bd80      	pop	{r7, pc}
 8015b68:	20000574 	.word	0x20000574

08015b6c <config_error>:
{
	return trainctl_error('A', code, msg);
}

static inline void *config_error(int code, const char *msg)
{
 8015b6c:	b580      	push	{r7, lr}
 8015b6e:	b082      	sub	sp, #8
 8015b70:	af00      	add	r7, sp, #0
 8015b72:	6078      	str	r0, [r7, #4]
 8015b74:	6039      	str	r1, [r7, #0]
	itm_debug1(DBG_CONFIG, msg, code);
 8015b76:	687a      	ldr	r2, [r7, #4]
 8015b78:	6839      	ldr	r1, [r7, #0]
 8015b7a:	2080      	movs	r0, #128	; 0x80
 8015b7c:	f7ff ffdc 	bl	8015b38 <itm_debug1>
	trainctl_error('G', code, msg);
 8015b80:	683a      	ldr	r2, [r7, #0]
 8015b82:	6879      	ldr	r1, [r7, #4]
 8015b84:	2047      	movs	r0, #71	; 0x47
 8015b86:	f7ff fe7d 	bl	8015884 <trainctl_error>
	return NULL;
 8015b8a:	2300      	movs	r3, #0
}
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	3708      	adds	r7, #8
 8015b90:	46bd      	mov	sp, r7
 8015b92:	bd80      	pop	{r7, pc}

08015b94 <get_canton_cnf>:
        //static turnout_vars_t TurnoutVars[NUM_TURNOUTS];

static int setup_done = 1;

const canton_config_t *get_canton_cnf(int idx)
{
 8015b94:	b580      	push	{r7, lr}
 8015b96:	b082      	sub	sp, #8
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	6078      	str	r0, [r7, #4]
	if (!setup_done) return config_error(ERR_SETUP_KO, "railconfig_setup_default not called");
 8015b9c:	4b0e      	ldr	r3, [pc, #56]	; (8015bd8 <get_canton_cnf+0x44>)
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d106      	bne.n	8015bb2 <get_canton_cnf+0x1e>
 8015ba4:	490d      	ldr	r1, [pc, #52]	; (8015bdc <get_canton_cnf+0x48>)
 8015ba6:	f06f 0009 	mvn.w	r0, #9
 8015baa:	f7ff ffdf 	bl	8015b6c <config_error>
 8015bae:	4603      	mov	r3, r0
 8015bb0:	e00e      	b.n	8015bd0 <get_canton_cnf+0x3c>
	if ((idx<0) || (idx>= NUM_CANTONS)) return NULL;
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	db02      	blt.n	8015bbe <get_canton_cnf+0x2a>
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	2b07      	cmp	r3, #7
 8015bbc:	dd01      	ble.n	8015bc2 <get_canton_cnf+0x2e>
 8015bbe:	2300      	movs	r3, #0
 8015bc0:	e006      	b.n	8015bd0 <get_canton_cnf+0x3c>
	return &Cantons[idx];
 8015bc2:	687a      	ldr	r2, [r7, #4]
 8015bc4:	4613      	mov	r3, r2
 8015bc6:	005b      	lsls	r3, r3, #1
 8015bc8:	4413      	add	r3, r2
 8015bca:	011b      	lsls	r3, r3, #4
 8015bcc:	4a04      	ldr	r2, [pc, #16]	; (8015be0 <get_canton_cnf+0x4c>)
 8015bce:	4413      	add	r3, r2
}
 8015bd0:	4618      	mov	r0, r3
 8015bd2:	3708      	adds	r7, #8
 8015bd4:	46bd      	mov	sp, r7
 8015bd6:	bd80      	pop	{r7, pc}
 8015bd8:	200004b0 	.word	0x200004b0
 8015bdc:	08019580 	.word	0x08019580
 8015be0:	20000230 	.word	0x20000230

08015be4 <get_train_cnf>:
	if ((idx<0) || (idx>= NUM_CANTONS)) return NULL;
	return &BlockCantonsVars[idx];
}
*/
const train_config_t *get_train_cnf(int idx)
{
 8015be4:	b580      	push	{r7, lr}
 8015be6:	b082      	sub	sp, #8
 8015be8:	af00      	add	r7, sp, #0
 8015bea:	6078      	str	r0, [r7, #4]
	if (!setup_done) return config_error(ERR_SETUP_KO, "railconfig_setup_default not called");
 8015bec:	4b0d      	ldr	r3, [pc, #52]	; (8015c24 <get_train_cnf+0x40>)
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d106      	bne.n	8015c02 <get_train_cnf+0x1e>
 8015bf4:	490c      	ldr	r1, [pc, #48]	; (8015c28 <get_train_cnf+0x44>)
 8015bf6:	f06f 0009 	mvn.w	r0, #9
 8015bfa:	f7ff ffb7 	bl	8015b6c <config_error>
 8015bfe:	4603      	mov	r3, r0
 8015c00:	e00b      	b.n	8015c1a <get_train_cnf+0x36>
	if ((idx<0) || (idx>= NUM_TRAINS)) return NULL;
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	db02      	blt.n	8015c0e <get_train_cnf+0x2a>
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	2b07      	cmp	r3, #7
 8015c0c:	dd01      	ble.n	8015c12 <get_train_cnf+0x2e>
 8015c0e:	2300      	movs	r3, #0
 8015c10:	e003      	b.n	8015c1a <get_train_cnf+0x36>
	return &Trains[idx];
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	015b      	lsls	r3, r3, #5
 8015c16:	4a05      	ldr	r2, [pc, #20]	; (8015c2c <get_train_cnf+0x48>)
 8015c18:	4413      	add	r3, r2
}
 8015c1a:	4618      	mov	r0, r3
 8015c1c:	3708      	adds	r7, #8
 8015c1e:	46bd      	mov	sp, r7
 8015c20:	bd80      	pop	{r7, pc}
 8015c22:	bf00      	nop
 8015c24:	200004b0 	.word	0x200004b0
 8015c28:	08019580 	.word	0x08019580
 8015c2c:	200003b0 	.word	0x200003b0

08015c30 <get_turnout_cnf>:
	return &TrainsVars[idx];
}

*/
const turnout_config_t  *get_turnout_cnf(int idx)
{
 8015c30:	b580      	push	{r7, lr}
 8015c32:	b082      	sub	sp, #8
 8015c34:	af00      	add	r7, sp, #0
 8015c36:	6078      	str	r0, [r7, #4]
	if (!setup_done) return config_error(ERR_SETUP_KO, "railconfig_setup_default not called");
 8015c38:	4b0d      	ldr	r3, [pc, #52]	; (8015c70 <get_turnout_cnf+0x40>)
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d106      	bne.n	8015c4e <get_turnout_cnf+0x1e>
 8015c40:	490c      	ldr	r1, [pc, #48]	; (8015c74 <get_turnout_cnf+0x44>)
 8015c42:	f06f 0009 	mvn.w	r0, #9
 8015c46:	f7ff ff91 	bl	8015b6c <config_error>
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	e00b      	b.n	8015c66 <get_turnout_cnf+0x36>
	if ((idx<0) || (idx>= NUM_TURNOUTS)) return NULL;
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	db02      	blt.n	8015c5a <get_turnout_cnf+0x2a>
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	2b07      	cmp	r3, #7
 8015c58:	dd01      	ble.n	8015c5e <get_turnout_cnf+0x2e>
 8015c5a:	2300      	movs	r3, #0
 8015c5c:	e003      	b.n	8015c66 <get_turnout_cnf+0x36>
	return &Turnouts[idx];
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	00db      	lsls	r3, r3, #3
 8015c62:	4a05      	ldr	r2, [pc, #20]	; (8015c78 <get_turnout_cnf+0x48>)
 8015c64:	4413      	add	r3, r2
}
 8015c66:	4618      	mov	r0, r3
 8015c68:	3708      	adds	r7, #8
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	bd80      	pop	{r7, pc}
 8015c6e:	bf00      	nop
 8015c70:	200004b0 	.word	0x200004b0
 8015c74:	08019580 	.word	0x08019580
 8015c78:	0801b414 	.word	0x0801b414

08015c7c <stat_val_get>:
static const int numvalcanton = sizeof(statvalcanton)/sizeof(statvalcanton[0]);



int32_t stat_val_get(int step, int *pdone)
{
 8015c7c:	b480      	push	{r7}
 8015c7e:	b083      	sub	sp, #12
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	6078      	str	r0, [r7, #4]
 8015c84:	6039      	str	r1, [r7, #0]
	*pdone = 1;
 8015c86:	683b      	ldr	r3, [r7, #0]
 8015c88:	2201      	movs	r2, #1
 8015c8a:	601a      	str	r2, [r3, #0]
	return 0;
 8015c8c:	2300      	movs	r3, #0
		train_vars_t *vars = get_train_vars(nt);
		const stat_val_t *sv = &statvaltrain[idx];
		return _getval(vars, sv->off, sv->l);
	}
#endif
}
 8015c8e:	4618      	mov	r0, r3
 8015c90:	370c      	adds	r7, #12
 8015c92:	46bd      	mov	sp, r7
 8015c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c98:	4770      	bx	lr

08015c9a <txframe_send_notif>:
	txframe_send(m, 0);
}


static inline void txframe_send_notif(frame_msg_t *m, int len)
{
 8015c9a:	b580      	push	{r7, lr}
 8015c9c:	b082      	sub	sp, #8
 8015c9e:	af00      	add	r7, sp, #0
 8015ca0:	6078      	str	r0, [r7, #4]
 8015ca2:	6039      	str	r1, [r7, #0]
	m->t = TXFRAME_TYPE_NOTIF;
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	2202      	movs	r2, #2
 8015ca8:	701a      	strb	r2, [r3, #0]
	if (len) m->len = len;
 8015caa:	683b      	ldr	r3, [r7, #0]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d003      	beq.n	8015cb8 <txframe_send_notif+0x1e>
 8015cb0:	683b      	ldr	r3, [r7, #0]
 8015cb2:	b2da      	uxtb	r2, r3
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	705a      	strb	r2, [r3, #1]
	txframe_send(m, 1);
 8015cb8:	2101      	movs	r1, #1
 8015cba:	6878      	ldr	r0, [r7, #4]
 8015cbc:	f002 fbae 	bl	801841c <txframe_send>
}
 8015cc0:	bf00      	nop
 8015cc2:	3708      	adds	r7, #8
 8015cc4:	46bd      	mov	sp, r7
 8015cc6:	bd80      	pop	{r7, pc}

08015cc8 <mqf_read_to_forward_usb>:
#define CMD_POSE_TRIGGERED			0x51

LFMQUEUE_DEF_H(to_forward, msg_64_t)
LFMQUEUE_DEF_H(from_forward, msg_64_t)

LFMQUEUE_DEF_H(to_forward_usb, msg_64_t)
 8015cc8:	b580      	push	{r7, lr}
 8015cca:	b082      	sub	sp, #8
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]
 8015cd0:	6879      	ldr	r1, [r7, #4]
 8015cd2:	4804      	ldr	r0, [pc, #16]	; (8015ce4 <mqf_read_to_forward_usb+0x1c>)
 8015cd4:	f002 ff4e 	bl	8018b74 <mqf_read>
 8015cd8:	4603      	mov	r3, r0
 8015cda:	4618      	mov	r0, r3
 8015cdc:	3708      	adds	r7, #8
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bd80      	pop	{r7, pc}
 8015ce2:	bf00      	nop
 8015ce4:	20000518 	.word	0x20000518

08015ce8 <mqf_write_from_forward_usb>:
LFMQUEUE_DEF_H(from_forward_usb, msg_64_t)
 8015ce8:	b580      	push	{r7, lr}
 8015cea:	b082      	sub	sp, #8
 8015cec:	af00      	add	r7, sp, #0
 8015cee:	6078      	str	r0, [r7, #4]
 8015cf0:	6879      	ldr	r1, [r7, #4]
 8015cf2:	4804      	ldr	r0, [pc, #16]	; (8015d04 <mqf_write_from_forward_usb+0x1c>)
 8015cf4:	f002 fec4 	bl	8018a80 <mqf_write>
 8015cf8:	4603      	mov	r3, r0
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	3708      	adds	r7, #8
 8015cfe:	46bd      	mov	sp, r7
 8015d00:	bd80      	pop	{r7, pc}
 8015d02:	bf00      	nop
 8015d04:	20000524 	.word	0x20000524

08015d08 <_frm_escape>:

#define FRAME_DELIM '|'
#define FRAME_ESC   '\\'

static int _frm_escape(uint8_t *buf, int len, int maxlen)
{
 8015d08:	b480      	push	{r7}
 8015d0a:	b089      	sub	sp, #36	; 0x24
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	60f8      	str	r0, [r7, #12]
 8015d10:	60b9      	str	r1, [r7, #8]
 8015d12:	607a      	str	r2, [r7, #4]
    int ne = 0;
 8015d14:	2300      	movs	r3, #0
 8015d16:	61fb      	str	r3, [r7, #28]
    for (int i=0; i<len; i++) {
 8015d18:	2300      	movs	r3, #0
 8015d1a:	61bb      	str	r3, [r7, #24]
 8015d1c:	e011      	b.n	8015d42 <_frm_escape+0x3a>
        if ((FRAME_ESC==buf[i]) || (FRAME_DELIM==buf[i])) {
 8015d1e:	69bb      	ldr	r3, [r7, #24]
 8015d20:	68fa      	ldr	r2, [r7, #12]
 8015d22:	4413      	add	r3, r2
 8015d24:	781b      	ldrb	r3, [r3, #0]
 8015d26:	2b5c      	cmp	r3, #92	; 0x5c
 8015d28:	d005      	beq.n	8015d36 <_frm_escape+0x2e>
 8015d2a:	69bb      	ldr	r3, [r7, #24]
 8015d2c:	68fa      	ldr	r2, [r7, #12]
 8015d2e:	4413      	add	r3, r2
 8015d30:	781b      	ldrb	r3, [r3, #0]
 8015d32:	2b7c      	cmp	r3, #124	; 0x7c
 8015d34:	d102      	bne.n	8015d3c <_frm_escape+0x34>
            ne++;
 8015d36:	69fb      	ldr	r3, [r7, #28]
 8015d38:	3301      	adds	r3, #1
 8015d3a:	61fb      	str	r3, [r7, #28]
    for (int i=0; i<len; i++) {
 8015d3c:	69bb      	ldr	r3, [r7, #24]
 8015d3e:	3301      	adds	r3, #1
 8015d40:	61bb      	str	r3, [r7, #24]
 8015d42:	69ba      	ldr	r2, [r7, #24]
 8015d44:	68bb      	ldr	r3, [r7, #8]
 8015d46:	429a      	cmp	r2, r3
 8015d48:	dbe9      	blt.n	8015d1e <_frm_escape+0x16>
        }
    }
    int nl = ne+len;
 8015d4a:	69fa      	ldr	r2, [r7, #28]
 8015d4c:	68bb      	ldr	r3, [r7, #8]
 8015d4e:	4413      	add	r3, r2
 8015d50:	613b      	str	r3, [r7, #16]
    if (nl>maxlen) return -1;
 8015d52:	693a      	ldr	r2, [r7, #16]
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	429a      	cmp	r2, r3
 8015d58:	dd02      	ble.n	8015d60 <_frm_escape+0x58>
 8015d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d5e:	e02f      	b.n	8015dc0 <_frm_escape+0xb8>
    for (int i=len-1+ne; i>=0; i--) {
 8015d60:	68bb      	ldr	r3, [r7, #8]
 8015d62:	3b01      	subs	r3, #1
 8015d64:	69fa      	ldr	r2, [r7, #28]
 8015d66:	4413      	add	r3, r2
 8015d68:	617b      	str	r3, [r7, #20]
 8015d6a:	e025      	b.n	8015db8 <_frm_escape+0xb0>
        buf[i] = buf[i-ne];
 8015d6c:	697a      	ldr	r2, [r7, #20]
 8015d6e:	69fb      	ldr	r3, [r7, #28]
 8015d70:	1ad3      	subs	r3, r2, r3
 8015d72:	461a      	mov	r2, r3
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	441a      	add	r2, r3
 8015d78:	697b      	ldr	r3, [r7, #20]
 8015d7a:	68f9      	ldr	r1, [r7, #12]
 8015d7c:	440b      	add	r3, r1
 8015d7e:	7812      	ldrb	r2, [r2, #0]
 8015d80:	701a      	strb	r2, [r3, #0]
        if ((FRAME_ESC==buf[i]) || (FRAME_DELIM==buf[i])) {
 8015d82:	697b      	ldr	r3, [r7, #20]
 8015d84:	68fa      	ldr	r2, [r7, #12]
 8015d86:	4413      	add	r3, r2
 8015d88:	781b      	ldrb	r3, [r3, #0]
 8015d8a:	2b5c      	cmp	r3, #92	; 0x5c
 8015d8c:	d005      	beq.n	8015d9a <_frm_escape+0x92>
 8015d8e:	697b      	ldr	r3, [r7, #20]
 8015d90:	68fa      	ldr	r2, [r7, #12]
 8015d92:	4413      	add	r3, r2
 8015d94:	781b      	ldrb	r3, [r3, #0]
 8015d96:	2b7c      	cmp	r3, #124	; 0x7c
 8015d98:	d10b      	bne.n	8015db2 <_frm_escape+0xaa>
            buf[i-1]=FRAME_ESC;
 8015d9a:	697b      	ldr	r3, [r7, #20]
 8015d9c:	3b01      	subs	r3, #1
 8015d9e:	68fa      	ldr	r2, [r7, #12]
 8015da0:	4413      	add	r3, r2
 8015da2:	225c      	movs	r2, #92	; 0x5c
 8015da4:	701a      	strb	r2, [r3, #0]
            ne--;
 8015da6:	69fb      	ldr	r3, [r7, #28]
 8015da8:	3b01      	subs	r3, #1
 8015daa:	61fb      	str	r3, [r7, #28]
            i--;
 8015dac:	697b      	ldr	r3, [r7, #20]
 8015dae:	3b01      	subs	r3, #1
 8015db0:	617b      	str	r3, [r7, #20]
    for (int i=len-1+ne; i>=0; i--) {
 8015db2:	697b      	ldr	r3, [r7, #20]
 8015db4:	3b01      	subs	r3, #1
 8015db6:	617b      	str	r3, [r7, #20]
 8015db8:	697b      	ldr	r3, [r7, #20]
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	dad6      	bge.n	8015d6c <_frm_escape+0x64>
        }
    }
    return nl;
 8015dbe:	693b      	ldr	r3, [r7, #16]
}
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	3724      	adds	r7, #36	; 0x24
 8015dc4:	46bd      	mov	sp, r7
 8015dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dca:	4770      	bx	lr

08015dcc <_frm_escape2>:

static int _frm_escape2(uint8_t *buf,  uint8_t *org, int len, int maxlen)
{
 8015dcc:	b480      	push	{r7}
 8015dce:	b087      	sub	sp, #28
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	60f8      	str	r0, [r7, #12]
 8015dd4:	60b9      	str	r1, [r7, #8]
 8015dd6:	607a      	str	r2, [r7, #4]
 8015dd8:	603b      	str	r3, [r7, #0]
    int ne = 0;
 8015dda:	2300      	movs	r3, #0
 8015ddc:	617b      	str	r3, [r7, #20]
    for (int i=0; i<len; i++) {
 8015dde:	2300      	movs	r3, #0
 8015de0:	613b      	str	r3, [r7, #16]
 8015de2:	e02f      	b.n	8015e44 <_frm_escape2+0x78>
    	if (ne>=maxlen) return -1;
 8015de4:	697a      	ldr	r2, [r7, #20]
 8015de6:	683b      	ldr	r3, [r7, #0]
 8015de8:	429a      	cmp	r2, r3
 8015dea:	db02      	blt.n	8015df2 <_frm_escape2+0x26>
 8015dec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015df0:	e02d      	b.n	8015e4e <_frm_escape2+0x82>
        if ((FRAME_ESC==org[i]) || (FRAME_DELIM==org[i])) {
 8015df2:	693b      	ldr	r3, [r7, #16]
 8015df4:	68ba      	ldr	r2, [r7, #8]
 8015df6:	4413      	add	r3, r2
 8015df8:	781b      	ldrb	r3, [r3, #0]
 8015dfa:	2b5c      	cmp	r3, #92	; 0x5c
 8015dfc:	d005      	beq.n	8015e0a <_frm_escape2+0x3e>
 8015dfe:	693b      	ldr	r3, [r7, #16]
 8015e00:	68ba      	ldr	r2, [r7, #8]
 8015e02:	4413      	add	r3, r2
 8015e04:	781b      	ldrb	r3, [r3, #0]
 8015e06:	2b7c      	cmp	r3, #124	; 0x7c
 8015e08:	d10e      	bne.n	8015e28 <_frm_escape2+0x5c>
        	buf[ne++] = FRAME_ESC;
 8015e0a:	697b      	ldr	r3, [r7, #20]
 8015e0c:	1c5a      	adds	r2, r3, #1
 8015e0e:	617a      	str	r2, [r7, #20]
 8015e10:	461a      	mov	r2, r3
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	4413      	add	r3, r2
 8015e16:	225c      	movs	r2, #92	; 0x5c
 8015e18:	701a      	strb	r2, [r3, #0]
        	if (ne>=maxlen) return -1;
 8015e1a:	697a      	ldr	r2, [r7, #20]
 8015e1c:	683b      	ldr	r3, [r7, #0]
 8015e1e:	429a      	cmp	r2, r3
 8015e20:	db02      	blt.n	8015e28 <_frm_escape2+0x5c>
 8015e22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e26:	e012      	b.n	8015e4e <_frm_escape2+0x82>
        }
        buf[ne++] = org[i];
 8015e28:	693b      	ldr	r3, [r7, #16]
 8015e2a:	68ba      	ldr	r2, [r7, #8]
 8015e2c:	441a      	add	r2, r3
 8015e2e:	697b      	ldr	r3, [r7, #20]
 8015e30:	1c59      	adds	r1, r3, #1
 8015e32:	6179      	str	r1, [r7, #20]
 8015e34:	4619      	mov	r1, r3
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	440b      	add	r3, r1
 8015e3a:	7812      	ldrb	r2, [r2, #0]
 8015e3c:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<len; i++) {
 8015e3e:	693b      	ldr	r3, [r7, #16]
 8015e40:	3301      	adds	r3, #1
 8015e42:	613b      	str	r3, [r7, #16]
 8015e44:	693a      	ldr	r2, [r7, #16]
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	429a      	cmp	r2, r3
 8015e4a:	dbcb      	blt.n	8015de4 <_frm_escape2+0x18>
    }
    return ne;
 8015e4c:	697b      	ldr	r3, [r7, #20]
}
 8015e4e:	4618      	mov	r0, r3
 8015e50:	371c      	adds	r7, #28
 8015e52:	46bd      	mov	sp, r7
 8015e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e58:	4770      	bx	lr

08015e5a <frm_escape>:
static int frm_escape(uint8_t *buf, int len, int maxlen)
{
 8015e5a:	b580      	push	{r7, lr}
 8015e5c:	b086      	sub	sp, #24
 8015e5e:	af00      	add	r7, sp, #0
 8015e60:	60f8      	str	r0, [r7, #12]
 8015e62:	60b9      	str	r1, [r7, #8]
 8015e64:	607a      	str	r2, [r7, #4]
	//configASSERT(buf[0]==FRAME_DELIM);
	//configASSERT(buf[len-1]==FRAME_DELIM);
    int l = _frm_escape(buf+1, len-2, maxlen-2);
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	1c58      	adds	r0, r3, #1
 8015e6a:	68bb      	ldr	r3, [r7, #8]
 8015e6c:	1e99      	subs	r1, r3, #2
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	3b02      	subs	r3, #2
 8015e72:	461a      	mov	r2, r3
 8015e74:	f7ff ff48 	bl	8015d08 <_frm_escape>
 8015e78:	6178      	str	r0, [r7, #20]
    if (l<0) return l;
 8015e7a:	697b      	ldr	r3, [r7, #20]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	da01      	bge.n	8015e84 <frm_escape+0x2a>
 8015e80:	697b      	ldr	r3, [r7, #20]
 8015e82:	e007      	b.n	8015e94 <frm_escape+0x3a>
    buf[l+1]=FRAME_DELIM;
 8015e84:	697b      	ldr	r3, [r7, #20]
 8015e86:	3301      	adds	r3, #1
 8015e88:	68fa      	ldr	r2, [r7, #12]
 8015e8a:	4413      	add	r3, r2
 8015e8c:	227c      	movs	r2, #124	; 0x7c
 8015e8e:	701a      	strb	r2, [r3, #0]
    return l+2;
 8015e90:	697b      	ldr	r3, [r7, #20]
 8015e92:	3302      	adds	r3, #2
}
 8015e94:	4618      	mov	r0, r3
 8015e96:	3718      	adds	r7, #24
 8015e98:	46bd      	mov	sp, r7
 8015e9a:	bd80      	pop	{r7, pc}

08015e9c <usbPollQueues>:
		uint8_t *param, int plen, uint8_t *rbuf, int rbuflen, int *prlen);

static void txframe_send_msg64(msg_64_t *msg);

void usbPollQueues(void)
{
 8015e9c:	b580      	push	{r7, lr}
 8015e9e:	b084      	sub	sp, #16
 8015ea0:	af00      	add	r7, sp, #0
    for (;;) {
        msg_64_t m;
        int rc = mqf_read_to_forward_usb(&m);
 8015ea2:	463b      	mov	r3, r7
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	f7ff ff0f 	bl	8015cc8 <mqf_read_to_forward_usb>
 8015eaa:	60f8      	str	r0, [r7, #12]
        if (rc) break;
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d104      	bne.n	8015ebc <usbPollQueues+0x20>
        txframe_send_msg64(&m);
 8015eb2:	463b      	mov	r3, r7
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	f000 fc8d 	bl	80167d4 <txframe_send_msg64>
    for (;;) {
 8015eba:	e7f2      	b.n	8015ea2 <usbPollQueues+0x6>
    }
}
 8015ebc:	bf00      	nop
 8015ebe:	3710      	adds	r7, #16
 8015ec0:	46bd      	mov	sp, r7
 8015ec2:	bd80      	pop	{r7, pc}

08015ec4 <txrx_process_char>:

void txrx_process_char(uint8_t c, uint8_t *respbuf, int *replen)
{
 8015ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ec6:	b08f      	sub	sp, #60	; 0x3c
 8015ec8:	af04      	add	r7, sp, #16
 8015eca:	4603      	mov	r3, r0
 8015ecc:	60b9      	str	r1, [r7, #8]
 8015ece:	607a      	str	r2, [r7, #4]
 8015ed0:	73fb      	strb	r3, [r7, #15]
	int buflen = *replen;
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	623b      	str	r3, [r7, #32]
	*replen = 0;
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	2200      	movs	r2, #0
 8015edc:	601a      	str	r2, [r3, #0]
	if ((c == FRAME_DELIM) && !frm.escape) {
 8015ede:	7bfb      	ldrb	r3, [r7, #15]
 8015ee0:	2b7c      	cmp	r3, #124	; 0x7c
 8015ee2:	f040 8097 	bne.w	8016014 <txrx_process_char+0x150>
 8015ee6:	4b88      	ldr	r3, [pc, #544]	; (8016108 <txrx_process_char+0x244>)
 8015ee8:	781b      	ldrb	r3, [r3, #0]
 8015eea:	f003 0301 	and.w	r3, r3, #1
 8015eee:	b2db      	uxtb	r3, r3
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	f040 808f 	bne.w	8016014 <txrx_process_char+0x150>
		if (0 == frm.state) {
 8015ef6:	4b84      	ldr	r3, [pc, #528]	; (8016108 <txrx_process_char+0x244>)
 8015ef8:	781b      	ldrb	r3, [r3, #0]
 8015efa:	f023 0301 	bic.w	r3, r3, #1
 8015efe:	b2db      	uxtb	r3, r3
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d10b      	bne.n	8015f1c <txrx_process_char+0x58>
			memset(&frm, 0, sizeof(frm));
 8015f04:	2226      	movs	r2, #38	; 0x26
 8015f06:	2100      	movs	r1, #0
 8015f08:	487f      	ldr	r0, [pc, #508]	; (8016108 <txrx_process_char+0x244>)
 8015f0a:	f002 fed4 	bl	8018cb6 <memset>
			frm.state = 1;
 8015f0e:	4a7e      	ldr	r2, [pc, #504]	; (8016108 <txrx_process_char+0x244>)
 8015f10:	7813      	ldrb	r3, [r2, #0]
 8015f12:	2101      	movs	r1, #1
 8015f14:	f361 0347 	bfi	r3, r1, #1, #7
 8015f18:	7013      	strb	r3, [r2, #0]
			return;
 8015f1a:	e0f1      	b.n	8016100 <txrx_process_char+0x23c>
		} else if (5 == frm.state) {
 8015f1c:	4b7a      	ldr	r3, [pc, #488]	; (8016108 <txrx_process_char+0x244>)
 8015f1e:	781b      	ldrb	r3, [r3, #0]
 8015f20:	f023 0301 	bic.w	r3, r3, #1
 8015f24:	b2db      	uxtb	r3, r3
 8015f26:	2b0a      	cmp	r3, #10
 8015f28:	d168      	bne.n	8015ffc <txrx_process_char+0x138>
			frm.state = 0;
 8015f2a:	4a77      	ldr	r2, [pc, #476]	; (8016108 <txrx_process_char+0x244>)
 8015f2c:	7813      	ldrb	r3, [r2, #0]
 8015f2e:	f36f 0347 	bfc	r3, #1, #7
 8015f32:	7013      	strb	r3, [r2, #0]
			frm.escape = 0;
 8015f34:	4a74      	ldr	r2, [pc, #464]	; (8016108 <txrx_process_char+0x244>)
 8015f36:	7813      	ldrb	r3, [r2, #0]
 8015f38:	f36f 0300 	bfc	r3, #0, #1
 8015f3c:	7013      	strb	r3, [r2, #0]
			// process frame
			int i = 0;
 8015f3e:	2300      	movs	r3, #0
 8015f40:	61fb      	str	r3, [r7, #28]
			respbuf[i++] = FRAME_DELIM;
 8015f42:	69fb      	ldr	r3, [r7, #28]
 8015f44:	1c5a      	adds	r2, r3, #1
 8015f46:	61fa      	str	r2, [r7, #28]
 8015f48:	461a      	mov	r2, r3
 8015f4a:	68bb      	ldr	r3, [r7, #8]
 8015f4c:	4413      	add	r3, r2
 8015f4e:	227c      	movs	r2, #124	; 0x7c
 8015f50:	701a      	strb	r2, [r3, #0]
			respbuf[i++] = frm.seqnum;
 8015f52:	69fb      	ldr	r3, [r7, #28]
 8015f54:	1c5a      	adds	r2, r3, #1
 8015f56:	61fa      	str	r2, [r7, #28]
 8015f58:	461a      	mov	r2, r3
 8015f5a:	68bb      	ldr	r3, [r7, #8]
 8015f5c:	4413      	add	r3, r2
 8015f5e:	4a6a      	ldr	r2, [pc, #424]	; (8016108 <txrx_process_char+0x244>)
 8015f60:	7852      	ldrb	r2, [r2, #1]
 8015f62:	701a      	strb	r2, [r3, #0]
			respbuf[i++] = 'R';
 8015f64:	69fb      	ldr	r3, [r7, #28]
 8015f66:	1c5a      	adds	r2, r3, #1
 8015f68:	61fa      	str	r2, [r7, #28]
 8015f6a:	461a      	mov	r2, r3
 8015f6c:	68bb      	ldr	r3, [r7, #8]
 8015f6e:	4413      	add	r3, r2
 8015f70:	2252      	movs	r2, #82	; 0x52
 8015f72:	701a      	strb	r2, [r3, #0]
			int plen = 0;
 8015f74:	2300      	movs	r3, #0
 8015f76:	617b      	str	r3, [r7, #20]
			uint8_t rc = process_frame_cmd(frm.sel, frm.num, frm.cmd, frm.param, frm.pidx, respbuf+i+1, buflen-i-1, &plen);
 8015f78:	4b63      	ldr	r3, [pc, #396]	; (8016108 <txrx_process_char+0x244>)
 8015f7a:	7898      	ldrb	r0, [r3, #2]
 8015f7c:	4b62      	ldr	r3, [pc, #392]	; (8016108 <txrx_process_char+0x244>)
 8015f7e:	78dc      	ldrb	r4, [r3, #3]
 8015f80:	4b61      	ldr	r3, [pc, #388]	; (8016108 <txrx_process_char+0x244>)
 8015f82:	791d      	ldrb	r5, [r3, #4]
 8015f84:	4b60      	ldr	r3, [pc, #384]	; (8016108 <txrx_process_char+0x244>)
 8015f86:	795b      	ldrb	r3, [r3, #5]
 8015f88:	461e      	mov	r6, r3
 8015f8a:	69fb      	ldr	r3, [r7, #28]
 8015f8c:	3301      	adds	r3, #1
 8015f8e:	68ba      	ldr	r2, [r7, #8]
 8015f90:	4413      	add	r3, r2
 8015f92:	6a39      	ldr	r1, [r7, #32]
 8015f94:	69fa      	ldr	r2, [r7, #28]
 8015f96:	1a8a      	subs	r2, r1, r2
 8015f98:	3a01      	subs	r2, #1
 8015f9a:	f107 0114 	add.w	r1, r7, #20
 8015f9e:	9103      	str	r1, [sp, #12]
 8015fa0:	9202      	str	r2, [sp, #8]
 8015fa2:	9301      	str	r3, [sp, #4]
 8015fa4:	9600      	str	r6, [sp, #0]
 8015fa6:	4b59      	ldr	r3, [pc, #356]	; (801610c <txrx_process_char+0x248>)
 8015fa8:	462a      	mov	r2, r5
 8015faa:	4621      	mov	r1, r4
 8015fac:	f000 f8d2 	bl	8016154 <process_frame_cmd>
 8015fb0:	4603      	mov	r3, r0
 8015fb2:	76fb      	strb	r3, [r7, #27]
			respbuf[i++] = rc;
 8015fb4:	69fb      	ldr	r3, [r7, #28]
 8015fb6:	1c5a      	adds	r2, r3, #1
 8015fb8:	61fa      	str	r2, [r7, #28]
 8015fba:	461a      	mov	r2, r3
 8015fbc:	68bb      	ldr	r3, [r7, #8]
 8015fbe:	4413      	add	r3, r2
 8015fc0:	7efa      	ldrb	r2, [r7, #27]
 8015fc2:	701a      	strb	r2, [r3, #0]
			respbuf[i+plen] = FRAME_DELIM;
 8015fc4:	697a      	ldr	r2, [r7, #20]
 8015fc6:	69fb      	ldr	r3, [r7, #28]
 8015fc8:	4413      	add	r3, r2
 8015fca:	461a      	mov	r2, r3
 8015fcc:	68bb      	ldr	r3, [r7, #8]
 8015fce:	4413      	add	r3, r2
 8015fd0:	227c      	movs	r2, #124	; 0x7c
 8015fd2:	701a      	strb	r2, [r3, #0]
			int l = frm_escape(respbuf, i+plen+1, buflen);
 8015fd4:	697a      	ldr	r2, [r7, #20]
 8015fd6:	69fb      	ldr	r3, [r7, #28]
 8015fd8:	4413      	add	r3, r2
 8015fda:	3301      	adds	r3, #1
 8015fdc:	6a3a      	ldr	r2, [r7, #32]
 8015fde:	4619      	mov	r1, r3
 8015fe0:	68b8      	ldr	r0, [r7, #8]
 8015fe2:	f7ff ff3a 	bl	8015e5a <frm_escape>
 8015fe6:	6278      	str	r0, [r7, #36]	; 0x24
			if (l<0) {
 8015fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	da01      	bge.n	8015ff2 <txrx_process_char+0x12e>
				l = 0;
 8015fee:	2300      	movs	r3, #0
 8015ff0:	627b      	str	r3, [r7, #36]	; 0x24
			}
			*replen = l;
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ff6:	601a      	str	r2, [r3, #0]
			/*if ((0)) {
				static frame_msg_t m;
				m.len = 1+ sprintf(m.frm, "frm resp %d\r\n", *replen);
				txframe_send_debug(&m, 0);
			}*/
			return;
 8015ff8:	bf00      	nop
 8015ffa:	e081      	b.n	8016100 <txrx_process_char+0x23c>
		} else {
			// short frame, ignore
			frm.state = 1;
 8015ffc:	4a42      	ldr	r2, [pc, #264]	; (8016108 <txrx_process_char+0x244>)
 8015ffe:	7813      	ldrb	r3, [r2, #0]
 8016000:	2101      	movs	r1, #1
 8016002:	f361 0347 	bfi	r3, r1, #1, #7
 8016006:	7013      	strb	r3, [r2, #0]
			frm.escape = 0;
 8016008:	4a3f      	ldr	r2, [pc, #252]	; (8016108 <txrx_process_char+0x244>)
 801600a:	7813      	ldrb	r3, [r2, #0]
 801600c:	f36f 0300 	bfc	r3, #0, #1
 8016010:	7013      	strb	r3, [r2, #0]
			return;
 8016012:	e075      	b.n	8016100 <txrx_process_char+0x23c>
		}
	}
	if (c==FRAME_ESC && !frm.escape) {
 8016014:	7bfb      	ldrb	r3, [r7, #15]
 8016016:	2b5c      	cmp	r3, #92	; 0x5c
 8016018:	d10c      	bne.n	8016034 <txrx_process_char+0x170>
 801601a:	4b3b      	ldr	r3, [pc, #236]	; (8016108 <txrx_process_char+0x244>)
 801601c:	781b      	ldrb	r3, [r3, #0]
 801601e:	f003 0301 	and.w	r3, r3, #1
 8016022:	b2db      	uxtb	r3, r3
 8016024:	2b00      	cmp	r3, #0
 8016026:	d105      	bne.n	8016034 <txrx_process_char+0x170>
		// state is >0 here
		frm.escape = 1;
 8016028:	4a37      	ldr	r2, [pc, #220]	; (8016108 <txrx_process_char+0x244>)
 801602a:	7813      	ldrb	r3, [r2, #0]
 801602c:	f043 0301 	orr.w	r3, r3, #1
 8016030:	7013      	strb	r3, [r2, #0]
		return;
 8016032:	e065      	b.n	8016100 <txrx_process_char+0x23c>
	}

	//  |sSNCvv...|
	switch (frm.state) {
 8016034:	4b34      	ldr	r3, [pc, #208]	; (8016108 <txrx_process_char+0x244>)
 8016036:	781b      	ldrb	r3, [r3, #0]
 8016038:	f3c3 0346 	ubfx	r3, r3, #1, #7
 801603c:	b2db      	uxtb	r3, r3
 801603e:	3b01      	subs	r3, #1
 8016040:	2b04      	cmp	r3, #4
 8016042:	d80d      	bhi.n	8016060 <txrx_process_char+0x19c>
 8016044:	a201      	add	r2, pc, #4	; (adr r2, 801604c <txrx_process_char+0x188>)
 8016046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801604a:	bf00      	nop
 801604c:	0801606d 	.word	0x0801606d
 8016050:	08016081 	.word	0x08016081
 8016054:	08016095 	.word	0x08016095
 8016058:	080160a9 	.word	0x080160a9
 801605c:	080160bd 	.word	0x080160bd
	default:
		frm.escape = 0;
 8016060:	4a29      	ldr	r2, [pc, #164]	; (8016108 <txrx_process_char+0x244>)
 8016062:	7813      	ldrb	r3, [r2, #0]
 8016064:	f36f 0300 	bfc	r3, #0, #1
 8016068:	7013      	strb	r3, [r2, #0]
		//configAssert(0);
		break;
 801606a:	e044      	b.n	80160f6 <txrx_process_char+0x232>
	case 1:
		frm.seqnum = c;
 801606c:	4a26      	ldr	r2, [pc, #152]	; (8016108 <txrx_process_char+0x244>)
 801606e:	7bfb      	ldrb	r3, [r7, #15]
 8016070:	7053      	strb	r3, [r2, #1]
		frm.state = 2;
 8016072:	4a25      	ldr	r2, [pc, #148]	; (8016108 <txrx_process_char+0x244>)
 8016074:	7813      	ldrb	r3, [r2, #0]
 8016076:	2102      	movs	r1, #2
 8016078:	f361 0347 	bfi	r3, r1, #1, #7
 801607c:	7013      	strb	r3, [r2, #0]
		break;
 801607e:	e03a      	b.n	80160f6 <txrx_process_char+0x232>
	case 2:
		frm.sel = c;
 8016080:	4a21      	ldr	r2, [pc, #132]	; (8016108 <txrx_process_char+0x244>)
 8016082:	7bfb      	ldrb	r3, [r7, #15]
 8016084:	7093      	strb	r3, [r2, #2]
		frm.state = 3;
 8016086:	4a20      	ldr	r2, [pc, #128]	; (8016108 <txrx_process_char+0x244>)
 8016088:	7813      	ldrb	r3, [r2, #0]
 801608a:	2103      	movs	r1, #3
 801608c:	f361 0347 	bfi	r3, r1, #1, #7
 8016090:	7013      	strb	r3, [r2, #0]
		break;
 8016092:	e030      	b.n	80160f6 <txrx_process_char+0x232>
	case 3:
		frm.num = c;
 8016094:	4a1c      	ldr	r2, [pc, #112]	; (8016108 <txrx_process_char+0x244>)
 8016096:	7bfb      	ldrb	r3, [r7, #15]
 8016098:	70d3      	strb	r3, [r2, #3]
		frm.state = 4;
 801609a:	4a1b      	ldr	r2, [pc, #108]	; (8016108 <txrx_process_char+0x244>)
 801609c:	7813      	ldrb	r3, [r2, #0]
 801609e:	2104      	movs	r1, #4
 80160a0:	f361 0347 	bfi	r3, r1, #1, #7
 80160a4:	7013      	strb	r3, [r2, #0]
		break;
 80160a6:	e026      	b.n	80160f6 <txrx_process_char+0x232>
	case 4:
		frm.cmd = c;
 80160a8:	4a17      	ldr	r2, [pc, #92]	; (8016108 <txrx_process_char+0x244>)
 80160aa:	7bfb      	ldrb	r3, [r7, #15]
 80160ac:	7113      	strb	r3, [r2, #4]
		frm.state = 5;
 80160ae:	4a16      	ldr	r2, [pc, #88]	; (8016108 <txrx_process_char+0x244>)
 80160b0:	7813      	ldrb	r3, [r2, #0]
 80160b2:	2105      	movs	r1, #5
 80160b4:	f361 0347 	bfi	r3, r1, #1, #7
 80160b8:	7013      	strb	r3, [r2, #0]
		break;
 80160ba:	e01c      	b.n	80160f6 <txrx_process_char+0x232>
	case 5:
		if (frm.pidx >= MAX_DATA_LEN) {
 80160bc:	4b12      	ldr	r3, [pc, #72]	; (8016108 <txrx_process_char+0x244>)
 80160be:	795b      	ldrb	r3, [r3, #5]
 80160c0:	2b1f      	cmp	r3, #31
 80160c2:	d90a      	bls.n	80160da <txrx_process_char+0x216>
			frm.state = 0;
 80160c4:	4a10      	ldr	r2, [pc, #64]	; (8016108 <txrx_process_char+0x244>)
 80160c6:	7813      	ldrb	r3, [r2, #0]
 80160c8:	f36f 0347 	bfc	r3, #1, #7
 80160cc:	7013      	strb	r3, [r2, #0]
			frm.escape = 0;
 80160ce:	4a0e      	ldr	r2, [pc, #56]	; (8016108 <txrx_process_char+0x244>)
 80160d0:	7813      	ldrb	r3, [r2, #0]
 80160d2:	f36f 0300 	bfc	r3, #0, #1
 80160d6:	7013      	strb	r3, [r2, #0]
			break;
 80160d8:	e00d      	b.n	80160f6 <txrx_process_char+0x232>
		}
		frm.param[frm.pidx] = c;
 80160da:	4b0b      	ldr	r3, [pc, #44]	; (8016108 <txrx_process_char+0x244>)
 80160dc:	795b      	ldrb	r3, [r3, #5]
 80160de:	461a      	mov	r2, r3
 80160e0:	4b09      	ldr	r3, [pc, #36]	; (8016108 <txrx_process_char+0x244>)
 80160e2:	4413      	add	r3, r2
 80160e4:	7bfa      	ldrb	r2, [r7, #15]
 80160e6:	719a      	strb	r2, [r3, #6]
		frm.pidx ++;
 80160e8:	4b07      	ldr	r3, [pc, #28]	; (8016108 <txrx_process_char+0x244>)
 80160ea:	795b      	ldrb	r3, [r3, #5]
 80160ec:	3301      	adds	r3, #1
 80160ee:	b2da      	uxtb	r2, r3
 80160f0:	4b05      	ldr	r3, [pc, #20]	; (8016108 <txrx_process_char+0x244>)
 80160f2:	715a      	strb	r2, [r3, #5]
		break;
 80160f4:	bf00      	nop
	}
        frm.escape = 0;
 80160f6:	4a04      	ldr	r2, [pc, #16]	; (8016108 <txrx_process_char+0x244>)
 80160f8:	7813      	ldrb	r3, [r2, #0]
 80160fa:	f36f 0300 	bfc	r3, #0, #1
 80160fe:	7013      	strb	r3, [r2, #0]
}
 8016100:	372c      	adds	r7, #44	; 0x2c
 8016102:	46bd      	mov	sp, r7
 8016104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016106:	bf00      	nop
 8016108:	20005310 	.word	0x20005310
 801610c:	20005316 	.word	0x20005316

08016110 <param_set_pwm>:



// ---------------------------------------------------------------------------------
static void param_set_pwm(struct param *p, int32_t v) // XXX to be moved away
{
 8016110:	b580      	push	{r7, lr}
 8016112:	b082      	sub	sp, #8
 8016114:	af00      	add	r7, sp, #0
 8016116:	6078      	str	r0, [r7, #4]
 8016118:	6039      	str	r1, [r7, #0]
        set_pwm_freq(v);
 801611a:	6838      	ldr	r0, [r7, #0]
 801611c:	f001 ff2c 	bl	8017f78 <set_pwm_freq>
}
 8016120:	bf00      	nop
 8016122:	3708      	adds	r7, #8
 8016124:	46bd      	mov	sp, r7
 8016126:	bd80      	pop	{r7, pc}

08016128 <param_get_numtrains>:
int32_t (*getter)(struct param *);
	void (*setter)(struct param *, int32_t);
*/

static int32_t param_get_numtrains(param_t *p)
{
 8016128:	b480      	push	{r7}
 801612a:	b083      	sub	sp, #12
 801612c:	af00      	add	r7, sp, #0
 801612e:	6078      	str	r0, [r7, #4]
	return NUM_TRAINS;
 8016130:	2308      	movs	r3, #8
}
 8016132:	4618      	mov	r0, r3
 8016134:	370c      	adds	r7, #12
 8016136:	46bd      	mov	sp, r7
 8016138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801613c:	4770      	bx	lr

0801613e <param_get_numcantons>:

static int32_t param_get_numcantons(param_t *p)
{
 801613e:	b480      	push	{r7}
 8016140:	b083      	sub	sp, #12
 8016142:	af00      	add	r7, sp, #0
 8016144:	6078      	str	r0, [r7, #4]
	return NUM_CANTONS;
 8016146:	2308      	movs	r3, #8
}
 8016148:	4618      	mov	r0, r3
 801614a:	370c      	adds	r7, #12
 801614c:	46bd      	mov	sp, r7
 801614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016152:	4770      	bx	lr

08016154 <process_frame_cmd>:




static uint8_t process_frame_cmd(uint8_t sel, uint8_t num,  uint8_t cmd, uint8_t *param, int plen, uint8_t *rbuf, int rbuflen, int *prlen)
{
 8016154:	b580      	push	{r7, lr}
 8016156:	b094      	sub	sp, #80	; 0x50
 8016158:	af04      	add	r7, sp, #16
 801615a:	603b      	str	r3, [r7, #0]
 801615c:	4603      	mov	r3, r0
 801615e:	71fb      	strb	r3, [r7, #7]
 8016160:	460b      	mov	r3, r1
 8016162:	71bb      	strb	r3, [r7, #6]
 8016164:	4613      	mov	r3, r2
 8016166:	717b      	strb	r3, [r7, #5]
    //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
	int16_t s;
	*prlen = 0;
 8016168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801616a:	2200      	movs	r2, #0
 801616c:	601a      	str	r2, [r3, #0]
	int32_t v,d,min,max;
	int rc=-1;
 801616e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016172:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch(sel) {
 8016174:	79fb      	ldrb	r3, [r7, #7]
 8016176:	3b36      	subs	r3, #54	; 0x36
 8016178:	2b1e      	cmp	r3, #30
 801617a:	f200 81ff 	bhi.w	801657c <process_frame_cmd+0x428>
 801617e:	a201      	add	r2, pc, #4	; (adr r2, 8016184 <process_frame_cmd+0x30>)
 8016180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016184:	08016201 	.word	0x08016201
 8016188:	0801657d 	.word	0x0801657d
 801618c:	0801657d 	.word	0x0801657d
 8016190:	0801657d 	.word	0x0801657d
 8016194:	0801657d 	.word	0x0801657d
 8016198:	0801657d 	.word	0x0801657d
 801619c:	0801657d 	.word	0x0801657d
 80161a0:	0801657d 	.word	0x0801657d
 80161a4:	0801657d 	.word	0x0801657d
 80161a8:	0801657d 	.word	0x0801657d
 80161ac:	0801657d 	.word	0x0801657d
 80161b0:	08016223 	.word	0x08016223
 80161b4:	0801657d 	.word	0x0801657d
 80161b8:	0801657d 	.word	0x0801657d
 80161bc:	0801657d 	.word	0x0801657d
 80161c0:	0801657d 	.word	0x0801657d
 80161c4:	0801657d 	.word	0x0801657d
 80161c8:	08016239 	.word	0x08016239
 80161cc:	0801657d 	.word	0x0801657d
 80161d0:	0801657d 	.word	0x0801657d
 80161d4:	0801657d 	.word	0x0801657d
 80161d8:	0801657d 	.word	0x0801657d
 80161dc:	0801657d 	.word	0x0801657d
 80161e0:	0801657d 	.word	0x0801657d
 80161e4:	0801657d 	.word	0x0801657d
 80161e8:	0801657d 	.word	0x0801657d
 80161ec:	0801657d 	.word	0x0801657d
 80161f0:	0801657d 	.word	0x0801657d
 80161f4:	0801657d 	.word	0x0801657d
 80161f8:	0801657d 	.word	0x0801657d
 80161fc:	0801639d 	.word	0x0801639d
    case '6': {
        msg_64_t m;
        m.to = num;
 8016200:	79bb      	ldrb	r3, [r7, #6]
 8016202:	743b      	strb	r3, [r7, #16]
        m.from = cmd;
 8016204:	797b      	ldrb	r3, [r7, #5]
 8016206:	747b      	strb	r3, [r7, #17]
        memcpy(m.rbytes, param, 6);
 8016208:	683a      	ldr	r2, [r7, #0]
 801620a:	f107 0312 	add.w	r3, r7, #18
 801620e:	6811      	ldr	r1, [r2, #0]
 8016210:	6019      	str	r1, [r3, #0]
 8016212:	8892      	ldrh	r2, [r2, #4]
 8016214:	809a      	strh	r2, [r3, #4]
        mqf_write_from_forward_usb(&m);
 8016216:	f107 0310 	add.w	r3, r7, #16
 801621a:	4618      	mov	r0, r3
 801621c:	f7ff fd64 	bl	8015ce8 <mqf_write_from_forward_usb>
        }
        break;
 8016220:	e1bc      	b.n	801659c <process_frame_cmd+0x448>
	case 'A':
		switch (cmd) {
 8016222:	797b      	ldrb	r3, [r7, #5]
 8016224:	2b57      	cmp	r3, #87	; 0x57
 8016226:	d003      	beq.n	8016230 <process_frame_cmd+0xdc>
 8016228:	2b73      	cmp	r3, #115	; 0x73
 801622a:	d003      	beq.n	8016234 <process_frame_cmd+0xe0>
 801622c:	2b53      	cmp	r3, #83	; 0x53
		case 'S':
			//rc = turnout_cmd(num, 1);
			break;
 801622e:	e002      	b.n	8016236 <process_frame_cmd+0xe2>
		case 's':
			//rc = turnout_cmd(num, -1);
			break;
		case 'W':
			//rc = turnout_test(num);
			break;
 8016230:	bf00      	nop
 8016232:	e1b3      	b.n	801659c <process_frame_cmd+0x448>
			break;
 8016234:	bf00      	nop
		}
		break;
 8016236:	e1b1      	b.n	801659c <process_frame_cmd+0x448>
	case 'G':
		switch (cmd) {
 8016238:	797b      	ldrb	r3, [r7, #5]
 801623a:	3b43      	subs	r3, #67	; 0x43
 801623c:	2b2d      	cmp	r3, #45	; 0x2d
 801623e:	f200 80ab 	bhi.w	8016398 <process_frame_cmd+0x244>
 8016242:	a201      	add	r2, pc, #4	; (adr r2, 8016248 <process_frame_cmd+0xf4>)
 8016244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016248:	08016301 	.word	0x08016301
 801624c:	08016399 	.word	0x08016399
 8016250:	08016399 	.word	0x08016399
 8016254:	08016399 	.word	0x08016399
 8016258:	08016399 	.word	0x08016399
 801625c:	08016399 	.word	0x08016399
 8016260:	08016399 	.word	0x08016399
 8016264:	08016399 	.word	0x08016399
 8016268:	0801630f 	.word	0x0801630f
 801626c:	08016399 	.word	0x08016399
 8016270:	08016399 	.word	0x08016399
 8016274:	08016399 	.word	0x08016399
 8016278:	08016399 	.word	0x08016399
 801627c:	08016373 	.word	0x08016373
 8016280:	08016399 	.word	0x08016399
 8016284:	08016399 	.word	0x08016399
 8016288:	0801630b 	.word	0x0801630b
 801628c:	08016399 	.word	0x08016399
 8016290:	08016399 	.word	0x08016399
 8016294:	08016399 	.word	0x08016399
 8016298:	08016399 	.word	0x08016399
 801629c:	08016399 	.word	0x08016399
 80162a0:	08016399 	.word	0x08016399
 80162a4:	08016399 	.word	0x08016399
 80162a8:	08016399 	.word	0x08016399
 80162ac:	08016399 	.word	0x08016399
 80162b0:	08016399 	.word	0x08016399
 80162b4:	08016399 	.word	0x08016399
 80162b8:	08016399 	.word	0x08016399
 80162bc:	08016399 	.word	0x08016399
 80162c0:	08016399 	.word	0x08016399
 80162c4:	08016399 	.word	0x08016399
 80162c8:	08016399 	.word	0x08016399
 80162cc:	08016399 	.word	0x08016399
 80162d0:	08016399 	.word	0x08016399
 80162d4:	08016399 	.word	0x08016399
 80162d8:	08016399 	.word	0x08016399
 80162dc:	08016399 	.word	0x08016399
 80162e0:	08016399 	.word	0x08016399
 80162e4:	08016399 	.word	0x08016399
 80162e8:	08016399 	.word	0x08016399
 80162ec:	08016399 	.word	0x08016399
 80162f0:	08016399 	.word	0x08016399
 80162f4:	08016399 	.word	0x08016399
 80162f8:	08016399 	.word	0x08016399
 80162fc:	08016313 	.word	0x08016313
		case 'C':
			cli_frame_mode = 0;
 8016300:	4ba9      	ldr	r3, [pc, #676]	; (80165a8 <process_frame_cmd+0x454>)
 8016302:	2200      	movs	r2, #0
 8016304:	701a      	strb	r2, [r3, #0]
			return 0;
 8016306:	2300      	movs	r3, #0
 8016308:	e149      	b.n	801659e <process_frame_cmd+0x44a>
			break;
		case 'S':
			// TODO train_stop_all();
			return 0;
 801630a:	2300      	movs	r3, #0
 801630c:	e147      	b.n	801659e <process_frame_cmd+0x44a>
			break;
		case 'K':
			// TODO calibrate_bemf();
			return 0;
 801630e:	2300      	movs	r3, #0
 8016310:	e145      	b.n	801659e <process_frame_cmd+0x44a>
			break;
		case 'p':
			rc = param_get_value(glob_params, NULL, (char *)param, &v, &d, &min, &max);
 8016312:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8016316:	f107 031c 	add.w	r3, r7, #28
 801631a:	9302      	str	r3, [sp, #8]
 801631c:	f107 0320 	add.w	r3, r7, #32
 8016320:	9301      	str	r3, [sp, #4]
 8016322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016326:	9300      	str	r3, [sp, #0]
 8016328:	4613      	mov	r3, r2
 801632a:	683a      	ldr	r2, [r7, #0]
 801632c:	2100      	movs	r1, #0
 801632e:	489f      	ldr	r0, [pc, #636]	; (80165ac <process_frame_cmd+0x458>)
 8016330:	f7ff fb3b 	bl	80159aa <param_get_value>
 8016334:	63f8      	str	r0, [r7, #60]	; 0x3c
			memcpy(rbuf, &v,   sizeof(int32_t)); rbuf += sizeof(int32_t);
 8016336:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801633a:	601a      	str	r2, [r3, #0]
 801633c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801633e:	3304      	adds	r3, #4
 8016340:	64fb      	str	r3, [r7, #76]	; 0x4c
			memcpy(rbuf, &d,   sizeof(int32_t)); rbuf += sizeof(int32_t);
 8016342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016346:	601a      	str	r2, [r3, #0]
 8016348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801634a:	3304      	adds	r3, #4
 801634c:	64fb      	str	r3, [r7, #76]	; 0x4c
			memcpy(rbuf, &min, sizeof(int32_t)); rbuf += sizeof(int32_t);
 801634e:	6a3a      	ldr	r2, [r7, #32]
 8016350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016352:	601a      	str	r2, [r3, #0]
 8016354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016356:	3304      	adds	r3, #4
 8016358:	64fb      	str	r3, [r7, #76]	; 0x4c
			memcpy(rbuf, &max, sizeof(int32_t)); rbuf += sizeof(int32_t);
 801635a:	69fa      	ldr	r2, [r7, #28]
 801635c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801635e:	601a      	str	r2, [r3, #0]
 8016360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016362:	3304      	adds	r3, #4
 8016364:	64fb      	str	r3, [r7, #76]	; 0x4c
			*prlen = 4*sizeof(int32_t);
 8016366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016368:	2210      	movs	r2, #16
 801636a:	601a      	str	r2, [r3, #0]
			return rc;
 801636c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801636e:	b2db      	uxtb	r3, r3
 8016370:	e115      	b.n	801659e <process_frame_cmd+0x44a>
		case 'P': {
			if (plen < 4+1) return 1;
 8016372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016374:	2b04      	cmp	r3, #4
 8016376:	dc01      	bgt.n	801637c <process_frame_cmd+0x228>
 8016378:	2301      	movs	r3, #1
 801637a:	e110      	b.n	801659e <process_frame_cmd+0x44a>
			int32_t v;
			memcpy(&v, param, sizeof(int32_t));
 801637c:	683b      	ldr	r3, [r7, #0]
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	60fb      	str	r3, [r7, #12]
			int rc = param_set_value(glob_params, NULL, (char *)(param+sizeof(int32_t)), v);
 8016382:	683b      	ldr	r3, [r7, #0]
 8016384:	1d1a      	adds	r2, r3, #4
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	2100      	movs	r1, #0
 801638a:	4888      	ldr	r0, [pc, #544]	; (80165ac <process_frame_cmd+0x458>)
 801638c:	f7ff fb7f 	bl	8015a8e <param_set_value>
 8016390:	6338      	str	r0, [r7, #48]	; 0x30
			return rc;
 8016392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016394:	b2db      	uxtb	r3, r3
 8016396:	e102      	b.n	801659e <process_frame_cmd+0x44a>
		}
		default:
			return 3;
 8016398:	2303      	movs	r3, #3
 801639a:	e100      	b.n	801659e <process_frame_cmd+0x44a>
		}
		break;
	case 'T':
		//if (num == '0') num=0; // XXX hook for test
		//if (num != 0) return 4; // for now
		switch (cmd) {
 801639c:	797b      	ldrb	r3, [r7, #5]
 801639e:	3b41      	subs	r3, #65	; 0x41
 80163a0:	2b39      	cmp	r3, #57	; 0x39
 80163a2:	f200 80e7 	bhi.w	8016574 <process_frame_cmd+0x420>
 80163a6:	a201      	add	r2, pc, #4	; (adr r2, 80163ac <process_frame_cmd+0x258>)
 80163a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163ac:	08016579 	.word	0x08016579
 80163b0:	08016575 	.word	0x08016575
 80163b4:	08016575 	.word	0x08016575
 80163b8:	08016575 	.word	0x08016575
 80163bc:	08016575 	.word	0x08016575
 80163c0:	08016575 	.word	0x08016575
 80163c4:	08016575 	.word	0x08016575
 80163c8:	08016575 	.word	0x08016575
 80163cc:	08016575 	.word	0x08016575
 80163d0:	08016575 	.word	0x08016575
 80163d4:	08016575 	.word	0x08016575
 80163d8:	08016575 	.word	0x08016575
 80163dc:	08016575 	.word	0x08016575
 80163e0:	08016575 	.word	0x08016575
 80163e4:	08016575 	.word	0x08016575
 80163e8:	08016539 	.word	0x08016539
 80163ec:	08016575 	.word	0x08016575
 80163f0:	08016575 	.word	0x08016575
 80163f4:	08016575 	.word	0x08016575
 80163f8:	08016575 	.word	0x08016575
 80163fc:	08016575 	.word	0x08016575
 8016400:	08016495 	.word	0x08016495
 8016404:	08016575 	.word	0x08016575
 8016408:	08016575 	.word	0x08016575
 801640c:	08016575 	.word	0x08016575
 8016410:	08016575 	.word	0x08016575
 8016414:	08016575 	.word	0x08016575
 8016418:	08016575 	.word	0x08016575
 801641c:	08016575 	.word	0x08016575
 8016420:	08016575 	.word	0x08016575
 8016424:	08016575 	.word	0x08016575
 8016428:	08016575 	.word	0x08016575
 801642c:	08016579 	.word	0x08016579
 8016430:	08016575 	.word	0x08016575
 8016434:	08016575 	.word	0x08016575
 8016438:	08016575 	.word	0x08016575
 801643c:	08016575 	.word	0x08016575
 8016440:	08016575 	.word	0x08016575
 8016444:	08016575 	.word	0x08016575
 8016448:	08016575 	.word	0x08016575
 801644c:	08016575 	.word	0x08016575
 8016450:	08016575 	.word	0x08016575
 8016454:	08016575 	.word	0x08016575
 8016458:	08016575 	.word	0x08016575
 801645c:	08016575 	.word	0x08016575
 8016460:	08016575 	.word	0x08016575
 8016464:	08016575 	.word	0x08016575
 8016468:	080164c3 	.word	0x080164c3
 801646c:	08016575 	.word	0x08016575
 8016470:	08016575 	.word	0x08016575
 8016474:	08016575 	.word	0x08016575
 8016478:	08016575 	.word	0x08016575
 801647c:	08016575 	.word	0x08016575
 8016480:	08016575 	.word	0x08016575
 8016484:	08016575 	.word	0x08016575
 8016488:	08016575 	.word	0x08016575
 801648c:	08016575 	.word	0x08016575
 8016490:	080164b9 	.word	0x080164b9
		case 'V':
			if (plen !=2) return 1;
 8016494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016496:	2b02      	cmp	r3, #2
 8016498:	d001      	beq.n	801649e <process_frame_cmd+0x34a>
 801649a:	2301      	movs	r3, #1
 801649c:	e07f      	b.n	801659e <process_frame_cmd+0x44a>
			memcpy(&s, param, sizeof(s));
 801649e:	683b      	ldr	r3, [r7, #0]
 80164a0:	881b      	ldrh	r3, [r3, #0]
 80164a2:	b29b      	uxth	r3, r3
 80164a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		    train_set_target_speed(num, s);
 80164a6:	79bb      	ldrb	r3, [r7, #6]
 80164a8:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80164ac:	4611      	mov	r1, r2
 80164ae:	4618      	mov	r0, r3
 80164b0:	f001 fc04 	bl	8017cbc <train_set_target_speed>
			return 0;
 80164b4:	2300      	movs	r3, #0
 80164b6:	e072      	b.n	801659e <process_frame_cmd+0x44a>
			break;
		case 'a':
			//task_auto_stop_auto();
			break;
		case 'z':
			rc = 0; // TODO train_reset_pos_estimate(num);
 80164b8:	2300      	movs	r3, #0
 80164ba:	63fb      	str	r3, [r7, #60]	; 0x3c
			return rc;
 80164bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80164be:	b2db      	uxtb	r3, r3
 80164c0:	e06d      	b.n	801659e <process_frame_cmd+0x44a>
			break;
		case 'p': {
			const train_config_t *tcnf = get_train_cnf(num);
 80164c2:	79bb      	ldrb	r3, [r7, #6]
 80164c4:	4618      	mov	r0, r3
 80164c6:	f7ff fb8d 	bl	8015be4 <get_train_cnf>
 80164ca:	63b8      	str	r0, [r7, #56]	; 0x38
			if (tcnf) {
 80164cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d02d      	beq.n	801652e <process_frame_cmd+0x3da>
				rc = param_get_value(train_params, (void *)tcnf, (char *)param, &v, &d, &min, &max);
 80164d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80164d6:	f107 031c 	add.w	r3, r7, #28
 80164da:	9302      	str	r3, [sp, #8]
 80164dc:	f107 0320 	add.w	r3, r7, #32
 80164e0:	9301      	str	r3, [sp, #4]
 80164e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80164e6:	9300      	str	r3, [sp, #0]
 80164e8:	4613      	mov	r3, r2
 80164ea:	683a      	ldr	r2, [r7, #0]
 80164ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80164ee:	4830      	ldr	r0, [pc, #192]	; (80165b0 <process_frame_cmd+0x45c>)
 80164f0:	f7ff fa5b 	bl	80159aa <param_get_value>
 80164f4:	63f8      	str	r0, [r7, #60]	; 0x3c
				memcpy(rbuf, &v,   sizeof(int32_t)); rbuf += sizeof(int32_t);
 80164f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80164f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80164fa:	601a      	str	r2, [r3, #0]
 80164fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80164fe:	3304      	adds	r3, #4
 8016500:	64fb      	str	r3, [r7, #76]	; 0x4c
				memcpy(rbuf, &d,   sizeof(int32_t)); rbuf += sizeof(int32_t);
 8016502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016506:	601a      	str	r2, [r3, #0]
 8016508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801650a:	3304      	adds	r3, #4
 801650c:	64fb      	str	r3, [r7, #76]	; 0x4c
				memcpy(rbuf, &min, sizeof(int32_t)); rbuf += sizeof(int32_t);
 801650e:	6a3a      	ldr	r2, [r7, #32]
 8016510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016512:	601a      	str	r2, [r3, #0]
 8016514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016516:	3304      	adds	r3, #4
 8016518:	64fb      	str	r3, [r7, #76]	; 0x4c
				memcpy(rbuf, &max, sizeof(int32_t)); rbuf += sizeof(int32_t);
 801651a:	69fa      	ldr	r2, [r7, #28]
 801651c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801651e:	601a      	str	r2, [r3, #0]
 8016520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016522:	3304      	adds	r3, #4
 8016524:	64fb      	str	r3, [r7, #76]	; 0x4c
				*prlen = 4*sizeof(int32_t);
 8016526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016528:	2210      	movs	r2, #16
 801652a:	601a      	str	r2, [r3, #0]
 801652c:	e001      	b.n	8016532 <process_frame_cmd+0x3de>
			} else {
				rc = 3;
 801652e:	2303      	movs	r3, #3
 8016530:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			return rc;
 8016532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016534:	b2db      	uxtb	r3, r3
 8016536:	e032      	b.n	801659e <process_frame_cmd+0x44a>
		}

		case 'P': {
			if (plen < 4+1) return 1;
 8016538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801653a:	2b04      	cmp	r3, #4
 801653c:	dc01      	bgt.n	8016542 <process_frame_cmd+0x3ee>
 801653e:	2301      	movs	r3, #1
 8016540:	e02d      	b.n	801659e <process_frame_cmd+0x44a>
			const train_config_t *tcnf = get_train_cnf(num);
 8016542:	79bb      	ldrb	r3, [r7, #6]
 8016544:	4618      	mov	r0, r3
 8016546:	f7ff fb4d 	bl	8015be4 <get_train_cnf>
 801654a:	6378      	str	r0, [r7, #52]	; 0x34
			if (tcnf) {
 801654c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801654e:	2b00      	cmp	r3, #0
 8016550:	d00b      	beq.n	801656a <process_frame_cmd+0x416>
				int32_t v;
				memcpy(&v, param, sizeof(int32_t));
 8016552:	683b      	ldr	r3, [r7, #0]
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	60bb      	str	r3, [r7, #8]
			    rc = param_set_value(train_params, (void *)tcnf, (char *)(param+sizeof(int32_t)), v);
 8016558:	683b      	ldr	r3, [r7, #0]
 801655a:	1d1a      	adds	r2, r3, #4
 801655c:	68bb      	ldr	r3, [r7, #8]
 801655e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016560:	4813      	ldr	r0, [pc, #76]	; (80165b0 <process_frame_cmd+0x45c>)
 8016562:	f7ff fa94 	bl	8015a8e <param_set_value>
 8016566:	63f8      	str	r0, [r7, #60]	; 0x3c
 8016568:	e001      	b.n	801656e <process_frame_cmd+0x41a>
			} else {
				rc = 33;
 801656a:	2321      	movs	r3, #33	; 0x21
 801656c:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			return rc;
 801656e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016570:	b2db      	uxtb	r3, r3
 8016572:	e014      	b.n	801659e <process_frame_cmd+0x44a>
		}

		default:
			return 33;
 8016574:	2321      	movs	r3, #33	; 0x21
 8016576:	e012      	b.n	801659e <process_frame_cmd+0x44a>
			break;
 8016578:	bf00      	nop
		}
		break;
 801657a:	e00f      	b.n	801659c <process_frame_cmd+0x448>
	default:
		rbuf[0]=sel;
 801657c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801657e:	79fa      	ldrb	r2, [r7, #7]
 8016580:	701a      	strb	r2, [r3, #0]
		rbuf[1]=num;
 8016582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016584:	3301      	adds	r3, #1
 8016586:	79ba      	ldrb	r2, [r7, #6]
 8016588:	701a      	strb	r2, [r3, #0]
		rbuf[2]=cmd;
 801658a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801658c:	3302      	adds	r3, #2
 801658e:	797a      	ldrb	r2, [r7, #5]
 8016590:	701a      	strb	r2, [r3, #0]
		*prlen = 3;
 8016592:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016594:	2203      	movs	r2, #3
 8016596:	601a      	str	r2, [r3, #0]
		return 5;
 8016598:	2305      	movs	r3, #5
 801659a:	e000      	b.n	801659e <process_frame_cmd+0x44a>
		break;
	}
	return 0;
 801659c:	2300      	movs	r3, #0
}
 801659e:	4618      	mov	r0, r3
 80165a0:	3740      	adds	r7, #64	; 0x40
 80165a2:	46bd      	mov	sp, r7
 80165a4:	bd80      	pop	{r7, pc}
 80165a6:	bf00      	nop
 80165a8:	200004b4 	.word	0x200004b4
 80165ac:	0801b694 	.word	0x0801b694
 80165b0:	0801b454 	.word	0x0801b454

080165b4 <trainctl_notif>:

static int num_trainctl_notif = 0;

void trainctl_notif(uint8_t sel, uint8_t num, uint8_t cmd, uint8_t *dta, int dtalen)
{
 80165b4:	b580      	push	{r7, lr}
 80165b6:	b084      	sub	sp, #16
 80165b8:	af02      	add	r7, sp, #8
 80165ba:	603b      	str	r3, [r7, #0]
 80165bc:	4603      	mov	r3, r0
 80165be:	71fb      	strb	r3, [r7, #7]
 80165c0:	460b      	mov	r3, r1
 80165c2:	71bb      	strb	r3, [r7, #6]
 80165c4:	4613      	mov	r3, r2
 80165c6:	717b      	strb	r3, [r7, #5]
	num_trainctl_notif++;
 80165c8:	4b0a      	ldr	r3, [pc, #40]	; (80165f4 <trainctl_notif+0x40>)
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	3301      	adds	r3, #1
 80165ce:	4a09      	ldr	r2, [pc, #36]	; (80165f4 <trainctl_notif+0x40>)
 80165d0:	6013      	str	r3, [r2, #0]
	if (cli_frame_mode) {
 80165d2:	4b09      	ldr	r3, [pc, #36]	; (80165f8 <trainctl_notif+0x44>)
 80165d4:	781b      	ldrb	r3, [r3, #0]
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d007      	beq.n	80165ea <trainctl_notif+0x36>
		frame_send_notif(sel, num, cmd, dta, dtalen);
 80165da:	797a      	ldrb	r2, [r7, #5]
 80165dc:	79b9      	ldrb	r1, [r7, #6]
 80165de:	79f8      	ldrb	r0, [r7, #7]
 80165e0:	693b      	ldr	r3, [r7, #16]
 80165e2:	9300      	str	r3, [sp, #0]
 80165e4:	683b      	ldr	r3, [r7, #0]
 80165e6:	f000 f891 	bl	801670c <frame_send_notif>
	}
}
 80165ea:	bf00      	nop
 80165ec:	3708      	adds	r7, #8
 80165ee:	46bd      	mov	sp, r7
 80165f0:	bd80      	pop	{r7, pc}
 80165f2:	bf00      	nop
 80165f4:	20005338 	.word	0x20005338
 80165f8:	200004b4 	.word	0x200004b4

080165fc <trainctl_notif2>:

void trainctl_notif2(uint8_t sel, uint8_t num, uint8_t cmd, char *msg, int32_t v1, int32_t v2, int32_t v3)
{
 80165fc:	b580      	push	{r7, lr}
 80165fe:	b086      	sub	sp, #24
 8016600:	af00      	add	r7, sp, #0
 8016602:	603b      	str	r3, [r7, #0]
 8016604:	4603      	mov	r3, r0
 8016606:	71fb      	strb	r3, [r7, #7]
 8016608:	460b      	mov	r3, r1
 801660a:	71bb      	strb	r3, [r7, #6]
 801660c:	4613      	mov	r3, r2
 801660e:	717b      	strb	r3, [r7, #5]
	static frame_msg_t m;
	char *p;
	int i=0;
 8016610:	2300      	movs	r3, #0
 8016612:	617b      	str	r3, [r7, #20]
	m.frm[i++] = '|';
 8016614:	697b      	ldr	r3, [r7, #20]
 8016616:	1c5a      	adds	r2, r3, #1
 8016618:	617a      	str	r2, [r7, #20]
 801661a:	4a3a      	ldr	r2, [pc, #232]	; (8016704 <trainctl_notif2+0x108>)
 801661c:	4413      	add	r3, r2
 801661e:	227c      	movs	r2, #124	; 0x7c
 8016620:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = '_';
 8016622:	697b      	ldr	r3, [r7, #20]
 8016624:	1c5a      	adds	r2, r3, #1
 8016626:	617a      	str	r2, [r7, #20]
 8016628:	4a36      	ldr	r2, [pc, #216]	; (8016704 <trainctl_notif2+0x108>)
 801662a:	4413      	add	r3, r2
 801662c:	225f      	movs	r2, #95	; 0x5f
 801662e:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = 'N';
 8016630:	697b      	ldr	r3, [r7, #20]
 8016632:	1c5a      	adds	r2, r3, #1
 8016634:	617a      	str	r2, [r7, #20]
 8016636:	4a33      	ldr	r2, [pc, #204]	; (8016704 <trainctl_notif2+0x108>)
 8016638:	4413      	add	r3, r2
 801663a:	224e      	movs	r2, #78	; 0x4e
 801663c:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = sel;
 801663e:	697b      	ldr	r3, [r7, #20]
 8016640:	1c5a      	adds	r2, r3, #1
 8016642:	617a      	str	r2, [r7, #20]
 8016644:	4a2f      	ldr	r2, [pc, #188]	; (8016704 <trainctl_notif2+0x108>)
 8016646:	4413      	add	r3, r2
 8016648:	79fa      	ldrb	r2, [r7, #7]
 801664a:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = num;
 801664c:	697b      	ldr	r3, [r7, #20]
 801664e:	1c5a      	adds	r2, r3, #1
 8016650:	617a      	str	r2, [r7, #20]
 8016652:	4a2c      	ldr	r2, [pc, #176]	; (8016704 <trainctl_notif2+0x108>)
 8016654:	4413      	add	r3, r2
 8016656:	79ba      	ldrb	r2, [r7, #6]
 8016658:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = cmd;
 801665a:	697b      	ldr	r3, [r7, #20]
 801665c:	1c5a      	adds	r2, r3, #1
 801665e:	617a      	str	r2, [r7, #20]
 8016660:	4a28      	ldr	r2, [pc, #160]	; (8016704 <trainctl_notif2+0x108>)
 8016662:	4413      	add	r3, r2
 8016664:	797a      	ldrb	r2, [r7, #5]
 8016666:	709a      	strb	r2, [r3, #2]
	i += strlen(p);
	m.frm[i++]= '/';
	p = itoa(v2, (char *)m.frm+i, 10);
	i += strlen(p);
#else
	memcpy(m.frm+i, &v1, sizeof(int32_t));
 8016668:	697b      	ldr	r3, [r7, #20]
 801666a:	4a27      	ldr	r2, [pc, #156]	; (8016708 <trainctl_notif2+0x10c>)
 801666c:	4413      	add	r3, r2
 801666e:	6a3a      	ldr	r2, [r7, #32]
 8016670:	601a      	str	r2, [r3, #0]
	i += sizeof(int32_t);
 8016672:	697b      	ldr	r3, [r7, #20]
 8016674:	3304      	adds	r3, #4
 8016676:	617b      	str	r3, [r7, #20]
	memcpy(m.frm+i, &v2, sizeof(int32_t));
 8016678:	697b      	ldr	r3, [r7, #20]
 801667a:	4a23      	ldr	r2, [pc, #140]	; (8016708 <trainctl_notif2+0x10c>)
 801667c:	4413      	add	r3, r2
 801667e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016680:	601a      	str	r2, [r3, #0]
	i += sizeof(int32_t);
 8016682:	697b      	ldr	r3, [r7, #20]
 8016684:	3304      	adds	r3, #4
 8016686:	617b      	str	r3, [r7, #20]
	memcpy(m.frm+i, &v3, sizeof(int32_t));
 8016688:	697b      	ldr	r3, [r7, #20]
 801668a:	4a1f      	ldr	r2, [pc, #124]	; (8016708 <trainctl_notif2+0x10c>)
 801668c:	4413      	add	r3, r2
 801668e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016690:	601a      	str	r2, [r3, #0]
	i += sizeof(int32_t);
 8016692:	697b      	ldr	r3, [r7, #20]
 8016694:	3304      	adds	r3, #4
 8016696:	617b      	str	r3, [r7, #20]
 	p = strncpy((char *)m.frm+i, msg, 10);
 8016698:	697b      	ldr	r3, [r7, #20]
 801669a:	4a1b      	ldr	r2, [pc, #108]	; (8016708 <trainctl_notif2+0x10c>)
 801669c:	4413      	add	r3, r2
 801669e:	220a      	movs	r2, #10
 80166a0:	6839      	ldr	r1, [r7, #0]
 80166a2:	4618      	mov	r0, r3
 80166a4:	f002 fbc8 	bl	8018e38 <strncpy>
 80166a8:	6138      	str	r0, [r7, #16]
	m.frm[i+10]='\0';
 80166aa:	697b      	ldr	r3, [r7, #20]
 80166ac:	330a      	adds	r3, #10
 80166ae:	4a15      	ldr	r2, [pc, #84]	; (8016704 <trainctl_notif2+0x108>)
 80166b0:	4413      	add	r3, r2
 80166b2:	2200      	movs	r2, #0
 80166b4:	709a      	strb	r2, [r3, #2]
	i += strlen(p);
 80166b6:	6938      	ldr	r0, [r7, #16]
 80166b8:	f7e9 fd94 	bl	80001e4 <strlen>
 80166bc:	4602      	mov	r2, r0
 80166be:	697b      	ldr	r3, [r7, #20]
 80166c0:	4413      	add	r3, r2
 80166c2:	617b      	str	r3, [r7, #20]
#endif
	m.frm[i++]= '\0';
 80166c4:	697b      	ldr	r3, [r7, #20]
 80166c6:	1c5a      	adds	r2, r3, #1
 80166c8:	617a      	str	r2, [r7, #20]
 80166ca:	4a0e      	ldr	r2, [pc, #56]	; (8016704 <trainctl_notif2+0x108>)
 80166cc:	4413      	add	r3, r2
 80166ce:	2200      	movs	r2, #0
 80166d0:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = '|';
 80166d2:	697b      	ldr	r3, [r7, #20]
 80166d4:	1c5a      	adds	r2, r3, #1
 80166d6:	617a      	str	r2, [r7, #20]
 80166d8:	4a0a      	ldr	r2, [pc, #40]	; (8016704 <trainctl_notif2+0x108>)
 80166da:	4413      	add	r3, r2
 80166dc:	227c      	movs	r2, #124	; 0x7c
 80166de:	709a      	strb	r2, [r3, #2]
	int l = frm_escape(m.frm, i, FRM_MAX_LEN);
 80166e0:	221f      	movs	r2, #31
 80166e2:	6979      	ldr	r1, [r7, #20]
 80166e4:	4808      	ldr	r0, [pc, #32]	; (8016708 <trainctl_notif2+0x10c>)
 80166e6:	f7ff fbb8 	bl	8015e5a <frm_escape>
 80166ea:	60f8      	str	r0, [r7, #12]
	if (l>0) txframe_send_notif(&m, l);
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	dd03      	ble.n	80166fa <trainctl_notif2+0xfe>
 80166f2:	68f9      	ldr	r1, [r7, #12]
 80166f4:	4803      	ldr	r0, [pc, #12]	; (8016704 <trainctl_notif2+0x108>)
 80166f6:	f7ff fad0 	bl	8015c9a <txframe_send_notif>
}
 80166fa:	bf00      	nop
 80166fc:	3718      	adds	r7, #24
 80166fe:	46bd      	mov	sp, r7
 8016700:	bd80      	pop	{r7, pc}
 8016702:	bf00      	nop
 8016704:	2000533c 	.word	0x2000533c
 8016708:	2000533e 	.word	0x2000533e

0801670c <frame_send_notif>:


void frame_send_notif(uint8_t sel, uint8_t num, uint8_t cmd, uint8_t *dta, int dtalen)
{
 801670c:	b580      	push	{r7, lr}
 801670e:	b084      	sub	sp, #16
 8016710:	af00      	add	r7, sp, #0
 8016712:	603b      	str	r3, [r7, #0]
 8016714:	4603      	mov	r3, r0
 8016716:	71fb      	strb	r3, [r7, #7]
 8016718:	460b      	mov	r3, r1
 801671a:	71bb      	strb	r3, [r7, #6]
 801671c:	4613      	mov	r3, r2
 801671e:	717b      	strb	r3, [r7, #5]
	static frame_msg_t m;
	if (dtalen>FRM_MAX_LEN-8) dtalen=FRM_MAX_LEN-8;
 8016720:	69bb      	ldr	r3, [r7, #24]
 8016722:	2b17      	cmp	r3, #23
 8016724:	dd01      	ble.n	801672a <frame_send_notif+0x1e>
 8016726:	2317      	movs	r3, #23
 8016728:	61bb      	str	r3, [r7, #24]
	int i=0;
 801672a:	2300      	movs	r3, #0
 801672c:	60fb      	str	r3, [r7, #12]
	m.frm[i++] = '|';
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	1c5a      	adds	r2, r3, #1
 8016732:	60fa      	str	r2, [r7, #12]
 8016734:	4a25      	ldr	r2, [pc, #148]	; (80167cc <frame_send_notif+0xc0>)
 8016736:	4413      	add	r3, r2
 8016738:	227c      	movs	r2, #124	; 0x7c
 801673a:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = '_';
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	1c5a      	adds	r2, r3, #1
 8016740:	60fa      	str	r2, [r7, #12]
 8016742:	4a22      	ldr	r2, [pc, #136]	; (80167cc <frame_send_notif+0xc0>)
 8016744:	4413      	add	r3, r2
 8016746:	225f      	movs	r2, #95	; 0x5f
 8016748:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = 'N';
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	1c5a      	adds	r2, r3, #1
 801674e:	60fa      	str	r2, [r7, #12]
 8016750:	4a1e      	ldr	r2, [pc, #120]	; (80167cc <frame_send_notif+0xc0>)
 8016752:	4413      	add	r3, r2
 8016754:	224e      	movs	r2, #78	; 0x4e
 8016756:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = sel;
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	1c5a      	adds	r2, r3, #1
 801675c:	60fa      	str	r2, [r7, #12]
 801675e:	4a1b      	ldr	r2, [pc, #108]	; (80167cc <frame_send_notif+0xc0>)
 8016760:	4413      	add	r3, r2
 8016762:	79fa      	ldrb	r2, [r7, #7]
 8016764:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = num;
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	1c5a      	adds	r2, r3, #1
 801676a:	60fa      	str	r2, [r7, #12]
 801676c:	4a17      	ldr	r2, [pc, #92]	; (80167cc <frame_send_notif+0xc0>)
 801676e:	4413      	add	r3, r2
 8016770:	79ba      	ldrb	r2, [r7, #6]
 8016772:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = cmd;
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	1c5a      	adds	r2, r3, #1
 8016778:	60fa      	str	r2, [r7, #12]
 801677a:	4a14      	ldr	r2, [pc, #80]	; (80167cc <frame_send_notif+0xc0>)
 801677c:	4413      	add	r3, r2
 801677e:	797a      	ldrb	r2, [r7, #5]
 8016780:	709a      	strb	r2, [r3, #2]
	memcpy(m.frm+i, dta, dtalen);
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	4a12      	ldr	r2, [pc, #72]	; (80167d0 <frame_send_notif+0xc4>)
 8016786:	4413      	add	r3, r2
 8016788:	69ba      	ldr	r2, [r7, #24]
 801678a:	6839      	ldr	r1, [r7, #0]
 801678c:	4618      	mov	r0, r3
 801678e:	f002 fa87 	bl	8018ca0 <memcpy>
	i += dtalen;
 8016792:	68fa      	ldr	r2, [r7, #12]
 8016794:	69bb      	ldr	r3, [r7, #24]
 8016796:	4413      	add	r3, r2
 8016798:	60fb      	str	r3, [r7, #12]
	m.frm[i++] = '|';
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	1c5a      	adds	r2, r3, #1
 801679e:	60fa      	str	r2, [r7, #12]
 80167a0:	4a0a      	ldr	r2, [pc, #40]	; (80167cc <frame_send_notif+0xc0>)
 80167a2:	4413      	add	r3, r2
 80167a4:	227c      	movs	r2, #124	; 0x7c
 80167a6:	709a      	strb	r2, [r3, #2]
	int l = frm_escape(m.frm, i, FRM_MAX_LEN);
 80167a8:	221f      	movs	r2, #31
 80167aa:	68f9      	ldr	r1, [r7, #12]
 80167ac:	4808      	ldr	r0, [pc, #32]	; (80167d0 <frame_send_notif+0xc4>)
 80167ae:	f7ff fb54 	bl	8015e5a <frm_escape>
 80167b2:	60b8      	str	r0, [r7, #8]
	if (l>0) txframe_send_notif(&m, l);
 80167b4:	68bb      	ldr	r3, [r7, #8]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	dd03      	ble.n	80167c2 <frame_send_notif+0xb6>
 80167ba:	68b9      	ldr	r1, [r7, #8]
 80167bc:	4803      	ldr	r0, [pc, #12]	; (80167cc <frame_send_notif+0xc0>)
 80167be:	f7ff fa6c 	bl	8015c9a <txframe_send_notif>
}
 80167c2:	bf00      	nop
 80167c4:	3710      	adds	r7, #16
 80167c6:	46bd      	mov	sp, r7
 80167c8:	bd80      	pop	{r7, pc}
 80167ca:	bf00      	nop
 80167cc:	20005360 	.word	0x20005360
 80167d0:	20005362 	.word	0x20005362

080167d4 <txframe_send_msg64>:

static void txframe_send_msg64(msg_64_t *msg)
{
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b084      	sub	sp, #16
 80167d8:	af00      	add	r7, sp, #0
 80167da:	6078      	str	r0, [r7, #4]
    static frame_msg_t m;
    //int dtalen = 8;
    int i=0;
 80167dc:	2300      	movs	r3, #0
 80167de:	60fb      	str	r3, [r7, #12]
    m.frm[i++] = '|';
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	1c5a      	adds	r2, r3, #1
 80167e4:	60fa      	str	r2, [r7, #12]
 80167e6:	4a39      	ldr	r2, [pc, #228]	; (80168cc <txframe_send_msg64+0xf8>)
 80167e8:	4413      	add	r3, r2
 80167ea:	227c      	movs	r2, #124	; 0x7c
 80167ec:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = '_';
 80167ee:	68fb      	ldr	r3, [r7, #12]
 80167f0:	1c5a      	adds	r2, r3, #1
 80167f2:	60fa      	str	r2, [r7, #12]
 80167f4:	4a35      	ldr	r2, [pc, #212]	; (80168cc <txframe_send_msg64+0xf8>)
 80167f6:	4413      	add	r3, r2
 80167f8:	225f      	movs	r2, #95	; 0x5f
 80167fa:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = '6';
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	1c5a      	adds	r2, r3, #1
 8016800:	60fa      	str	r2, [r7, #12]
 8016802:	4a32      	ldr	r2, [pc, #200]	; (80168cc <txframe_send_msg64+0xf8>)
 8016804:	4413      	add	r3, r2
 8016806:	2236      	movs	r2, #54	; 0x36
 8016808:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->to;
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	1c5a      	adds	r2, r3, #1
 801680e:	60fa      	str	r2, [r7, #12]
 8016810:	687a      	ldr	r2, [r7, #4]
 8016812:	7811      	ldrb	r1, [r2, #0]
 8016814:	4a2d      	ldr	r2, [pc, #180]	; (80168cc <txframe_send_msg64+0xf8>)
 8016816:	4413      	add	r3, r2
 8016818:	460a      	mov	r2, r1
 801681a:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->from;
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	1c5a      	adds	r2, r3, #1
 8016820:	60fa      	str	r2, [r7, #12]
 8016822:	687a      	ldr	r2, [r7, #4]
 8016824:	7851      	ldrb	r1, [r2, #1]
 8016826:	4a29      	ldr	r2, [pc, #164]	; (80168cc <txframe_send_msg64+0xf8>)
 8016828:	4413      	add	r3, r2
 801682a:	460a      	mov	r2, r1
 801682c:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[0];
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	1c5a      	adds	r2, r3, #1
 8016832:	60fa      	str	r2, [r7, #12]
 8016834:	687a      	ldr	r2, [r7, #4]
 8016836:	7891      	ldrb	r1, [r2, #2]
 8016838:	4a24      	ldr	r2, [pc, #144]	; (80168cc <txframe_send_msg64+0xf8>)
 801683a:	4413      	add	r3, r2
 801683c:	460a      	mov	r2, r1
 801683e:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[1];
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	1c5a      	adds	r2, r3, #1
 8016844:	60fa      	str	r2, [r7, #12]
 8016846:	687a      	ldr	r2, [r7, #4]
 8016848:	78d1      	ldrb	r1, [r2, #3]
 801684a:	4a20      	ldr	r2, [pc, #128]	; (80168cc <txframe_send_msg64+0xf8>)
 801684c:	4413      	add	r3, r2
 801684e:	460a      	mov	r2, r1
 8016850:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[2];
 8016852:	68fb      	ldr	r3, [r7, #12]
 8016854:	1c5a      	adds	r2, r3, #1
 8016856:	60fa      	str	r2, [r7, #12]
 8016858:	687a      	ldr	r2, [r7, #4]
 801685a:	7911      	ldrb	r1, [r2, #4]
 801685c:	4a1b      	ldr	r2, [pc, #108]	; (80168cc <txframe_send_msg64+0xf8>)
 801685e:	4413      	add	r3, r2
 8016860:	460a      	mov	r2, r1
 8016862:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[3];
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	1c5a      	adds	r2, r3, #1
 8016868:	60fa      	str	r2, [r7, #12]
 801686a:	687a      	ldr	r2, [r7, #4]
 801686c:	7951      	ldrb	r1, [r2, #5]
 801686e:	4a17      	ldr	r2, [pc, #92]	; (80168cc <txframe_send_msg64+0xf8>)
 8016870:	4413      	add	r3, r2
 8016872:	460a      	mov	r2, r1
 8016874:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[4];
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	1c5a      	adds	r2, r3, #1
 801687a:	60fa      	str	r2, [r7, #12]
 801687c:	687a      	ldr	r2, [r7, #4]
 801687e:	7991      	ldrb	r1, [r2, #6]
 8016880:	4a12      	ldr	r2, [pc, #72]	; (80168cc <txframe_send_msg64+0xf8>)
 8016882:	4413      	add	r3, r2
 8016884:	460a      	mov	r2, r1
 8016886:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[5];
 8016888:	68fb      	ldr	r3, [r7, #12]
 801688a:	1c5a      	adds	r2, r3, #1
 801688c:	60fa      	str	r2, [r7, #12]
 801688e:	687a      	ldr	r2, [r7, #4]
 8016890:	79d1      	ldrb	r1, [r2, #7]
 8016892:	4a0e      	ldr	r2, [pc, #56]	; (80168cc <txframe_send_msg64+0xf8>)
 8016894:	4413      	add	r3, r2
 8016896:	460a      	mov	r2, r1
 8016898:	709a      	strb	r2, [r3, #2]
    //memcpy(m.frm+i, dta, dtalen);
    //i += dtalen;
    m.frm[i++] = '|';
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	1c5a      	adds	r2, r3, #1
 801689e:	60fa      	str	r2, [r7, #12]
 80168a0:	4a0a      	ldr	r2, [pc, #40]	; (80168cc <txframe_send_msg64+0xf8>)
 80168a2:	4413      	add	r3, r2
 80168a4:	227c      	movs	r2, #124	; 0x7c
 80168a6:	709a      	strb	r2, [r3, #2]
    int l = frm_escape(m.frm, i, FRM_MAX_LEN);
 80168a8:	221f      	movs	r2, #31
 80168aa:	68f9      	ldr	r1, [r7, #12]
 80168ac:	4808      	ldr	r0, [pc, #32]	; (80168d0 <txframe_send_msg64+0xfc>)
 80168ae:	f7ff fad4 	bl	8015e5a <frm_escape>
 80168b2:	60b8      	str	r0, [r7, #8]
    if (l>0) txframe_send_notif(&m, l);
 80168b4:	68bb      	ldr	r3, [r7, #8]
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	dd03      	ble.n	80168c2 <txframe_send_msg64+0xee>
 80168ba:	68b9      	ldr	r1, [r7, #8]
 80168bc:	4803      	ldr	r0, [pc, #12]	; (80168cc <txframe_send_msg64+0xf8>)
 80168be:	f7ff f9ec 	bl	8015c9a <txframe_send_notif>
}
 80168c2:	bf00      	nop
 80168c4:	3710      	adds	r7, #16
 80168c6:	46bd      	mov	sp, r7
 80168c8:	bd80      	pop	{r7, pc}
 80168ca:	bf00      	nop
 80168cc:	20005384 	.word	0x20005384
 80168d0:	20005386 	.word	0x20005386

080168d4 <frame_gather_stat>:



// buf should be long enough to store a int32_t with escape, so 8 bytes
int frame_gather_stat(int step, uint8_t *buf)
{
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b086      	sub	sp, #24
 80168d8:	af00      	add	r7, sp, #0
 80168da:	6078      	str	r0, [r7, #4]
 80168dc:	6039      	str	r1, [r7, #0]
	// int32_t stat_val_get(int step);
	int done;
	int32_t v = stat_val_get(step, &done);
 80168de:	f107 0310 	add.w	r3, r7, #16
 80168e2:	4619      	mov	r1, r3
 80168e4:	6878      	ldr	r0, [r7, #4]
 80168e6:	f7ff f9c9 	bl	8015c7c <stat_val_get>
 80168ea:	4603      	mov	r3, r0
 80168ec:	60fb      	str	r3, [r7, #12]
	if (done) return 0;
 80168ee:	693b      	ldr	r3, [r7, #16]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d001      	beq.n	80168f8 <frame_gather_stat+0x24>
 80168f4:	2300      	movs	r3, #0
 80168f6:	e00e      	b.n	8016916 <frame_gather_stat+0x42>

	int l = _frm_escape2(buf, (void *) &v, 4, 8);
 80168f8:	f107 010c 	add.w	r1, r7, #12
 80168fc:	2308      	movs	r3, #8
 80168fe:	2204      	movs	r2, #4
 8016900:	6838      	ldr	r0, [r7, #0]
 8016902:	f7ff fa63 	bl	8015dcc <_frm_escape2>
 8016906:	6178      	str	r0, [r7, #20]
	if (l<0) {
 8016908:	697b      	ldr	r3, [r7, #20]
 801690a:	2b00      	cmp	r3, #0
 801690c:	da02      	bge.n	8016914 <frame_gather_stat+0x40>
		return -1;
 801690e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016912:	e000      	b.n	8016916 <frame_gather_stat+0x42>
	}
	return l;
 8016914:	697b      	ldr	r3, [r7, #20]
}
 8016916:	4618      	mov	r0, r3
 8016918:	3718      	adds	r7, #24
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}

0801691e <frame_send_stat>:

void frame_send_stat(void(*cb)(uint8_t *d, int l), uint32_t tick)
{
 801691e:	b580      	push	{r7, lr}
 8016920:	b086      	sub	sp, #24
 8016922:	af00      	add	r7, sp, #0
 8016924:	6078      	str	r0, [r7, #4]
 8016926:	6039      	str	r1, [r7, #0]
    uint8_t buf[8];
    //if ((1)) tick = 0xAA55AA55;
    int l = _frm_escape2(buf, (void *) &tick, 4, 8);
 8016928:	4639      	mov	r1, r7
 801692a:	f107 0008 	add.w	r0, r7, #8
 801692e:	2308      	movs	r3, #8
 8016930:	2204      	movs	r2, #4
 8016932:	f7ff fa4b 	bl	8015dcc <_frm_escape2>
 8016936:	6138      	str	r0, [r7, #16]
    cb(buf, l);
 8016938:	f107 0208 	add.w	r2, r7, #8
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	6939      	ldr	r1, [r7, #16]
 8016940:	4610      	mov	r0, r2
 8016942:	4798      	blx	r3

	int i;
	for (i=0; ; i++) {
 8016944:	2300      	movs	r3, #0
 8016946:	617b      	str	r3, [r7, #20]
		l = frame_gather_stat(i, buf);
 8016948:	f107 0308 	add.w	r3, r7, #8
 801694c:	4619      	mov	r1, r3
 801694e:	6978      	ldr	r0, [r7, #20]
 8016950:	f7ff ffc0 	bl	80168d4 <frame_gather_stat>
 8016954:	6138      	str	r0, [r7, #16]
		if (l<=0) {
 8016956:	693b      	ldr	r3, [r7, #16]
 8016958:	2b00      	cmp	r3, #0
 801695a:	dd09      	ble.n	8016970 <frame_send_stat+0x52>
			return;
		}
		cb(buf, l);
 801695c:	f107 0208 	add.w	r2, r7, #8
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	6939      	ldr	r1, [r7, #16]
 8016964:	4610      	mov	r0, r2
 8016966:	4798      	blx	r3
	for (i=0; ; i++) {
 8016968:	697b      	ldr	r3, [r7, #20]
 801696a:	3301      	adds	r3, #1
 801696c:	617b      	str	r3, [r7, #20]
		l = frame_gather_stat(i, buf);
 801696e:	e7eb      	b.n	8016948 <frame_send_stat+0x2a>
			return;
 8016970:	bf00      	nop
	}
}
 8016972:	3718      	adds	r7, #24
 8016974:	46bd      	mov	sp, r7
 8016976:	bd80      	pop	{r7, pc}

08016978 <itm_debug1>:
//void _itm_debug1(const char *msg, int v);
//void _itm_debug2(const char *msg, int v1, int v2);
void _itm_debug3(const char *msg, int v1, int v2, int v3, int n);

static inline void itm_debug1(uint32_t f, const char *msg, int v)
{
 8016978:	b580      	push	{r7, lr}
 801697a:	b086      	sub	sp, #24
 801697c:	af02      	add	r7, sp, #8
 801697e:	60f8      	str	r0, [r7, #12]
 8016980:	60b9      	str	r1, [r7, #8]
 8016982:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8016984:	4b08      	ldr	r3, [pc, #32]	; (80169a8 <itm_debug1+0x30>)
 8016986:	681a      	ldr	r2, [r3, #0]
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	4013      	ands	r3, r2
 801698c:	2b00      	cmp	r3, #0
 801698e:	d007      	beq.n	80169a0 <itm_debug1+0x28>
 8016990:	2301      	movs	r3, #1
 8016992:	9300      	str	r3, [sp, #0]
 8016994:	2300      	movs	r3, #0
 8016996:	2200      	movs	r2, #0
 8016998:	6879      	ldr	r1, [r7, #4]
 801699a:	68b8      	ldr	r0, [r7, #8]
 801699c:	f001 ff6a 	bl	8018874 <_itm_debug3>
}
 80169a0:	bf00      	nop
 80169a2:	3710      	adds	r7, #16
 80169a4:	46bd      	mov	sp, r7
 80169a6:	bd80      	pop	{r7, pc}
 80169a8:	20000574 	.word	0x20000574

080169ac <itm_debug2>:
static inline void itm_debug2(uint32_t f, const char *msg, int v1, int v2)
{
 80169ac:	b580      	push	{r7, lr}
 80169ae:	b086      	sub	sp, #24
 80169b0:	af02      	add	r7, sp, #8
 80169b2:	60f8      	str	r0, [r7, #12]
 80169b4:	60b9      	str	r1, [r7, #8]
 80169b6:	607a      	str	r2, [r7, #4]
 80169b8:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 80169ba:	4b09      	ldr	r3, [pc, #36]	; (80169e0 <itm_debug2+0x34>)
 80169bc:	681a      	ldr	r2, [r3, #0]
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	4013      	ands	r3, r2
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d007      	beq.n	80169d6 <itm_debug2+0x2a>
 80169c6:	2302      	movs	r3, #2
 80169c8:	9300      	str	r3, [sp, #0]
 80169ca:	2300      	movs	r3, #0
 80169cc:	683a      	ldr	r2, [r7, #0]
 80169ce:	6879      	ldr	r1, [r7, #4]
 80169d0:	68b8      	ldr	r0, [r7, #8]
 80169d2:	f001 ff4f 	bl	8018874 <_itm_debug3>
}
 80169d6:	bf00      	nop
 80169d8:	3710      	adds	r7, #16
 80169da:	46bd      	mov	sp, r7
 80169dc:	bd80      	pop	{r7, pc}
 80169de:	bf00      	nop
 80169e0:	20000574 	.word	0x20000574

080169e4 <itm_debug3>:
static inline void itm_debug3(uint32_t f, const char *msg, int v1, int v2, int v3)
{
 80169e4:	b580      	push	{r7, lr}
 80169e6:	b086      	sub	sp, #24
 80169e8:	af02      	add	r7, sp, #8
 80169ea:	60f8      	str	r0, [r7, #12]
 80169ec:	60b9      	str	r1, [r7, #8]
 80169ee:	607a      	str	r2, [r7, #4]
 80169f0:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 80169f2:	4b09      	ldr	r3, [pc, #36]	; (8016a18 <itm_debug3+0x34>)
 80169f4:	681a      	ldr	r2, [r3, #0]
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	4013      	ands	r3, r2
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d007      	beq.n	8016a0e <itm_debug3+0x2a>
 80169fe:	2303      	movs	r3, #3
 8016a00:	9300      	str	r3, [sp, #0]
 8016a02:	69bb      	ldr	r3, [r7, #24]
 8016a04:	683a      	ldr	r2, [r7, #0]
 8016a06:	6879      	ldr	r1, [r7, #4]
 8016a08:	68b8      	ldr	r0, [r7, #8]
 8016a0a:	f001 ff33 	bl	8018874 <_itm_debug3>
}
 8016a0e:	bf00      	nop
 8016a10:	3710      	adds	r7, #16
 8016a12:	46bd      	mov	sp, r7
 8016a14:	bd80      	pop	{r7, pc}
 8016a16:	bf00      	nop
 8016a18:	20000574 	.word	0x20000574

08016a1c <msg_error>:
		{MA_ADDR_MASK_5,						MA_ADDR_5_CTRL,			5}

};

static void msg_error(_UNUSED_ const char *msg)
{
 8016a1c:	b480      	push	{r7}
 8016a1e:	b083      	sub	sp, #12
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	6078      	str	r0, [r7, #4]

}
 8016a24:	bf00      	nop
 8016a26:	370c      	adds	r7, #12
 8016a28:	46bd      	mov	sp, r7
 8016a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a2e:	4770      	bx	lr

08016a30 <dispatch_m64>:


static void dispatch_m64(msg_64_t *m, int f)
{
 8016a30:	b580      	push	{r7, lr}
 8016a32:	b086      	sub	sp, #24
 8016a34:	af00      	add	r7, sp, #0
 8016a36:	6078      	str	r0, [r7, #4]
 8016a38:	6039      	str	r1, [r7, #0]
    if (m->to == MA_BROADCAST) {
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	781b      	ldrb	r3, [r3, #0]
 8016a3e:	2bff      	cmp	r3, #255	; 0xff
 8016a40:	d11d      	bne.n	8016a7e <dispatch_m64+0x4e>
        for (int i=0; i<NQDEF; i++) {
 8016a42:	2300      	movs	r3, #0
 8016a44:	617b      	str	r3, [r7, #20]
 8016a46:	e016      	b.n	8016a76 <dispatch_m64+0x46>
            if (i == f) {
 8016a48:	697a      	ldr	r2, [r7, #20]
 8016a4a:	683b      	ldr	r3, [r7, #0]
 8016a4c:	429a      	cmp	r2, r3
 8016a4e:	d00c      	beq.n	8016a6a <dispatch_m64+0x3a>
                continue;
            }
            mqf_t *q = qdef[i].to;
 8016a50:	4a32      	ldr	r2, [pc, #200]	; (8016b1c <dispatch_m64+0xec>)
 8016a52:	697b      	ldr	r3, [r7, #20]
 8016a54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8016a58:	60bb      	str	r3, [r7, #8]
            if (!q) continue;
 8016a5a:	68bb      	ldr	r3, [r7, #8]
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d006      	beq.n	8016a6e <dispatch_m64+0x3e>
            mqf_write(q, m);
 8016a60:	6879      	ldr	r1, [r7, #4]
 8016a62:	68b8      	ldr	r0, [r7, #8]
 8016a64:	f002 f80c 	bl	8018a80 <mqf_write>
 8016a68:	e002      	b.n	8016a70 <dispatch_m64+0x40>
                continue;
 8016a6a:	bf00      	nop
 8016a6c:	e000      	b.n	8016a70 <dispatch_m64+0x40>
            if (!q) continue;
 8016a6e:	bf00      	nop
        for (int i=0; i<NQDEF; i++) {
 8016a70:	697b      	ldr	r3, [r7, #20]
 8016a72:	3301      	adds	r3, #1
 8016a74:	617b      	str	r3, [r7, #20]
 8016a76:	697b      	ldr	r3, [r7, #20]
 8016a78:	2b07      	cmp	r3, #7
 8016a7a:	dde5      	ble.n	8016a48 <dispatch_m64+0x18>
        }
        return;
 8016a7c:	e04b      	b.n	8016b16 <dispatch_m64+0xe6>
    }
	for (int i=0; i<NROUTES; i++) {
 8016a7e:	2300      	movs	r3, #0
 8016a80:	613b      	str	r3, [r7, #16]
 8016a82:	e03b      	b.n	8016afc <dispatch_m64+0xcc>
		if ((m->to & routes[i].mask) == routes[i].value) {
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	7819      	ldrb	r1, [r3, #0]
 8016a88:	4825      	ldr	r0, [pc, #148]	; (8016b20 <dispatch_m64+0xf0>)
 8016a8a:	693a      	ldr	r2, [r7, #16]
 8016a8c:	4613      	mov	r3, r2
 8016a8e:	005b      	lsls	r3, r3, #1
 8016a90:	4413      	add	r3, r2
 8016a92:	4403      	add	r3, r0
 8016a94:	781b      	ldrb	r3, [r3, #0]
 8016a96:	400b      	ands	r3, r1
 8016a98:	b2d9      	uxtb	r1, r3
 8016a9a:	4821      	ldr	r0, [pc, #132]	; (8016b20 <dispatch_m64+0xf0>)
 8016a9c:	693a      	ldr	r2, [r7, #16]
 8016a9e:	4613      	mov	r3, r2
 8016aa0:	005b      	lsls	r3, r3, #1
 8016aa2:	4413      	add	r3, r2
 8016aa4:	4403      	add	r3, r0
 8016aa6:	3301      	adds	r3, #1
 8016aa8:	781b      	ldrb	r3, [r3, #0]
 8016aaa:	4299      	cmp	r1, r3
 8016aac:	d123      	bne.n	8016af6 <dispatch_m64+0xc6>
			if (f==routes[i].destq) {
 8016aae:	491c      	ldr	r1, [pc, #112]	; (8016b20 <dispatch_m64+0xf0>)
 8016ab0:	693a      	ldr	r2, [r7, #16]
 8016ab2:	4613      	mov	r3, r2
 8016ab4:	005b      	lsls	r3, r3, #1
 8016ab6:	4413      	add	r3, r2
 8016ab8:	440b      	add	r3, r1
 8016aba:	3302      	adds	r3, #2
 8016abc:	781b      	ldrb	r3, [r3, #0]
 8016abe:	461a      	mov	r2, r3
 8016ac0:	683b      	ldr	r3, [r7, #0]
 8016ac2:	4293      	cmp	r3, r2
 8016ac4:	d105      	bne.n	8016ad2 <dispatch_m64+0xa2>
				// loop
				itm_debug1(DBG_ERR|DBG_MSG, "loop", f);
 8016ac6:	683a      	ldr	r2, [r7, #0]
 8016ac8:	4916      	ldr	r1, [pc, #88]	; (8016b24 <dispatch_m64+0xf4>)
 8016aca:	4817      	ldr	r0, [pc, #92]	; (8016b28 <dispatch_m64+0xf8>)
 8016acc:	f7ff ff54 	bl	8016978 <itm_debug1>
				return;
 8016ad0:	e021      	b.n	8016b16 <dispatch_m64+0xe6>
			}
			mqf_t *q = qdef[routes[i].destq].to;
 8016ad2:	4913      	ldr	r1, [pc, #76]	; (8016b20 <dispatch_m64+0xf0>)
 8016ad4:	693a      	ldr	r2, [r7, #16]
 8016ad6:	4613      	mov	r3, r2
 8016ad8:	005b      	lsls	r3, r3, #1
 8016ada:	4413      	add	r3, r2
 8016adc:	440b      	add	r3, r1
 8016ade:	3302      	adds	r3, #2
 8016ae0:	781b      	ldrb	r3, [r3, #0]
 8016ae2:	461a      	mov	r2, r3
 8016ae4:	4b0d      	ldr	r3, [pc, #52]	; (8016b1c <dispatch_m64+0xec>)
 8016ae6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8016aea:	60fb      	str	r3, [r7, #12]
			mqf_write(q, m);
 8016aec:	6879      	ldr	r1, [r7, #4]
 8016aee:	68f8      	ldr	r0, [r7, #12]
 8016af0:	f001 ffc6 	bl	8018a80 <mqf_write>
			return;
 8016af4:	e00f      	b.n	8016b16 <dispatch_m64+0xe6>
	for (int i=0; i<NROUTES; i++) {
 8016af6:	693b      	ldr	r3, [r7, #16]
 8016af8:	3301      	adds	r3, #1
 8016afa:	613b      	str	r3, [r7, #16]
 8016afc:	693b      	ldr	r3, [r7, #16]
 8016afe:	2b07      	cmp	r3, #7
 8016b00:	ddc0      	ble.n	8016a84 <dispatch_m64+0x54>
		}
	}
	itm_debug1(DBG_ERR|DBG_MSG, "no route", m->to);
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	781b      	ldrb	r3, [r3, #0]
 8016b06:	461a      	mov	r2, r3
 8016b08:	4908      	ldr	r1, [pc, #32]	; (8016b2c <dispatch_m64+0xfc>)
 8016b0a:	4807      	ldr	r0, [pc, #28]	; (8016b28 <dispatch_m64+0xf8>)
 8016b0c:	f7ff ff34 	bl	8016978 <itm_debug1>
	msg_error("no route");
 8016b10:	4806      	ldr	r0, [pc, #24]	; (8016b2c <dispatch_m64+0xfc>)
 8016b12:	f7ff ff83 	bl	8016a1c <msg_error>
}
 8016b16:	3718      	adds	r7, #24
 8016b18:	46bd      	mov	sp, r7
 8016b1a:	bd80      	pop	{r7, pc}
 8016b1c:	0801b724 	.word	0x0801b724
 8016b20:	0801b764 	.word	0x0801b764
 8016b24:	08019644 	.word	0x08019644
 8016b28:	80000002 	.word	0x80000002
 8016b2c:	0801964c 	.word	0x0801964c

08016b30 <msgsrv_tick>:
	itm_debug3(DBG_ERR, "qu", d*100+i, q->maxuse, mqf_len(q));
	q->maxuse = 0;
}

void msgsrv_tick(_UNUSED_ uint32_t notif_flags, _UNUSED_ uint32_t tick, _UNUSED_ uint32_t dt)
{
 8016b30:	b580      	push	{r7, lr}
 8016b32:	b08c      	sub	sp, #48	; 0x30
 8016b34:	af02      	add	r7, sp, #8
 8016b36:	60f8      	str	r0, [r7, #12]
 8016b38:	60b9      	str	r1, [r7, #8]
 8016b3a:	607a      	str	r2, [r7, #4]
        	itm_debug1(DBG_ERR|DBG_MSG, "bad size", sizeof(msg_64_t));
        	for (;;);
#endif
        }
    }
	for (int i=0; i<NQDEF; i++) {
 8016b3c:	2300      	movs	r3, #0
 8016b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8016b40:	e051      	b.n	8016be6 <msgsrv_tick+0xb6>
		mqf_t *q = qdef[i].from;
 8016b42:	4a2c      	ldr	r2, [pc, #176]	; (8016bf4 <msgsrv_tick+0xc4>)
 8016b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b46:	00db      	lsls	r3, r3, #3
 8016b48:	4413      	add	r3, r2
 8016b4a:	685b      	ldr	r3, [r3, #4]
 8016b4c:	623b      	str	r3, [r7, #32]

		itm_debug2(DBG_MSG, "mlen1",i, mqf_len(q));
 8016b4e:	6a38      	ldr	r0, [r7, #32]
 8016b50:	f001 ff3a 	bl	80189c8 <mqf_len>
 8016b54:	4603      	mov	r3, r0
 8016b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016b58:	4927      	ldr	r1, [pc, #156]	; (8016bf8 <msgsrv_tick+0xc8>)
 8016b5a:	2002      	movs	r0, #2
 8016b5c:	f7ff ff26 	bl	80169ac <itm_debug2>
		itm_debug3(DBG_MSG, "mth1 ", i, q->head, q->tail);
 8016b60:	6a3b      	ldr	r3, [r7, #32]
 8016b62:	881b      	ldrh	r3, [r3, #0]
 8016b64:	b29b      	uxth	r3, r3
 8016b66:	461a      	mov	r2, r3
 8016b68:	6a3b      	ldr	r3, [r7, #32]
 8016b6a:	885b      	ldrh	r3, [r3, #2]
 8016b6c:	b29b      	uxth	r3, r3
 8016b6e:	9300      	str	r3, [sp, #0]
 8016b70:	4613      	mov	r3, r2
 8016b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016b74:	4921      	ldr	r1, [pc, #132]	; (8016bfc <msgsrv_tick+0xcc>)
 8016b76:	2002      	movs	r0, #2
 8016b78:	f7ff ff34 	bl	80169e4 <itm_debug3>
		for (;;) {
				msg_64_t m;
				int rc = mqf_read(q, &m);
 8016b7c:	f107 0310 	add.w	r3, r7, #16
 8016b80:	4619      	mov	r1, r3
 8016b82:	6a38      	ldr	r0, [r7, #32]
 8016b84:	f001 fff6 	bl	8018b74 <mqf_read>
 8016b88:	61f8      	str	r0, [r7, #28]
				if (rc) break;
 8016b8a:	69fb      	ldr	r3, [r7, #28]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d01a      	beq.n	8016bc6 <msgsrv_tick+0x96>
				if (i==5) {
					itm_debug1(DBG_MSG, "from ctrl", m.cmd);
				}
				dispatch_m64(&m, i);
			}
		itm_debug2(DBG_MSG, "mlen2",i, mqf_len(q));
 8016b90:	6a38      	ldr	r0, [r7, #32]
 8016b92:	f001 ff19 	bl	80189c8 <mqf_len>
 8016b96:	4603      	mov	r3, r0
 8016b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016b9a:	4919      	ldr	r1, [pc, #100]	; (8016c00 <msgsrv_tick+0xd0>)
 8016b9c:	2002      	movs	r0, #2
 8016b9e:	f7ff ff05 	bl	80169ac <itm_debug2>
		itm_debug3(DBG_MSG, "mth2 ", i, q->head, q->tail);
 8016ba2:	6a3b      	ldr	r3, [r7, #32]
 8016ba4:	881b      	ldrh	r3, [r3, #0]
 8016ba6:	b29b      	uxth	r3, r3
 8016ba8:	461a      	mov	r2, r3
 8016baa:	6a3b      	ldr	r3, [r7, #32]
 8016bac:	885b      	ldrh	r3, [r3, #2]
 8016bae:	b29b      	uxth	r3, r3
 8016bb0:	9300      	str	r3, [sp, #0]
 8016bb2:	4613      	mov	r3, r2
 8016bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016bb6:	4913      	ldr	r1, [pc, #76]	; (8016c04 <msgsrv_tick+0xd4>)
 8016bb8:	2002      	movs	r0, #2
 8016bba:	f7ff ff13 	bl	80169e4 <itm_debug3>
	for (int i=0; i<NQDEF; i++) {
 8016bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bc0:	3301      	adds	r3, #1
 8016bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8016bc4:	e00f      	b.n	8016be6 <msgsrv_tick+0xb6>
				if (i==5) {
 8016bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bc8:	2b05      	cmp	r3, #5
 8016bca:	d105      	bne.n	8016bd8 <msgsrv_tick+0xa8>
					itm_debug1(DBG_MSG, "from ctrl", m.cmd);
 8016bcc:	7cbb      	ldrb	r3, [r7, #18]
 8016bce:	461a      	mov	r2, r3
 8016bd0:	490d      	ldr	r1, [pc, #52]	; (8016c08 <msgsrv_tick+0xd8>)
 8016bd2:	2002      	movs	r0, #2
 8016bd4:	f7ff fed0 	bl	8016978 <itm_debug1>
				dispatch_m64(&m, i);
 8016bd8:	f107 0310 	add.w	r3, r7, #16
 8016bdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016bde:	4618      	mov	r0, r3
 8016be0:	f7ff ff26 	bl	8016a30 <dispatch_m64>
		for (;;) {
 8016be4:	e7ca      	b.n	8016b7c <msgsrv_tick+0x4c>
	for (int i=0; i<NQDEF; i++) {
 8016be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016be8:	2b07      	cmp	r3, #7
 8016bea:	ddaa      	ble.n	8016b42 <msgsrv_tick+0x12>
				dump_qusage(i, 1, qdef[i].to);
			}
			last = tick;
		}
	}
}
 8016bec:	bf00      	nop
 8016bee:	3728      	adds	r7, #40	; 0x28
 8016bf0:	46bd      	mov	sp, r7
 8016bf2:	bd80      	pop	{r7, pc}
 8016bf4:	0801b724 	.word	0x0801b724
 8016bf8:	0801965c 	.word	0x0801965c
 8016bfc:	08019664 	.word	0x08019664
 8016c00:	0801966c 	.word	0x0801966c
 8016c04:	08019674 	.word	0x08019674
 8016c08:	0801967c 	.word	0x0801967c

08016c0c <dump_msg>:


void dump_msg(mqf_t *mq, int n)
{
 8016c0c:	b580      	push	{r7, lr}
 8016c0e:	b086      	sub	sp, #24
 8016c10:	af02      	add	r7, sp, #8
 8016c12:	6078      	str	r0, [r7, #4]
 8016c14:	6039      	str	r1, [r7, #0]
	int i = ( n + mq->tail ) % mq->num;
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	885b      	ldrh	r3, [r3, #2]
 8016c1a:	b29b      	uxth	r3, r3
 8016c1c:	461a      	mov	r2, r3
 8016c1e:	683b      	ldr	r3, [r7, #0]
 8016c20:	4413      	add	r3, r2
 8016c22:	687a      	ldr	r2, [r7, #4]
 8016c24:	7952      	ldrb	r2, [r2, #5]
 8016c26:	fb93 f1f2 	sdiv	r1, r3, r2
 8016c2a:	fb02 f201 	mul.w	r2, r2, r1
 8016c2e:	1a9b      	subs	r3, r3, r2
 8016c30:	60fb      	str	r3, [r7, #12]
	msg_64_t *msg = (msg_64_t *) &(mq->msgbuf[i*mq->msgsiz]);
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	689b      	ldr	r3, [r3, #8]
 8016c36:	687a      	ldr	r2, [r7, #4]
 8016c38:	7912      	ldrb	r2, [r2, #4]
 8016c3a:	4611      	mov	r1, r2
 8016c3c:	68fa      	ldr	r2, [r7, #12]
 8016c3e:	fb02 f201 	mul.w	r2, r2, r1
 8016c42:	4413      	add	r3, r2
 8016c44:	60bb      	str	r3, [r7, #8]
	itm_debug3(DBG_ERR, "q", i, msg->cmd, msg->from);
 8016c46:	68bb      	ldr	r3, [r7, #8]
 8016c48:	789b      	ldrb	r3, [r3, #2]
 8016c4a:	461a      	mov	r2, r3
 8016c4c:	68bb      	ldr	r3, [r7, #8]
 8016c4e:	785b      	ldrb	r3, [r3, #1]
 8016c50:	9300      	str	r3, [sp, #0]
 8016c52:	4613      	mov	r3, r2
 8016c54:	68fa      	ldr	r2, [r7, #12]
 8016c56:	4904      	ldr	r1, [pc, #16]	; (8016c68 <dump_msg+0x5c>)
 8016c58:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8016c5c:	f7ff fec2 	bl	80169e4 <itm_debug3>
}
 8016c60:	bf00      	nop
 8016c62:	3710      	adds	r7, #16
 8016c64:	46bd      	mov	sp, r7
 8016c66:	bd80      	pop	{r7, pc}
 8016c68:	08019688 	.word	0x08019688

08016c6c <inertia_value>:
{
	vars->target = v;
}

int16_t inertia_value(const inertia_config_t *config, inertia_vars_t *vars, uint16_t elapsed_ticks, int *pchanged)
{
 8016c6c:	b480      	push	{r7}
 8016c6e:	b08b      	sub	sp, #44	; 0x2c
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	60f8      	str	r0, [r7, #12]
 8016c74:	60b9      	str	r1, [r7, #8]
 8016c76:	603b      	str	r3, [r7, #0]
 8016c78:	4613      	mov	r3, r2
 8016c7a:	80fb      	strh	r3, [r7, #6]
	int st =  SIGNOF(vars->target);
 8016c7c:	68bb      	ldr	r3, [r7, #8]
 8016c7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	da02      	bge.n	8016c8c <inertia_value+0x20>
 8016c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016c8a:	e000      	b.n	8016c8e <inertia_value+0x22>
 8016c8c:	2301      	movs	r3, #1
 8016c8e:	623b      	str	r3, [r7, #32]
	int sc =  SIGNOF(vars->cur);
 8016c90:	68bb      	ldr	r3, [r7, #8]
 8016c92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	da02      	bge.n	8016ca0 <inertia_value+0x34>
 8016c9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016c9e:	e000      	b.n	8016ca2 <inertia_value+0x36>
 8016ca0:	2301      	movs	r3, #1
 8016ca2:	61fb      	str	r3, [r7, #28]
	int inc;

    if (pchanged) *pchanged = 0;
 8016ca4:	683b      	ldr	r3, [r7, #0]
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d002      	beq.n	8016cb0 <inertia_value+0x44>
 8016caa:	683b      	ldr	r3, [r7, #0]
 8016cac:	2200      	movs	r2, #0
 8016cae:	601a      	str	r2, [r3, #0]
    if (vars->target == vars->cur/10) return vars->target;
 8016cb0:	68bb      	ldr	r3, [r7, #8]
 8016cb2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016cb6:	68bb      	ldr	r3, [r7, #8]
 8016cb8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016cbc:	496f      	ldr	r1, [pc, #444]	; (8016e7c <inertia_value+0x210>)
 8016cbe:	fb81 0103 	smull	r0, r1, r1, r3
 8016cc2:	1089      	asrs	r1, r1, #2
 8016cc4:	17db      	asrs	r3, r3, #31
 8016cc6:	1acb      	subs	r3, r1, r3
 8016cc8:	b21b      	sxth	r3, r3
 8016cca:	429a      	cmp	r2, r3
 8016ccc:	d103      	bne.n	8016cd6 <inertia_value+0x6a>
 8016cce:	68bb      	ldr	r3, [r7, #8]
 8016cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016cd4:	e0cb      	b.n	8016e6e <inertia_value+0x202>
    //debug_info(0, "INER", vars->target, vars->cur);


	if (st*sc >= 0) {
 8016cd6:	6a3b      	ldr	r3, [r7, #32]
 8016cd8:	69fa      	ldr	r2, [r7, #28]
 8016cda:	fb02 f303 	mul.w	r3, r2, r3
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	db6c      	blt.n	8016dbc <inertia_value+0x150>
		// same direction
		if (abs(vars->target*10)>abs(vars->cur)) {
 8016ce2:	68bb      	ldr	r3, [r7, #8]
 8016ce4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ce8:	461a      	mov	r2, r3
 8016cea:	4613      	mov	r3, r2
 8016cec:	009b      	lsls	r3, r3, #2
 8016cee:	4413      	add	r3, r2
 8016cf0:	005b      	lsls	r3, r3, #1
 8016cf2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8016cf6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8016cfa:	68bb      	ldr	r3, [r7, #8]
 8016cfc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	bfb8      	it	lt
 8016d04:	425b      	neglt	r3, r3
 8016d06:	429a      	cmp	r2, r3
 8016d08:	dd2b      	ble.n	8016d62 <inertia_value+0xf6>
			// acceleration
			inc = config->acc * elapsed_ticks / 1000;
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016d10:	461a      	mov	r2, r3
 8016d12:	88fb      	ldrh	r3, [r7, #6]
 8016d14:	fb03 f302 	mul.w	r3, r3, r2
 8016d18:	4a59      	ldr	r2, [pc, #356]	; (8016e80 <inertia_value+0x214>)
 8016d1a:	fb82 1203 	smull	r1, r2, r2, r3
 8016d1e:	1192      	asrs	r2, r2, #6
 8016d20:	17db      	asrs	r3, r3, #31
 8016d22:	1ad3      	subs	r3, r2, r3
 8016d24:	627b      	str	r3, [r7, #36]	; 0x24
			inc = MIN(inc, abs(vars->target*10)-abs(vars->cur));
 8016d26:	68bb      	ldr	r3, [r7, #8]
 8016d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d2c:	461a      	mov	r2, r3
 8016d2e:	4613      	mov	r3, r2
 8016d30:	009b      	lsls	r3, r3, #2
 8016d32:	4413      	add	r3, r2
 8016d34:	005b      	lsls	r3, r3, #1
 8016d36:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8016d3a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8016d3e:	68bb      	ldr	r3, [r7, #8]
 8016d40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	bfb8      	it	lt
 8016d48:	425b      	neglt	r3, r3
 8016d4a:	1ad3      	subs	r3, r2, r3
 8016d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d4e:	4293      	cmp	r3, r2
 8016d50:	bfa8      	it	ge
 8016d52:	4613      	movge	r3, r2
 8016d54:	627b      	str	r3, [r7, #36]	; 0x24
			inc = sc * inc;
 8016d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d58:	69fa      	ldr	r2, [r7, #28]
 8016d5a:	fb02 f303 	mul.w	r3, r2, r3
 8016d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8016d60:	e055      	b.n	8016e0e <inertia_value+0x1a2>
		} else {
			// deceleration
			inc = config->dec * elapsed_ticks / 1000;
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d68:	461a      	mov	r2, r3
 8016d6a:	88fb      	ldrh	r3, [r7, #6]
 8016d6c:	fb03 f302 	mul.w	r3, r3, r2
 8016d70:	4a43      	ldr	r2, [pc, #268]	; (8016e80 <inertia_value+0x214>)
 8016d72:	fb82 1203 	smull	r1, r2, r2, r3
 8016d76:	1192      	asrs	r2, r2, #6
 8016d78:	17db      	asrs	r3, r3, #31
 8016d7a:	1ad3      	subs	r3, r2, r3
 8016d7c:	627b      	str	r3, [r7, #36]	; 0x24
			inc = MIN(inc, -abs(vars->target*10)+abs(vars->cur));
 8016d7e:	68bb      	ldr	r3, [r7, #8]
 8016d80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016d84:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8016d88:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8016d8c:	68bb      	ldr	r3, [r7, #8]
 8016d8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d92:	4619      	mov	r1, r3
 8016d94:	460b      	mov	r3, r1
 8016d96:	009b      	lsls	r3, r3, #2
 8016d98:	440b      	add	r3, r1
 8016d9a:	005b      	lsls	r3, r3, #1
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	bfb8      	it	lt
 8016da0:	425b      	neglt	r3, r3
 8016da2:	1ad3      	subs	r3, r2, r3
 8016da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016da6:	4293      	cmp	r3, r2
 8016da8:	bfa8      	it	ge
 8016daa:	4613      	movge	r3, r2
 8016dac:	627b      	str	r3, [r7, #36]	; 0x24
			inc = -sc * inc;
 8016dae:	69fb      	ldr	r3, [r7, #28]
 8016db0:	425a      	negs	r2, r3
 8016db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016db4:	fb02 f303 	mul.w	r3, r2, r3
 8016db8:	627b      	str	r3, [r7, #36]	; 0x24
 8016dba:	e028      	b.n	8016e0e <inertia_value+0x1a2>
		}
	} else {
		// dir change
		inc = config->dec * elapsed_ticks / 1000;
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016dc2:	461a      	mov	r2, r3
 8016dc4:	88fb      	ldrh	r3, [r7, #6]
 8016dc6:	fb03 f302 	mul.w	r3, r3, r2
 8016dca:	4a2d      	ldr	r2, [pc, #180]	; (8016e80 <inertia_value+0x214>)
 8016dcc:	fb82 1203 	smull	r1, r2, r2, r3
 8016dd0:	1192      	asrs	r2, r2, #6
 8016dd2:	17db      	asrs	r3, r3, #31
 8016dd4:	1ad3      	subs	r3, r2, r3
 8016dd6:	627b      	str	r3, [r7, #36]	; 0x24
        inc = MIN(inc, abs(vars->target*10-vars->cur));
 8016dd8:	68bb      	ldr	r3, [r7, #8]
 8016dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016dde:	461a      	mov	r2, r3
 8016de0:	4613      	mov	r3, r2
 8016de2:	009b      	lsls	r3, r3, #2
 8016de4:	4413      	add	r3, r2
 8016de6:	005b      	lsls	r3, r3, #1
 8016de8:	461a      	mov	r2, r3
 8016dea:	68bb      	ldr	r3, [r7, #8]
 8016dec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016df0:	1ad3      	subs	r3, r2, r3
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	bfb8      	it	lt
 8016df6:	425b      	neglt	r3, r3
 8016df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016dfa:	4293      	cmp	r3, r2
 8016dfc:	bfa8      	it	ge
 8016dfe:	4613      	movge	r3, r2
 8016e00:	627b      	str	r3, [r7, #36]	; 0x24
        inc = -1 * sc * inc;
 8016e02:	69fb      	ldr	r3, [r7, #28]
 8016e04:	425a      	negs	r2, r3
 8016e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e08:	fb02 f303 	mul.w	r3, r2, r3
 8016e0c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	int vold = vars->cur/10;
 8016e0e:	68bb      	ldr	r3, [r7, #8]
 8016e10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016e14:	4a19      	ldr	r2, [pc, #100]	; (8016e7c <inertia_value+0x210>)
 8016e16:	fb82 1203 	smull	r1, r2, r2, r3
 8016e1a:	1092      	asrs	r2, r2, #2
 8016e1c:	17db      	asrs	r3, r3, #31
 8016e1e:	1ad3      	subs	r3, r2, r3
 8016e20:	b21b      	sxth	r3, r3
 8016e22:	61bb      	str	r3, [r7, #24]
	vars->cur += inc;
 8016e24:	68bb      	ldr	r3, [r7, #8]
 8016e26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016e2a:	b29a      	uxth	r2, r3
 8016e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e2e:	b29b      	uxth	r3, r3
 8016e30:	4413      	add	r3, r2
 8016e32:	b29b      	uxth	r3, r3
 8016e34:	b21a      	sxth	r2, r3
 8016e36:	68bb      	ldr	r3, [r7, #8]
 8016e38:	805a      	strh	r2, [r3, #2]
	int16_t vnew = vars->cur/10;
 8016e3a:	68bb      	ldr	r3, [r7, #8]
 8016e3c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016e40:	4a0e      	ldr	r2, [pc, #56]	; (8016e7c <inertia_value+0x210>)
 8016e42:	fb82 1203 	smull	r1, r2, r2, r3
 8016e46:	1092      	asrs	r2, r2, #2
 8016e48:	17db      	asrs	r3, r3, #31
 8016e4a:	1ad3      	subs	r3, r2, r3
 8016e4c:	82fb      	strh	r3, [r7, #22]
    if (pchanged) *pchanged = (vnew==vold) ? 0 : 1;
 8016e4e:	683b      	ldr	r3, [r7, #0]
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d00a      	beq.n	8016e6a <inertia_value+0x1fe>
 8016e54:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016e58:	69ba      	ldr	r2, [r7, #24]
 8016e5a:	429a      	cmp	r2, r3
 8016e5c:	bf14      	ite	ne
 8016e5e:	2301      	movne	r3, #1
 8016e60:	2300      	moveq	r3, #0
 8016e62:	b2db      	uxtb	r3, r3
 8016e64:	461a      	mov	r2, r3
 8016e66:	683b      	ldr	r3, [r7, #0]
 8016e68:	601a      	str	r2, [r3, #0]
    //debug_info(0, "INC/c", inc, vars->cur);
	return vnew;
 8016e6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8016e6e:	4618      	mov	r0, r3
 8016e70:	372c      	adds	r7, #44	; 0x2c
 8016e72:	46bd      	mov	sp, r7
 8016e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e78:	4770      	bx	lr
 8016e7a:	bf00      	nop
 8016e7c:	66666667 	.word	0x66666667
 8016e80:	10624dd3 	.word	0x10624dd3

08016e84 <itm_debug1>:
{
 8016e84:	b580      	push	{r7, lr}
 8016e86:	b086      	sub	sp, #24
 8016e88:	af02      	add	r7, sp, #8
 8016e8a:	60f8      	str	r0, [r7, #12]
 8016e8c:	60b9      	str	r1, [r7, #8]
 8016e8e:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8016e90:	4b08      	ldr	r3, [pc, #32]	; (8016eb4 <itm_debug1+0x30>)
 8016e92:	681a      	ldr	r2, [r3, #0]
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	4013      	ands	r3, r2
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d007      	beq.n	8016eac <itm_debug1+0x28>
 8016e9c:	2301      	movs	r3, #1
 8016e9e:	9300      	str	r3, [sp, #0]
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	2200      	movs	r2, #0
 8016ea4:	6879      	ldr	r1, [r7, #4]
 8016ea6:	68b8      	ldr	r0, [r7, #8]
 8016ea8:	f001 fce4 	bl	8018874 <_itm_debug3>
}
 8016eac:	bf00      	nop
 8016eae:	3710      	adds	r7, #16
 8016eb0:	46bd      	mov	sp, r7
 8016eb2:	bd80      	pop	{r7, pc}
 8016eb4:	20000574 	.word	0x20000574

08016eb8 <itm_debug2>:
{
 8016eb8:	b580      	push	{r7, lr}
 8016eba:	b086      	sub	sp, #24
 8016ebc:	af02      	add	r7, sp, #8
 8016ebe:	60f8      	str	r0, [r7, #12]
 8016ec0:	60b9      	str	r1, [r7, #8]
 8016ec2:	607a      	str	r2, [r7, #4]
 8016ec4:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8016ec6:	4b09      	ldr	r3, [pc, #36]	; (8016eec <itm_debug2+0x34>)
 8016ec8:	681a      	ldr	r2, [r3, #0]
 8016eca:	68fb      	ldr	r3, [r7, #12]
 8016ecc:	4013      	ands	r3, r2
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d007      	beq.n	8016ee2 <itm_debug2+0x2a>
 8016ed2:	2302      	movs	r3, #2
 8016ed4:	9300      	str	r3, [sp, #0]
 8016ed6:	2300      	movs	r3, #0
 8016ed8:	683a      	ldr	r2, [r7, #0]
 8016eda:	6879      	ldr	r1, [r7, #4]
 8016edc:	68b8      	ldr	r0, [r7, #8]
 8016ede:	f001 fcc9 	bl	8018874 <_itm_debug3>
}
 8016ee2:	bf00      	nop
 8016ee4:	3710      	adds	r7, #16
 8016ee6:	46bd      	mov	sp, r7
 8016ee8:	bd80      	pop	{r7, pc}
 8016eea:	bf00      	nop
 8016eec:	20000574 	.word	0x20000574

08016ef0 <itm_debug3>:
{
 8016ef0:	b580      	push	{r7, lr}
 8016ef2:	b086      	sub	sp, #24
 8016ef4:	af02      	add	r7, sp, #8
 8016ef6:	60f8      	str	r0, [r7, #12]
 8016ef8:	60b9      	str	r1, [r7, #8]
 8016efa:	607a      	str	r2, [r7, #4]
 8016efc:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 8016efe:	4b09      	ldr	r3, [pc, #36]	; (8016f24 <itm_debug3+0x34>)
 8016f00:	681a      	ldr	r2, [r3, #0]
 8016f02:	68fb      	ldr	r3, [r7, #12]
 8016f04:	4013      	ands	r3, r2
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d007      	beq.n	8016f1a <itm_debug3+0x2a>
 8016f0a:	2303      	movs	r3, #3
 8016f0c:	9300      	str	r3, [sp, #0]
 8016f0e:	69bb      	ldr	r3, [r7, #24]
 8016f10:	683a      	ldr	r2, [r7, #0]
 8016f12:	6879      	ldr	r1, [r7, #4]
 8016f14:	68b8      	ldr	r0, [r7, #8]
 8016f16:	f001 fcad 	bl	8018874 <_itm_debug3>
}
 8016f1a:	bf00      	nop
 8016f1c:	3710      	adds	r7, #16
 8016f1e:	46bd      	mov	sp, r7
 8016f20:	bd80      	pop	{r7, pc}
 8016f22:	bf00      	nop
 8016f24:	20000574 	.word	0x20000574

08016f28 <pidctl_reset>:
#include <memory.h>
#include "pidctl.h"
#include "misc.h"

void pidctl_reset(_UNUSED_ const pidctl_config_t *c, pidctl_vars_t *v)
{
 8016f28:	b480      	push	{r7}
 8016f2a:	b083      	sub	sp, #12
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	6078      	str	r0, [r7, #4]
 8016f30:	6039      	str	r1, [r7, #0]
    v->has_last = 0;
 8016f32:	683a      	ldr	r2, [r7, #0]
 8016f34:	7b13      	ldrb	r3, [r2, #12]
 8016f36:	f36f 0300 	bfc	r3, #0, #1
 8016f3a:	7313      	strb	r3, [r2, #12]
	v->last_err = 0;
 8016f3c:	683b      	ldr	r3, [r7, #0]
 8016f3e:	2200      	movs	r2, #0
 8016f40:	601a      	str	r2, [r3, #0]
	v->sume     = 0;
 8016f42:	683b      	ldr	r3, [r7, #0]
 8016f44:	2200      	movs	r2, #0
 8016f46:	605a      	str	r2, [r3, #4]
	v->target_v = 0;
 8016f48:	683b      	ldr	r3, [r7, #0]
 8016f4a:	2200      	movs	r2, #0
 8016f4c:	609a      	str	r2, [r3, #8]
	v->stopped = 1;
 8016f4e:	683a      	ldr	r2, [r7, #0]
 8016f50:	7b13      	ldrb	r3, [r2, #12]
 8016f52:	f043 0302 	orr.w	r3, r3, #2
 8016f56:	7313      	strb	r3, [r2, #12]
	v->has_last = 0;
 8016f58:	683a      	ldr	r2, [r7, #0]
 8016f5a:	7b13      	ldrb	r3, [r2, #12]
 8016f5c:	f36f 0300 	bfc	r3, #0, #1
 8016f60:	7313      	strb	r3, [r2, #12]
}
 8016f62:	bf00      	nop
 8016f64:	370c      	adds	r7, #12
 8016f66:	46bd      	mov	sp, r7
 8016f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f6c:	4770      	bx	lr
	...

08016f70 <pidctl_set_target>:

void pidctl_set_target(_UNUSED_ const pidctl_config_t *c, pidctl_vars_t *v, int32_t val)
{
 8016f70:	b580      	push	{r7, lr}
 8016f72:	b084      	sub	sp, #16
 8016f74:	af00      	add	r7, sp, #0
 8016f76:	60f8      	str	r0, [r7, #12]
 8016f78:	60b9      	str	r1, [r7, #8]
 8016f7a:	607a      	str	r2, [r7, #4]
	if ((0)) pidctl_reset(c,v);
    if ((0)) v->sume = val;
    itm_debug1(DBG_PID, "pid trg", val);
 8016f7c:	687a      	ldr	r2, [r7, #4]
 8016f7e:	4905      	ldr	r1, [pc, #20]	; (8016f94 <pidctl_set_target+0x24>)
 8016f80:	2004      	movs	r0, #4
 8016f82:	f7ff ff7f 	bl	8016e84 <itm_debug1>
	v->target_v = val;
 8016f86:	68bb      	ldr	r3, [r7, #8]
 8016f88:	687a      	ldr	r2, [r7, #4]
 8016f8a:	609a      	str	r2, [r3, #8]
}
 8016f8c:	bf00      	nop
 8016f8e:	3710      	adds	r7, #16
 8016f90:	46bd      	mov	sp, r7
 8016f92:	bd80      	pop	{r7, pc}
 8016f94:	0801968c 	.word	0x0801968c

08016f98 <pidctl_value>:

#define MAX_I (25000)

int32_t pidctl_value(const pidctl_config_t *c, pidctl_vars_t *v, int32_t cur_v, uint32_t dt)
{
 8016f98:	b580      	push	{r7, lr}
 8016f9a:	b08a      	sub	sp, #40	; 0x28
 8016f9c:	af02      	add	r7, sp, #8
 8016f9e:	60f8      	str	r0, [r7, #12]
 8016fa0:	60b9      	str	r1, [r7, #8]
 8016fa2:	607a      	str	r2, [r7, #4]
 8016fa4:	603b      	str	r3, [r7, #0]
	// cuv in native BEMF value
    if (!dt) dt = 1;
 8016fa6:	683b      	ldr	r3, [r7, #0]
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d101      	bne.n	8016fb0 <pidctl_value+0x18>
 8016fac:	2301      	movs	r3, #1
 8016fae:	603b      	str	r3, [r7, #0]
    if (dt>100) dt=100;
 8016fb0:	683b      	ldr	r3, [r7, #0]
 8016fb2:	2b64      	cmp	r3, #100	; 0x64
 8016fb4:	d901      	bls.n	8016fba <pidctl_value+0x22>
 8016fb6:	2364      	movs	r3, #100	; 0x64
 8016fb8:	603b      	str	r3, [r7, #0]
	int32_t err = v->target_v - cur_v;
 8016fba:	68bb      	ldr	r3, [r7, #8]
 8016fbc:	689a      	ldr	r2, [r3, #8]
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	1ad3      	subs	r3, r2, r3
 8016fc2:	61fb      	str	r3, [r7, #28]
    if (err> 2*MAX_PID_VALUE) err =  2*MAX_PID_VALUE;
 8016fc4:	69fb      	ldr	r3, [r7, #28]
 8016fc6:	f5b3 7f0c 	cmp.w	r3, #560	; 0x230
 8016fca:	dd02      	ble.n	8016fd2 <pidctl_value+0x3a>
 8016fcc:	f44f 730c 	mov.w	r3, #560	; 0x230
 8016fd0:	61fb      	str	r3, [r7, #28]
    if (err<-2*MAX_PID_VALUE) err = -2*MAX_PID_VALUE;
 8016fd2:	69fb      	ldr	r3, [r7, #28]
 8016fd4:	f513 7f0c 	cmn.w	r3, #560	; 0x230
 8016fd8:	da01      	bge.n	8016fde <pidctl_value+0x46>
 8016fda:	4b3c      	ldr	r3, [pc, #240]	; (80170cc <pidctl_value+0x134>)
 8016fdc:	61fb      	str	r3, [r7, #28]

    int32_t dv = (v->has_last) ? 1000*(err - v->last_err)/((int32_t)dt) : 0; //XXX
 8016fde:	68bb      	ldr	r3, [r7, #8]
 8016fe0:	7b1b      	ldrb	r3, [r3, #12]
 8016fe2:	f003 0301 	and.w	r3, r3, #1
 8016fe6:	b2db      	uxtb	r3, r3
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d00b      	beq.n	8017004 <pidctl_value+0x6c>
 8016fec:	68bb      	ldr	r3, [r7, #8]
 8016fee:	681b      	ldr	r3, [r3, #0]
 8016ff0:	69fa      	ldr	r2, [r7, #28]
 8016ff2:	1ad3      	subs	r3, r2, r3
 8016ff4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016ff8:	fb02 f203 	mul.w	r2, r2, r3
 8016ffc:	683b      	ldr	r3, [r7, #0]
 8016ffe:	fb92 f3f3 	sdiv	r3, r2, r3
 8017002:	e000      	b.n	8017006 <pidctl_value+0x6e>
 8017004:	2300      	movs	r3, #0
 8017006:	61bb      	str	r3, [r7, #24]
	v->last_err = err;
 8017008:	68bb      	ldr	r3, [r7, #8]
 801700a:	69fa      	ldr	r2, [r7, #28]
 801700c:	601a      	str	r2, [r3, #0]
    v->has_last = 1;
 801700e:	68ba      	ldr	r2, [r7, #8]
 8017010:	7b13      	ldrb	r3, [r2, #12]
 8017012:	f043 0301 	orr.w	r3, r3, #1
 8017016:	7313      	strb	r3, [r2, #12]
	if ((1)) v->sume += err*dt;
 8017018:	68bb      	ldr	r3, [r7, #8]
 801701a:	685b      	ldr	r3, [r3, #4]
 801701c:	4619      	mov	r1, r3
 801701e:	69fb      	ldr	r3, [r7, #28]
 8017020:	683a      	ldr	r2, [r7, #0]
 8017022:	fb02 f303 	mul.w	r3, r2, r3
 8017026:	440b      	add	r3, r1
 8017028:	461a      	mov	r2, r3
 801702a:	68bb      	ldr	r3, [r7, #8]
 801702c:	605a      	str	r2, [r3, #4]
    else     v->sume = v->sume*.99 + err*dt;
    if (v->sume>MAX_I) v->sume = MAX_I;
 801702e:	68bb      	ldr	r3, [r7, #8]
 8017030:	685b      	ldr	r3, [r3, #4]
 8017032:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8017036:	4293      	cmp	r3, r2
 8017038:	dd04      	ble.n	8017044 <pidctl_value+0xac>
 801703a:	68bb      	ldr	r3, [r7, #8]
 801703c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8017040:	605a      	str	r2, [r3, #4]
 8017042:	e007      	b.n	8017054 <pidctl_value+0xbc>
    else if (v->sume<-MAX_I) v->sume = -MAX_I;
 8017044:	68bb      	ldr	r3, [r7, #8]
 8017046:	685b      	ldr	r3, [r3, #4]
 8017048:	4a21      	ldr	r2, [pc, #132]	; (80170d0 <pidctl_value+0x138>)
 801704a:	4293      	cmp	r3, r2
 801704c:	da02      	bge.n	8017054 <pidctl_value+0xbc>
 801704e:	68bb      	ldr	r3, [r7, #8]
 8017050:	4a1f      	ldr	r2, [pc, #124]	; (80170d0 <pidctl_value+0x138>)
 8017052:	605a      	str	r2, [r3, #4]
	int32_t iv = v->sume / 100;
 8017054:	68bb      	ldr	r3, [r7, #8]
 8017056:	685b      	ldr	r3, [r3, #4]
 8017058:	4a1e      	ldr	r2, [pc, #120]	; (80170d4 <pidctl_value+0x13c>)
 801705a:	fb82 1203 	smull	r1, r2, r2, r3
 801705e:	1152      	asrs	r2, r2, #5
 8017060:	17db      	asrs	r3, r3, #31
 8017062:	1ad3      	subs	r3, r2, r3
 8017064:	617b      	str	r3, [r7, #20]

	//debug_info('T', 0, "PID  ", err, iv, dv);
	itm_debug2(DBG_PID, "pid tc", v->target_v, cur_v);
 8017066:	68bb      	ldr	r3, [r7, #8]
 8017068:	689a      	ldr	r2, [r3, #8]
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	491a      	ldr	r1, [pc, #104]	; (80170d8 <pidctl_value+0x140>)
 801706e:	2004      	movs	r0, #4
 8017070:	f7ff ff22 	bl	8016eb8 <itm_debug2>
    itm_debug3(DBG_PID, "pid edi", err, dv, v->sume);
 8017074:	68bb      	ldr	r3, [r7, #8]
 8017076:	685b      	ldr	r3, [r3, #4]
 8017078:	9300      	str	r3, [sp, #0]
 801707a:	69bb      	ldr	r3, [r7, #24]
 801707c:	69fa      	ldr	r2, [r7, #28]
 801707e:	4917      	ldr	r1, [pc, #92]	; (80170dc <pidctl_value+0x144>)
 8017080:	2004      	movs	r0, #4
 8017082:	f7ff ff35 	bl	8016ef0 <itm_debug3>

	int32_t r = c->kP * err + (c->kD * dv)/1000 + c->kI * iv;
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	69fa      	ldr	r2, [r7, #28]
 801708c:	fb02 f203 	mul.w	r2, r2, r3
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	689b      	ldr	r3, [r3, #8]
 8017094:	69b9      	ldr	r1, [r7, #24]
 8017096:	fb01 f303 	mul.w	r3, r1, r3
 801709a:	4911      	ldr	r1, [pc, #68]	; (80170e0 <pidctl_value+0x148>)
 801709c:	fb81 0103 	smull	r0, r1, r1, r3
 80170a0:	1189      	asrs	r1, r1, #6
 80170a2:	17db      	asrs	r3, r3, #31
 80170a4:	1acb      	subs	r3, r1, r3
 80170a6:	441a      	add	r2, r3
 80170a8:	68fb      	ldr	r3, [r7, #12]
 80170aa:	685b      	ldr	r3, [r3, #4]
 80170ac:	6979      	ldr	r1, [r7, #20]
 80170ae:	fb01 f303 	mul.w	r3, r1, r3
 80170b2:	4413      	add	r3, r2
 80170b4:	613b      	str	r3, [r7, #16]
	//debug_info('T', 0, "PID*k",  c->kP * err, c->kI * iv, (c->kD * dv)/1000);

	return r/1000;
 80170b6:	693b      	ldr	r3, [r7, #16]
 80170b8:	4a09      	ldr	r2, [pc, #36]	; (80170e0 <pidctl_value+0x148>)
 80170ba:	fb82 1203 	smull	r1, r2, r2, r3
 80170be:	1192      	asrs	r2, r2, #6
 80170c0:	17db      	asrs	r3, r3, #31
 80170c2:	1ad3      	subs	r3, r2, r3
}
 80170c4:	4618      	mov	r0, r3
 80170c6:	3720      	adds	r7, #32
 80170c8:	46bd      	mov	sp, r7
 80170ca:	bd80      	pop	{r7, pc}
 80170cc:	fffffdd0 	.word	0xfffffdd0
 80170d0:	ffff9e58 	.word	0xffff9e58
 80170d4:	51eb851f 	.word	0x51eb851f
 80170d8:	08019694 	.word	0x08019694
 80170dc:	0801969c 	.word	0x0801969c
 80170e0:	10624dd3 	.word	0x10624dd3

080170e4 <itm_debug1>:
{
 80170e4:	b580      	push	{r7, lr}
 80170e6:	b086      	sub	sp, #24
 80170e8:	af02      	add	r7, sp, #8
 80170ea:	60f8      	str	r0, [r7, #12]
 80170ec:	60b9      	str	r1, [r7, #8]
 80170ee:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 80170f0:	4b08      	ldr	r3, [pc, #32]	; (8017114 <itm_debug1+0x30>)
 80170f2:	681a      	ldr	r2, [r3, #0]
 80170f4:	68fb      	ldr	r3, [r7, #12]
 80170f6:	4013      	ands	r3, r2
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d007      	beq.n	801710c <itm_debug1+0x28>
 80170fc:	2301      	movs	r3, #1
 80170fe:	9300      	str	r3, [sp, #0]
 8017100:	2300      	movs	r3, #0
 8017102:	2200      	movs	r2, #0
 8017104:	6879      	ldr	r1, [r7, #4]
 8017106:	68b8      	ldr	r0, [r7, #8]
 8017108:	f001 fbb4 	bl	8018874 <_itm_debug3>
}
 801710c:	bf00      	nop
 801710e:	3710      	adds	r7, #16
 8017110:	46bd      	mov	sp, r7
 8017112:	bd80      	pop	{r7, pc}
 8017114:	20000574 	.word	0x20000574

08017118 <itm_debug2>:
{
 8017118:	b580      	push	{r7, lr}
 801711a:	b086      	sub	sp, #24
 801711c:	af02      	add	r7, sp, #8
 801711e:	60f8      	str	r0, [r7, #12]
 8017120:	60b9      	str	r1, [r7, #8]
 8017122:	607a      	str	r2, [r7, #4]
 8017124:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8017126:	4b09      	ldr	r3, [pc, #36]	; (801714c <itm_debug2+0x34>)
 8017128:	681a      	ldr	r2, [r3, #0]
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	4013      	ands	r3, r2
 801712e:	2b00      	cmp	r3, #0
 8017130:	d007      	beq.n	8017142 <itm_debug2+0x2a>
 8017132:	2302      	movs	r3, #2
 8017134:	9300      	str	r3, [sp, #0]
 8017136:	2300      	movs	r3, #0
 8017138:	683a      	ldr	r2, [r7, #0]
 801713a:	6879      	ldr	r1, [r7, #4]
 801713c:	68b8      	ldr	r0, [r7, #8]
 801713e:	f001 fb99 	bl	8018874 <_itm_debug3>
}
 8017142:	bf00      	nop
 8017144:	3710      	adds	r7, #16
 8017146:	46bd      	mov	sp, r7
 8017148:	bd80      	pop	{r7, pc}
 801714a:	bf00      	nop
 801714c:	20000574 	.word	0x20000574

08017150 <itm_debug3>:
{
 8017150:	b580      	push	{r7, lr}
 8017152:	b086      	sub	sp, #24
 8017154:	af02      	add	r7, sp, #8
 8017156:	60f8      	str	r0, [r7, #12]
 8017158:	60b9      	str	r1, [r7, #8]
 801715a:	607a      	str	r2, [r7, #4]
 801715c:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 801715e:	4b09      	ldr	r3, [pc, #36]	; (8017184 <itm_debug3+0x34>)
 8017160:	681a      	ldr	r2, [r3, #0]
 8017162:	68fb      	ldr	r3, [r7, #12]
 8017164:	4013      	ands	r3, r2
 8017166:	2b00      	cmp	r3, #0
 8017168:	d007      	beq.n	801717a <itm_debug3+0x2a>
 801716a:	2303      	movs	r3, #3
 801716c:	9300      	str	r3, [sp, #0]
 801716e:	69bb      	ldr	r3, [r7, #24]
 8017170:	683a      	ldr	r2, [r7, #0]
 8017172:	6879      	ldr	r1, [r7, #4]
 8017174:	68b8      	ldr	r0, [r7, #8]
 8017176:	f001 fb7d 	bl	8018874 <_itm_debug3>
}
 801717a:	bf00      	nop
 801717c:	3710      	adds	r7, #16
 801717e:	46bd      	mov	sp, r7
 8017180:	bd80      	pop	{r7, pc}
 8017182:	bf00      	nop
 8017184:	20000574 	.word	0x20000574

08017188 <train_error>:
{
 8017188:	b580      	push	{r7, lr}
 801718a:	b082      	sub	sp, #8
 801718c:	af00      	add	r7, sp, #0
 801718e:	6078      	str	r0, [r7, #4]
 8017190:	6039      	str	r1, [r7, #0]
	return trainctl_error('T', code, msg);
 8017192:	683a      	ldr	r2, [r7, #0]
 8017194:	6879      	ldr	r1, [r7, #4]
 8017196:	2054      	movs	r0, #84	; 0x54
 8017198:	f7fe fb74 	bl	8015884 <trainctl_error>
 801719c:	4603      	mov	r3, r0
}
 801719e:	4618      	mov	r0, r3
 80171a0:	3708      	adds	r7, #8
 80171a2:	46bd      	mov	sp, r7
 80171a4:	bd80      	pop	{r7, pc}

080171a6 <train_notif>:
{
 80171a6:	b580      	push	{r7, lr}
 80171a8:	b086      	sub	sp, #24
 80171aa:	af02      	add	r7, sp, #8
 80171ac:	60ba      	str	r2, [r7, #8]
 80171ae:	607b      	str	r3, [r7, #4]
 80171b0:	4603      	mov	r3, r0
 80171b2:	73fb      	strb	r3, [r7, #15]
 80171b4:	460b      	mov	r3, r1
 80171b6:	73bb      	strb	r3, [r7, #14]
	trainctl_notif('T', train_idx, cmd, dta, dtalen);
 80171b8:	7bba      	ldrb	r2, [r7, #14]
 80171ba:	7bf9      	ldrb	r1, [r7, #15]
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	9300      	str	r3, [sp, #0]
 80171c0:	68bb      	ldr	r3, [r7, #8]
 80171c2:	2054      	movs	r0, #84	; 0x54
 80171c4:	f7ff f9f6 	bl	80165b4 <trainctl_notif>
}
 80171c8:	bf00      	nop
 80171ca:	3710      	adds	r7, #16
 80171cc:	46bd      	mov	sp, r7
 80171ce:	bd80      	pop	{r7, pc}

080171d0 <debug_info>:
{
 80171d0:	b580      	push	{r7, lr}
 80171d2:	b088      	sub	sp, #32
 80171d4:	af04      	add	r7, sp, #16
 80171d6:	60f8      	str	r0, [r7, #12]
 80171d8:	60b9      	str	r1, [r7, #8]
 80171da:	607a      	str	r2, [r7, #4]
 80171dc:	603b      	str	r3, [r7, #0]
	trainctl_notif2(sel, num, 'D', msg, v1, v2, v3);
 80171de:	68fb      	ldr	r3, [r7, #12]
 80171e0:	b2d8      	uxtb	r0, r3
 80171e2:	68bb      	ldr	r3, [r7, #8]
 80171e4:	b2d9      	uxtb	r1, r3
 80171e6:	69fb      	ldr	r3, [r7, #28]
 80171e8:	9302      	str	r3, [sp, #8]
 80171ea:	69bb      	ldr	r3, [r7, #24]
 80171ec:	9301      	str	r3, [sp, #4]
 80171ee:	683b      	ldr	r3, [r7, #0]
 80171f0:	9300      	str	r3, [sp, #0]
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	2244      	movs	r2, #68	; 0x44
 80171f6:	f7ff fa01 	bl	80165fc <trainctl_notif2>
}
 80171fa:	bf00      	nop
 80171fc:	3710      	adds	r7, #16
 80171fe:	46bd      	mov	sp, r7
 8017200:	bd80      	pop	{r7, pc}
	...

08017204 <mqf_read_to_spdctl>:
#define CMD_BEMF_OFF		0x41

#define CMD_SETVPWM			0x01
#define CMD_STOP			0x02

LFMQUEUE_DEF_H(to_spdctl, msg_64_t)
 8017204:	b580      	push	{r7, lr}
 8017206:	b082      	sub	sp, #8
 8017208:	af00      	add	r7, sp, #0
 801720a:	6078      	str	r0, [r7, #4]
 801720c:	6879      	ldr	r1, [r7, #4]
 801720e:	4804      	ldr	r0, [pc, #16]	; (8017220 <mqf_read_to_spdctl+0x1c>)
 8017210:	f001 fcb0 	bl	8018b74 <mqf_read>
 8017214:	4603      	mov	r3, r0
 8017216:	4618      	mov	r0, r3
 8017218:	3708      	adds	r7, #8
 801721a:	46bd      	mov	sp, r7
 801721c:	bd80      	pop	{r7, pc}
 801721e:	bf00      	nop
 8017220:	200004e8 	.word	0x200004e8

08017224 <mqf_write_from_spdctl>:
LFMQUEUE_DEF_H(from_spdctl, msg_64_t)
 8017224:	b580      	push	{r7, lr}
 8017226:	b082      	sub	sp, #8
 8017228:	af00      	add	r7, sp, #0
 801722a:	6078      	str	r0, [r7, #4]
 801722c:	6879      	ldr	r1, [r7, #4]
 801722e:	4804      	ldr	r0, [pc, #16]	; (8017240 <mqf_write_from_spdctl+0x1c>)
 8017230:	f001 fc26 	bl	8018a80 <mqf_write>
 8017234:	4603      	mov	r3, r0
 8017236:	4618      	mov	r0, r3
 8017238:	3708      	adds	r7, #8
 801723a:	46bd      	mov	sp, r7
 801723c:	bd80      	pop	{r7, pc}
 801723e:	bf00      	nop
 8017240:	200004f4 	.word	0x200004f4

08017244 <spdctl_reset>:

static void pose_check_trig(int numtrain, train_vars_t *tvars, int32_t lastincr);


static void spdctl_reset(void)
{
 8017244:	b580      	push	{r7, lr}
 8017246:	b082      	sub	sp, #8
 8017248:	af00      	add	r7, sp, #0
	memset(trspc_vars, 0, sizeof(trspc_vars));
 801724a:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 801724e:	2100      	movs	r1, #0
 8017250:	4811      	ldr	r0, [pc, #68]	; (8017298 <spdctl_reset+0x54>)
 8017252:	f001 fd30 	bl	8018cb6 <memset>
	for (int  i = 0; i<NUM_TRAINS; i++) {
 8017256:	2300      	movs	r3, #0
 8017258:	607b      	str	r3, [r7, #4]
 801725a:	e016      	b.n	801728a <spdctl_reset+0x46>
		trspc_vars[i].C1 = 0xFF;
 801725c:	490e      	ldr	r1, [pc, #56]	; (8017298 <spdctl_reset+0x54>)
 801725e:	687a      	ldr	r2, [r7, #4]
 8017260:	4613      	mov	r3, r2
 8017262:	00db      	lsls	r3, r3, #3
 8017264:	1a9b      	subs	r3, r3, r2
 8017266:	00db      	lsls	r3, r3, #3
 8017268:	440b      	add	r3, r1
 801726a:	331c      	adds	r3, #28
 801726c:	22ff      	movs	r2, #255	; 0xff
 801726e:	701a      	strb	r2, [r3, #0]
		trspc_vars[i].C2 = 0xFF;
 8017270:	4909      	ldr	r1, [pc, #36]	; (8017298 <spdctl_reset+0x54>)
 8017272:	687a      	ldr	r2, [r7, #4]
 8017274:	4613      	mov	r3, r2
 8017276:	00db      	lsls	r3, r3, #3
 8017278:	1a9b      	subs	r3, r3, r2
 801727a:	00db      	lsls	r3, r3, #3
 801727c:	440b      	add	r3, r1
 801727e:	331d      	adds	r3, #29
 8017280:	22ff      	movs	r2, #255	; 0xff
 8017282:	701a      	strb	r2, [r3, #0]
	for (int  i = 0; i<NUM_TRAINS; i++) {
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	3301      	adds	r3, #1
 8017288:	607b      	str	r3, [r7, #4]
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	2b07      	cmp	r3, #7
 801728e:	dde5      	ble.n	801725c <spdctl_reset+0x18>
	}
}
 8017290:	bf00      	nop
 8017292:	3708      	adds	r7, #8
 8017294:	46bd      	mov	sp, r7
 8017296:	bd80      	pop	{r7, pc}
 8017298:	200053b8 	.word	0x200053b8

0801729c <spdctl_run_tick>:


void spdctl_run_tick(_UNUSED_ uint32_t notif_flags, _UNUSED_ uint32_t tick, uint32_t dt)
{
 801729c:	b580      	push	{r7, lr}
 801729e:	b090      	sub	sp, #64	; 0x40
 80172a0:	af02      	add	r7, sp, #8
 80172a2:	60f8      	str	r0, [r7, #12]
 80172a4:	60b9      	str	r1, [r7, #8]
 80172a6:	607a      	str	r2, [r7, #4]
	train_tick_last_dt = dt;
 80172a8:	4aa0      	ldr	r2, [pc, #640]	; (801752c <spdctl_run_tick+0x290>)
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	6013      	str	r3, [r2, #0]
	train_ntick++;
 80172ae:	4ba0      	ldr	r3, [pc, #640]	; (8017530 <spdctl_run_tick+0x294>)
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	3301      	adds	r3, #1
 80172b4:	4a9e      	ldr	r2, [pc, #632]	; (8017530 <spdctl_run_tick+0x294>)
 80172b6:	6013      	str	r3, [r2, #0]

	itm_debug1(DBG_SPDCTL ,"------- tk", (int) notif_flags);
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	461a      	mov	r2, r3
 80172bc:	499d      	ldr	r1, [pc, #628]	; (8017534 <spdctl_run_tick+0x298>)
 80172be:	2010      	movs	r0, #16
 80172c0:	f7ff ff10 	bl	80170e4 <itm_debug1>
	static int first=1;
	if (first) {
 80172c4:	4b9c      	ldr	r3, [pc, #624]	; (8017538 <spdctl_run_tick+0x29c>)
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d004      	beq.n	80172d6 <spdctl_run_tick+0x3a>
		first = 0;
 80172cc:	4b9a      	ldr	r3, [pc, #616]	; (8017538 <spdctl_run_tick+0x29c>)
 80172ce:	2200      	movs	r2, #0
 80172d0:	601a      	str	r2, [r3, #0]
		spdctl_reset();
 80172d2:	f7ff ffb7 	bl	8017244 <spdctl_reset>
       
	}
	/* process messages */
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_spdctl(&m);
 80172d6:	f107 0318 	add.w	r3, r7, #24
 80172da:	4618      	mov	r0, r3
 80172dc:	f7ff ff92 	bl	8017204 <mqf_read_to_spdctl>
 80172e0:	6338      	str	r0, [r7, #48]	; 0x30
		if (rc) break;
 80172e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d002      	beq.n	80172ee <spdctl_run_tick+0x52>
                    break;
            }
        }
	}
	/* process trains */
	for (int i=0; i<NUM_TRAINS; i++) {
 80172e8:	2300      	movs	r3, #0
 80172ea:	637b      	str	r3, [r7, #52]	; 0x34
 80172ec:	e117      	b.n	801751e <spdctl_run_tick+0x282>
        switch (m.cmd) {
 80172ee:	7ebb      	ldrb	r3, [r7, #26]
 80172f0:	2bfc      	cmp	r3, #252	; 0xfc
 80172f2:	d007      	beq.n	8017304 <spdctl_run_tick+0x68>
 80172f4:	2bfc      	cmp	r3, #252	; 0xfc
 80172f6:	db16      	blt.n	8017326 <spdctl_run_tick+0x8a>
 80172f8:	3bfe      	subs	r3, #254	; 0xfe
 80172fa:	2b01      	cmp	r3, #1
 80172fc:	d813      	bhi.n	8017326 <spdctl_run_tick+0x8a>
            spdctl_reset();
 80172fe:	f7ff ffa1 	bl	8017244 <spdctl_reset>
            break;
 8017302:	e013      	b.n	801732c <spdctl_run_tick+0x90>
        	if (m.v1u != run_mode) {
 8017304:	8bba      	ldrh	r2, [r7, #28]
 8017306:	4b8d      	ldr	r3, [pc, #564]	; (801753c <spdctl_run_tick+0x2a0>)
 8017308:	781b      	ldrb	r3, [r3, #0]
 801730a:	b29b      	uxth	r3, r3
 801730c:	429a      	cmp	r2, r3
 801730e:	d00c      	beq.n	801732a <spdctl_run_tick+0x8e>
        		run_mode = (runmode_t) m.v1u;
 8017310:	8bbb      	ldrh	r3, [r7, #28]
 8017312:	b2da      	uxtb	r2, r3
 8017314:	4b89      	ldr	r3, [pc, #548]	; (801753c <spdctl_run_tick+0x2a0>)
 8017316:	701a      	strb	r2, [r3, #0]
        		testerAddr = m.from;
 8017318:	7e7a      	ldrb	r2, [r7, #25]
 801731a:	4b89      	ldr	r3, [pc, #548]	; (8017540 <spdctl_run_tick+0x2a4>)
 801731c:	701a      	strb	r2, [r3, #0]
        		first = 1;
 801731e:	4b86      	ldr	r3, [pc, #536]	; (8017538 <spdctl_run_tick+0x29c>)
 8017320:	2201      	movs	r2, #1
 8017322:	601a      	str	r2, [r3, #0]
            break;
 8017324:	e001      	b.n	801732a <spdctl_run_tick+0x8e>
        	break;
 8017326:	bf00      	nop
 8017328:	e000      	b.n	801732c <spdctl_run_tick+0x90>
            break;
 801732a:	bf00      	nop
        switch (run_mode) {
 801732c:	4b83      	ldr	r3, [pc, #524]	; (801753c <spdctl_run_tick+0x2a0>)
 801732e:	781b      	ldrb	r3, [r3, #0]
 8017330:	2b00      	cmp	r3, #0
 8017332:	f000 80e5 	beq.w	8017500 <spdctl_run_tick+0x264>
 8017336:	2b01      	cmp	r3, #1
 8017338:	d000      	beq.n	801733c <spdctl_run_tick+0xa0>
        	continue;
 801733a:	e0e8      	b.n	801750e <spdctl_run_tick+0x272>
        if (IS_TRAIN_SC(m.to)) {
 801733c:	7e3b      	ldrb	r3, [r7, #24]
 801733e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8017342:	2bc8      	cmp	r3, #200	; 0xc8
 8017344:	f040 80de 	bne.w	8017504 <spdctl_run_tick+0x268>
            int tidx = m.to & 0x7;
 8017348:	7e3b      	ldrb	r3, [r7, #24]
 801734a:	f003 0307 	and.w	r3, r3, #7
 801734e:	62fb      	str	r3, [r7, #44]	; 0x2c
            USE_TRAIN(tidx)
 8017350:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017352:	f7fe fc47 	bl	8015be4 <get_train_cnf>
 8017356:	62b8      	str	r0, [r7, #40]	; 0x28
 8017358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801735a:	4613      	mov	r3, r2
 801735c:	00db      	lsls	r3, r3, #3
 801735e:	1a9b      	subs	r3, r3, r2
 8017360:	00db      	lsls	r3, r3, #3
 8017362:	4a78      	ldr	r2, [pc, #480]	; (8017544 <spdctl_run_tick+0x2a8>)
 8017364:	4413      	add	r3, r2
 8017366:	627b      	str	r3, [r7, #36]	; 0x24
            switch (m.cmd) {
 8017368:	7ebb      	ldrb	r3, [r7, #26]
 801736a:	2b10      	cmp	r3, #16
 801736c:	f000 8093 	beq.w	8017496 <spdctl_run_tick+0x1fa>
 8017370:	2b10      	cmp	r3, #16
 8017372:	dc02      	bgt.n	801737a <spdctl_run_tick+0xde>
 8017374:	2b03      	cmp	r3, #3
 8017376:	d007      	beq.n	8017388 <spdctl_run_tick+0xec>
                    break;
 8017378:	e0c9      	b.n	801750e <spdctl_run_tick+0x272>
            switch (m.cmd) {
 801737a:	2b11      	cmp	r3, #17
 801737c:	f000 8096 	beq.w	80174ac <spdctl_run_tick+0x210>
 8017380:	2b50      	cmp	r3, #80	; 0x50
 8017382:	f000 80ad 	beq.w	80174e0 <spdctl_run_tick+0x244>
                    break;
 8017386:	e0c2      	b.n	801750e <spdctl_run_tick+0x272>
                    if (m.from == tvars->C1) {
 8017388:	7e7a      	ldrb	r2, [r7, #25]
 801738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801738c:	7f1b      	ldrb	r3, [r3, #28]
 801738e:	429a      	cmp	r2, r3
 8017390:	d119      	bne.n	80173c6 <spdctl_run_tick+0x12a>
                        itm_debug3(DBG_PID, "st bemf", tidx, m.v1, m.from);
 8017392:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8017396:	461a      	mov	r2, r3
 8017398:	7e7b      	ldrb	r3, [r7, #25]
 801739a:	9300      	str	r3, [sp, #0]
 801739c:	4613      	mov	r3, r2
 801739e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80173a0:	4969      	ldr	r1, [pc, #420]	; (8017548 <spdctl_run_tick+0x2ac>)
 80173a2:	2004      	movs	r0, #4
 80173a4:	f7ff fed4 	bl	8017150 <itm_debug3>
                        if (!tvars->c2bemf) tvars->bemf_cv = m.v1;
 80173a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173aa:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80173ae:	f003 0301 	and.w	r3, r3, #1
 80173b2:	b2db      	uxtb	r3, r3
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	f040 80a7 	bne.w	8017508 <spdctl_run_tick+0x26c>
 80173ba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80173be:	461a      	mov	r2, r3
 80173c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173c2:	605a      	str	r2, [r3, #4]
                        break;
 80173c4:	e0a0      	b.n	8017508 <spdctl_run_tick+0x26c>
                    } else if (m.from == tvars->C2) {
 80173c6:	7e7a      	ldrb	r2, [r7, #25]
 80173c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173ca:	7f5b      	ldrb	r3, [r3, #29]
 80173cc:	429a      	cmp	r2, r3
 80173ce:	d159      	bne.n	8017484 <spdctl_run_tick+0x1e8>
                        itm_debug3(DBG_PID, "c2 bemf", tidx, m.v1, m.from);
 80173d0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80173d4:	461a      	mov	r2, r3
 80173d6:	7e7b      	ldrb	r3, [r7, #25]
 80173d8:	9300      	str	r3, [sp, #0]
 80173da:	4613      	mov	r3, r2
 80173dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80173de:	495b      	ldr	r1, [pc, #364]	; (801754c <spdctl_run_tick+0x2b0>)
 80173e0:	2004      	movs	r0, #4
 80173e2:	f7ff feb5 	bl	8017150 <itm_debug3>
                        if (tvars->c2bemf) tvars->bemf_cv = m.v1;
 80173e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173e8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80173ec:	f003 0301 	and.w	r3, r3, #1
 80173f0:	b2db      	uxtb	r3, r3
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d005      	beq.n	8017402 <spdctl_run_tick+0x166>
 80173f6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80173fa:	461a      	mov	r2, r3
 80173fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173fe:	605a      	str	r2, [r3, #4]
                    break;
 8017400:	e084      	b.n	801750c <spdctl_run_tick+0x270>
                        else if (abs(m.v1) > abs(tvars->bemf_cv)+50) {
 8017402:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8017406:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 801740a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 801740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017410:	685b      	ldr	r3, [r3, #4]
 8017412:	2b00      	cmp	r3, #0
 8017414:	bfb8      	it	lt
 8017416:	425b      	neglt	r3, r3
 8017418:	3332      	adds	r3, #50	; 0x32
 801741a:	429a      	cmp	r2, r3
 801741c:	dd76      	ble.n	801750c <spdctl_run_tick+0x270>
                        	itm_debug3(DBG_SPDCTL|DBG_PRES, "c2_hi", tidx, m.v1, tvars->bemf_cv);
 801741e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8017422:	461a      	mov	r2, r3
 8017424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017426:	685b      	ldr	r3, [r3, #4]
 8017428:	9300      	str	r3, [sp, #0]
 801742a:	4613      	mov	r3, r2
 801742c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801742e:	4948      	ldr	r1, [pc, #288]	; (8017550 <spdctl_run_tick+0x2b4>)
 8017430:	2050      	movs	r0, #80	; 0x50
 8017432:	f7ff fe8d 	bl	8017150 <itm_debug3>
                        	m.from = MA_TRAIN_SC(tidx);
 8017436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017438:	b25b      	sxtb	r3, r3
 801743a:	f003 0307 	and.w	r3, r3, #7
 801743e:	b25b      	sxtb	r3, r3
 8017440:	f063 0337 	orn	r3, r3, #55	; 0x37
 8017444:	b25b      	sxtb	r3, r3
 8017446:	b2db      	uxtb	r3, r3
 8017448:	747b      	strb	r3, [r7, #17]
                        	m.to = MA_CONTROL_T(tidx);
 801744a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801744c:	b25b      	sxtb	r3, r3
 801744e:	f003 0307 	and.w	r3, r3, #7
 8017452:	b25b      	sxtb	r3, r3
 8017454:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8017458:	b25b      	sxtb	r3, r3
 801745a:	b2db      	uxtb	r3, r3
 801745c:	743b      	strb	r3, [r7, #16]
                        	m.cmd = CMD_BEMF_DETECT_ON_C2;
 801745e:	2313      	movs	r3, #19
 8017460:	74bb      	strb	r3, [r7, #18]
                        	m.v1u = tvars->C2;
 8017462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017464:	7f5b      	ldrb	r3, [r3, #29]
 8017466:	b29b      	uxth	r3, r3
 8017468:	82bb      	strh	r3, [r7, #20]
                            mqf_write_from_spdctl(&m);
 801746a:	f107 0310 	add.w	r3, r7, #16
 801746e:	4618      	mov	r0, r3
 8017470:	f7ff fed8 	bl	8017224 <mqf_write_from_spdctl>
                            tvars->c2bemf = 1;
 8017474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017476:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 801747a:	f043 0301 	orr.w	r3, r3, #1
 801747e:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
                    break;
 8017482:	e043      	b.n	801750c <spdctl_run_tick+0x270>
                        itm_debug2(DBG_ERR|DBG_PID, "unk bemf", m.v1, m.from);
 8017484:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8017488:	461a      	mov	r2, r3
 801748a:	7e7b      	ldrb	r3, [r7, #25]
 801748c:	4931      	ldr	r1, [pc, #196]	; (8017554 <spdctl_run_tick+0x2b8>)
 801748e:	4832      	ldr	r0, [pc, #200]	; (8017558 <spdctl_run_tick+0x2bc>)
 8017490:	f7ff fe42 	bl	8017118 <itm_debug2>
                    break;
 8017494:	e03a      	b.n	801750c <spdctl_run_tick+0x270>
                    itm_debug1(DBG_SPDCTL, "set_t_spd", m.v1u);
 8017496:	8bbb      	ldrh	r3, [r7, #28]
 8017498:	461a      	mov	r2, r3
 801749a:	4930      	ldr	r1, [pc, #192]	; (801755c <spdctl_run_tick+0x2c0>)
 801749c:	2010      	movs	r0, #16
 801749e:	f7ff fe21 	bl	80170e4 <itm_debug1>
                    tvars->target_speed = (int16_t) m.v1u;
 80174a2:	8bbb      	ldrh	r3, [r7, #28]
 80174a4:	b21a      	sxth	r2, r3
 80174a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174a8:	801a      	strh	r2, [r3, #0]
                    break;
 80174aa:	e030      	b.n	801750e <spdctl_run_tick+0x272>
                    itm_debug3(DBG_SPDCTL|DBG_CTRL, "set_c1_c2", tidx, m.vbytes[0], m.vbytes[2]);
 80174ac:	7f3b      	ldrb	r3, [r7, #28]
 80174ae:	461a      	mov	r2, r3
 80174b0:	7fbb      	ldrb	r3, [r7, #30]
 80174b2:	9300      	str	r3, [sp, #0]
 80174b4:	4613      	mov	r3, r2
 80174b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80174b8:	4929      	ldr	r1, [pc, #164]	; (8017560 <spdctl_run_tick+0x2c4>)
 80174ba:	f44f 6082 	mov.w	r0, #1040	; 0x410
 80174be:	f7ff fe47 	bl	8017150 <itm_debug3>
                    set_c1_c2(tidx, tvars, m.vbytes[0], m.vbytes[1], m.vbytes[2], m.vbytes[3]);
 80174c2:	7f39      	ldrb	r1, [r7, #28]
 80174c4:	7f7b      	ldrb	r3, [r7, #29]
 80174c6:	b258      	sxtb	r0, r3
 80174c8:	7fbb      	ldrb	r3, [r7, #30]
 80174ca:	7ffa      	ldrb	r2, [r7, #31]
 80174cc:	b252      	sxtb	r2, r2
 80174ce:	9201      	str	r2, [sp, #4]
 80174d0:	9300      	str	r3, [sp, #0]
 80174d2:	4603      	mov	r3, r0
 80174d4:	460a      	mov	r2, r1
 80174d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80174d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80174da:	f000 fa75 	bl	80179c8 <set_c1_c2>
                    break;
 80174de:	e016      	b.n	801750e <spdctl_run_tick+0x272>
                	itm_debug2(DBG_POSEC, "POSE set", tidx, m.v32);
 80174e0:	69fb      	ldr	r3, [r7, #28]
 80174e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80174e4:	491f      	ldr	r1, [pc, #124]	; (8017564 <spdctl_run_tick+0x2c8>)
 80174e6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80174ea:	f7ff fe15 	bl	8017118 <itm_debug2>
                	tvars->pose_trig = m.v32;
 80174ee:	69fa      	ldr	r2, [r7, #28]
 80174f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174f2:	62da      	str	r2, [r3, #44]	; 0x2c
                	pose_check_trig(tidx, tvars, 0);
 80174f4:	2200      	movs	r2, #0
 80174f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80174f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80174fa:	f000 fc09 	bl	8017d10 <pose_check_trig>
                	break;
 80174fe:	e006      	b.n	801750e <spdctl_run_tick+0x272>
        	continue;
 8017500:	bf00      	nop
 8017502:	e6e8      	b.n	80172d6 <spdctl_run_tick+0x3a>
        }
 8017504:	bf00      	nop
 8017506:	e6e6      	b.n	80172d6 <spdctl_run_tick+0x3a>
                        break;
 8017508:	bf00      	nop
 801750a:	e6e4      	b.n	80172d6 <spdctl_run_tick+0x3a>
                    break;
 801750c:	bf00      	nop
	for (;;) {
 801750e:	e6e2      	b.n	80172d6 <spdctl_run_tick+0x3a>
		//itm_debug1(DBG_SPDCTL, "------ pc", i);
		train_periodic_control(i, dt);
 8017510:	6879      	ldr	r1, [r7, #4]
 8017512:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017514:	f000 f828 	bl	8017568 <train_periodic_control>
	for (int i=0; i<NUM_TRAINS; i++) {
 8017518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801751a:	3301      	adds	r3, #1
 801751c:	637b      	str	r3, [r7, #52]	; 0x34
 801751e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017520:	2b07      	cmp	r3, #7
 8017522:	ddf5      	ble.n	8017510 <spdctl_run_tick+0x274>
	}
}
 8017524:	bf00      	nop
 8017526:	3738      	adds	r7, #56	; 0x38
 8017528:	46bd      	mov	sp, r7
 801752a:	bd80      	pop	{r7, pc}
 801752c:	200053b0 	.word	0x200053b0
 8017530:	200053b4 	.word	0x200053b4
 8017534:	080196a4 	.word	0x080196a4
 8017538:	2000056c 	.word	0x2000056c
 801753c:	200053a6 	.word	0x200053a6
 8017540:	200053a7 	.word	0x200053a7
 8017544:	200053b8 	.word	0x200053b8
 8017548:	080196b0 	.word	0x080196b0
 801754c:	080196b8 	.word	0x080196b8
 8017550:	080196c0 	.word	0x080196c0
 8017554:	080196c8 	.word	0x080196c8
 8017558:	80000004 	.word	0x80000004
 801755c:	080196d4 	.word	0x080196d4
 8017560:	080196e0 	.word	0x080196e0
 8017564:	080196ec 	.word	0x080196ec

08017568 <train_periodic_control>:
    


static void train_periodic_control(int numtrain, uint32_t dt)
{
 8017568:	b580      	push	{r7, lr}
 801756a:	b096      	sub	sp, #88	; 0x58
 801756c:	af02      	add	r7, sp, #8
 801756e:	6078      	str	r0, [r7, #4]
 8017570:	6039      	str	r1, [r7, #0]
	if (stop_all) return;
 8017572:	4bb0      	ldr	r3, [pc, #704]	; (8017834 <train_periodic_control+0x2cc>)
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	2b00      	cmp	r3, #0
 8017578:	f040 8218 	bne.w	80179ac <train_periodic_control+0x444>

	//num_train_periodic_control++;

	USE_TRAIN(numtrain)	// tconf tvars
 801757c:	6878      	ldr	r0, [r7, #4]
 801757e:	f7fe fb31 	bl	8015be4 <get_train_cnf>
 8017582:	6438      	str	r0, [r7, #64]	; 0x40
 8017584:	687a      	ldr	r2, [r7, #4]
 8017586:	4613      	mov	r3, r2
 8017588:	00db      	lsls	r3, r3, #3
 801758a:	1a9b      	subs	r3, r3, r2
 801758c:	00db      	lsls	r3, r3, #3
 801758e:	4aaa      	ldr	r2, [pc, #680]	; (8017838 <train_periodic_control+0x2d0>)
 8017590:	4413      	add	r3, r2
 8017592:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (!tconf) {
 8017594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017596:	2b00      	cmp	r3, #0
 8017598:	f000 820a 	beq.w	80179b0 <train_periodic_control+0x448>
        if ((0)) itm_debug1(DBG_SPDCTL, "unconf tr", numtrain);
        return;
    }
	if (!tconf->enabled) {
 801759c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801759e:	7c9b      	ldrb	r3, [r3, #18]
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	f000 8207 	beq.w	80179b4 <train_periodic_control+0x44c>
		//itm_debug1(DBG_SPDCTL, "disabled", numtrain);
		return;
	}
	int16_t v = tvars->target_speed;
 80175a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80175a8:	881b      	ldrh	r3, [r3, #0]
 80175aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	//int16_t v = tvars->target_speed * tvars->C1_dir;

	itm_debug2(DBG_SPDCTL, "target", numtrain, v);
 80175ae:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80175b2:	687a      	ldr	r2, [r7, #4]
 80175b4:	49a1      	ldr	r1, [pc, #644]	; (801783c <train_periodic_control+0x2d4>)
 80175b6:	2010      	movs	r0, #16
 80175b8:	f7ff fdae 	bl	8017118 <itm_debug2>
			lastspeed = v;
		}
        return;
	}*/
    // inertia before PID
	if (1==tconf->enable_inertia) {
 80175bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80175be:	7c5b      	ldrb	r3, [r3, #17]
 80175c0:	2b01      	cmp	r3, #1
 80175c2:	d120      	bne.n	8017606 <train_periodic_control+0x9e>
		int changed;
		tvars->inertiavars.target = tvars->target_speed;
 80175c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80175c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80175ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80175cc:	831a      	strh	r2, [r3, #24]
		v = inertia_value(&tconf->inertiacnf, &tvars->inertiavars, dt, &changed);
 80175ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80175d0:	f103 000c 	add.w	r0, r3, #12
 80175d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80175d6:	f103 0118 	add.w	r1, r3, #24
 80175da:	683b      	ldr	r3, [r7, #0]
 80175dc:	b29a      	uxth	r2, r3
 80175de:	f107 031c 	add.w	r3, r7, #28
 80175e2:	f7ff fb43 	bl	8016c6c <inertia_value>
 80175e6:	4603      	mov	r3, r0
 80175e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		itm_debug3(DBG_INERTIA, "inertia", numtrain, tvars->target_speed, v);
 80175ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80175ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80175f2:	461a      	mov	r2, r3
 80175f4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80175f8:	9300      	str	r3, [sp, #0]
 80175fa:	4613      	mov	r3, r2
 80175fc:	687a      	ldr	r2, [r7, #4]
 80175fe:	4990      	ldr	r1, [pc, #576]	; (8017840 <train_periodic_control+0x2d8>)
 8017600:	2008      	movs	r0, #8
 8017602:	f7ff fda5 	bl	8017150 <itm_debug3>
	/*if ((0)) {
		static int16_t lastspeed = 9999;
		//if (v != lastspeed) debug_info('T', 0, "trg.v= ", v,0,0);
		lastspeed = v;
	}*/
    if (tconf->enable_pid) {
 8017606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017608:	7cdb      	ldrb	r3, [r3, #19]
 801760a:	2b00      	cmp	r3, #0
 801760c:	d01d      	beq.n	801764a <train_periodic_control+0xe2>
        // corresponding BEMF target
        // 100% = 1.5V
        int32_t tbemf = 150*v/10 * tvars->C1_dir;
 801760e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8017612:	2296      	movs	r2, #150	; 0x96
 8017614:	fb02 f303 	mul.w	r3, r2, r3
 8017618:	4a8a      	ldr	r2, [pc, #552]	; (8017844 <train_periodic_control+0x2dc>)
 801761a:	fb82 1203 	smull	r1, r2, r2, r3
 801761e:	1092      	asrs	r2, r2, #2
 8017620:	17db      	asrs	r3, r3, #31
 8017622:	1ad3      	subs	r3, r2, r3
 8017624:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017626:	f992 201e 	ldrsb.w	r2, [r2, #30]
 801762a:	fb02 f303 	mul.w	r3, r2, r3
 801762e:	63bb      	str	r3, [r7, #56]	; 0x38
        tbemf = tbemf / 4; //XXX why ?? new cables (more capacitance ?)
 8017630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017632:	2b00      	cmp	r3, #0
 8017634:	da00      	bge.n	8017638 <train_periodic_control+0xd0>
 8017636:	3303      	adds	r3, #3
 8017638:	109b      	asrs	r3, r3, #2
 801763a:	63bb      	str	r3, [r7, #56]	; 0x38
        // TODO make this divisor a parameter
        pidctl_set_target(&tconf->pidcnf, &tvars->pidvars, tbemf);
 801763c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801763e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017640:	3308      	adds	r3, #8
 8017642:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017644:	4619      	mov	r1, r3
 8017646:	f7ff fc93 	bl	8016f70 <pidctl_set_target>
    }
    /*
    canton_vars_t *cv = get_canton_vars(tvars->current_canton);
    int32_t bemf = cv->bemf_centivolt;
    */
    int32_t bemf = tvars->bemf_cv;
 801764a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801764c:	685b      	ldr	r3, [r3, #4]
 801764e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (tconf->bemfIIR) {
 8017650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017652:	7d9b      	ldrb	r3, [r3, #22]
 8017654:	2b00      	cmp	r3, #0
 8017656:	d017      	beq.n	8017688 <train_periodic_control+0x120>
    	tvars->bemfiir = (80*tvars->bemfiir + 20*bemf)/100;
 8017658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801765a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801765c:	4613      	mov	r3, r2
 801765e:	009b      	lsls	r3, r3, #2
 8017660:	4413      	add	r3, r2
 8017662:	011b      	lsls	r3, r3, #4
 8017664:	4619      	mov	r1, r3
 8017666:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017668:	4613      	mov	r3, r2
 801766a:	009b      	lsls	r3, r3, #2
 801766c:	4413      	add	r3, r2
 801766e:	009b      	lsls	r3, r3, #2
 8017670:	440b      	add	r3, r1
 8017672:	4a75      	ldr	r2, [pc, #468]	; (8017848 <train_periodic_control+0x2e0>)
 8017674:	fb82 1203 	smull	r1, r2, r2, r3
 8017678:	1152      	asrs	r2, r2, #5
 801767a:	17db      	asrs	r3, r3, #31
 801767c:	1ad2      	subs	r2, r2, r3
 801767e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017680:	631a      	str	r2, [r3, #48]	; 0x30
    	bemf = tvars->bemfiir;
 8017682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017686:	64bb      	str	r3, [r7, #72]	; 0x48
    }
    if (tconf->enable_pid) {
 8017688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801768a:	7cdb      	ldrb	r3, [r3, #19]
 801768c:	2b00      	cmp	r3, #0
 801768e:	f000 808e 	beq.w	80177ae <train_periodic_control+0x246>
    	if (tvars->target_speed) {
 8017692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017694:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017698:	2b00      	cmp	r3, #0
 801769a:	d004      	beq.n	80176a6 <train_periodic_control+0x13e>
    		tvars->pidvars.stopped = 0;
 801769c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801769e:	7d13      	ldrb	r3, [r2, #20]
 80176a0:	f36f 0341 	bfc	r3, #1, #1
 80176a4:	7513      	strb	r3, [r2, #20]
    	}
        if (!tvars->pidvars.stopped && (tvars->target_speed == 0) && (abs(tvars->bemf_cv)<10)) {
 80176a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176a8:	7d1b      	ldrb	r3, [r3, #20]
 80176aa:	f003 0302 	and.w	r3, r3, #2
 80176ae:	b2db      	uxtb	r3, r3
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d12c      	bne.n	801770e <train_periodic_control+0x1a6>
 80176b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d127      	bne.n	801770e <train_periodic_control+0x1a6>
 80176be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176c0:	685b      	ldr	r3, [r3, #4]
 80176c2:	f113 0f09 	cmn.w	r3, #9
 80176c6:	db22      	blt.n	801770e <train_periodic_control+0x1a6>
 80176c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176ca:	685b      	ldr	r3, [r3, #4]
 80176cc:	2b09      	cmp	r3, #9
 80176ce:	dc1e      	bgt.n	801770e <train_periodic_control+0x1a6>
    		itm_debug1(DBG_PID, "stop", 0);
 80176d0:	2200      	movs	r2, #0
 80176d2:	495e      	ldr	r1, [pc, #376]	; (801784c <train_periodic_control+0x2e4>)
 80176d4:	2004      	movs	r0, #4
 80176d6:	f7ff fd05 	bl	80170e4 <itm_debug1>
        	//debug_info('T', 0, "ZERO", cv->bemf_centivolt,0, 0);
			pidctl_reset(&tconf->pidcnf, &tvars->pidvars);
 80176da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80176dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176de:	3308      	adds	r3, #8
 80176e0:	4619      	mov	r1, r3
 80176e2:	4610      	mov	r0, r2
 80176e4:	f7ff fc20 	bl	8016f28 <pidctl_reset>
			debug_info('T', numtrain, "STOP_PID", 0,0, 0);
 80176e8:	6879      	ldr	r1, [r7, #4]
 80176ea:	2300      	movs	r3, #0
 80176ec:	9301      	str	r3, [sp, #4]
 80176ee:	2300      	movs	r3, #0
 80176f0:	9300      	str	r3, [sp, #0]
 80176f2:	2300      	movs	r3, #0
 80176f4:	4a56      	ldr	r2, [pc, #344]	; (8017850 <train_periodic_control+0x2e8>)
 80176f6:	2054      	movs	r0, #84	; 0x54
 80176f8:	f7ff fd6a 	bl	80171d0 <debug_info>
			tvars->pidvars.stopped = 1;
 80176fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80176fe:	7d13      	ldrb	r3, [r2, #20]
 8017700:	f043 0302 	orr.w	r3, r3, #2
 8017704:	7513      	strb	r3, [r2, #20]
        	v = 0;
 8017706:	2300      	movs	r3, #0
 8017708:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 801770c:	e04f      	b.n	80177ae <train_periodic_control+0x246>
        } else if (tvars->pidvars.stopped) {
 801770e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017710:	7d1b      	ldrb	r3, [r3, #20]
 8017712:	f003 0302 	and.w	r3, r3, #2
 8017716:	b2db      	uxtb	r3, r3
 8017718:	2b00      	cmp	r3, #0
 801771a:	d00a      	beq.n	8017732 <train_periodic_control+0x1ca>
    		itm_debug2(DBG_PID, "stopped", numtrain, v);
 801771c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8017720:	687a      	ldr	r2, [r7, #4]
 8017722:	494c      	ldr	r1, [pc, #304]	; (8017854 <train_periodic_control+0x2ec>)
 8017724:	2004      	movs	r0, #4
 8017726:	f7ff fcf7 	bl	8017118 <itm_debug2>
        	v = 0;
 801772a:	2300      	movs	r3, #0
 801772c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8017730:	e03d      	b.n	80177ae <train_periodic_control+0x246>
        } else {
        	itm_debug3(DBG_PID, "pid", numtrain, bemf, v);
 8017732:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8017736:	9300      	str	r3, [sp, #0]
 8017738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801773a:	687a      	ldr	r2, [r7, #4]
 801773c:	4946      	ldr	r1, [pc, #280]	; (8017858 <train_periodic_control+0x2f0>)
 801773e:	2004      	movs	r0, #4
 8017740:	f7ff fd06 	bl	8017150 <itm_debug3>
        	//const canton_config_t *cc = get_canton_cnf(vars->current_canton);
        	if (bemf>MAX_PID_VALUE)  bemf=MAX_PID_VALUE; // XXX
 8017744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017746:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 801774a:	dd02      	ble.n	8017752 <train_periodic_control+0x1ea>
 801774c:	f44f 738c 	mov.w	r3, #280	; 0x118
 8017750:	64bb      	str	r3, [r7, #72]	; 0x48
        	if (bemf<-MAX_PID_VALUE) bemf=-MAX_PID_VALUE;
 8017752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017754:	f513 7f8c 	cmn.w	r3, #280	; 0x118
 8017758:	da01      	bge.n	801775e <train_periodic_control+0x1f6>
 801775a:	4b40      	ldr	r3, [pc, #256]	; (801785c <train_periodic_control+0x2f4>)
 801775c:	64bb      	str	r3, [r7, #72]	; 0x48

        	int32_t v2 = pidctl_value(&tconf->pidcnf, &tvars->pidvars, bemf, dt);
 801775e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8017760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017762:	f103 0108 	add.w	r1, r3, #8
 8017766:	683b      	ldr	r3, [r7, #0]
 8017768:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801776a:	f7ff fc15 	bl	8016f98 <pidctl_value>
 801776e:	6378      	str	r0, [r7, #52]	; 0x34
        	int32_t v3;
        	v3 = (v2>100) ? 100 : v2;
 8017770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017772:	2b64      	cmp	r3, #100	; 0x64
 8017774:	bfa8      	it	ge
 8017776:	2364      	movge	r3, #100	; 0x64
 8017778:	633b      	str	r3, [r7, #48]	; 0x30
        	v3 = (v3<-100) ? -100: v3;
 801777a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801777c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8017780:	4293      	cmp	r3, r2
 8017782:	bfb8      	it	lt
 8017784:	4613      	movlt	r3, r2
 8017786:	633b      	str	r3, [r7, #48]	; 0x30
        	itm_debug3(DBG_PID, "pid/r", numtrain, v3, v2);
 8017788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801778a:	9300      	str	r3, [sp, #0]
 801778c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801778e:	687a      	ldr	r2, [r7, #4]
 8017790:	4933      	ldr	r1, [pc, #204]	; (8017860 <train_periodic_control+0x2f8>)
 8017792:	2004      	movs	r0, #4
 8017794:	f7ff fcdc 	bl	8017150 <itm_debug3>
        	v = (int16_t)v3 * tvars->C1_dir; // because it will be multiplied again when setting pwm
 8017798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801779a:	b29a      	uxth	r2, r3
 801779c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801779e:	f993 301e 	ldrsb.w	r3, [r3, #30]
 80177a2:	b29b      	uxth	r3, r3
 80177a4:	fb12 f303 	smulbb	r3, r2, r3
 80177a8:	b29b      	uxth	r3, r3
 80177aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        }
    }
    if (tconf->postIIR) {
 80177ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80177b0:	7ddb      	ldrb	r3, [r3, #23]
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d01c      	beq.n	80177f0 <train_periodic_control+0x288>
        tvars->v_iir = (80*tvars->v_iir+20*v)/100;
 80177b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80177b8:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80177bc:	461a      	mov	r2, r3
 80177be:	4613      	mov	r3, r2
 80177c0:	009b      	lsls	r3, r3, #2
 80177c2:	4413      	add	r3, r2
 80177c4:	011b      	lsls	r3, r3, #4
 80177c6:	4619      	mov	r1, r3
 80177c8:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80177cc:	4613      	mov	r3, r2
 80177ce:	009b      	lsls	r3, r3, #2
 80177d0:	4413      	add	r3, r2
 80177d2:	009b      	lsls	r3, r3, #2
 80177d4:	440b      	add	r3, r1
 80177d6:	4a1c      	ldr	r2, [pc, #112]	; (8017848 <train_periodic_control+0x2e0>)
 80177d8:	fb82 1203 	smull	r1, r2, r2, r3
 80177dc:	1152      	asrs	r2, r2, #5
 80177de:	17db      	asrs	r3, r3, #31
 80177e0:	1ad3      	subs	r3, r2, r3
 80177e2:	b21a      	sxth	r2, r3
 80177e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80177e6:	869a      	strh	r2, [r3, #52]	; 0x34
        v = tvars->v_iir;
 80177e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80177ea:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80177ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }
    // or inertia after PID
    if (2==tconf->enable_inertia) {
 80177f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80177f2:	7c5b      	ldrb	r3, [r3, #17]
 80177f4:	2b02      	cmp	r3, #2
 80177f6:	d111      	bne.n	801781c <train_periodic_control+0x2b4>
        tvars->inertiavars.target = v;
 80177f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80177fa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80177fe:	831a      	strh	r2, [r3, #24]
        v = inertia_value(&tconf->inertiacnf, &tvars->inertiavars, dt, NULL);
 8017800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017802:	f103 000c 	add.w	r0, r3, #12
 8017806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017808:	f103 0118 	add.w	r1, r3, #24
 801780c:	683b      	ldr	r3, [r7, #0]
 801780e:	b29a      	uxth	r2, r3
 8017810:	2300      	movs	r3, #0
 8017812:	f7ff fa2b 	bl	8016c6c <inertia_value>
 8017816:	4603      	mov	r3, r0
 8017818:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }

    if (tconf->en_spd2pow) {
 801781c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801781e:	7e5b      	ldrb	r3, [r3, #25]
 8017820:	2b00      	cmp	r3, #0
 8017822:	d046      	beq.n	80178b2 <train_periodic_control+0x34a>
    	// [0-100] -> [min_pwm .. MAX_PWM]
    	int s = SIGNOF(v);
 8017824:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8017828:	2b00      	cmp	r3, #0
 801782a:	da1b      	bge.n	8017864 <train_periodic_control+0x2fc>
 801782c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017830:	e019      	b.n	8017866 <train_periodic_control+0x2fe>
 8017832:	bf00      	nop
 8017834:	200053a8 	.word	0x200053a8
 8017838:	200053b8 	.word	0x200053b8
 801783c:	080196f8 	.word	0x080196f8
 8017840:	08019700 	.word	0x08019700
 8017844:	66666667 	.word	0x66666667
 8017848:	51eb851f 	.word	0x51eb851f
 801784c:	08019708 	.word	0x08019708
 8017850:	08019710 	.word	0x08019710
 8017854:	0801971c 	.word	0x0801971c
 8017858:	08019724 	.word	0x08019724
 801785c:	fffffee8 	.word	0xfffffee8
 8017860:	08019728 	.word	0x08019728
 8017864:	2301      	movs	r3, #1
 8017866:	62fb      	str	r3, [r7, #44]	; 0x2c
    	int a = abs(v);
 8017868:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801786c:	2b00      	cmp	r3, #0
 801786e:	bfb8      	it	lt
 8017870:	425b      	neglt	r3, r3
 8017872:	62bb      	str	r3, [r7, #40]	; 0x28
    	int v2 = (a>1) ? a * (MAX_PWM-tconf->min_power)/100 + tconf->min_power : 0;
 8017874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017876:	2b01      	cmp	r3, #1
 8017878:	dd10      	ble.n	801789c <train_periodic_control+0x334>
 801787a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801787c:	7e9b      	ldrb	r3, [r3, #26]
 801787e:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8017882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017884:	fb02 f303 	mul.w	r3, r2, r3
 8017888:	4a4c      	ldr	r2, [pc, #304]	; (80179bc <train_periodic_control+0x454>)
 801788a:	fb82 1203 	smull	r1, r2, r2, r3
 801788e:	1152      	asrs	r2, r2, #5
 8017890:	17db      	asrs	r3, r3, #31
 8017892:	1ad3      	subs	r3, r2, r3
 8017894:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017896:	7e92      	ldrb	r2, [r2, #26]
 8017898:	4413      	add	r3, r2
 801789a:	e000      	b.n	801789e <train_periodic_control+0x336>
 801789c:	2300      	movs	r3, #0
 801789e:	627b      	str	r3, [r7, #36]	; 0x24
    	v = s * v2;
 80178a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178a2:	b29a      	uxth	r2, r3
 80178a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178a6:	b29b      	uxth	r3, r3
 80178a8:	fb12 f303 	smulbb	r3, r2, r3
 80178ac:	b29b      	uxth	r3, r3
 80178ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }

    int changed = (tvars->last_speed != v);
 80178b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80178b4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80178b8:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80178bc:	429a      	cmp	r2, r3
 80178be:	bf14      	ite	ne
 80178c0:	2301      	movne	r3, #1
 80178c2:	2300      	moveq	r3, #0
 80178c4:	b2db      	uxtb	r3, r3
 80178c6:	623b      	str	r3, [r7, #32]
    tvars->last_speed = v;
 80178c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80178ca:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80178ce:	841a      	strh	r2, [r3, #32]

    itm_debug3(DBG_PID|DBG_SPDCTL, "spd", numtrain, v, changed);
 80178d0:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80178d4:	6a3b      	ldr	r3, [r7, #32]
 80178d6:	9300      	str	r3, [sp, #0]
 80178d8:	4613      	mov	r3, r2
 80178da:	687a      	ldr	r2, [r7, #4]
 80178dc:	4938      	ldr	r1, [pc, #224]	; (80179c0 <train_periodic_control+0x458>)
 80178de:	2014      	movs	r0, #20
 80178e0:	f7ff fc36 	bl	8017150 <itm_debug3>

    if (changed) {
 80178e4:	6a3b      	ldr	r3, [r7, #32]
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d01a      	beq.n	8017920 <train_periodic_control+0x3b8>
    	_set_speed(numtrain, tconf, tvars);
 80178ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80178ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80178ee:	6878      	ldr	r0, [r7, #4]
 80178f0:	f000 f932 	bl	8017b58 <_set_speed>
        if ((1)) { // TODO remove
            msg_64_t m;
            m.from = MA_TRAIN_SC(numtrain);
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	b25b      	sxtb	r3, r3
 80178f8:	f003 0307 	and.w	r3, r3, #7
 80178fc:	b25b      	sxtb	r3, r3
 80178fe:	f063 0337 	orn	r3, r3, #55	; 0x37
 8017902:	b25b      	sxtb	r3, r3
 8017904:	b2db      	uxtb	r3, r3
 8017906:	747b      	strb	r3, [r7, #17]
            m.to = MA_UI(0);
 8017908:	2380      	movs	r3, #128	; 0x80
 801790a:	743b      	strb	r3, [r7, #16]
            m.cmd = CMD_NOTIF_SPEED;
 801790c:	23a0      	movs	r3, #160	; 0xa0
 801790e:	74bb      	strb	r3, [r7, #18]
            m.v1 = v;
 8017910:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8017914:	82bb      	strh	r3, [r7, #20]
            mqf_write_from_spdctl(&m);
 8017916:	f107 0310 	add.w	r3, r7, #16
 801791a:	4618      	mov	r0, r3
 801791c:	f7ff fc82 	bl	8017224 <mqf_write_from_spdctl>
        }
    }
    if (tconf->notify_speed) {
 8017920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017922:	7d1b      	ldrb	r3, [r3, #20]
 8017924:	2b00      	cmp	r3, #0
 8017926:	d011      	beq.n	801794c <train_periodic_control+0x3e4>
    	struct spd_notif n;
    	n.sv100 = v;
 8017928:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801792c:	813b      	strh	r3, [r7, #8]
    	n.pid_target = tvars->pidvars.target_v;
 801792e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017930:	691b      	ldr	r3, [r3, #16]
 8017932:	b21b      	sxth	r3, r3
 8017934:	817b      	strh	r3, [r7, #10]
    	//canton_vars_t *cv1 = get_canton_vars(tvars->current_canton);
    	n.bemf_centivolt = tvars->bemf_cv; //cv1->bemf_centivolt;
 8017936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017938:	685b      	ldr	r3, [r3, #4]
 801793a:	60fb      	str	r3, [r7, #12]
    	train_notif(numtrain, 'V', (void *)&n, sizeof(n));
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	b2d8      	uxtb	r0, r3
 8017940:	f107 0208 	add.w	r2, r7, #8
 8017944:	2308      	movs	r3, #8
 8017946:	2156      	movs	r1, #86	; 0x56
 8017948:	f7ff fc2d 	bl	80171a6 <train_notif>
    }

    /* estimate speed/position with bemf */
    if ((1)) {
    	//canton_vars_t *cv = get_canton_vars(tvars->current_canton);
        int32_t b = tvars->bemf_cv; //cv->bemf_centivolt;
 801794c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801794e:	685b      	ldr	r3, [r3, #4]
 8017950:	647b      	str	r3, [r7, #68]	; 0x44
        if (abs(b)<25) b = 0;
 8017952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017954:	f113 0f18 	cmn.w	r3, #24
 8017958:	db04      	blt.n	8017964 <train_periodic_control+0x3fc>
 801795a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801795c:	2b18      	cmp	r3, #24
 801795e:	dc01      	bgt.n	8017964 <train_periodic_control+0x3fc>
 8017960:	2300      	movs	r3, #0
 8017962:	647b      	str	r3, [r7, #68]	; 0x44
        // TODO: BEMF to speed. currently part of it is done in convert_to_centivolt
        //       but we assume speed is really proportional to BEMF
        tvars->position_estimate += b;
 8017964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017966:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801796a:	441a      	add	r2, r3
 801796c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801796e:	629a      	str	r2, [r3, #40]	; 0x28
        itm_debug3(DBG_POSE, "pose", numtrain, tvars->position_estimate, b);
 8017970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017972:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017976:	9300      	str	r3, [sp, #0]
 8017978:	4613      	mov	r3, r2
 801797a:	687a      	ldr	r2, [r7, #4]
 801797c:	4911      	ldr	r1, [pc, #68]	; (80179c4 <train_periodic_control+0x45c>)
 801797e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8017982:	f7ff fbe5 	bl	8017150 <itm_debug3>
        pose_check_trig(numtrain, tvars, b);
 8017986:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017988:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801798a:	6878      	ldr	r0, [r7, #4]
 801798c:	f000 f9c0 	bl	8017d10 <pose_check_trig>
        if (tconf->notify_pose) {
 8017990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017992:	7d5b      	ldrb	r3, [r3, #21]
 8017994:	2b00      	cmp	r3, #0
 8017996:	d00e      	beq.n	80179b6 <train_periodic_control+0x44e>
    		train_notif(numtrain, 'i', (void *)&tvars->position_estimate, sizeof(int32_t));
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	b2d8      	uxtb	r0, r3
 801799c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801799e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80179a2:	2304      	movs	r3, #4
 80179a4:	2169      	movs	r1, #105	; 0x69
 80179a6:	f7ff fbfe 	bl	80171a6 <train_notif>
 80179aa:	e004      	b.n	80179b6 <train_periodic_control+0x44e>
	if (stop_all) return;
 80179ac:	bf00      	nop
 80179ae:	e002      	b.n	80179b6 <train_periodic_control+0x44e>
        return;
 80179b0:	bf00      	nop
 80179b2:	e000      	b.n	80179b6 <train_periodic_control+0x44e>
		return;
 80179b4:	bf00      	nop
        }
    }
}
 80179b6:	3750      	adds	r7, #80	; 0x50
 80179b8:	46bd      	mov	sp, r7
 80179ba:	bd80      	pop	{r7, pc}
 80179bc:	51eb851f 	.word	0x51eb851f
 80179c0:	08019730 	.word	0x08019730
 80179c4:	08019734 	.word	0x08019734

080179c8 <set_c1_c2>:


static void set_c1_c2(int tidx, train_vars_t *tvars, uint8_t c1, int8_t dir1, uint8_t c2, int8_t dir2)
{
 80179c8:	b580      	push	{r7, lr}
 80179ca:	b088      	sub	sp, #32
 80179cc:	af02      	add	r7, sp, #8
 80179ce:	60f8      	str	r0, [r7, #12]
 80179d0:	60b9      	str	r1, [r7, #8]
 80179d2:	4611      	mov	r1, r2
 80179d4:	461a      	mov	r2, r3
 80179d6:	460b      	mov	r3, r1
 80179d8:	71fb      	strb	r3, [r7, #7]
 80179da:	4613      	mov	r3, r2
 80179dc:	71bb      	strb	r3, [r7, #6]
	msg_64_t m;
	m.from = MA_TRAIN_SC(tidx);
 80179de:	68fb      	ldr	r3, [r7, #12]
 80179e0:	b25b      	sxtb	r3, r3
 80179e2:	f003 0307 	and.w	r3, r3, #7
 80179e6:	b25b      	sxtb	r3, r3
 80179e8:	f063 0337 	orn	r3, r3, #55	; 0x37
 80179ec:	b25b      	sxtb	r3, r3
 80179ee:	b2db      	uxtb	r3, r3
 80179f0:	747b      	strb	r3, [r7, #17]

	itm_debug3(DBG_SPDCTL, "s-c1", tidx, c1, dir1);
 80179f2:	79fa      	ldrb	r2, [r7, #7]
 80179f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80179f8:	9300      	str	r3, [sp, #0]
 80179fa:	4613      	mov	r3, r2
 80179fc:	68fa      	ldr	r2, [r7, #12]
 80179fe:	4953      	ldr	r1, [pc, #332]	; (8017b4c <set_c1_c2+0x184>)
 8017a00:	2010      	movs	r0, #16
 8017a02:	f7ff fba5 	bl	8017150 <itm_debug3>
	itm_debug3(DBG_SPDCTL, "s-c2", tidx, c2, dir2);
 8017a06:	f897 2020 	ldrb.w	r2, [r7, #32]
 8017a0a:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8017a0e:	9300      	str	r3, [sp, #0]
 8017a10:	4613      	mov	r3, r2
 8017a12:	68fa      	ldr	r2, [r7, #12]
 8017a14:	494e      	ldr	r1, [pc, #312]	; (8017b50 <set_c1_c2+0x188>)
 8017a16:	2010      	movs	r0, #16
 8017a18:	f7ff fb9a 	bl	8017150 <itm_debug3>

	tvars->c2bemf = 0;
 8017a1c:	68ba      	ldr	r2, [r7, #8]
 8017a1e:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 8017a22:	f36f 0300 	bfc	r3, #0, #1
 8017a26:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36

	if ((tvars->C1 != 0xFF) && (tvars->C1 != c1)  && (tvars->C1 != c2)) {
 8017a2a:	68bb      	ldr	r3, [r7, #8]
 8017a2c:	7f1b      	ldrb	r3, [r3, #28]
 8017a2e:	2bff      	cmp	r3, #255	; 0xff
 8017a30:	d01b      	beq.n	8017a6a <set_c1_c2+0xa2>
 8017a32:	68bb      	ldr	r3, [r7, #8]
 8017a34:	7f1b      	ldrb	r3, [r3, #28]
 8017a36:	79fa      	ldrb	r2, [r7, #7]
 8017a38:	429a      	cmp	r2, r3
 8017a3a:	d016      	beq.n	8017a6a <set_c1_c2+0xa2>
 8017a3c:	68bb      	ldr	r3, [r7, #8]
 8017a3e:	7f1b      	ldrb	r3, [r3, #28]
 8017a40:	f897 2020 	ldrb.w	r2, [r7, #32]
 8017a44:	429a      	cmp	r2, r3
 8017a46:	d010      	beq.n	8017a6a <set_c1_c2+0xa2>
		m.to = tvars->C1;
 8017a48:	68bb      	ldr	r3, [r7, #8]
 8017a4a:	7f1b      	ldrb	r3, [r3, #28]
 8017a4c:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_STOP;
 8017a4e:	2302      	movs	r3, #2
 8017a50:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8017a52:	f107 0310 	add.w	r3, r7, #16
 8017a56:	4618      	mov	r0, r3
 8017a58:	f7ff fbe4 	bl	8017224 <mqf_write_from_spdctl>
		m.cmd = CMD_BEMF_OFF;
 8017a5c:	2341      	movs	r3, #65	; 0x41
 8017a5e:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8017a60:	f107 0310 	add.w	r3, r7, #16
 8017a64:	4618      	mov	r0, r3
 8017a66:	f7ff fbdd 	bl	8017224 <mqf_write_from_spdctl>
	}
	if ((tvars->C2 != 0xFF) && (tvars->C2 != c1)  && (tvars->C2 != c2)) {
 8017a6a:	68bb      	ldr	r3, [r7, #8]
 8017a6c:	7f5b      	ldrb	r3, [r3, #29]
 8017a6e:	2bff      	cmp	r3, #255	; 0xff
 8017a70:	d01b      	beq.n	8017aaa <set_c1_c2+0xe2>
 8017a72:	68bb      	ldr	r3, [r7, #8]
 8017a74:	7f5b      	ldrb	r3, [r3, #29]
 8017a76:	79fa      	ldrb	r2, [r7, #7]
 8017a78:	429a      	cmp	r2, r3
 8017a7a:	d016      	beq.n	8017aaa <set_c1_c2+0xe2>
 8017a7c:	68bb      	ldr	r3, [r7, #8]
 8017a7e:	7f5b      	ldrb	r3, [r3, #29]
 8017a80:	f897 2020 	ldrb.w	r2, [r7, #32]
 8017a84:	429a      	cmp	r2, r3
 8017a86:	d010      	beq.n	8017aaa <set_c1_c2+0xe2>
		m.to = tvars->C2;
 8017a88:	68bb      	ldr	r3, [r7, #8]
 8017a8a:	7f5b      	ldrb	r3, [r3, #29]
 8017a8c:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_STOP;
 8017a8e:	2302      	movs	r3, #2
 8017a90:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8017a92:	f107 0310 	add.w	r3, r7, #16
 8017a96:	4618      	mov	r0, r3
 8017a98:	f7ff fbc4 	bl	8017224 <mqf_write_from_spdctl>
		m.cmd = CMD_BEMF_OFF;
 8017a9c:	2341      	movs	r3, #65	; 0x41
 8017a9e:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8017aa0:	f107 0310 	add.w	r3, r7, #16
 8017aa4:	4618      	mov	r0, r3
 8017aa6:	f7ff fbbd 	bl	8017224 <mqf_write_from_spdctl>
	}
	if ((c1 != 0xFF) && (c1 != tvars->C1) && (c1 != tvars->C2)) {
 8017aaa:	79fb      	ldrb	r3, [r7, #7]
 8017aac:	2bff      	cmp	r3, #255	; 0xff
 8017aae:	d012      	beq.n	8017ad6 <set_c1_c2+0x10e>
 8017ab0:	68bb      	ldr	r3, [r7, #8]
 8017ab2:	7f1b      	ldrb	r3, [r3, #28]
 8017ab4:	79fa      	ldrb	r2, [r7, #7]
 8017ab6:	429a      	cmp	r2, r3
 8017ab8:	d00d      	beq.n	8017ad6 <set_c1_c2+0x10e>
 8017aba:	68bb      	ldr	r3, [r7, #8]
 8017abc:	7f5b      	ldrb	r3, [r3, #29]
 8017abe:	79fa      	ldrb	r2, [r7, #7]
 8017ac0:	429a      	cmp	r2, r3
 8017ac2:	d008      	beq.n	8017ad6 <set_c1_c2+0x10e>
		m.to = c1;
 8017ac4:	79fb      	ldrb	r3, [r7, #7]
 8017ac6:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_BEMF_ON;
 8017ac8:	2340      	movs	r3, #64	; 0x40
 8017aca:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8017acc:	f107 0310 	add.w	r3, r7, #16
 8017ad0:	4618      	mov	r0, r3
 8017ad2:	f7ff fba7 	bl	8017224 <mqf_write_from_spdctl>
	}
	if ((c2 != 0xFF) && (c2 != tvars->C1) && (c2 != tvars->C2)) {
 8017ad6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017ada:	2bff      	cmp	r3, #255	; 0xff
 8017adc:	d015      	beq.n	8017b0a <set_c1_c2+0x142>
 8017ade:	68bb      	ldr	r3, [r7, #8]
 8017ae0:	7f1b      	ldrb	r3, [r3, #28]
 8017ae2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8017ae6:	429a      	cmp	r2, r3
 8017ae8:	d00f      	beq.n	8017b0a <set_c1_c2+0x142>
 8017aea:	68bb      	ldr	r3, [r7, #8]
 8017aec:	7f5b      	ldrb	r3, [r3, #29]
 8017aee:	f897 2020 	ldrb.w	r2, [r7, #32]
 8017af2:	429a      	cmp	r2, r3
 8017af4:	d009      	beq.n	8017b0a <set_c1_c2+0x142>
		m.to = c2;
 8017af6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017afa:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_BEMF_ON;
 8017afc:	2340      	movs	r3, #64	; 0x40
 8017afe:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8017b00:	f107 0310 	add.w	r3, r7, #16
 8017b04:	4618      	mov	r0, r3
 8017b06:	f7ff fb8d 	bl	8017224 <mqf_write_from_spdctl>
	}
	tvars->C1 = c1;
 8017b0a:	68bb      	ldr	r3, [r7, #8]
 8017b0c:	79fa      	ldrb	r2, [r7, #7]
 8017b0e:	771a      	strb	r2, [r3, #28]
	tvars->C1_dir = dir1;
 8017b10:	68bb      	ldr	r3, [r7, #8]
 8017b12:	79ba      	ldrb	r2, [r7, #6]
 8017b14:	779a      	strb	r2, [r3, #30]
	tvars->C2 = c2;
 8017b16:	68bb      	ldr	r3, [r7, #8]
 8017b18:	f897 2020 	ldrb.w	r2, [r7, #32]
 8017b1c:	775a      	strb	r2, [r3, #29]
	tvars->C2_dir = dir2;
 8017b1e:	68bb      	ldr	r3, [r7, #8]
 8017b20:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8017b24:	77da      	strb	r2, [r3, #31]
	tvars->last_speed = 9000; // make sure cmd is sent
 8017b26:	68bb      	ldr	r3, [r7, #8]
 8017b28:	f242 3228 	movw	r2, #9000	; 0x2328
 8017b2c:	841a      	strh	r2, [r3, #32]
	itm_debug2(DBG_POSEC, "POS reset", tidx, tvars->position_estimate);
 8017b2e:	68bb      	ldr	r3, [r7, #8]
 8017b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b32:	68fa      	ldr	r2, [r7, #12]
 8017b34:	4907      	ldr	r1, [pc, #28]	; (8017b54 <set_c1_c2+0x18c>)
 8017b36:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8017b3a:	f7ff faed 	bl	8017118 <itm_debug2>
	tvars->position_estimate = 0; // reset POSE
 8017b3e:	68bb      	ldr	r3, [r7, #8]
 8017b40:	2200      	movs	r2, #0
 8017b42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8017b44:	bf00      	nop
 8017b46:	3718      	adds	r7, #24
 8017b48:	46bd      	mov	sp, r7
 8017b4a:	bd80      	pop	{r7, pc}
 8017b4c:	0801973c 	.word	0x0801973c
 8017b50:	08019744 	.word	0x08019744
 8017b54:	0801974c 	.word	0x0801974c

08017b58 <_set_speed>:



static void _set_speed(int tidx, const train_config_t *cnf, train_vars_t *vars)
{
 8017b58:	b580      	push	{r7, lr}
 8017b5a:	b092      	sub	sp, #72	; 0x48
 8017b5c:	af02      	add	r7, sp, #8
 8017b5e:	60f8      	str	r0, [r7, #12]
 8017b60:	60b9      	str	r1, [r7, #8]
 8017b62:	607a      	str	r2, [r7, #4]
    const canton_config_t *c1;
    const canton_config_t *c2;


	int16_t sv100 = vars->last_speed;
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	8c1b      	ldrh	r3, [r3, #32]
 8017b68:	87fb      	strh	r3, [r7, #62]	; 0x3e

    //num_set_speed++;


    c1 =  get_canton_cnf(vars->C1);
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	7f1b      	ldrb	r3, [r3, #28]
 8017b6e:	4618      	mov	r0, r3
 8017b70:	f7fe f810 	bl	8015b94 <get_canton_cnf>
 8017b74:	63b8      	str	r0, [r7, #56]	; 0x38
    c2 =  get_canton_cnf(vars->C2);
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	7f5b      	ldrb	r3, [r3, #29]
 8017b7a:	4618      	mov	r0, r3
 8017b7c:	f7fe f80a 	bl	8015b94 <get_canton_cnf>
 8017b80:	6378      	str	r0, [r7, #52]	; 0x34
    
    if (!c1) {
 8017b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d10c      	bne.n	8017ba2 <_set_speed+0x4a>
    	itm_debug1(DBG_ERR|DBG_SPDCTL, "no canton", sv100);
 8017b88:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8017b8c:	461a      	mov	r2, r3
 8017b8e:	4947      	ldr	r1, [pc, #284]	; (8017cac <_set_speed+0x154>)
 8017b90:	4847      	ldr	r0, [pc, #284]	; (8017cb0 <_set_speed+0x158>)
 8017b92:	f7ff faa7 	bl	80170e4 <itm_debug1>
        train_error(ERR_CANTON_NONE, "no canton");
 8017b96:	4945      	ldr	r1, [pc, #276]	; (8017cac <_set_speed+0x154>)
 8017b98:	f06f 0064 	mvn.w	r0, #100	; 0x64
 8017b9c:	f7ff faf4 	bl	8017188 <train_error>
 8017ba0:	e080      	b.n	8017ca4 <_set_speed+0x14c>
        return;
    }

    int pvi1, pvi2;
    int sig = SIGNOF(sv100);
 8017ba2:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	da02      	bge.n	8017bb0 <_set_speed+0x58>
 8017baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017bae:	e000      	b.n	8017bb2 <_set_speed+0x5a>
 8017bb0:	2301      	movs	r3, #1
 8017bb2:	633b      	str	r3, [r7, #48]	; 0x30
    uint16_t v = abs(sv100);
 8017bb4:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	bfb8      	it	lt
 8017bbc:	425b      	neglt	r3, r3
 8017bbe:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t pwm_duty = volt_index(v*10 /* mili*/,
 8017bc0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017bc2:	461a      	mov	r2, r3
 8017bc4:	0092      	lsls	r2, r2, #2
 8017bc6:	4413      	add	r3, r2
 8017bc8:	005b      	lsls	r3, r3, #1
 8017bca:	b298      	uxth	r0, r3
 8017bcc:	68bb      	ldr	r3, [r7, #8]
 8017bce:	7c1b      	ldrb	r3, [r3, #16]
 8017bd0:	f107 0220 	add.w	r2, r7, #32
 8017bd4:	9301      	str	r3, [sp, #4]
 8017bd6:	f107 031c 	add.w	r3, r7, #28
 8017bda:	9300      	str	r3, [sp, #0]
 8017bdc:	4613      	mov	r3, r2
 8017bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017be0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017be2:	f7fd f8f1 	bl	8014dc8 <volt_index>
 8017be6:	4603      	mov	r3, r0
 8017be8:	85bb      	strh	r3, [r7, #44]	; 0x2c
                                   c1, c2,
                                   &pvi1, &pvi2, cnf->volt_policy);

	int dir1 = sig * vars->C1_dir;
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8017bf0:	461a      	mov	r2, r3
 8017bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bf4:	fb02 f303 	mul.w	r3, r2, r3
 8017bf8:	62bb      	str	r3, [r7, #40]	; 0x28
	int dir2 = sig * vars->C2_dir;
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	f993 301f 	ldrsb.w	r3, [r3, #31]
 8017c00:	461a      	mov	r2, r3
 8017c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c04:	fb02 f303 	mul.w	r3, r2, r3
 8017c08:	627b      	str	r3, [r7, #36]	; 0x24


    msg_64_t m;
    m.from = MA_TRAIN_SC(tidx);
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	b25b      	sxtb	r3, r3
 8017c0e:	f003 0307 	and.w	r3, r3, #7
 8017c12:	b25b      	sxtb	r3, r3
 8017c14:	f063 0337 	orn	r3, r3, #55	; 0x37
 8017c18:	b25b      	sxtb	r3, r3
 8017c1a:	b2db      	uxtb	r3, r3
 8017c1c:	747b      	strb	r3, [r7, #17]
    m.cmd = CMD_SETVPWM;
 8017c1e:	2301      	movs	r3, #1
 8017c20:	74bb      	strb	r3, [r7, #18]
    m.v1u = pvi1;
 8017c22:	6a3b      	ldr	r3, [r7, #32]
 8017c24:	b29b      	uxth	r3, r3
 8017c26:	82bb      	strh	r3, [r7, #20]
    m.v2 = dir1*pwm_duty;
 8017c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c2a:	b29b      	uxth	r3, r3
 8017c2c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8017c2e:	fb12 f303 	smulbb	r3, r2, r3
 8017c32:	b29b      	uxth	r3, r3
 8017c34:	b21b      	sxth	r3, r3
 8017c36:	82fb      	strh	r3, [r7, #22]
    m.to = vars->C1;
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	7f1b      	ldrb	r3, [r3, #28]
 8017c3c:	743b      	strb	r3, [r7, #16]
	itm_debug3(DBG_SPDCTL, "setvpwm", m.v1u, m.v2, m.to);
 8017c3e:	8abb      	ldrh	r3, [r7, #20]
 8017c40:	461a      	mov	r2, r3
 8017c42:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017c46:	4619      	mov	r1, r3
 8017c48:	7c3b      	ldrb	r3, [r7, #16]
 8017c4a:	9300      	str	r3, [sp, #0]
 8017c4c:	460b      	mov	r3, r1
 8017c4e:	4919      	ldr	r1, [pc, #100]	; (8017cb4 <_set_speed+0x15c>)
 8017c50:	2010      	movs	r0, #16
 8017c52:	f7ff fa7d 	bl	8017150 <itm_debug3>
    mqf_write_from_spdctl(&m);
 8017c56:	f107 0310 	add.w	r3, r7, #16
 8017c5a:	4618      	mov	r0, r3
 8017c5c:	f7ff fae2 	bl	8017224 <mqf_write_from_spdctl>

    if (c2) {
 8017c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d01e      	beq.n	8017ca4 <_set_speed+0x14c>
    	itm_debug3(DBG_SPDCTL, "setvpwm/c2", m.v1u, m.v2, m.to);
 8017c66:	8abb      	ldrh	r3, [r7, #20]
 8017c68:	461a      	mov	r2, r3
 8017c6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017c6e:	4619      	mov	r1, r3
 8017c70:	7c3b      	ldrb	r3, [r7, #16]
 8017c72:	9300      	str	r3, [sp, #0]
 8017c74:	460b      	mov	r3, r1
 8017c76:	4910      	ldr	r1, [pc, #64]	; (8017cb8 <_set_speed+0x160>)
 8017c78:	2010      	movs	r0, #16
 8017c7a:	f7ff fa69 	bl	8017150 <itm_debug3>
    	m.v1u = pvi2;
 8017c7e:	69fb      	ldr	r3, [r7, #28]
 8017c80:	b29b      	uxth	r3, r3
 8017c82:	82bb      	strh	r3, [r7, #20]
    	m.v2 = dir2*pwm_duty;
 8017c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c86:	b29b      	uxth	r3, r3
 8017c88:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8017c8a:	fb12 f303 	smulbb	r3, r2, r3
 8017c8e:	b29b      	uxth	r3, r3
 8017c90:	b21b      	sxth	r3, r3
 8017c92:	82fb      	strh	r3, [r7, #22]
    	m.to = vars->C2;
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	7f5b      	ldrb	r3, [r3, #29]
 8017c98:	743b      	strb	r3, [r7, #16]
    	mqf_write_from_spdctl(&m);
 8017c9a:	f107 0310 	add.w	r3, r7, #16
 8017c9e:	4618      	mov	r0, r3
 8017ca0:	f7ff fac0 	bl	8017224 <mqf_write_from_spdctl>
    }
}
 8017ca4:	3740      	adds	r7, #64	; 0x40
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	bd80      	pop	{r7, pc}
 8017caa:	bf00      	nop
 8017cac:	08019758 	.word	0x08019758
 8017cb0:	80000010 	.word	0x80000010
 8017cb4:	08019764 	.word	0x08019764
 8017cb8:	0801976c 	.word	0x0801976c

08017cbc <train_set_target_speed>:

/* =========================================================================== */


int train_set_target_speed(int numtrain, int16_t target)
{
 8017cbc:	b580      	push	{r7, lr}
 8017cbe:	b084      	sub	sp, #16
 8017cc0:	af00      	add	r7, sp, #0
 8017cc2:	6078      	str	r0, [r7, #4]
 8017cc4:	460b      	mov	r3, r1
 8017cc6:	807b      	strh	r3, [r7, #2]
	if (calibrating) return 1;
 8017cc8:	4b0f      	ldr	r3, [pc, #60]	; (8017d08 <train_set_target_speed+0x4c>)
 8017cca:	681b      	ldr	r3, [r3, #0]
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d001      	beq.n	8017cd4 <train_set_target_speed+0x18>
 8017cd0:	2301      	movs	r3, #1
 8017cd2:	e015      	b.n	8017d00 <train_set_target_speed+0x44>
	USE_TRAIN(numtrain) // tconf tvars
 8017cd4:	6878      	ldr	r0, [r7, #4]
 8017cd6:	f7fd ff85 	bl	8015be4 <get_train_cnf>
 8017cda:	60f8      	str	r0, [r7, #12]
 8017cdc:	687a      	ldr	r2, [r7, #4]
 8017cde:	4613      	mov	r3, r2
 8017ce0:	00db      	lsls	r3, r3, #3
 8017ce2:	1a9b      	subs	r3, r3, r2
 8017ce4:	00db      	lsls	r3, r3, #3
 8017ce6:	4a09      	ldr	r2, [pc, #36]	; (8017d0c <train_set_target_speed+0x50>)
 8017ce8:	4413      	add	r3, r2
 8017cea:	60bb      	str	r3, [r7, #8]
	(void)tconf; // unused
	if (!tvars) return -1;
 8017cec:	68bb      	ldr	r3, [r7, #8]
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d102      	bne.n	8017cf8 <train_set_target_speed+0x3c>
 8017cf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017cf6:	e003      	b.n	8017d00 <train_set_target_speed+0x44>
	tvars->target_speed = target;
 8017cf8:	68bb      	ldr	r3, [r7, #8]
 8017cfa:	887a      	ldrh	r2, [r7, #2]
 8017cfc:	801a      	strh	r2, [r3, #0]
		if (c->enable_pid) {
			pidctl_reset(&c->pidcnf, &vars->pidvars);
		}
	}*/

	return 0;
 8017cfe:	2300      	movs	r3, #0
}
 8017d00:	4618      	mov	r0, r3
 8017d02:	3710      	adds	r7, #16
 8017d04:	46bd      	mov	sp, r7
 8017d06:	bd80      	pop	{r7, pc}
 8017d08:	200053ac 	.word	0x200053ac
 8017d0c:	200053b8 	.word	0x200053b8

08017d10 <pose_check_trig>:


static void pose_check_trig(int numtrain, train_vars_t *tvars, int32_t lastincr)
{
 8017d10:	b580      	push	{r7, lr}
 8017d12:	b08a      	sub	sp, #40	; 0x28
 8017d14:	af02      	add	r7, sp, #8
 8017d16:	60f8      	str	r0, [r7, #12]
 8017d18:	60b9      	str	r1, [r7, #8]
 8017d1a:	607a      	str	r2, [r7, #4]
	if (!tvars->pose_trig) return;
 8017d1c:	68bb      	ldr	r3, [r7, #8]
 8017d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d064      	beq.n	8017dee <pose_check_trig+0xde>
	int tr = 0;
 8017d24:	2300      	movs	r3, #0
 8017d26:	61fb      	str	r3, [r7, #28]
	if (tvars->pose_trig > 0) {
 8017d28:	68bb      	ldr	r3, [r7, #8]
 8017d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	dd14      	ble.n	8017d5a <pose_check_trig+0x4a>
		if (lastincr<0) itm_debug3(DBG_ERR|DBG_POSEC, "wrong incr", numtrain, lastincr, tvars->pose_trig);
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	da08      	bge.n	8017d48 <pose_check_trig+0x38>
 8017d36:	68bb      	ldr	r3, [r7, #8]
 8017d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d3a:	9300      	str	r3, [sp, #0]
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	68fa      	ldr	r2, [r7, #12]
 8017d40:	492e      	ldr	r1, [pc, #184]	; (8017dfc <pose_check_trig+0xec>)
 8017d42:	482f      	ldr	r0, [pc, #188]	; (8017e00 <pose_check_trig+0xf0>)
 8017d44:	f7ff fa04 	bl	8017150 <itm_debug3>
		if (tvars->position_estimate >= tvars->pose_trig) {
 8017d48:	68bb      	ldr	r3, [r7, #8]
 8017d4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017d4c:	68bb      	ldr	r3, [r7, #8]
 8017d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d50:	429a      	cmp	r2, r3
 8017d52:	db16      	blt.n	8017d82 <pose_check_trig+0x72>
			tr = 1;
 8017d54:	2301      	movs	r3, #1
 8017d56:	61fb      	str	r3, [r7, #28]
 8017d58:	e013      	b.n	8017d82 <pose_check_trig+0x72>
		}
	} else { // pose_trig < 0
		if (lastincr>0) itm_debug3(DBG_ERR|DBG_POSEC, "wrong incr", numtrain, lastincr, tvars->pose_trig);
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	dd08      	ble.n	8017d72 <pose_check_trig+0x62>
 8017d60:	68bb      	ldr	r3, [r7, #8]
 8017d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d64:	9300      	str	r3, [sp, #0]
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	68fa      	ldr	r2, [r7, #12]
 8017d6a:	4924      	ldr	r1, [pc, #144]	; (8017dfc <pose_check_trig+0xec>)
 8017d6c:	4824      	ldr	r0, [pc, #144]	; (8017e00 <pose_check_trig+0xf0>)
 8017d6e:	f7ff f9ef 	bl	8017150 <itm_debug3>
		if (tvars->position_estimate <= tvars->pose_trig) {
 8017d72:	68bb      	ldr	r3, [r7, #8]
 8017d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017d76:	68bb      	ldr	r3, [r7, #8]
 8017d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d7a:	429a      	cmp	r2, r3
 8017d7c:	dc01      	bgt.n	8017d82 <pose_check_trig+0x72>
			tr = 1;
 8017d7e:	2301      	movs	r3, #1
 8017d80:	61fb      	str	r3, [r7, #28]
		}
	}
	if (!tr) return;
 8017d82:	69fb      	ldr	r3, [r7, #28]
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d034      	beq.n	8017df2 <pose_check_trig+0xe2>
	itm_debug3(DBG_POSEC, "POSE trig", numtrain, tvars->position_estimate, tvars->pose_trig);
 8017d88:	68bb      	ldr	r3, [r7, #8]
 8017d8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017d8c:	68bb      	ldr	r3, [r7, #8]
 8017d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d90:	9300      	str	r3, [sp, #0]
 8017d92:	4613      	mov	r3, r2
 8017d94:	68fa      	ldr	r2, [r7, #12]
 8017d96:	491b      	ldr	r1, [pc, #108]	; (8017e04 <pose_check_trig+0xf4>)
 8017d98:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8017d9c:	f7ff f9d8 	bl	8017150 <itm_debug3>
	msg_64_t m;
	m.from = MA_TRAIN_SC(numtrain);
 8017da0:	68fb      	ldr	r3, [r7, #12]
 8017da2:	b25b      	sxtb	r3, r3
 8017da4:	f003 0307 	and.w	r3, r3, #7
 8017da8:	b25b      	sxtb	r3, r3
 8017daa:	f063 0337 	orn	r3, r3, #55	; 0x37
 8017dae:	b25b      	sxtb	r3, r3
 8017db0:	b2db      	uxtb	r3, r3
 8017db2:	747b      	strb	r3, [r7, #17]
	m.to = MA_CONTROL_T(numtrain);
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	b25b      	sxtb	r3, r3
 8017db8:	f003 0307 	and.w	r3, r3, #7
 8017dbc:	b25b      	sxtb	r3, r3
 8017dbe:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8017dc2:	b25b      	sxtb	r3, r3
 8017dc4:	b2db      	uxtb	r3, r3
 8017dc6:	743b      	strb	r3, [r7, #16]
	m.cmd = CMD_POSE_TRIGGERED;
 8017dc8:	2351      	movs	r3, #81	; 0x51
 8017dca:	74bb      	strb	r3, [r7, #18]
	m.v1u = tvars->C1;
 8017dcc:	68bb      	ldr	r3, [r7, #8]
 8017dce:	7f1b      	ldrb	r3, [r3, #28]
 8017dd0:	b29b      	uxth	r3, r3
 8017dd2:	82bb      	strh	r3, [r7, #20]
	m.v2 = (int16_t) tvars->position_estimate; // XXX TODO: problem here pose is > 16bits
 8017dd4:	68bb      	ldr	r3, [r7, #8]
 8017dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017dd8:	b21b      	sxth	r3, r3
 8017dda:	82fb      	strh	r3, [r7, #22]
	mqf_write_from_spdctl(&m);
 8017ddc:	f107 0310 	add.w	r3, r7, #16
 8017de0:	4618      	mov	r0, r3
 8017de2:	f7ff fa1f 	bl	8017224 <mqf_write_from_spdctl>

	// trig only once
	tvars->pose_trig = 0;
 8017de6:	68bb      	ldr	r3, [r7, #8]
 8017de8:	2200      	movs	r2, #0
 8017dea:	62da      	str	r2, [r3, #44]	; 0x2c
 8017dec:	e002      	b.n	8017df4 <pose_check_trig+0xe4>
	if (!tvars->pose_trig) return;
 8017dee:	bf00      	nop
 8017df0:	e000      	b.n	8017df4 <pose_check_trig+0xe4>
	if (!tr) return;
 8017df2:	bf00      	nop
}
 8017df4:	3720      	adds	r7, #32
 8017df6:	46bd      	mov	sp, r7
 8017df8:	bd80      	pop	{r7, pc}
 8017dfa:	bf00      	nop
 8017dfc:	08019778 	.word	0x08019778
 8017e00:	80004000 	.word	0x80004000
 8017e04:	08019784 	.word	0x08019784

08017e08 <mqf_write_from_nowhere>:
void msgsrv_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt);

// TODO
void purge_all_queue(void);

LFMQUEUE_DEF_H(from_nowhere, msg_64_t)
 8017e08:	b580      	push	{r7, lr}
 8017e0a:	b082      	sub	sp, #8
 8017e0c:	af00      	add	r7, sp, #0
 8017e0e:	6078      	str	r0, [r7, #4]
 8017e10:	6879      	ldr	r1, [r7, #4]
 8017e12:	4804      	ldr	r0, [pc, #16]	; (8017e24 <mqf_write_from_nowhere+0x1c>)
 8017e14:	f000 fe34 	bl	8018a80 <mqf_write>
 8017e18:	4603      	mov	r3, r0
 8017e1a:	4618      	mov	r0, r3
 8017e1c:	3708      	adds	r7, #8
 8017e1e:	46bd      	mov	sp, r7
 8017e20:	bd80      	pop	{r7, pc}
 8017e22:	bf00      	nop
 8017e24:	20000560 	.word	0x20000560

08017e28 <itm_debug1>:
{
 8017e28:	b580      	push	{r7, lr}
 8017e2a:	b086      	sub	sp, #24
 8017e2c:	af02      	add	r7, sp, #8
 8017e2e:	60f8      	str	r0, [r7, #12]
 8017e30:	60b9      	str	r1, [r7, #8]
 8017e32:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8017e34:	4b08      	ldr	r3, [pc, #32]	; (8017e58 <itm_debug1+0x30>)
 8017e36:	681a      	ldr	r2, [r3, #0]
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	4013      	ands	r3, r2
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d007      	beq.n	8017e50 <itm_debug1+0x28>
 8017e40:	2301      	movs	r3, #1
 8017e42:	9300      	str	r3, [sp, #0]
 8017e44:	2300      	movs	r3, #0
 8017e46:	2200      	movs	r2, #0
 8017e48:	6879      	ldr	r1, [r7, #4]
 8017e4a:	68b8      	ldr	r0, [r7, #8]
 8017e4c:	f000 fd12 	bl	8018874 <_itm_debug3>
}
 8017e50:	bf00      	nop
 8017e52:	3710      	adds	r7, #16
 8017e54:	46bd      	mov	sp, r7
 8017e56:	bd80      	pop	{r7, pc}
 8017e58:	20000574 	.word	0x20000574

08017e5c <itm_debug2>:
{
 8017e5c:	b580      	push	{r7, lr}
 8017e5e:	b086      	sub	sp, #24
 8017e60:	af02      	add	r7, sp, #8
 8017e62:	60f8      	str	r0, [r7, #12]
 8017e64:	60b9      	str	r1, [r7, #8]
 8017e66:	607a      	str	r2, [r7, #4]
 8017e68:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8017e6a:	4b09      	ldr	r3, [pc, #36]	; (8017e90 <itm_debug2+0x34>)
 8017e6c:	681a      	ldr	r2, [r3, #0]
 8017e6e:	68fb      	ldr	r3, [r7, #12]
 8017e70:	4013      	ands	r3, r2
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d007      	beq.n	8017e86 <itm_debug2+0x2a>
 8017e76:	2302      	movs	r3, #2
 8017e78:	9300      	str	r3, [sp, #0]
 8017e7a:	2300      	movs	r3, #0
 8017e7c:	683a      	ldr	r2, [r7, #0]
 8017e7e:	6879      	ldr	r1, [r7, #4]
 8017e80:	68b8      	ldr	r0, [r7, #8]
 8017e82:	f000 fcf7 	bl	8018874 <_itm_debug3>
}
 8017e86:	bf00      	nop
 8017e88:	3710      	adds	r7, #16
 8017e8a:	46bd      	mov	sp, r7
 8017e8c:	bd80      	pop	{r7, pc}
 8017e8e:	bf00      	nop
 8017e90:	20000574 	.word	0x20000574

08017e94 <StartCtrlTask>:
static void run_task_ctrl(void);
extern DMA_HandleTypeDef hdma_i2c3_rx;
extern DMA_HandleTypeDef hdma_i2c3_tx;

void StartCtrlTask(_UNUSED_ void *argument)
{
 8017e94:	b580      	push	{r7, lr}
 8017e96:	b084      	sub	sp, #16
 8017e98:	af00      	add	r7, sp, #0
 8017e9a:	6078      	str	r0, [r7, #4]
	int nsmpl = sizeof(train_adc_buf)/sizeof(uint16_t);
 8017e9c:	2328      	movs	r3, #40	; 0x28
 8017e9e:	60fb      	str	r3, [r7, #12]

	if (sizeof(train_adc_buf) != sizeof(uint16_t)*NUM_LOCAL_CANTONS_HW*8) Error_Handler();
	if (nsmpl != 5*2*4) Error_Handler();
 8017ea0:	68fb      	ldr	r3, [r7, #12]
 8017ea2:	2b28      	cmp	r3, #40	; 0x28
 8017ea4:	d001      	beq.n	8017eaa <StartCtrlTask+0x16>
 8017ea6:	f7e9 fa83 	bl	80013b0 <Error_Handler>
	//__HAL_DMA_ENABLE_IT(&hdma_i2c3_tx, DMA_IT_TC);

	//if (NUM_VAL_PER_CANTON != 4) Error_Handler();
	//if (ADC_HALF_BUFFER != 10*2) Error_Handler();

	if ((1)) set_pwm_freq(100);
 8017eaa:	2064      	movs	r0, #100	; 0x64
 8017eac:	f000 f864 	bl	8017f78 <set_pwm_freq>
	CantonTimerHandles[1]=&htim1;
 8017eb0:	4b2a      	ldr	r3, [pc, #168]	; (8017f5c <StartCtrlTask+0xc8>)
 8017eb2:	4a2b      	ldr	r2, [pc, #172]	; (8017f60 <StartCtrlTask+0xcc>)
 8017eb4:	605a      	str	r2, [r3, #4]
	CantonTimerHandles[2]=&htim2;
 8017eb6:	4b29      	ldr	r3, [pc, #164]	; (8017f5c <StartCtrlTask+0xc8>)
 8017eb8:	4a2a      	ldr	r2, [pc, #168]	; (8017f64 <StartCtrlTask+0xd0>)
 8017eba:	609a      	str	r2, [r3, #8]
	CantonTimerHandles[3]=&htim3;
 8017ebc:	4b27      	ldr	r3, [pc, #156]	; (8017f5c <StartCtrlTask+0xc8>)
 8017ebe:	4a2a      	ldr	r2, [pc, #168]	; (8017f68 <StartCtrlTask+0xd4>)
 8017ec0:	60da      	str	r2, [r3, #12]
	CantonTimerHandles[4]=&htim12;
 8017ec2:	4b26      	ldr	r3, [pc, #152]	; (8017f5c <StartCtrlTask+0xc8>)
 8017ec4:	4a29      	ldr	r2, [pc, #164]	; (8017f6c <StartCtrlTask+0xd8>)
 8017ec6:	611a      	str	r2, [r3, #16]



	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8017ec8:	2100      	movs	r1, #0
 8017eca:	4825      	ldr	r0, [pc, #148]	; (8017f60 <StartCtrlTask+0xcc>)
 8017ecc:	f7f0 f8c6 	bl	800805c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8017ed0:	2104      	movs	r1, #4
 8017ed2:	4823      	ldr	r0, [pc, #140]	; (8017f60 <StartCtrlTask+0xcc>)
 8017ed4:	f7f0 f8c2 	bl	800805c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8017ed8:	2108      	movs	r1, #8
 8017eda:	4821      	ldr	r0, [pc, #132]	; (8017f60 <StartCtrlTask+0xcc>)
 8017edc:	f7f0 f8be 	bl	800805c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8017ee0:	210c      	movs	r1, #12
 8017ee2:	481f      	ldr	r0, [pc, #124]	; (8017f60 <StartCtrlTask+0xcc>)
 8017ee4:	f7f0 f8ba 	bl	800805c <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8017ee8:	2108      	movs	r1, #8
 8017eea:	481e      	ldr	r0, [pc, #120]	; (8017f64 <StartCtrlTask+0xd0>)
 8017eec:	f7f0 f8b6 	bl	800805c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8017ef0:	210c      	movs	r1, #12
 8017ef2:	481c      	ldr	r0, [pc, #112]	; (8017f64 <StartCtrlTask+0xd0>)
 8017ef4:	f7f0 f8b2 	bl	800805c <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8017ef8:	2100      	movs	r1, #0
 8017efa:	481b      	ldr	r0, [pc, #108]	; (8017f68 <StartCtrlTask+0xd4>)
 8017efc:	f7f0 f8ae 	bl	800805c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8017f00:	2104      	movs	r1, #4
 8017f02:	4819      	ldr	r0, [pc, #100]	; (8017f68 <StartCtrlTask+0xd4>)
 8017f04:	f7f0 f8aa 	bl	800805c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8017f08:	2108      	movs	r1, #8
 8017f0a:	4817      	ldr	r0, [pc, #92]	; (8017f68 <StartCtrlTask+0xd4>)
 8017f0c:	f7f0 f8a6 	bl	800805c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8017f10:	210c      	movs	r1, #12
 8017f12:	4815      	ldr	r0, [pc, #84]	; (8017f68 <StartCtrlTask+0xd4>)
 8017f14:	f7f0 f8a2 	bl	800805c <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 8017f18:	2100      	movs	r1, #0
 8017f1a:	4814      	ldr	r0, [pc, #80]	; (8017f6c <StartCtrlTask+0xd8>)
 8017f1c:	f7f0 f89e 	bl	800805c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_2);
 8017f20:	2104      	movs	r1, #4
 8017f22:	4812      	ldr	r0, [pc, #72]	; (8017f6c <StartCtrlTask+0xd8>)
 8017f24:	f7f0 f89a 	bl	800805c <HAL_TIM_PWM_Stop>

	//HAL_TIM_Base_Start_IT(&htim8);
	HAL_TIM_Base_Start_IT(&htim1);
 8017f28:	480d      	ldr	r0, [pc, #52]	; (8017f60 <StartCtrlTask+0xcc>)
 8017f2a:	f7ef ffff 	bl	8007f2c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim2);
 8017f2e:	480d      	ldr	r0, [pc, #52]	; (8017f64 <StartCtrlTask+0xd0>)
 8017f30:	f7ef ffd8 	bl	8007ee4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 8017f34:	480c      	ldr	r0, [pc, #48]	; (8017f68 <StartCtrlTask+0xd4>)
 8017f36:	f7ef ffd5 	bl	8007ee4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim12);
 8017f3a:	480c      	ldr	r0, [pc, #48]	; (8017f6c <StartCtrlTask+0xd8>)
 8017f3c:	f7ef ffd2 	bl	8007ee4 <HAL_TIM_Base_Start>

	HAL_ADC_Start_DMA(&hadc1,(uint32_t *)train_adc_buf, nsmpl);
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	461a      	mov	r2, r3
 8017f44:	490a      	ldr	r1, [pc, #40]	; (8017f70 <StartCtrlTask+0xdc>)
 8017f46:	480b      	ldr	r0, [pc, #44]	; (8017f74 <StartCtrlTask+0xe0>)
 8017f48:	f7e9 ffb8 	bl	8001ebc <HAL_ADC_Start_DMA>
	//HAL_ADC_Start_DMA(&hadc1,(uint32_t *)train_adc_buffer, NUM_ADC_SAMPLES);

	startCycleCounter();
 8017f4c:	f7fd fcfe 	bl	801594c <startCycleCounter>
		p = t;
		//itm_debug1(DBG_ERR, "cycl", d);
	}
	itm_debug1(DBG_ERR, "tcycl", GetCycleCount64()-k);
	*/
	run_task_ctrl();
 8017f50:	f000 f84c 	bl	8017fec <run_task_ctrl>
}
 8017f54:	bf00      	nop
 8017f56:	3710      	adds	r7, #16
 8017f58:	46bd      	mov	sp, r7
 8017f5a:	bd80      	pop	{r7, pc}
 8017f5c:	20005290 	.word	0x20005290
 8017f60:	20006778 	.word	0x20006778
 8017f64:	20006cc4 	.word	0x20006cc4
 8017f68:	2000626c 	.word	0x2000626c
 8017f6c:	20006d08 	.word	0x20006d08
 8017f70:	200088a4 	.word	0x200088a4
 8017f74:	200062b0 	.word	0x200062b0

08017f78 <set_pwm_freq>:
int cur_freqhz = 350;
extern TIM_HandleTypeDef htim1;

// #define __HAL_TIM_SET_PRESCALER(__HANDLE__, __PRESC__)       ((__HANDLE__)->Instance->PSC = (__PRESC__))
void set_pwm_freq(int freqhz)
{
 8017f78:	b480      	push	{r7}
 8017f7a:	b085      	sub	sp, #20
 8017f7c:	af00      	add	r7, sp, #0
 8017f7e:	6078      	str	r0, [r7, #4]
	// 12MHz / 200 -> 60000
	// 50Hz = 1200
	int ps = (60000/freqhz)-1;
 8017f80:	f64e 2260 	movw	r2, #60000	; 0xea60
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	fb92 f3f3 	sdiv	r3, r2, r3
 8017f8a:	3b01      	subs	r3, #1
 8017f8c:	60fb      	str	r3, [r7, #12]
	if ((ps<1) || (ps>0xFFFF)) ps = 1200;
 8017f8e:	68fb      	ldr	r3, [r7, #12]
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	dd03      	ble.n	8017f9c <set_pwm_freq+0x24>
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017f9a:	db02      	blt.n	8017fa2 <set_pwm_freq+0x2a>
 8017f9c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8017fa0:	60fb      	str	r3, [r7, #12]
	ps = ps-1;
 8017fa2:	68fb      	ldr	r3, [r7, #12]
 8017fa4:	3b01      	subs	r3, #1
 8017fa6:	60fb      	str	r3, [r7, #12]
	cur_freqhz = 60000/(ps+1);
 8017fa8:	68fb      	ldr	r3, [r7, #12]
 8017faa:	3301      	adds	r3, #1
 8017fac:	f64e 2260 	movw	r2, #60000	; 0xea60
 8017fb0:	fb92 f3f3 	sdiv	r3, r2, r3
 8017fb4:	4a09      	ldr	r2, [pc, #36]	; (8017fdc <set_pwm_freq+0x64>)
 8017fb6:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_PRESCALER(&htim1, ps);
 8017fb8:	4b09      	ldr	r3, [pc, #36]	; (8017fe0 <set_pwm_freq+0x68>)
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	68fa      	ldr	r2, [r7, #12]
 8017fbe:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_PRESCALER(&htim2, ps);
 8017fc0:	4b08      	ldr	r3, [pc, #32]	; (8017fe4 <set_pwm_freq+0x6c>)
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	68fa      	ldr	r2, [r7, #12]
 8017fc6:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_PRESCALER(&htim8, ps);
 8017fc8:	4b07      	ldr	r3, [pc, #28]	; (8017fe8 <set_pwm_freq+0x70>)
 8017fca:	681b      	ldr	r3, [r3, #0]
 8017fcc:	68fa      	ldr	r2, [r7, #12]
 8017fce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8017fd0:	bf00      	nop
 8017fd2:	3714      	adds	r7, #20
 8017fd4:	46bd      	mov	sp, r7
 8017fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fda:	4770      	bx	lr
 8017fdc:	20000570 	.word	0x20000570
 8017fe0:	20006778 	.word	0x20006778
 8017fe4:	20006cc4 	.word	0x20006cc4
 8017fe8:	20005c78 	.word	0x20005c78

08017fec <run_task_ctrl>:

#define USE_NOTIF_TIM 0

volatile uint32_t t0ctrl;
static void run_task_ctrl(void)
{
 8017fec:	b580      	push	{r7, lr}
 8017fee:	b08a      	sub	sp, #40	; 0x28
 8017ff0:	af00      	add	r7, sp, #0
	int cnt = 0;
 8017ff2:	2300      	movs	r3, #0
 8017ff4:	627b      	str	r3, [r7, #36]	; 0x24
	//if ((0))   calibrate_bemf(); //XXX

	if ((1)) {
		msg_64_t m;
		m.from = MA_BROADCAST;
 8017ff6:	23ff      	movs	r3, #255	; 0xff
 8017ff8:	727b      	strb	r3, [r7, #9]
		m.to = MA_BROADCAST;
 8017ffa:	23ff      	movs	r3, #255	; 0xff
 8017ffc:	723b      	strb	r3, [r7, #8]
		m.cmd = CMD_SETRUN_MODE;
 8017ffe:	23fc      	movs	r3, #252	; 0xfc
 8018000:	72bb      	strb	r3, [r7, #10]
		//m.v1u = runmode_off;
		m.v1u = runmode_normal;
 8018002:	2301      	movs	r3, #1
 8018004:	81bb      	strh	r3, [r7, #12]
		mqf_write_from_nowhere(&m); // XXX it wont be sent to ctl
 8018006:	f107 0308 	add.w	r3, r7, #8
 801800a:	4618      	mov	r0, r3
 801800c:	f7ff fefc 	bl	8017e08 <mqf_write_from_nowhere>
	}

	for (;;) {
		uint32_t notif;
		xTaskNotifyWait(0, 0xFFFFFFFF, &notif, portMAX_DELAY);
 8018010:	1d3a      	adds	r2, r7, #4
 8018012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018016:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801801a:	2000      	movs	r0, #0
 801801c:	f7f6 fea8 	bl	800ed70 <xTaskNotifyWait>
		if ((1)) {
			int n = 0;
 8018020:	2300      	movs	r3, #0
 8018022:	623b      	str	r3, [r7, #32]
			if (notif & NOTIF_NEW_ADC_1)  n = 1;
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	f003 0301 	and.w	r3, r3, #1
 801802a:	2b00      	cmp	r3, #0
 801802c:	d001      	beq.n	8018032 <run_task_ctrl+0x46>
 801802e:	2301      	movs	r3, #1
 8018030:	623b      	str	r3, [r7, #32]
			if (notif & NOTIF_NEW_ADC_2)  n |= 2;
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	f003 0302 	and.w	r3, r3, #2
 8018038:	2b00      	cmp	r3, #0
 801803a:	d003      	beq.n	8018044 <run_task_ctrl+0x58>
 801803c:	6a3b      	ldr	r3, [r7, #32]
 801803e:	f043 0302 	orr.w	r3, r3, #2
 8018042:	623b      	str	r3, [r7, #32]
			itm_debug2(DBG_LOWCTRL, "-----", 0 /*(notif & NOTIF_TIM8) ? 1 : 0*/, n);
 8018044:	6a3b      	ldr	r3, [r7, #32]
 8018046:	2200      	movs	r2, #0
 8018048:	494c      	ldr	r1, [pc, #304]	; (801817c <run_task_ctrl+0x190>)
 801804a:	f44f 7080 	mov.w	r0, #256	; 0x100
 801804e:	f7ff ff05 	bl	8017e5c <itm_debug2>
			if (n==3) {
 8018052:	6a3b      	ldr	r3, [r7, #32]
 8018054:	2b03      	cmp	r3, #3
 8018056:	d105      	bne.n	8018064 <run_task_ctrl+0x78>
				itm_debug1(DBG_LOWCTRL|DBG_ERR, "both", n);
 8018058:	6a3a      	ldr	r2, [r7, #32]
 801805a:	4949      	ldr	r1, [pc, #292]	; (8018180 <run_task_ctrl+0x194>)
 801805c:	4849      	ldr	r0, [pc, #292]	; (8018184 <run_task_ctrl+0x198>)
 801805e:	f7ff fee3 	bl	8017e28 <itm_debug1>
 8018062:	e7d5      	b.n	8018010 <run_task_ctrl+0x24>
				if ((1)) continue; // skip this tick
			}
		}
		cnt++;
 8018064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018066:	3301      	adds	r3, #1
 8018068:	627b      	str	r3, [r7, #36]	; 0x24
		t0ctrl = HAL_GetTick();
 801806a:	f7e9 feb5 	bl	8001dd8 <HAL_GetTick>
 801806e:	4602      	mov	r2, r0
 8018070:	4b45      	ldr	r3, [pc, #276]	; (8018188 <run_task_ctrl+0x19c>)
 8018072:	601a      	str	r2, [r3, #0]
		if (0==(notif & (NOTIF_NEW_ADC_1|NOTIF_NEW_ADC_2))) continue;
#endif
		//debug_info('G', 0, "HOP", 0, 0, 0);
		static uint32_t oldt = 0;
		static uint32_t t0 = 0;
		uint32_t t = HAL_GetTick();
 8018074:	f7e9 feb0 	bl	8001dd8 <HAL_GetTick>
 8018078:	61f8      	str	r0, [r7, #28]
		// XXX we should have a global t0
		if (!t0) t0 = t;
 801807a:	4b44      	ldr	r3, [pc, #272]	; (801818c <run_task_ctrl+0x1a0>)
 801807c:	681b      	ldr	r3, [r3, #0]
 801807e:	2b00      	cmp	r3, #0
 8018080:	d102      	bne.n	8018088 <run_task_ctrl+0x9c>
 8018082:	4a42      	ldr	r2, [pc, #264]	; (801818c <run_task_ctrl+0x1a0>)
 8018084:	69fb      	ldr	r3, [r7, #28]
 8018086:	6013      	str	r3, [r2, #0]
		int32_t dt = (oldt) ? (t-oldt) : 1;
 8018088:	4b41      	ldr	r3, [pc, #260]	; (8018190 <run_task_ctrl+0x1a4>)
 801808a:	681b      	ldr	r3, [r3, #0]
 801808c:	2b00      	cmp	r3, #0
 801808e:	d004      	beq.n	801809a <run_task_ctrl+0xae>
 8018090:	4b3f      	ldr	r3, [pc, #252]	; (8018190 <run_task_ctrl+0x1a4>)
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	69fa      	ldr	r2, [r7, #28]
 8018096:	1ad3      	subs	r3, r2, r3
 8018098:	e000      	b.n	801809c <run_task_ctrl+0xb0>
 801809a:	2301      	movs	r3, #1
 801809c:	61bb      	str	r3, [r7, #24]
		oldt = t;
 801809e:	4a3c      	ldr	r2, [pc, #240]	; (8018190 <run_task_ctrl+0x1a4>)
 80180a0:	69fb      	ldr	r3, [r7, #28]
 80180a2:	6013      	str	r3, [r2, #0]
		ina3221
		void spdctl_run_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt);
		void msgsrv_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt);
		*/

		bemf_tick(notif, t, dt);
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	69ba      	ldr	r2, [r7, #24]
 80180a8:	69f9      	ldr	r1, [r7, #28]
 80180aa:	4618      	mov	r0, r3
 80180ac:	f7fd f820 	bl	80150f0 <bemf_tick>
		itm_debug1(DBG_LOWCTRL, "--msg", dt);
 80180b0:	69ba      	ldr	r2, [r7, #24]
 80180b2:	4938      	ldr	r1, [pc, #224]	; (8018194 <run_task_ctrl+0x1a8>)
 80180b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80180b8:	f7ff feb6 	bl	8017e28 <itm_debug1>
		msgsrv_tick(notif, t, dt);
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	69ba      	ldr	r2, [r7, #24]
 80180c0:	69f9      	ldr	r1, [r7, #28]
 80180c2:	4618      	mov	r0, r3
 80180c4:	f7fe fd34 	bl	8016b30 <msgsrv_tick>
		itm_debug1(DBG_LOWCTRL, "--spdctl", dt);
 80180c8:	69ba      	ldr	r2, [r7, #24]
 80180ca:	4933      	ldr	r1, [pc, #204]	; (8018198 <run_task_ctrl+0x1ac>)
 80180cc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80180d0:	f7ff feaa 	bl	8017e28 <itm_debug1>
		spdctl_run_tick(notif, t, dt);
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	69ba      	ldr	r2, [r7, #24]
 80180d8:	69f9      	ldr	r1, [r7, #28]
 80180da:	4618      	mov	r0, r3
 80180dc:	f7ff f8de 	bl	801729c <spdctl_run_tick>
		itm_debug1(DBG_LOWCTRL, "--canton", dt);
 80180e0:	69ba      	ldr	r2, [r7, #24]
 80180e2:	492e      	ldr	r1, [pc, #184]	; (801819c <run_task_ctrl+0x1b0>)
 80180e4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80180e8:	f7ff fe9e 	bl	8017e28 <itm_debug1>
		canton_tick(notif, t, dt);
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	69ba      	ldr	r2, [r7, #24]
 80180f0:	69f9      	ldr	r1, [r7, #28]
 80180f2:	4618      	mov	r0, r3
 80180f4:	f7fc fbe8 	bl	80148c8 <canton_tick>
		itm_debug1(DBG_LOWCTRL, "--trnout", dt);
 80180f8:	69ba      	ldr	r2, [r7, #24]
 80180fa:	4929      	ldr	r1, [pc, #164]	; (80181a0 <run_task_ctrl+0x1b4>)
 80180fc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8018100:	f7ff fe92 	bl	8017e28 <itm_debug1>
		turnout_tick(notif, t, dt);
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	69ba      	ldr	r2, [r7, #24]
 8018108:	69f9      	ldr	r1, [r7, #28]
 801810a:	4618      	mov	r0, r3
 801810c:	f7fd f998 	bl	8015440 <turnout_tick>
		itm_debug1(DBG_LOWCTRL, "--ctrl", dt);
 8018110:	69ba      	ldr	r2, [r7, #24]
 8018112:	4924      	ldr	r1, [pc, #144]	; (80181a4 <run_task_ctrl+0x1b8>)
 8018114:	f44f 7080 	mov.w	r0, #256	; 0x100
 8018118:	f7ff fe86 	bl	8017e28 <itm_debug1>
		ctrl_run_tick(notif, t, dt);
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	69ba      	ldr	r2, [r7, #24]
 8018120:	69f9      	ldr	r1, [r7, #28]
 8018122:	4618      	mov	r0, r3
 8018124:	f7fb fa7c 	bl	8013620 <ctrl_run_tick>
		_UNUSED_ uint32_t e1 = HAL_GetTick() - t;
 8018128:	f7e9 fe56 	bl	8001dd8 <HAL_GetTick>
 801812c:	4602      	mov	r2, r0
 801812e:	69fb      	ldr	r3, [r7, #28]
 8018130:	1ad3      	subs	r3, r2, r3
 8018132:	617b      	str	r3, [r7, #20]
#if USE_NOTIF_TIM
#else
		//if (cnt>20) {
		itm_debug1(DBG_LOWCTRL, "--pres", dt);
 8018134:	69ba      	ldr	r2, [r7, #24]
 8018136:	491c      	ldr	r1, [pc, #112]	; (80181a8 <run_task_ctrl+0x1bc>)
 8018138:	f44f 7080 	mov.w	r0, #256	; 0x100
 801813c:	f7ff fe74 	bl	8017e28 <itm_debug1>
		presdect_tick(notif, t, dt);
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	69ba      	ldr	r2, [r7, #24]
 8018144:	69f9      	ldr	r1, [r7, #28]
 8018146:	4618      	mov	r0, r3
 8018148:	f7fd f900 	bl	801534c <presdect_tick>
		//}
#endif
		itm_debug1(DBG_LOWCTRL, "--done", dt);
 801814c:	69ba      	ldr	r2, [r7, #24]
 801814e:	4917      	ldr	r1, [pc, #92]	; (80181ac <run_task_ctrl+0x1c0>)
 8018150:	f44f 7080 	mov.w	r0, #256	; 0x100
 8018154:	f7ff fe68 	bl	8017e28 <itm_debug1>
		uint32_t et = HAL_GetTick() - t;
 8018158:	f7e9 fe3e 	bl	8001dd8 <HAL_GetTick>
 801815c:	4602      	mov	r2, r0
 801815e:	69fb      	ldr	r3, [r7, #28]
 8018160:	1ad3      	subs	r3, r2, r3
 8018162:	613b      	str	r3, [r7, #16]
		if ((1)) {
			//itm_debug2(DBG_ERR, "ctrl tick", e1, et);
			if (et>9) {
 8018164:	693b      	ldr	r3, [r7, #16]
 8018166:	2b09      	cmp	r3, #9
 8018168:	f67f af52 	bls.w	8018010 <run_task_ctrl+0x24>
				itm_debug1(DBG_ERR, "long proc", et);
 801816c:	693b      	ldr	r3, [r7, #16]
 801816e:	461a      	mov	r2, r3
 8018170:	490f      	ldr	r1, [pc, #60]	; (80181b0 <run_task_ctrl+0x1c4>)
 8018172:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8018176:	f7ff fe57 	bl	8017e28 <itm_debug1>
	for (;;) {
 801817a:	e749      	b.n	8018010 <run_task_ctrl+0x24>
 801817c:	08019790 	.word	0x08019790
 8018180:	08019798 	.word	0x08019798
 8018184:	80000100 	.word	0x80000100
 8018188:	20008ef0 	.word	0x20008ef0
 801818c:	20005580 	.word	0x20005580
 8018190:	20005584 	.word	0x20005584
 8018194:	080197a0 	.word	0x080197a0
 8018198:	080197a8 	.word	0x080197a8
 801819c:	080197b4 	.word	0x080197b4
 80181a0:	080197c0 	.word	0x080197c0
 80181a4:	080197cc 	.word	0x080197cc
 80181a8:	080197d4 	.word	0x080197d4
 80181ac:	080197dc 	.word	0x080197dc
 80181b0:	080197e4 	.word	0x080197e4

080181b4 <HAL_ADC_ConvCpltCallback>:
static int nhalf=0;
static int nfull=0;


void HAL_ADC_ConvCpltCallback(_UNUSED_ ADC_HandleTypeDef* AdcHandle)
{
 80181b4:	b580      	push	{r7, lr}
 80181b6:	b086      	sub	sp, #24
 80181b8:	af02      	add	r7, sp, #8
 80181ba:	6078      	str	r0, [r7, #4]
	nfull++;
 80181bc:	4b0f      	ldr	r3, [pc, #60]	; (80181fc <HAL_ADC_ConvCpltCallback+0x48>)
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	3301      	adds	r3, #1
 80181c2:	4a0e      	ldr	r2, [pc, #56]	; (80181fc <HAL_ADC_ConvCpltCallback+0x48>)
 80181c4:	6013      	str	r3, [r2, #0]
	BaseType_t higher=0;
 80181c6:	2300      	movs	r3, #0
 80181c8:	60fb      	str	r3, [r7, #12]
	if ((0)) itm_debug1(DBG_TIM, "conv/f", HAL_GetTick());
	xTaskNotifyFromISR(ctrlTaskHandle, NOTIF_NEW_ADC_2, eSetBits, &higher);
 80181ca:	4b0d      	ldr	r3, [pc, #52]	; (8018200 <HAL_ADC_ConvCpltCallback+0x4c>)
 80181cc:	6818      	ldr	r0, [r3, #0]
 80181ce:	f107 030c 	add.w	r3, r7, #12
 80181d2:	9300      	str	r3, [sp, #0]
 80181d4:	2300      	movs	r3, #0
 80181d6:	2201      	movs	r2, #1
 80181d8:	2102      	movs	r1, #2
 80181da:	f7f6 fe23 	bl	800ee24 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 80181de:	68fb      	ldr	r3, [r7, #12]
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d007      	beq.n	80181f4 <HAL_ADC_ConvCpltCallback+0x40>
 80181e4:	4b07      	ldr	r3, [pc, #28]	; (8018204 <HAL_ADC_ConvCpltCallback+0x50>)
 80181e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80181ea:	601a      	str	r2, [r3, #0]
 80181ec:	f3bf 8f4f 	dsb	sy
 80181f0:	f3bf 8f6f 	isb	sy
}
 80181f4:	bf00      	nop
 80181f6:	3710      	adds	r7, #16
 80181f8:	46bd      	mov	sp, r7
 80181fa:	bd80      	pop	{r7, pc}
 80181fc:	2000557c 	.word	0x2000557c
 8018200:	200062ac 	.word	0x200062ac
 8018204:	e000ed04 	.word	0xe000ed04

08018208 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(_UNUSED_ ADC_HandleTypeDef* hadc)
{
 8018208:	b580      	push	{r7, lr}
 801820a:	b086      	sub	sp, #24
 801820c:	af02      	add	r7, sp, #8
 801820e:	6078      	str	r0, [r7, #4]
	nhalf++;
 8018210:	4b0f      	ldr	r3, [pc, #60]	; (8018250 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	3301      	adds	r3, #1
 8018216:	4a0e      	ldr	r2, [pc, #56]	; (8018250 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8018218:	6013      	str	r3, [r2, #0]
	BaseType_t higher=0;
 801821a:	2300      	movs	r3, #0
 801821c:	60fb      	str	r3, [r7, #12]
	if ((0)) itm_debug1(DBG_TIM, "conv/h", HAL_GetTick());
	xTaskNotifyFromISR(ctrlTaskHandle, NOTIF_NEW_ADC_1, eSetBits, &higher);
 801821e:	4b0d      	ldr	r3, [pc, #52]	; (8018254 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 8018220:	6818      	ldr	r0, [r3, #0]
 8018222:	f107 030c 	add.w	r3, r7, #12
 8018226:	9300      	str	r3, [sp, #0]
 8018228:	2300      	movs	r3, #0
 801822a:	2201      	movs	r2, #1
 801822c:	2101      	movs	r1, #1
 801822e:	f7f6 fdf9 	bl	800ee24 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 8018232:	68fb      	ldr	r3, [r7, #12]
 8018234:	2b00      	cmp	r3, #0
 8018236:	d007      	beq.n	8018248 <HAL_ADC_ConvHalfCpltCallback+0x40>
 8018238:	4b07      	ldr	r3, [pc, #28]	; (8018258 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 801823a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801823e:	601a      	str	r2, [r3, #0]
 8018240:	f3bf 8f4f 	dsb	sy
 8018244:	f3bf 8f6f 	isb	sy
}
 8018248:	bf00      	nop
 801824a:	3710      	adds	r7, #16
 801824c:	46bd      	mov	sp, r7
 801824e:	bd80      	pop	{r7, pc}
 8018250:	20005578 	.word	0x20005578
 8018254:	200062ac 	.word	0x200062ac
 8018258:	e000ed04 	.word	0xe000ed04

0801825c <HAL_ADC_ErrorCallback>:
void HAL_ADC_LevelOutOfWindowCallback(_UNUSED_ ADC_HandleTypeDef* hadc)
{
	itm_debug1(DBG_ERR|DBG_TIM, "ADC ERR", 1);
}
void  HAL_ADC_ErrorCallback(_UNUSED_ ADC_HandleTypeDef *hadc)
{
 801825c:	b580      	push	{r7, lr}
 801825e:	b082      	sub	sp, #8
 8018260:	af00      	add	r7, sp, #0
 8018262:	6078      	str	r0, [r7, #4]
	itm_debug1(DBG_ERR|DBG_TIM, "ADC ERR", 0);
 8018264:	2200      	movs	r2, #0
 8018266:	4904      	ldr	r1, [pc, #16]	; (8018278 <HAL_ADC_ErrorCallback+0x1c>)
 8018268:	4804      	ldr	r0, [pc, #16]	; (801827c <HAL_ADC_ErrorCallback+0x20>)
 801826a:	f7ff fddd 	bl	8017e28 <itm_debug1>
}
 801826e:	bf00      	nop
 8018270:	3708      	adds	r7, #8
 8018272:	46bd      	mov	sp, r7
 8018274:	bd80      	pop	{r7, pc}
 8018276:	bf00      	nop
 8018278:	080197f0 	.word	0x080197f0
 801827c:	80000001 	.word	0x80000001

08018280 <i2c_ready>:

#endif
/// ----------------------------------

static void i2c_ready(_UNUSED_ int a)
{
 8018280:	b480      	push	{r7}
 8018282:	b083      	sub	sp, #12
 8018284:	af00      	add	r7, sp, #0
 8018286:	6078      	str	r0, [r7, #4]

}
 8018288:	bf00      	nop
 801828a:	370c      	adds	r7, #12
 801828c:	46bd      	mov	sp, r7
 801828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018292:	4770      	bx	lr

08018294 <I2C_Scan>:
static void I2C_Scan(void)
{
 8018294:	b580      	push	{r7, lr}
 8018296:	b082      	sub	sp, #8
 8018298:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 801829a:	2300      	movs	r3, #0
 801829c:	80fb      	strh	r3, [r7, #6]
 801829e:	e013      	b.n	80182c8 <I2C_Scan+0x34>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80182a0:	88fb      	ldrh	r3, [r7, #6]
 80182a2:	005b      	lsls	r3, r3, #1
 80182a4:	b299      	uxth	r1, r3
 80182a6:	230a      	movs	r3, #10
 80182a8:	2201      	movs	r2, #1
 80182aa:	480b      	ldr	r0, [pc, #44]	; (80182d8 <I2C_Scan+0x44>)
 80182ac:	f7eb fce2 	bl	8003c74 <HAL_I2C_IsDeviceReady>
 80182b0:	4603      	mov	r3, r0
 80182b2:	717b      	strb	r3, [r7, #5]
        if(res == HAL_OK) {
 80182b4:	797b      	ldrb	r3, [r7, #5]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d103      	bne.n	80182c2 <I2C_Scan+0x2e>
        	i2c_ready(i);
 80182ba:	88fb      	ldrh	r3, [r7, #6]
 80182bc:	4618      	mov	r0, r3
 80182be:	f7ff ffdf 	bl	8018280 <i2c_ready>
    for(uint16_t i = 0; i < 128; i++) {
 80182c2:	88fb      	ldrh	r3, [r7, #6]
 80182c4:	3301      	adds	r3, #1
 80182c6:	80fb      	strh	r3, [r7, #6]
 80182c8:	88fb      	ldrh	r3, [r7, #6]
 80182ca:	2b7f      	cmp	r3, #127	; 0x7f
 80182cc:	d9e8      	bls.n	80182a0 <I2C_Scan+0xc>
        } else {
        }
    }
}
 80182ce:	bf00      	nop
 80182d0:	3708      	adds	r7, #8
 80182d2:	46bd      	mov	sp, r7
 80182d4:	bd80      	pop	{r7, pc}
 80182d6:	bf00      	nop
 80182d8:	20005d60 	.word	0x20005d60

080182dc <StartUiTask>:
static int test_mode = 0;

*/

void StartUiTask(_UNUSED_ void *argument)
{
 80182dc:	b580      	push	{r7, lr}
 80182de:	b084      	sub	sp, #16
 80182e0:	af00      	add	r7, sp, #0
 80182e2:	6078      	str	r0, [r7, #4]
	// init
	extern TIM_HandleTypeDef htim4;

	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80182e4:	213c      	movs	r1, #60	; 0x3c
 80182e6:	480b      	ldr	r0, [pc, #44]	; (8018314 <StartUiTask+0x38>)
 80182e8:	f7ef ffa2 	bl	8008230 <HAL_TIM_Encoder_Start>

	//display_addr[0] = 0; //XXX
	//needsrefresh_mask = 0;
	for (int i=0; i<MAX_DISP; i++) {
 80182ec:	2300      	movs	r3, #0
 80182ee:	60fb      	str	r3, [r7, #12]
 80182f0:	e006      	b.n	8018300 <StartUiTask+0x24>
		I2C_Scan();
 80182f2:	f7ff ffcf 	bl	8018294 <I2C_Scan>
		ssd1306_Init();
 80182f6:	f7f8 fb55 	bl	80109a4 <ssd1306_Init>
	for (int i=0; i<MAX_DISP; i++) {
 80182fa:	68fb      	ldr	r3, [r7, #12]
 80182fc:	3301      	adds	r3, #1
 80182fe:	60fb      	str	r3, [r7, #12]
 8018300:	68fb      	ldr	r3, [r7, #12]
 8018302:	2b00      	cmp	r3, #0
 8018304:	ddf5      	ble.n	80182f2 <StartUiTask+0x16>
			itm_debug1(DBG_ERR|DBG_UI, "notif?", notif);
		}
		if (!(notif & NOTIF_TICKUI)) continue;
#else
		static TickType_t lasttick = 0;
		vTaskDelayUntil(&lasttick, 100);
 8018306:	2164      	movs	r1, #100	; 0x64
 8018308:	4803      	ldr	r0, [pc, #12]	; (8018318 <StartUiTask+0x3c>)
 801830a:	f7f5 ffa5 	bl	800e258 <vTaskDelayUntil>
		//lasttick = HAL_GetTick();

#endif
		ihm_runtick();
 801830e:	f7fa fabd 	bl	801288c <ihm_runtick>
	for (;;) {
 8018312:	e7f8      	b.n	8018306 <StartUiTask+0x2a>
 8018314:	20005d1c 	.word	0x20005d1c
 8018318:	20005588 	.word	0x20005588

0801831c <StartTxRxFrameTask>:

static void handleRxChars(frame_msg_t *m);
static void _send_bytes(uint8_t *b, int len);

void StartTxRxFrameTask(_UNUSED_ void *argument)
{
 801831c:	b580      	push	{r7, lr}
 801831e:	b090      	sub	sp, #64	; 0x40
 8018320:	af00      	add	r7, sp, #0
 8018322:	6078      	str	r0, [r7, #4]
	  MX_USB_DEVICE_Init();
 8018324:	f7f7 fe0a 	bl	800ff3c <MX_USB_DEVICE_Init>
		if ((0)) {
			osDelay(10000);
			continue;
		}
		uint8_t msg_prio;
		osStatus_t rc = osMessageQueueGet(frameQueueHandle, &m, &msg_prio, portMAX_DELAY);
 8018328:	4b27      	ldr	r3, [pc, #156]	; (80183c8 <StartTxRxFrameTask+0xac>)
 801832a:	6818      	ldr	r0, [r3, #0]
 801832c:	f107 0237 	add.w	r2, r7, #55	; 0x37
 8018330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018334:	4925      	ldr	r1, [pc, #148]	; (80183cc <StartTxRxFrameTask+0xb0>)
 8018336:	f7f4 fe95 	bl	800d064 <osMessageQueueGet>
 801833a:	63f8      	str	r0, [r7, #60]	; 0x3c
		num_msg_get++;
 801833c:	4b24      	ldr	r3, [pc, #144]	; (80183d0 <StartTxRxFrameTask+0xb4>)
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	3301      	adds	r3, #1
 8018342:	4a23      	ldr	r2, [pc, #140]	; (80183d0 <StartTxRxFrameTask+0xb4>)
 8018344:	6013      	str	r3, [r2, #0]
		if ((0)) flash_led();
        usbPollQueues();
 8018346:	f7fd fda9 	bl	8015e9c <usbPollQueues>
        if (rc == osErrorTimeout) continue;
 801834a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801834c:	f113 0f02 	cmn.w	r3, #2
 8018350:	d038      	beq.n	80183c4 <StartTxRxFrameTask+0xa8>
		if (rc != osOK) {
 8018352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018354:	2b00      	cmp	r3, #0
 8018356:	d005      	beq.n	8018364 <StartTxRxFrameTask+0x48>
			num_msg_get_err++;
 8018358:	4b1e      	ldr	r3, [pc, #120]	; (80183d4 <StartTxRxFrameTask+0xb8>)
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	3301      	adds	r3, #1
 801835e:	4a1d      	ldr	r2, [pc, #116]	; (80183d4 <StartTxRxFrameTask+0xb8>)
 8018360:	6013      	str	r3, [r2, #0]
			continue;
 8018362:	e030      	b.n	80183c6 <StartTxRxFrameTask+0xaa>
		}
		if (m.t == RXFRAME_CHARS) {
 8018364:	4b19      	ldr	r3, [pc, #100]	; (80183cc <StartTxRxFrameTask+0xb0>)
 8018366:	781b      	ldrb	r3, [r3, #0]
 8018368:	2bff      	cmp	r3, #255	; 0xff
 801836a:	d103      	bne.n	8018374 <StartTxRxFrameTask+0x58>
			//debug_info('G', 0, "RXFRM", m.len,0, 0);
			handleRxChars(&m);
 801836c:	4817      	ldr	r0, [pc, #92]	; (80183cc <StartTxRxFrameTask+0xb0>)
 801836e:	f000 f89f 	bl	80184b0 <handleRxChars>
			continue;
 8018372:	e028      	b.n	80183c6 <StartTxRxFrameTask+0xaa>
		}
		if (m.t == TXFRAME_TYPE_STAT) {
 8018374:	4b15      	ldr	r3, [pc, #84]	; (80183cc <StartTxRxFrameTask+0xb0>)
 8018376:	781b      	ldrb	r3, [r3, #0]
 8018378:	2b04      	cmp	r3, #4
 801837a:	d11c      	bne.n	80183b6 <StartTxRxFrameTask+0x9a>
			uint32_t t = HAL_GetTick();   // XXX t0
 801837c:	f7e9 fd2c 	bl	8001dd8 <HAL_GetTick>
 8018380:	63b8      	str	r0, [r7, #56]	; 0x38
			uint8_t b[]="|_NG\000X";
 8018382:	4a15      	ldr	r2, [pc, #84]	; (80183d8 <StartTxRxFrameTask+0xbc>)
 8018384:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018388:	e892 0003 	ldmia.w	r2, {r0, r1}
 801838c:	6018      	str	r0, [r3, #0]
 801838e:	3304      	adds	r3, #4
 8018390:	8019      	strh	r1, [r3, #0]
 8018392:	3302      	adds	r3, #2
 8018394:	0c0a      	lsrs	r2, r1, #16
 8018396:	701a      	strb	r2, [r3, #0]
			//memcpy(b+6, &t, 4);
			_send_bytes(b, 6);
 8018398:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801839c:	2106      	movs	r1, #6
 801839e:	4618      	mov	r0, r3
 80183a0:	f000 f822 	bl	80183e8 <_send_bytes>
			frame_send_stat(_send_bytes, t);
 80183a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80183a6:	480d      	ldr	r0, [pc, #52]	; (80183dc <StartTxRxFrameTask+0xc0>)
 80183a8:	f7fe fab9 	bl	801691e <frame_send_stat>
			_send_bytes((uint8_t *)"|", 1);
 80183ac:	2101      	movs	r1, #1
 80183ae:	480c      	ldr	r0, [pc, #48]	; (80183e0 <StartTxRxFrameTask+0xc4>)
 80183b0:	f000 f81a 	bl	80183e8 <_send_bytes>
 80183b4:	e7b8      	b.n	8018328 <StartTxRxFrameTask+0xc>
			continue;
		}
		_send_bytes(m.frm, m.len);
 80183b6:	4b05      	ldr	r3, [pc, #20]	; (80183cc <StartTxRxFrameTask+0xb0>)
 80183b8:	785b      	ldrb	r3, [r3, #1]
 80183ba:	4619      	mov	r1, r3
 80183bc:	4809      	ldr	r0, [pc, #36]	; (80183e4 <StartTxRxFrameTask+0xc8>)
 80183be:	f000 f813 	bl	80183e8 <_send_bytes>
 80183c2:	e7b1      	b.n	8018328 <StartTxRxFrameTask+0xc>
        if (rc == osErrorTimeout) continue;
 80183c4:	bf00      	nop
	for (;;) {
 80183c6:	e7af      	b.n	8018328 <StartTxRxFrameTask+0xc>
 80183c8:	20005d5c 	.word	0x20005d5c
 80183cc:	2000559c 	.word	0x2000559c
 80183d0:	2000558c 	.word	0x2000558c
 80183d4:	20005594 	.word	0x20005594
 80183d8:	080197fc 	.word	0x080197fc
 80183dc:	080183e9 	.word	0x080183e9
 80183e0:	080197f8 	.word	0x080197f8
 80183e4:	2000559e 	.word	0x2000559e

080183e8 <_send_bytes>:
	}
}
//void frame_send_stat(void(*cb)(uint8_t *d, int l));

static void _send_bytes(uint8_t *b, int len)
{
 80183e8:	b580      	push	{r7, lr}
 80183ea:	b084      	sub	sp, #16
 80183ec:	af00      	add	r7, sp, #0
 80183ee:	6078      	str	r0, [r7, #4]
 80183f0:	6039      	str	r1, [r7, #0]
	for (;;) {
		uint8_t rc = CDC_Transmit_FS(b, len);
 80183f2:	683b      	ldr	r3, [r7, #0]
 80183f4:	b29b      	uxth	r3, r3
 80183f6:	4619      	mov	r1, r3
 80183f8:	6878      	ldr	r0, [r7, #4]
 80183fa:	f7f7 fe57 	bl	80100ac <CDC_Transmit_FS>
 80183fe:	4603      	mov	r3, r0
 8018400:	73fb      	strb	r3, [r7, #15]
		if (rc != USBD_BUSY) break;
 8018402:	7bfb      	ldrb	r3, [r7, #15]
 8018404:	2b01      	cmp	r3, #1
 8018406:	d103      	bne.n	8018410 <_send_bytes+0x28>
		osDelay(1);
 8018408:	2001      	movs	r0, #1
 801840a:	f7f4 fd03 	bl	800ce14 <osDelay>
	for (;;) {
 801840e:	e7f0      	b.n	80183f2 <_send_bytes+0xa>
		if (rc != USBD_BUSY) break;
 8018410:	bf00      	nop
	}
}
 8018412:	bf00      	nop
 8018414:	3710      	adds	r7, #16
 8018416:	46bd      	mov	sp, r7
 8018418:	bd80      	pop	{r7, pc}
	...

0801841c <txframe_send>:

int txframe_queue_full = 0;

void txframe_send(frame_msg_t *m, int discardable)
{
 801841c:	b580      	push	{r7, lr}
 801841e:	b084      	sub	sp, #16
 8018420:	af00      	add	r7, sp, #0
 8018422:	6078      	str	r0, [r7, #4]
 8018424:	6039      	str	r1, [r7, #0]
	int s = osMessageQueueGetSpace(frameQueueHandle);
 8018426:	4b1f      	ldr	r3, [pc, #124]	; (80184a4 <txframe_send+0x88>)
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	4618      	mov	r0, r3
 801842c:	f7f4 fe8c 	bl	800d148 <osMessageQueueGetSpace>
 8018430:	4603      	mov	r3, r0
 8018432:	60fb      	str	r3, [r7, #12]
	if (s<=0) {
 8018434:	68fb      	ldr	r3, [r7, #12]
 8018436:	2b00      	cmp	r3, #0
 8018438:	dc07      	bgt.n	801844a <txframe_send+0x2e>
		txframe_queue_full++;
 801843a:	4b1b      	ldr	r3, [pc, #108]	; (80184a8 <txframe_send+0x8c>)
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	3301      	adds	r3, #1
 8018440:	4a19      	ldr	r2, [pc, #100]	; (80184a8 <txframe_send+0x8c>)
 8018442:	6013      	str	r3, [r2, #0]
		if (discardable) return;
 8018444:	683b      	ldr	r3, [r7, #0]
 8018446:	2b00      	cmp	r3, #0
 8018448:	d127      	bne.n	801849a <txframe_send+0x7e>
	}
	if ((s<=20) && discardable) {
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	2b14      	cmp	r3, #20
 801844e:	dc08      	bgt.n	8018462 <txframe_send+0x46>
 8018450:	683b      	ldr	r3, [r7, #0]
 8018452:	2b00      	cmp	r3, #0
 8018454:	d005      	beq.n	8018462 <txframe_send+0x46>
		// we use a single queue, and no priority available with freertos
		// so we just keep some space for non discardable frames
		txframe_queue_full++;
 8018456:	4b14      	ldr	r3, [pc, #80]	; (80184a8 <txframe_send+0x8c>)
 8018458:	681b      	ldr	r3, [r3, #0]
 801845a:	3301      	adds	r3, #1
 801845c:	4a12      	ldr	r2, [pc, #72]	; (80184a8 <txframe_send+0x8c>)
 801845e:	6013      	str	r3, [r2, #0]
		return;
 8018460:	e01c      	b.n	801849c <txframe_send+0x80>
	}
	uint32_t t = discardable ? 0 : portMAX_DELAY;
 8018462:	683b      	ldr	r3, [r7, #0]
 8018464:	2b00      	cmp	r3, #0
 8018466:	d001      	beq.n	801846c <txframe_send+0x50>
 8018468:	2300      	movs	r3, #0
 801846a:	e001      	b.n	8018470 <txframe_send+0x54>
 801846c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018470:	60bb      	str	r3, [r7, #8]
	if (m->len>FRM_MAX_LEN) m->len=FRM_MAX_LEN;
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	785b      	ldrb	r3, [r3, #1]
 8018476:	2b1f      	cmp	r3, #31
 8018478:	d902      	bls.n	8018480 <txframe_send+0x64>
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	221f      	movs	r2, #31
 801847e:	705a      	strb	r2, [r3, #1]
	num_msg_put++;
 8018480:	4b0a      	ldr	r3, [pc, #40]	; (80184ac <txframe_send+0x90>)
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	3301      	adds	r3, #1
 8018486:	4a09      	ldr	r2, [pc, #36]	; (80184ac <txframe_send+0x90>)
 8018488:	6013      	str	r3, [r2, #0]
	osMessageQueuePut(frameQueueHandle, m, 0, t);
 801848a:	4b06      	ldr	r3, [pc, #24]	; (80184a4 <txframe_send+0x88>)
 801848c:	6818      	ldr	r0, [r3, #0]
 801848e:	68bb      	ldr	r3, [r7, #8]
 8018490:	2200      	movs	r2, #0
 8018492:	6879      	ldr	r1, [r7, #4]
 8018494:	f7f4 fd72 	bl	800cf7c <osMessageQueuePut>
 8018498:	e000      	b.n	801849c <txframe_send+0x80>
		if (discardable) return;
 801849a:	bf00      	nop
}
 801849c:	3710      	adds	r7, #16
 801849e:	46bd      	mov	sp, r7
 80184a0:	bd80      	pop	{r7, pc}
 80184a2:	bf00      	nop
 80184a4:	20005d5c 	.word	0x20005d5c
 80184a8:	20005598 	.word	0x20005598
 80184ac:	20005590 	.word	0x20005590

080184b0 <handleRxChars>:

/* ------ RX ----- */

static void handleRxChars(frame_msg_t *m)
{
 80184b0:	b580      	push	{r7, lr}
 80184b2:	b08e      	sub	sp, #56	; 0x38
 80184b4:	af00      	add	r7, sp, #0
 80184b6:	6078      	str	r0, [r7, #4]
    frame_msg_t frresp;
	frresp.t = TXFRAME_TYPE_RESP;
 80184b8:	2301      	movs	r3, #1
 80184ba:	743b      	strb	r3, [r7, #16]
	/*
	 * int rlen = FRM_MAX_LEN;
	    	frame_process(cRxedChar,m.frm, &rlen);
	 */
	for (int i=0; i<m->len; i++) {
 80184bc:	2300      	movs	r3, #0
 80184be:	637b      	str	r3, [r7, #52]	; 0x34
 80184c0:	e01c      	b.n	80184fc <handleRxChars+0x4c>
		int rlen = FRM_MAX_LEN;
 80184c2:	231f      	movs	r3, #31
 80184c4:	60fb      	str	r3, [r7, #12]
		txrx_process_char(m->frm[i], frresp.frm, &rlen);
 80184c6:	687a      	ldr	r2, [r7, #4]
 80184c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184ca:	4413      	add	r3, r2
 80184cc:	3302      	adds	r3, #2
 80184ce:	7818      	ldrb	r0, [r3, #0]
 80184d0:	f107 020c 	add.w	r2, r7, #12
 80184d4:	f107 0310 	add.w	r3, r7, #16
 80184d8:	3302      	adds	r3, #2
 80184da:	4619      	mov	r1, r3
 80184dc:	f7fd fcf2 	bl	8015ec4 <txrx_process_char>
		if (rlen>0) {
 80184e0:	68fb      	ldr	r3, [r7, #12]
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	dd07      	ble.n	80184f6 <handleRxChars+0x46>
			//debug_info('G', 0, "RESP", rlen,0, 0);
			// would deadlock if we send (non discardable) through the queue
			//txframe_send_response(&frresp, rlen);
			_send_bytes(frresp.frm, rlen);
 80184e6:	68fa      	ldr	r2, [r7, #12]
 80184e8:	f107 0310 	add.w	r3, r7, #16
 80184ec:	3302      	adds	r3, #2
 80184ee:	4611      	mov	r1, r2
 80184f0:	4618      	mov	r0, r3
 80184f2:	f7ff ff79 	bl	80183e8 <_send_bytes>
	for (int i=0; i<m->len; i++) {
 80184f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184f8:	3301      	adds	r3, #1
 80184fa:	637b      	str	r3, [r7, #52]	; 0x34
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	785b      	ldrb	r3, [r3, #1]
 8018500:	461a      	mov	r2, r3
 8018502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018504:	4293      	cmp	r3, r2
 8018506:	dbdc      	blt.n	80184c2 <handleRxChars+0x12>
			//frresp.len = rlen;
			//_send_frm(&frresp);
		}
	}
}
 8018508:	bf00      	nop
 801850a:	3738      	adds	r7, #56	; 0x38
 801850c:	46bd      	mov	sp, r7
 801850e:	bd80      	pop	{r7, pc}

08018510 <impl_CDC_Receive_FS>:

extern USBD_HandleTypeDef hUsbDeviceFS;


int8_t impl_CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018510:	b580      	push	{r7, lr}
 8018512:	b086      	sub	sp, #24
 8018514:	af00      	add	r7, sp, #0
 8018516:	6078      	str	r0, [r7, #4]
 8018518:	6039      	str	r1, [r7, #0]
	if ((0)) {
		sprintf(str, "[B%d]\r\n", *Len);
		CDC_Transmit_FS(str, strlen(str));
	}
	*/
	uint8_t *p = Buf;
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	617b      	str	r3, [r7, #20]
	int32_t rlen = *Len;
 801851e:	683b      	ldr	r3, [r7, #0]
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	613b      	str	r3, [r7, #16]
	for (;;) {
		//BaseType_t xHigherPriorityTaskWoken = pdFALSE;
		frrx.t = RXFRAME_CHARS;
 8018524:	4b18      	ldr	r3, [pc, #96]	; (8018588 <impl_CDC_Receive_FS+0x78>)
 8018526:	22ff      	movs	r2, #255	; 0xff
 8018528:	701a      	strb	r2, [r3, #0]
		int l = MIN(rlen, RXFRAME_CHARS);
 801852a:	693b      	ldr	r3, [r7, #16]
 801852c:	2bff      	cmp	r3, #255	; 0xff
 801852e:	bfa8      	it	ge
 8018530:	23ff      	movge	r3, #255	; 0xff
 8018532:	60fb      	str	r3, [r7, #12]
		memcpy(frrx.frm, p, l);
 8018534:	68fb      	ldr	r3, [r7, #12]
 8018536:	461a      	mov	r2, r3
 8018538:	6979      	ldr	r1, [r7, #20]
 801853a:	4814      	ldr	r0, [pc, #80]	; (801858c <impl_CDC_Receive_FS+0x7c>)
 801853c:	f000 fbb0 	bl	8018ca0 <memcpy>
		rlen -= l;
 8018540:	693a      	ldr	r2, [r7, #16]
 8018542:	68fb      	ldr	r3, [r7, #12]
 8018544:	1ad3      	subs	r3, r2, r3
 8018546:	613b      	str	r3, [r7, #16]
		p += l;
 8018548:	68fb      	ldr	r3, [r7, #12]
 801854a:	697a      	ldr	r2, [r7, #20]
 801854c:	4413      	add	r3, r2
 801854e:	617b      	str	r3, [r7, #20]
		frrx.len = l;
 8018550:	68fb      	ldr	r3, [r7, #12]
 8018552:	b2da      	uxtb	r2, r3
 8018554:	4b0c      	ldr	r3, [pc, #48]	; (8018588 <impl_CDC_Receive_FS+0x78>)
 8018556:	705a      	strb	r2, [r3, #1]
		osMessageQueuePut(frameQueueHandle, &frrx, 0, 0);
 8018558:	4b0d      	ldr	r3, [pc, #52]	; (8018590 <impl_CDC_Receive_FS+0x80>)
 801855a:	6818      	ldr	r0, [r3, #0]
 801855c:	2300      	movs	r3, #0
 801855e:	2200      	movs	r2, #0
 8018560:	4909      	ldr	r1, [pc, #36]	; (8018588 <impl_CDC_Receive_FS+0x78>)
 8018562:	f7f4 fd0b 	bl	800cf7c <osMessageQueuePut>
		if (rlen <= 0) break;
 8018566:	693b      	ldr	r3, [r7, #16]
 8018568:	2b00      	cmp	r3, #0
 801856a:	dd00      	ble.n	801856e <impl_CDC_Receive_FS+0x5e>
	for (;;) {
 801856c:	e7da      	b.n	8018524 <impl_CDC_Receive_FS+0x14>
		if (rlen <= 0) break;
 801856e:	bf00      	nop
	}

	//CDC_Transmit_FS(Buf, *Len); // ADD THIS LINE to echo back all incoming data

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8018570:	6879      	ldr	r1, [r7, #4]
 8018572:	4808      	ldr	r0, [pc, #32]	; (8018594 <impl_CDC_Receive_FS+0x84>)
 8018574:	f7f3 f9c4 	bl	800b900 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018578:	4806      	ldr	r0, [pc, #24]	; (8018594 <impl_CDC_Receive_FS+0x84>)
 801857a:	f7f3 fa05 	bl	800b988 <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 801857e:	2300      	movs	r3, #0
}
 8018580:	4618      	mov	r0, r3
 8018582:	3718      	adds	r7, #24
 8018584:	46bd      	mov	sp, r7
 8018586:	bd80      	pop	{r7, pc}
 8018588:	200055c0 	.word	0x200055c0
 801858c:	200055c2 	.word	0x200055c2
 8018590:	20005d5c 	.word	0x20005d5c
 8018594:	20006fcc 	.word	0x20006fcc

08018598 <itm_debug3>:
{
 8018598:	b580      	push	{r7, lr}
 801859a:	b086      	sub	sp, #24
 801859c:	af02      	add	r7, sp, #8
 801859e:	60f8      	str	r0, [r7, #12]
 80185a0:	60b9      	str	r1, [r7, #8]
 80185a2:	607a      	str	r2, [r7, #4]
 80185a4:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 80185a6:	4b09      	ldr	r3, [pc, #36]	; (80185cc <itm_debug3+0x34>)
 80185a8:	681a      	ldr	r2, [r3, #0]
 80185aa:	68fb      	ldr	r3, [r7, #12]
 80185ac:	4013      	ands	r3, r2
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d007      	beq.n	80185c2 <itm_debug3+0x2a>
 80185b2:	2303      	movs	r3, #3
 80185b4:	9300      	str	r3, [sp, #0]
 80185b6:	69bb      	ldr	r3, [r7, #24]
 80185b8:	683a      	ldr	r2, [r7, #0]
 80185ba:	6879      	ldr	r1, [r7, #4]
 80185bc:	68b8      	ldr	r0, [r7, #8]
 80185be:	f000 f959 	bl	8018874 <_itm_debug3>
}
 80185c2:	bf00      	nop
 80185c4:	3710      	adds	r7, #16
 80185c6:	46bd      	mov	sp, r7
 80185c8:	bd80      	pop	{r7, pc}
 80185ca:	bf00      	nop
 80185cc:	20000574 	.word	0x20000574

080185d0 <_blk_num_for_sub_num>:
#include "railconfig.h"
#include "topology.h"


int _blk_num_for_sub_num(int subnum)
{
 80185d0:	b480      	push	{r7}
 80185d2:	b083      	sub	sp, #12
 80185d4:	af00      	add	r7, sp, #0
 80185d6:	6078      	str	r0, [r7, #4]
	if (subnum == 2) return 0;
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	2b02      	cmp	r3, #2
 80185dc:	d101      	bne.n	80185e2 <_blk_num_for_sub_num+0x12>
 80185de:	2300      	movs	r3, #0
 80185e0:	e00b      	b.n	80185fa <_blk_num_for_sub_num+0x2a>
	if (subnum == 1) return 1;
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	2b01      	cmp	r3, #1
 80185e6:	d101      	bne.n	80185ec <_blk_num_for_sub_num+0x1c>
 80185e8:	2301      	movs	r3, #1
 80185ea:	e006      	b.n	80185fa <_blk_num_for_sub_num+0x2a>
	if (subnum == 0) return 2;
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d101      	bne.n	80185f6 <_blk_num_for_sub_num+0x26>
 80185f2:	2302      	movs	r3, #2
 80185f4:	e001      	b.n	80185fa <_blk_num_for_sub_num+0x2a>
	return -1;
 80185f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80185fa:	4618      	mov	r0, r3
 80185fc:	370c      	adds	r7, #12
 80185fe:	46bd      	mov	sp, r7
 8018600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018604:	4770      	bx	lr

08018606 <_next_block_num>:


int _next_block_num(int blknum, uint8_t left)
{
 8018606:	b580      	push	{r7, lr}
 8018608:	b082      	sub	sp, #8
 801860a:	af00      	add	r7, sp, #0
 801860c:	6078      	str	r0, [r7, #4]
 801860e:	460b      	mov	r3, r1
 8018610:	70fb      	strb	r3, [r7, #3]
	if ((0)) return -1; // XXX
	switch (blknum) {
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	2b01      	cmp	r3, #1
 8018616:	d00b      	beq.n	8018630 <_next_block_num+0x2a>
 8018618:	2b02      	cmp	r3, #2
 801861a:	d019      	beq.n	8018650 <_next_block_num+0x4a>
 801861c:	2b00      	cmp	r3, #0
 801861e:	d11f      	bne.n	8018660 <_next_block_num+0x5a>
	case 0:
		return left ? 	-1 : 1;
 8018620:	78fb      	ldrb	r3, [r7, #3]
 8018622:	2b00      	cmp	r3, #0
 8018624:	d002      	beq.n	801862c <_next_block_num+0x26>
 8018626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801862a:	e01b      	b.n	8018664 <_next_block_num+0x5e>
 801862c:	2301      	movs	r3, #1
 801862e:	e019      	b.n	8018664 <_next_block_num+0x5e>
	case 1:
		return left ?	(topology_get_turnout(0) ? 2 : 0)  : -1;
 8018630:	78fb      	ldrb	r3, [r7, #3]
 8018632:	2b00      	cmp	r3, #0
 8018634:	d009      	beq.n	801864a <_next_block_num+0x44>
 8018636:	2000      	movs	r0, #0
 8018638:	f000 f880 	bl	801873c <topology_get_turnout>
 801863c:	4603      	mov	r3, r0
 801863e:	2b00      	cmp	r3, #0
 8018640:	d001      	beq.n	8018646 <_next_block_num+0x40>
 8018642:	2302      	movs	r3, #2
 8018644:	e00e      	b.n	8018664 <_next_block_num+0x5e>
 8018646:	2300      	movs	r3, #0
 8018648:	e00c      	b.n	8018664 <_next_block_num+0x5e>
 801864a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801864e:	e009      	b.n	8018664 <_next_block_num+0x5e>
	case 2:
		return left ?   -1 : 1;
 8018650:	78fb      	ldrb	r3, [r7, #3]
 8018652:	2b00      	cmp	r3, #0
 8018654:	d002      	beq.n	801865c <_next_block_num+0x56>
 8018656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801865a:	e003      	b.n	8018664 <_next_block_num+0x5e>
 801865c:	2301      	movs	r3, #1
 801865e:	e001      	b.n	8018664 <_next_block_num+0x5e>
	default:
		return -1;
 8018660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8018664:	4618      	mov	r0, r3
 8018666:	3708      	adds	r7, #8
 8018668:	46bd      	mov	sp, r7
 801866a:	bd80      	pop	{r7, pc}

0801866c <get_blk_len>:

int get_blk_len(int blknum)
{
 801866c:	b480      	push	{r7}
 801866e:	b083      	sub	sp, #12
 8018670:	af00      	add	r7, sp, #0
 8018672:	6078      	str	r0, [r7, #4]
	switch (blknum) {
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	2b01      	cmp	r3, #1
 8018678:	d005      	beq.n	8018686 <get_blk_len+0x1a>
 801867a:	2b02      	cmp	r3, #2
 801867c:	d005      	beq.n	801868a <get_blk_len+0x1e>
 801867e:	2b00      	cmp	r3, #0
 8018680:	d105      	bne.n	801868e <get_blk_len+0x22>
	case 0:
		return 70;
 8018682:	2346      	movs	r3, #70	; 0x46
 8018684:	e004      	b.n	8018690 <get_blk_len+0x24>
	case 1:
		return 40;
 8018686:	2328      	movs	r3, #40	; 0x28
 8018688:	e002      	b.n	8018690 <get_blk_len+0x24>
	case 2:
		return 50;
 801868a:	2332      	movs	r3, #50	; 0x32
 801868c:	e000      	b.n	8018690 <get_blk_len+0x24>
	default:
		return 10;
 801868e:	230a      	movs	r3, #10
	}
}
 8018690:	4618      	mov	r0, r3
 8018692:	370c      	adds	r7, #12
 8018694:	46bd      	mov	sp, r7
 8018696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801869a:	4770      	bx	lr

0801869c <topolgy_set_turnout>:
// --------------------------------------------------------------------------------------

static volatile uint32_t turnoutvals = 0; // bit field

void topolgy_set_turnout(int tn, int v)
{
 801869c:	b580      	push	{r7, lr}
 801869e:	b084      	sub	sp, #16
 80186a0:	af02      	add	r7, sp, #8
 80186a2:	6078      	str	r0, [r7, #4]
 80186a4:	6039      	str	r1, [r7, #0]
	if (tn >= NUM_TURNOUTS) return;
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	2b07      	cmp	r3, #7
 80186aa:	dc3b      	bgt.n	8018724 <topolgy_set_turnout+0x88>
	if (tn<0) return;
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	db3a      	blt.n	8018728 <topolgy_set_turnout+0x8c>
	if (tn>31) return;
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	2b1f      	cmp	r3, #31
 80186b6:	dc39      	bgt.n	801872c <topolgy_set_turnout+0x90>

	if (v) {
 80186b8:	683b      	ldr	r3, [r7, #0]
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	d012      	beq.n	80186e4 <topolgy_set_turnout+0x48>
		__sync_fetch_and_or(&turnoutvals, (1<<tn));
 80186be:	2201      	movs	r2, #1
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	fa02 f303 	lsl.w	r3, r2, r3
 80186c6:	461a      	mov	r2, r3
 80186c8:	4b1a      	ldr	r3, [pc, #104]	; (8018734 <topolgy_set_turnout+0x98>)
 80186ca:	f3bf 8f5b 	dmb	ish
 80186ce:	e853 1f00 	ldrex	r1, [r3]
 80186d2:	ea41 0102 	orr.w	r1, r1, r2
 80186d6:	e843 1000 	strex	r0, r1, [r3]
 80186da:	2800      	cmp	r0, #0
 80186dc:	d1f7      	bne.n	80186ce <topolgy_set_turnout+0x32>
 80186de:	f3bf 8f5b 	dmb	ish
 80186e2:	e012      	b.n	801870a <topolgy_set_turnout+0x6e>
	} else {
		__sync_fetch_and_and(&turnoutvals, ~(1<<tn));
 80186e4:	2201      	movs	r2, #1
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	fa02 f303 	lsl.w	r3, r2, r3
 80186ec:	43db      	mvns	r3, r3
 80186ee:	461a      	mov	r2, r3
 80186f0:	4b10      	ldr	r3, [pc, #64]	; (8018734 <topolgy_set_turnout+0x98>)
 80186f2:	f3bf 8f5b 	dmb	ish
 80186f6:	e853 1f00 	ldrex	r1, [r3]
 80186fa:	ea01 0102 	and.w	r1, r1, r2
 80186fe:	e843 1000 	strex	r0, r1, [r3]
 8018702:	2800      	cmp	r0, #0
 8018704:	d1f7      	bne.n	80186f6 <topolgy_set_turnout+0x5a>
 8018706:	f3bf 8f5b 	dmb	ish
	}
	itm_debug3(DBG_TURNOUT, "tt",tn,v, topology_get_turnout(tn));
 801870a:	6878      	ldr	r0, [r7, #4]
 801870c:	f000 f816 	bl	801873c <topology_get_turnout>
 8018710:	4603      	mov	r3, r0
 8018712:	9300      	str	r3, [sp, #0]
 8018714:	683b      	ldr	r3, [r7, #0]
 8018716:	687a      	ldr	r2, [r7, #4]
 8018718:	4907      	ldr	r1, [pc, #28]	; (8018738 <topolgy_set_turnout+0x9c>)
 801871a:	f44f 7000 	mov.w	r0, #512	; 0x200
 801871e:	f7ff ff3b 	bl	8018598 <itm_debug3>
 8018722:	e004      	b.n	801872e <topolgy_set_turnout+0x92>
	if (tn >= NUM_TURNOUTS) return;
 8018724:	bf00      	nop
 8018726:	e002      	b.n	801872e <topolgy_set_turnout+0x92>
	if (tn<0) return;
 8018728:	bf00      	nop
 801872a:	e000      	b.n	801872e <topolgy_set_turnout+0x92>
	if (tn>31) return;
 801872c:	bf00      	nop
}
 801872e:	3708      	adds	r7, #8
 8018730:	46bd      	mov	sp, r7
 8018732:	bd80      	pop	{r7, pc}
 8018734:	200055e4 	.word	0x200055e4
 8018738:	08019804 	.word	0x08019804

0801873c <topology_get_turnout>:
int topology_get_turnout(int tn)
{
 801873c:	b480      	push	{r7}
 801873e:	b085      	sub	sp, #20
 8018740:	af00      	add	r7, sp, #0
 8018742:	6078      	str	r0, [r7, #4]
	if (tn >= NUM_TURNOUTS) return 0;
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	2b07      	cmp	r3, #7
 8018748:	dd01      	ble.n	801874e <topology_get_turnout+0x12>
 801874a:	2300      	movs	r3, #0
 801874c:	e018      	b.n	8018780 <topology_get_turnout+0x44>
	if (tn<0) return 0;
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	2b00      	cmp	r3, #0
 8018752:	da01      	bge.n	8018758 <topology_get_turnout+0x1c>
 8018754:	2300      	movs	r3, #0
 8018756:	e013      	b.n	8018780 <topology_get_turnout+0x44>
	if (tn>31) return 0;
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	2b1f      	cmp	r3, #31
 801875c:	dd01      	ble.n	8018762 <topology_get_turnout+0x26>
 801875e:	2300      	movs	r3, #0
 8018760:	e00e      	b.n	8018780 <topology_get_turnout+0x44>

	uint32_t b = turnoutvals;
 8018762:	4b0a      	ldr	r3, [pc, #40]	; (801878c <topology_get_turnout+0x50>)
 8018764:	681b      	ldr	r3, [r3, #0]
 8018766:	60fb      	str	r3, [r7, #12]
	return (b & (1<<tn)) ? 1 : 0;
 8018768:	2201      	movs	r2, #1
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	fa02 f303 	lsl.w	r3, r2, r3
 8018770:	461a      	mov	r2, r3
 8018772:	68fb      	ldr	r3, [r7, #12]
 8018774:	4013      	ands	r3, r2
 8018776:	2b00      	cmp	r3, #0
 8018778:	bf14      	ite	ne
 801877a:	2301      	movne	r3, #1
 801877c:	2300      	moveq	r3, #0
 801877e:	b2db      	uxtb	r3, r3
}
 8018780:	4618      	mov	r0, r3
 8018782:	3714      	adds	r7, #20
 8018784:	46bd      	mov	sp, r7
 8018786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801878a:	4770      	bx	lr
 801878c:	200055e4 	.word	0x200055e4

08018790 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8018790:	b480      	push	{r7}
 8018792:	b083      	sub	sp, #12
 8018794:	af00      	add	r7, sp, #0
 8018796:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8018798:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801879c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80187a0:	f003 0301 	and.w	r3, r3, #1
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d013      	beq.n	80187d0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80187a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80187ac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80187b0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d00b      	beq.n	80187d0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80187b8:	e000      	b.n	80187bc <ITM_SendChar+0x2c>
    {
      __NOP();
 80187ba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80187bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80187c0:	681b      	ldr	r3, [r3, #0]
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d0f9      	beq.n	80187ba <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80187c6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80187ca:	687a      	ldr	r2, [r7, #4]
 80187cc:	b2d2      	uxtb	r2, r2
 80187ce:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80187d0:	687b      	ldr	r3, [r7, #4]
}
 80187d2:	4618      	mov	r0, r3
 80187d4:	370c      	adds	r7, #12
 80187d6:	46bd      	mov	sp, r7
 80187d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187dc:	4770      	bx	lr
	...

080187e0 <write_num>:




static void write_num(uint8_t *buf, uint32_t v, int ndigit)
{
 80187e0:	b480      	push	{r7}
 80187e2:	b085      	sub	sp, #20
 80187e4:	af00      	add	r7, sp, #0
 80187e6:	60f8      	str	r0, [r7, #12]
 80187e8:	60b9      	str	r1, [r7, #8]
 80187ea:	607a      	str	r2, [r7, #4]
	for (;ndigit>0; ndigit--) {
 80187ec:	e01a      	b.n	8018824 <write_num+0x44>
		buf[ndigit-1] = '0'+ (v % 10);
 80187ee:	68b9      	ldr	r1, [r7, #8]
 80187f0:	4b11      	ldr	r3, [pc, #68]	; (8018838 <write_num+0x58>)
 80187f2:	fba3 2301 	umull	r2, r3, r3, r1
 80187f6:	08da      	lsrs	r2, r3, #3
 80187f8:	4613      	mov	r3, r2
 80187fa:	009b      	lsls	r3, r3, #2
 80187fc:	4413      	add	r3, r2
 80187fe:	005b      	lsls	r3, r3, #1
 8018800:	1aca      	subs	r2, r1, r3
 8018802:	b2d2      	uxtb	r2, r2
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	3b01      	subs	r3, #1
 8018808:	68f9      	ldr	r1, [r7, #12]
 801880a:	440b      	add	r3, r1
 801880c:	3230      	adds	r2, #48	; 0x30
 801880e:	b2d2      	uxtb	r2, r2
 8018810:	701a      	strb	r2, [r3, #0]
		v = v/10;
 8018812:	68bb      	ldr	r3, [r7, #8]
 8018814:	4a08      	ldr	r2, [pc, #32]	; (8018838 <write_num+0x58>)
 8018816:	fba2 2303 	umull	r2, r3, r2, r3
 801881a:	08db      	lsrs	r3, r3, #3
 801881c:	60bb      	str	r3, [r7, #8]
	for (;ndigit>0; ndigit--) {
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	3b01      	subs	r3, #1
 8018822:	607b      	str	r3, [r7, #4]
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	2b00      	cmp	r3, #0
 8018828:	dce1      	bgt.n	80187ee <write_num+0xe>
	}
}
 801882a:	bf00      	nop
 801882c:	3714      	adds	r7, #20
 801882e:	46bd      	mov	sp, r7
 8018830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018834:	4770      	bx	lr
 8018836:	bf00      	nop
 8018838:	cccccccd 	.word	0xcccccccd

0801883c <_write>:

#ifndef TRAIN_SIMU
int _write(_UNUSED_ int32_t file, uint8_t *ptr, int32_t len)
{
 801883c:	b580      	push	{r7, lr}
 801883e:	b086      	sub	sp, #24
 8018840:	af00      	add	r7, sp, #0
 8018842:	60f8      	str	r0, [r7, #12]
 8018844:	60b9      	str	r1, [r7, #8]
 8018846:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 8018848:	2300      	movs	r3, #0
 801884a:	617b      	str	r3, [r7, #20]
 801884c:	e009      	b.n	8018862 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 801884e:	68bb      	ldr	r3, [r7, #8]
 8018850:	1c5a      	adds	r2, r3, #1
 8018852:	60ba      	str	r2, [r7, #8]
 8018854:	781b      	ldrb	r3, [r3, #0]
 8018856:	4618      	mov	r0, r3
 8018858:	f7ff ff9a 	bl	8018790 <ITM_SendChar>
	for (int i = 0; i < len; i++)
 801885c:	697b      	ldr	r3, [r7, #20]
 801885e:	3301      	adds	r3, #1
 8018860:	617b      	str	r3, [r7, #20]
 8018862:	697a      	ldr	r2, [r7, #20]
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	429a      	cmp	r2, r3
 8018868:	dbf1      	blt.n	801884e <_write+0x12>
	}
	return len;
 801886a:	687b      	ldr	r3, [r7, #4]
}
 801886c:	4618      	mov	r0, r3
 801886e:	3718      	adds	r7, #24
 8018870:	46bd      	mov	sp, r7
 8018872:	bd80      	pop	{r7, pc}

08018874 <_itm_debug3>:
#endif


void _itm_debug3(const char *msg, int v1, int v2, int v3, int n)
{
 8018874:	b580      	push	{r7, lr}
 8018876:	b096      	sub	sp, #88	; 0x58
 8018878:	af00      	add	r7, sp, #0
 801887a:	60f8      	str	r0, [r7, #12]
 801887c:	60b9      	str	r1, [r7, #8]
 801887e:	607a      	str	r2, [r7, #4]
 8018880:	603b      	str	r3, [r7, #0]
	uint8_t buf[64];
	memset(buf, 0, sizeof(buf));
 8018882:	f107 0314 	add.w	r3, r7, #20
 8018886:	2240      	movs	r2, #64	; 0x40
 8018888:	2100      	movs	r1, #0
 801888a:	4618      	mov	r0, r3
 801888c:	f000 fa13 	bl	8018cb6 <memset>
	write_num(buf, HAL_GetTick(), 7);
 8018890:	f7e9 faa2 	bl	8001dd8 <HAL_GetTick>
 8018894:	4601      	mov	r1, r0
 8018896:	f107 0314 	add.w	r3, r7, #20
 801889a:	2207      	movs	r2, #7
 801889c:	4618      	mov	r0, r3
 801889e:	f7ff ff9f 	bl	80187e0 <write_num>
	buf[7]=':';
 80188a2:	233a      	movs	r3, #58	; 0x3a
 80188a4:	76fb      	strb	r3, [r7, #27]
	strncpy((char *)buf+8, msg, 12);
 80188a6:	f107 0314 	add.w	r3, r7, #20
 80188aa:	3308      	adds	r3, #8
 80188ac:	220c      	movs	r2, #12
 80188ae:	68f9      	ldr	r1, [r7, #12]
 80188b0:	4618      	mov	r0, r3
 80188b2:	f000 fac1 	bl	8018e38 <strncpy>
	uint8_t *p = buf+strlen((char *)buf);
 80188b6:	f107 0314 	add.w	r3, r7, #20
 80188ba:	4618      	mov	r0, r3
 80188bc:	f7e7 fc92 	bl	80001e4 <strlen>
 80188c0:	4602      	mov	r2, r0
 80188c2:	f107 0314 	add.w	r3, r7, #20
 80188c6:	4413      	add	r3, r2
 80188c8:	657b      	str	r3, [r7, #84]	; 0x54
	if (!n--) goto done;
 80188ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80188cc:	1e5a      	subs	r2, r3, #1
 80188ce:	663a      	str	r2, [r7, #96]	; 0x60
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	d03c      	beq.n	801894e <_itm_debug3+0xda>
	*p = '/';
 80188d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80188d6:	222f      	movs	r2, #47	; 0x2f
 80188d8:	701a      	strb	r2, [r3, #0]
	itoa(v1, (char *)p+1, 10);
 80188da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80188dc:	3301      	adds	r3, #1
 80188de:	220a      	movs	r2, #10
 80188e0:	4619      	mov	r1, r3
 80188e2:	68b8      	ldr	r0, [r7, #8]
 80188e4:	f000 f9ca 	bl	8018c7c <itoa>
	p = buf+strlen((char *)buf);
 80188e8:	f107 0314 	add.w	r3, r7, #20
 80188ec:	4618      	mov	r0, r3
 80188ee:	f7e7 fc79 	bl	80001e4 <strlen>
 80188f2:	4602      	mov	r2, r0
 80188f4:	f107 0314 	add.w	r3, r7, #20
 80188f8:	4413      	add	r3, r2
 80188fa:	657b      	str	r3, [r7, #84]	; 0x54
	if (!n--) goto done;
 80188fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80188fe:	1e5a      	subs	r2, r3, #1
 8018900:	663a      	str	r2, [r7, #96]	; 0x60
 8018902:	2b00      	cmp	r3, #0
 8018904:	d025      	beq.n	8018952 <_itm_debug3+0xde>
	*p = '/';
 8018906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018908:	222f      	movs	r2, #47	; 0x2f
 801890a:	701a      	strb	r2, [r3, #0]
	itoa(v2, (char *)p+1, 10);
 801890c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801890e:	3301      	adds	r3, #1
 8018910:	220a      	movs	r2, #10
 8018912:	4619      	mov	r1, r3
 8018914:	6878      	ldr	r0, [r7, #4]
 8018916:	f000 f9b1 	bl	8018c7c <itoa>
	p = buf+strlen((char *)buf);
 801891a:	f107 0314 	add.w	r3, r7, #20
 801891e:	4618      	mov	r0, r3
 8018920:	f7e7 fc60 	bl	80001e4 <strlen>
 8018924:	4602      	mov	r2, r0
 8018926:	f107 0314 	add.w	r3, r7, #20
 801892a:	4413      	add	r3, r2
 801892c:	657b      	str	r3, [r7, #84]	; 0x54
	if (!n--) goto done;
 801892e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018930:	1e5a      	subs	r2, r3, #1
 8018932:	663a      	str	r2, [r7, #96]	; 0x60
 8018934:	2b00      	cmp	r3, #0
 8018936:	d00e      	beq.n	8018956 <_itm_debug3+0xe2>
	*p = '/';
 8018938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801893a:	222f      	movs	r2, #47	; 0x2f
 801893c:	701a      	strb	r2, [r3, #0]
	itoa(v3, (char *)p+1, 10);
 801893e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018940:	3301      	adds	r3, #1
 8018942:	220a      	movs	r2, #10
 8018944:	4619      	mov	r1, r3
 8018946:	6838      	ldr	r0, [r7, #0]
 8018948:	f000 f998 	bl	8018c7c <itoa>
 801894c:	e004      	b.n	8018958 <_itm_debug3+0xe4>
	if (!n--) goto done;
 801894e:	bf00      	nop
 8018950:	e002      	b.n	8018958 <_itm_debug3+0xe4>
	if (!n--) goto done;
 8018952:	bf00      	nop
 8018954:	e000      	b.n	8018958 <_itm_debug3+0xe4>
	if (!n--) goto done;
 8018956:	bf00      	nop
done:
	p = buf+strlen((char *)buf);
 8018958:	f107 0314 	add.w	r3, r7, #20
 801895c:	4618      	mov	r0, r3
 801895e:	f7e7 fc41 	bl	80001e4 <strlen>
 8018962:	4602      	mov	r2, r0
 8018964:	f107 0314 	add.w	r3, r7, #20
 8018968:	4413      	add	r3, r2
 801896a:	657b      	str	r3, [r7, #84]	; 0x54
	*p = '\n';
 801896c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801896e:	220a      	movs	r2, #10
 8018970:	701a      	strb	r2, [r3, #0]
#ifndef TRAIN_SIMU
	_write(0, buf, strlen((char *)buf));
 8018972:	f107 0314 	add.w	r3, r7, #20
 8018976:	4618      	mov	r0, r3
 8018978:	f7e7 fc34 	bl	80001e4 <strlen>
 801897c:	4603      	mov	r3, r0
 801897e:	461a      	mov	r2, r3
 8018980:	f107 0314 	add.w	r3, r7, #20
 8018984:	4619      	mov	r1, r3
 8018986:	2000      	movs	r0, #0
 8018988:	f7ff ff58 	bl	801883c <_write>
#else
    puts((char*)buf);
    //write(0, buf, strlen((char *)buf));
#endif
}
 801898c:	bf00      	nop
 801898e:	3758      	adds	r7, #88	; 0x58
 8018990:	46bd      	mov	sp, r7
 8018992:	bd80      	pop	{r7, pc}

08018994 <itm_debug1>:
{
 8018994:	b580      	push	{r7, lr}
 8018996:	b086      	sub	sp, #24
 8018998:	af02      	add	r7, sp, #8
 801899a:	60f8      	str	r0, [r7, #12]
 801899c:	60b9      	str	r1, [r7, #8]
 801899e:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 80189a0:	4b08      	ldr	r3, [pc, #32]	; (80189c4 <itm_debug1+0x30>)
 80189a2:	681a      	ldr	r2, [r3, #0]
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	4013      	ands	r3, r2
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	d007      	beq.n	80189bc <itm_debug1+0x28>
 80189ac:	2301      	movs	r3, #1
 80189ae:	9300      	str	r3, [sp, #0]
 80189b0:	2300      	movs	r3, #0
 80189b2:	2200      	movs	r2, #0
 80189b4:	6879      	ldr	r1, [r7, #4]
 80189b6:	68b8      	ldr	r0, [r7, #8]
 80189b8:	f7ff ff5c 	bl	8018874 <_itm_debug3>
}
 80189bc:	bf00      	nop
 80189be:	3710      	adds	r7, #16
 80189c0:	46bd      	mov	sp, r7
 80189c2:	bd80      	pop	{r7, pc}
 80189c4:	20000574 	.word	0x20000574

080189c8 <mqf_len>:
	m->tail = 0;
	m->maxuse = 0;
}

int mqf_len(mqf_t *m)
{
 80189c8:	b580      	push	{r7, lr}
 80189ca:	b084      	sub	sp, #16
 80189cc:	af00      	add	r7, sp, #0
 80189ce:	6078      	str	r0, [r7, #4]
	int l;
	if (m->head >= m->tail) {
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	881b      	ldrh	r3, [r3, #0]
 80189d4:	b29a      	uxth	r2, r3
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	885b      	ldrh	r3, [r3, #2]
 80189da:	b29b      	uxth	r3, r3
 80189dc:	429a      	cmp	r2, r3
 80189de:	d309      	bcc.n	80189f4 <mqf_len+0x2c>
		l = (m->head - m->tail);
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	881b      	ldrh	r3, [r3, #0]
 80189e4:	b29b      	uxth	r3, r3
 80189e6:	461a      	mov	r2, r3
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	885b      	ldrh	r3, [r3, #2]
 80189ec:	b29b      	uxth	r3, r3
 80189ee:	1ad3      	subs	r3, r2, r3
 80189f0:	60fb      	str	r3, [r7, #12]
 80189f2:	e00b      	b.n	8018a0c <mqf_len+0x44>
	} else   {
		l = m->num + m->head - m->tail;
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	795b      	ldrb	r3, [r3, #5]
 80189f8:	461a      	mov	r2, r3
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	881b      	ldrh	r3, [r3, #0]
 80189fe:	b29b      	uxth	r3, r3
 8018a00:	4413      	add	r3, r2
 8018a02:	687a      	ldr	r2, [r7, #4]
 8018a04:	8852      	ldrh	r2, [r2, #2]
 8018a06:	b292      	uxth	r2, r2
 8018a08:	1a9b      	subs	r3, r3, r2
 8018a0a:	60fb      	str	r3, [r7, #12]
	}
	if (l<0) {
 8018a0c:	68fb      	ldr	r3, [r7, #12]
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	da05      	bge.n	8018a1e <mqf_len+0x56>
		itm_debug1(DBG_MSG, "big pb", 1);
 8018a12:	2201      	movs	r2, #1
 8018a14:	4904      	ldr	r1, [pc, #16]	; (8018a28 <mqf_len+0x60>)
 8018a16:	2002      	movs	r0, #2
 8018a18:	f7ff ffbc 	bl	8018994 <itm_debug1>
		for (;;);
 8018a1c:	e7fe      	b.n	8018a1c <mqf_len+0x54>
	}
	return l;
 8018a1e:	68fb      	ldr	r3, [r7, #12]
}
 8018a20:	4618      	mov	r0, r3
 8018a22:	3710      	adds	r7, #16
 8018a24:	46bd      	mov	sp, r7
 8018a26:	bd80      	pop	{r7, pc}
 8018a28:	08019808 	.word	0x08019808

08018a2c <mqf_qfull>:

void dump_msg(mqf_t *mq, int n);

void mqf_qfull(mqf_t *m, _UNUSED_ int t)
{
 8018a2c:	b580      	push	{r7, lr}
 8018a2e:	b084      	sub	sp, #16
 8018a30:	af00      	add	r7, sp, #0
 8018a32:	6078      	str	r0, [r7, #4]
 8018a34:	6039      	str	r1, [r7, #0]
	itm_debug1(DBG_ERR|DBG_MSG, "w/full", 0);
 8018a36:	2200      	movs	r2, #0
 8018a38:	490e      	ldr	r1, [pc, #56]	; (8018a74 <mqf_qfull+0x48>)
 8018a3a:	480f      	ldr	r0, [pc, #60]	; (8018a78 <mqf_qfull+0x4c>)
 8018a3c:	f7ff ffaa 	bl	8018994 <itm_debug1>
	for (;;) {
		static uint8_t dmp = 0;
		if (dmp) {
 8018a40:	4b0e      	ldr	r3, [pc, #56]	; (8018a7c <mqf_qfull+0x50>)
 8018a42:	781b      	ldrb	r3, [r3, #0]
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d0fb      	beq.n	8018a40 <mqf_qfull+0x14>
			dmp = 0;
 8018a48:	4b0c      	ldr	r3, [pc, #48]	; (8018a7c <mqf_qfull+0x50>)
 8018a4a:	2200      	movs	r2, #0
 8018a4c:	701a      	strb	r2, [r3, #0]
			for (int i=0; i<mqf_len(m); i++) {
 8018a4e:	2300      	movs	r3, #0
 8018a50:	60fb      	str	r3, [r7, #12]
 8018a52:	e006      	b.n	8018a62 <mqf_qfull+0x36>
				dump_msg(m, i);
 8018a54:	68f9      	ldr	r1, [r7, #12]
 8018a56:	6878      	ldr	r0, [r7, #4]
 8018a58:	f7fe f8d8 	bl	8016c0c <dump_msg>
			for (int i=0; i<mqf_len(m); i++) {
 8018a5c:	68fb      	ldr	r3, [r7, #12]
 8018a5e:	3301      	adds	r3, #1
 8018a60:	60fb      	str	r3, [r7, #12]
 8018a62:	6878      	ldr	r0, [r7, #4]
 8018a64:	f7ff ffb0 	bl	80189c8 <mqf_len>
 8018a68:	4602      	mov	r2, r0
 8018a6a:	68fb      	ldr	r3, [r7, #12]
 8018a6c:	4293      	cmp	r3, r2
 8018a6e:	dbf1      	blt.n	8018a54 <mqf_qfull+0x28>
	for (;;) {
 8018a70:	e7e6      	b.n	8018a40 <mqf_qfull+0x14>
 8018a72:	bf00      	nop
 8018a74:	08019810 	.word	0x08019810
 8018a78:	80000002 	.word	0x80000002
 8018a7c:	200055e8 	.word	0x200055e8

08018a80 <mqf_write>:
			}
		}
	}
}
int mqf_write(mqf_t *m, void *ptr)
{
 8018a80:	b580      	push	{r7, lr}
 8018a82:	b084      	sub	sp, #16
 8018a84:	af00      	add	r7, sp, #0
 8018a86:	6078      	str	r0, [r7, #4]
 8018a88:	6039      	str	r1, [r7, #0]
	int l = mqf_len(m);
 8018a8a:	6878      	ldr	r0, [r7, #4]
 8018a8c:	f7ff ff9c 	bl	80189c8 <mqf_len>
 8018a90:	60f8      	str	r0, [r7, #12]
	void Error_Handler(void);
	if (l<0) Error_Handler();
 8018a92:	68fb      	ldr	r3, [r7, #12]
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	da01      	bge.n	8018a9c <mqf_write+0x1c>
 8018a98:	f7e8 fc8a 	bl	80013b0 <Error_Handler>
	if (l > m->maxuse) m->maxuse = (int8_t) l;
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	799b      	ldrb	r3, [r3, #6]
 8018aa0:	461a      	mov	r2, r3
 8018aa2:	68fb      	ldr	r3, [r7, #12]
 8018aa4:	4293      	cmp	r3, r2
 8018aa6:	dd03      	ble.n	8018ab0 <mqf_write+0x30>
 8018aa8:	68fb      	ldr	r3, [r7, #12]
 8018aaa:	b2da      	uxtb	r2, r3
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	719a      	strb	r2, [r3, #6]

    if (m->num == l) {
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	795b      	ldrb	r3, [r3, #5]
 8018ab4:	461a      	mov	r2, r3
 8018ab6:	68fb      	ldr	r3, [r7, #12]
 8018ab8:	4293      	cmp	r3, r2
 8018aba:	d10b      	bne.n	8018ad4 <mqf_write+0x54>
		itm_debug1(DBG_ERR|DBG_MSG, "w/full", 0);
 8018abc:	2200      	movs	r2, #0
 8018abe:	492a      	ldr	r1, [pc, #168]	; (8018b68 <mqf_write+0xe8>)
 8018ac0:	482a      	ldr	r0, [pc, #168]	; (8018b6c <mqf_write+0xec>)
 8018ac2:	f7ff ff67 	bl	8018994 <itm_debug1>
		mqf_qfull(m,0);
 8018ac6:	2100      	movs	r1, #0
 8018ac8:	6878      	ldr	r0, [r7, #4]
 8018aca:	f7ff ffaf 	bl	8018a2c <mqf_qfull>
        return -1;
 8018ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ad2:	e045      	b.n	8018b60 <mqf_write+0xe0>
    }
    if (m->num-1 == l) {
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	795b      	ldrb	r3, [r3, #5]
 8018ad8:	3b01      	subs	r3, #1
 8018ada:	68fa      	ldr	r2, [r7, #12]
 8018adc:	429a      	cmp	r2, r3
 8018ade:	d111      	bne.n	8018b04 <mqf_write+0x84>
    	itm_debug1(DBG_MSG, "w/full1", m->silentdrop);
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	79db      	ldrb	r3, [r3, #7]
 8018ae4:	461a      	mov	r2, r3
 8018ae6:	4922      	ldr	r1, [pc, #136]	; (8018b70 <mqf_write+0xf0>)
 8018ae8:	2002      	movs	r0, #2
 8018aea:	f7ff ff53 	bl	8018994 <itm_debug1>
    	if (!m->silentdrop) mqf_qfull(m,1);
 8018aee:	687b      	ldr	r3, [r7, #4]
 8018af0:	79db      	ldrb	r3, [r3, #7]
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d103      	bne.n	8018afe <mqf_write+0x7e>
 8018af6:	2101      	movs	r1, #1
 8018af8:	6878      	ldr	r0, [r7, #4]
 8018afa:	f7ff ff97 	bl	8018a2c <mqf_qfull>
        return -1;
 8018afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018b02:	e02d      	b.n	8018b60 <mqf_write+0xe0>
    }
	void *p = &(m->msgbuf[m->head*m->msgsiz]);
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	689b      	ldr	r3, [r3, #8]
 8018b08:	687a      	ldr	r2, [r7, #4]
 8018b0a:	8812      	ldrh	r2, [r2, #0]
 8018b0c:	b292      	uxth	r2, r2
 8018b0e:	4611      	mov	r1, r2
 8018b10:	687a      	ldr	r2, [r7, #4]
 8018b12:	7912      	ldrb	r2, [r2, #4]
 8018b14:	fb02 f201 	mul.w	r2, r2, r1
 8018b18:	4413      	add	r3, r2
 8018b1a:	60bb      	str	r3, [r7, #8]
	memcpy(p, ptr, m->msgsiz);
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	791b      	ldrb	r3, [r3, #4]
 8018b20:	461a      	mov	r2, r3
 8018b22:	6839      	ldr	r1, [r7, #0]
 8018b24:	68b8      	ldr	r0, [r7, #8]
 8018b26:	f000 f8bb 	bl	8018ca0 <memcpy>
	//__barrier();
    if (m->head == m->num-1) {
 8018b2a:	687b      	ldr	r3, [r7, #4]
 8018b2c:	881b      	ldrh	r3, [r3, #0]
 8018b2e:	b29b      	uxth	r3, r3
 8018b30:	461a      	mov	r2, r3
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	795b      	ldrb	r3, [r3, #5]
 8018b36:	3b01      	subs	r3, #1
 8018b38:	429a      	cmp	r2, r3
 8018b3a:	d103      	bne.n	8018b44 <mqf_write+0xc4>
        m->head = 0;
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	2200      	movs	r2, #0
 8018b40:	801a      	strh	r2, [r3, #0]
 8018b42:	e00c      	b.n	8018b5e <mqf_write+0xde>
    } else {
        __sync_fetch_and_add(&(m->head), 1);
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	f3bf 8f5b 	dmb	ish
 8018b4a:	e8d3 2f5f 	ldrexh	r2, [r3]
 8018b4e:	f102 0201 	add.w	r2, r2, #1
 8018b52:	e8c3 2f51 	strexh	r1, r2, [r3]
 8018b56:	2900      	cmp	r1, #0
 8018b58:	d1f7      	bne.n	8018b4a <mqf_write+0xca>
 8018b5a:	f3bf 8f5b 	dmb	ish
    }
	//AtomicInc(p->head);
	return 0;
 8018b5e:	2300      	movs	r3, #0
}
 8018b60:	4618      	mov	r0, r3
 8018b62:	3710      	adds	r7, #16
 8018b64:	46bd      	mov	sp, r7
 8018b66:	bd80      	pop	{r7, pc}
 8018b68:	08019810 	.word	0x08019810
 8018b6c:	80000002 	.word	0x80000002
 8018b70:	08019818 	.word	0x08019818

08018b74 <mqf_read>:

int mqf_read(mqf_t *m, void *ptr)
{
 8018b74:	b580      	push	{r7, lr}
 8018b76:	b084      	sub	sp, #16
 8018b78:	af00      	add	r7, sp, #0
 8018b7a:	6078      	str	r0, [r7, #4]
 8018b7c:	6039      	str	r1, [r7, #0]
	if (!mqf_len(m)) return -1;
 8018b7e:	6878      	ldr	r0, [r7, #4]
 8018b80:	f7ff ff22 	bl	80189c8 <mqf_len>
 8018b84:	4603      	mov	r3, r0
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d102      	bne.n	8018b90 <mqf_read+0x1c>
 8018b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018b8e:	e02e      	b.n	8018bee <mqf_read+0x7a>
    void *p = &(m->msgbuf[m->tail*m->msgsiz]);
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	689b      	ldr	r3, [r3, #8]
 8018b94:	687a      	ldr	r2, [r7, #4]
 8018b96:	8852      	ldrh	r2, [r2, #2]
 8018b98:	b292      	uxth	r2, r2
 8018b9a:	4611      	mov	r1, r2
 8018b9c:	687a      	ldr	r2, [r7, #4]
 8018b9e:	7912      	ldrb	r2, [r2, #4]
 8018ba0:	fb02 f201 	mul.w	r2, r2, r1
 8018ba4:	4413      	add	r3, r2
 8018ba6:	60fb      	str	r3, [r7, #12]
    memcpy(ptr, p, m->msgsiz);
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	791b      	ldrb	r3, [r3, #4]
 8018bac:	461a      	mov	r2, r3
 8018bae:	68f9      	ldr	r1, [r7, #12]
 8018bb0:	6838      	ldr	r0, [r7, #0]
 8018bb2:	f000 f875 	bl	8018ca0 <memcpy>
    //__barrier();
    if (m->tail == m->num-1) {
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	885b      	ldrh	r3, [r3, #2]
 8018bba:	b29b      	uxth	r3, r3
 8018bbc:	461a      	mov	r2, r3
 8018bbe:	687b      	ldr	r3, [r7, #4]
 8018bc0:	795b      	ldrb	r3, [r3, #5]
 8018bc2:	3b01      	subs	r3, #1
 8018bc4:	429a      	cmp	r2, r3
 8018bc6:	d103      	bne.n	8018bd0 <mqf_read+0x5c>
        m->tail = 0;
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	2200      	movs	r2, #0
 8018bcc:	805a      	strh	r2, [r3, #2]
 8018bce:	e00d      	b.n	8018bec <mqf_read+0x78>
    } else {
        __sync_fetch_and_add(&(m->tail), 1);
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	3302      	adds	r3, #2
 8018bd4:	f3bf 8f5b 	dmb	ish
 8018bd8:	e8d3 2f5f 	ldrexh	r2, [r3]
 8018bdc:	f102 0201 	add.w	r2, r2, #1
 8018be0:	e8c3 2f51 	strexh	r1, r2, [r3]
 8018be4:	2900      	cmp	r1, #0
 8018be6:	d1f7      	bne.n	8018bd8 <mqf_read+0x64>
 8018be8:	f3bf 8f5b 	dmb	ish
    }
    return 0;
 8018bec:	2300      	movs	r3, #0
}
 8018bee:	4618      	mov	r0, r3
 8018bf0:	3710      	adds	r7, #16
 8018bf2:	46bd      	mov	sp, r7
 8018bf4:	bd80      	pop	{r7, pc}
	...

08018bf8 <__errno>:
 8018bf8:	4b01      	ldr	r3, [pc, #4]	; (8018c00 <__errno+0x8>)
 8018bfa:	6818      	ldr	r0, [r3, #0]
 8018bfc:	4770      	bx	lr
 8018bfe:	bf00      	nop
 8018c00:	20000578 	.word	0x20000578

08018c04 <__libc_init_array>:
 8018c04:	b570      	push	{r4, r5, r6, lr}
 8018c06:	4e0d      	ldr	r6, [pc, #52]	; (8018c3c <__libc_init_array+0x38>)
 8018c08:	4c0d      	ldr	r4, [pc, #52]	; (8018c40 <__libc_init_array+0x3c>)
 8018c0a:	1ba4      	subs	r4, r4, r6
 8018c0c:	10a4      	asrs	r4, r4, #2
 8018c0e:	2500      	movs	r5, #0
 8018c10:	42a5      	cmp	r5, r4
 8018c12:	d109      	bne.n	8018c28 <__libc_init_array+0x24>
 8018c14:	4e0b      	ldr	r6, [pc, #44]	; (8018c44 <__libc_init_array+0x40>)
 8018c16:	4c0c      	ldr	r4, [pc, #48]	; (8018c48 <__libc_init_array+0x44>)
 8018c18:	f000 f964 	bl	8018ee4 <_init>
 8018c1c:	1ba4      	subs	r4, r4, r6
 8018c1e:	10a4      	asrs	r4, r4, #2
 8018c20:	2500      	movs	r5, #0
 8018c22:	42a5      	cmp	r5, r4
 8018c24:	d105      	bne.n	8018c32 <__libc_init_array+0x2e>
 8018c26:	bd70      	pop	{r4, r5, r6, pc}
 8018c28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018c2c:	4798      	blx	r3
 8018c2e:	3501      	adds	r5, #1
 8018c30:	e7ee      	b.n	8018c10 <__libc_init_array+0xc>
 8018c32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018c36:	4798      	blx	r3
 8018c38:	3501      	adds	r5, #1
 8018c3a:	e7f2      	b.n	8018c22 <__libc_init_array+0x1e>
 8018c3c:	0801b7ac 	.word	0x0801b7ac
 8018c40:	0801b7ac 	.word	0x0801b7ac
 8018c44:	0801b7ac 	.word	0x0801b7ac
 8018c48:	0801b7b0 	.word	0x0801b7b0

08018c4c <__itoa>:
 8018c4c:	1e93      	subs	r3, r2, #2
 8018c4e:	2b22      	cmp	r3, #34	; 0x22
 8018c50:	b510      	push	{r4, lr}
 8018c52:	460c      	mov	r4, r1
 8018c54:	d904      	bls.n	8018c60 <__itoa+0x14>
 8018c56:	2300      	movs	r3, #0
 8018c58:	700b      	strb	r3, [r1, #0]
 8018c5a:	461c      	mov	r4, r3
 8018c5c:	4620      	mov	r0, r4
 8018c5e:	bd10      	pop	{r4, pc}
 8018c60:	2a0a      	cmp	r2, #10
 8018c62:	d109      	bne.n	8018c78 <__itoa+0x2c>
 8018c64:	2800      	cmp	r0, #0
 8018c66:	da07      	bge.n	8018c78 <__itoa+0x2c>
 8018c68:	232d      	movs	r3, #45	; 0x2d
 8018c6a:	700b      	strb	r3, [r1, #0]
 8018c6c:	4240      	negs	r0, r0
 8018c6e:	2101      	movs	r1, #1
 8018c70:	4421      	add	r1, r4
 8018c72:	f000 f8f7 	bl	8018e64 <__utoa>
 8018c76:	e7f1      	b.n	8018c5c <__itoa+0x10>
 8018c78:	2100      	movs	r1, #0
 8018c7a:	e7f9      	b.n	8018c70 <__itoa+0x24>

08018c7c <itoa>:
 8018c7c:	f7ff bfe6 	b.w	8018c4c <__itoa>

08018c80 <malloc>:
 8018c80:	4b02      	ldr	r3, [pc, #8]	; (8018c8c <malloc+0xc>)
 8018c82:	4601      	mov	r1, r0
 8018c84:	6818      	ldr	r0, [r3, #0]
 8018c86:	f000 b86d 	b.w	8018d64 <_malloc_r>
 8018c8a:	bf00      	nop
 8018c8c:	20000578 	.word	0x20000578

08018c90 <free>:
 8018c90:	4b02      	ldr	r3, [pc, #8]	; (8018c9c <free+0xc>)
 8018c92:	4601      	mov	r1, r0
 8018c94:	6818      	ldr	r0, [r3, #0]
 8018c96:	f000 b817 	b.w	8018cc8 <_free_r>
 8018c9a:	bf00      	nop
 8018c9c:	20000578 	.word	0x20000578

08018ca0 <memcpy>:
 8018ca0:	b510      	push	{r4, lr}
 8018ca2:	1e43      	subs	r3, r0, #1
 8018ca4:	440a      	add	r2, r1
 8018ca6:	4291      	cmp	r1, r2
 8018ca8:	d100      	bne.n	8018cac <memcpy+0xc>
 8018caa:	bd10      	pop	{r4, pc}
 8018cac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018cb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018cb4:	e7f7      	b.n	8018ca6 <memcpy+0x6>

08018cb6 <memset>:
 8018cb6:	4402      	add	r2, r0
 8018cb8:	4603      	mov	r3, r0
 8018cba:	4293      	cmp	r3, r2
 8018cbc:	d100      	bne.n	8018cc0 <memset+0xa>
 8018cbe:	4770      	bx	lr
 8018cc0:	f803 1b01 	strb.w	r1, [r3], #1
 8018cc4:	e7f9      	b.n	8018cba <memset+0x4>
	...

08018cc8 <_free_r>:
 8018cc8:	b538      	push	{r3, r4, r5, lr}
 8018cca:	4605      	mov	r5, r0
 8018ccc:	2900      	cmp	r1, #0
 8018cce:	d045      	beq.n	8018d5c <_free_r+0x94>
 8018cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018cd4:	1f0c      	subs	r4, r1, #4
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	bfb8      	it	lt
 8018cda:	18e4      	addlt	r4, r4, r3
 8018cdc:	f000 f900 	bl	8018ee0 <__malloc_lock>
 8018ce0:	4a1f      	ldr	r2, [pc, #124]	; (8018d60 <_free_r+0x98>)
 8018ce2:	6813      	ldr	r3, [r2, #0]
 8018ce4:	4610      	mov	r0, r2
 8018ce6:	b933      	cbnz	r3, 8018cf6 <_free_r+0x2e>
 8018ce8:	6063      	str	r3, [r4, #4]
 8018cea:	6014      	str	r4, [r2, #0]
 8018cec:	4628      	mov	r0, r5
 8018cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018cf2:	f000 b8f6 	b.w	8018ee2 <__malloc_unlock>
 8018cf6:	42a3      	cmp	r3, r4
 8018cf8:	d90c      	bls.n	8018d14 <_free_r+0x4c>
 8018cfa:	6821      	ldr	r1, [r4, #0]
 8018cfc:	1862      	adds	r2, r4, r1
 8018cfe:	4293      	cmp	r3, r2
 8018d00:	bf04      	itt	eq
 8018d02:	681a      	ldreq	r2, [r3, #0]
 8018d04:	685b      	ldreq	r3, [r3, #4]
 8018d06:	6063      	str	r3, [r4, #4]
 8018d08:	bf04      	itt	eq
 8018d0a:	1852      	addeq	r2, r2, r1
 8018d0c:	6022      	streq	r2, [r4, #0]
 8018d0e:	6004      	str	r4, [r0, #0]
 8018d10:	e7ec      	b.n	8018cec <_free_r+0x24>
 8018d12:	4613      	mov	r3, r2
 8018d14:	685a      	ldr	r2, [r3, #4]
 8018d16:	b10a      	cbz	r2, 8018d1c <_free_r+0x54>
 8018d18:	42a2      	cmp	r2, r4
 8018d1a:	d9fa      	bls.n	8018d12 <_free_r+0x4a>
 8018d1c:	6819      	ldr	r1, [r3, #0]
 8018d1e:	1858      	adds	r0, r3, r1
 8018d20:	42a0      	cmp	r0, r4
 8018d22:	d10b      	bne.n	8018d3c <_free_r+0x74>
 8018d24:	6820      	ldr	r0, [r4, #0]
 8018d26:	4401      	add	r1, r0
 8018d28:	1858      	adds	r0, r3, r1
 8018d2a:	4282      	cmp	r2, r0
 8018d2c:	6019      	str	r1, [r3, #0]
 8018d2e:	d1dd      	bne.n	8018cec <_free_r+0x24>
 8018d30:	6810      	ldr	r0, [r2, #0]
 8018d32:	6852      	ldr	r2, [r2, #4]
 8018d34:	605a      	str	r2, [r3, #4]
 8018d36:	4401      	add	r1, r0
 8018d38:	6019      	str	r1, [r3, #0]
 8018d3a:	e7d7      	b.n	8018cec <_free_r+0x24>
 8018d3c:	d902      	bls.n	8018d44 <_free_r+0x7c>
 8018d3e:	230c      	movs	r3, #12
 8018d40:	602b      	str	r3, [r5, #0]
 8018d42:	e7d3      	b.n	8018cec <_free_r+0x24>
 8018d44:	6820      	ldr	r0, [r4, #0]
 8018d46:	1821      	adds	r1, r4, r0
 8018d48:	428a      	cmp	r2, r1
 8018d4a:	bf04      	itt	eq
 8018d4c:	6811      	ldreq	r1, [r2, #0]
 8018d4e:	6852      	ldreq	r2, [r2, #4]
 8018d50:	6062      	str	r2, [r4, #4]
 8018d52:	bf04      	itt	eq
 8018d54:	1809      	addeq	r1, r1, r0
 8018d56:	6021      	streq	r1, [r4, #0]
 8018d58:	605c      	str	r4, [r3, #4]
 8018d5a:	e7c7      	b.n	8018cec <_free_r+0x24>
 8018d5c:	bd38      	pop	{r3, r4, r5, pc}
 8018d5e:	bf00      	nop
 8018d60:	200055ec 	.word	0x200055ec

08018d64 <_malloc_r>:
 8018d64:	b570      	push	{r4, r5, r6, lr}
 8018d66:	1ccd      	adds	r5, r1, #3
 8018d68:	f025 0503 	bic.w	r5, r5, #3
 8018d6c:	3508      	adds	r5, #8
 8018d6e:	2d0c      	cmp	r5, #12
 8018d70:	bf38      	it	cc
 8018d72:	250c      	movcc	r5, #12
 8018d74:	2d00      	cmp	r5, #0
 8018d76:	4606      	mov	r6, r0
 8018d78:	db01      	blt.n	8018d7e <_malloc_r+0x1a>
 8018d7a:	42a9      	cmp	r1, r5
 8018d7c:	d903      	bls.n	8018d86 <_malloc_r+0x22>
 8018d7e:	230c      	movs	r3, #12
 8018d80:	6033      	str	r3, [r6, #0]
 8018d82:	2000      	movs	r0, #0
 8018d84:	bd70      	pop	{r4, r5, r6, pc}
 8018d86:	f000 f8ab 	bl	8018ee0 <__malloc_lock>
 8018d8a:	4a21      	ldr	r2, [pc, #132]	; (8018e10 <_malloc_r+0xac>)
 8018d8c:	6814      	ldr	r4, [r2, #0]
 8018d8e:	4621      	mov	r1, r4
 8018d90:	b991      	cbnz	r1, 8018db8 <_malloc_r+0x54>
 8018d92:	4c20      	ldr	r4, [pc, #128]	; (8018e14 <_malloc_r+0xb0>)
 8018d94:	6823      	ldr	r3, [r4, #0]
 8018d96:	b91b      	cbnz	r3, 8018da0 <_malloc_r+0x3c>
 8018d98:	4630      	mov	r0, r6
 8018d9a:	f000 f83d 	bl	8018e18 <_sbrk_r>
 8018d9e:	6020      	str	r0, [r4, #0]
 8018da0:	4629      	mov	r1, r5
 8018da2:	4630      	mov	r0, r6
 8018da4:	f000 f838 	bl	8018e18 <_sbrk_r>
 8018da8:	1c43      	adds	r3, r0, #1
 8018daa:	d124      	bne.n	8018df6 <_malloc_r+0x92>
 8018dac:	230c      	movs	r3, #12
 8018dae:	6033      	str	r3, [r6, #0]
 8018db0:	4630      	mov	r0, r6
 8018db2:	f000 f896 	bl	8018ee2 <__malloc_unlock>
 8018db6:	e7e4      	b.n	8018d82 <_malloc_r+0x1e>
 8018db8:	680b      	ldr	r3, [r1, #0]
 8018dba:	1b5b      	subs	r3, r3, r5
 8018dbc:	d418      	bmi.n	8018df0 <_malloc_r+0x8c>
 8018dbe:	2b0b      	cmp	r3, #11
 8018dc0:	d90f      	bls.n	8018de2 <_malloc_r+0x7e>
 8018dc2:	600b      	str	r3, [r1, #0]
 8018dc4:	50cd      	str	r5, [r1, r3]
 8018dc6:	18cc      	adds	r4, r1, r3
 8018dc8:	4630      	mov	r0, r6
 8018dca:	f000 f88a 	bl	8018ee2 <__malloc_unlock>
 8018dce:	f104 000b 	add.w	r0, r4, #11
 8018dd2:	1d23      	adds	r3, r4, #4
 8018dd4:	f020 0007 	bic.w	r0, r0, #7
 8018dd8:	1ac3      	subs	r3, r0, r3
 8018dda:	d0d3      	beq.n	8018d84 <_malloc_r+0x20>
 8018ddc:	425a      	negs	r2, r3
 8018dde:	50e2      	str	r2, [r4, r3]
 8018de0:	e7d0      	b.n	8018d84 <_malloc_r+0x20>
 8018de2:	428c      	cmp	r4, r1
 8018de4:	684b      	ldr	r3, [r1, #4]
 8018de6:	bf16      	itet	ne
 8018de8:	6063      	strne	r3, [r4, #4]
 8018dea:	6013      	streq	r3, [r2, #0]
 8018dec:	460c      	movne	r4, r1
 8018dee:	e7eb      	b.n	8018dc8 <_malloc_r+0x64>
 8018df0:	460c      	mov	r4, r1
 8018df2:	6849      	ldr	r1, [r1, #4]
 8018df4:	e7cc      	b.n	8018d90 <_malloc_r+0x2c>
 8018df6:	1cc4      	adds	r4, r0, #3
 8018df8:	f024 0403 	bic.w	r4, r4, #3
 8018dfc:	42a0      	cmp	r0, r4
 8018dfe:	d005      	beq.n	8018e0c <_malloc_r+0xa8>
 8018e00:	1a21      	subs	r1, r4, r0
 8018e02:	4630      	mov	r0, r6
 8018e04:	f000 f808 	bl	8018e18 <_sbrk_r>
 8018e08:	3001      	adds	r0, #1
 8018e0a:	d0cf      	beq.n	8018dac <_malloc_r+0x48>
 8018e0c:	6025      	str	r5, [r4, #0]
 8018e0e:	e7db      	b.n	8018dc8 <_malloc_r+0x64>
 8018e10:	200055ec 	.word	0x200055ec
 8018e14:	200055f0 	.word	0x200055f0

08018e18 <_sbrk_r>:
 8018e18:	b538      	push	{r3, r4, r5, lr}
 8018e1a:	4c06      	ldr	r4, [pc, #24]	; (8018e34 <_sbrk_r+0x1c>)
 8018e1c:	2300      	movs	r3, #0
 8018e1e:	4605      	mov	r5, r0
 8018e20:	4608      	mov	r0, r1
 8018e22:	6023      	str	r3, [r4, #0]
 8018e24:	f7e8 ff2c 	bl	8001c80 <_sbrk>
 8018e28:	1c43      	adds	r3, r0, #1
 8018e2a:	d102      	bne.n	8018e32 <_sbrk_r+0x1a>
 8018e2c:	6823      	ldr	r3, [r4, #0]
 8018e2e:	b103      	cbz	r3, 8018e32 <_sbrk_r+0x1a>
 8018e30:	602b      	str	r3, [r5, #0]
 8018e32:	bd38      	pop	{r3, r4, r5, pc}
 8018e34:	20008ef4 	.word	0x20008ef4

08018e38 <strncpy>:
 8018e38:	b570      	push	{r4, r5, r6, lr}
 8018e3a:	3901      	subs	r1, #1
 8018e3c:	4604      	mov	r4, r0
 8018e3e:	b902      	cbnz	r2, 8018e42 <strncpy+0xa>
 8018e40:	bd70      	pop	{r4, r5, r6, pc}
 8018e42:	4623      	mov	r3, r4
 8018e44:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8018e48:	f803 5b01 	strb.w	r5, [r3], #1
 8018e4c:	1e56      	subs	r6, r2, #1
 8018e4e:	b92d      	cbnz	r5, 8018e5c <strncpy+0x24>
 8018e50:	4414      	add	r4, r2
 8018e52:	42a3      	cmp	r3, r4
 8018e54:	d0f4      	beq.n	8018e40 <strncpy+0x8>
 8018e56:	f803 5b01 	strb.w	r5, [r3], #1
 8018e5a:	e7fa      	b.n	8018e52 <strncpy+0x1a>
 8018e5c:	461c      	mov	r4, r3
 8018e5e:	4632      	mov	r2, r6
 8018e60:	e7ed      	b.n	8018e3e <strncpy+0x6>
	...

08018e64 <__utoa>:
 8018e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e66:	4b1d      	ldr	r3, [pc, #116]	; (8018edc <__utoa+0x78>)
 8018e68:	b08b      	sub	sp, #44	; 0x2c
 8018e6a:	4605      	mov	r5, r0
 8018e6c:	460c      	mov	r4, r1
 8018e6e:	466e      	mov	r6, sp
 8018e70:	f103 0c20 	add.w	ip, r3, #32
 8018e74:	6818      	ldr	r0, [r3, #0]
 8018e76:	6859      	ldr	r1, [r3, #4]
 8018e78:	4637      	mov	r7, r6
 8018e7a:	c703      	stmia	r7!, {r0, r1}
 8018e7c:	3308      	adds	r3, #8
 8018e7e:	4563      	cmp	r3, ip
 8018e80:	463e      	mov	r6, r7
 8018e82:	d1f7      	bne.n	8018e74 <__utoa+0x10>
 8018e84:	6818      	ldr	r0, [r3, #0]
 8018e86:	791b      	ldrb	r3, [r3, #4]
 8018e88:	713b      	strb	r3, [r7, #4]
 8018e8a:	1e93      	subs	r3, r2, #2
 8018e8c:	2b22      	cmp	r3, #34	; 0x22
 8018e8e:	6038      	str	r0, [r7, #0]
 8018e90:	f04f 0300 	mov.w	r3, #0
 8018e94:	d904      	bls.n	8018ea0 <__utoa+0x3c>
 8018e96:	7023      	strb	r3, [r4, #0]
 8018e98:	461c      	mov	r4, r3
 8018e9a:	4620      	mov	r0, r4
 8018e9c:	b00b      	add	sp, #44	; 0x2c
 8018e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ea0:	1e66      	subs	r6, r4, #1
 8018ea2:	fbb5 f0f2 	udiv	r0, r5, r2
 8018ea6:	af0a      	add	r7, sp, #40	; 0x28
 8018ea8:	fb02 5510 	mls	r5, r2, r0, r5
 8018eac:	443d      	add	r5, r7
 8018eae:	1c59      	adds	r1, r3, #1
 8018eb0:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8018eb4:	f806 5f01 	strb.w	r5, [r6, #1]!
 8018eb8:	4605      	mov	r5, r0
 8018eba:	b968      	cbnz	r0, 8018ed8 <__utoa+0x74>
 8018ebc:	5460      	strb	r0, [r4, r1]
 8018ebe:	4423      	add	r3, r4
 8018ec0:	4622      	mov	r2, r4
 8018ec2:	1b19      	subs	r1, r3, r4
 8018ec4:	1b10      	subs	r0, r2, r4
 8018ec6:	4281      	cmp	r1, r0
 8018ec8:	dde7      	ble.n	8018e9a <__utoa+0x36>
 8018eca:	7811      	ldrb	r1, [r2, #0]
 8018ecc:	7818      	ldrb	r0, [r3, #0]
 8018ece:	f802 0b01 	strb.w	r0, [r2], #1
 8018ed2:	f803 1901 	strb.w	r1, [r3], #-1
 8018ed6:	e7f4      	b.n	8018ec2 <__utoa+0x5e>
 8018ed8:	460b      	mov	r3, r1
 8018eda:	e7e2      	b.n	8018ea2 <__utoa+0x3e>
 8018edc:	0801b77c 	.word	0x0801b77c

08018ee0 <__malloc_lock>:
 8018ee0:	4770      	bx	lr

08018ee2 <__malloc_unlock>:
 8018ee2:	4770      	bx	lr

08018ee4 <_init>:
 8018ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ee6:	bf00      	nop
 8018ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018eea:	bc08      	pop	{r3}
 8018eec:	469e      	mov	lr, r3
 8018eee:	4770      	bx	lr

08018ef0 <_fini>:
 8018ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ef2:	bf00      	nop
 8018ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018ef6:	bc08      	pop	{r3}
 8018ef8:	469e      	mov	lr, r3
 8018efa:	4770      	bx	lr
