
stm32f407VETx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016a30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000204c  08016bc0  08016bc0  00026bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018c0c  08018c0c  000305a0  2**0
                  CONTENTS
  4 .ARM          00000008  08018c0c  08018c0c  00028c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018c14  08018c14  000305a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018c14  08018c14  00028c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018c18  08018c18  00028c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005a0  20000000  08018c1c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008840  200005a0  080191bc  000305a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20008de0  080191bc  00038de0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000305a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004be29  00000000  00000000  000305d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009589  00000000  00000000  0007c3f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000029a0  00000000  00000000  00085988  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002788  00000000  00000000  00088328  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00030ab6  00000000  00000000  0008aab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00032cb2  00000000  00000000  000bb566  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e9d5c  00000000  00000000  000ee218  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d7f74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aca4  00000000  00000000  001d7ff0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005a0 	.word	0x200005a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016ba8 	.word	0x08016ba8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005a4 	.word	0x200005a4
 80001cc:	08016ba8 	.word	0x08016ba8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000204:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000208:	f000 b972 	b.w	80004f0 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9e08      	ldr	r6, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	4688      	mov	r8, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	d14b      	bne.n	80002ca <__udivmoddi4+0xa6>
 8000232:	428a      	cmp	r2, r1
 8000234:	4615      	mov	r5, r2
 8000236:	d967      	bls.n	8000308 <__udivmoddi4+0xe4>
 8000238:	fab2 f282 	clz	r2, r2
 800023c:	b14a      	cbz	r2, 8000252 <__udivmoddi4+0x2e>
 800023e:	f1c2 0720 	rsb	r7, r2, #32
 8000242:	fa01 f302 	lsl.w	r3, r1, r2
 8000246:	fa20 f707 	lsr.w	r7, r0, r7
 800024a:	4095      	lsls	r5, r2
 800024c:	ea47 0803 	orr.w	r8, r7, r3
 8000250:	4094      	lsls	r4, r2
 8000252:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000256:	0c23      	lsrs	r3, r4, #16
 8000258:	fbb8 f7fe 	udiv	r7, r8, lr
 800025c:	fa1f fc85 	uxth.w	ip, r5
 8000260:	fb0e 8817 	mls	r8, lr, r7, r8
 8000264:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000268:	fb07 f10c 	mul.w	r1, r7, ip
 800026c:	4299      	cmp	r1, r3
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x60>
 8000270:	18eb      	adds	r3, r5, r3
 8000272:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000276:	f080 811b 	bcs.w	80004b0 <__udivmoddi4+0x28c>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 8118 	bls.w	80004b0 <__udivmoddi4+0x28c>
 8000280:	3f02      	subs	r7, #2
 8000282:	442b      	add	r3, r5
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0fe 	udiv	r0, r3, lr
 800028c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 fc0c 	mul.w	ip, r0, ip
 8000298:	45a4      	cmp	ip, r4
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x8c>
 800029c:	192c      	adds	r4, r5, r4
 800029e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x290>
 80002a6:	45a4      	cmp	ip, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x290>
 80002ac:	3802      	subs	r0, #2
 80002ae:	442c      	add	r4, r5
 80002b0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b4:	eba4 040c 	sub.w	r4, r4, ip
 80002b8:	2700      	movs	r7, #0
 80002ba:	b11e      	cbz	r6, 80002c4 <__udivmoddi4+0xa0>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c6 4300 	strd	r4, r3, [r6]
 80002c4:	4639      	mov	r1, r7
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xbe>
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	f000 80eb 	beq.w	80004aa <__udivmoddi4+0x286>
 80002d4:	2700      	movs	r7, #0
 80002d6:	e9c6 0100 	strd	r0, r1, [r6]
 80002da:	4638      	mov	r0, r7
 80002dc:	4639      	mov	r1, r7
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f783 	clz	r7, r3
 80002e6:	2f00      	cmp	r7, #0
 80002e8:	d147      	bne.n	800037a <__udivmoddi4+0x156>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd0>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80fa 	bhi.w	80004e8 <__udivmoddi4+0x2c4>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4698      	mov	r8, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa0>
 8000302:	e9c6 4800 	strd	r4, r8, [r6]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa0>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xe8>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 808f 	bne.w	8000434 <__udivmoddi4+0x210>
 8000316:	1b49      	subs	r1, r1, r5
 8000318:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800031c:	fa1f f885 	uxth.w	r8, r5
 8000320:	2701      	movs	r7, #1
 8000322:	fbb1 fcfe 	udiv	ip, r1, lr
 8000326:	0c23      	lsrs	r3, r4, #16
 8000328:	fb0e 111c 	mls	r1, lr, ip, r1
 800032c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000330:	fb08 f10c 	mul.w	r1, r8, ip
 8000334:	4299      	cmp	r1, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x124>
 8000338:	18eb      	adds	r3, r5, r3
 800033a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x122>
 8000340:	4299      	cmp	r1, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2bc>
 8000346:	4684      	mov	ip, r0
 8000348:	1a59      	subs	r1, r3, r1
 800034a:	b2a3      	uxth	r3, r4
 800034c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000350:	fb0e 1410 	mls	r4, lr, r0, r1
 8000354:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000358:	fb08 f800 	mul.w	r8, r8, r0
 800035c:	45a0      	cmp	r8, r4
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x14c>
 8000360:	192c      	adds	r4, r5, r4
 8000362:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x14a>
 8000368:	45a0      	cmp	r8, r4
 800036a:	f200 80b6 	bhi.w	80004da <__udivmoddi4+0x2b6>
 800036e:	4618      	mov	r0, r3
 8000370:	eba4 0408 	sub.w	r4, r4, r8
 8000374:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000378:	e79f      	b.n	80002ba <__udivmoddi4+0x96>
 800037a:	f1c7 0c20 	rsb	ip, r7, #32
 800037e:	40bb      	lsls	r3, r7
 8000380:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000384:	ea4e 0e03 	orr.w	lr, lr, r3
 8000388:	fa01 f407 	lsl.w	r4, r1, r7
 800038c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000390:	fa21 f30c 	lsr.w	r3, r1, ip
 8000394:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000398:	4325      	orrs	r5, r4
 800039a:	fbb3 f9f8 	udiv	r9, r3, r8
 800039e:	0c2c      	lsrs	r4, r5, #16
 80003a0:	fb08 3319 	mls	r3, r8, r9, r3
 80003a4:	fa1f fa8e 	uxth.w	sl, lr
 80003a8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003ac:	fb09 f40a 	mul.w	r4, r9, sl
 80003b0:	429c      	cmp	r4, r3
 80003b2:	fa02 f207 	lsl.w	r2, r2, r7
 80003b6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b0>
 80003bc:	eb1e 0303 	adds.w	r3, lr, r3
 80003c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003c4:	f080 8087 	bcs.w	80004d6 <__udivmoddi4+0x2b2>
 80003c8:	429c      	cmp	r4, r3
 80003ca:	f240 8084 	bls.w	80004d6 <__udivmoddi4+0x2b2>
 80003ce:	f1a9 0902 	sub.w	r9, r9, #2
 80003d2:	4473      	add	r3, lr
 80003d4:	1b1b      	subs	r3, r3, r4
 80003d6:	b2ad      	uxth	r5, r5
 80003d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003dc:	fb08 3310 	mls	r3, r8, r0, r3
 80003e0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e8:	45a2      	cmp	sl, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1da>
 80003ec:	eb1e 0404 	adds.w	r4, lr, r4
 80003f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f4:	d26b      	bcs.n	80004ce <__udivmoddi4+0x2aa>
 80003f6:	45a2      	cmp	sl, r4
 80003f8:	d969      	bls.n	80004ce <__udivmoddi4+0x2aa>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4474      	add	r4, lr
 80003fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000402:	fba0 8902 	umull	r8, r9, r0, r2
 8000406:	eba4 040a 	sub.w	r4, r4, sl
 800040a:	454c      	cmp	r4, r9
 800040c:	46c2      	mov	sl, r8
 800040e:	464b      	mov	r3, r9
 8000410:	d354      	bcc.n	80004bc <__udivmoddi4+0x298>
 8000412:	d051      	beq.n	80004b8 <__udivmoddi4+0x294>
 8000414:	2e00      	cmp	r6, #0
 8000416:	d069      	beq.n	80004ec <__udivmoddi4+0x2c8>
 8000418:	ebb1 050a 	subs.w	r5, r1, sl
 800041c:	eb64 0403 	sbc.w	r4, r4, r3
 8000420:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000424:	40fd      	lsrs	r5, r7
 8000426:	40fc      	lsrs	r4, r7
 8000428:	ea4c 0505 	orr.w	r5, ip, r5
 800042c:	e9c6 5400 	strd	r5, r4, [r6]
 8000430:	2700      	movs	r7, #0
 8000432:	e747      	b.n	80002c4 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f703 	lsr.w	r7, r0, r3
 800043c:	4095      	lsls	r5, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	fa21 f303 	lsr.w	r3, r1, r3
 8000446:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800044a:	4338      	orrs	r0, r7
 800044c:	0c01      	lsrs	r1, r0, #16
 800044e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000452:	fa1f f885 	uxth.w	r8, r5
 8000456:	fb0e 3317 	mls	r3, lr, r7, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb07 f308 	mul.w	r3, r7, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x256>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000470:	d22f      	bcs.n	80004d2 <__udivmoddi4+0x2ae>
 8000472:	428b      	cmp	r3, r1
 8000474:	d92d      	bls.n	80004d2 <__udivmoddi4+0x2ae>
 8000476:	3f02      	subs	r7, #2
 8000478:	4429      	add	r1, r5
 800047a:	1acb      	subs	r3, r1, r3
 800047c:	b281      	uxth	r1, r0
 800047e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000482:	fb0e 3310 	mls	r3, lr, r0, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb00 f308 	mul.w	r3, r0, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x27e>
 8000492:	1869      	adds	r1, r5, r1
 8000494:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000498:	d217      	bcs.n	80004ca <__udivmoddi4+0x2a6>
 800049a:	428b      	cmp	r3, r1
 800049c:	d915      	bls.n	80004ca <__udivmoddi4+0x2a6>
 800049e:	3802      	subs	r0, #2
 80004a0:	4429      	add	r1, r5
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a8:	e73b      	b.n	8000322 <__udivmoddi4+0xfe>
 80004aa:	4637      	mov	r7, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e709      	b.n	80002c4 <__udivmoddi4+0xa0>
 80004b0:	4607      	mov	r7, r0
 80004b2:	e6e7      	b.n	8000284 <__udivmoddi4+0x60>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x8c>
 80004b8:	4541      	cmp	r1, r8
 80004ba:	d2ab      	bcs.n	8000414 <__udivmoddi4+0x1f0>
 80004bc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c0:	eb69 020e 	sbc.w	r2, r9, lr
 80004c4:	3801      	subs	r0, #1
 80004c6:	4613      	mov	r3, r2
 80004c8:	e7a4      	b.n	8000414 <__udivmoddi4+0x1f0>
 80004ca:	4660      	mov	r0, ip
 80004cc:	e7e9      	b.n	80004a2 <__udivmoddi4+0x27e>
 80004ce:	4618      	mov	r0, r3
 80004d0:	e795      	b.n	80003fe <__udivmoddi4+0x1da>
 80004d2:	4667      	mov	r7, ip
 80004d4:	e7d1      	b.n	800047a <__udivmoddi4+0x256>
 80004d6:	4681      	mov	r9, r0
 80004d8:	e77c      	b.n	80003d4 <__udivmoddi4+0x1b0>
 80004da:	3802      	subs	r0, #2
 80004dc:	442c      	add	r4, r5
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0x14c>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	442b      	add	r3, r5
 80004e6:	e72f      	b.n	8000348 <__udivmoddi4+0x124>
 80004e8:	4638      	mov	r0, r7
 80004ea:	e708      	b.n	80002fe <__udivmoddi4+0xda>
 80004ec:	4637      	mov	r7, r6
 80004ee:	e6e9      	b.n	80002c4 <__udivmoddi4+0xa0>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <bh>:
	}

}

void bh(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0

}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
	...

08000504 <HAL_UART_TxCpltCallback>:
{
	bh();
}*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	tx_on_progress=0;
 800050c:	4b04      	ldr	r3, [pc, #16]	; (8000520 <HAL_UART_TxCpltCallback+0x1c>)
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
	//bh();
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	200005c4 	.word	0x200005c4

08000524 <HAL_UART_RxCpltCallback>:

static int num_empty_rx = 0;
volatile int num_rx = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	rx_on_progress=0;
 800052c:	4b20      	ldr	r3, [pc, #128]	; (80005b0 <HAL_UART_RxCpltCallback+0x8c>)
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
	int l = sizeof(buf0) - __HAL_DMA_GET_COUNTER(hdma_uart_rx); // buf0 and buf1 same size
 8000532:	4b20      	ldr	r3, [pc, #128]	; (80005b4 <HAL_UART_RxCpltCallback+0x90>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	f1c3 0320 	rsb	r3, r3, #32
 800053e:	617b      	str	r3, [r7, #20]
	at_msg_t m;
	m.numbuf = curbuf;
 8000540:	4b1d      	ldr	r3, [pc, #116]	; (80005b8 <HAL_UART_RxCpltCallback+0x94>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	733b      	strb	r3, [r7, #12]
	m.len = l;
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	b2db      	uxtb	r3, r3
 800054a:	737b      	strb	r3, [r7, #13]
	num_rx++;
 800054c:	4b1b      	ldr	r3, [pc, #108]	; (80005bc <HAL_UART_RxCpltCallback+0x98>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	3301      	adds	r3, #1
 8000552:	4a1a      	ldr	r2, [pc, #104]	; (80005bc <HAL_UART_RxCpltCallback+0x98>)
 8000554:	6013      	str	r3, [r2, #0]
	if (l) {
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d012      	beq.n	8000582 <HAL_UART_RxCpltCallback+0x5e>
		curbuf = curbuf ? 0 : 1;
 800055c:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <HAL_UART_RxCpltCallback+0x94>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	bf0c      	ite	eq
 8000564:	2301      	moveq	r3, #1
 8000566:	2300      	movne	r3, #0
 8000568:	b2db      	uxtb	r3, r3
 800056a:	461a      	mov	r2, r3
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <HAL_UART_RxCpltCallback+0x94>)
 800056e:	701a      	strb	r2, [r3, #0]
		osMessageQueuePut(bleRespQ, &m, 0, 0);
 8000570:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <HAL_UART_RxCpltCallback+0x9c>)
 8000572:	6818      	ldr	r0, [r3, #0]
 8000574:	f107 010c 	add.w	r1, r7, #12
 8000578:	2300      	movs	r3, #0
 800057a:	2200      	movs	r2, #0
 800057c:	f00c fa54 	bl	800ca28 <osMessageQueuePut>
 8000580:	e004      	b.n	800058c <HAL_UART_RxCpltCallback+0x68>
	} else {
		num_empty_rx++;
 8000582:	4b10      	ldr	r3, [pc, #64]	; (80005c4 <HAL_UART_RxCpltCallback+0xa0>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	3301      	adds	r3, #1
 8000588:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <HAL_UART_RxCpltCallback+0xa0>)
 800058a:	6013      	str	r3, [r2, #0]
	}
	uint8_t *newbuf = curbuf ? buf1 : buf0;
 800058c:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <HAL_UART_RxCpltCallback+0x94>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <HAL_UART_RxCpltCallback+0x74>
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <HAL_UART_RxCpltCallback+0xa4>)
 8000596:	e000      	b.n	800059a <HAL_UART_RxCpltCallback+0x76>
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <HAL_UART_RxCpltCallback+0xa8>)
 800059a:	613b      	str	r3, [r7, #16]

	HAL_UART_Receive_DMA(huart, newbuf, sizeof(buf0));
 800059c:	2220      	movs	r2, #32
 800059e:	6939      	ldr	r1, [r7, #16]
 80005a0:	6878      	ldr	r0, [r7, #4]
 80005a2:	f008 fa85 	bl	8008ab0 <HAL_UART_Receive_DMA>
	//__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE );
	//__HAL_DMA_ENABLE_IT(hdma_uart_rx, DMA_IT_TC /*|DMA_IT_HT*/);
}
 80005a6:	bf00      	nop
 80005a8:	3718      	adds	r7, #24
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	200005c8 	.word	0x200005c8
 80005b4:	200005bc 	.word	0x200005bc
 80005b8:	2000060c 	.word	0x2000060c
 80005bc:	20000614 	.word	0x20000614
 80005c0:	200005c0 	.word	0x200005c0
 80005c4:	20000610 	.word	0x20000610
 80005c8:	200005ec 	.word	0x200005ec
 80005cc:	200005cc 	.word	0x200005cc

080005d0 <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	//bh();
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	bh();
 80005ec:	f7ff ff82 	bl	80004f4 <bh>
}
 80005f0:	bf00      	nop
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0

}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0
return 0;
 800060a:	2300      	movs	r3, #0
}
 800060c:	4618      	mov	r0, r3
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
	...

08000618 <itm_debug1>:
//void _itm_debug1(const char *msg, int v);
//void _itm_debug2(const char *msg, int v1, int v2);
void _itm_debug3(const char *msg, int v1, int v2, int v3, int n);

static inline void itm_debug1(uint32_t f, const char *msg, int v)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af02      	add	r7, sp, #8
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <itm_debug1+0x30>)
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	4013      	ands	r3, r2
 800062c:	2b00      	cmp	r3, #0
 800062e:	d007      	beq.n	8000640 <itm_debug1+0x28>
 8000630:	2301      	movs	r3, #1
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2300      	movs	r3, #0
 8000636:	2200      	movs	r2, #0
 8000638:	6879      	ldr	r1, [r7, #4]
 800063a:	68b8      	ldr	r0, [r7, #8]
 800063c:	f015 ff7c 	bl	8016538 <_itm_debug3>
}
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000538 	.word	0x20000538

0800064c <itm_debug2>:
static inline void itm_debug2(uint32_t f, const char *msg, int v1, int v2)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af02      	add	r7, sp, #8
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
 8000658:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <itm_debug2+0x34>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	4013      	ands	r3, r2
 8000662:	2b00      	cmp	r3, #0
 8000664:	d007      	beq.n	8000676 <itm_debug2+0x2a>
 8000666:	2302      	movs	r3, #2
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2300      	movs	r3, #0
 800066c:	683a      	ldr	r2, [r7, #0]
 800066e:	6879      	ldr	r1, [r7, #4]
 8000670:	68b8      	ldr	r0, [r7, #8]
 8000672:	f015 ff61 	bl	8016538 <_itm_debug3>
}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000538 	.word	0x20000538

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000688:	f001 fbf2 	bl	8001e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068c:	f000 f864 	bl	8000758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000690:	f000 fdc8 	bl	8001224 <MX_GPIO_Init>
  MX_DMA_Init();
 8000694:	f000 fda6 	bl	80011e4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000698:	f000 f8e0 	bl	800085c <MX_ADC1_Init>
  MX_I2C1_Init();
 800069c:	f000 f9b4 	bl	8000a08 <MX_I2C1_Init>
  MX_TIM1_Init();
 80006a0:	f000 fa40 	bl	8000b24 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006a4:	f000 fb02 	bl	8000cac <MX_TIM2_Init>
  MX_TIM3_Init();
 80006a8:	f000 fb98 	bl	8000ddc <MX_TIM3_Init>
  MX_RTC_Init();
 80006ac:	f000 fa0a 	bl	8000ac4 <MX_RTC_Init>
  MX_UART4_Init();
 80006b0:	f000 fd6e 	bl	8001190 <MX_UART4_Init>
  MX_TIM4_Init();
 80006b4:	f000 fc40 	bl	8000f38 <MX_TIM4_Init>
  MX_TIM8_Init();
 80006b8:	f000 fc92 	bl	8000fe0 <MX_TIM8_Init>
  MX_I2C3_Init();
 80006bc:	f000 f9d2 	bl	8000a64 <MX_I2C3_Init>
  MX_TIM12_Init();
 80006c0:	f000 fcf6 	bl	80010b0 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006c4:	f00b ffec 	bl	800c6a0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of frameQueue */
  frameQueueHandle = osMessageQueueNew (48, sizeof(frame_msg_t), &frameQueue_attributes);
 80006c8:	4a15      	ldr	r2, [pc, #84]	; (8000720 <main+0x9c>)
 80006ca:	2121      	movs	r1, #33	; 0x21
 80006cc:	2030      	movs	r0, #48	; 0x30
 80006ce:	f00c f925 	bl	800c91c <osMessageQueueNew>
 80006d2:	4602      	mov	r2, r0
 80006d4:	4b13      	ldr	r3, [pc, #76]	; (8000724 <main+0xa0>)
 80006d6:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of uiTask */
  uiTaskHandle = osThreadNew(StartUiTask, NULL, &uiTask_attributes);
 80006d8:	4a13      	ldr	r2, [pc, #76]	; (8000728 <main+0xa4>)
 80006da:	2100      	movs	r1, #0
 80006dc:	4813      	ldr	r0, [pc, #76]	; (800072c <main+0xa8>)
 80006de:	f00c f849 	bl	800c774 <osThreadNew>
 80006e2:	4602      	mov	r2, r0
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <main+0xac>)
 80006e6:	601a      	str	r2, [r3, #0]

  /* creation of ctrlTask */
  ctrlTaskHandle = osThreadNew(StartCtrlTask, NULL, &ctrlTask_attributes);
 80006e8:	4a12      	ldr	r2, [pc, #72]	; (8000734 <main+0xb0>)
 80006ea:	2100      	movs	r1, #0
 80006ec:	4812      	ldr	r0, [pc, #72]	; (8000738 <main+0xb4>)
 80006ee:	f00c f841 	bl	800c774 <osThreadNew>
 80006f2:	4602      	mov	r2, r0
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <main+0xb8>)
 80006f6:	601a      	str	r2, [r3, #0]

  /* creation of txrxFrameTask */
  txrxFrameTaskHandle = osThreadNew(StartTxRxFrameTask, NULL, &txrxFrameTask_attributes);
 80006f8:	4a11      	ldr	r2, [pc, #68]	; (8000740 <main+0xbc>)
 80006fa:	2100      	movs	r1, #0
 80006fc:	4811      	ldr	r0, [pc, #68]	; (8000744 <main+0xc0>)
 80006fe:	f00c f839 	bl	800c774 <osThreadNew>
 8000702:	4602      	mov	r2, r0
 8000704:	4b10      	ldr	r3, [pc, #64]	; (8000748 <main+0xc4>)
 8000706:	601a      	str	r2, [r3, #0]

  /* creation of ina3221_task */
  ina3221_taskHandle = osThreadNew(ina3221_task_start, NULL, &ina3221_task_attributes);
 8000708:	4a10      	ldr	r2, [pc, #64]	; (800074c <main+0xc8>)
 800070a:	2100      	movs	r1, #0
 800070c:	4810      	ldr	r0, [pc, #64]	; (8000750 <main+0xcc>)
 800070e:	f00c f831 	bl	800c774 <osThreadNew>
 8000712:	4602      	mov	r2, r0
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <main+0xd0>)
 8000716:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000718:	f00b fff6 	bl	800c708 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800071c:	e7fe      	b.n	800071c <main+0x98>
 800071e:	bf00      	nop
 8000720:	08017310 	.word	0x08017310
 8000724:	20005cd4 	.word	0x20005cd4
 8000728:	08017280 	.word	0x08017280
 800072c:	080160f5 	.word	0x080160f5
 8000730:	200061e0 	.word	0x200061e0
 8000734:	080172a4 	.word	0x080172a4
 8000738:	08015cc1 	.word	0x08015cc1
 800073c:	20006224 	.word	0x20006224
 8000740:	080172c8 	.word	0x080172c8
 8000744:	08016135 	.word	0x08016135
 8000748:	20006b30 	.word	0x20006b30
 800074c:	080172ec 	.word	0x080172ec
 8000750:	08010ca9 	.word	0x08010ca9
 8000754:	20006c7c 	.word	0x20006c7c

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b098      	sub	sp, #96	; 0x60
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000762:	2230      	movs	r2, #48	; 0x30
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f016 f907 	bl	801697a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	f107 031c 	add.w	r3, r7, #28
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	4b31      	ldr	r3, [pc, #196]	; (8000854 <SystemClock_Config+0xfc>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000792:	4a30      	ldr	r2, [pc, #192]	; (8000854 <SystemClock_Config+0xfc>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000798:	6413      	str	r3, [r2, #64]	; 0x40
 800079a:	4b2e      	ldr	r3, [pc, #184]	; (8000854 <SystemClock_Config+0xfc>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b2b      	ldr	r3, [pc, #172]	; (8000858 <SystemClock_Config+0x100>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a2a      	ldr	r2, [pc, #168]	; (8000858 <SystemClock_Config+0x100>)
 80007b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b4:	6013      	str	r3, [r2, #0]
 80007b6:	4b28      	ldr	r3, [pc, #160]	; (8000858 <SystemClock_Config+0x100>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80007c2:	2305      	movs	r3, #5
 80007c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80007cc:	2301      	movs	r3, #1
 80007ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d0:	2302      	movs	r3, #2
 80007d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007da:	2304      	movs	r3, #4
 80007dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007de:	2360      	movs	r3, #96	; 0x60
 80007e0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007e6:	2304      	movs	r3, #4
 80007e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007ee:	4618      	mov	r0, r3
 80007f0:	f006 f944 	bl	8006a7c <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007fa:	f000 fe5b 	bl	80014b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	230f      	movs	r3, #15
 8000800:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	2302      	movs	r3, #2
 8000804:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800080a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8000810:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000814:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	2103      	movs	r1, #3
 800081c:	4618      	mov	r0, r3
 800081e:	f006 fb9d 	bl	8006f5c <HAL_RCC_ClockConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000828:	f000 fe44 	bl	80014b4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800082c:	2302      	movs	r3, #2
 800082e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000830:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000834:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	4618      	mov	r0, r3
 800083c:	f006 fdb2 	bl	80073a4 <HAL_RCCEx_PeriphCLKConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000846:	f000 fe35 	bl	80014b4 <Error_Handler>
  }
}
 800084a:	bf00      	nop
 800084c:	3760      	adds	r7, #96	; 0x60
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800
 8000858:	40007000 	.word	0x40007000

0800085c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000862:	463b      	mov	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800086e:	4b64      	ldr	r3, [pc, #400]	; (8000a00 <MX_ADC1_Init+0x1a4>)
 8000870:	4a64      	ldr	r2, [pc, #400]	; (8000a04 <MX_ADC1_Init+0x1a8>)
 8000872:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000874:	4b62      	ldr	r3, [pc, #392]	; (8000a00 <MX_ADC1_Init+0x1a4>)
 8000876:	2200      	movs	r2, #0
 8000878:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800087a:	4b61      	ldr	r3, [pc, #388]	; (8000a00 <MX_ADC1_Init+0x1a4>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000880:	4b5f      	ldr	r3, [pc, #380]	; (8000a00 <MX_ADC1_Init+0x1a4>)
 8000882:	2201      	movs	r2, #1
 8000884:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000886:	4b5e      	ldr	r3, [pc, #376]	; (8000a00 <MX_ADC1_Init+0x1a4>)
 8000888:	2200      	movs	r2, #0
 800088a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800088c:	4b5c      	ldr	r3, [pc, #368]	; (8000a00 <MX_ADC1_Init+0x1a4>)
 800088e:	2200      	movs	r2, #0
 8000890:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000894:	4b5a      	ldr	r3, [pc, #360]	; (8000a00 <MX_ADC1_Init+0x1a4>)
 8000896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800089a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800089c:	4b58      	ldr	r3, [pc, #352]	; (8000a00 <MX_ADC1_Init+0x1a4>)
 800089e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80008a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a4:	4b56      	ldr	r3, [pc, #344]	; (8000a00 <MX_ADC1_Init+0x1a4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 80008aa:	4b55      	ldr	r3, [pc, #340]	; (8000a00 <MX_ADC1_Init+0x1a4>)
 80008ac:	220a      	movs	r2, #10
 80008ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008b0:	4b53      	ldr	r3, [pc, #332]	; (8000a00 <MX_ADC1_Init+0x1a4>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008b8:	4b51      	ldr	r3, [pc, #324]	; (8000a00 <MX_ADC1_Init+0x1a4>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008be:	4850      	ldr	r0, [pc, #320]	; (8000a00 <MX_ADC1_Init+0x1a4>)
 80008c0:	f001 fb3a 	bl	8001f38 <HAL_ADC_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80008ca:	f000 fdf3 	bl	80014b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008d2:	2301      	movs	r3, #1
 80008d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80008d6:	2302      	movs	r3, #2
 80008d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008da:	463b      	mov	r3, r7
 80008dc:	4619      	mov	r1, r3
 80008de:	4848      	ldr	r0, [pc, #288]	; (8000a00 <MX_ADC1_Init+0x1a4>)
 80008e0:	f001 fc60 	bl	80021a4 <HAL_ADC_ConfigChannel>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80008ea:	f000 fde3 	bl	80014b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80008f2:	2302      	movs	r3, #2
 80008f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f6:	463b      	mov	r3, r7
 80008f8:	4619      	mov	r1, r3
 80008fa:	4841      	ldr	r0, [pc, #260]	; (8000a00 <MX_ADC1_Init+0x1a4>)
 80008fc:	f001 fc52 	bl	80021a4 <HAL_ADC_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000906:	f000 fdd5 	bl	80014b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800090a:	2302      	movs	r3, #2
 800090c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800090e:	2303      	movs	r3, #3
 8000910:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000912:	463b      	mov	r3, r7
 8000914:	4619      	mov	r1, r3
 8000916:	483a      	ldr	r0, [pc, #232]	; (8000a00 <MX_ADC1_Init+0x1a4>)
 8000918:	f001 fc44 	bl	80021a4 <HAL_ADC_ConfigChannel>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000922:	f000 fdc7 	bl	80014b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000926:	2303      	movs	r3, #3
 8000928:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800092a:	2304      	movs	r3, #4
 800092c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800092e:	463b      	mov	r3, r7
 8000930:	4619      	mov	r1, r3
 8000932:	4833      	ldr	r0, [pc, #204]	; (8000a00 <MX_ADC1_Init+0x1a4>)
 8000934:	f001 fc36 	bl	80021a4 <HAL_ADC_ConfigChannel>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800093e:	f000 fdb9 	bl	80014b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000942:	2304      	movs	r3, #4
 8000944:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000946:	2305      	movs	r3, #5
 8000948:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094a:	463b      	mov	r3, r7
 800094c:	4619      	mov	r1, r3
 800094e:	482c      	ldr	r0, [pc, #176]	; (8000a00 <MX_ADC1_Init+0x1a4>)
 8000950:	f001 fc28 	bl	80021a4 <HAL_ADC_ConfigChannel>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 800095a:	f000 fdab 	bl	80014b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800095e:	2305      	movs	r3, #5
 8000960:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000962:	2306      	movs	r3, #6
 8000964:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000966:	463b      	mov	r3, r7
 8000968:	4619      	mov	r1, r3
 800096a:	4825      	ldr	r0, [pc, #148]	; (8000a00 <MX_ADC1_Init+0x1a4>)
 800096c:	f001 fc1a 	bl	80021a4 <HAL_ADC_ConfigChannel>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8000976:	f000 fd9d 	bl	80014b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800097a:	230c      	movs	r3, #12
 800097c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800097e:	2307      	movs	r3, #7
 8000980:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000982:	463b      	mov	r3, r7
 8000984:	4619      	mov	r1, r3
 8000986:	481e      	ldr	r0, [pc, #120]	; (8000a00 <MX_ADC1_Init+0x1a4>)
 8000988:	f001 fc0c 	bl	80021a4 <HAL_ADC_ConfigChannel>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 8000992:	f000 fd8f 	bl	80014b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000996:	2308      	movs	r3, #8
 8000998:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800099a:	2308      	movs	r3, #8
 800099c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800099e:	463b      	mov	r3, r7
 80009a0:	4619      	mov	r1, r3
 80009a2:	4817      	ldr	r0, [pc, #92]	; (8000a00 <MX_ADC1_Init+0x1a4>)
 80009a4:	f001 fbfe 	bl	80021a4 <HAL_ADC_ConfigChannel>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 80009ae:	f000 fd81 	bl	80014b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80009b2:	230a      	movs	r3, #10
 80009b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80009b6:	2309      	movs	r3, #9
 80009b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ba:	463b      	mov	r3, r7
 80009bc:	4619      	mov	r1, r3
 80009be:	4810      	ldr	r0, [pc, #64]	; (8000a00 <MX_ADC1_Init+0x1a4>)
 80009c0:	f001 fbf0 	bl	80021a4 <HAL_ADC_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 80009ca:	f000 fd73 	bl	80014b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80009ce:	230b      	movs	r3, #11
 80009d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80009d2:	230a      	movs	r3, #10
 80009d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d6:	463b      	mov	r3, r7
 80009d8:	4619      	mov	r1, r3
 80009da:	4809      	ldr	r0, [pc, #36]	; (8000a00 <MX_ADC1_Init+0x1a4>)
 80009dc:	f001 fbe2 	bl	80021a4 <HAL_ADC_ConfigChannel>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80009e6:	f000 fd65 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  if (hadc1.Init.NbrOfConversion != NUM_LOCAL_CANTONS_HW*2) {
 80009ea:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <MX_ADC1_Init+0x1a4>)
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	2b0a      	cmp	r3, #10
 80009f0:	d001      	beq.n	80009f6 <MX_ADC1_Init+0x19a>
	    Error_Handler();
 80009f2:	f000 fd5f 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE END ADC1_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20006228 	.word	0x20006228
 8000a04:	40012000 	.word	0x40012000

08000a08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <MX_I2C1_Init+0x50>)
 8000a0e:	4a13      	ldr	r2, [pc, #76]	; (8000a5c <MX_I2C1_Init+0x54>)
 8000a10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_I2C1_Init+0x50>)
 8000a14:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <MX_I2C1_Init+0x58>)
 8000a16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_I2C1_Init+0x50>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_I2C1_Init+0x50>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_I2C1_Init+0x50>)
 8000a26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <MX_I2C1_Init+0x50>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_I2C1_Init+0x50>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <MX_I2C1_Init+0x50>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_I2C1_Init+0x50>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a44:	4804      	ldr	r0, [pc, #16]	; (8000a58 <MX_I2C1_Init+0x50>)
 8000a46:	f002 fc81 	bl	800334c <HAL_I2C_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a50:	f000 fd30 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20005cd8 	.word	0x20005cd8
 8000a5c:	40005400 	.word	0x40005400
 8000a60:	00061a80 	.word	0x00061a80

08000a64 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MX_I2C3_Init+0x54>)
 8000a6a:	4a14      	ldr	r2, [pc, #80]	; (8000abc <MX_I2C3_Init+0x58>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_I2C3_Init+0x54>)
 8000a70:	4a13      	ldr	r2, [pc, #76]	; (8000ac0 <MX_I2C3_Init+0x5c>)
 8000a72:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000a74:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <MX_I2C3_Init+0x54>)
 8000a76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a7a:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_I2C3_Init+0x54>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <MX_I2C3_Init+0x54>)
 8000a84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a88:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_I2C3_Init+0x54>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_I2C3_Init+0x54>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <MX_I2C3_Init+0x54>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_I2C3_Init+0x54>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_I2C3_Init+0x54>)
 8000aa4:	f002 fc52 	bl	800334c <HAL_I2C_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_I2C3_Init+0x4e>
  {
    Error_Handler();
 8000aae:	f000 fd01 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2000556c 	.word	0x2000556c
 8000abc:	40005c00 	.word	0x40005c00
 8000ac0:	00061a80 	.word	0x00061a80

08000ac4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000ad8:	2300      	movs	r3, #0
 8000ada:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_RTC_Init+0x58>)
 8000ade:	4a10      	ldr	r2, [pc, #64]	; (8000b20 <MX_RTC_Init+0x5c>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_RTC_Init+0x58>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_RTC_Init+0x58>)
 8000aea:	227f      	movs	r2, #127	; 0x7f
 8000aec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <MX_RTC_Init+0x58>)
 8000af0:	22ff      	movs	r2, #255	; 0xff
 8000af2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_RTC_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <MX_RTC_Init+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_RTC_Init+0x58>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_RTC_Init+0x58>)
 8000b08:	f006 fd2e 	bl	8007568 <HAL_RTC_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000b12:	f000 fccf 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200062d0 	.word	0x200062d0
 8000b20:	40002800 	.word	0x40002800

08000b24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b096      	sub	sp, #88	; 0x58
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]
 8000b52:	615a      	str	r2, [r3, #20]
 8000b54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2220      	movs	r2, #32
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f015 ff0c 	bl	801697a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b62:	4b50      	ldr	r3, [pc, #320]	; (8000ca4 <MX_TIM1_Init+0x180>)
 8000b64:	4a50      	ldr	r2, [pc, #320]	; (8000ca8 <MX_TIM1_Init+0x184>)
 8000b66:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1199;
 8000b68:	4b4e      	ldr	r3, [pc, #312]	; (8000ca4 <MX_TIM1_Init+0x180>)
 8000b6a:	f240 42af 	movw	r2, #1199	; 0x4af
 8000b6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000b70:	4b4c      	ldr	r3, [pc, #304]	; (8000ca4 <MX_TIM1_Init+0x180>)
 8000b72:	2260      	movs	r2, #96	; 0x60
 8000b74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 8000b76:	4b4b      	ldr	r3, [pc, #300]	; (8000ca4 <MX_TIM1_Init+0x180>)
 8000b78:	22c8      	movs	r2, #200	; 0xc8
 8000b7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7c:	4b49      	ldr	r3, [pc, #292]	; (8000ca4 <MX_TIM1_Init+0x180>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b82:	4b48      	ldr	r3, [pc, #288]	; (8000ca4 <MX_TIM1_Init+0x180>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b88:	4b46      	ldr	r3, [pc, #280]	; (8000ca4 <MX_TIM1_Init+0x180>)
 8000b8a:	2280      	movs	r2, #128	; 0x80
 8000b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b8e:	4845      	ldr	r0, [pc, #276]	; (8000ca4 <MX_TIM1_Init+0x180>)
 8000b90:	f006 fdcf 	bl	8007732 <HAL_TIM_Base_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b9a:	f000 fc8b 	bl	80014b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ba4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ba8:	4619      	mov	r1, r3
 8000baa:	483e      	ldr	r0, [pc, #248]	; (8000ca4 <MX_TIM1_Init+0x180>)
 8000bac:	f007 f998 	bl	8007ee0 <HAL_TIM_ConfigClockSource>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000bb6:	f000 fc7d 	bl	80014b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bba:	483a      	ldr	r0, [pc, #232]	; (8000ca4 <MX_TIM1_Init+0x180>)
 8000bbc:	f006 fe2c 	bl	8007818 <HAL_TIM_PWM_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000bc6:	f000 fc75 	bl	80014b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bca:	2320      	movs	r3, #32
 8000bcc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000bce:	2380      	movs	r3, #128	; 0x80
 8000bd0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bd2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4832      	ldr	r0, [pc, #200]	; (8000ca4 <MX_TIM1_Init+0x180>)
 8000bda:	f007 fe39 	bl	8008850 <HAL_TIMEx_MasterConfigSynchronization>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000be4:	f000 fc66 	bl	80014b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be8:	2360      	movs	r3, #96	; 0x60
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c00:	2300      	movs	r3, #0
 8000c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	2200      	movs	r2, #0
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4825      	ldr	r0, [pc, #148]	; (8000ca4 <MX_TIM1_Init+0x180>)
 8000c0e:	f007 f8a1 	bl	8007d54 <HAL_TIM_PWM_ConfigChannel>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000c18:	f000 fc4c 	bl	80014b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c20:	2204      	movs	r2, #4
 8000c22:	4619      	mov	r1, r3
 8000c24:	481f      	ldr	r0, [pc, #124]	; (8000ca4 <MX_TIM1_Init+0x180>)
 8000c26:	f007 f895 	bl	8007d54 <HAL_TIM_PWM_ConfigChannel>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000c30:	f000 fc40 	bl	80014b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c38:	2208      	movs	r2, #8
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4819      	ldr	r0, [pc, #100]	; (8000ca4 <MX_TIM1_Init+0x180>)
 8000c3e:	f007 f889 	bl	8007d54 <HAL_TIM_PWM_ConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000c48:	f000 fc34 	bl	80014b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c50:	220c      	movs	r2, #12
 8000c52:	4619      	mov	r1, r3
 8000c54:	4813      	ldr	r0, [pc, #76]	; (8000ca4 <MX_TIM1_Init+0x180>)
 8000c56:	f007 f87d 	bl	8007d54 <HAL_TIM_PWM_ConfigChannel>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000c60:	f000 fc28 	bl	80014b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c7c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	4619      	mov	r1, r3
 8000c86:	4807      	ldr	r0, [pc, #28]	; (8000ca4 <MX_TIM1_Init+0x180>)
 8000c88:	f007 fe5e 	bl	8008948 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000c92:	f000 fc0f 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c96:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <MX_TIM1_Init+0x180>)
 8000c98:	f000 fe86 	bl	80019a8 <HAL_TIM_MspPostInit>

}
 8000c9c:	bf00      	nop
 8000c9e:	3758      	adds	r7, #88	; 0x58
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200066f0 	.word	0x200066f0
 8000ca8:	40010000 	.word	0x40010000

08000cac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b092      	sub	sp, #72	; 0x48
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cb2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cda:	463b      	mov	r3, r7
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
 8000ce8:	615a      	str	r2, [r3, #20]
 8000cea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cec:	4b3a      	ldr	r3, [pc, #232]	; (8000dd8 <MX_TIM2_Init+0x12c>)
 8000cee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cf2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1199;
 8000cf4:	4b38      	ldr	r3, [pc, #224]	; (8000dd8 <MX_TIM2_Init+0x12c>)
 8000cf6:	f240 42af 	movw	r2, #1199	; 0x4af
 8000cfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000cfc:	4b36      	ldr	r3, [pc, #216]	; (8000dd8 <MX_TIM2_Init+0x12c>)
 8000cfe:	2260      	movs	r2, #96	; 0x60
 8000d00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8000d02:	4b35      	ldr	r3, [pc, #212]	; (8000dd8 <MX_TIM2_Init+0x12c>)
 8000d04:	22c8      	movs	r2, #200	; 0xc8
 8000d06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d08:	4b33      	ldr	r3, [pc, #204]	; (8000dd8 <MX_TIM2_Init+0x12c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d0e:	4b32      	ldr	r3, [pc, #200]	; (8000dd8 <MX_TIM2_Init+0x12c>)
 8000d10:	2280      	movs	r2, #128	; 0x80
 8000d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d14:	4830      	ldr	r0, [pc, #192]	; (8000dd8 <MX_TIM2_Init+0x12c>)
 8000d16:	f006 fd0c 	bl	8007732 <HAL_TIM_Base_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000d20:	f000 fbc8 	bl	80014b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d28:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4829      	ldr	r0, [pc, #164]	; (8000dd8 <MX_TIM2_Init+0x12c>)
 8000d32:	f007 f8d5 	bl	8007ee0 <HAL_TIM_ConfigClockSource>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000d3c:	f000 fbba 	bl	80014b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d40:	4825      	ldr	r0, [pc, #148]	; (8000dd8 <MX_TIM2_Init+0x12c>)
 8000d42:	f006 fd69 	bl	8007818 <HAL_TIM_PWM_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000d4c:	f000 fbb2 	bl	80014b4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000d50:	2306      	movs	r3, #6
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	481e      	ldr	r0, [pc, #120]	; (8000dd8 <MX_TIM2_Init+0x12c>)
 8000d60:	f007 f975 	bl	800804e <HAL_TIM_SlaveConfigSynchro>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8000d6a:	f000 fba3 	bl	80014b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4816      	ldr	r0, [pc, #88]	; (8000dd8 <MX_TIM2_Init+0x12c>)
 8000d7e:	f007 fd67 	bl	8008850 <HAL_TIMEx_MasterConfigSynchronization>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000d88:	f000 fb94 	bl	80014b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d8c:	2360      	movs	r3, #96	; 0x60
 8000d8e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	2208      	movs	r2, #8
 8000da0:	4619      	mov	r1, r3
 8000da2:	480d      	ldr	r0, [pc, #52]	; (8000dd8 <MX_TIM2_Init+0x12c>)
 8000da4:	f006 ffd6 	bl	8007d54 <HAL_TIM_PWM_ConfigChannel>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000dae:	f000 fb81 	bl	80014b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000db2:	463b      	mov	r3, r7
 8000db4:	220c      	movs	r2, #12
 8000db6:	4619      	mov	r1, r3
 8000db8:	4807      	ldr	r0, [pc, #28]	; (8000dd8 <MX_TIM2_Init+0x12c>)
 8000dba:	f006 ffcb 	bl	8007d54 <HAL_TIM_PWM_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000dc4:	f000 fb76 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dc8:	4803      	ldr	r0, [pc, #12]	; (8000dd8 <MX_TIM2_Init+0x12c>)
 8000dca:	f000 fded 	bl	80019a8 <HAL_TIM_MspPostInit>

}
 8000dce:	bf00      	nop
 8000dd0:	3748      	adds	r7, #72	; 0x48
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20006c3c 	.word	0x20006c3c

08000ddc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b092      	sub	sp, #72	; 0x48
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e00:	f107 031c 	add.w	r3, r7, #28
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
 8000e18:	615a      	str	r2, [r3, #20]
 8000e1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e1c:	4b44      	ldr	r3, [pc, #272]	; (8000f30 <MX_TIM3_Init+0x154>)
 8000e1e:	4a45      	ldr	r2, [pc, #276]	; (8000f34 <MX_TIM3_Init+0x158>)
 8000e20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e22:	4b43      	ldr	r3, [pc, #268]	; (8000f30 <MX_TIM3_Init+0x154>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e28:	4b41      	ldr	r3, [pc, #260]	; (8000f30 <MX_TIM3_Init+0x154>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e2e:	4b40      	ldr	r3, [pc, #256]	; (8000f30 <MX_TIM3_Init+0x154>)
 8000e30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e36:	4b3e      	ldr	r3, [pc, #248]	; (8000f30 <MX_TIM3_Init+0x154>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3c:	4b3c      	ldr	r3, [pc, #240]	; (8000f30 <MX_TIM3_Init+0x154>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e42:	483b      	ldr	r0, [pc, #236]	; (8000f30 <MX_TIM3_Init+0x154>)
 8000e44:	f006 fc75 	bl	8007732 <HAL_TIM_Base_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000e4e:	f000 fb31 	bl	80014b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e56:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e58:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4834      	ldr	r0, [pc, #208]	; (8000f30 <MX_TIM3_Init+0x154>)
 8000e60:	f007 f83e 	bl	8007ee0 <HAL_TIM_ConfigClockSource>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000e6a:	f000 fb23 	bl	80014b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e6e:	4830      	ldr	r0, [pc, #192]	; (8000f30 <MX_TIM3_Init+0x154>)
 8000e70:	f006 fcd2 	bl	8007818 <HAL_TIM_PWM_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8000e7a:	f000 fb1b 	bl	80014b4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000e7e:	2306      	movs	r3, #6
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4828      	ldr	r0, [pc, #160]	; (8000f30 <MX_TIM3_Init+0x154>)
 8000e8e:	f007 f8de 	bl	800804e <HAL_TIM_SlaveConfigSynchro>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8000e98:	f000 fb0c 	bl	80014b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4821      	ldr	r0, [pc, #132]	; (8000f30 <MX_TIM3_Init+0x154>)
 8000eac:	f007 fcd0 	bl	8008850 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000eb6:	f000 fafd 	bl	80014b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eba:	2360      	movs	r3, #96	; 0x60
 8000ebc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eca:	463b      	mov	r3, r7
 8000ecc:	2200      	movs	r2, #0
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4817      	ldr	r0, [pc, #92]	; (8000f30 <MX_TIM3_Init+0x154>)
 8000ed2:	f006 ff3f 	bl	8007d54 <HAL_TIM_PWM_ConfigChannel>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000edc:	f000 faea 	bl	80014b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4812      	ldr	r0, [pc, #72]	; (8000f30 <MX_TIM3_Init+0x154>)
 8000ee8:	f006 ff34 	bl	8007d54 <HAL_TIM_PWM_ConfigChannel>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8000ef2:	f000 fadf 	bl	80014b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	2208      	movs	r2, #8
 8000efa:	4619      	mov	r1, r3
 8000efc:	480c      	ldr	r0, [pc, #48]	; (8000f30 <MX_TIM3_Init+0x154>)
 8000efe:	f006 ff29 	bl	8007d54 <HAL_TIM_PWM_ConfigChannel>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM3_Init+0x130>
  {
    Error_Handler();
 8000f08:	f000 fad4 	bl	80014b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	220c      	movs	r2, #12
 8000f10:	4619      	mov	r1, r3
 8000f12:	4807      	ldr	r0, [pc, #28]	; (8000f30 <MX_TIM3_Init+0x154>)
 8000f14:	f006 ff1e 	bl	8007d54 <HAL_TIM_PWM_ConfigChannel>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_TIM3_Init+0x146>
  {
    Error_Handler();
 8000f1e:	f000 fac9 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f22:	4803      	ldr	r0, [pc, #12]	; (8000f30 <MX_TIM3_Init+0x154>)
 8000f24:	f000 fd40 	bl	80019a8 <HAL_TIM_MspPostInit>

}
 8000f28:	bf00      	nop
 8000f2a:	3748      	adds	r7, #72	; 0x48
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200061e4 	.word	0x200061e4
 8000f34:	40000400 	.word	0x40000400

08000f38 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08c      	sub	sp, #48	; 0x30
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	2224      	movs	r2, #36	; 0x24
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f015 fd17 	bl	801697a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f54:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <MX_TIM4_Init+0xa0>)
 8000f56:	4a21      	ldr	r2, [pc, #132]	; (8000fdc <MX_TIM4_Init+0xa4>)
 8000f58:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f5a:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <MX_TIM4_Init+0xa0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <MX_TIM4_Init+0xa0>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 8000f66:	4b1c      	ldr	r3, [pc, #112]	; (8000fd8 <MX_TIM4_Init+0xa0>)
 8000f68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f6c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_TIM4_Init+0xa0>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <MX_TIM4_Init+0xa0>)
 8000f76:	2280      	movs	r2, #128	; 0x80
 8000f78:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f82:	2301      	movs	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000f8a:	230a      	movs	r3, #10
 8000f8c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f92:	2301      	movs	r3, #1
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000f9a:	230a      	movs	r3, #10
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <MX_TIM4_Init+0xa0>)
 8000fa6:	f006 fd03 	bl	80079b0 <HAL_TIM_Encoder_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000fb0:	f000 fa80 	bl	80014b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_TIM4_Init+0xa0>)
 8000fc2:	f007 fc45 	bl	8008850 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000fcc:	f000 fa72 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	3730      	adds	r7, #48	; 0x30
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20005c94 	.word	0x20005c94
 8000fdc:	40000800 	.word	0x40000800

08000fe0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08c      	sub	sp, #48	; 0x30
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe6:	f107 0320 	add.w	r3, r7, #32
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800100c:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <MX_TIM8_Init+0xc8>)
 800100e:	4a27      	ldr	r2, [pc, #156]	; (80010ac <MX_TIM8_Init+0xcc>)
 8001010:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1199;
 8001012:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <MX_TIM8_Init+0xc8>)
 8001014:	f240 42af 	movw	r2, #1199	; 0x4af
 8001018:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101a:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <MX_TIM8_Init+0xc8>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 210;
 8001020:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <MX_TIM8_Init+0xc8>)
 8001022:	22d2      	movs	r2, #210	; 0xd2
 8001024:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001026:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <MX_TIM8_Init+0xc8>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800102c:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <MX_TIM8_Init+0xc8>)
 800102e:	2200      	movs	r2, #0
 8001030:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001032:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <MX_TIM8_Init+0xc8>)
 8001034:	2280      	movs	r2, #128	; 0x80
 8001036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001038:	481b      	ldr	r0, [pc, #108]	; (80010a8 <MX_TIM8_Init+0xc8>)
 800103a:	f006 fb7a 	bl	8007732 <HAL_TIM_Base_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8001044:	f000 fa36 	bl	80014b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800104e:	f107 0320 	add.w	r3, r7, #32
 8001052:	4619      	mov	r1, r3
 8001054:	4814      	ldr	r0, [pc, #80]	; (80010a8 <MX_TIM8_Init+0xc8>)
 8001056:	f006 ff43 	bl	8007ee0 <HAL_TIM_ConfigClockSource>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001060:	f000 fa28 	bl	80014b4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001064:	2304      	movs	r3, #4
 8001066:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001068:	2300      	movs	r3, #0
 800106a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	4619      	mov	r1, r3
 8001072:	480d      	ldr	r0, [pc, #52]	; (80010a8 <MX_TIM8_Init+0xc8>)
 8001074:	f006 ffeb 	bl	800804e <HAL_TIM_SlaveConfigSynchro>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 800107e:	f000 fa19 	bl	80014b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001082:	2320      	movs	r3, #32
 8001084:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001086:	2380      	movs	r3, #128	; 0x80
 8001088:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	4619      	mov	r1, r3
 800108e:	4806      	ldr	r0, [pc, #24]	; (80010a8 <MX_TIM8_Init+0xc8>)
 8001090:	f007 fbde 	bl	8008850 <HAL_TIMEx_MasterConfigSynchronization>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800109a:	f000 fa0b 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	3730      	adds	r7, #48	; 0x30
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20005bf0 	.word	0x20005bf0
 80010ac:	40010400 	.word	0x40010400

080010b0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08c      	sub	sp, #48	; 0x30
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
 80010c4:	611a      	str	r2, [r3, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010c6:	463b      	mov	r3, r7
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
 80010d4:	615a      	str	r2, [r3, #20]
 80010d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80010d8:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <MX_TIM12_Init+0xd8>)
 80010da:	4a2c      	ldr	r2, [pc, #176]	; (800118c <MX_TIM12_Init+0xdc>)
 80010dc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80010de:	4b2a      	ldr	r3, [pc, #168]	; (8001188 <MX_TIM12_Init+0xd8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e4:	4b28      	ldr	r3, [pc, #160]	; (8001188 <MX_TIM12_Init+0xd8>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 80010ea:	4b27      	ldr	r3, [pc, #156]	; (8001188 <MX_TIM12_Init+0xd8>)
 80010ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f2:	4b25      	ldr	r3, [pc, #148]	; (8001188 <MX_TIM12_Init+0xd8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f8:	4b23      	ldr	r3, [pc, #140]	; (8001188 <MX_TIM12_Init+0xd8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80010fe:	4822      	ldr	r0, [pc, #136]	; (8001188 <MX_TIM12_Init+0xd8>)
 8001100:	f006 fb17 	bl	8007732 <HAL_TIM_Base_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 800110a:	f000 f9d3 	bl	80014b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800110e:	481e      	ldr	r0, [pc, #120]	; (8001188 <MX_TIM12_Init+0xd8>)
 8001110:	f006 fb82 	bl	8007818 <HAL_TIM_PWM_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM12_Init+0x6e>
  {
    Error_Handler();
 800111a:	f000 f9cb 	bl	80014b4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001122:	2300      	movs	r3, #0
 8001124:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4619      	mov	r1, r3
 800112c:	4816      	ldr	r0, [pc, #88]	; (8001188 <MX_TIM12_Init+0xd8>)
 800112e:	f006 ff8e 	bl	800804e <HAL_TIM_SlaveConfigSynchro>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM12_Init+0x8c>
  {
    Error_Handler();
 8001138:	f000 f9bc 	bl	80014b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800113c:	2360      	movs	r3, #96	; 0x60
 800113e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001144:	2300      	movs	r3, #0
 8001146:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800114c:	463b      	mov	r3, r7
 800114e:	2200      	movs	r2, #0
 8001150:	4619      	mov	r1, r3
 8001152:	480d      	ldr	r0, [pc, #52]	; (8001188 <MX_TIM12_Init+0xd8>)
 8001154:	f006 fdfe 	bl	8007d54 <HAL_TIM_PWM_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 800115e:	f000 f9a9 	bl	80014b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001162:	463b      	mov	r3, r7
 8001164:	2204      	movs	r2, #4
 8001166:	4619      	mov	r1, r3
 8001168:	4807      	ldr	r0, [pc, #28]	; (8001188 <MX_TIM12_Init+0xd8>)
 800116a:	f006 fdf3 	bl	8007d54 <HAL_TIM_PWM_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM12_Init+0xc8>
  {
    Error_Handler();
 8001174:	f000 f99e 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001178:	4803      	ldr	r0, [pc, #12]	; (8001188 <MX_TIM12_Init+0xd8>)
 800117a:	f000 fc15 	bl	80019a8 <HAL_TIM_MspPostInit>

}
 800117e:	bf00      	nop
 8001180:	3730      	adds	r7, #48	; 0x30
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20006c80 	.word	0x20006c80
 800118c:	40001800 	.word	0x40001800

08001190 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_UART4_Init+0x4c>)
 8001196:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <MX_UART4_Init+0x50>)
 8001198:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <MX_UART4_Init+0x4c>)
 800119c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011a0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_UART4_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_UART4_Init+0x4c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <MX_UART4_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_UART4_Init+0x4c>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <MX_UART4_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_UART4_Init+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_UART4_Init+0x4c>)
 80011c8:	f007 fc24 	bl	8008a14 <HAL_UART_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80011d2:	f000 f96f 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20006b98 	.word	0x20006b98
 80011e0:	40004c00 	.word	0x40004c00

080011e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_DMA_Init+0x3c>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <MX_DMA_Init+0x3c>)
 80011f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_DMA_Init+0x3c>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 7, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2107      	movs	r1, #7
 800120a:	2038      	movs	r0, #56	; 0x38
 800120c:	f001 fb22 	bl	8002854 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001210:	2038      	movs	r0, #56	; 0x38
 8001212:	f001 fb3b 	bl	800288c <HAL_NVIC_EnableIRQ>

}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800

08001224 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08c      	sub	sp, #48	; 0x30
 8001228:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
 800123e:	4b65      	ldr	r3, [pc, #404]	; (80013d4 <MX_GPIO_Init+0x1b0>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a64      	ldr	r2, [pc, #400]	; (80013d4 <MX_GPIO_Init+0x1b0>)
 8001244:	f043 0310 	orr.w	r3, r3, #16
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b62      	ldr	r3, [pc, #392]	; (80013d4 <MX_GPIO_Init+0x1b0>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0310 	and.w	r3, r3, #16
 8001252:	61bb      	str	r3, [r7, #24]
 8001254:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	4b5e      	ldr	r3, [pc, #376]	; (80013d4 <MX_GPIO_Init+0x1b0>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a5d      	ldr	r2, [pc, #372]	; (80013d4 <MX_GPIO_Init+0x1b0>)
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b5b      	ldr	r3, [pc, #364]	; (80013d4 <MX_GPIO_Init+0x1b0>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	4b57      	ldr	r3, [pc, #348]	; (80013d4 <MX_GPIO_Init+0x1b0>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a56      	ldr	r2, [pc, #344]	; (80013d4 <MX_GPIO_Init+0x1b0>)
 800127c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b54      	ldr	r3, [pc, #336]	; (80013d4 <MX_GPIO_Init+0x1b0>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b50      	ldr	r3, [pc, #320]	; (80013d4 <MX_GPIO_Init+0x1b0>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a4f      	ldr	r2, [pc, #316]	; (80013d4 <MX_GPIO_Init+0x1b0>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b4d      	ldr	r3, [pc, #308]	; (80013d4 <MX_GPIO_Init+0x1b0>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	4b49      	ldr	r3, [pc, #292]	; (80013d4 <MX_GPIO_Init+0x1b0>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a48      	ldr	r2, [pc, #288]	; (80013d4 <MX_GPIO_Init+0x1b0>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b46      	ldr	r3, [pc, #280]	; (80013d4 <MX_GPIO_Init+0x1b0>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b42      	ldr	r3, [pc, #264]	; (80013d4 <MX_GPIO_Init+0x1b0>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a41      	ldr	r2, [pc, #260]	; (80013d4 <MX_GPIO_Init+0x1b0>)
 80012d0:	f043 0308 	orr.w	r3, r3, #8
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b3f      	ldr	r3, [pc, #252]	; (80013d4 <MX_GPIO_Init+0x1b0>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0308 	and.w	r3, r3, #8
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VOLT_4_SEL0_Pin|VOLT_4_SEL1_Pin|VOLT_4_SEL2_Pin|TURN3A_Pin
 80012e2:	2200      	movs	r2, #0
 80012e4:	f249 116f 	movw	r1, #37231	; 0x916f
 80012e8:	483b      	ldr	r0, [pc, #236]	; (80013d8 <MX_GPIO_Init+0x1b4>)
 80012ea:	f002 f815 	bl	8003318 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_15|TURN2A_Pin
                          |TURN2B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TURN3B_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80012f4:	4839      	ldr	r0, [pc, #228]	; (80013dc <MX_GPIO_Init+0x1b8>)
 80012f6:	f002 f80f 	bl	8003318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	f248 6140 	movw	r1, #34368	; 0x8640
 8001300:	4837      	ldr	r0, [pc, #220]	; (80013e0 <MX_GPIO_Init+0x1bc>)
 8001302:	f002 f809 	bl	8003318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|VOLT_3_SEL0_Pin|GPIO_PIN_13|TURN1B_Pin
 8001306:	2200      	movs	r2, #0
 8001308:	f243 3134 	movw	r1, #13108	; 0x3334
 800130c:	4835      	ldr	r0, [pc, #212]	; (80013e4 <MX_GPIO_Init+0x1c0>)
 800130e:	f002 f803 	bl	8003318 <HAL_GPIO_WritePin>
                          |TURN1A_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, VOLT_2_SEL2_Pin|VOLT_3_SEL0D9_Pin|VOLT_3_SEL1_Pin|VOLT_3_SEL2_Pin
 8001312:	2200      	movs	r2, #0
 8001314:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001318:	4833      	ldr	r0, [pc, #204]	; (80013e8 <MX_GPIO_Init+0x1c4>)
 800131a:	f001 fffd 	bl	8003318 <HAL_GPIO_WritePin>
                          |VOLT_1_SEL1_Pin|VOLT_1_SEL2_Pin|VOLT_2_SEL0_Pin|VOLT_2_SEL1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : VOLT_4_SEL0_Pin VOLT_4_SEL1_Pin VOLT_4_SEL2_Pin TURN3A_Pin
                           PE8 PE12 PE15 TURN2A_Pin
                           TURN2B_Pin */
  GPIO_InitStruct.Pin = VOLT_4_SEL0_Pin|VOLT_4_SEL1_Pin|VOLT_4_SEL2_Pin|TURN3A_Pin
 800131e:	f249 136f 	movw	r3, #37231	; 0x916f
 8001322:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_15|TURN2A_Pin
                          |TURN2B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001324:	2301      	movs	r3, #1
 8001326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	4619      	mov	r1, r3
 8001336:	4828      	ldr	r0, [pc, #160]	; (80013d8 <MX_GPIO_Init+0x1b4>)
 8001338:	f001 fe54 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 800133c:	2310      	movs	r3, #16
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001344:	2301      	movs	r3, #1
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4619      	mov	r1, r3
 800134e:	4822      	ldr	r0, [pc, #136]	; (80013d8 <MX_GPIO_Init+0x1b4>)
 8001350:	f001 fe48 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TURN3B_Pin PC12 */
  GPIO_InitStruct.Pin = TURN3B_Pin|GPIO_PIN_12;
 8001354:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135a:	2301      	movs	r3, #1
 800135c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	4619      	mov	r1, r3
 800136c:	481b      	ldr	r0, [pc, #108]	; (80013dc <MX_GPIO_Init+0x1b8>)
 800136e:	f001 fe39 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = LED1_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 8001372:	f248 6340 	movw	r3, #34368	; 0x8640
 8001376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	2301      	movs	r3, #1
 800137a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	4619      	mov	r1, r3
 800138a:	4815      	ldr	r0, [pc, #84]	; (80013e0 <MX_GPIO_Init+0x1bc>)
 800138c:	f001 fe2a 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 VOLT_3_SEL0_Pin PB13 TURN1B_Pin
                           TURN1A_Pin PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|VOLT_3_SEL0_Pin|GPIO_PIN_13|TURN1B_Pin
 8001390:	f243 3334 	movw	r3, #13108	; 0x3334
 8001394:	61fb      	str	r3, [r7, #28]
                          |TURN1A_Pin|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001396:	2301      	movs	r3, #1
 8001398:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4619      	mov	r1, r3
 80013a8:	480e      	ldr	r0, [pc, #56]	; (80013e4 <MX_GPIO_Init+0x1c0>)
 80013aa:	f001 fe1b 	bl	8002fe4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VOLT_2_SEL2_Pin VOLT_3_SEL0D9_Pin VOLT_3_SEL1_Pin VOLT_3_SEL2_Pin
                           VOLT_0_SEL0_Pin VOLT_0_SEL1_Pin VOLT_0_SEL2_Pin VOLT_1_SEL0_Pin
                           VOLT_1_SEL1_Pin VOLT_1_SEL2_Pin VOLT_2_SEL0_Pin VOLT_2_SEL1_Pin */
  GPIO_InitStruct.Pin = VOLT_2_SEL2_Pin|VOLT_3_SEL0D9_Pin|VOLT_3_SEL1_Pin|VOLT_3_SEL2_Pin
 80013ae:	f640 73ff 	movw	r3, #4095	; 0xfff
 80013b2:	61fb      	str	r3, [r7, #28]
                          |VOLT_0_SEL0_Pin|VOLT_0_SEL1_Pin|VOLT_0_SEL2_Pin|VOLT_1_SEL0_Pin
                          |VOLT_1_SEL1_Pin|VOLT_1_SEL2_Pin|VOLT_2_SEL0_Pin|VOLT_2_SEL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	4619      	mov	r1, r3
 80013c6:	4808      	ldr	r0, [pc, #32]	; (80013e8 <MX_GPIO_Init+0x1c4>)
 80013c8:	f001 fe0c 	bl	8002fe4 <HAL_GPIO_Init>

}
 80013cc:	bf00      	nop
 80013ce:	3730      	adds	r7, #48	; 0x30
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40020800 	.word	0x40020800
 80013e0:	40020000 	.word	0x40020000
 80013e4:	40020400 	.word	0x40020400
 80013e8:	40020c00 	.word	0x40020c00

080013ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af02      	add	r7, sp, #8
 80013f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a25      	ldr	r2, [pc, #148]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d101      	bne.n	8001402 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013fe:	f000 fd59 	bl	8001eb4 <HAL_IncTick>
		  xTaskNotifyFromISR(uiTaskHandle, NOTIF_TICKUI, eSetBits, &higher);
		  portYIELD_FROM_ISR(higher);
	  }
  }
  */
  if (htim->Instance == TIM8) {
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a23      	ldr	r2, [pc, #140]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d104      	bne.n	8001416 <HAL_TIM_PeriodElapsedCallback+0x2a>
		  ina3221_trigger_conversion();
		  //BaseType_t higher=0;
		  //xTaskNotifyFromISR(ctrlTaskHandle, NOTIF_TIM8, eSetBits, &higher);
		  //portYIELD_FROM_ISR(higher);
	  } else {
		  itm_debug1(DBG_TIM, "tim8",0);
 800140c:	2200      	movs	r2, #0
 800140e:	4922      	ldr	r1, [pc, #136]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001410:	2001      	movs	r0, #1
 8001412:	f7ff f901 	bl	8000618 <itm_debug1>
	  }
  }
  if (htim->Instance == TIM1) {
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a20      	ldr	r2, [pc, #128]	; (800149c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d132      	bne.n	8001486 <HAL_TIM_PeriodElapsedCallback+0x9a>
	  uint32_t t1 = __HAL_TIM_GET_COUNTER(&htim1);
 8001420:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	60fb      	str	r3, [r7, #12]
	  if (/*1||*/ (t1<50)) {
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2b31      	cmp	r3, #49	; 0x31
 800142c:	d82b      	bhi.n	8001486 <HAL_TIM_PeriodElapsedCallback+0x9a>
		  static uint32_t cnt = 0;
		  itm_debug2(DBG_TIM|DBG_INA3221, "tim1",cnt, t1);
 800142e:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	491c      	ldr	r1, [pc, #112]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001438:	2021      	movs	r0, #33	; 0x21
 800143a:	f7ff f907 	bl	800064c <itm_debug2>
		  cnt++;
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	3301      	adds	r3, #1
 8001444:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001446:	6013      	str	r3, [r2, #0]
#if INA3221_TASK
		  BaseType_t higher=0;
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
		  xTaskNotifyFromISR(ina3221_taskHandle, (cnt%2) ? NOTIF_INA_READ : NOTIF_INA_TRIG, eSetBits, &higher);
 800144c:	4b17      	ldr	r3, [pc, #92]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800144e:	6818      	ldr	r0, [r3, #0]
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_TIM_PeriodElapsedCallback+0x74>
 800145c:	2108      	movs	r1, #8
 800145e:	e000      	b.n	8001462 <HAL_TIM_PeriodElapsedCallback+0x76>
 8001460:	2104      	movs	r1, #4
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	2300      	movs	r3, #0
 800146a:	2201      	movs	r2, #1
 800146c:	f00d fa30 	bl	800e8d0 <xTaskGenericNotifyFromISR>
		  portYIELD_FROM_ISR(higher);
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d007      	beq.n	8001486 <HAL_TIM_PeriodElapsedCallback+0x9a>
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	f3bf 8f4f 	dsb	sy
 8001482:	f3bf 8f6f 	isb	sy
		  ina3221_trigger_conversion();
#endif
	  }
  }
  /* USER CODE END Callback 1 */
}
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40001400 	.word	0x40001400
 8001494:	40010400 	.word	0x40010400
 8001498:	08016c00 	.word	0x08016c00
 800149c:	40010000 	.word	0x40010000
 80014a0:	200066f0 	.word	0x200066f0
 80014a4:	20000618 	.word	0x20000618
 80014a8:	08016c08 	.word	0x08016c08
 80014ac:	20006c7c 	.word	0x20006c7c
 80014b0:	e000ed04 	.word	0xe000ed04

080014b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	for (;;) {
 80014b8:	e7fe      	b.n	80014b8 <Error_Handler+0x4>
	...

080014bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <HAL_MspInit+0x4c>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <HAL_MspInit+0x4c>)
 80014cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d0:	6453      	str	r3, [r2, #68]	; 0x44
 80014d2:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <HAL_MspInit+0x4c>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	603b      	str	r3, [r7, #0]
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_MspInit+0x4c>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	4a08      	ldr	r2, [pc, #32]	; (8001508 <HAL_MspInit+0x4c>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ec:	6413      	str	r3, [r2, #64]	; 0x40
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_MspInit+0x4c>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800

0800150c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08c      	sub	sp, #48	; 0x30
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a4a      	ldr	r2, [pc, #296]	; (8001654 <HAL_ADC_MspInit+0x148>)
 800152a:	4293      	cmp	r3, r2
 800152c:	f040 808d 	bne.w	800164a <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001530:	2300      	movs	r3, #0
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	4b48      	ldr	r3, [pc, #288]	; (8001658 <HAL_ADC_MspInit+0x14c>)
 8001536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001538:	4a47      	ldr	r2, [pc, #284]	; (8001658 <HAL_ADC_MspInit+0x14c>)
 800153a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153e:	6453      	str	r3, [r2, #68]	; 0x44
 8001540:	4b45      	ldr	r3, [pc, #276]	; (8001658 <HAL_ADC_MspInit+0x14c>)
 8001542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001548:	61bb      	str	r3, [r7, #24]
 800154a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	4b41      	ldr	r3, [pc, #260]	; (8001658 <HAL_ADC_MspInit+0x14c>)
 8001552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001554:	4a40      	ldr	r2, [pc, #256]	; (8001658 <HAL_ADC_MspInit+0x14c>)
 8001556:	f043 0304 	orr.w	r3, r3, #4
 800155a:	6313      	str	r3, [r2, #48]	; 0x30
 800155c:	4b3e      	ldr	r3, [pc, #248]	; (8001658 <HAL_ADC_MspInit+0x14c>)
 800155e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001568:	2300      	movs	r3, #0
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	4b3a      	ldr	r3, [pc, #232]	; (8001658 <HAL_ADC_MspInit+0x14c>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001570:	4a39      	ldr	r2, [pc, #228]	; (8001658 <HAL_ADC_MspInit+0x14c>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	6313      	str	r3, [r2, #48]	; 0x30
 8001578:	4b37      	ldr	r3, [pc, #220]	; (8001658 <HAL_ADC_MspInit+0x14c>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	4b33      	ldr	r3, [pc, #204]	; (8001658 <HAL_ADC_MspInit+0x14c>)
 800158a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158c:	4a32      	ldr	r2, [pc, #200]	; (8001658 <HAL_ADC_MspInit+0x14c>)
 800158e:	f043 0302 	orr.w	r3, r3, #2
 8001592:	6313      	str	r3, [r2, #48]	; 0x30
 8001594:	4b30      	ldr	r3, [pc, #192]	; (8001658 <HAL_ADC_MspInit+0x14c>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC_4_V0_Pin|ADC_4_V1_Pin|GPIO_PIN_2|GPIO_PIN_3
 80015a0:	231f      	movs	r3, #31
 80015a2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015a4:	2303      	movs	r3, #3
 80015a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ac:	f107 031c 	add.w	r3, r7, #28
 80015b0:	4619      	mov	r1, r3
 80015b2:	482a      	ldr	r0, [pc, #168]	; (800165c <HAL_ADC_MspInit+0x150>)
 80015b4:	f001 fd16 	bl	8002fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|ADC_1_V0_Pin|GPIO_PIN_3
 80015b8:	233f      	movs	r3, #63	; 0x3f
 80015ba:	61fb      	str	r3, [r7, #28]
                          |ADC_2_V0_Pin|ADC_2_V1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015bc:	2303      	movs	r3, #3
 80015be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	4619      	mov	r1, r3
 80015ca:	4825      	ldr	r0, [pc, #148]	; (8001660 <HAL_ADC_MspInit+0x154>)
 80015cc:	f001 fd0a 	bl	8002fe4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_3_V1_Pin;
 80015d0:	2301      	movs	r3, #1
 80015d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d4:	2303      	movs	r3, #3
 80015d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_3_V1_GPIO_Port, &GPIO_InitStruct);
 80015dc:	f107 031c 	add.w	r3, r7, #28
 80015e0:	4619      	mov	r1, r3
 80015e2:	4820      	ldr	r0, [pc, #128]	; (8001664 <HAL_ADC_MspInit+0x158>)
 80015e4:	f001 fcfe 	bl	8002fe4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80015e8:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <HAL_ADC_MspInit+0x15c>)
 80015ea:	4a20      	ldr	r2, [pc, #128]	; (800166c <HAL_ADC_MspInit+0x160>)
 80015ec:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80015ee:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <HAL_ADC_MspInit+0x15c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015f4:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <HAL_ADC_MspInit+0x15c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015fa:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <HAL_ADC_MspInit+0x15c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001600:	4b19      	ldr	r3, [pc, #100]	; (8001668 <HAL_ADC_MspInit+0x15c>)
 8001602:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001606:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001608:	4b17      	ldr	r3, [pc, #92]	; (8001668 <HAL_ADC_MspInit+0x15c>)
 800160a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800160e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001610:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_ADC_MspInit+0x15c>)
 8001612:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001616:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <HAL_ADC_MspInit+0x15c>)
 800161a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800161e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <HAL_ADC_MspInit+0x15c>)
 8001622:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001626:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_ADC_MspInit+0x15c>)
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800162e:	480e      	ldr	r0, [pc, #56]	; (8001668 <HAL_ADC_MspInit+0x15c>)
 8001630:	f001 f93a 	bl	80028a8 <HAL_DMA_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 800163a:	f7ff ff3b 	bl	80014b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a09      	ldr	r2, [pc, #36]	; (8001668 <HAL_ADC_MspInit+0x15c>)
 8001642:	639a      	str	r2, [r3, #56]	; 0x38
 8001644:	4a08      	ldr	r2, [pc, #32]	; (8001668 <HAL_ADC_MspInit+0x15c>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800164a:	bf00      	nop
 800164c:	3730      	adds	r7, #48	; 0x30
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40012000 	.word	0x40012000
 8001658:	40023800 	.word	0x40023800
 800165c:	40020800 	.word	0x40020800
 8001660:	40020000 	.word	0x40020000
 8001664:	40020400 	.word	0x40020400
 8001668:	20006270 	.word	0x20006270
 800166c:	40026410 	.word	0x40026410

08001670 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08c      	sub	sp, #48	; 0x30
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a52      	ldr	r2, [pc, #328]	; (80017d8 <HAL_I2C_MspInit+0x168>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d13c      	bne.n	800170c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	61bb      	str	r3, [r7, #24]
 8001696:	4b51      	ldr	r3, [pc, #324]	; (80017dc <HAL_I2C_MspInit+0x16c>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	4a50      	ldr	r2, [pc, #320]	; (80017dc <HAL_I2C_MspInit+0x16c>)
 800169c:	f043 0302 	orr.w	r3, r3, #2
 80016a0:	6313      	str	r3, [r2, #48]	; 0x30
 80016a2:	4b4e      	ldr	r3, [pc, #312]	; (80017dc <HAL_I2C_MspInit+0x16c>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	61bb      	str	r3, [r7, #24]
 80016ac:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016ae:	23c0      	movs	r3, #192	; 0xc0
 80016b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b2:	2312      	movs	r3, #18
 80016b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b6:	2301      	movs	r3, #1
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ba:	2303      	movs	r3, #3
 80016bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016be:	2304      	movs	r3, #4
 80016c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c2:	f107 031c 	add.w	r3, r7, #28
 80016c6:	4619      	mov	r1, r3
 80016c8:	4845      	ldr	r0, [pc, #276]	; (80017e0 <HAL_I2C_MspInit+0x170>)
 80016ca:	f001 fc8b 	bl	8002fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	4b42      	ldr	r3, [pc, #264]	; (80017dc <HAL_I2C_MspInit+0x16c>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a41      	ldr	r2, [pc, #260]	; (80017dc <HAL_I2C_MspInit+0x16c>)
 80016d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b3f      	ldr	r3, [pc, #252]	; (80017dc <HAL_I2C_MspInit+0x16c>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2100      	movs	r1, #0
 80016ee:	201f      	movs	r0, #31
 80016f0:	f001 f8b0 	bl	8002854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80016f4:	201f      	movs	r0, #31
 80016f6:	f001 f8c9 	bl	800288c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2100      	movs	r1, #0
 80016fe:	2020      	movs	r0, #32
 8001700:	f001 f8a8 	bl	8002854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001704:	2020      	movs	r0, #32
 8001706:	f001 f8c1 	bl	800288c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800170a:	e060      	b.n	80017ce <HAL_I2C_MspInit+0x15e>
  else if(hi2c->Instance==I2C3)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a34      	ldr	r2, [pc, #208]	; (80017e4 <HAL_I2C_MspInit+0x174>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d15b      	bne.n	80017ce <HAL_I2C_MspInit+0x15e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	4b30      	ldr	r3, [pc, #192]	; (80017dc <HAL_I2C_MspInit+0x16c>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a2f      	ldr	r2, [pc, #188]	; (80017dc <HAL_I2C_MspInit+0x16c>)
 8001720:	f043 0304 	orr.w	r3, r3, #4
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b2d      	ldr	r3, [pc, #180]	; (80017dc <HAL_I2C_MspInit+0x16c>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0304 	and.w	r3, r3, #4
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	4b29      	ldr	r3, [pc, #164]	; (80017dc <HAL_I2C_MspInit+0x16c>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a28      	ldr	r2, [pc, #160]	; (80017dc <HAL_I2C_MspInit+0x16c>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b26      	ldr	r3, [pc, #152]	; (80017dc <HAL_I2C_MspInit+0x16c>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800174e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001754:	2312      	movs	r3, #18
 8001756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001758:	2301      	movs	r3, #1
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175c:	2303      	movs	r3, #3
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001760:	2304      	movs	r3, #4
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	4619      	mov	r1, r3
 800176a:	481f      	ldr	r0, [pc, #124]	; (80017e8 <HAL_I2C_MspInit+0x178>)
 800176c:	f001 fc3a 	bl	8002fe4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001770:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001776:	2312      	movs	r3, #18
 8001778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800177a:	2301      	movs	r3, #1
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177e:	2303      	movs	r3, #3
 8001780:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001782:	2304      	movs	r3, #4
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	f107 031c 	add.w	r3, r7, #28
 800178a:	4619      	mov	r1, r3
 800178c:	4817      	ldr	r0, [pc, #92]	; (80017ec <HAL_I2C_MspInit+0x17c>)
 800178e:	f001 fc29 	bl	8002fe4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <HAL_I2C_MspInit+0x16c>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	4a10      	ldr	r2, [pc, #64]	; (80017dc <HAL_I2C_MspInit+0x16c>)
 800179c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017a0:	6413      	str	r3, [r2, #64]	; 0x40
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_I2C_MspInit+0x16c>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2105      	movs	r1, #5
 80017b2:	2048      	movs	r0, #72	; 0x48
 80017b4:	f001 f84e 	bl	8002854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80017b8:	2048      	movs	r0, #72	; 0x48
 80017ba:	f001 f867 	bl	800288c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2105      	movs	r1, #5
 80017c2:	2049      	movs	r0, #73	; 0x49
 80017c4:	f001 f846 	bl	8002854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80017c8:	2049      	movs	r0, #73	; 0x49
 80017ca:	f001 f85f 	bl	800288c <HAL_NVIC_EnableIRQ>
}
 80017ce:	bf00      	nop
 80017d0:	3730      	adds	r7, #48	; 0x30
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40005400 	.word	0x40005400
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020400 	.word	0x40020400
 80017e4:	40005c00 	.word	0x40005c00
 80017e8:	40020800 	.word	0x40020800
 80017ec:	40020000 	.word	0x40020000

080017f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a05      	ldr	r2, [pc, #20]	; (8001814 <HAL_RTC_MspInit+0x24>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d102      	bne.n	8001808 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001802:	4b05      	ldr	r3, [pc, #20]	; (8001818 <HAL_RTC_MspInit+0x28>)
 8001804:	2201      	movs	r2, #1
 8001806:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	40002800 	.word	0x40002800
 8001818:	42470e3c 	.word	0x42470e3c

0800181c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a36      	ldr	r2, [pc, #216]	; (8001904 <HAL_TIM_Base_MspInit+0xe8>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d116      	bne.n	800185c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
 8001832:	4b35      	ldr	r3, [pc, #212]	; (8001908 <HAL_TIM_Base_MspInit+0xec>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	4a34      	ldr	r2, [pc, #208]	; (8001908 <HAL_TIM_Base_MspInit+0xec>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6453      	str	r3, [r2, #68]	; 0x44
 800183e:	4b32      	ldr	r3, [pc, #200]	; (8001908 <HAL_TIM_Base_MspInit+0xec>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	61fb      	str	r3, [r7, #28]
 8001848:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 7, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2107      	movs	r1, #7
 800184e:	2019      	movs	r0, #25
 8001850:	f001 f800 	bl	8002854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001854:	2019      	movs	r0, #25
 8001856:	f001 f819 	bl	800288c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800185a:	e04e      	b.n	80018fa <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001864:	d10e      	bne.n	8001884 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	61bb      	str	r3, [r7, #24]
 800186a:	4b27      	ldr	r3, [pc, #156]	; (8001908 <HAL_TIM_Base_MspInit+0xec>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	4a26      	ldr	r2, [pc, #152]	; (8001908 <HAL_TIM_Base_MspInit+0xec>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6413      	str	r3, [r2, #64]	; 0x40
 8001876:	4b24      	ldr	r3, [pc, #144]	; (8001908 <HAL_TIM_Base_MspInit+0xec>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	61bb      	str	r3, [r7, #24]
 8001880:	69bb      	ldr	r3, [r7, #24]
}
 8001882:	e03a      	b.n	80018fa <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a20      	ldr	r2, [pc, #128]	; (800190c <HAL_TIM_Base_MspInit+0xf0>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d10e      	bne.n	80018ac <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <HAL_TIM_Base_MspInit+0xec>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	4a1c      	ldr	r2, [pc, #112]	; (8001908 <HAL_TIM_Base_MspInit+0xec>)
 8001898:	f043 0302 	orr.w	r3, r3, #2
 800189c:	6413      	str	r3, [r2, #64]	; 0x40
 800189e:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <HAL_TIM_Base_MspInit+0xec>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	697b      	ldr	r3, [r7, #20]
}
 80018aa:	e026      	b.n	80018fa <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM8)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a17      	ldr	r2, [pc, #92]	; (8001910 <HAL_TIM_Base_MspInit+0xf4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d10e      	bne.n	80018d4 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	4b13      	ldr	r3, [pc, #76]	; (8001908 <HAL_TIM_Base_MspInit+0xec>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	4a12      	ldr	r2, [pc, #72]	; (8001908 <HAL_TIM_Base_MspInit+0xec>)
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	6453      	str	r3, [r2, #68]	; 0x44
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <HAL_TIM_Base_MspInit+0xec>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]
}
 80018d2:	e012      	b.n	80018fa <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM12)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a0e      	ldr	r2, [pc, #56]	; (8001914 <HAL_TIM_Base_MspInit+0xf8>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d10d      	bne.n	80018fa <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_TIM_Base_MspInit+0xec>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	4a08      	ldr	r2, [pc, #32]	; (8001908 <HAL_TIM_Base_MspInit+0xec>)
 80018e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018ec:	6413      	str	r3, [r2, #64]	; 0x40
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_TIM_Base_MspInit+0xec>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
}
 80018fa:	bf00      	nop
 80018fc:	3720      	adds	r7, #32
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40010000 	.word	0x40010000
 8001908:	40023800 	.word	0x40023800
 800190c:	40000400 	.word	0x40000400
 8001910:	40010400 	.word	0x40010400
 8001914:	40001800 	.word	0x40001800

08001918 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a19      	ldr	r2, [pc, #100]	; (800199c <HAL_TIM_Encoder_MspInit+0x84>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d12c      	bne.n	8001994 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	4a17      	ldr	r2, [pc, #92]	; (80019a0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001944:	f043 0304 	orr.w	r3, r3, #4
 8001948:	6413      	str	r3, [r2, #64]	; 0x40
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <HAL_TIM_Encoder_MspInit+0x88>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <HAL_TIM_Encoder_MspInit+0x88>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a10      	ldr	r2, [pc, #64]	; (80019a0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001960:	f043 0308 	orr.w	r3, r3, #8
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ROT1_Pin|ROT2_Pin;
 8001972:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800197c:	2301      	movs	r3, #1
 800197e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001984:	2302      	movs	r3, #2
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	4805      	ldr	r0, [pc, #20]	; (80019a4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001990:	f001 fb28 	bl	8002fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001994:	bf00      	nop
 8001996:	3728      	adds	r7, #40	; 0x28
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40000800 	.word	0x40000800
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020c00 	.word	0x40020c00

080019a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08c      	sub	sp, #48	; 0x30
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 031c 	add.w	r3, r7, #28
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a59      	ldr	r2, [pc, #356]	; (8001b2c <HAL_TIM_MspPostInit+0x184>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d11f      	bne.n	8001a0a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	61bb      	str	r3, [r7, #24]
 80019ce:	4b58      	ldr	r3, [pc, #352]	; (8001b30 <HAL_TIM_MspPostInit+0x188>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a57      	ldr	r2, [pc, #348]	; (8001b30 <HAL_TIM_MspPostInit+0x188>)
 80019d4:	f043 0310 	orr.w	r3, r3, #16
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b55      	ldr	r3, [pc, #340]	; (8001b30 <HAL_TIM_MspPostInit+0x188>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0310 	and.w	r3, r3, #16
 80019e2:	61bb      	str	r3, [r7, #24]
 80019e4:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_0_1_Pin|PWM_0_1E11_Pin|PWM_1_0_Pin|PWM_1_1_Pin;
 80019e6:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80019ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ec:	2302      	movs	r3, #2
 80019ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80019f4:	2301      	movs	r3, #1
 80019f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019f8:	2301      	movs	r3, #1
 80019fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019fc:	f107 031c 	add.w	r3, r7, #28
 8001a00:	4619      	mov	r1, r3
 8001a02:	484c      	ldr	r0, [pc, #304]	; (8001b34 <HAL_TIM_MspPostInit+0x18c>)
 8001a04:	f001 faee 	bl	8002fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001a08:	e08b      	b.n	8001b22 <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM2)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a12:	d11f      	bne.n	8001a54 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	4b45      	ldr	r3, [pc, #276]	; (8001b30 <HAL_TIM_MspPostInit+0x188>)
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1c:	4a44      	ldr	r2, [pc, #272]	; (8001b30 <HAL_TIM_MspPostInit+0x188>)
 8001a1e:	f043 0302 	orr.w	r3, r3, #2
 8001a22:	6313      	str	r3, [r2, #48]	; 0x30
 8001a24:	4b42      	ldr	r3, [pc, #264]	; (8001b30 <HAL_TIM_MspPostInit+0x188>)
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_2_0_Pin|PWM_2_1_Pin;
 8001a30:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a42:	2301      	movs	r3, #1
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a46:	f107 031c 	add.w	r3, r7, #28
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	483a      	ldr	r0, [pc, #232]	; (8001b38 <HAL_TIM_MspPostInit+0x190>)
 8001a4e:	f001 fac9 	bl	8002fe4 <HAL_GPIO_Init>
}
 8001a52:	e066      	b.n	8001b22 <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM3)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a38      	ldr	r2, [pc, #224]	; (8001b3c <HAL_TIM_MspPostInit+0x194>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d13d      	bne.n	8001ada <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	4b33      	ldr	r3, [pc, #204]	; (8001b30 <HAL_TIM_MspPostInit+0x188>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a32      	ldr	r2, [pc, #200]	; (8001b30 <HAL_TIM_MspPostInit+0x188>)
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b30      	ldr	r3, [pc, #192]	; (8001b30 <HAL_TIM_MspPostInit+0x188>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b2c      	ldr	r3, [pc, #176]	; (8001b30 <HAL_TIM_MspPostInit+0x188>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a2b      	ldr	r2, [pc, #172]	; (8001b30 <HAL_TIM_MspPostInit+0x188>)
 8001a84:	f043 0304 	orr.w	r3, r3, #4
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b29      	ldr	r3, [pc, #164]	; (8001b30 <HAL_TIM_MspPostInit+0x188>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_4_1_Pin;
 8001a96:	2302      	movs	r3, #2
 8001a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM_4_1_GPIO_Port, &GPIO_InitStruct);
 8001aaa:	f107 031c 	add.w	r3, r7, #28
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4821      	ldr	r0, [pc, #132]	; (8001b38 <HAL_TIM_MspPostInit+0x190>)
 8001ab2:	f001 fa97 	bl	8002fe4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_3_0_Pin|PWM_3_1_Pin|PWM_4_0_Pin;
 8001ab6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001acc:	f107 031c 	add.w	r3, r7, #28
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	481b      	ldr	r0, [pc, #108]	; (8001b40 <HAL_TIM_MspPostInit+0x198>)
 8001ad4:	f001 fa86 	bl	8002fe4 <HAL_GPIO_Init>
}
 8001ad8:	e023      	b.n	8001b22 <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM12)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a19      	ldr	r2, [pc, #100]	; (8001b44 <HAL_TIM_MspPostInit+0x19c>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d11e      	bne.n	8001b22 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <HAL_TIM_MspPostInit+0x188>)
 8001aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aec:	4a10      	ldr	r2, [pc, #64]	; (8001b30 <HAL_TIM_MspPostInit+0x188>)
 8001aee:	f043 0302 	orr.w	r3, r3, #2
 8001af2:	6313      	str	r3, [r2, #48]	; 0x30
 8001af4:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <HAL_TIM_MspPostInit+0x188>)
 8001af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_5_0_Pin|PWM_5_1_Pin;
 8001b00:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001b12:	2309      	movs	r3, #9
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4806      	ldr	r0, [pc, #24]	; (8001b38 <HAL_TIM_MspPostInit+0x190>)
 8001b1e:	f001 fa61 	bl	8002fe4 <HAL_GPIO_Init>
}
 8001b22:	bf00      	nop
 8001b24:	3730      	adds	r7, #48	; 0x30
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40010000 	.word	0x40010000
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40020400 	.word	0x40020400
 8001b3c:	40000400 	.word	0x40000400
 8001b40:	40020800 	.word	0x40020800
 8001b44:	40001800 	.word	0x40001800

08001b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08a      	sub	sp, #40	; 0x28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a1d      	ldr	r2, [pc, #116]	; (8001bdc <HAL_UART_MspInit+0x94>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d134      	bne.n	8001bd4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <HAL_UART_MspInit+0x98>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b72:	4a1b      	ldr	r2, [pc, #108]	; (8001be0 <HAL_UART_MspInit+0x98>)
 8001b74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b78:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7a:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <HAL_UART_MspInit+0x98>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <HAL_UART_MspInit+0x98>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <HAL_UART_MspInit+0x98>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_UART_MspInit+0x98>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ba2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bac:	2301      	movs	r3, #1
 8001bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001bb4:	2308      	movs	r3, #8
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4809      	ldr	r0, [pc, #36]	; (8001be4 <HAL_UART_MspInit+0x9c>)
 8001bc0:	f001 fa10 	bl	8002fe4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2105      	movs	r1, #5
 8001bc8:	2034      	movs	r0, #52	; 0x34
 8001bca:	f000 fe43 	bl	8002854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001bce:	2034      	movs	r0, #52	; 0x34
 8001bd0:	f000 fe5c 	bl	800288c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001bd4:	bf00      	nop
 8001bd6:	3728      	adds	r7, #40	; 0x28
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40004c00 	.word	0x40004c00
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40020800 	.word	0x40020800

08001be8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08c      	sub	sp, #48	; 0x30
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	2037      	movs	r0, #55	; 0x37
 8001bfe:	f000 fe29 	bl	8002854 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001c02:	2037      	movs	r0, #55	; 0x37
 8001c04:	f000 fe42 	bl	800288c <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <HAL_InitTick+0xa4>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c10:	4a1e      	ldr	r2, [pc, #120]	; (8001c8c <HAL_InitTick+0xa4>)
 8001c12:	f043 0320 	orr.w	r3, r3, #32
 8001c16:	6413      	str	r3, [r2, #64]	; 0x40
 8001c18:	4b1c      	ldr	r3, [pc, #112]	; (8001c8c <HAL_InitTick+0xa4>)
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	f003 0320 	and.w	r3, r3, #32
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c24:	f107 0210 	add.w	r2, r7, #16
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f005 fb86 	bl	8007340 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001c34:	f005 fb5c 	bl	80072f0 <HAL_RCC_GetPCLK1Freq>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c40:	4a13      	ldr	r2, [pc, #76]	; (8001c90 <HAL_InitTick+0xa8>)
 8001c42:	fba2 2303 	umull	r2, r3, r2, r3
 8001c46:	0c9b      	lsrs	r3, r3, #18
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <HAL_InitTick+0xac>)
 8001c4e:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <HAL_InitTick+0xb0>)
 8001c50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <HAL_InitTick+0xac>)
 8001c54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c58:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001c5a:	4a0e      	ldr	r2, [pc, #56]	; (8001c94 <HAL_InitTick+0xac>)
 8001c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001c60:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <HAL_InitTick+0xac>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c66:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_InitTick+0xac>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001c6c:	4809      	ldr	r0, [pc, #36]	; (8001c94 <HAL_InitTick+0xac>)
 8001c6e:	f005 fd60 	bl	8007732 <HAL_TIM_Base_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d104      	bne.n	8001c82 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001c78:	4806      	ldr	r0, [pc, #24]	; (8001c94 <HAL_InitTick+0xac>)
 8001c7a:	f005 fda9 	bl	80077d0 <HAL_TIM_Base_Start_IT>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	e000      	b.n	8001c84 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3730      	adds	r7, #48	; 0x30
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	431bde83 	.word	0x431bde83
 8001c94:	20006ec0 	.word	0x20006ec0
 8001c98:	40001400 	.word	0x40001400

08001c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cae:	e7fe      	b.n	8001cae <HardFault_Handler+0x4>

08001cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <MemManage_Handler+0x4>

08001cb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cba:	e7fe      	b.n	8001cba <BusFault_Handler+0x4>

08001cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <UsageFault_Handler+0x4>

08001cc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cd4:	4802      	ldr	r0, [pc, #8]	; (8001ce0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001cd6:	f005 ff34 	bl	8007b42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200066f0 	.word	0x200066f0

08001ce4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001ce8:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <I2C1_EV_IRQHandler+0x10>)
 8001cea:	f001 fe8f 	bl	8003a0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20005cd8 	.word	0x20005cd8

08001cf8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <I2C1_ER_IRQHandler+0x10>)
 8001cfe:	f001 fff2 	bl	8003ce6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20005cd8 	.word	0x20005cd8

08001d0c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001d10:	4802      	ldr	r0, [pc, #8]	; (8001d1c <UART4_IRQHandler+0x10>)
 8001d12:	f006 ff4d 	bl	8008bb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20006b98 	.word	0x20006b98

08001d20 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001d24:	4802      	ldr	r0, [pc, #8]	; (8001d30 <TIM7_IRQHandler+0x10>)
 8001d26:	f005 ff0c 	bl	8007b42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20006ec0 	.word	0x20006ec0

08001d34 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d38:	4802      	ldr	r0, [pc, #8]	; (8001d44 <DMA2_Stream0_IRQHandler+0x10>)
 8001d3a:	f000 fedd 	bl	8002af8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20006270 	.word	0x20006270

08001d48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d4c:	4802      	ldr	r0, [pc, #8]	; (8001d58 <OTG_FS_IRQHandler+0x10>)
 8001d4e:	f003 fe61 	bl	8005a14 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20008414 	.word	0x20008414

08001d5c <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001d60:	4802      	ldr	r0, [pc, #8]	; (8001d6c <I2C3_EV_IRQHandler+0x10>)
 8001d62:	f001 fe53 	bl	8003a0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	2000556c 	.word	0x2000556c

08001d70 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001d74:	4802      	ldr	r0, [pc, #8]	; (8001d80 <I2C3_ER_IRQHandler+0x10>)
 8001d76:	f001 ffb6 	bl	8003ce6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	2000556c 	.word	0x2000556c

08001d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d8c:	4a14      	ldr	r2, [pc, #80]	; (8001de0 <_sbrk+0x5c>)
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <_sbrk+0x60>)
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d98:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <_sbrk+0x64>)
 8001da2:	4a12      	ldr	r2, [pc, #72]	; (8001dec <_sbrk+0x68>)
 8001da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d207      	bcs.n	8001dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db4:	f014 fd82 	bl	80168bc <__errno>
 8001db8:	4602      	mov	r2, r0
 8001dba:	230c      	movs	r3, #12
 8001dbc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dc2:	e009      	b.n	8001dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <_sbrk+0x64>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <_sbrk+0x64>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <_sbrk+0x64>)
 8001dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20020000 	.word	0x20020000
 8001de4:	00000400 	.word	0x00000400
 8001de8:	2000061c 	.word	0x2000061c
 8001dec:	20008de0 	.word	0x20008de0

08001df0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <SystemInit+0x28>)
 8001df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfa:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <SystemInit+0x28>)
 8001dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e04:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <SystemInit+0x28>)
 8001e06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e0a:	609a      	str	r2, [r3, #8]
#endif
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e22:	e003      	b.n	8001e2c <LoopCopyDataInit>

08001e24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e2a:	3104      	adds	r1, #4

08001e2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e2c:	480b      	ldr	r0, [pc, #44]	; (8001e5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e2e:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e34:	d3f6      	bcc.n	8001e24 <CopyDataInit>
  ldr  r2, =_sbss
 8001e36:	4a0b      	ldr	r2, [pc, #44]	; (8001e64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e38:	e002      	b.n	8001e40 <LoopFillZerobss>

08001e3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e3c:	f842 3b04 	str.w	r3, [r2], #4

08001e40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e40:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e44:	d3f9      	bcc.n	8001e3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e46:	f7ff ffd3 	bl	8001df0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e4a:	f014 fd3d 	bl	80168c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e4e:	f7fe fc19 	bl	8000684 <main>
  bx  lr    
 8001e52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e54:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001e58:	08018c1c 	.word	0x08018c1c
  ldr  r0, =_sdata
 8001e5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e60:	200005a0 	.word	0x200005a0
  ldr  r2, =_sbss
 8001e64:	200005a0 	.word	0x200005a0
  ldr  r3, = _ebss
 8001e68:	20008de0 	.word	0x20008de0

08001e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e6c:	e7fe      	b.n	8001e6c <ADC_IRQHandler>
	...

08001e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <HAL_Init+0x40>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0d      	ldr	r2, [pc, #52]	; (8001eb0 <HAL_Init+0x40>)
 8001e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <HAL_Init+0x40>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <HAL_Init+0x40>)
 8001e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <HAL_Init+0x40>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <HAL_Init+0x40>)
 8001e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e98:	2003      	movs	r0, #3
 8001e9a:	f000 fcd0 	bl	800283e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f7ff fea2 	bl	8001be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea4:	f7ff fb0a 	bl	80014bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023c00 	.word	0x40023c00

08001eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_IncTick+0x20>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <HAL_IncTick+0x24>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <HAL_IncTick+0x24>)
 8001ec6:	6013      	str	r3, [r2, #0]
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	20000008 	.word	0x20000008
 8001ed8:	20006f00 	.word	0x20006f00

08001edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee0:	4b03      	ldr	r3, [pc, #12]	; (8001ef0 <HAL_GetTick+0x14>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20006f00 	.word	0x20006f00

08001ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001efc:	f7ff ffee 	bl	8001edc <HAL_GetTick>
 8001f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f0c:	d005      	beq.n	8001f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_Delay+0x40>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4413      	add	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f1a:	bf00      	nop
 8001f1c:	f7ff ffde 	bl	8001edc <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d8f7      	bhi.n	8001f1c <HAL_Delay+0x28>
  {
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000008 	.word	0x20000008

08001f38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e033      	b.n	8001fb6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d109      	bne.n	8001f6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff fad8 	bl	800150c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f003 0310 	and.w	r3, r3, #16
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d118      	bne.n	8001fa8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f7e:	f023 0302 	bic.w	r3, r3, #2
 8001f82:	f043 0202 	orr.w	r2, r3, #2
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 fa2c 	bl	80023e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	f023 0303 	bic.w	r3, r3, #3
 8001f9e:	f043 0201 	orr.w	r2, r3, #1
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	641a      	str	r2, [r3, #64]	; 0x40
 8001fa6:	e001      	b.n	8001fac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_Start_DMA+0x1e>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e0cc      	b.n	8002178 <HAL_ADC_Start_DMA+0x1b8>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d018      	beq.n	8002026 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002004:	4b5e      	ldr	r3, [pc, #376]	; (8002180 <HAL_ADC_Start_DMA+0x1c0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a5e      	ldr	r2, [pc, #376]	; (8002184 <HAL_ADC_Start_DMA+0x1c4>)
 800200a:	fba2 2303 	umull	r2, r3, r2, r3
 800200e:	0c9a      	lsrs	r2, r3, #18
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002018:	e002      	b.n	8002020 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	3b01      	subs	r3, #1
 800201e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f9      	bne.n	800201a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b01      	cmp	r3, #1
 8002032:	f040 80a0 	bne.w	8002176 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800203e:	f023 0301 	bic.w	r3, r3, #1
 8002042:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002054:	2b00      	cmp	r3, #0
 8002056:	d007      	beq.n	8002068 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002060:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002074:	d106      	bne.n	8002084 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	f023 0206 	bic.w	r2, r3, #6
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	645a      	str	r2, [r3, #68]	; 0x44
 8002082:	e002      	b.n	800208a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002092:	4b3d      	ldr	r3, [pc, #244]	; (8002188 <HAL_ADC_Start_DMA+0x1c8>)
 8002094:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209a:	4a3c      	ldr	r2, [pc, #240]	; (800218c <HAL_ADC_Start_DMA+0x1cc>)
 800209c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a2:	4a3b      	ldr	r2, [pc, #236]	; (8002190 <HAL_ADC_Start_DMA+0x1d0>)
 80020a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020aa:	4a3a      	ldr	r2, [pc, #232]	; (8002194 <HAL_ADC_Start_DMA+0x1d4>)
 80020ac:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020b6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80020c6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020d6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	334c      	adds	r3, #76	; 0x4c
 80020e2:	4619      	mov	r1, r3
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f000 fc8c 	bl	8002a04 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d12a      	bne.n	800214e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a26      	ldr	r2, [pc, #152]	; (8002198 <HAL_ADC_Start_DMA+0x1d8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d015      	beq.n	800212e <HAL_ADC_Start_DMA+0x16e>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a25      	ldr	r2, [pc, #148]	; (800219c <HAL_ADC_Start_DMA+0x1dc>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d105      	bne.n	8002118 <HAL_ADC_Start_DMA+0x158>
 800210c:	4b1e      	ldr	r3, [pc, #120]	; (8002188 <HAL_ADC_Start_DMA+0x1c8>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 031f 	and.w	r3, r3, #31
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00a      	beq.n	800212e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a20      	ldr	r2, [pc, #128]	; (80021a0 <HAL_ADC_Start_DMA+0x1e0>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d129      	bne.n	8002176 <HAL_ADC_Start_DMA+0x1b6>
 8002122:	4b19      	ldr	r3, [pc, #100]	; (8002188 <HAL_ADC_Start_DMA+0x1c8>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 031f 	and.w	r3, r3, #31
 800212a:	2b0f      	cmp	r3, #15
 800212c:	d823      	bhi.n	8002176 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d11c      	bne.n	8002176 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	e013      	b.n	8002176 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a11      	ldr	r2, [pc, #68]	; (8002198 <HAL_ADC_Start_DMA+0x1d8>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d10e      	bne.n	8002176 <HAL_ADC_Start_DMA+0x1b6>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d107      	bne.n	8002176 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002174:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000000 	.word	0x20000000
 8002184:	431bde83 	.word	0x431bde83
 8002188:	40012300 	.word	0x40012300
 800218c:	080025e1 	.word	0x080025e1
 8002190:	0800269b 	.word	0x0800269b
 8002194:	080026b7 	.word	0x080026b7
 8002198:	40012000 	.word	0x40012000
 800219c:	40012100 	.word	0x40012100
 80021a0:	40012200 	.word	0x40012200

080021a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x1c>
 80021bc:	2302      	movs	r3, #2
 80021be:	e105      	b.n	80023cc <HAL_ADC_ConfigChannel+0x228>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b09      	cmp	r3, #9
 80021ce:	d925      	bls.n	800221c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68d9      	ldr	r1, [r3, #12]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	461a      	mov	r2, r3
 80021de:	4613      	mov	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	3b1e      	subs	r3, #30
 80021e6:	2207      	movs	r2, #7
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43da      	mvns	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	400a      	ands	r2, r1
 80021f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68d9      	ldr	r1, [r3, #12]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	b29b      	uxth	r3, r3
 8002206:	4618      	mov	r0, r3
 8002208:	4603      	mov	r3, r0
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4403      	add	r3, r0
 800220e:	3b1e      	subs	r3, #30
 8002210:	409a      	lsls	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	e022      	b.n	8002262 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6919      	ldr	r1, [r3, #16]
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	b29b      	uxth	r3, r3
 8002228:	461a      	mov	r2, r3
 800222a:	4613      	mov	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4413      	add	r3, r2
 8002230:	2207      	movs	r2, #7
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43da      	mvns	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	400a      	ands	r2, r1
 800223e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6919      	ldr	r1, [r3, #16]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	b29b      	uxth	r3, r3
 8002250:	4618      	mov	r0, r3
 8002252:	4603      	mov	r3, r0
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	4403      	add	r3, r0
 8002258:	409a      	lsls	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b06      	cmp	r3, #6
 8002268:	d824      	bhi.n	80022b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685a      	ldr	r2, [r3, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	3b05      	subs	r3, #5
 800227c:	221f      	movs	r2, #31
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43da      	mvns	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	400a      	ands	r2, r1
 800228a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	b29b      	uxth	r3, r3
 8002298:	4618      	mov	r0, r3
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	3b05      	subs	r3, #5
 80022a6:	fa00 f203 	lsl.w	r2, r0, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	635a      	str	r2, [r3, #52]	; 0x34
 80022b2:	e04c      	b.n	800234e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b0c      	cmp	r3, #12
 80022ba:	d824      	bhi.n	8002306 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	3b23      	subs	r3, #35	; 0x23
 80022ce:	221f      	movs	r2, #31
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43da      	mvns	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	400a      	ands	r2, r1
 80022dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	4618      	mov	r0, r3
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	3b23      	subs	r3, #35	; 0x23
 80022f8:	fa00 f203 	lsl.w	r2, r0, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	631a      	str	r2, [r3, #48]	; 0x30
 8002304:	e023      	b.n	800234e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	3b41      	subs	r3, #65	; 0x41
 8002318:	221f      	movs	r2, #31
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43da      	mvns	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	400a      	ands	r2, r1
 8002326:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	b29b      	uxth	r3, r3
 8002334:	4618      	mov	r0, r3
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	3b41      	subs	r3, #65	; 0x41
 8002342:	fa00 f203 	lsl.w	r2, r0, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800234e:	4b22      	ldr	r3, [pc, #136]	; (80023d8 <HAL_ADC_ConfigChannel+0x234>)
 8002350:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a21      	ldr	r2, [pc, #132]	; (80023dc <HAL_ADC_ConfigChannel+0x238>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d109      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1cc>
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2b12      	cmp	r3, #18
 8002362:	d105      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a19      	ldr	r2, [pc, #100]	; (80023dc <HAL_ADC_ConfigChannel+0x238>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d123      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x21e>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b10      	cmp	r3, #16
 8002380:	d003      	beq.n	800238a <HAL_ADC_ConfigChannel+0x1e6>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b11      	cmp	r3, #17
 8002388:	d11b      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2b10      	cmp	r3, #16
 800239c:	d111      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <HAL_ADC_ConfigChannel+0x23c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a10      	ldr	r2, [pc, #64]	; (80023e4 <HAL_ADC_ConfigChannel+0x240>)
 80023a4:	fba2 2303 	umull	r2, r3, r2, r3
 80023a8:	0c9a      	lsrs	r2, r3, #18
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023b4:	e002      	b.n	80023bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	3b01      	subs	r3, #1
 80023ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f9      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	40012300 	.word	0x40012300
 80023dc:	40012000 	.word	0x40012000
 80023e0:	20000000 	.word	0x20000000
 80023e4:	431bde83 	.word	0x431bde83

080023e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023f0:	4b79      	ldr	r3, [pc, #484]	; (80025d8 <ADC_Init+0x1f0>)
 80023f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	431a      	orrs	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800241c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6859      	ldr	r1, [r3, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	021a      	lsls	r2, r3, #8
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002440:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6859      	ldr	r1, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002462:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6899      	ldr	r1, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	4a58      	ldr	r2, [pc, #352]	; (80025dc <ADC_Init+0x1f4>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d022      	beq.n	80024c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800248e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6899      	ldr	r1, [r3, #8]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6899      	ldr	r1, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	e00f      	b.n	80024e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0202 	bic.w	r2, r2, #2
 80024f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6899      	ldr	r1, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	7e1b      	ldrb	r3, [r3, #24]
 8002500:	005a      	lsls	r2, r3, #1
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01b      	beq.n	800254c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002522:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002532:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6859      	ldr	r1, [r3, #4]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	3b01      	subs	r3, #1
 8002540:	035a      	lsls	r2, r3, #13
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	e007      	b.n	800255c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800255a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800256a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	3b01      	subs	r3, #1
 8002578:	051a      	lsls	r2, r3, #20
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002590:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6899      	ldr	r1, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800259e:	025a      	lsls	r2, r3, #9
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6899      	ldr	r1, [r3, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	029a      	lsls	r2, r3, #10
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	609a      	str	r2, [r3, #8]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	40012300 	.word	0x40012300
 80025dc:	0f000001 	.word	0x0f000001

080025e0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d13c      	bne.n	8002674 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d12b      	bne.n	800266c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002618:	2b00      	cmp	r3, #0
 800261a:	d127      	bne.n	800266c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002622:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002626:	2b00      	cmp	r3, #0
 8002628:	d006      	beq.n	8002638 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002634:	2b00      	cmp	r3, #0
 8002636:	d119      	bne.n	800266c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0220 	bic.w	r2, r2, #32
 8002646:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d105      	bne.n	800266c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	f043 0201 	orr.w	r2, r3, #1
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f013 fcad 	bl	8015fcc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002672:	e00e      	b.n	8002692 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f013 fcf7 	bl	8016074 <HAL_ADC_ErrorCallback>
}
 8002686:	e004      	b.n	8002692 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	4798      	blx	r3
}
 8002692:	bf00      	nop
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b084      	sub	sp, #16
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f013 fcb9 	bl	8016020 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026ae:	bf00      	nop
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b084      	sub	sp, #16
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2240      	movs	r2, #64	; 0x40
 80026c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f043 0204 	orr.w	r2, r3, #4
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f013 fccc 	bl	8016074 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026dc:	bf00      	nop
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002700:	4013      	ands	r3, r2
 8002702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800270c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002716:	4a04      	ldr	r2, [pc, #16]	; (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	60d3      	str	r3, [r2, #12]
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002730:	4b04      	ldr	r3, [pc, #16]	; (8002744 <__NVIC_GetPriorityGrouping+0x18>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	0a1b      	lsrs	r3, r3, #8
 8002736:	f003 0307 	and.w	r3, r3, #7
}
 800273a:	4618      	mov	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	2b00      	cmp	r3, #0
 8002758:	db0b      	blt.n	8002772 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	f003 021f 	and.w	r2, r3, #31
 8002760:	4907      	ldr	r1, [pc, #28]	; (8002780 <__NVIC_EnableIRQ+0x38>)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	095b      	lsrs	r3, r3, #5
 8002768:	2001      	movs	r0, #1
 800276a:	fa00 f202 	lsl.w	r2, r0, r2
 800276e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000e100 	.word	0xe000e100

08002784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	6039      	str	r1, [r7, #0]
 800278e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002794:	2b00      	cmp	r3, #0
 8002796:	db0a      	blt.n	80027ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	b2da      	uxtb	r2, r3
 800279c:	490c      	ldr	r1, [pc, #48]	; (80027d0 <__NVIC_SetPriority+0x4c>)
 800279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a2:	0112      	lsls	r2, r2, #4
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	440b      	add	r3, r1
 80027a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027ac:	e00a      	b.n	80027c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	4908      	ldr	r1, [pc, #32]	; (80027d4 <__NVIC_SetPriority+0x50>)
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	3b04      	subs	r3, #4
 80027bc:	0112      	lsls	r2, r2, #4
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	440b      	add	r3, r1
 80027c2:	761a      	strb	r2, [r3, #24]
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr
 80027d0:	e000e100 	.word	0xe000e100
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d8:	b480      	push	{r7}
 80027da:	b089      	sub	sp, #36	; 0x24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f1c3 0307 	rsb	r3, r3, #7
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	bf28      	it	cs
 80027f6:	2304      	movcs	r3, #4
 80027f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3304      	adds	r3, #4
 80027fe:	2b06      	cmp	r3, #6
 8002800:	d902      	bls.n	8002808 <NVIC_EncodePriority+0x30>
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3b03      	subs	r3, #3
 8002806:	e000      	b.n	800280a <NVIC_EncodePriority+0x32>
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800280c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43da      	mvns	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	401a      	ands	r2, r3
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002820:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	fa01 f303 	lsl.w	r3, r1, r3
 800282a:	43d9      	mvns	r1, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002830:	4313      	orrs	r3, r2
         );
}
 8002832:	4618      	mov	r0, r3
 8002834:	3724      	adds	r7, #36	; 0x24
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff ff4c 	bl	80026e4 <__NVIC_SetPriorityGrouping>
}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002866:	f7ff ff61 	bl	800272c <__NVIC_GetPriorityGrouping>
 800286a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	68b9      	ldr	r1, [r7, #8]
 8002870:	6978      	ldr	r0, [r7, #20]
 8002872:	f7ff ffb1 	bl	80027d8 <NVIC_EncodePriority>
 8002876:	4602      	mov	r2, r0
 8002878:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800287c:	4611      	mov	r1, r2
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff ff80 	bl	8002784 <__NVIC_SetPriority>
}
 8002884:	bf00      	nop
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff ff54 	bl	8002748 <__NVIC_EnableIRQ>
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028b4:	f7ff fb12 	bl	8001edc <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e099      	b.n	80029f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0201 	bic.w	r2, r2, #1
 80028e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028e4:	e00f      	b.n	8002906 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028e6:	f7ff faf9 	bl	8001edc <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b05      	cmp	r3, #5
 80028f2:	d908      	bls.n	8002906 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2220      	movs	r2, #32
 80028f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2203      	movs	r2, #3
 80028fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e078      	b.n	80029f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1e8      	bne.n	80028e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	4b38      	ldr	r3, [pc, #224]	; (8002a00 <HAL_DMA_Init+0x158>)
 8002920:	4013      	ands	r3, r2
 8002922:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002932:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800293e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800294a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	4313      	orrs	r3, r2
 8002956:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295c:	2b04      	cmp	r3, #4
 800295e:	d107      	bne.n	8002970 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	4313      	orrs	r3, r2
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	4313      	orrs	r3, r2
 800296e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f023 0307 	bic.w	r3, r3, #7
 8002986:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	4313      	orrs	r3, r2
 8002990:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	2b04      	cmp	r3, #4
 8002998:	d117      	bne.n	80029ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00e      	beq.n	80029ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 fa9f 	bl	8002ef0 <DMA_CheckFifoParam>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d008      	beq.n	80029ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2240      	movs	r2, #64	; 0x40
 80029bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80029c6:	2301      	movs	r3, #1
 80029c8:	e016      	b.n	80029f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fa56 	bl	8002e84 <DMA_CalcBaseAndBitshift>
 80029d8:	4603      	mov	r3, r0
 80029da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e0:	223f      	movs	r2, #63	; 0x3f
 80029e2:	409a      	lsls	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	f010803f 	.word	0xf010803f

08002a04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_DMA_Start_IT+0x26>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e040      	b.n	8002aac <HAL_DMA_Start_IT+0xa8>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d12f      	bne.n	8002a9e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2202      	movs	r2, #2
 8002a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	68b9      	ldr	r1, [r7, #8]
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 f9e8 	bl	8002e28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5c:	223f      	movs	r2, #63	; 0x3f
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0216 	orr.w	r2, r2, #22
 8002a72:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d007      	beq.n	8002a8c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0208 	orr.w	r2, r2, #8
 8002a8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	e005      	b.n	8002aaa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d004      	beq.n	8002ad2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2280      	movs	r2, #128	; 0x80
 8002acc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e00c      	b.n	8002aec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2205      	movs	r2, #5
 8002ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0201 	bic.w	r2, r2, #1
 8002ae8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b04:	4b92      	ldr	r3, [pc, #584]	; (8002d50 <HAL_DMA_IRQHandler+0x258>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a92      	ldr	r2, [pc, #584]	; (8002d54 <HAL_DMA_IRQHandler+0x25c>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	0a9b      	lsrs	r3, r3, #10
 8002b10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b22:	2208      	movs	r2, #8
 8002b24:	409a      	lsls	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d01a      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d013      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0204 	bic.w	r2, r2, #4
 8002b4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b50:	2208      	movs	r2, #8
 8002b52:	409a      	lsls	r2, r3
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5c:	f043 0201 	orr.w	r2, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b68:	2201      	movs	r2, #1
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d012      	beq.n	8002b9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00b      	beq.n	8002b9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b86:	2201      	movs	r2, #1
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b92:	f043 0202 	orr.w	r2, r3, #2
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d012      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00b      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bbc:	2204      	movs	r2, #4
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc8:	f043 0204 	orr.w	r2, r3, #4
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd4:	2210      	movs	r2, #16
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d043      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d03c      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf2:	2210      	movs	r2, #16
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d018      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d108      	bne.n	8002c28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d024      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	4798      	blx	r3
 8002c26:	e01f      	b.n	8002c68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d01b      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	4798      	blx	r3
 8002c38:	e016      	b.n	8002c68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d107      	bne.n	8002c58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0208 	bic.w	r2, r2, #8
 8002c56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 808e 	beq.w	8002d96 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0310 	and.w	r3, r3, #16
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 8086 	beq.w	8002d96 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8e:	2220      	movs	r2, #32
 8002c90:	409a      	lsls	r2, r3
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b05      	cmp	r3, #5
 8002ca0:	d136      	bne.n	8002d10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0216 	bic.w	r2, r2, #22
 8002cb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695a      	ldr	r2, [r3, #20]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d103      	bne.n	8002cd2 <HAL_DMA_IRQHandler+0x1da>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d007      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0208 	bic.w	r2, r2, #8
 8002ce0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce6:	223f      	movs	r2, #63	; 0x3f
 8002ce8:	409a      	lsls	r2, r3
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d07d      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	4798      	blx	r3
        }
        return;
 8002d0e:	e078      	b.n	8002e02 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d01c      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d108      	bne.n	8002d3e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d030      	beq.n	8002d96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	4798      	blx	r3
 8002d3c:	e02b      	b.n	8002d96 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d027      	beq.n	8002d96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	4798      	blx	r3
 8002d4e:	e022      	b.n	8002d96 <HAL_DMA_IRQHandler+0x29e>
 8002d50:	20000000 	.word	0x20000000
 8002d54:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10f      	bne.n	8002d86 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0210 	bic.w	r2, r2, #16
 8002d74:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d032      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d022      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2205      	movs	r2, #5
 8002dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0201 	bic.w	r2, r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	60bb      	str	r3, [r7, #8]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d307      	bcc.n	8002dde <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1f2      	bne.n	8002dc2 <HAL_DMA_IRQHandler+0x2ca>
 8002ddc:	e000      	b.n	8002de0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002dde:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	4798      	blx	r3
 8002e00:	e000      	b.n	8002e04 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002e02:	bf00      	nop
    }
  }
}
 8002e04:	3718      	adds	r7, #24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop

08002e0c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e1a:	b2db      	uxtb	r3, r3
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b40      	cmp	r3, #64	; 0x40
 8002e54:	d108      	bne.n	8002e68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68ba      	ldr	r2, [r7, #8]
 8002e64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e66:	e007      	b.n	8002e78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	60da      	str	r2, [r3, #12]
}
 8002e78:	bf00      	nop
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	3b10      	subs	r3, #16
 8002e94:	4a14      	ldr	r2, [pc, #80]	; (8002ee8 <DMA_CalcBaseAndBitshift+0x64>)
 8002e96:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9a:	091b      	lsrs	r3, r3, #4
 8002e9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e9e:	4a13      	ldr	r2, [pc, #76]	; (8002eec <DMA_CalcBaseAndBitshift+0x68>)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d909      	bls.n	8002ec6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002eba:	f023 0303 	bic.w	r3, r3, #3
 8002ebe:	1d1a      	adds	r2, r3, #4
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	659a      	str	r2, [r3, #88]	; 0x58
 8002ec4:	e007      	b.n	8002ed6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ece:	f023 0303 	bic.w	r3, r3, #3
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	aaaaaaab 	.word	0xaaaaaaab
 8002eec:	08017340 	.word	0x08017340

08002ef0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d11f      	bne.n	8002f4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d855      	bhi.n	8002fbc <DMA_CheckFifoParam+0xcc>
 8002f10:	a201      	add	r2, pc, #4	; (adr r2, 8002f18 <DMA_CheckFifoParam+0x28>)
 8002f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f16:	bf00      	nop
 8002f18:	08002f29 	.word	0x08002f29
 8002f1c:	08002f3b 	.word	0x08002f3b
 8002f20:	08002f29 	.word	0x08002f29
 8002f24:	08002fbd 	.word	0x08002fbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d045      	beq.n	8002fc0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f38:	e042      	b.n	8002fc0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f42:	d13f      	bne.n	8002fc4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f48:	e03c      	b.n	8002fc4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f52:	d121      	bne.n	8002f98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b03      	cmp	r3, #3
 8002f58:	d836      	bhi.n	8002fc8 <DMA_CheckFifoParam+0xd8>
 8002f5a:	a201      	add	r2, pc, #4	; (adr r2, 8002f60 <DMA_CheckFifoParam+0x70>)
 8002f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f60:	08002f71 	.word	0x08002f71
 8002f64:	08002f77 	.word	0x08002f77
 8002f68:	08002f71 	.word	0x08002f71
 8002f6c:	08002f89 	.word	0x08002f89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	73fb      	strb	r3, [r7, #15]
      break;
 8002f74:	e02f      	b.n	8002fd6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d024      	beq.n	8002fcc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f86:	e021      	b.n	8002fcc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f90:	d11e      	bne.n	8002fd0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f96:	e01b      	b.n	8002fd0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d902      	bls.n	8002fa4 <DMA_CheckFifoParam+0xb4>
 8002f9e:	2b03      	cmp	r3, #3
 8002fa0:	d003      	beq.n	8002faa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fa2:	e018      	b.n	8002fd6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa8:	e015      	b.n	8002fd6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00e      	beq.n	8002fd4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8002fba:	e00b      	b.n	8002fd4 <DMA_CheckFifoParam+0xe4>
      break;
 8002fbc:	bf00      	nop
 8002fbe:	e00a      	b.n	8002fd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002fc0:	bf00      	nop
 8002fc2:	e008      	b.n	8002fd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002fc4:	bf00      	nop
 8002fc6:	e006      	b.n	8002fd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002fc8:	bf00      	nop
 8002fca:	e004      	b.n	8002fd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002fcc:	bf00      	nop
 8002fce:	e002      	b.n	8002fd6 <DMA_CheckFifoParam+0xe6>
      break;   
 8002fd0:	bf00      	nop
 8002fd2:	e000      	b.n	8002fd6 <DMA_CheckFifoParam+0xe6>
      break;
 8002fd4:	bf00      	nop
    }
  } 
  
  return status; 
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b089      	sub	sp, #36	; 0x24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	e16b      	b.n	80032d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003000:	2201      	movs	r2, #1
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4013      	ands	r3, r2
 8003012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	429a      	cmp	r2, r3
 800301a:	f040 815a 	bne.w	80032d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d00b      	beq.n	800303e <HAL_GPIO_Init+0x5a>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d007      	beq.n	800303e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003032:	2b11      	cmp	r3, #17
 8003034:	d003      	beq.n	800303e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b12      	cmp	r3, #18
 800303c:	d130      	bne.n	80030a0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	2203      	movs	r2, #3
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43db      	mvns	r3, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4013      	ands	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003074:	2201      	movs	r2, #1
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4013      	ands	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	091b      	lsrs	r3, r3, #4
 800308a:	f003 0201 	and.w	r2, r3, #1
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4313      	orrs	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	2203      	movs	r2, #3
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4013      	ands	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d003      	beq.n	80030e0 <HAL_GPIO_Init+0xfc>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b12      	cmp	r3, #18
 80030de:	d123      	bne.n	8003128 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	08da      	lsrs	r2, r3, #3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3208      	adds	r2, #8
 80030e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	220f      	movs	r2, #15
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	08da      	lsrs	r2, r3, #3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3208      	adds	r2, #8
 8003122:	69b9      	ldr	r1, [r7, #24]
 8003124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	2203      	movs	r2, #3
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4013      	ands	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 0203 	and.w	r2, r3, #3
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4313      	orrs	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 80b4 	beq.w	80032d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	4b5f      	ldr	r3, [pc, #380]	; (80032ec <HAL_GPIO_Init+0x308>)
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	4a5e      	ldr	r2, [pc, #376]	; (80032ec <HAL_GPIO_Init+0x308>)
 8003174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003178:	6453      	str	r3, [r2, #68]	; 0x44
 800317a:	4b5c      	ldr	r3, [pc, #368]	; (80032ec <HAL_GPIO_Init+0x308>)
 800317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003186:	4a5a      	ldr	r2, [pc, #360]	; (80032f0 <HAL_GPIO_Init+0x30c>)
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	089b      	lsrs	r3, r3, #2
 800318c:	3302      	adds	r3, #2
 800318e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	220f      	movs	r2, #15
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4013      	ands	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a51      	ldr	r2, [pc, #324]	; (80032f4 <HAL_GPIO_Init+0x310>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d02b      	beq.n	800320a <HAL_GPIO_Init+0x226>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a50      	ldr	r2, [pc, #320]	; (80032f8 <HAL_GPIO_Init+0x314>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d025      	beq.n	8003206 <HAL_GPIO_Init+0x222>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a4f      	ldr	r2, [pc, #316]	; (80032fc <HAL_GPIO_Init+0x318>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d01f      	beq.n	8003202 <HAL_GPIO_Init+0x21e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a4e      	ldr	r2, [pc, #312]	; (8003300 <HAL_GPIO_Init+0x31c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d019      	beq.n	80031fe <HAL_GPIO_Init+0x21a>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a4d      	ldr	r2, [pc, #308]	; (8003304 <HAL_GPIO_Init+0x320>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d013      	beq.n	80031fa <HAL_GPIO_Init+0x216>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a4c      	ldr	r2, [pc, #304]	; (8003308 <HAL_GPIO_Init+0x324>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00d      	beq.n	80031f6 <HAL_GPIO_Init+0x212>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a4b      	ldr	r2, [pc, #300]	; (800330c <HAL_GPIO_Init+0x328>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d007      	beq.n	80031f2 <HAL_GPIO_Init+0x20e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a4a      	ldr	r2, [pc, #296]	; (8003310 <HAL_GPIO_Init+0x32c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d101      	bne.n	80031ee <HAL_GPIO_Init+0x20a>
 80031ea:	2307      	movs	r3, #7
 80031ec:	e00e      	b.n	800320c <HAL_GPIO_Init+0x228>
 80031ee:	2308      	movs	r3, #8
 80031f0:	e00c      	b.n	800320c <HAL_GPIO_Init+0x228>
 80031f2:	2306      	movs	r3, #6
 80031f4:	e00a      	b.n	800320c <HAL_GPIO_Init+0x228>
 80031f6:	2305      	movs	r3, #5
 80031f8:	e008      	b.n	800320c <HAL_GPIO_Init+0x228>
 80031fa:	2304      	movs	r3, #4
 80031fc:	e006      	b.n	800320c <HAL_GPIO_Init+0x228>
 80031fe:	2303      	movs	r3, #3
 8003200:	e004      	b.n	800320c <HAL_GPIO_Init+0x228>
 8003202:	2302      	movs	r3, #2
 8003204:	e002      	b.n	800320c <HAL_GPIO_Init+0x228>
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <HAL_GPIO_Init+0x228>
 800320a:	2300      	movs	r3, #0
 800320c:	69fa      	ldr	r2, [r7, #28]
 800320e:	f002 0203 	and.w	r2, r2, #3
 8003212:	0092      	lsls	r2, r2, #2
 8003214:	4093      	lsls	r3, r2
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800321c:	4934      	ldr	r1, [pc, #208]	; (80032f0 <HAL_GPIO_Init+0x30c>)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	089b      	lsrs	r3, r3, #2
 8003222:	3302      	adds	r3, #2
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800322a:	4b3a      	ldr	r3, [pc, #232]	; (8003314 <HAL_GPIO_Init+0x330>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	43db      	mvns	r3, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4013      	ands	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800324e:	4a31      	ldr	r2, [pc, #196]	; (8003314 <HAL_GPIO_Init+0x330>)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003254:	4b2f      	ldr	r3, [pc, #188]	; (8003314 <HAL_GPIO_Init+0x330>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	43db      	mvns	r3, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003278:	4a26      	ldr	r2, [pc, #152]	; (8003314 <HAL_GPIO_Init+0x330>)
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800327e:	4b25      	ldr	r3, [pc, #148]	; (8003314 <HAL_GPIO_Init+0x330>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032a2:	4a1c      	ldr	r2, [pc, #112]	; (8003314 <HAL_GPIO_Init+0x330>)
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032a8:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <HAL_GPIO_Init+0x330>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032cc:	4a11      	ldr	r2, [pc, #68]	; (8003314 <HAL_GPIO_Init+0x330>)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	3301      	adds	r3, #1
 80032d6:	61fb      	str	r3, [r7, #28]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	2b0f      	cmp	r3, #15
 80032dc:	f67f ae90 	bls.w	8003000 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032e0:	bf00      	nop
 80032e2:	3724      	adds	r7, #36	; 0x24
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40013800 	.word	0x40013800
 80032f4:	40020000 	.word	0x40020000
 80032f8:	40020400 	.word	0x40020400
 80032fc:	40020800 	.word	0x40020800
 8003300:	40020c00 	.word	0x40020c00
 8003304:	40021000 	.word	0x40021000
 8003308:	40021400 	.word	0x40021400
 800330c:	40021800 	.word	0x40021800
 8003310:	40021c00 	.word	0x40021c00
 8003314:	40013c00 	.word	0x40013c00

08003318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	460b      	mov	r3, r1
 8003322:	807b      	strh	r3, [r7, #2]
 8003324:	4613      	mov	r3, r2
 8003326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003328:	787b      	ldrb	r3, [r7, #1]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800332e:	887a      	ldrh	r2, [r7, #2]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003334:	e003      	b.n	800333e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003336:	887b      	ldrh	r3, [r7, #2]
 8003338:	041a      	lsls	r2, r3, #16
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	619a      	str	r2, [r3, #24]
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
	...

0800334c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e11f      	b.n	800359e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fe f97c 	bl	8001670 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2224      	movs	r2, #36	; 0x24
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0201 	bic.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800339e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033b0:	f003 ff9e 	bl	80072f0 <HAL_RCC_GetPCLK1Freq>
 80033b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4a7b      	ldr	r2, [pc, #492]	; (80035a8 <HAL_I2C_Init+0x25c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d807      	bhi.n	80033d0 <HAL_I2C_Init+0x84>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4a7a      	ldr	r2, [pc, #488]	; (80035ac <HAL_I2C_Init+0x260>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	bf94      	ite	ls
 80033c8:	2301      	movls	r3, #1
 80033ca:	2300      	movhi	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	e006      	b.n	80033de <HAL_I2C_Init+0x92>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4a77      	ldr	r2, [pc, #476]	; (80035b0 <HAL_I2C_Init+0x264>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	bf94      	ite	ls
 80033d8:	2301      	movls	r3, #1
 80033da:	2300      	movhi	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e0db      	b.n	800359e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4a72      	ldr	r2, [pc, #456]	; (80035b4 <HAL_I2C_Init+0x268>)
 80033ea:	fba2 2303 	umull	r2, r3, r2, r3
 80033ee:	0c9b      	lsrs	r3, r3, #18
 80033f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	430a      	orrs	r2, r1
 8003404:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	4a64      	ldr	r2, [pc, #400]	; (80035a8 <HAL_I2C_Init+0x25c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d802      	bhi.n	8003420 <HAL_I2C_Init+0xd4>
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	3301      	adds	r3, #1
 800341e:	e009      	b.n	8003434 <HAL_I2C_Init+0xe8>
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003426:	fb02 f303 	mul.w	r3, r2, r3
 800342a:	4a63      	ldr	r2, [pc, #396]	; (80035b8 <HAL_I2C_Init+0x26c>)
 800342c:	fba2 2303 	umull	r2, r3, r2, r3
 8003430:	099b      	lsrs	r3, r3, #6
 8003432:	3301      	adds	r3, #1
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6812      	ldr	r2, [r2, #0]
 8003438:	430b      	orrs	r3, r1
 800343a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003446:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	4956      	ldr	r1, [pc, #344]	; (80035a8 <HAL_I2C_Init+0x25c>)
 8003450:	428b      	cmp	r3, r1
 8003452:	d80d      	bhi.n	8003470 <HAL_I2C_Init+0x124>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	1e59      	subs	r1, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003462:	3301      	adds	r3, #1
 8003464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003468:	2b04      	cmp	r3, #4
 800346a:	bf38      	it	cc
 800346c:	2304      	movcc	r3, #4
 800346e:	e04f      	b.n	8003510 <HAL_I2C_Init+0x1c4>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d111      	bne.n	800349c <HAL_I2C_Init+0x150>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	1e58      	subs	r0, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6859      	ldr	r1, [r3, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	440b      	add	r3, r1
 8003486:	fbb0 f3f3 	udiv	r3, r0, r3
 800348a:	3301      	adds	r3, #1
 800348c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003490:	2b00      	cmp	r3, #0
 8003492:	bf0c      	ite	eq
 8003494:	2301      	moveq	r3, #1
 8003496:	2300      	movne	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	e012      	b.n	80034c2 <HAL_I2C_Init+0x176>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	1e58      	subs	r0, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6859      	ldr	r1, [r3, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	0099      	lsls	r1, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80034b2:	3301      	adds	r3, #1
 80034b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf0c      	ite	eq
 80034bc:	2301      	moveq	r3, #1
 80034be:	2300      	movne	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_I2C_Init+0x17e>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e022      	b.n	8003510 <HAL_I2C_Init+0x1c4>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10e      	bne.n	80034f0 <HAL_I2C_Init+0x1a4>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	1e58      	subs	r0, r3, #1
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6859      	ldr	r1, [r3, #4]
 80034da:	460b      	mov	r3, r1
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	440b      	add	r3, r1
 80034e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80034e4:	3301      	adds	r3, #1
 80034e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ee:	e00f      	b.n	8003510 <HAL_I2C_Init+0x1c4>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	1e58      	subs	r0, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6859      	ldr	r1, [r3, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	0099      	lsls	r1, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	fbb0 f3f3 	udiv	r3, r0, r3
 8003506:	3301      	adds	r3, #1
 8003508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800350c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	6809      	ldr	r1, [r1, #0]
 8003514:	4313      	orrs	r3, r2
 8003516:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69da      	ldr	r2, [r3, #28]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800353e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6911      	ldr	r1, [r2, #16]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	68d2      	ldr	r2, [r2, #12]
 800354a:	4311      	orrs	r1, r2
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	430b      	orrs	r3, r1
 8003552:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695a      	ldr	r2, [r3, #20]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 0201 	orr.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2220      	movs	r2, #32
 800358a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	000186a0 	.word	0x000186a0
 80035ac:	001e847f 	.word	0x001e847f
 80035b0:	003d08ff 	.word	0x003d08ff
 80035b4:	431bde83 	.word	0x431bde83
 80035b8:	10624dd3 	.word	0x10624dd3

080035bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	4608      	mov	r0, r1
 80035c6:	4611      	mov	r1, r2
 80035c8:	461a      	mov	r2, r3
 80035ca:	4603      	mov	r3, r0
 80035cc:	817b      	strh	r3, [r7, #10]
 80035ce:	460b      	mov	r3, r1
 80035d0:	813b      	strh	r3, [r7, #8]
 80035d2:	4613      	mov	r3, r2
 80035d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035d6:	f7fe fc81 	bl	8001edc <HAL_GetTick>
 80035da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b20      	cmp	r3, #32
 80035e6:	f040 80d9 	bne.w	800379c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	2319      	movs	r3, #25
 80035f0:	2201      	movs	r2, #1
 80035f2:	496d      	ldr	r1, [pc, #436]	; (80037a8 <HAL_I2C_Mem_Write+0x1ec>)
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f001 fee9 	bl	80053cc <I2C_WaitOnFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003600:	2302      	movs	r3, #2
 8003602:	e0cc      	b.n	800379e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <HAL_I2C_Mem_Write+0x56>
 800360e:	2302      	movs	r3, #2
 8003610:	e0c5      	b.n	800379e <HAL_I2C_Mem_Write+0x1e2>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b01      	cmp	r3, #1
 8003626:	d007      	beq.n	8003638 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0201 	orr.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003646:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2221      	movs	r2, #33	; 0x21
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2240      	movs	r2, #64	; 0x40
 8003654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a3a      	ldr	r2, [r7, #32]
 8003662:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003668:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4a4d      	ldr	r2, [pc, #308]	; (80037ac <HAL_I2C_Mem_Write+0x1f0>)
 8003678:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800367a:	88f8      	ldrh	r0, [r7, #6]
 800367c:	893a      	ldrh	r2, [r7, #8]
 800367e:	8979      	ldrh	r1, [r7, #10]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	9301      	str	r3, [sp, #4]
 8003684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	4603      	mov	r3, r0
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f001 fd60 	bl	8005150 <I2C_RequestMemoryWrite>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d052      	beq.n	800373c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e081      	b.n	800379e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f001 ff6a 	bl	8005578 <I2C_WaitOnTXEFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00d      	beq.n	80036c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d107      	bne.n	80036c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e06b      	b.n	800379e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	781a      	ldrb	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b04      	cmp	r3, #4
 8003702:	d11b      	bne.n	800373c <HAL_I2C_Mem_Write+0x180>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003708:	2b00      	cmp	r3, #0
 800370a:	d017      	beq.n	800373c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	781a      	ldrb	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003732:	b29b      	uxth	r3, r3
 8003734:	3b01      	subs	r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1aa      	bne.n	800369a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f001 ff56 	bl	80055fa <I2C_WaitOnBTFFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00d      	beq.n	8003770 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	2b04      	cmp	r3, #4
 800375a:	d107      	bne.n	800376c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800376a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e016      	b.n	800379e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800377e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2220      	movs	r2, #32
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	e000      	b.n	800379e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800379c:	2302      	movs	r3, #2
  }
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	00100002 	.word	0x00100002
 80037ac:	ffff0000 	.word	0xffff0000

080037b0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08a      	sub	sp, #40	; 0x28
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	607a      	str	r2, [r7, #4]
 80037ba:	603b      	str	r3, [r7, #0]
 80037bc:	460b      	mov	r3, r1
 80037be:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80037c0:	f7fe fb8c 	bl	8001edc <HAL_GetTick>
 80037c4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80037c6:	2301      	movs	r3, #1
 80037c8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b20      	cmp	r3, #32
 80037d4:	f040 8111 	bne.w	80039fa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	2319      	movs	r3, #25
 80037de:	2201      	movs	r2, #1
 80037e0:	4988      	ldr	r1, [pc, #544]	; (8003a04 <HAL_I2C_IsDeviceReady+0x254>)
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f001 fdf2 	bl	80053cc <I2C_WaitOnFlagUntilTimeout>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80037ee:	2302      	movs	r3, #2
 80037f0:	e104      	b.n	80039fc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_I2C_IsDeviceReady+0x50>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e0fd      	b.n	80039fc <HAL_I2C_IsDeviceReady+0x24c>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b01      	cmp	r3, #1
 8003814:	d007      	beq.n	8003826 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f042 0201 	orr.w	r2, r2, #1
 8003824:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003834:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2224      	movs	r2, #36	; 0x24
 800383a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4a70      	ldr	r2, [pc, #448]	; (8003a08 <HAL_I2C_IsDeviceReady+0x258>)
 8003848:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003858:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2200      	movs	r2, #0
 8003862:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f001 fdb0 	bl	80053cc <I2C_WaitOnFlagUntilTimeout>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00d      	beq.n	800388e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003880:	d103      	bne.n	800388a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003888:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e0b6      	b.n	80039fc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800388e:	897b      	ldrh	r3, [r7, #10]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	461a      	mov	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800389c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800389e:	f7fe fb1d 	bl	8001edc <HAL_GetTick>
 80038a2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	bf0c      	ite	eq
 80038b2:	2301      	moveq	r3, #1
 80038b4:	2300      	movne	r3, #0
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c8:	bf0c      	ite	eq
 80038ca:	2301      	moveq	r3, #1
 80038cc:	2300      	movne	r3, #0
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038d2:	e025      	b.n	8003920 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038d4:	f7fe fb02 	bl	8001edc <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d302      	bcc.n	80038ea <HAL_I2C_IsDeviceReady+0x13a>
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d103      	bne.n	80038f2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	22a0      	movs	r2, #160	; 0xa0
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	bf0c      	ite	eq
 8003900:	2301      	moveq	r3, #1
 8003902:	2300      	movne	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003916:	bf0c      	ite	eq
 8003918:	2301      	moveq	r3, #1
 800391a:	2300      	movne	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2ba0      	cmp	r3, #160	; 0xa0
 800392a:	d005      	beq.n	8003938 <HAL_I2C_IsDeviceReady+0x188>
 800392c:	7dfb      	ldrb	r3, [r7, #23]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d102      	bne.n	8003938 <HAL_I2C_IsDeviceReady+0x188>
 8003932:	7dbb      	ldrb	r3, [r7, #22]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0cd      	beq.n	80038d4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b02      	cmp	r3, #2
 800394c:	d129      	bne.n	80039a2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800395c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800395e:	2300      	movs	r3, #0
 8003960:	613b      	str	r3, [r7, #16]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	613b      	str	r3, [r7, #16]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	613b      	str	r3, [r7, #16]
 8003972:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	2319      	movs	r3, #25
 800397a:	2201      	movs	r2, #1
 800397c:	4921      	ldr	r1, [pc, #132]	; (8003a04 <HAL_I2C_IsDeviceReady+0x254>)
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f001 fd24 	bl	80053cc <I2C_WaitOnFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e036      	b.n	80039fc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	e02c      	b.n	80039fc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039b0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039ba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	2319      	movs	r3, #25
 80039c2:	2201      	movs	r2, #1
 80039c4:	490f      	ldr	r1, [pc, #60]	; (8003a04 <HAL_I2C_IsDeviceReady+0x254>)
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f001 fd00 	bl	80053cc <I2C_WaitOnFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e012      	b.n	80039fc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	3301      	adds	r3, #1
 80039da:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	f4ff af32 	bcc.w	800384a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80039fa:	2302      	movs	r3, #2
  }
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3720      	adds	r7, #32
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	00100002 	.word	0x00100002
 8003a08:	ffff0000 	.word	0xffff0000

08003a0c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a2c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a34:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	2b10      	cmp	r3, #16
 8003a3a:	d003      	beq.n	8003a44 <HAL_I2C_EV_IRQHandler+0x38>
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
 8003a3e:	2b40      	cmp	r3, #64	; 0x40
 8003a40:	f040 80bd 	bne.w	8003bbe <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10d      	bne.n	8003a7a <HAL_I2C_EV_IRQHandler+0x6e>
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003a64:	d003      	beq.n	8003a6e <HAL_I2C_EV_IRQHandler+0x62>
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003a6c:	d101      	bne.n	8003a72 <HAL_I2C_EV_IRQHandler+0x66>
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <HAL_I2C_EV_IRQHandler+0x68>
 8003a72:	2300      	movs	r3, #0
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	f000 812e 	beq.w	8003cd6 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00c      	beq.n	8003a9e <HAL_I2C_EV_IRQHandler+0x92>
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	0a5b      	lsrs	r3, r3, #9
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d006      	beq.n	8003a9e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f001 fe54 	bl	800573e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fd44 	bl	8004524 <I2C_Master_SB>
 8003a9c:	e08e      	b.n	8003bbc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	08db      	lsrs	r3, r3, #3
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d009      	beq.n	8003abe <HAL_I2C_EV_IRQHandler+0xb2>
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	0a5b      	lsrs	r3, r3, #9
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 fdba 	bl	8004630 <I2C_Master_ADD10>
 8003abc:	e07e      	b.n	8003bbc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	085b      	lsrs	r3, r3, #1
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d009      	beq.n	8003ade <HAL_I2C_EV_IRQHandler+0xd2>
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	0a5b      	lsrs	r3, r3, #9
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fdd4 	bl	8004684 <I2C_Master_ADDR>
 8003adc:	e06e      	b.n	8003bbc <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	089b      	lsrs	r3, r3, #2
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d037      	beq.n	8003b5a <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003af4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003af8:	f000 80ef 	beq.w	8003cda <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	09db      	lsrs	r3, r3, #7
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00f      	beq.n	8003b28 <HAL_I2C_EV_IRQHandler+0x11c>
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	0a9b      	lsrs	r3, r3, #10
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d009      	beq.n	8003b28 <HAL_I2C_EV_IRQHandler+0x11c>
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	089b      	lsrs	r3, r3, #2
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d103      	bne.n	8003b28 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f9d1 	bl	8003ec8 <I2C_MasterTransmit_TXE>
 8003b26:	e049      	b.n	8003bbc <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	089b      	lsrs	r3, r3, #2
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 80d2 	beq.w	8003cda <HAL_I2C_EV_IRQHandler+0x2ce>
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	0a5b      	lsrs	r3, r3, #9
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 80cb 	beq.w	8003cda <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
 8003b46:	2b10      	cmp	r3, #16
 8003b48:	d103      	bne.n	8003b52 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 fa58 	bl	8004000 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b50:	e0c3      	b.n	8003cda <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fabc 	bl	80040d0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b58:	e0bf      	b.n	8003cda <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b68:	f000 80b7 	beq.w	8003cda <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	099b      	lsrs	r3, r3, #6
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00f      	beq.n	8003b98 <HAL_I2C_EV_IRQHandler+0x18c>
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	0a9b      	lsrs	r3, r3, #10
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d009      	beq.n	8003b98 <HAL_I2C_EV_IRQHandler+0x18c>
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	089b      	lsrs	r3, r3, #2
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d103      	bne.n	8003b98 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 fb2c 	bl	80041ee <I2C_MasterReceive_RXNE>
 8003b96:	e011      	b.n	8003bbc <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	089b      	lsrs	r3, r3, #2
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 809a 	beq.w	8003cda <HAL_I2C_EV_IRQHandler+0x2ce>
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	0a5b      	lsrs	r3, r3, #9
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 8093 	beq.w	8003cda <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fbcb 	bl	8004350 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bba:	e08e      	b.n	8003cda <HAL_I2C_EV_IRQHandler+0x2ce>
 8003bbc:	e08d      	b.n	8003cda <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d004      	beq.n	8003bd0 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	61fb      	str	r3, [r7, #28]
 8003bce:	e007      	b.n	8003be0 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	085b      	lsrs	r3, r3, #1
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d012      	beq.n	8003c12 <HAL_I2C_EV_IRQHandler+0x206>
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	0a5b      	lsrs	r3, r3, #9
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00c      	beq.n	8003c12 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003c08:	69b9      	ldr	r1, [r7, #24]
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 ff89 	bl	8004b22 <I2C_Slave_ADDR>
 8003c10:	e066      	b.n	8003ce0 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	091b      	lsrs	r3, r3, #4
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d009      	beq.n	8003c32 <HAL_I2C_EV_IRQHandler+0x226>
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	0a5b      	lsrs	r3, r3, #9
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 ffbe 	bl	8004bac <I2C_Slave_STOPF>
 8003c30:	e056      	b.n	8003ce0 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c32:	7bbb      	ldrb	r3, [r7, #14]
 8003c34:	2b21      	cmp	r3, #33	; 0x21
 8003c36:	d002      	beq.n	8003c3e <HAL_I2C_EV_IRQHandler+0x232>
 8003c38:	7bbb      	ldrb	r3, [r7, #14]
 8003c3a:	2b29      	cmp	r3, #41	; 0x29
 8003c3c:	d125      	bne.n	8003c8a <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	09db      	lsrs	r3, r3, #7
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00f      	beq.n	8003c6a <HAL_I2C_EV_IRQHandler+0x25e>
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	0a9b      	lsrs	r3, r3, #10
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d009      	beq.n	8003c6a <HAL_I2C_EV_IRQHandler+0x25e>
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	089b      	lsrs	r3, r3, #2
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d103      	bne.n	8003c6a <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 fe9f 	bl	80049a6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c68:	e039      	b.n	8003cde <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	089b      	lsrs	r3, r3, #2
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d033      	beq.n	8003cde <HAL_I2C_EV_IRQHandler+0x2d2>
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	0a5b      	lsrs	r3, r3, #9
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d02d      	beq.n	8003cde <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 fecc 	bl	8004a20 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c88:	e029      	b.n	8003cde <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	099b      	lsrs	r3, r3, #6
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00f      	beq.n	8003cb6 <HAL_I2C_EV_IRQHandler+0x2aa>
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	0a9b      	lsrs	r3, r3, #10
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d009      	beq.n	8003cb6 <HAL_I2C_EV_IRQHandler+0x2aa>
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	089b      	lsrs	r3, r3, #2
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d103      	bne.n	8003cb6 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fed7 	bl	8004a62 <I2C_SlaveReceive_RXNE>
 8003cb4:	e014      	b.n	8003ce0 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	089b      	lsrs	r3, r3, #2
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00e      	beq.n	8003ce0 <HAL_I2C_EV_IRQHandler+0x2d4>
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	0a5b      	lsrs	r3, r3, #9
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d008      	beq.n	8003ce0 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 ff05 	bl	8004ade <I2C_SlaveReceive_BTF>
 8003cd4:	e004      	b.n	8003ce0 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8003cd6:	bf00      	nop
 8003cd8:	e002      	b.n	8003ce0 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cda:	bf00      	nop
 8003cdc:	e000      	b.n	8003ce0 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003cde:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003ce0:	3720      	adds	r7, #32
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b08a      	sub	sp, #40	; 0x28
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d08:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	0a1b      	lsrs	r3, r3, #8
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00e      	beq.n	8003d34 <HAL_I2C_ER_IRQHandler+0x4e>
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	0a1b      	lsrs	r3, r3, #8
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d008      	beq.n	8003d34 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	f043 0301 	orr.w	r3, r3, #1
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003d32:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	0a5b      	lsrs	r3, r3, #9
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00e      	beq.n	8003d5e <HAL_I2C_ER_IRQHandler+0x78>
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	0a1b      	lsrs	r3, r3, #8
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d008      	beq.n	8003d5e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	f043 0302 	orr.w	r3, r3, #2
 8003d52:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003d5c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	0a9b      	lsrs	r3, r3, #10
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d03f      	beq.n	8003dea <HAL_I2C_ER_IRQHandler+0x104>
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	0a1b      	lsrs	r3, r3, #8
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d039      	beq.n	8003dea <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003d76:	7efb      	ldrb	r3, [r7, #27]
 8003d78:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d88:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003d90:	7ebb      	ldrb	r3, [r7, #26]
 8003d92:	2b20      	cmp	r3, #32
 8003d94:	d112      	bne.n	8003dbc <HAL_I2C_ER_IRQHandler+0xd6>
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10f      	bne.n	8003dbc <HAL_I2C_ER_IRQHandler+0xd6>
 8003d9c:	7cfb      	ldrb	r3, [r7, #19]
 8003d9e:	2b21      	cmp	r3, #33	; 0x21
 8003da0:	d008      	beq.n	8003db4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003da2:	7cfb      	ldrb	r3, [r7, #19]
 8003da4:	2b29      	cmp	r3, #41	; 0x29
 8003da6:	d005      	beq.n	8003db4 <HAL_I2C_ER_IRQHandler+0xce>
 8003da8:	7cfb      	ldrb	r3, [r7, #19]
 8003daa:	2b28      	cmp	r3, #40	; 0x28
 8003dac:	d106      	bne.n	8003dbc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b21      	cmp	r3, #33	; 0x21
 8003db2:	d103      	bne.n	8003dbc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f001 f829 	bl	8004e0c <I2C_Slave_AF>
 8003dba:	e016      	b.n	8003dea <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dc4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	f043 0304 	orr.w	r3, r3, #4
 8003dcc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003dce:	7efb      	ldrb	r3, [r7, #27]
 8003dd0:	2b10      	cmp	r3, #16
 8003dd2:	d002      	beq.n	8003dda <HAL_I2C_ER_IRQHandler+0xf4>
 8003dd4:	7efb      	ldrb	r3, [r7, #27]
 8003dd6:	2b40      	cmp	r3, #64	; 0x40
 8003dd8:	d107      	bne.n	8003dea <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	0adb      	lsrs	r3, r3, #11
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00e      	beq.n	8003e14 <HAL_I2C_ER_IRQHandler+0x12e>
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	0a1b      	lsrs	r3, r3, #8
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d008      	beq.n	8003e14 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	f043 0308 	orr.w	r3, r3, #8
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003e12:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d008      	beq.n	8003e2c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	431a      	orrs	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f001 f860 	bl	8004eec <I2C_ITError>
  }
}
 8003e2c:	bf00      	nop
 8003e2e:	3728      	adds	r7, #40	; 0x28
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	70fb      	strb	r3, [r7, #3]
 8003e90:	4613      	mov	r3, r2
 8003e92:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ede:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d150      	bne.n	8003f90 <I2C_MasterTransmit_TXE+0xc8>
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
 8003ef0:	2b21      	cmp	r3, #33	; 0x21
 8003ef2:	d14d      	bne.n	8003f90 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d01d      	beq.n	8003f36 <I2C_MasterTransmit_TXE+0x6e>
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2b20      	cmp	r3, #32
 8003efe:	d01a      	beq.n	8003f36 <I2C_MasterTransmit_TXE+0x6e>
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f06:	d016      	beq.n	8003f36 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f16:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2211      	movs	r2, #17
 8003f1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7ff ff80 	bl	8003e34 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f34:	e060      	b.n	8003ff8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f44:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f54:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b40      	cmp	r3, #64	; 0x40
 8003f6e:	d107      	bne.n	8003f80 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f00c fdb5 	bl	8010ae8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f7e:	e03b      	b.n	8003ff8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7ff ff53 	bl	8003e34 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003f8e:	e033      	b.n	8003ff8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
 8003f92:	2b21      	cmp	r3, #33	; 0x21
 8003f94:	d005      	beq.n	8003fa2 <I2C_MasterTransmit_TXE+0xda>
 8003f96:	7bbb      	ldrb	r3, [r7, #14]
 8003f98:	2b40      	cmp	r3, #64	; 0x40
 8003f9a:	d12d      	bne.n	8003ff8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
 8003f9e:	2b22      	cmp	r3, #34	; 0x22
 8003fa0:	d12a      	bne.n	8003ff8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d108      	bne.n	8003fbe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fba:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003fbc:	e01c      	b.n	8003ff8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b40      	cmp	r3, #64	; 0x40
 8003fc8:	d103      	bne.n	8003fd2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f880 	bl	80040d0 <I2C_MemoryTransmit_TXE_BTF>
}
 8003fd0:	e012      	b.n	8003ff8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	781a      	ldrb	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ff6:	e7ff      	b.n	8003ff8 <I2C_MasterTransmit_TXE+0x130>
 8003ff8:	bf00      	nop
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b21      	cmp	r3, #33	; 0x21
 8004018:	d156      	bne.n	80040c8 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401e:	b29b      	uxth	r3, r3
 8004020:	2b00      	cmp	r3, #0
 8004022:	d012      	beq.n	800404a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	781a      	ldrb	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004048:	e03e      	b.n	80040c8 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2b08      	cmp	r3, #8
 800404e:	d01d      	beq.n	800408c <I2C_MasterTransmit_BTF+0x8c>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2b20      	cmp	r3, #32
 8004054:	d01a      	beq.n	800408c <I2C_MasterTransmit_BTF+0x8c>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800405c:	d016      	beq.n	800408c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800406c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2211      	movs	r2, #17
 8004072:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7ff fed5 	bl	8003e34 <HAL_I2C_MasterTxCpltCallback>
}
 800408a:	e01d      	b.n	80040c8 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800409a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040aa:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2220      	movs	r2, #32
 80040b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7ff feb6 	bl	8003e34 <HAL_I2C_MasterTxCpltCallback>
}
 80040c8:	bf00      	nop
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040de:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d11d      	bne.n	8004124 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d10b      	bne.n	8004108 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004100:	1c9a      	adds	r2, r3, #2
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004106:	e06e      	b.n	80041e6 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800410c:	b29b      	uxth	r3, r3
 800410e:	121b      	asrs	r3, r3, #8
 8004110:	b2da      	uxtb	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004122:	e060      	b.n	80041e6 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004128:	2b01      	cmp	r3, #1
 800412a:	d10b      	bne.n	8004144 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004130:	b2da      	uxtb	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004142:	e050      	b.n	80041e6 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004148:	2b02      	cmp	r3, #2
 800414a:	d14c      	bne.n	80041e6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800414c:	7bfb      	ldrb	r3, [r7, #15]
 800414e:	2b22      	cmp	r3, #34	; 0x22
 8004150:	d108      	bne.n	8004164 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004160:	601a      	str	r2, [r3, #0]
}
 8004162:	e040      	b.n	80041e6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d015      	beq.n	800419a <I2C_MemoryTransmit_TXE_BTF+0xca>
 800416e:	7bfb      	ldrb	r3, [r7, #15]
 8004170:	2b21      	cmp	r3, #33	; 0x21
 8004172:	d112      	bne.n	800419a <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	781a      	ldrb	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004198:	e025      	b.n	80041e6 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419e:	b29b      	uxth	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d120      	bne.n	80041e6 <I2C_MemoryTransmit_TXE_BTF+0x116>
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
 80041a6:	2b21      	cmp	r3, #33	; 0x21
 80041a8:	d11d      	bne.n	80041e6 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041b8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f00c fc81 	bl	8010ae8 <HAL_I2C_MemTxCpltCallback>
}
 80041e6:	bf00      	nop
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b084      	sub	sp, #16
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b22      	cmp	r3, #34	; 0x22
 8004200:	f040 80a2 	bne.w	8004348 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004208:	b29b      	uxth	r3, r3
 800420a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2b03      	cmp	r3, #3
 8004210:	d921      	bls.n	8004256 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b03      	cmp	r3, #3
 8004240:	f040 8082 	bne.w	8004348 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004252:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004254:	e078      	b.n	8004348 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425a:	2b02      	cmp	r3, #2
 800425c:	d074      	beq.n	8004348 <I2C_MasterReceive_RXNE+0x15a>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d002      	beq.n	800426a <I2C_MasterReceive_RXNE+0x7c>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d16e      	bne.n	8004348 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f001 fa06 	bl	800567c <I2C_WaitOnSTOPRequestThroughIT>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d142      	bne.n	80042fc <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004284:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004294:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	691a      	ldr	r2, [r3, #16]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	b2d2      	uxtb	r2, r2
 80042a2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	1c5a      	adds	r2, r3, #1
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2220      	movs	r2, #32
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b40      	cmp	r3, #64	; 0x40
 80042ce:	d10a      	bne.n	80042e6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f00c fc4a 	bl	8010b78 <HAL_I2C_MemRxCpltCallback>
}
 80042e4:	e030      	b.n	8004348 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2212      	movs	r2, #18
 80042f2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff fda7 	bl	8003e48 <HAL_I2C_MasterRxCpltCallback>
}
 80042fa:	e025      	b.n	8004348 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800430a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691a      	ldr	r2, [r3, #16]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004328:	b29b      	uxth	r3, r3
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2220      	movs	r2, #32
 8004336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f00c fc60 	bl	8010c08 <HAL_I2C_ErrorCallback>
}
 8004348:	bf00      	nop
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b04      	cmp	r3, #4
 8004366:	d11b      	bne.n	80043a0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004376:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691a      	ldr	r2, [r3, #16]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004394:	b29b      	uxth	r3, r3
 8004396:	3b01      	subs	r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800439e:	e0bd      	b.n	800451c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d129      	bne.n	80043fe <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d00a      	beq.n	80043d6 <I2C_MasterReceive_BTF+0x86>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d007      	beq.n	80043d6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b29a      	uxth	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80043fc:	e08e      	b.n	800451c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d176      	bne.n	80044f6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d002      	beq.n	8004414 <I2C_MasterReceive_BTF+0xc4>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2b10      	cmp	r3, #16
 8004412:	d108      	bne.n	8004426 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	e019      	b.n	800445a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b04      	cmp	r3, #4
 800442a:	d002      	beq.n	8004432 <I2C_MasterReceive_BTF+0xe2>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d108      	bne.n	8004444 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	e00a      	b.n	800445a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2b10      	cmp	r3, #16
 8004448:	d007      	beq.n	800445a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004458:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	691a      	ldr	r2, [r3, #16]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691a      	ldr	r2, [r3, #16]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	b2d2      	uxtb	r2, r2
 800448c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449c:	b29b      	uxth	r3, r3
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80044b4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b40      	cmp	r3, #64	; 0x40
 80044c8:	d10a      	bne.n	80044e0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f00c fb4d 	bl	8010b78 <HAL_I2C_MemRxCpltCallback>
}
 80044de:	e01d      	b.n	800451c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2212      	movs	r2, #18
 80044ec:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7ff fcaa 	bl	8003e48 <HAL_I2C_MasterRxCpltCallback>
}
 80044f4:	e012      	b.n	800451c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	691a      	ldr	r2, [r3, #16]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800451c:	bf00      	nop
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b40      	cmp	r3, #64	; 0x40
 8004536:	d117      	bne.n	8004568 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800453c:	2b00      	cmp	r3, #0
 800453e:	d109      	bne.n	8004554 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004544:	b2db      	uxtb	r3, r3
 8004546:	461a      	mov	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004550:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004552:	e067      	b.n	8004624 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004558:	b2db      	uxtb	r3, r3
 800455a:	f043 0301 	orr.w	r3, r3, #1
 800455e:	b2da      	uxtb	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	611a      	str	r2, [r3, #16]
}
 8004566:	e05d      	b.n	8004624 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004570:	d133      	bne.n	80045da <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b21      	cmp	r3, #33	; 0x21
 800457c:	d109      	bne.n	8004592 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004582:	b2db      	uxtb	r3, r3
 8004584:	461a      	mov	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800458e:	611a      	str	r2, [r3, #16]
 8004590:	e008      	b.n	80045a4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004596:	b2db      	uxtb	r3, r3
 8004598:	f043 0301 	orr.w	r3, r3, #1
 800459c:	b2da      	uxtb	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d004      	beq.n	80045b6 <I2C_Master_SB+0x92>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d108      	bne.n	80045c8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d032      	beq.n	8004624 <I2C_Master_SB+0x100>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d02d      	beq.n	8004624 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045d6:	605a      	str	r2, [r3, #4]
}
 80045d8:	e024      	b.n	8004624 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10e      	bne.n	8004600 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	11db      	asrs	r3, r3, #7
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	f003 0306 	and.w	r3, r3, #6
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	f063 030f 	orn	r3, r3, #15
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	611a      	str	r2, [r3, #16]
}
 80045fe:	e011      	b.n	8004624 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004604:	2b01      	cmp	r3, #1
 8004606:	d10d      	bne.n	8004624 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460c:	b29b      	uxth	r3, r3
 800460e:	11db      	asrs	r3, r3, #7
 8004610:	b2db      	uxtb	r3, r3
 8004612:	f003 0306 	and.w	r3, r3, #6
 8004616:	b2db      	uxtb	r3, r3
 8004618:	f063 030e 	orn	r3, r3, #14
 800461c:	b2da      	uxtb	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	611a      	str	r2, [r3, #16]
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463c:	b2da      	uxtb	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004648:	2b00      	cmp	r3, #0
 800464a:	d103      	bne.n	8004654 <I2C_Master_ADD10+0x24>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004650:	2b00      	cmp	r3, #0
 8004652:	d011      	beq.n	8004678 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800465a:	2b00      	cmp	r3, #0
 800465c:	d104      	bne.n	8004668 <I2C_Master_ADD10+0x38>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004664:	2b00      	cmp	r3, #0
 8004666:	d007      	beq.n	8004678 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004676:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004684:	b480      	push	{r7}
 8004686:	b091      	sub	sp, #68	; 0x44
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004692:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b22      	cmp	r3, #34	; 0x22
 80046ac:	f040 8169 	bne.w	8004982 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10f      	bne.n	80046d8 <I2C_Master_ADDR+0x54>
 80046b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80046bc:	2b40      	cmp	r3, #64	; 0x40
 80046be:	d10b      	bne.n	80046d8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046c0:	2300      	movs	r3, #0
 80046c2:	633b      	str	r3, [r7, #48]	; 0x30
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	633b      	str	r3, [r7, #48]	; 0x30
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	633b      	str	r3, [r7, #48]	; 0x30
 80046d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d6:	e160      	b.n	800499a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d11d      	bne.n	800471c <I2C_Master_ADDR+0x98>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80046e8:	d118      	bne.n	800471c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ea:	2300      	movs	r3, #0
 80046ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800470e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	651a      	str	r2, [r3, #80]	; 0x50
 800471a:	e13e      	b.n	800499a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d113      	bne.n	800474e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004726:	2300      	movs	r3, #0
 8004728:	62bb      	str	r3, [r7, #40]	; 0x28
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	62bb      	str	r3, [r7, #40]	; 0x28
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	62bb      	str	r3, [r7, #40]	; 0x28
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	e115      	b.n	800497a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004752:	b29b      	uxth	r3, r3
 8004754:	2b01      	cmp	r3, #1
 8004756:	f040 808a 	bne.w	800486e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800475a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004760:	d137      	bne.n	80047d2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004770:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800477c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004780:	d113      	bne.n	80047aa <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004790:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004792:	2300      	movs	r3, #0
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	627b      	str	r3, [r7, #36]	; 0x24
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	e0e7      	b.n	800497a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047aa:	2300      	movs	r3, #0
 80047ac:	623b      	str	r3, [r7, #32]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	623b      	str	r3, [r7, #32]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	623b      	str	r3, [r7, #32]
 80047be:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	e0d3      	b.n	800497a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80047d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d02e      	beq.n	8004836 <I2C_Master_ADDR+0x1b2>
 80047d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047da:	2b20      	cmp	r3, #32
 80047dc:	d02b      	beq.n	8004836 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80047de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e0:	2b12      	cmp	r3, #18
 80047e2:	d102      	bne.n	80047ea <I2C_Master_ADDR+0x166>
 80047e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d125      	bne.n	8004836 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80047ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d00e      	beq.n	800480e <I2C_Master_ADDR+0x18a>
 80047f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d00b      	beq.n	800480e <I2C_Master_ADDR+0x18a>
 80047f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f8:	2b10      	cmp	r3, #16
 80047fa:	d008      	beq.n	800480e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	e007      	b.n	800481e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800481c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800481e:	2300      	movs	r3, #0
 8004820:	61fb      	str	r3, [r7, #28]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	61fb      	str	r3, [r7, #28]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	61fb      	str	r3, [r7, #28]
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	e0a1      	b.n	800497a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004844:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004846:	2300      	movs	r3, #0
 8004848:	61bb      	str	r3, [r7, #24]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	61bb      	str	r3, [r7, #24]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	61bb      	str	r3, [r7, #24]
 800485a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	e085      	b.n	800497a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004872:	b29b      	uxth	r3, r3
 8004874:	2b02      	cmp	r3, #2
 8004876:	d14d      	bne.n	8004914 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487a:	2b04      	cmp	r3, #4
 800487c:	d016      	beq.n	80048ac <I2C_Master_ADDR+0x228>
 800487e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004880:	2b02      	cmp	r3, #2
 8004882:	d013      	beq.n	80048ac <I2C_Master_ADDR+0x228>
 8004884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004886:	2b10      	cmp	r3, #16
 8004888:	d010      	beq.n	80048ac <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004898:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	e007      	b.n	80048bc <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048ba:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ca:	d117      	bne.n	80048fc <I2C_Master_ADDR+0x278>
 80048cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048d2:	d00b      	beq.n	80048ec <I2C_Master_ADDR+0x268>
 80048d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d008      	beq.n	80048ec <I2C_Master_ADDR+0x268>
 80048da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d005      	beq.n	80048ec <I2C_Master_ADDR+0x268>
 80048e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e2:	2b10      	cmp	r3, #16
 80048e4:	d002      	beq.n	80048ec <I2C_Master_ADDR+0x268>
 80048e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	d107      	bne.n	80048fc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048fa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048fc:	2300      	movs	r3, #0
 80048fe:	617b      	str	r3, [r7, #20]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	617b      	str	r3, [r7, #20]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	617b      	str	r3, [r7, #20]
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	e032      	b.n	800497a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004922:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800492e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004932:	d117      	bne.n	8004964 <I2C_Master_ADDR+0x2e0>
 8004934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004936:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800493a:	d00b      	beq.n	8004954 <I2C_Master_ADDR+0x2d0>
 800493c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493e:	2b01      	cmp	r3, #1
 8004940:	d008      	beq.n	8004954 <I2C_Master_ADDR+0x2d0>
 8004942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004944:	2b08      	cmp	r3, #8
 8004946:	d005      	beq.n	8004954 <I2C_Master_ADDR+0x2d0>
 8004948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494a:	2b10      	cmp	r3, #16
 800494c:	d002      	beq.n	8004954 <I2C_Master_ADDR+0x2d0>
 800494e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004950:	2b20      	cmp	r3, #32
 8004952:	d107      	bne.n	8004964 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004962:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004964:	2300      	movs	r3, #0
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	613b      	str	r3, [r7, #16]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	613b      	str	r3, [r7, #16]
 8004978:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004980:	e00b      	b.n	800499a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004982:	2300      	movs	r3, #0
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	68fb      	ldr	r3, [r7, #12]
}
 8004998:	e7ff      	b.n	800499a <I2C_Master_ADDR+0x316>
 800499a:	bf00      	nop
 800499c:	3744      	adds	r7, #68	; 0x44
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b084      	sub	sp, #16
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d02b      	beq.n	8004a18 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	781a      	ldrb	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049da:	b29b      	uxth	r3, r3
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d114      	bne.n	8004a18 <I2C_SlaveTransmit_TXE+0x72>
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
 80049f0:	2b29      	cmp	r3, #41	; 0x29
 80049f2:	d111      	bne.n	8004a18 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a02:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2221      	movs	r2, #33	; 0x21
 8004a08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2228      	movs	r2, #40	; 0x28
 8004a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff fa22 	bl	8003e5c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004a18:	bf00      	nop
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d011      	beq.n	8004a56 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	781a      	ldrb	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b084      	sub	sp, #16
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a70:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d02c      	beq.n	8004ad6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	691a      	ldr	r2, [r3, #16]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	b2d2      	uxtb	r2, r2
 8004a88:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d114      	bne.n	8004ad6 <I2C_SlaveReceive_RXNE+0x74>
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	2b2a      	cmp	r3, #42	; 0x2a
 8004ab0:	d111      	bne.n	8004ad6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ac0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2222      	movs	r2, #34	; 0x22
 8004ac6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2228      	movs	r2, #40	; 0x28
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7ff f9cd 	bl	8003e70 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004ad6:	bf00      	nop
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d012      	beq.n	8004b16 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	691a      	ldr	r2, [r3, #16]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b084      	sub	sp, #16
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
 8004b2a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b3c:	2b28      	cmp	r3, #40	; 0x28
 8004b3e:	d127      	bne.n	8004b90 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b4e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	089b      	lsrs	r3, r3, #2
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	09db      	lsrs	r3, r3, #7
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d103      	bne.n	8004b74 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	81bb      	strh	r3, [r7, #12]
 8004b72:	e002      	b.n	8004b7a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004b82:	89ba      	ldrh	r2, [r7, #12]
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
 8004b86:	4619      	mov	r1, r3
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7ff f97b 	bl	8003e84 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004b8e:	e008      	b.n	8004ba2 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0202 	mvn.w	r2, #2
 8004b98:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004ba2:	bf00      	nop
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
	...

08004bac <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bba:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bca:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004bcc:	2300      	movs	r3, #0
 8004bce:	60bb      	str	r3, [r7, #8]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	60bb      	str	r3, [r7, #8]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f042 0201 	orr.w	r2, r2, #1
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c08:	d172      	bne.n	8004cf0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
 8004c0c:	2b22      	cmp	r3, #34	; 0x22
 8004c0e:	d002      	beq.n	8004c16 <I2C_Slave_STOPF+0x6a>
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
 8004c12:	2b2a      	cmp	r3, #42	; 0x2a
 8004c14:	d135      	bne.n	8004c82 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d005      	beq.n	8004c3a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	f043 0204 	orr.w	r2, r3, #4
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c48:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fe f8dc 	bl	8002e0c <HAL_DMA_GetState>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d049      	beq.n	8004cee <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5e:	4a69      	ldr	r2, [pc, #420]	; (8004e04 <I2C_Slave_STOPF+0x258>)
 8004c60:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fd ff24 	bl	8002ab4 <HAL_DMA_Abort_IT>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d03d      	beq.n	8004cee <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c80:	e035      	b.n	8004cee <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d005      	beq.n	8004ca6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	f043 0204 	orr.w	r2, r3, #4
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cb4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fe f8a6 	bl	8002e0c <HAL_DMA_GetState>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d014      	beq.n	8004cf0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cca:	4a4e      	ldr	r2, [pc, #312]	; (8004e04 <I2C_Slave_STOPF+0x258>)
 8004ccc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fd feee 	bl	8002ab4 <HAL_DMA_Abort_IT>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d008      	beq.n	8004cf0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ce8:	4610      	mov	r0, r2
 8004cea:	4798      	blx	r3
 8004cec:	e000      	b.n	8004cf0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cee:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d03e      	beq.n	8004d78 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b04      	cmp	r3, #4
 8004d06:	d112      	bne.n	8004d2e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	691a      	ldr	r2, [r3, #16]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d12:	b2d2      	uxtb	r2, r2
 8004d14:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	3b01      	subs	r3, #1
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d38:	2b40      	cmp	r3, #64	; 0x40
 8004d3a:	d112      	bne.n	8004d62 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691a      	ldr	r2, [r3, #16]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	b29a      	uxth	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d005      	beq.n	8004d78 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d70:	f043 0204 	orr.w	r2, r3, #4
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f8b3 	bl	8004eec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004d86:	e039      	b.n	8004dfc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
 8004d8a:	2b2a      	cmp	r3, #42	; 0x2a
 8004d8c:	d109      	bne.n	8004da2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2228      	movs	r2, #40	; 0x28
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7ff f867 	bl	8003e70 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b28      	cmp	r3, #40	; 0x28
 8004dac:	d111      	bne.n	8004dd2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a15      	ldr	r2, [pc, #84]	; (8004e08 <I2C_Slave_STOPF+0x25c>)
 8004db2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7ff f868 	bl	8003ea0 <HAL_I2C_ListenCpltCallback>
}
 8004dd0:	e014      	b.n	8004dfc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd6:	2b22      	cmp	r3, #34	; 0x22
 8004dd8:	d002      	beq.n	8004de0 <I2C_Slave_STOPF+0x234>
 8004dda:	7bfb      	ldrb	r3, [r7, #15]
 8004ddc:	2b22      	cmp	r3, #34	; 0x22
 8004dde:	d10d      	bne.n	8004dfc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7ff f83a 	bl	8003e70 <HAL_I2C_SlaveRxCpltCallback>
}
 8004dfc:	bf00      	nop
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	0800527d 	.word	0x0800527d
 8004e08:	ffff0000 	.word	0xffff0000

08004e0c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e20:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d002      	beq.n	8004e2e <I2C_Slave_AF+0x22>
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b20      	cmp	r3, #32
 8004e2c:	d129      	bne.n	8004e82 <I2C_Slave_AF+0x76>
 8004e2e:	7bfb      	ldrb	r3, [r7, #15]
 8004e30:	2b28      	cmp	r3, #40	; 0x28
 8004e32:	d126      	bne.n	8004e82 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a2c      	ldr	r2, [pc, #176]	; (8004ee8 <I2C_Slave_AF+0xdc>)
 8004e38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e48:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e52:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e62:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7ff f810 	bl	8003ea0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004e80:	e02e      	b.n	8004ee0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004e82:	7bfb      	ldrb	r3, [r7, #15]
 8004e84:	2b21      	cmp	r3, #33	; 0x21
 8004e86:	d126      	bne.n	8004ed6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a17      	ldr	r2, [pc, #92]	; (8004ee8 <I2C_Slave_AF+0xdc>)
 8004e8c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2221      	movs	r2, #33	; 0x21
 8004e92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004eb2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ebc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ecc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7fe ffc4 	bl	8003e5c <HAL_I2C_SlaveTxCpltCallback>
}
 8004ed4:	e004      	b.n	8004ee0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ede:	615a      	str	r2, [r3, #20]
}
 8004ee0:	bf00      	nop
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	ffff0000 	.word	0xffff0000

08004eec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004efa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f02:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f04:	7bbb      	ldrb	r3, [r7, #14]
 8004f06:	2b10      	cmp	r3, #16
 8004f08:	d002      	beq.n	8004f10 <I2C_ITError+0x24>
 8004f0a:	7bbb      	ldrb	r3, [r7, #14]
 8004f0c:	2b40      	cmp	r3, #64	; 0x40
 8004f0e:	d10a      	bne.n	8004f26 <I2C_ITError+0x3a>
 8004f10:	7bfb      	ldrb	r3, [r7, #15]
 8004f12:	2b22      	cmp	r3, #34	; 0x22
 8004f14:	d107      	bne.n	8004f26 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f24:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f26:	7bfb      	ldrb	r3, [r7, #15]
 8004f28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f2c:	2b28      	cmp	r3, #40	; 0x28
 8004f2e:	d107      	bne.n	8004f40 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2228      	movs	r2, #40	; 0x28
 8004f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f3e:	e015      	b.n	8004f6c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f4e:	d00a      	beq.n	8004f66 <I2C_ITError+0x7a>
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	2b60      	cmp	r3, #96	; 0x60
 8004f54:	d007      	beq.n	8004f66 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f7a:	d162      	bne.n	8005042 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f8a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d020      	beq.n	8004fdc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f9e:	4a6a      	ldr	r2, [pc, #424]	; (8005148 <I2C_ITError+0x25c>)
 8004fa0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fd fd84 	bl	8002ab4 <HAL_DMA_Abort_IT>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 8089 	beq.w	80050c6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0201 	bic.w	r2, r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	4798      	blx	r3
 8004fda:	e074      	b.n	80050c6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe0:	4a59      	ldr	r2, [pc, #356]	; (8005148 <I2C_ITError+0x25c>)
 8004fe2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fd fd63 	bl	8002ab4 <HAL_DMA_Abort_IT>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d068      	beq.n	80050c6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffe:	2b40      	cmp	r3, #64	; 0x40
 8005000:	d10b      	bne.n	800501a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	b2d2      	uxtb	r2, r2
 800500e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 0201 	bic.w	r2, r2, #1
 8005028:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2220      	movs	r2, #32
 800502e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800503c:	4610      	mov	r0, r2
 800503e:	4798      	blx	r3
 8005040:	e041      	b.n	80050c6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b60      	cmp	r3, #96	; 0x60
 800504c:	d125      	bne.n	800509a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2220      	movs	r2, #32
 8005052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005066:	2b40      	cmp	r3, #64	; 0x40
 8005068:	d10b      	bne.n	8005082 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	691a      	ldr	r2, [r3, #16]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	1c5a      	adds	r2, r3, #1
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f7fe ff0e 	bl	8003eb4 <HAL_I2C_AbortCpltCallback>
 8005098:	e015      	b.n	80050c6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a4:	2b40      	cmp	r3, #64	; 0x40
 80050a6:	d10b      	bne.n	80050c0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	691a      	ldr	r2, [r3, #16]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	b2d2      	uxtb	r2, r2
 80050b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f00b fda1 	bl	8010c08 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10e      	bne.n	80050f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d109      	bne.n	80050f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d104      	bne.n	80050f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d007      	beq.n	8005104 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005102:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800510a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005110:	f003 0304 	and.w	r3, r3, #4
 8005114:	2b04      	cmp	r3, #4
 8005116:	d113      	bne.n	8005140 <I2C_ITError+0x254>
 8005118:	7bfb      	ldrb	r3, [r7, #15]
 800511a:	2b28      	cmp	r3, #40	; 0x28
 800511c:	d110      	bne.n	8005140 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a0a      	ldr	r2, [pc, #40]	; (800514c <I2C_ITError+0x260>)
 8005122:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2220      	movs	r2, #32
 800512e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fe feb0 	bl	8003ea0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005140:	bf00      	nop
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	0800527d 	.word	0x0800527d
 800514c:	ffff0000 	.word	0xffff0000

08005150 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b088      	sub	sp, #32
 8005154:	af02      	add	r7, sp, #8
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	4608      	mov	r0, r1
 800515a:	4611      	mov	r1, r2
 800515c:	461a      	mov	r2, r3
 800515e:	4603      	mov	r3, r0
 8005160:	817b      	strh	r3, [r7, #10]
 8005162:	460b      	mov	r3, r1
 8005164:	813b      	strh	r3, [r7, #8]
 8005166:	4613      	mov	r3, r2
 8005168:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005178:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	2200      	movs	r2, #0
 8005182:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 f920 	bl	80053cc <I2C_WaitOnFlagUntilTimeout>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00d      	beq.n	80051ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a0:	d103      	bne.n	80051aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e05f      	b.n	800526e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051ae:	897b      	ldrh	r3, [r7, #10]
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	461a      	mov	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	6a3a      	ldr	r2, [r7, #32]
 80051c2:	492d      	ldr	r1, [pc, #180]	; (8005278 <I2C_RequestMemoryWrite+0x128>)
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 f958 	bl	800547a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e04c      	b.n	800526e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051d4:	2300      	movs	r3, #0
 80051d6:	617b      	str	r3, [r7, #20]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	617b      	str	r3, [r7, #20]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ec:	6a39      	ldr	r1, [r7, #32]
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 f9c2 	bl	8005578 <I2C_WaitOnTXEFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00d      	beq.n	8005216 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d107      	bne.n	8005212 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005210:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e02b      	b.n	800526e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005216:	88fb      	ldrh	r3, [r7, #6]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d105      	bne.n	8005228 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800521c:	893b      	ldrh	r3, [r7, #8]
 800521e:	b2da      	uxtb	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	611a      	str	r2, [r3, #16]
 8005226:	e021      	b.n	800526c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005228:	893b      	ldrh	r3, [r7, #8]
 800522a:	0a1b      	lsrs	r3, r3, #8
 800522c:	b29b      	uxth	r3, r3
 800522e:	b2da      	uxtb	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005238:	6a39      	ldr	r1, [r7, #32]
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 f99c 	bl	8005578 <I2C_WaitOnTXEFlagUntilTimeout>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00d      	beq.n	8005262 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	2b04      	cmp	r3, #4
 800524c:	d107      	bne.n	800525e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800525c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e005      	b.n	800526e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005262:	893b      	ldrh	r3, [r7, #8]
 8005264:	b2da      	uxtb	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3718      	adds	r7, #24
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	00010002 	.word	0x00010002

0800527c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005294:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005296:	4b4b      	ldr	r3, [pc, #300]	; (80053c4 <I2C_DMAAbort+0x148>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	08db      	lsrs	r3, r3, #3
 800529c:	4a4a      	ldr	r2, [pc, #296]	; (80053c8 <I2C_DMAAbort+0x14c>)
 800529e:	fba2 2303 	umull	r2, r3, r2, r3
 80052a2:	0a1a      	lsrs	r2, r3, #8
 80052a4:	4613      	mov	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	00da      	lsls	r2, r3, #3
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d106      	bne.n	80052c4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	f043 0220 	orr.w	r2, r3, #32
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80052c2:	e00a      	b.n	80052da <I2C_DMAAbort+0x5e>
    }
    count--;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052d8:	d0ea      	beq.n	80052b0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e6:	2200      	movs	r2, #0
 80052e8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f6:	2200      	movs	r2, #0
 80052f8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005308:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2200      	movs	r2, #0
 800530e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531c:	2200      	movs	r2, #0
 800531e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532c:	2200      	movs	r2, #0
 800532e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 0201 	bic.w	r2, r2, #1
 800533e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b60      	cmp	r3, #96	; 0x60
 800534a:	d10e      	bne.n	800536a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	2220      	movs	r2, #32
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	2200      	movs	r2, #0
 8005360:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005362:	6978      	ldr	r0, [r7, #20]
 8005364:	f7fe fda6 	bl	8003eb4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005368:	e027      	b.n	80053ba <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800536a:	7cfb      	ldrb	r3, [r7, #19]
 800536c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005370:	2b28      	cmp	r3, #40	; 0x28
 8005372:	d117      	bne.n	80053a4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0201 	orr.w	r2, r2, #1
 8005382:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005392:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	2200      	movs	r2, #0
 8005398:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2228      	movs	r2, #40	; 0x28
 800539e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80053a2:	e007      	b.n	80053b4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	2220      	movs	r2, #32
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80053b4:	6978      	ldr	r0, [r7, #20]
 80053b6:	f00b fc27 	bl	8010c08 <HAL_I2C_ErrorCallback>
}
 80053ba:	bf00      	nop
 80053bc:	3718      	adds	r7, #24
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	20000000 	.word	0x20000000
 80053c8:	14f8b589 	.word	0x14f8b589

080053cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	603b      	str	r3, [r7, #0]
 80053d8:	4613      	mov	r3, r2
 80053da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053dc:	e025      	b.n	800542a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053e4:	d021      	beq.n	800542a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053e6:	f7fc fd79 	bl	8001edc <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d302      	bcc.n	80053fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d116      	bne.n	800542a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2220      	movs	r2, #32
 8005406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	f043 0220 	orr.w	r2, r3, #32
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e023      	b.n	8005472 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	0c1b      	lsrs	r3, r3, #16
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b01      	cmp	r3, #1
 8005432:	d10d      	bne.n	8005450 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	43da      	mvns	r2, r3
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	4013      	ands	r3, r2
 8005440:	b29b      	uxth	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	bf0c      	ite	eq
 8005446:	2301      	moveq	r3, #1
 8005448:	2300      	movne	r3, #0
 800544a:	b2db      	uxtb	r3, r3
 800544c:	461a      	mov	r2, r3
 800544e:	e00c      	b.n	800546a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	43da      	mvns	r2, r3
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	4013      	ands	r3, r2
 800545c:	b29b      	uxth	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	bf0c      	ite	eq
 8005462:	2301      	moveq	r3, #1
 8005464:	2300      	movne	r3, #0
 8005466:	b2db      	uxtb	r3, r3
 8005468:	461a      	mov	r2, r3
 800546a:	79fb      	ldrb	r3, [r7, #7]
 800546c:	429a      	cmp	r2, r3
 800546e:	d0b6      	beq.n	80053de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b084      	sub	sp, #16
 800547e:	af00      	add	r7, sp, #0
 8005480:	60f8      	str	r0, [r7, #12]
 8005482:	60b9      	str	r1, [r7, #8]
 8005484:	607a      	str	r2, [r7, #4]
 8005486:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005488:	e051      	b.n	800552e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005498:	d123      	bne.n	80054e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2220      	movs	r2, #32
 80054be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	f043 0204 	orr.w	r2, r3, #4
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e046      	b.n	8005570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054e8:	d021      	beq.n	800552e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ea:	f7fc fcf7 	bl	8001edc <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d302      	bcc.n	8005500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d116      	bne.n	800552e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2220      	movs	r2, #32
 800550a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	f043 0220 	orr.w	r2, r3, #32
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e020      	b.n	8005570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	0c1b      	lsrs	r3, r3, #16
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b01      	cmp	r3, #1
 8005536:	d10c      	bne.n	8005552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	43da      	mvns	r2, r3
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	4013      	ands	r3, r2
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	bf14      	ite	ne
 800554a:	2301      	movne	r3, #1
 800554c:	2300      	moveq	r3, #0
 800554e:	b2db      	uxtb	r3, r3
 8005550:	e00b      	b.n	800556a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	699b      	ldr	r3, [r3, #24]
 8005558:	43da      	mvns	r2, r3
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	4013      	ands	r3, r2
 800555e:	b29b      	uxth	r3, r3
 8005560:	2b00      	cmp	r3, #0
 8005562:	bf14      	ite	ne
 8005564:	2301      	movne	r3, #1
 8005566:	2300      	moveq	r3, #0
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d18d      	bne.n	800548a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005584:	e02d      	b.n	80055e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 f8aa 	bl	80056e0 <I2C_IsAcknowledgeFailed>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e02d      	b.n	80055f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800559c:	d021      	beq.n	80055e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800559e:	f7fc fc9d 	bl	8001edc <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d302      	bcc.n	80055b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d116      	bne.n	80055e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2220      	movs	r2, #32
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	f043 0220 	orr.w	r2, r3, #32
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e007      	b.n	80055f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ec:	2b80      	cmp	r3, #128	; 0x80
 80055ee:	d1ca      	bne.n	8005586 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b084      	sub	sp, #16
 80055fe:	af00      	add	r7, sp, #0
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005606:	e02d      	b.n	8005664 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 f869 	bl	80056e0 <I2C_IsAcknowledgeFailed>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e02d      	b.n	8005674 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800561e:	d021      	beq.n	8005664 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005620:	f7fc fc5c 	bl	8001edc <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	429a      	cmp	r2, r3
 800562e:	d302      	bcc.n	8005636 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d116      	bne.n	8005664 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2220      	movs	r2, #32
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	f043 0220 	orr.w	r2, r3, #32
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e007      	b.n	8005674 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	f003 0304 	and.w	r3, r3, #4
 800566e:	2b04      	cmp	r3, #4
 8005670:	d1ca      	bne.n	8005608 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005688:	4b13      	ldr	r3, [pc, #76]	; (80056d8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	08db      	lsrs	r3, r3, #3
 800568e:	4a13      	ldr	r2, [pc, #76]	; (80056dc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005690:	fba2 2303 	umull	r2, r3, r2, r3
 8005694:	0a1a      	lsrs	r2, r3, #8
 8005696:	4613      	mov	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4413      	add	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d107      	bne.n	80056ba <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	f043 0220 	orr.w	r2, r3, #32
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e008      	b.n	80056cc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056c8:	d0e9      	beq.n	800569e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	20000000 	.word	0x20000000
 80056dc:	14f8b589 	.word	0x14f8b589

080056e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056f6:	d11b      	bne.n	8005730 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005700:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571c:	f043 0204 	orr.w	r2, r3, #4
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e000      	b.n	8005732 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800574e:	d103      	bne.n	8005758 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005756:	e007      	b.n	8005768 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005760:	d102      	bne.n	8005768 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2208      	movs	r2, #8
 8005766:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005776:	b08f      	sub	sp, #60	; 0x3c
 8005778:	af0a      	add	r7, sp, #40	; 0x28
 800577a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e10f      	b.n	80059a6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d106      	bne.n	80057a6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f00a fb19 	bl	800fdd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2203      	movs	r2, #3
 80057aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d102      	bne.n	80057c0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f004 f948 	bl	8009a5a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	603b      	str	r3, [r7, #0]
 80057d0:	687e      	ldr	r6, [r7, #4]
 80057d2:	466d      	mov	r5, sp
 80057d4:	f106 0410 	add.w	r4, r6, #16
 80057d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80057e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80057e8:	1d33      	adds	r3, r6, #4
 80057ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057ec:	6838      	ldr	r0, [r7, #0]
 80057ee:	f004 f81f 	bl	8009830 <USB_CoreInit>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d005      	beq.n	8005804 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e0d0      	b.n	80059a6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2100      	movs	r1, #0
 800580a:	4618      	mov	r0, r3
 800580c:	f004 f936 	bl	8009a7c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005810:	2300      	movs	r3, #0
 8005812:	73fb      	strb	r3, [r7, #15]
 8005814:	e04a      	b.n	80058ac <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005816:	7bfa      	ldrb	r2, [r7, #15]
 8005818:	6879      	ldr	r1, [r7, #4]
 800581a:	4613      	mov	r3, r2
 800581c:	00db      	lsls	r3, r3, #3
 800581e:	1a9b      	subs	r3, r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	440b      	add	r3, r1
 8005824:	333d      	adds	r3, #61	; 0x3d
 8005826:	2201      	movs	r2, #1
 8005828:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800582a:	7bfa      	ldrb	r2, [r7, #15]
 800582c:	6879      	ldr	r1, [r7, #4]
 800582e:	4613      	mov	r3, r2
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	1a9b      	subs	r3, r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	440b      	add	r3, r1
 8005838:	333c      	adds	r3, #60	; 0x3c
 800583a:	7bfa      	ldrb	r2, [r7, #15]
 800583c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800583e:	7bfa      	ldrb	r2, [r7, #15]
 8005840:	7bfb      	ldrb	r3, [r7, #15]
 8005842:	b298      	uxth	r0, r3
 8005844:	6879      	ldr	r1, [r7, #4]
 8005846:	4613      	mov	r3, r2
 8005848:	00db      	lsls	r3, r3, #3
 800584a:	1a9b      	subs	r3, r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	440b      	add	r3, r1
 8005850:	3342      	adds	r3, #66	; 0x42
 8005852:	4602      	mov	r2, r0
 8005854:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005856:	7bfa      	ldrb	r2, [r7, #15]
 8005858:	6879      	ldr	r1, [r7, #4]
 800585a:	4613      	mov	r3, r2
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	1a9b      	subs	r3, r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	440b      	add	r3, r1
 8005864:	333f      	adds	r3, #63	; 0x3f
 8005866:	2200      	movs	r2, #0
 8005868:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800586a:	7bfa      	ldrb	r2, [r7, #15]
 800586c:	6879      	ldr	r1, [r7, #4]
 800586e:	4613      	mov	r3, r2
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	1a9b      	subs	r3, r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	440b      	add	r3, r1
 8005878:	3344      	adds	r3, #68	; 0x44
 800587a:	2200      	movs	r2, #0
 800587c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800587e:	7bfa      	ldrb	r2, [r7, #15]
 8005880:	6879      	ldr	r1, [r7, #4]
 8005882:	4613      	mov	r3, r2
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	1a9b      	subs	r3, r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	440b      	add	r3, r1
 800588c:	3348      	adds	r3, #72	; 0x48
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005892:	7bfa      	ldrb	r2, [r7, #15]
 8005894:	6879      	ldr	r1, [r7, #4]
 8005896:	4613      	mov	r3, r2
 8005898:	00db      	lsls	r3, r3, #3
 800589a:	1a9b      	subs	r3, r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	440b      	add	r3, r1
 80058a0:	3350      	adds	r3, #80	; 0x50
 80058a2:	2200      	movs	r2, #0
 80058a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
 80058a8:	3301      	adds	r3, #1
 80058aa:	73fb      	strb	r3, [r7, #15]
 80058ac:	7bfa      	ldrb	r2, [r7, #15]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d3af      	bcc.n	8005816 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058b6:	2300      	movs	r3, #0
 80058b8:	73fb      	strb	r3, [r7, #15]
 80058ba:	e044      	b.n	8005946 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80058bc:	7bfa      	ldrb	r2, [r7, #15]
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	4613      	mov	r3, r2
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	1a9b      	subs	r3, r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	440b      	add	r3, r1
 80058ca:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80058ce:	2200      	movs	r2, #0
 80058d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80058d2:	7bfa      	ldrb	r2, [r7, #15]
 80058d4:	6879      	ldr	r1, [r7, #4]
 80058d6:	4613      	mov	r3, r2
 80058d8:	00db      	lsls	r3, r3, #3
 80058da:	1a9b      	subs	r3, r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	440b      	add	r3, r1
 80058e0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80058e4:	7bfa      	ldrb	r2, [r7, #15]
 80058e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80058e8:	7bfa      	ldrb	r2, [r7, #15]
 80058ea:	6879      	ldr	r1, [r7, #4]
 80058ec:	4613      	mov	r3, r2
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	1a9b      	subs	r3, r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	440b      	add	r3, r1
 80058f6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80058fa:	2200      	movs	r2, #0
 80058fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80058fe:	7bfa      	ldrb	r2, [r7, #15]
 8005900:	6879      	ldr	r1, [r7, #4]
 8005902:	4613      	mov	r3, r2
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	1a9b      	subs	r3, r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	440b      	add	r3, r1
 800590c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005914:	7bfa      	ldrb	r2, [r7, #15]
 8005916:	6879      	ldr	r1, [r7, #4]
 8005918:	4613      	mov	r3, r2
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	1a9b      	subs	r3, r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	440b      	add	r3, r1
 8005922:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005926:	2200      	movs	r2, #0
 8005928:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800592a:	7bfa      	ldrb	r2, [r7, #15]
 800592c:	6879      	ldr	r1, [r7, #4]
 800592e:	4613      	mov	r3, r2
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	1a9b      	subs	r3, r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	440b      	add	r3, r1
 8005938:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800593c:	2200      	movs	r2, #0
 800593e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005940:	7bfb      	ldrb	r3, [r7, #15]
 8005942:	3301      	adds	r3, #1
 8005944:	73fb      	strb	r3, [r7, #15]
 8005946:	7bfa      	ldrb	r2, [r7, #15]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	429a      	cmp	r2, r3
 800594e:	d3b5      	bcc.n	80058bc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	603b      	str	r3, [r7, #0]
 8005956:	687e      	ldr	r6, [r7, #4]
 8005958:	466d      	mov	r5, sp
 800595a:	f106 0410 	add.w	r4, r6, #16
 800595e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005960:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005966:	e894 0003 	ldmia.w	r4, {r0, r1}
 800596a:	e885 0003 	stmia.w	r5, {r0, r1}
 800596e:	1d33      	adds	r3, r6, #4
 8005970:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005972:	6838      	ldr	r0, [r7, #0]
 8005974:	f004 f8ac 	bl	8009ad0 <USB_DevInit>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d005      	beq.n	800598a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2202      	movs	r2, #2
 8005982:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e00d      	b.n	80059a6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4618      	mov	r0, r3
 80059a0:	f005 f8f4 	bl	800ab8c <USB_DevDisconnect>

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059ae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b084      	sub	sp, #16
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <HAL_PCD_Start+0x1c>
 80059c6:	2302      	movs	r3, #2
 80059c8:	e020      	b.n	8005a0c <HAL_PCD_Start+0x5e>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d109      	bne.n	80059ee <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d005      	beq.n	80059ee <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f004 f820 	bl	8009a38 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f005 f8a4 	bl	800ab4a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005a14:	b590      	push	{r4, r7, lr}
 8005a16:	b08d      	sub	sp, #52	; 0x34
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f005 f962 	bl	800acf4 <USB_GetMode>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f040 839d 	bne.w	8006172 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f005 f8c6 	bl	800abce <USB_ReadInterrupts>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 8393 	beq.w	8006170 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f005 f8bd 	bl	800abce <USB_ReadInterrupts>
 8005a54:	4603      	mov	r3, r0
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d107      	bne.n	8005a6e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	695a      	ldr	r2, [r3, #20]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f002 0202 	and.w	r2, r2, #2
 8005a6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f005 f8ab 	bl	800abce <USB_ReadInterrupts>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	f003 0310 	and.w	r3, r3, #16
 8005a7e:	2b10      	cmp	r3, #16
 8005a80:	d161      	bne.n	8005b46 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	699a      	ldr	r2, [r3, #24]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 0210 	bic.w	r2, r2, #16
 8005a90:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	f003 020f 	and.w	r2, r3, #15
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	1a9b      	subs	r3, r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	4413      	add	r3, r2
 8005aae:	3304      	adds	r3, #4
 8005ab0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	0c5b      	lsrs	r3, r3, #17
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d124      	bne.n	8005b08 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d035      	beq.n	8005b36 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	091b      	lsrs	r3, r3, #4
 8005ad2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005ad4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	461a      	mov	r2, r3
 8005adc:	6a38      	ldr	r0, [r7, #32]
 8005ade:	f004 ff11 	bl	800a904 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	091b      	lsrs	r3, r3, #4
 8005aea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005aee:	441a      	add	r2, r3
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	699a      	ldr	r2, [r3, #24]
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	091b      	lsrs	r3, r3, #4
 8005afc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b00:	441a      	add	r2, r3
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	619a      	str	r2, [r3, #24]
 8005b06:	e016      	b.n	8005b36 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	0c5b      	lsrs	r3, r3, #17
 8005b0c:	f003 030f 	and.w	r3, r3, #15
 8005b10:	2b06      	cmp	r3, #6
 8005b12:	d110      	bne.n	8005b36 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b1a:	2208      	movs	r2, #8
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	6a38      	ldr	r0, [r7, #32]
 8005b20:	f004 fef0 	bl	800a904 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	699a      	ldr	r2, [r3, #24]
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	091b      	lsrs	r3, r3, #4
 8005b2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b30:	441a      	add	r2, r3
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	699a      	ldr	r2, [r3, #24]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f042 0210 	orr.w	r2, r2, #16
 8005b44:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f005 f83f 	bl	800abce <USB_ReadInterrupts>
 8005b50:	4603      	mov	r3, r0
 8005b52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b56:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b5a:	d16e      	bne.n	8005c3a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f005 f845 	bl	800abf4 <USB_ReadDevAllOutEpInterrupt>
 8005b6a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005b6c:	e062      	b.n	8005c34 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d057      	beq.n	8005c28 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b7e:	b2d2      	uxtb	r2, r2
 8005b80:	4611      	mov	r1, r2
 8005b82:	4618      	mov	r0, r3
 8005b84:	f005 f86a 	bl	800ac5c <USB_ReadDevOutEPInterrupt>
 8005b88:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00c      	beq.n	8005bae <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005ba6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 fdb1 	bl	8006710 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f003 0308 	and.w	r3, r3, #8
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00c      	beq.n	8005bd2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	2308      	movs	r3, #8
 8005bc8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005bca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 feab 	bl	8006928 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f003 0310 	and.w	r3, r3, #16
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d008      	beq.n	8005bee <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be8:	461a      	mov	r2, r3
 8005bea:	2310      	movs	r3, #16
 8005bec:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	f003 0320 	and.w	r3, r3, #32
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d008      	beq.n	8005c0a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c04:	461a      	mov	r2, r3
 8005c06:	2320      	movs	r3, #32
 8005c08:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d009      	beq.n	8005c28 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c20:	461a      	mov	r2, r3
 8005c22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c26:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c30:	085b      	lsrs	r3, r3, #1
 8005c32:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d199      	bne.n	8005b6e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f004 ffc5 	bl	800abce <USB_ReadInterrupts>
 8005c44:	4603      	mov	r3, r0
 8005c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c4e:	f040 80c0 	bne.w	8005dd2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f004 ffe6 	bl	800ac28 <USB_ReadDevAllInEpInterrupt>
 8005c5c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005c62:	e0b2      	b.n	8005dca <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 80a7 	beq.w	8005dbe <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c76:	b2d2      	uxtb	r2, r2
 8005c78:	4611      	mov	r1, r2
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f005 f80c 	bl	800ac98 <USB_ReadDevInEPInterrupt>
 8005c80:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d057      	beq.n	8005d3c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	f003 030f 	and.w	r3, r3, #15
 8005c92:	2201      	movs	r2, #1
 8005c94:	fa02 f303 	lsl.w	r3, r2, r3
 8005c98:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ca0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	43db      	mvns	r3, r3
 8005ca6:	69f9      	ldr	r1, [r7, #28]
 8005ca8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cac:	4013      	ands	r3, r2
 8005cae:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d132      	bne.n	8005d30 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005cca:	6879      	ldr	r1, [r7, #4]
 8005ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cce:	4613      	mov	r3, r2
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	1a9b      	subs	r3, r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	440b      	add	r3, r1
 8005cd8:	3348      	adds	r3, #72	; 0x48
 8005cda:	6819      	ldr	r1, [r3, #0]
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	1a9b      	subs	r3, r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4403      	add	r3, r0
 8005cea:	3344      	adds	r3, #68	; 0x44
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4419      	add	r1, r3
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	1a9b      	subs	r3, r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4403      	add	r3, r0
 8005cfe:	3348      	adds	r3, #72	; 0x48
 8005d00:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d113      	bne.n	8005d30 <HAL_PCD_IRQHandler+0x31c>
 8005d08:	6879      	ldr	r1, [r7, #4]
 8005d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	00db      	lsls	r3, r3, #3
 8005d10:	1a9b      	subs	r3, r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	440b      	add	r3, r1
 8005d16:	3350      	adds	r3, #80	; 0x50
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d108      	bne.n	8005d30 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6818      	ldr	r0, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d28:	461a      	mov	r2, r3
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	f005 f814 	bl	800ad58 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	4619      	mov	r1, r3
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f00a f8cf 	bl	800feda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f003 0308 	and.w	r3, r3, #8
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d008      	beq.n	8005d58 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d52:	461a      	mov	r2, r3
 8005d54:	2308      	movs	r3, #8
 8005d56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f003 0310 	and.w	r3, r3, #16
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d008      	beq.n	8005d74 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6e:	461a      	mov	r2, r3
 8005d70:	2310      	movs	r3, #16
 8005d72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d008      	beq.n	8005d90 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	015a      	lsls	r2, r3, #5
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	4413      	add	r3, r2
 8005d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	2340      	movs	r3, #64	; 0x40
 8005d8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d008      	beq.n	8005dac <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da6:	461a      	mov	r2, r3
 8005da8:	2302      	movs	r3, #2
 8005daa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005db6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fc1b 	bl	80065f4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc6:	085b      	lsrs	r3, r3, #1
 8005dc8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f47f af49 	bne.w	8005c64 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f004 fef9 	bl	800abce <USB_ReadInterrupts>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005de2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005de6:	d122      	bne.n	8005e2e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	69fa      	ldr	r2, [r7, #28]
 8005df2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005df6:	f023 0301 	bic.w	r3, r3, #1
 8005dfa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d108      	bne.n	8005e18 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005e0e:	2100      	movs	r1, #0
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fe27 	bl	8006a64 <HAL_PCDEx_LPM_Callback>
 8005e16:	e002      	b.n	8005e1e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f00a f8d5 	bl	800ffc8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	695a      	ldr	r2, [r3, #20]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005e2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f004 fecb 	bl	800abce <USB_ReadInterrupts>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e42:	d112      	bne.n	8005e6a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d102      	bne.n	8005e5a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f00a f891 	bl	800ff7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	695a      	ldr	r2, [r3, #20]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005e68:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f004 fead 	bl	800abce <USB_ReadInterrupts>
 8005e74:	4603      	mov	r3, r0
 8005e76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7e:	f040 80c7 	bne.w	8006010 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	69fa      	ldr	r2, [r7, #28]
 8005e8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e90:	f023 0301 	bic.w	r3, r3, #1
 8005e94:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2110      	movs	r1, #16
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f003 ff7b 	bl	8009d98 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ea6:	e056      	b.n	8005f56 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005eba:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ecc:	0151      	lsls	r1, r2, #5
 8005ece:	69fa      	ldr	r2, [r7, #28]
 8005ed0:	440a      	add	r2, r1
 8005ed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ed6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005eda:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005eec:	0151      	lsls	r1, r2, #5
 8005eee:	69fa      	ldr	r2, [r7, #28]
 8005ef0:	440a      	add	r2, r1
 8005ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005efa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f08:	461a      	mov	r2, r3
 8005f0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f0e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f20:	0151      	lsls	r1, r2, #5
 8005f22:	69fa      	ldr	r2, [r7, #28]
 8005f24:	440a      	add	r2, r1
 8005f26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f2e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f40:	0151      	lsls	r1, r2, #5
 8005f42:	69fa      	ldr	r2, [r7, #28]
 8005f44:	440a      	add	r2, r1
 8005f46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f4e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f52:	3301      	adds	r3, #1
 8005f54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d3a3      	bcc.n	8005ea8 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f66:	69db      	ldr	r3, [r3, #28]
 8005f68:	69fa      	ldr	r2, [r7, #28]
 8005f6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f6e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005f72:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d016      	beq.n	8005faa <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f86:	69fa      	ldr	r2, [r7, #28]
 8005f88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f8c:	f043 030b 	orr.w	r3, r3, #11
 8005f90:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9c:	69fa      	ldr	r2, [r7, #28]
 8005f9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fa2:	f043 030b 	orr.w	r3, r3, #11
 8005fa6:	6453      	str	r3, [r2, #68]	; 0x44
 8005fa8:	e015      	b.n	8005fd6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	69fa      	ldr	r2, [r7, #28]
 8005fb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005fbc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005fc0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	69fa      	ldr	r2, [r7, #28]
 8005fcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fd0:	f043 030b 	orr.w	r3, r3, #11
 8005fd4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69fa      	ldr	r2, [r7, #28]
 8005fe0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fe4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005fe8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6818      	ldr	r0, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f004 feac 	bl	800ad58 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	695a      	ldr	r2, [r3, #20]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800600e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4618      	mov	r0, r3
 8006016:	f004 fdda 	bl	800abce <USB_ReadInterrupts>
 800601a:	4603      	mov	r3, r0
 800601c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006024:	d124      	bne.n	8006070 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4618      	mov	r0, r3
 800602c:	f004 fe70 	bl	800ad10 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4618      	mov	r0, r3
 8006036:	f003 ff10 	bl	8009e5a <USB_GetDevSpeed>
 800603a:	4603      	mov	r3, r0
 800603c:	461a      	mov	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681c      	ldr	r4, [r3, #0]
 8006046:	f001 f947 	bl	80072d8 <HAL_RCC_GetHCLKFreq>
 800604a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006050:	b2db      	uxtb	r3, r3
 8006052:	461a      	mov	r2, r3
 8006054:	4620      	mov	r0, r4
 8006056:	f003 fc4d 	bl	80098f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f009 ff65 	bl	800ff2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	695a      	ldr	r2, [r3, #20]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800606e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4618      	mov	r0, r3
 8006076:	f004 fdaa 	bl	800abce <USB_ReadInterrupts>
 800607a:	4603      	mov	r3, r0
 800607c:	f003 0308 	and.w	r3, r3, #8
 8006080:	2b08      	cmp	r3, #8
 8006082:	d10a      	bne.n	800609a <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f009 ff42 	bl	800ff0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	695a      	ldr	r2, [r3, #20]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f002 0208 	and.w	r2, r2, #8
 8006098:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4618      	mov	r0, r3
 80060a0:	f004 fd95 	bl	800abce <USB_ReadInterrupts>
 80060a4:	4603      	mov	r3, r0
 80060a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060ae:	d10f      	bne.n	80060d0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	4619      	mov	r1, r3
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f009 ffa4 	bl	8010008 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	695a      	ldr	r2, [r3, #20]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80060ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4618      	mov	r0, r3
 80060d6:	f004 fd7a 	bl	800abce <USB_ReadInterrupts>
 80060da:	4603      	mov	r3, r0
 80060dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060e4:	d10f      	bne.n	8006106 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80060e6:	2300      	movs	r3, #0
 80060e8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	4619      	mov	r1, r3
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f009 ff77 	bl	800ffe4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	695a      	ldr	r2, [r3, #20]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006104:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4618      	mov	r0, r3
 800610c:	f004 fd5f 	bl	800abce <USB_ReadInterrupts>
 8006110:	4603      	mov	r3, r0
 8006112:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800611a:	d10a      	bne.n	8006132 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f009 ff85 	bl	801002c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	695a      	ldr	r2, [r3, #20]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006130:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4618      	mov	r0, r3
 8006138:	f004 fd49 	bl	800abce <USB_ReadInterrupts>
 800613c:	4603      	mov	r3, r0
 800613e:	f003 0304 	and.w	r3, r3, #4
 8006142:	2b04      	cmp	r3, #4
 8006144:	d115      	bne.n	8006172 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	f003 0304 	and.w	r3, r3, #4
 8006154:	2b00      	cmp	r3, #0
 8006156:	d002      	beq.n	800615e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f009 ff75 	bl	8010048 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6859      	ldr	r1, [r3, #4]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	430a      	orrs	r2, r1
 800616c:	605a      	str	r2, [r3, #4]
 800616e:	e000      	b.n	8006172 <HAL_PCD_IRQHandler+0x75e>
      return;
 8006170:	bf00      	nop
    }
  }
}
 8006172:	3734      	adds	r7, #52	; 0x34
 8006174:	46bd      	mov	sp, r7
 8006176:	bd90      	pop	{r4, r7, pc}

08006178 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	460b      	mov	r3, r1
 8006182:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800618a:	2b01      	cmp	r3, #1
 800618c:	d101      	bne.n	8006192 <HAL_PCD_SetAddress+0x1a>
 800618e:	2302      	movs	r3, #2
 8006190:	e013      	b.n	80061ba <HAL_PCD_SetAddress+0x42>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	78fa      	ldrb	r2, [r7, #3]
 800619e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	78fa      	ldrb	r2, [r7, #3]
 80061a8:	4611      	mov	r1, r2
 80061aa:	4618      	mov	r0, r3
 80061ac:	f004 fca7 	bl	800aafe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b084      	sub	sp, #16
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	4608      	mov	r0, r1
 80061cc:	4611      	mov	r1, r2
 80061ce:	461a      	mov	r2, r3
 80061d0:	4603      	mov	r3, r0
 80061d2:	70fb      	strb	r3, [r7, #3]
 80061d4:	460b      	mov	r3, r1
 80061d6:	803b      	strh	r3, [r7, #0]
 80061d8:	4613      	mov	r3, r2
 80061da:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80061dc:	2300      	movs	r3, #0
 80061de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80061e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	da0f      	bge.n	8006208 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061e8:	78fb      	ldrb	r3, [r7, #3]
 80061ea:	f003 020f 	and.w	r2, r3, #15
 80061ee:	4613      	mov	r3, r2
 80061f0:	00db      	lsls	r3, r3, #3
 80061f2:	1a9b      	subs	r3, r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	3338      	adds	r3, #56	; 0x38
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	4413      	add	r3, r2
 80061fc:	3304      	adds	r3, #4
 80061fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2201      	movs	r2, #1
 8006204:	705a      	strb	r2, [r3, #1]
 8006206:	e00f      	b.n	8006228 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006208:	78fb      	ldrb	r3, [r7, #3]
 800620a:	f003 020f 	and.w	r2, r3, #15
 800620e:	4613      	mov	r3, r2
 8006210:	00db      	lsls	r3, r3, #3
 8006212:	1a9b      	subs	r3, r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	4413      	add	r3, r2
 800621e:	3304      	adds	r3, #4
 8006220:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	f003 030f 	and.w	r3, r3, #15
 800622e:	b2da      	uxtb	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006234:	883a      	ldrh	r2, [r7, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	78ba      	ldrb	r2, [r7, #2]
 800623e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	785b      	ldrb	r3, [r3, #1]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d004      	beq.n	8006252 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	b29a      	uxth	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006252:	78bb      	ldrb	r3, [r7, #2]
 8006254:	2b02      	cmp	r3, #2
 8006256:	d102      	bne.n	800625e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006264:	2b01      	cmp	r3, #1
 8006266:	d101      	bne.n	800626c <HAL_PCD_EP_Open+0xaa>
 8006268:	2302      	movs	r3, #2
 800626a:	e00e      	b.n	800628a <HAL_PCD_EP_Open+0xc8>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68f9      	ldr	r1, [r7, #12]
 800627a:	4618      	mov	r0, r3
 800627c:	f003 fe12 	bl	8009ea4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006288:	7afb      	ldrb	r3, [r7, #11]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b084      	sub	sp, #16
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
 800629a:	460b      	mov	r3, r1
 800629c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800629e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	da0f      	bge.n	80062c6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062a6:	78fb      	ldrb	r3, [r7, #3]
 80062a8:	f003 020f 	and.w	r2, r3, #15
 80062ac:	4613      	mov	r3, r2
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	1a9b      	subs	r3, r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	3338      	adds	r3, #56	; 0x38
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	4413      	add	r3, r2
 80062ba:	3304      	adds	r3, #4
 80062bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2201      	movs	r2, #1
 80062c2:	705a      	strb	r2, [r3, #1]
 80062c4:	e00f      	b.n	80062e6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062c6:	78fb      	ldrb	r3, [r7, #3]
 80062c8:	f003 020f 	and.w	r2, r3, #15
 80062cc:	4613      	mov	r3, r2
 80062ce:	00db      	lsls	r3, r3, #3
 80062d0:	1a9b      	subs	r3, r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	4413      	add	r3, r2
 80062dc:	3304      	adds	r3, #4
 80062de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80062e6:	78fb      	ldrb	r3, [r7, #3]
 80062e8:	f003 030f 	and.w	r3, r3, #15
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d101      	bne.n	8006300 <HAL_PCD_EP_Close+0x6e>
 80062fc:	2302      	movs	r3, #2
 80062fe:	e00e      	b.n	800631e <HAL_PCD_EP_Close+0x8c>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68f9      	ldr	r1, [r7, #12]
 800630e:	4618      	mov	r0, r3
 8006310:	f003 fe50 	bl	8009fb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b086      	sub	sp, #24
 800632a:	af00      	add	r7, sp, #0
 800632c:	60f8      	str	r0, [r7, #12]
 800632e:	607a      	str	r2, [r7, #4]
 8006330:	603b      	str	r3, [r7, #0]
 8006332:	460b      	mov	r3, r1
 8006334:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006336:	7afb      	ldrb	r3, [r7, #11]
 8006338:	f003 020f 	and.w	r2, r3, #15
 800633c:	4613      	mov	r3, r2
 800633e:	00db      	lsls	r3, r3, #3
 8006340:	1a9b      	subs	r3, r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	4413      	add	r3, r2
 800634c:	3304      	adds	r3, #4
 800634e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	2200      	movs	r2, #0
 8006360:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	2200      	movs	r2, #0
 8006366:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006368:	7afb      	ldrb	r3, [r7, #11]
 800636a:	f003 030f 	and.w	r3, r3, #15
 800636e:	b2da      	uxtb	r2, r3
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d102      	bne.n	8006382 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006382:	7afb      	ldrb	r3, [r7, #11]
 8006384:	f003 030f 	and.w	r3, r3, #15
 8006388:	2b00      	cmp	r3, #0
 800638a:	d109      	bne.n	80063a0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6818      	ldr	r0, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	b2db      	uxtb	r3, r3
 8006396:	461a      	mov	r2, r3
 8006398:	6979      	ldr	r1, [r7, #20]
 800639a:	f004 f92b 	bl	800a5f4 <USB_EP0StartXfer>
 800639e:	e008      	b.n	80063b2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6818      	ldr	r0, [r3, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	461a      	mov	r2, r3
 80063ac:	6979      	ldr	r1, [r7, #20]
 80063ae:	f003 fedd 	bl	800a16c <USB_EPStartXfer>
  }

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3718      	adds	r7, #24
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	460b      	mov	r3, r1
 80063c6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80063c8:	78fb      	ldrb	r3, [r7, #3]
 80063ca:	f003 020f 	and.w	r2, r3, #15
 80063ce:	6879      	ldr	r1, [r7, #4]
 80063d0:	4613      	mov	r3, r2
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	1a9b      	subs	r3, r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	440b      	add	r3, r1
 80063da:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80063de:	681b      	ldr	r3, [r3, #0]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	607a      	str	r2, [r7, #4]
 80063f6:	603b      	str	r3, [r7, #0]
 80063f8:	460b      	mov	r3, r1
 80063fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063fc:	7afb      	ldrb	r3, [r7, #11]
 80063fe:	f003 020f 	and.w	r2, r3, #15
 8006402:	4613      	mov	r3, r2
 8006404:	00db      	lsls	r3, r3, #3
 8006406:	1a9b      	subs	r3, r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	3338      	adds	r3, #56	; 0x38
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	4413      	add	r3, r2
 8006410:	3304      	adds	r3, #4
 8006412:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	2200      	movs	r2, #0
 8006424:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	2201      	movs	r2, #1
 800642a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800642c:	7afb      	ldrb	r3, [r7, #11]
 800642e:	f003 030f 	and.w	r3, r3, #15
 8006432:	b2da      	uxtb	r2, r3
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d102      	bne.n	8006446 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006446:	7afb      	ldrb	r3, [r7, #11]
 8006448:	f003 030f 	and.w	r3, r3, #15
 800644c:	2b00      	cmp	r3, #0
 800644e:	d109      	bne.n	8006464 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6818      	ldr	r0, [r3, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	b2db      	uxtb	r3, r3
 800645a:	461a      	mov	r2, r3
 800645c:	6979      	ldr	r1, [r7, #20]
 800645e:	f004 f8c9 	bl	800a5f4 <USB_EP0StartXfer>
 8006462:	e008      	b.n	8006476 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6818      	ldr	r0, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	b2db      	uxtb	r3, r3
 800646e:	461a      	mov	r2, r3
 8006470:	6979      	ldr	r1, [r7, #20]
 8006472:	f003 fe7b 	bl	800a16c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3718      	adds	r7, #24
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800648c:	78fb      	ldrb	r3, [r7, #3]
 800648e:	f003 020f 	and.w	r2, r3, #15
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	429a      	cmp	r2, r3
 8006498:	d901      	bls.n	800649e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e050      	b.n	8006540 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800649e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	da0f      	bge.n	80064c6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064a6:	78fb      	ldrb	r3, [r7, #3]
 80064a8:	f003 020f 	and.w	r2, r3, #15
 80064ac:	4613      	mov	r3, r2
 80064ae:	00db      	lsls	r3, r3, #3
 80064b0:	1a9b      	subs	r3, r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	3338      	adds	r3, #56	; 0x38
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	4413      	add	r3, r2
 80064ba:	3304      	adds	r3, #4
 80064bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2201      	movs	r2, #1
 80064c2:	705a      	strb	r2, [r3, #1]
 80064c4:	e00d      	b.n	80064e2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80064c6:	78fa      	ldrb	r2, [r7, #3]
 80064c8:	4613      	mov	r3, r2
 80064ca:	00db      	lsls	r3, r3, #3
 80064cc:	1a9b      	subs	r3, r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	4413      	add	r3, r2
 80064d8:	3304      	adds	r3, #4
 80064da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2201      	movs	r2, #1
 80064e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064e8:	78fb      	ldrb	r3, [r7, #3]
 80064ea:	f003 030f 	and.w	r3, r3, #15
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d101      	bne.n	8006502 <HAL_PCD_EP_SetStall+0x82>
 80064fe:	2302      	movs	r3, #2
 8006500:	e01e      	b.n	8006540 <HAL_PCD_EP_SetStall+0xc0>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68f9      	ldr	r1, [r7, #12]
 8006510:	4618      	mov	r0, r3
 8006512:	f004 fa20 	bl	800a956 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006516:	78fb      	ldrb	r3, [r7, #3]
 8006518:	f003 030f 	and.w	r3, r3, #15
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10a      	bne.n	8006536 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6818      	ldr	r0, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	b2d9      	uxtb	r1, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006530:	461a      	mov	r2, r3
 8006532:	f004 fc11 	bl	800ad58 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	460b      	mov	r3, r1
 8006552:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006554:	78fb      	ldrb	r3, [r7, #3]
 8006556:	f003 020f 	and.w	r2, r3, #15
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	429a      	cmp	r2, r3
 8006560:	d901      	bls.n	8006566 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e042      	b.n	80065ec <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006566:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800656a:	2b00      	cmp	r3, #0
 800656c:	da0f      	bge.n	800658e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800656e:	78fb      	ldrb	r3, [r7, #3]
 8006570:	f003 020f 	and.w	r2, r3, #15
 8006574:	4613      	mov	r3, r2
 8006576:	00db      	lsls	r3, r3, #3
 8006578:	1a9b      	subs	r3, r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	3338      	adds	r3, #56	; 0x38
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	4413      	add	r3, r2
 8006582:	3304      	adds	r3, #4
 8006584:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2201      	movs	r2, #1
 800658a:	705a      	strb	r2, [r3, #1]
 800658c:	e00f      	b.n	80065ae <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800658e:	78fb      	ldrb	r3, [r7, #3]
 8006590:	f003 020f 	and.w	r2, r3, #15
 8006594:	4613      	mov	r3, r2
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	1a9b      	subs	r3, r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	4413      	add	r3, r2
 80065a4:	3304      	adds	r3, #4
 80065a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065b4:	78fb      	ldrb	r3, [r7, #3]
 80065b6:	f003 030f 	and.w	r3, r3, #15
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d101      	bne.n	80065ce <HAL_PCD_EP_ClrStall+0x86>
 80065ca:	2302      	movs	r3, #2
 80065cc:	e00e      	b.n	80065ec <HAL_PCD_EP_ClrStall+0xa4>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68f9      	ldr	r1, [r7, #12]
 80065dc:	4618      	mov	r0, r3
 80065de:	f004 fa28 	bl	800aa32 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b08a      	sub	sp, #40	; 0x28
 80065f8:	af02      	add	r7, sp, #8
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006608:	683a      	ldr	r2, [r7, #0]
 800660a:	4613      	mov	r3, r2
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	1a9b      	subs	r3, r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	3338      	adds	r3, #56	; 0x38
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	4413      	add	r3, r2
 8006618:	3304      	adds	r3, #4
 800661a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	699a      	ldr	r2, [r3, #24]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	429a      	cmp	r2, r3
 8006626:	d901      	bls.n	800662c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e06c      	b.n	8006706 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	695a      	ldr	r2, [r3, #20]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	69fa      	ldr	r2, [r7, #28]
 800663e:	429a      	cmp	r2, r3
 8006640:	d902      	bls.n	8006648 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	3303      	adds	r3, #3
 800664c:	089b      	lsrs	r3, r3, #2
 800664e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006650:	e02b      	b.n	80066aa <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	695a      	ldr	r2, [r3, #20]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	69fa      	ldr	r2, [r7, #28]
 8006664:	429a      	cmp	r2, r3
 8006666:	d902      	bls.n	800666e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	3303      	adds	r3, #3
 8006672:	089b      	lsrs	r3, r3, #2
 8006674:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	68d9      	ldr	r1, [r3, #12]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	b2da      	uxtb	r2, r3
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006686:	b2db      	uxtb	r3, r3
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	4603      	mov	r3, r0
 800668c:	6978      	ldr	r0, [r7, #20]
 800668e:	f004 f904 	bl	800a89a <USB_WritePacket>

    ep->xfer_buff  += len;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	68da      	ldr	r2, [r3, #12]
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	441a      	add	r2, r3
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	699a      	ldr	r2, [r3, #24]
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	441a      	add	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d809      	bhi.n	80066d4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	699a      	ldr	r2, [r3, #24]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d203      	bcs.n	80066d4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1be      	bne.n	8006652 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	695a      	ldr	r2, [r3, #20]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d811      	bhi.n	8006704 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	f003 030f 	and.w	r3, r3, #15
 80066e6:	2201      	movs	r2, #1
 80066e8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ec:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	43db      	mvns	r3, r3
 80066fa:	6939      	ldr	r1, [r7, #16]
 80066fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006700:	4013      	ands	r3, r2
 8006702:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3720      	adds	r7, #32
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
	...

08006710 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	333c      	adds	r3, #60	; 0x3c
 8006728:	3304      	adds	r3, #4
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	4413      	add	r3, r2
 8006736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	2b01      	cmp	r3, #1
 8006744:	f040 80a0 	bne.w	8006888 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f003 0308 	and.w	r3, r3, #8
 800674e:	2b00      	cmp	r3, #0
 8006750:	d015      	beq.n	800677e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	4a72      	ldr	r2, [pc, #456]	; (8006920 <PCD_EP_OutXfrComplete_int+0x210>)
 8006756:	4293      	cmp	r3, r2
 8006758:	f240 80dd 	bls.w	8006916 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 80d7 	beq.w	8006916 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006774:	461a      	mov	r2, r3
 8006776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800677a:	6093      	str	r3, [r2, #8]
 800677c:	e0cb      	b.n	8006916 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	f003 0320 	and.w	r3, r3, #32
 8006784:	2b00      	cmp	r3, #0
 8006786:	d009      	beq.n	800679c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006794:	461a      	mov	r2, r3
 8006796:	2320      	movs	r3, #32
 8006798:	6093      	str	r3, [r2, #8]
 800679a:	e0bc      	b.n	8006916 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f040 80b7 	bne.w	8006916 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	4a5d      	ldr	r2, [pc, #372]	; (8006920 <PCD_EP_OutXfrComplete_int+0x210>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d90f      	bls.n	80067d0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	015a      	lsls	r2, r3, #5
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	4413      	add	r3, r2
 80067c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c6:	461a      	mov	r2, r3
 80067c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067cc:	6093      	str	r3, [r2, #8]
 80067ce:	e0a2      	b.n	8006916 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80067d0:	6879      	ldr	r1, [r7, #4]
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	4613      	mov	r3, r2
 80067d6:	00db      	lsls	r3, r3, #3
 80067d8:	1a9b      	subs	r3, r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	440b      	add	r3, r1
 80067de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80067e2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	0159      	lsls	r1, r3, #5
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	440b      	add	r3, r1
 80067ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80067f6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	4613      	mov	r3, r2
 80067fe:	00db      	lsls	r3, r3, #3
 8006800:	1a9b      	subs	r3, r3, r2
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	4403      	add	r3, r0
 8006806:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800680a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800680c:	6879      	ldr	r1, [r7, #4]
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	4613      	mov	r3, r2
 8006812:	00db      	lsls	r3, r3, #3
 8006814:	1a9b      	subs	r3, r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	440b      	add	r3, r1
 800681a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800681e:	6819      	ldr	r1, [r3, #0]
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	4613      	mov	r3, r2
 8006826:	00db      	lsls	r3, r3, #3
 8006828:	1a9b      	subs	r3, r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4403      	add	r3, r0
 800682e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4419      	add	r1, r3
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	4613      	mov	r3, r2
 800683c:	00db      	lsls	r3, r3, #3
 800683e:	1a9b      	subs	r3, r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4403      	add	r3, r0
 8006844:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006848:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d114      	bne.n	800687a <PCD_EP_OutXfrComplete_int+0x16a>
 8006850:	6879      	ldr	r1, [r7, #4]
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	4613      	mov	r3, r2
 8006856:	00db      	lsls	r3, r3, #3
 8006858:	1a9b      	subs	r3, r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	440b      	add	r3, r1
 800685e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d108      	bne.n	800687a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6818      	ldr	r0, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006872:	461a      	mov	r2, r3
 8006874:	2101      	movs	r1, #1
 8006876:	f004 fa6f 	bl	800ad58 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	b2db      	uxtb	r3, r3
 800687e:	4619      	mov	r1, r3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f009 fb0f 	bl	800fea4 <HAL_PCD_DataOutStageCallback>
 8006886:	e046      	b.n	8006916 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4a26      	ldr	r2, [pc, #152]	; (8006924 <PCD_EP_OutXfrComplete_int+0x214>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d124      	bne.n	80068da <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a6:	461a      	mov	r2, r3
 80068a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ac:	6093      	str	r3, [r2, #8]
 80068ae:	e032      	b.n	8006916 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	f003 0320 	and.w	r3, r3, #32
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d008      	beq.n	80068cc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c6:	461a      	mov	r2, r3
 80068c8:	2320      	movs	r3, #32
 80068ca:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	4619      	mov	r1, r3
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f009 fae6 	bl	800fea4 <HAL_PCD_DataOutStageCallback>
 80068d8:	e01d      	b.n	8006916 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d114      	bne.n	800690a <PCD_EP_OutXfrComplete_int+0x1fa>
 80068e0:	6879      	ldr	r1, [r7, #4]
 80068e2:	683a      	ldr	r2, [r7, #0]
 80068e4:	4613      	mov	r3, r2
 80068e6:	00db      	lsls	r3, r3, #3
 80068e8:	1a9b      	subs	r3, r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	440b      	add	r3, r1
 80068ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d108      	bne.n	800690a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6818      	ldr	r0, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006902:	461a      	mov	r2, r3
 8006904:	2100      	movs	r1, #0
 8006906:	f004 fa27 	bl	800ad58 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	b2db      	uxtb	r3, r3
 800690e:	4619      	mov	r1, r3
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f009 fac7 	bl	800fea4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3718      	adds	r7, #24
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	4f54300a 	.word	0x4f54300a
 8006924:	4f54310a 	.word	0x4f54310a

08006928 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	333c      	adds	r3, #60	; 0x3c
 8006940:	3304      	adds	r3, #4
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	4413      	add	r3, r2
 800694e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	4a15      	ldr	r2, [pc, #84]	; (80069b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d90e      	bls.n	800697c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006964:	2b00      	cmp	r3, #0
 8006966:	d009      	beq.n	800697c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	015a      	lsls	r2, r3, #5
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	4413      	add	r3, r2
 8006970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006974:	461a      	mov	r2, r3
 8006976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800697a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f009 fa7f 	bl	800fe80 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	4a0a      	ldr	r2, [pc, #40]	; (80069b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d90c      	bls.n	80069a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d108      	bne.n	80069a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6818      	ldr	r0, [r3, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800699c:	461a      	mov	r2, r3
 800699e:	2101      	movs	r1, #1
 80069a0:	f004 f9da 	bl	800ad58 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3718      	adds	r7, #24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	4f54300a 	.word	0x4f54300a

080069b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	460b      	mov	r3, r1
 80069be:	70fb      	strb	r3, [r7, #3]
 80069c0:	4613      	mov	r3, r2
 80069c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80069cc:	78fb      	ldrb	r3, [r7, #3]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d107      	bne.n	80069e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80069d2:	883b      	ldrh	r3, [r7, #0]
 80069d4:	0419      	lsls	r1, r3, #16
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	430a      	orrs	r2, r1
 80069de:	629a      	str	r2, [r3, #40]	; 0x28
 80069e0:	e028      	b.n	8006a34 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e8:	0c1b      	lsrs	r3, r3, #16
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	4413      	add	r3, r2
 80069ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80069f0:	2300      	movs	r3, #0
 80069f2:	73fb      	strb	r3, [r7, #15]
 80069f4:	e00d      	b.n	8006a12 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	7bfb      	ldrb	r3, [r7, #15]
 80069fc:	3340      	adds	r3, #64	; 0x40
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	0c1b      	lsrs	r3, r3, #16
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	4413      	add	r3, r2
 8006a0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	73fb      	strb	r3, [r7, #15]
 8006a12:	7bfa      	ldrb	r2, [r7, #15]
 8006a14:	78fb      	ldrb	r3, [r7, #3]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d3ec      	bcc.n	80069f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006a1c:	883b      	ldrh	r3, [r7, #0]
 8006a1e:	0418      	lsls	r0, r3, #16
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6819      	ldr	r1, [r3, #0]
 8006a24:	78fb      	ldrb	r3, [r7, #3]
 8006a26:	3b01      	subs	r3, #1
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	4302      	orrs	r2, r0
 8006a2c:	3340      	adds	r3, #64	; 0x40
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	440b      	add	r3, r1
 8006a32:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3714      	adds	r7, #20
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b083      	sub	sp, #12
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	887a      	ldrh	r2, [r7, #2]
 8006a54:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b086      	sub	sp, #24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e25b      	b.n	8006f46 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d075      	beq.n	8006b86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a9a:	4ba3      	ldr	r3, [pc, #652]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f003 030c 	and.w	r3, r3, #12
 8006aa2:	2b04      	cmp	r3, #4
 8006aa4:	d00c      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aa6:	4ba0      	ldr	r3, [pc, #640]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006aae:	2b08      	cmp	r3, #8
 8006ab0:	d112      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ab2:	4b9d      	ldr	r3, [pc, #628]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006abe:	d10b      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ac0:	4b99      	ldr	r3, [pc, #612]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d05b      	beq.n	8006b84 <HAL_RCC_OscConfig+0x108>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d157      	bne.n	8006b84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e236      	b.n	8006f46 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ae0:	d106      	bne.n	8006af0 <HAL_RCC_OscConfig+0x74>
 8006ae2:	4b91      	ldr	r3, [pc, #580]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a90      	ldr	r2, [pc, #576]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aec:	6013      	str	r3, [r2, #0]
 8006aee:	e01d      	b.n	8006b2c <HAL_RCC_OscConfig+0xb0>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006af8:	d10c      	bne.n	8006b14 <HAL_RCC_OscConfig+0x98>
 8006afa:	4b8b      	ldr	r3, [pc, #556]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a8a      	ldr	r2, [pc, #552]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b04:	6013      	str	r3, [r2, #0]
 8006b06:	4b88      	ldr	r3, [pc, #544]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a87      	ldr	r2, [pc, #540]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b10:	6013      	str	r3, [r2, #0]
 8006b12:	e00b      	b.n	8006b2c <HAL_RCC_OscConfig+0xb0>
 8006b14:	4b84      	ldr	r3, [pc, #528]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a83      	ldr	r2, [pc, #524]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b1e:	6013      	str	r3, [r2, #0]
 8006b20:	4b81      	ldr	r3, [pc, #516]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a80      	ldr	r2, [pc, #512]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d013      	beq.n	8006b5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b34:	f7fb f9d2 	bl	8001edc <HAL_GetTick>
 8006b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b3a:	e008      	b.n	8006b4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b3c:	f7fb f9ce 	bl	8001edc <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b64      	cmp	r3, #100	; 0x64
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e1fb      	b.n	8006f46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b4e:	4b76      	ldr	r3, [pc, #472]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d0f0      	beq.n	8006b3c <HAL_RCC_OscConfig+0xc0>
 8006b5a:	e014      	b.n	8006b86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b5c:	f7fb f9be 	bl	8001edc <HAL_GetTick>
 8006b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b62:	e008      	b.n	8006b76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b64:	f7fb f9ba 	bl	8001edc <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b64      	cmp	r3, #100	; 0x64
 8006b70:	d901      	bls.n	8006b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e1e7      	b.n	8006f46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b76:	4b6c      	ldr	r3, [pc, #432]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1f0      	bne.n	8006b64 <HAL_RCC_OscConfig+0xe8>
 8006b82:	e000      	b.n	8006b86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d063      	beq.n	8006c5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b92:	4b65      	ldr	r3, [pc, #404]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f003 030c 	and.w	r3, r3, #12
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00b      	beq.n	8006bb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b9e:	4b62      	ldr	r3, [pc, #392]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ba6:	2b08      	cmp	r3, #8
 8006ba8:	d11c      	bne.n	8006be4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006baa:	4b5f      	ldr	r3, [pc, #380]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d116      	bne.n	8006be4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bb6:	4b5c      	ldr	r3, [pc, #368]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d005      	beq.n	8006bce <HAL_RCC_OscConfig+0x152>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d001      	beq.n	8006bce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e1bb      	b.n	8006f46 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bce:	4b56      	ldr	r3, [pc, #344]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	00db      	lsls	r3, r3, #3
 8006bdc:	4952      	ldr	r1, [pc, #328]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006be2:	e03a      	b.n	8006c5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d020      	beq.n	8006c2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bec:	4b4f      	ldr	r3, [pc, #316]	; (8006d2c <HAL_RCC_OscConfig+0x2b0>)
 8006bee:	2201      	movs	r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf2:	f7fb f973 	bl	8001edc <HAL_GetTick>
 8006bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bf8:	e008      	b.n	8006c0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bfa:	f7fb f96f 	bl	8001edc <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d901      	bls.n	8006c0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e19c      	b.n	8006f46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c0c:	4b46      	ldr	r3, [pc, #280]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0302 	and.w	r3, r3, #2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d0f0      	beq.n	8006bfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c18:	4b43      	ldr	r3, [pc, #268]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	00db      	lsls	r3, r3, #3
 8006c26:	4940      	ldr	r1, [pc, #256]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	600b      	str	r3, [r1, #0]
 8006c2c:	e015      	b.n	8006c5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c2e:	4b3f      	ldr	r3, [pc, #252]	; (8006d2c <HAL_RCC_OscConfig+0x2b0>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c34:	f7fb f952 	bl	8001edc <HAL_GetTick>
 8006c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c3a:	e008      	b.n	8006c4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c3c:	f7fb f94e 	bl	8001edc <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d901      	bls.n	8006c4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e17b      	b.n	8006f46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c4e:	4b36      	ldr	r3, [pc, #216]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1f0      	bne.n	8006c3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0308 	and.w	r3, r3, #8
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d030      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d016      	beq.n	8006c9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c6e:	4b30      	ldr	r3, [pc, #192]	; (8006d30 <HAL_RCC_OscConfig+0x2b4>)
 8006c70:	2201      	movs	r2, #1
 8006c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c74:	f7fb f932 	bl	8001edc <HAL_GetTick>
 8006c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c7a:	e008      	b.n	8006c8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c7c:	f7fb f92e 	bl	8001edc <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d901      	bls.n	8006c8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e15b      	b.n	8006f46 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c8e:	4b26      	ldr	r3, [pc, #152]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d0f0      	beq.n	8006c7c <HAL_RCC_OscConfig+0x200>
 8006c9a:	e015      	b.n	8006cc8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c9c:	4b24      	ldr	r3, [pc, #144]	; (8006d30 <HAL_RCC_OscConfig+0x2b4>)
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ca2:	f7fb f91b 	bl	8001edc <HAL_GetTick>
 8006ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ca8:	e008      	b.n	8006cbc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006caa:	f7fb f917 	bl	8001edc <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d901      	bls.n	8006cbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e144      	b.n	8006f46 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cbc:	4b1a      	ldr	r3, [pc, #104]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cc0:	f003 0302 	and.w	r3, r3, #2
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1f0      	bne.n	8006caa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0304 	and.w	r3, r3, #4
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f000 80a0 	beq.w	8006e16 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cda:	4b13      	ldr	r3, [pc, #76]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10f      	bne.n	8006d06 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	60bb      	str	r3, [r7, #8]
 8006cea:	4b0f      	ldr	r3, [pc, #60]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cee:	4a0e      	ldr	r2, [pc, #56]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8006cf6:	4b0c      	ldr	r3, [pc, #48]	; (8006d28 <HAL_RCC_OscConfig+0x2ac>)
 8006cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cfe:	60bb      	str	r3, [r7, #8]
 8006d00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d02:	2301      	movs	r3, #1
 8006d04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d06:	4b0b      	ldr	r3, [pc, #44]	; (8006d34 <HAL_RCC_OscConfig+0x2b8>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d121      	bne.n	8006d56 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d12:	4b08      	ldr	r3, [pc, #32]	; (8006d34 <HAL_RCC_OscConfig+0x2b8>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a07      	ldr	r2, [pc, #28]	; (8006d34 <HAL_RCC_OscConfig+0x2b8>)
 8006d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d1e:	f7fb f8dd 	bl	8001edc <HAL_GetTick>
 8006d22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d24:	e011      	b.n	8006d4a <HAL_RCC_OscConfig+0x2ce>
 8006d26:	bf00      	nop
 8006d28:	40023800 	.word	0x40023800
 8006d2c:	42470000 	.word	0x42470000
 8006d30:	42470e80 	.word	0x42470e80
 8006d34:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d38:	f7fb f8d0 	bl	8001edc <HAL_GetTick>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d901      	bls.n	8006d4a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006d46:	2303      	movs	r3, #3
 8006d48:	e0fd      	b.n	8006f46 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d4a:	4b81      	ldr	r3, [pc, #516]	; (8006f50 <HAL_RCC_OscConfig+0x4d4>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d0f0      	beq.n	8006d38 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d106      	bne.n	8006d6c <HAL_RCC_OscConfig+0x2f0>
 8006d5e:	4b7d      	ldr	r3, [pc, #500]	; (8006f54 <HAL_RCC_OscConfig+0x4d8>)
 8006d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d62:	4a7c      	ldr	r2, [pc, #496]	; (8006f54 <HAL_RCC_OscConfig+0x4d8>)
 8006d64:	f043 0301 	orr.w	r3, r3, #1
 8006d68:	6713      	str	r3, [r2, #112]	; 0x70
 8006d6a:	e01c      	b.n	8006da6 <HAL_RCC_OscConfig+0x32a>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	2b05      	cmp	r3, #5
 8006d72:	d10c      	bne.n	8006d8e <HAL_RCC_OscConfig+0x312>
 8006d74:	4b77      	ldr	r3, [pc, #476]	; (8006f54 <HAL_RCC_OscConfig+0x4d8>)
 8006d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d78:	4a76      	ldr	r2, [pc, #472]	; (8006f54 <HAL_RCC_OscConfig+0x4d8>)
 8006d7a:	f043 0304 	orr.w	r3, r3, #4
 8006d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d80:	4b74      	ldr	r3, [pc, #464]	; (8006f54 <HAL_RCC_OscConfig+0x4d8>)
 8006d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d84:	4a73      	ldr	r2, [pc, #460]	; (8006f54 <HAL_RCC_OscConfig+0x4d8>)
 8006d86:	f043 0301 	orr.w	r3, r3, #1
 8006d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8006d8c:	e00b      	b.n	8006da6 <HAL_RCC_OscConfig+0x32a>
 8006d8e:	4b71      	ldr	r3, [pc, #452]	; (8006f54 <HAL_RCC_OscConfig+0x4d8>)
 8006d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d92:	4a70      	ldr	r2, [pc, #448]	; (8006f54 <HAL_RCC_OscConfig+0x4d8>)
 8006d94:	f023 0301 	bic.w	r3, r3, #1
 8006d98:	6713      	str	r3, [r2, #112]	; 0x70
 8006d9a:	4b6e      	ldr	r3, [pc, #440]	; (8006f54 <HAL_RCC_OscConfig+0x4d8>)
 8006d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9e:	4a6d      	ldr	r2, [pc, #436]	; (8006f54 <HAL_RCC_OscConfig+0x4d8>)
 8006da0:	f023 0304 	bic.w	r3, r3, #4
 8006da4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d015      	beq.n	8006dda <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dae:	f7fb f895 	bl	8001edc <HAL_GetTick>
 8006db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006db4:	e00a      	b.n	8006dcc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006db6:	f7fb f891 	bl	8001edc <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d901      	bls.n	8006dcc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e0bc      	b.n	8006f46 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dcc:	4b61      	ldr	r3, [pc, #388]	; (8006f54 <HAL_RCC_OscConfig+0x4d8>)
 8006dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd0:	f003 0302 	and.w	r3, r3, #2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d0ee      	beq.n	8006db6 <HAL_RCC_OscConfig+0x33a>
 8006dd8:	e014      	b.n	8006e04 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dda:	f7fb f87f 	bl	8001edc <HAL_GetTick>
 8006dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006de0:	e00a      	b.n	8006df8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006de2:	f7fb f87b 	bl	8001edc <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d901      	bls.n	8006df8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e0a6      	b.n	8006f46 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006df8:	4b56      	ldr	r3, [pc, #344]	; (8006f54 <HAL_RCC_OscConfig+0x4d8>)
 8006dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dfc:	f003 0302 	and.w	r3, r3, #2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1ee      	bne.n	8006de2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e04:	7dfb      	ldrb	r3, [r7, #23]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d105      	bne.n	8006e16 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e0a:	4b52      	ldr	r3, [pc, #328]	; (8006f54 <HAL_RCC_OscConfig+0x4d8>)
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0e:	4a51      	ldr	r2, [pc, #324]	; (8006f54 <HAL_RCC_OscConfig+0x4d8>)
 8006e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 8092 	beq.w	8006f44 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e20:	4b4c      	ldr	r3, [pc, #304]	; (8006f54 <HAL_RCC_OscConfig+0x4d8>)
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f003 030c 	and.w	r3, r3, #12
 8006e28:	2b08      	cmp	r3, #8
 8006e2a:	d05c      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d141      	bne.n	8006eb8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e34:	4b48      	ldr	r3, [pc, #288]	; (8006f58 <HAL_RCC_OscConfig+0x4dc>)
 8006e36:	2200      	movs	r2, #0
 8006e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e3a:	f7fb f84f 	bl	8001edc <HAL_GetTick>
 8006e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e40:	e008      	b.n	8006e54 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e42:	f7fb f84b 	bl	8001edc <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d901      	bls.n	8006e54 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e078      	b.n	8006f46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e54:	4b3f      	ldr	r3, [pc, #252]	; (8006f54 <HAL_RCC_OscConfig+0x4d8>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1f0      	bne.n	8006e42 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	69da      	ldr	r2, [r3, #28]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a1b      	ldr	r3, [r3, #32]
 8006e68:	431a      	orrs	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6e:	019b      	lsls	r3, r3, #6
 8006e70:	431a      	orrs	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e76:	085b      	lsrs	r3, r3, #1
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	041b      	lsls	r3, r3, #16
 8006e7c:	431a      	orrs	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e82:	061b      	lsls	r3, r3, #24
 8006e84:	4933      	ldr	r1, [pc, #204]	; (8006f54 <HAL_RCC_OscConfig+0x4d8>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e8a:	4b33      	ldr	r3, [pc, #204]	; (8006f58 <HAL_RCC_OscConfig+0x4dc>)
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e90:	f7fb f824 	bl	8001edc <HAL_GetTick>
 8006e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e96:	e008      	b.n	8006eaa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e98:	f7fb f820 	bl	8001edc <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d901      	bls.n	8006eaa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e04d      	b.n	8006f46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eaa:	4b2a      	ldr	r3, [pc, #168]	; (8006f54 <HAL_RCC_OscConfig+0x4d8>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d0f0      	beq.n	8006e98 <HAL_RCC_OscConfig+0x41c>
 8006eb6:	e045      	b.n	8006f44 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eb8:	4b27      	ldr	r3, [pc, #156]	; (8006f58 <HAL_RCC_OscConfig+0x4dc>)
 8006eba:	2200      	movs	r2, #0
 8006ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ebe:	f7fb f80d 	bl	8001edc <HAL_GetTick>
 8006ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ec4:	e008      	b.n	8006ed8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ec6:	f7fb f809 	bl	8001edc <HAL_GetTick>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d901      	bls.n	8006ed8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e036      	b.n	8006f46 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ed8:	4b1e      	ldr	r3, [pc, #120]	; (8006f54 <HAL_RCC_OscConfig+0x4d8>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1f0      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x44a>
 8006ee4:	e02e      	b.n	8006f44 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d101      	bne.n	8006ef2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e029      	b.n	8006f46 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ef2:	4b18      	ldr	r3, [pc, #96]	; (8006f54 <HAL_RCC_OscConfig+0x4d8>)
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	69db      	ldr	r3, [r3, #28]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d11c      	bne.n	8006f40 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d115      	bne.n	8006f40 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d10d      	bne.n	8006f40 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d106      	bne.n	8006f40 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d001      	beq.n	8006f44 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e000      	b.n	8006f46 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3718      	adds	r7, #24
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	40007000 	.word	0x40007000
 8006f54:	40023800 	.word	0x40023800
 8006f58:	42470060 	.word	0x42470060

08006f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d101      	bne.n	8006f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e0cc      	b.n	800710a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f70:	4b68      	ldr	r3, [pc, #416]	; (8007114 <HAL_RCC_ClockConfig+0x1b8>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 030f 	and.w	r3, r3, #15
 8006f78:	683a      	ldr	r2, [r7, #0]
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d90c      	bls.n	8006f98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f7e:	4b65      	ldr	r3, [pc, #404]	; (8007114 <HAL_RCC_ClockConfig+0x1b8>)
 8006f80:	683a      	ldr	r2, [r7, #0]
 8006f82:	b2d2      	uxtb	r2, r2
 8006f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f86:	4b63      	ldr	r3, [pc, #396]	; (8007114 <HAL_RCC_ClockConfig+0x1b8>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 030f 	and.w	r3, r3, #15
 8006f8e:	683a      	ldr	r2, [r7, #0]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d001      	beq.n	8006f98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e0b8      	b.n	800710a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0302 	and.w	r3, r3, #2
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d020      	beq.n	8006fe6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0304 	and.w	r3, r3, #4
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d005      	beq.n	8006fbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fb0:	4b59      	ldr	r3, [pc, #356]	; (8007118 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	4a58      	ldr	r2, [pc, #352]	; (8007118 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006fba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0308 	and.w	r3, r3, #8
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d005      	beq.n	8006fd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fc8:	4b53      	ldr	r3, [pc, #332]	; (8007118 <HAL_RCC_ClockConfig+0x1bc>)
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	4a52      	ldr	r2, [pc, #328]	; (8007118 <HAL_RCC_ClockConfig+0x1bc>)
 8006fce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006fd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fd4:	4b50      	ldr	r3, [pc, #320]	; (8007118 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	494d      	ldr	r1, [pc, #308]	; (8007118 <HAL_RCC_ClockConfig+0x1bc>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d044      	beq.n	800707c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d107      	bne.n	800700a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ffa:	4b47      	ldr	r3, [pc, #284]	; (8007118 <HAL_RCC_ClockConfig+0x1bc>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d119      	bne.n	800703a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e07f      	b.n	800710a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	2b02      	cmp	r3, #2
 8007010:	d003      	beq.n	800701a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007016:	2b03      	cmp	r3, #3
 8007018:	d107      	bne.n	800702a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800701a:	4b3f      	ldr	r3, [pc, #252]	; (8007118 <HAL_RCC_ClockConfig+0x1bc>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d109      	bne.n	800703a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e06f      	b.n	800710a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800702a:	4b3b      	ldr	r3, [pc, #236]	; (8007118 <HAL_RCC_ClockConfig+0x1bc>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0302 	and.w	r3, r3, #2
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e067      	b.n	800710a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800703a:	4b37      	ldr	r3, [pc, #220]	; (8007118 <HAL_RCC_ClockConfig+0x1bc>)
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f023 0203 	bic.w	r2, r3, #3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	4934      	ldr	r1, [pc, #208]	; (8007118 <HAL_RCC_ClockConfig+0x1bc>)
 8007048:	4313      	orrs	r3, r2
 800704a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800704c:	f7fa ff46 	bl	8001edc <HAL_GetTick>
 8007050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007052:	e00a      	b.n	800706a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007054:	f7fa ff42 	bl	8001edc <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007062:	4293      	cmp	r3, r2
 8007064:	d901      	bls.n	800706a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	e04f      	b.n	800710a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800706a:	4b2b      	ldr	r3, [pc, #172]	; (8007118 <HAL_RCC_ClockConfig+0x1bc>)
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f003 020c 	and.w	r2, r3, #12
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	429a      	cmp	r2, r3
 800707a:	d1eb      	bne.n	8007054 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800707c:	4b25      	ldr	r3, [pc, #148]	; (8007114 <HAL_RCC_ClockConfig+0x1b8>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 030f 	and.w	r3, r3, #15
 8007084:	683a      	ldr	r2, [r7, #0]
 8007086:	429a      	cmp	r2, r3
 8007088:	d20c      	bcs.n	80070a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800708a:	4b22      	ldr	r3, [pc, #136]	; (8007114 <HAL_RCC_ClockConfig+0x1b8>)
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	b2d2      	uxtb	r2, r2
 8007090:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007092:	4b20      	ldr	r3, [pc, #128]	; (8007114 <HAL_RCC_ClockConfig+0x1b8>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 030f 	and.w	r3, r3, #15
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	429a      	cmp	r2, r3
 800709e:	d001      	beq.n	80070a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e032      	b.n	800710a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0304 	and.w	r3, r3, #4
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d008      	beq.n	80070c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070b0:	4b19      	ldr	r3, [pc, #100]	; (8007118 <HAL_RCC_ClockConfig+0x1bc>)
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	4916      	ldr	r1, [pc, #88]	; (8007118 <HAL_RCC_ClockConfig+0x1bc>)
 80070be:	4313      	orrs	r3, r2
 80070c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0308 	and.w	r3, r3, #8
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d009      	beq.n	80070e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070ce:	4b12      	ldr	r3, [pc, #72]	; (8007118 <HAL_RCC_ClockConfig+0x1bc>)
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	00db      	lsls	r3, r3, #3
 80070dc:	490e      	ldr	r1, [pc, #56]	; (8007118 <HAL_RCC_ClockConfig+0x1bc>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80070e2:	f000 f821 	bl	8007128 <HAL_RCC_GetSysClockFreq>
 80070e6:	4601      	mov	r1, r0
 80070e8:	4b0b      	ldr	r3, [pc, #44]	; (8007118 <HAL_RCC_ClockConfig+0x1bc>)
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	091b      	lsrs	r3, r3, #4
 80070ee:	f003 030f 	and.w	r3, r3, #15
 80070f2:	4a0a      	ldr	r2, [pc, #40]	; (800711c <HAL_RCC_ClockConfig+0x1c0>)
 80070f4:	5cd3      	ldrb	r3, [r2, r3]
 80070f6:	fa21 f303 	lsr.w	r3, r1, r3
 80070fa:	4a09      	ldr	r2, [pc, #36]	; (8007120 <HAL_RCC_ClockConfig+0x1c4>)
 80070fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80070fe:	4b09      	ldr	r3, [pc, #36]	; (8007124 <HAL_RCC_ClockConfig+0x1c8>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4618      	mov	r0, r3
 8007104:	f7fa fd70 	bl	8001be8 <HAL_InitTick>

  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	40023c00 	.word	0x40023c00
 8007118:	40023800 	.word	0x40023800
 800711c:	08017328 	.word	0x08017328
 8007120:	20000000 	.word	0x20000000
 8007124:	20000004 	.word	0x20000004

08007128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800712e:	2300      	movs	r3, #0
 8007130:	607b      	str	r3, [r7, #4]
 8007132:	2300      	movs	r3, #0
 8007134:	60fb      	str	r3, [r7, #12]
 8007136:	2300      	movs	r3, #0
 8007138:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800713a:	2300      	movs	r3, #0
 800713c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800713e:	4b63      	ldr	r3, [pc, #396]	; (80072cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f003 030c 	and.w	r3, r3, #12
 8007146:	2b04      	cmp	r3, #4
 8007148:	d007      	beq.n	800715a <HAL_RCC_GetSysClockFreq+0x32>
 800714a:	2b08      	cmp	r3, #8
 800714c:	d008      	beq.n	8007160 <HAL_RCC_GetSysClockFreq+0x38>
 800714e:	2b00      	cmp	r3, #0
 8007150:	f040 80b4 	bne.w	80072bc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007154:	4b5e      	ldr	r3, [pc, #376]	; (80072d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007156:	60bb      	str	r3, [r7, #8]
       break;
 8007158:	e0b3      	b.n	80072c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800715a:	4b5e      	ldr	r3, [pc, #376]	; (80072d4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800715c:	60bb      	str	r3, [r7, #8]
      break;
 800715e:	e0b0      	b.n	80072c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007160:	4b5a      	ldr	r3, [pc, #360]	; (80072cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007168:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800716a:	4b58      	ldr	r3, [pc, #352]	; (80072cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007172:	2b00      	cmp	r3, #0
 8007174:	d04a      	beq.n	800720c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007176:	4b55      	ldr	r3, [pc, #340]	; (80072cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	099b      	lsrs	r3, r3, #6
 800717c:	f04f 0400 	mov.w	r4, #0
 8007180:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007184:	f04f 0200 	mov.w	r2, #0
 8007188:	ea03 0501 	and.w	r5, r3, r1
 800718c:	ea04 0602 	and.w	r6, r4, r2
 8007190:	4629      	mov	r1, r5
 8007192:	4632      	mov	r2, r6
 8007194:	f04f 0300 	mov.w	r3, #0
 8007198:	f04f 0400 	mov.w	r4, #0
 800719c:	0154      	lsls	r4, r2, #5
 800719e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80071a2:	014b      	lsls	r3, r1, #5
 80071a4:	4619      	mov	r1, r3
 80071a6:	4622      	mov	r2, r4
 80071a8:	1b49      	subs	r1, r1, r5
 80071aa:	eb62 0206 	sbc.w	r2, r2, r6
 80071ae:	f04f 0300 	mov.w	r3, #0
 80071b2:	f04f 0400 	mov.w	r4, #0
 80071b6:	0194      	lsls	r4, r2, #6
 80071b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80071bc:	018b      	lsls	r3, r1, #6
 80071be:	1a5b      	subs	r3, r3, r1
 80071c0:	eb64 0402 	sbc.w	r4, r4, r2
 80071c4:	f04f 0100 	mov.w	r1, #0
 80071c8:	f04f 0200 	mov.w	r2, #0
 80071cc:	00e2      	lsls	r2, r4, #3
 80071ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80071d2:	00d9      	lsls	r1, r3, #3
 80071d4:	460b      	mov	r3, r1
 80071d6:	4614      	mov	r4, r2
 80071d8:	195b      	adds	r3, r3, r5
 80071da:	eb44 0406 	adc.w	r4, r4, r6
 80071de:	f04f 0100 	mov.w	r1, #0
 80071e2:	f04f 0200 	mov.w	r2, #0
 80071e6:	0262      	lsls	r2, r4, #9
 80071e8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80071ec:	0259      	lsls	r1, r3, #9
 80071ee:	460b      	mov	r3, r1
 80071f0:	4614      	mov	r4, r2
 80071f2:	4618      	mov	r0, r3
 80071f4:	4621      	mov	r1, r4
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f04f 0400 	mov.w	r4, #0
 80071fc:	461a      	mov	r2, r3
 80071fe:	4623      	mov	r3, r4
 8007200:	f7f8 fff8 	bl	80001f4 <__aeabi_uldivmod>
 8007204:	4603      	mov	r3, r0
 8007206:	460c      	mov	r4, r1
 8007208:	60fb      	str	r3, [r7, #12]
 800720a:	e049      	b.n	80072a0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800720c:	4b2f      	ldr	r3, [pc, #188]	; (80072cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	099b      	lsrs	r3, r3, #6
 8007212:	f04f 0400 	mov.w	r4, #0
 8007216:	f240 11ff 	movw	r1, #511	; 0x1ff
 800721a:	f04f 0200 	mov.w	r2, #0
 800721e:	ea03 0501 	and.w	r5, r3, r1
 8007222:	ea04 0602 	and.w	r6, r4, r2
 8007226:	4629      	mov	r1, r5
 8007228:	4632      	mov	r2, r6
 800722a:	f04f 0300 	mov.w	r3, #0
 800722e:	f04f 0400 	mov.w	r4, #0
 8007232:	0154      	lsls	r4, r2, #5
 8007234:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007238:	014b      	lsls	r3, r1, #5
 800723a:	4619      	mov	r1, r3
 800723c:	4622      	mov	r2, r4
 800723e:	1b49      	subs	r1, r1, r5
 8007240:	eb62 0206 	sbc.w	r2, r2, r6
 8007244:	f04f 0300 	mov.w	r3, #0
 8007248:	f04f 0400 	mov.w	r4, #0
 800724c:	0194      	lsls	r4, r2, #6
 800724e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007252:	018b      	lsls	r3, r1, #6
 8007254:	1a5b      	subs	r3, r3, r1
 8007256:	eb64 0402 	sbc.w	r4, r4, r2
 800725a:	f04f 0100 	mov.w	r1, #0
 800725e:	f04f 0200 	mov.w	r2, #0
 8007262:	00e2      	lsls	r2, r4, #3
 8007264:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007268:	00d9      	lsls	r1, r3, #3
 800726a:	460b      	mov	r3, r1
 800726c:	4614      	mov	r4, r2
 800726e:	195b      	adds	r3, r3, r5
 8007270:	eb44 0406 	adc.w	r4, r4, r6
 8007274:	f04f 0100 	mov.w	r1, #0
 8007278:	f04f 0200 	mov.w	r2, #0
 800727c:	02a2      	lsls	r2, r4, #10
 800727e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007282:	0299      	lsls	r1, r3, #10
 8007284:	460b      	mov	r3, r1
 8007286:	4614      	mov	r4, r2
 8007288:	4618      	mov	r0, r3
 800728a:	4621      	mov	r1, r4
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f04f 0400 	mov.w	r4, #0
 8007292:	461a      	mov	r2, r3
 8007294:	4623      	mov	r3, r4
 8007296:	f7f8 ffad 	bl	80001f4 <__aeabi_uldivmod>
 800729a:	4603      	mov	r3, r0
 800729c:	460c      	mov	r4, r1
 800729e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80072a0:	4b0a      	ldr	r3, [pc, #40]	; (80072cc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	0c1b      	lsrs	r3, r3, #16
 80072a6:	f003 0303 	and.w	r3, r3, #3
 80072aa:	3301      	adds	r3, #1
 80072ac:	005b      	lsls	r3, r3, #1
 80072ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072b8:	60bb      	str	r3, [r7, #8]
      break;
 80072ba:	e002      	b.n	80072c2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072bc:	4b04      	ldr	r3, [pc, #16]	; (80072d0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80072be:	60bb      	str	r3, [r7, #8]
      break;
 80072c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072c2:	68bb      	ldr	r3, [r7, #8]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072cc:	40023800 	.word	0x40023800
 80072d0:	00f42400 	.word	0x00f42400
 80072d4:	007a1200 	.word	0x007a1200

080072d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072d8:	b480      	push	{r7}
 80072da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072dc:	4b03      	ldr	r3, [pc, #12]	; (80072ec <HAL_RCC_GetHCLKFreq+0x14>)
 80072de:	681b      	ldr	r3, [r3, #0]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	20000000 	.word	0x20000000

080072f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80072f4:	f7ff fff0 	bl	80072d8 <HAL_RCC_GetHCLKFreq>
 80072f8:	4601      	mov	r1, r0
 80072fa:	4b05      	ldr	r3, [pc, #20]	; (8007310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	0a9b      	lsrs	r3, r3, #10
 8007300:	f003 0307 	and.w	r3, r3, #7
 8007304:	4a03      	ldr	r2, [pc, #12]	; (8007314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007306:	5cd3      	ldrb	r3, [r2, r3]
 8007308:	fa21 f303 	lsr.w	r3, r1, r3
}
 800730c:	4618      	mov	r0, r3
 800730e:	bd80      	pop	{r7, pc}
 8007310:	40023800 	.word	0x40023800
 8007314:	08017338 	.word	0x08017338

08007318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800731c:	f7ff ffdc 	bl	80072d8 <HAL_RCC_GetHCLKFreq>
 8007320:	4601      	mov	r1, r0
 8007322:	4b05      	ldr	r3, [pc, #20]	; (8007338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	0b5b      	lsrs	r3, r3, #13
 8007328:	f003 0307 	and.w	r3, r3, #7
 800732c:	4a03      	ldr	r2, [pc, #12]	; (800733c <HAL_RCC_GetPCLK2Freq+0x24>)
 800732e:	5cd3      	ldrb	r3, [r2, r3]
 8007330:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007334:	4618      	mov	r0, r3
 8007336:	bd80      	pop	{r7, pc}
 8007338:	40023800 	.word	0x40023800
 800733c:	08017338 	.word	0x08017338

08007340 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	220f      	movs	r2, #15
 800734e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007350:	4b12      	ldr	r3, [pc, #72]	; (800739c <HAL_RCC_GetClockConfig+0x5c>)
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f003 0203 	and.w	r2, r3, #3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800735c:	4b0f      	ldr	r3, [pc, #60]	; (800739c <HAL_RCC_GetClockConfig+0x5c>)
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007368:	4b0c      	ldr	r3, [pc, #48]	; (800739c <HAL_RCC_GetClockConfig+0x5c>)
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007374:	4b09      	ldr	r3, [pc, #36]	; (800739c <HAL_RCC_GetClockConfig+0x5c>)
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	08db      	lsrs	r3, r3, #3
 800737a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007382:	4b07      	ldr	r3, [pc, #28]	; (80073a0 <HAL_RCC_GetClockConfig+0x60>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 020f 	and.w	r2, r3, #15
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	601a      	str	r2, [r3, #0]
}
 800738e:	bf00      	nop
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	40023800 	.word	0x40023800
 80073a0:	40023c00 	.word	0x40023c00

080073a4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d105      	bne.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d035      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80073cc:	4b62      	ldr	r3, [pc, #392]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80073ce:	2200      	movs	r2, #0
 80073d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073d2:	f7fa fd83 	bl	8001edc <HAL_GetTick>
 80073d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073d8:	e008      	b.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80073da:	f7fa fd7f 	bl	8001edc <HAL_GetTick>
 80073de:	4602      	mov	r2, r0
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d901      	bls.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e0b0      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073ec:	4b5b      	ldr	r3, [pc, #364]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1f0      	bne.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	019a      	lsls	r2, r3, #6
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	071b      	lsls	r3, r3, #28
 8007404:	4955      	ldr	r1, [pc, #340]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007406:	4313      	orrs	r3, r2
 8007408:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800740c:	4b52      	ldr	r3, [pc, #328]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800740e:	2201      	movs	r2, #1
 8007410:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007412:	f7fa fd63 	bl	8001edc <HAL_GetTick>
 8007416:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007418:	e008      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800741a:	f7fa fd5f 	bl	8001edc <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	2b02      	cmp	r3, #2
 8007426:	d901      	bls.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e090      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800742c:	4b4b      	ldr	r3, [pc, #300]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d0f0      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0302 	and.w	r3, r3, #2
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 8083 	beq.w	800754c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007446:	2300      	movs	r3, #0
 8007448:	60fb      	str	r3, [r7, #12]
 800744a:	4b44      	ldr	r3, [pc, #272]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	4a43      	ldr	r2, [pc, #268]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007454:	6413      	str	r3, [r2, #64]	; 0x40
 8007456:	4b41      	ldr	r3, [pc, #260]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007462:	4b3f      	ldr	r3, [pc, #252]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a3e      	ldr	r2, [pc, #248]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800746c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800746e:	f7fa fd35 	bl	8001edc <HAL_GetTick>
 8007472:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007474:	e008      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007476:	f7fa fd31 	bl	8001edc <HAL_GetTick>
 800747a:	4602      	mov	r2, r0
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	2b02      	cmp	r3, #2
 8007482:	d901      	bls.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e062      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007488:	4b35      	ldr	r3, [pc, #212]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007490:	2b00      	cmp	r3, #0
 8007492:	d0f0      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007494:	4b31      	ldr	r3, [pc, #196]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007498:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800749c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d02f      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d028      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074b2:	4b2a      	ldr	r3, [pc, #168]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80074bc:	4b29      	ldr	r3, [pc, #164]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80074be:	2201      	movs	r2, #1
 80074c0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80074c2:	4b28      	ldr	r3, [pc, #160]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80074c8:	4a24      	ldr	r2, [pc, #144]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80074ce:	4b23      	ldr	r3, [pc, #140]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d114      	bne.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80074da:	f7fa fcff 	bl	8001edc <HAL_GetTick>
 80074de:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074e0:	e00a      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074e2:	f7fa fcfb 	bl	8001edc <HAL_GetTick>
 80074e6:	4602      	mov	r2, r0
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d901      	bls.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e02a      	b.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074f8:	4b18      	ldr	r3, [pc, #96]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074fc:	f003 0302 	and.w	r3, r3, #2
 8007500:	2b00      	cmp	r3, #0
 8007502:	d0ee      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800750c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007510:	d10d      	bne.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007512:	4b12      	ldr	r3, [pc, #72]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007526:	490d      	ldr	r1, [pc, #52]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007528:	4313      	orrs	r3, r2
 800752a:	608b      	str	r3, [r1, #8]
 800752c:	e005      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800752e:	4b0b      	ldr	r3, [pc, #44]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	4a0a      	ldr	r2, [pc, #40]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007534:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007538:	6093      	str	r3, [r2, #8]
 800753a:	4b08      	ldr	r3, [pc, #32]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800753c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007546:	4905      	ldr	r1, [pc, #20]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007548:	4313      	orrs	r3, r2
 800754a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3718      	adds	r7, #24
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	42470068 	.word	0x42470068
 800755c:	40023800 	.word	0x40023800
 8007560:	40007000 	.word	0x40007000
 8007564:	42470e40 	.word	0x42470e40

08007568 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d101      	bne.n	800757a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e083      	b.n	8007682 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	7f5b      	ldrb	r3, [r3, #29]
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b00      	cmp	r3, #0
 8007582:	d105      	bne.n	8007590 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7fa f930 	bl	80017f0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2202      	movs	r2, #2
 8007594:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	22ca      	movs	r2, #202	; 0xca
 800759c:	625a      	str	r2, [r3, #36]	; 0x24
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2253      	movs	r2, #83	; 0x53
 80075a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f897 	bl	80076da <RTC_EnterInitMode>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d008      	beq.n	80075c4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	22ff      	movs	r2, #255	; 0xff
 80075b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2204      	movs	r2, #4
 80075be:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e05e      	b.n	8007682 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	6812      	ldr	r2, [r2, #0]
 80075ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80075d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075d6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6899      	ldr	r1, [r3, #8]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	685a      	ldr	r2, [r3, #4]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	431a      	orrs	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	431a      	orrs	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	430a      	orrs	r2, r1
 80075f4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	68d2      	ldr	r2, [r2, #12]
 80075fe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6919      	ldr	r1, [r3, #16]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	041a      	lsls	r2, r3, #16
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	430a      	orrs	r2, r1
 8007612:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68da      	ldr	r2, [r3, #12]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007622:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f003 0320 	and.w	r3, r3, #32
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10e      	bne.n	8007650 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f829 	bl	800768a <HAL_RTC_WaitForSynchro>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d008      	beq.n	8007650 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	22ff      	movs	r2, #255	; 0xff
 8007644:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2204      	movs	r2, #4
 800764a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e018      	b.n	8007682 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800765e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	699a      	ldr	r2, [r3, #24]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	430a      	orrs	r2, r1
 8007670:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	22ff      	movs	r2, #255	; 0xff
 8007678:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007680:	2300      	movs	r3, #0
  }
}
 8007682:	4618      	mov	r0, r3
 8007684:	3708      	adds	r7, #8
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b084      	sub	sp, #16
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007692:	2300      	movs	r3, #0
 8007694:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	68da      	ldr	r2, [r3, #12]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80076a4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80076a6:	f7fa fc19 	bl	8001edc <HAL_GetTick>
 80076aa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80076ac:	e009      	b.n	80076c2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80076ae:	f7fa fc15 	bl	8001edc <HAL_GetTick>
 80076b2:	4602      	mov	r2, r0
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076bc:	d901      	bls.n	80076c2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	e007      	b.n	80076d2 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	f003 0320 	and.w	r3, r3, #32
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d0ee      	beq.n	80076ae <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b084      	sub	sp, #16
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80076e2:	2300      	movs	r3, #0
 80076e4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d119      	bne.n	8007728 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076fc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80076fe:	f7fa fbed 	bl	8001edc <HAL_GetTick>
 8007702:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007704:	e009      	b.n	800771a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007706:	f7fa fbe9 	bl	8001edc <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007714:	d901      	bls.n	800771a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e007      	b.n	800772a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007724:	2b00      	cmp	r3, #0
 8007726:	d0ee      	beq.n	8007706 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b082      	sub	sp, #8
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e01d      	b.n	8007780 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2b00      	cmp	r3, #0
 800774e:	d106      	bne.n	800775e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7fa f85f 	bl	800181c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2202      	movs	r2, #2
 8007762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	3304      	adds	r3, #4
 800776e:	4619      	mov	r1, r3
 8007770:	4610      	mov	r0, r2
 8007772:	f000 fcd7 	bl	8008124 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2202      	movs	r2, #2
 8007794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f003 0307 	and.w	r3, r3, #7
 80077a2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2b06      	cmp	r3, #6
 80077a8:	d007      	beq.n	80077ba <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f042 0201 	orr.w	r2, r2, #1
 80077b8:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68da      	ldr	r2, [r3, #12]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f042 0201 	orr.w	r2, r2, #1
 80077e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	f003 0307 	and.w	r3, r3, #7
 80077f2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2b06      	cmp	r3, #6
 80077f8:	d007      	beq.n	800780a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f042 0201 	orr.w	r2, r2, #1
 8007808:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3714      	adds	r7, #20
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e01d      	b.n	8007866 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d106      	bne.n	8007844 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f815 	bl	800786e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2202      	movs	r2, #2
 8007848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	3304      	adds	r3, #4
 8007854:	4619      	mov	r1, r3
 8007856:	4610      	mov	r0, r2
 8007858:	f000 fc64 	bl	8008124 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800786e:	b480      	push	{r7}
 8007870:	b083      	sub	sp, #12
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007876:	bf00      	nop
 8007878:	370c      	adds	r7, #12
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
	...

08007884 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2201      	movs	r2, #1
 8007894:	6839      	ldr	r1, [r7, #0]
 8007896:	4618      	mov	r0, r3
 8007898:	f000 ffb4 	bl	8008804 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a15      	ldr	r2, [pc, #84]	; (80078f8 <HAL_TIM_PWM_Start+0x74>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d004      	beq.n	80078b0 <HAL_TIM_PWM_Start+0x2c>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a14      	ldr	r2, [pc, #80]	; (80078fc <HAL_TIM_PWM_Start+0x78>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d101      	bne.n	80078b4 <HAL_TIM_PWM_Start+0x30>
 80078b0:	2301      	movs	r3, #1
 80078b2:	e000      	b.n	80078b6 <HAL_TIM_PWM_Start+0x32>
 80078b4:	2300      	movs	r3, #0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d007      	beq.n	80078ca <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	f003 0307 	and.w	r3, r3, #7
 80078d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2b06      	cmp	r3, #6
 80078da:	d007      	beq.n	80078ec <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f042 0201 	orr.w	r2, r2, #1
 80078ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	40010000 	.word	0x40010000
 80078fc:	40010400 	.word	0x40010400

08007900 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2200      	movs	r2, #0
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	4618      	mov	r0, r3
 8007914:	f000 ff76 	bl	8008804 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a22      	ldr	r2, [pc, #136]	; (80079a8 <HAL_TIM_PWM_Stop+0xa8>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d004      	beq.n	800792c <HAL_TIM_PWM_Stop+0x2c>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a21      	ldr	r2, [pc, #132]	; (80079ac <HAL_TIM_PWM_Stop+0xac>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d101      	bne.n	8007930 <HAL_TIM_PWM_Stop+0x30>
 800792c:	2301      	movs	r3, #1
 800792e:	e000      	b.n	8007932 <HAL_TIM_PWM_Stop+0x32>
 8007930:	2300      	movs	r3, #0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d017      	beq.n	8007966 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	6a1a      	ldr	r2, [r3, #32]
 800793c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007940:	4013      	ands	r3, r2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10f      	bne.n	8007966 <HAL_TIM_PWM_Stop+0x66>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	6a1a      	ldr	r2, [r3, #32]
 800794c:	f240 4344 	movw	r3, #1092	; 0x444
 8007950:	4013      	ands	r3, r2
 8007952:	2b00      	cmp	r3, #0
 8007954:	d107      	bne.n	8007966 <HAL_TIM_PWM_Stop+0x66>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007964:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	6a1a      	ldr	r2, [r3, #32]
 800796c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007970:	4013      	ands	r3, r2
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10f      	bne.n	8007996 <HAL_TIM_PWM_Stop+0x96>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	6a1a      	ldr	r2, [r3, #32]
 800797c:	f240 4344 	movw	r3, #1092	; 0x444
 8007980:	4013      	ands	r3, r2
 8007982:	2b00      	cmp	r3, #0
 8007984:	d107      	bne.n	8007996 <HAL_TIM_PWM_Stop+0x96>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f022 0201 	bic.w	r2, r2, #1
 8007994:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	40010000 	.word	0x40010000
 80079ac:	40010400 	.word	0x40010400

080079b0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e083      	b.n	8007acc <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d106      	bne.n	80079de <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f7f9 ff9d 	bl	8001918 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2202      	movs	r2, #2
 80079e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	6812      	ldr	r2, [r2, #0]
 80079f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079f4:	f023 0307 	bic.w	r3, r3, #7
 80079f8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	3304      	adds	r3, #4
 8007a02:	4619      	mov	r1, r3
 8007a04:	4610      	mov	r0, r2
 8007a06:	f000 fb8d 	bl	8008124 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	6a1b      	ldr	r3, [r3, #32]
 8007a20:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	697a      	ldr	r2, [r7, #20]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a32:	f023 0303 	bic.w	r3, r3, #3
 8007a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	689a      	ldr	r2, [r3, #8]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	021b      	lsls	r3, r3, #8
 8007a42:	4313      	orrs	r3, r2
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007a50:	f023 030c 	bic.w	r3, r3, #12
 8007a54:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	68da      	ldr	r2, [r3, #12]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	69db      	ldr	r3, [r3, #28]
 8007a6a:	021b      	lsls	r3, r3, #8
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	693a      	ldr	r2, [r7, #16]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	011a      	lsls	r2, r3, #4
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	031b      	lsls	r3, r3, #12
 8007a80:	4313      	orrs	r3, r2
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	4313      	orrs	r3, r2
 8007a86:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007a8e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007a96:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	685a      	ldr	r2, [r3, #4]
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	695b      	ldr	r3, [r3, #20]
 8007aa0:	011b      	lsls	r3, r3, #4
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3718      	adds	r7, #24
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d002      	beq.n	8007aea <HAL_TIM_Encoder_Start+0x16>
 8007ae4:	2b04      	cmp	r3, #4
 8007ae6:	d008      	beq.n	8007afa <HAL_TIM_Encoder_Start+0x26>
 8007ae8:	e00f      	b.n	8007b0a <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2201      	movs	r2, #1
 8007af0:	2100      	movs	r1, #0
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 fe86 	bl	8008804 <TIM_CCxChannelCmd>
      break;
 8007af8:	e016      	b.n	8007b28 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2201      	movs	r2, #1
 8007b00:	2104      	movs	r1, #4
 8007b02:	4618      	mov	r0, r3
 8007b04:	f000 fe7e 	bl	8008804 <TIM_CCxChannelCmd>
      break;
 8007b08:	e00e      	b.n	8007b28 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	2100      	movs	r1, #0
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 fe76 	bl	8008804 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	2104      	movs	r1, #4
 8007b20:	4618      	mov	r0, r3
 8007b22:	f000 fe6f 	bl	8008804 <TIM_CCxChannelCmd>
      break;
 8007b26:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f042 0201 	orr.w	r2, r2, #1
 8007b36:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b082      	sub	sp, #8
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	f003 0302 	and.w	r3, r3, #2
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d122      	bne.n	8007b9e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	f003 0302 	and.w	r3, r3, #2
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d11b      	bne.n	8007b9e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f06f 0202 	mvn.w	r2, #2
 8007b6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	f003 0303 	and.w	r3, r3, #3
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d003      	beq.n	8007b8c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 faae 	bl	80080e6 <HAL_TIM_IC_CaptureCallback>
 8007b8a:	e005      	b.n	8007b98 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 faa0 	bl	80080d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fab1 	bl	80080fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	f003 0304 	and.w	r3, r3, #4
 8007ba8:	2b04      	cmp	r3, #4
 8007baa:	d122      	bne.n	8007bf2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	f003 0304 	and.w	r3, r3, #4
 8007bb6:	2b04      	cmp	r3, #4
 8007bb8:	d11b      	bne.n	8007bf2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f06f 0204 	mvn.w	r2, #4
 8007bc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d003      	beq.n	8007be0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fa84 	bl	80080e6 <HAL_TIM_IC_CaptureCallback>
 8007bde:	e005      	b.n	8007bec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fa76 	bl	80080d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fa87 	bl	80080fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	f003 0308 	and.w	r3, r3, #8
 8007bfc:	2b08      	cmp	r3, #8
 8007bfe:	d122      	bne.n	8007c46 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	f003 0308 	and.w	r3, r3, #8
 8007c0a:	2b08      	cmp	r3, #8
 8007c0c:	d11b      	bne.n	8007c46 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f06f 0208 	mvn.w	r2, #8
 8007c16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2204      	movs	r2, #4
 8007c1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	69db      	ldr	r3, [r3, #28]
 8007c24:	f003 0303 	and.w	r3, r3, #3
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d003      	beq.n	8007c34 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 fa5a 	bl	80080e6 <HAL_TIM_IC_CaptureCallback>
 8007c32:	e005      	b.n	8007c40 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fa4c 	bl	80080d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fa5d 	bl	80080fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	f003 0310 	and.w	r3, r3, #16
 8007c50:	2b10      	cmp	r3, #16
 8007c52:	d122      	bne.n	8007c9a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	f003 0310 	and.w	r3, r3, #16
 8007c5e:	2b10      	cmp	r3, #16
 8007c60:	d11b      	bne.n	8007c9a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f06f 0210 	mvn.w	r2, #16
 8007c6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2208      	movs	r2, #8
 8007c70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	69db      	ldr	r3, [r3, #28]
 8007c78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d003      	beq.n	8007c88 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fa30 	bl	80080e6 <HAL_TIM_IC_CaptureCallback>
 8007c86:	e005      	b.n	8007c94 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fa22 	bl	80080d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fa33 	bl	80080fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d10e      	bne.n	8007cc6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d107      	bne.n	8007cc6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f06f 0201 	mvn.w	r2, #1
 8007cbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7f9 fb93 	bl	80013ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd0:	2b80      	cmp	r3, #128	; 0x80
 8007cd2:	d10e      	bne.n	8007cf2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cde:	2b80      	cmp	r3, #128	; 0x80
 8007ce0:	d107      	bne.n	8007cf2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fe87 	bl	8008a00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cfc:	2b40      	cmp	r3, #64	; 0x40
 8007cfe:	d10e      	bne.n	8007d1e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d0a:	2b40      	cmp	r3, #64	; 0x40
 8007d0c:	d107      	bne.n	8007d1e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 f9f8 	bl	800810e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	f003 0320 	and.w	r3, r3, #32
 8007d28:	2b20      	cmp	r3, #32
 8007d2a:	d10e      	bne.n	8007d4a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	f003 0320 	and.w	r3, r3, #32
 8007d36:	2b20      	cmp	r3, #32
 8007d38:	d107      	bne.n	8007d4a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f06f 0220 	mvn.w	r2, #32
 8007d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 fe51 	bl	80089ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d4a:	bf00      	nop
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
	...

08007d54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d101      	bne.n	8007d6e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007d6a:	2302      	movs	r3, #2
 8007d6c:	e0b4      	b.n	8007ed8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2202      	movs	r2, #2
 8007d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b0c      	cmp	r3, #12
 8007d82:	f200 809f 	bhi.w	8007ec4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007d86:	a201      	add	r2, pc, #4	; (adr r2, 8007d8c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8c:	08007dc1 	.word	0x08007dc1
 8007d90:	08007ec5 	.word	0x08007ec5
 8007d94:	08007ec5 	.word	0x08007ec5
 8007d98:	08007ec5 	.word	0x08007ec5
 8007d9c:	08007e01 	.word	0x08007e01
 8007da0:	08007ec5 	.word	0x08007ec5
 8007da4:	08007ec5 	.word	0x08007ec5
 8007da8:	08007ec5 	.word	0x08007ec5
 8007dac:	08007e43 	.word	0x08007e43
 8007db0:	08007ec5 	.word	0x08007ec5
 8007db4:	08007ec5 	.word	0x08007ec5
 8007db8:	08007ec5 	.word	0x08007ec5
 8007dbc:	08007e83 	.word	0x08007e83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68b9      	ldr	r1, [r7, #8]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 fa4c 	bl	8008264 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	699a      	ldr	r2, [r3, #24]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f042 0208 	orr.w	r2, r2, #8
 8007dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	699a      	ldr	r2, [r3, #24]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f022 0204 	bic.w	r2, r2, #4
 8007dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6999      	ldr	r1, [r3, #24]
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	691a      	ldr	r2, [r3, #16]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	430a      	orrs	r2, r1
 8007dfc:	619a      	str	r2, [r3, #24]
      break;
 8007dfe:	e062      	b.n	8007ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68b9      	ldr	r1, [r7, #8]
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 fa9c 	bl	8008344 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	699a      	ldr	r2, [r3, #24]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	699a      	ldr	r2, [r3, #24]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	6999      	ldr	r1, [r3, #24]
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	021a      	lsls	r2, r3, #8
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	430a      	orrs	r2, r1
 8007e3e:	619a      	str	r2, [r3, #24]
      break;
 8007e40:	e041      	b.n	8007ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68b9      	ldr	r1, [r7, #8]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f000 faf1 	bl	8008430 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	69da      	ldr	r2, [r3, #28]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f042 0208 	orr.w	r2, r2, #8
 8007e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	69da      	ldr	r2, [r3, #28]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f022 0204 	bic.w	r2, r2, #4
 8007e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	69d9      	ldr	r1, [r3, #28]
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	691a      	ldr	r2, [r3, #16]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	430a      	orrs	r2, r1
 8007e7e:	61da      	str	r2, [r3, #28]
      break;
 8007e80:	e021      	b.n	8007ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68b9      	ldr	r1, [r7, #8]
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f000 fb45 	bl	8008518 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	69da      	ldr	r2, [r3, #28]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	69da      	ldr	r2, [r3, #28]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007eac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	69d9      	ldr	r1, [r3, #28]
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	021a      	lsls	r2, r3, #8
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	430a      	orrs	r2, r1
 8007ec0:	61da      	str	r2, [r3, #28]
      break;
 8007ec2:	e000      	b.n	8007ec6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007ec4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d101      	bne.n	8007ef8 <HAL_TIM_ConfigClockSource+0x18>
 8007ef4:	2302      	movs	r3, #2
 8007ef6:	e0a6      	b.n	8008046 <HAL_TIM_ConfigClockSource+0x166>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2202      	movs	r2, #2
 8007f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007f16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f1e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b40      	cmp	r3, #64	; 0x40
 8007f2e:	d067      	beq.n	8008000 <HAL_TIM_ConfigClockSource+0x120>
 8007f30:	2b40      	cmp	r3, #64	; 0x40
 8007f32:	d80b      	bhi.n	8007f4c <HAL_TIM_ConfigClockSource+0x6c>
 8007f34:	2b10      	cmp	r3, #16
 8007f36:	d073      	beq.n	8008020 <HAL_TIM_ConfigClockSource+0x140>
 8007f38:	2b10      	cmp	r3, #16
 8007f3a:	d802      	bhi.n	8007f42 <HAL_TIM_ConfigClockSource+0x62>
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d06f      	beq.n	8008020 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007f40:	e078      	b.n	8008034 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007f42:	2b20      	cmp	r3, #32
 8007f44:	d06c      	beq.n	8008020 <HAL_TIM_ConfigClockSource+0x140>
 8007f46:	2b30      	cmp	r3, #48	; 0x30
 8007f48:	d06a      	beq.n	8008020 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007f4a:	e073      	b.n	8008034 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007f4c:	2b70      	cmp	r3, #112	; 0x70
 8007f4e:	d00d      	beq.n	8007f6c <HAL_TIM_ConfigClockSource+0x8c>
 8007f50:	2b70      	cmp	r3, #112	; 0x70
 8007f52:	d804      	bhi.n	8007f5e <HAL_TIM_ConfigClockSource+0x7e>
 8007f54:	2b50      	cmp	r3, #80	; 0x50
 8007f56:	d033      	beq.n	8007fc0 <HAL_TIM_ConfigClockSource+0xe0>
 8007f58:	2b60      	cmp	r3, #96	; 0x60
 8007f5a:	d041      	beq.n	8007fe0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007f5c:	e06a      	b.n	8008034 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f62:	d066      	beq.n	8008032 <HAL_TIM_ConfigClockSource+0x152>
 8007f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f68:	d017      	beq.n	8007f9a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007f6a:	e063      	b.n	8008034 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6818      	ldr	r0, [r3, #0]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	6899      	ldr	r1, [r3, #8]
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	685a      	ldr	r2, [r3, #4]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	f000 fc22 	bl	80087c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f8e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	609a      	str	r2, [r3, #8]
      break;
 8007f98:	e04c      	b.n	8008034 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6818      	ldr	r0, [r3, #0]
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	6899      	ldr	r1, [r3, #8]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	685a      	ldr	r2, [r3, #4]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	f000 fc0b 	bl	80087c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	689a      	ldr	r2, [r3, #8]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fbc:	609a      	str	r2, [r3, #8]
      break;
 8007fbe:	e039      	b.n	8008034 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6818      	ldr	r0, [r3, #0]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	6859      	ldr	r1, [r3, #4]
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	461a      	mov	r2, r3
 8007fce:	f000 fb7f 	bl	80086d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2150      	movs	r1, #80	; 0x50
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f000 fbd8 	bl	800878e <TIM_ITRx_SetConfig>
      break;
 8007fde:	e029      	b.n	8008034 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6818      	ldr	r0, [r3, #0]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	6859      	ldr	r1, [r3, #4]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	461a      	mov	r2, r3
 8007fee:	f000 fb9e 	bl	800872e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2160      	movs	r1, #96	; 0x60
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 fbc8 	bl	800878e <TIM_ITRx_SetConfig>
      break;
 8007ffe:	e019      	b.n	8008034 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6818      	ldr	r0, [r3, #0]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	6859      	ldr	r1, [r3, #4]
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	461a      	mov	r2, r3
 800800e:	f000 fb5f 	bl	80086d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2140      	movs	r1, #64	; 0x40
 8008018:	4618      	mov	r0, r3
 800801a:	f000 fbb8 	bl	800878e <TIM_ITRx_SetConfig>
      break;
 800801e:	e009      	b.n	8008034 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4619      	mov	r1, r3
 800802a:	4610      	mov	r0, r2
 800802c:	f000 fbaf 	bl	800878e <TIM_ITRx_SetConfig>
      break;
 8008030:	e000      	b.n	8008034 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008032:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}

0800804e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b082      	sub	sp, #8
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800805e:	2b01      	cmp	r3, #1
 8008060:	d101      	bne.n	8008066 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008062:	2302      	movs	r3, #2
 8008064:	e031      	b.n	80080ca <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2202      	movs	r2, #2
 8008072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008076:	6839      	ldr	r1, [r7, #0]
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 faa3 	bl	80085c4 <TIM_SlaveTimer_SetConfig>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d009      	beq.n	8008098 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e018      	b.n	80080ca <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68da      	ldr	r2, [r3, #12]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080a6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	68da      	ldr	r2, [r3, #12]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80080b6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080d2:	b480      	push	{r7}
 80080d4:	b083      	sub	sp, #12
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080da:	bf00      	nop
 80080dc:	370c      	adds	r7, #12
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr

080080e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080e6:	b480      	push	{r7}
 80080e8:	b083      	sub	sp, #12
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080ee:	bf00      	nop
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b083      	sub	sp, #12
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008102:	bf00      	nop
 8008104:	370c      	adds	r7, #12
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr

0800810e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800810e:	b480      	push	{r7}
 8008110:	b083      	sub	sp, #12
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008116:	bf00      	nop
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
	...

08008124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a40      	ldr	r2, [pc, #256]	; (8008238 <TIM_Base_SetConfig+0x114>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d013      	beq.n	8008164 <TIM_Base_SetConfig+0x40>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008142:	d00f      	beq.n	8008164 <TIM_Base_SetConfig+0x40>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a3d      	ldr	r2, [pc, #244]	; (800823c <TIM_Base_SetConfig+0x118>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d00b      	beq.n	8008164 <TIM_Base_SetConfig+0x40>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a3c      	ldr	r2, [pc, #240]	; (8008240 <TIM_Base_SetConfig+0x11c>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d007      	beq.n	8008164 <TIM_Base_SetConfig+0x40>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a3b      	ldr	r2, [pc, #236]	; (8008244 <TIM_Base_SetConfig+0x120>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d003      	beq.n	8008164 <TIM_Base_SetConfig+0x40>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a3a      	ldr	r2, [pc, #232]	; (8008248 <TIM_Base_SetConfig+0x124>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d108      	bne.n	8008176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800816a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	4313      	orrs	r3, r2
 8008174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a2f      	ldr	r2, [pc, #188]	; (8008238 <TIM_Base_SetConfig+0x114>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d02b      	beq.n	80081d6 <TIM_Base_SetConfig+0xb2>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008184:	d027      	beq.n	80081d6 <TIM_Base_SetConfig+0xb2>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a2c      	ldr	r2, [pc, #176]	; (800823c <TIM_Base_SetConfig+0x118>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d023      	beq.n	80081d6 <TIM_Base_SetConfig+0xb2>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a2b      	ldr	r2, [pc, #172]	; (8008240 <TIM_Base_SetConfig+0x11c>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d01f      	beq.n	80081d6 <TIM_Base_SetConfig+0xb2>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a2a      	ldr	r2, [pc, #168]	; (8008244 <TIM_Base_SetConfig+0x120>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d01b      	beq.n	80081d6 <TIM_Base_SetConfig+0xb2>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a29      	ldr	r2, [pc, #164]	; (8008248 <TIM_Base_SetConfig+0x124>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d017      	beq.n	80081d6 <TIM_Base_SetConfig+0xb2>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a28      	ldr	r2, [pc, #160]	; (800824c <TIM_Base_SetConfig+0x128>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d013      	beq.n	80081d6 <TIM_Base_SetConfig+0xb2>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a27      	ldr	r2, [pc, #156]	; (8008250 <TIM_Base_SetConfig+0x12c>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d00f      	beq.n	80081d6 <TIM_Base_SetConfig+0xb2>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a26      	ldr	r2, [pc, #152]	; (8008254 <TIM_Base_SetConfig+0x130>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d00b      	beq.n	80081d6 <TIM_Base_SetConfig+0xb2>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a25      	ldr	r2, [pc, #148]	; (8008258 <TIM_Base_SetConfig+0x134>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d007      	beq.n	80081d6 <TIM_Base_SetConfig+0xb2>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a24      	ldr	r2, [pc, #144]	; (800825c <TIM_Base_SetConfig+0x138>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d003      	beq.n	80081d6 <TIM_Base_SetConfig+0xb2>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a23      	ldr	r2, [pc, #140]	; (8008260 <TIM_Base_SetConfig+0x13c>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d108      	bne.n	80081e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	695b      	ldr	r3, [r3, #20]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	689a      	ldr	r2, [r3, #8]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a0a      	ldr	r2, [pc, #40]	; (8008238 <TIM_Base_SetConfig+0x114>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d003      	beq.n	800821c <TIM_Base_SetConfig+0xf8>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a0c      	ldr	r2, [pc, #48]	; (8008248 <TIM_Base_SetConfig+0x124>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d103      	bne.n	8008224 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	691a      	ldr	r2, [r3, #16]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	615a      	str	r2, [r3, #20]
}
 800822a:	bf00      	nop
 800822c:	3714      	adds	r7, #20
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	40010000 	.word	0x40010000
 800823c:	40000400 	.word	0x40000400
 8008240:	40000800 	.word	0x40000800
 8008244:	40000c00 	.word	0x40000c00
 8008248:	40010400 	.word	0x40010400
 800824c:	40014000 	.word	0x40014000
 8008250:	40014400 	.word	0x40014400
 8008254:	40014800 	.word	0x40014800
 8008258:	40001800 	.word	0x40001800
 800825c:	40001c00 	.word	0x40001c00
 8008260:	40002000 	.word	0x40002000

08008264 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008264:	b480      	push	{r7}
 8008266:	b087      	sub	sp, #28
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	f023 0201 	bic.w	r2, r3, #1
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a1b      	ldr	r3, [r3, #32]
 800827e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f023 0303 	bic.w	r3, r3, #3
 800829a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f023 0302 	bic.w	r3, r3, #2
 80082ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a20      	ldr	r2, [pc, #128]	; (800833c <TIM_OC1_SetConfig+0xd8>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d003      	beq.n	80082c8 <TIM_OC1_SetConfig+0x64>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a1f      	ldr	r2, [pc, #124]	; (8008340 <TIM_OC1_SetConfig+0xdc>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d10c      	bne.n	80082e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	f023 0308 	bic.w	r3, r3, #8
 80082ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	697a      	ldr	r2, [r7, #20]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	f023 0304 	bic.w	r3, r3, #4
 80082e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4a15      	ldr	r2, [pc, #84]	; (800833c <TIM_OC1_SetConfig+0xd8>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d003      	beq.n	80082f2 <TIM_OC1_SetConfig+0x8e>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a14      	ldr	r2, [pc, #80]	; (8008340 <TIM_OC1_SetConfig+0xdc>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d111      	bne.n	8008316 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	4313      	orrs	r3, r2
 800830a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	699b      	ldr	r3, [r3, #24]
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	4313      	orrs	r3, r2
 8008314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	685a      	ldr	r2, [r3, #4]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	697a      	ldr	r2, [r7, #20]
 800832e:	621a      	str	r2, [r3, #32]
}
 8008330:	bf00      	nop
 8008332:	371c      	adds	r7, #28
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	40010000 	.word	0x40010000
 8008340:	40010400 	.word	0x40010400

08008344 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008344:	b480      	push	{r7}
 8008346:	b087      	sub	sp, #28
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	f023 0210 	bic.w	r2, r3, #16
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a1b      	ldr	r3, [r3, #32]
 800835e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	699b      	ldr	r3, [r3, #24]
 800836a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800837a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	021b      	lsls	r3, r3, #8
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	4313      	orrs	r3, r2
 8008386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	f023 0320 	bic.w	r3, r3, #32
 800838e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	011b      	lsls	r3, r3, #4
 8008396:	697a      	ldr	r2, [r7, #20]
 8008398:	4313      	orrs	r3, r2
 800839a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a22      	ldr	r2, [pc, #136]	; (8008428 <TIM_OC2_SetConfig+0xe4>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d003      	beq.n	80083ac <TIM_OC2_SetConfig+0x68>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a21      	ldr	r2, [pc, #132]	; (800842c <TIM_OC2_SetConfig+0xe8>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d10d      	bne.n	80083c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	011b      	lsls	r3, r3, #4
 80083ba:	697a      	ldr	r2, [r7, #20]
 80083bc:	4313      	orrs	r3, r2
 80083be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a17      	ldr	r2, [pc, #92]	; (8008428 <TIM_OC2_SetConfig+0xe4>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d003      	beq.n	80083d8 <TIM_OC2_SetConfig+0x94>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a16      	ldr	r2, [pc, #88]	; (800842c <TIM_OC2_SetConfig+0xe8>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d113      	bne.n	8008400 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	695b      	ldr	r3, [r3, #20]
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	693a      	ldr	r2, [r7, #16]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	699b      	ldr	r3, [r3, #24]
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	693a      	ldr	r2, [r7, #16]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	685a      	ldr	r2, [r3, #4]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	621a      	str	r2, [r3, #32]
}
 800841a:	bf00      	nop
 800841c:	371c      	adds	r7, #28
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	40010000 	.word	0x40010000
 800842c:	40010400 	.word	0x40010400

08008430 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008430:	b480      	push	{r7}
 8008432:	b087      	sub	sp, #28
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a1b      	ldr	r3, [r3, #32]
 800843e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	69db      	ldr	r3, [r3, #28]
 8008456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800845e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f023 0303 	bic.w	r3, r3, #3
 8008466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	4313      	orrs	r3, r2
 8008470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	021b      	lsls	r3, r3, #8
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	4313      	orrs	r3, r2
 8008484:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a21      	ldr	r2, [pc, #132]	; (8008510 <TIM_OC3_SetConfig+0xe0>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d003      	beq.n	8008496 <TIM_OC3_SetConfig+0x66>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a20      	ldr	r2, [pc, #128]	; (8008514 <TIM_OC3_SetConfig+0xe4>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d10d      	bne.n	80084b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800849c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	021b      	lsls	r3, r3, #8
 80084a4:	697a      	ldr	r2, [r7, #20]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a16      	ldr	r2, [pc, #88]	; (8008510 <TIM_OC3_SetConfig+0xe0>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d003      	beq.n	80084c2 <TIM_OC3_SetConfig+0x92>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a15      	ldr	r2, [pc, #84]	; (8008514 <TIM_OC3_SetConfig+0xe4>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d113      	bne.n	80084ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	011b      	lsls	r3, r3, #4
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	4313      	orrs	r3, r2
 80084dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	011b      	lsls	r3, r3, #4
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	685a      	ldr	r2, [r3, #4]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	697a      	ldr	r2, [r7, #20]
 8008502:	621a      	str	r2, [r3, #32]
}
 8008504:	bf00      	nop
 8008506:	371c      	adds	r7, #28
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr
 8008510:	40010000 	.word	0x40010000
 8008514:	40010400 	.word	0x40010400

08008518 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008518:	b480      	push	{r7}
 800851a:	b087      	sub	sp, #28
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a1b      	ldr	r3, [r3, #32]
 8008532:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	69db      	ldr	r3, [r3, #28]
 800853e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800854e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	021b      	lsls	r3, r3, #8
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	4313      	orrs	r3, r2
 800855a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008562:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	031b      	lsls	r3, r3, #12
 800856a:	693a      	ldr	r2, [r7, #16]
 800856c:	4313      	orrs	r3, r2
 800856e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a12      	ldr	r2, [pc, #72]	; (80085bc <TIM_OC4_SetConfig+0xa4>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d003      	beq.n	8008580 <TIM_OC4_SetConfig+0x68>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a11      	ldr	r2, [pc, #68]	; (80085c0 <TIM_OC4_SetConfig+0xa8>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d109      	bne.n	8008594 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008586:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	695b      	ldr	r3, [r3, #20]
 800858c:	019b      	lsls	r3, r3, #6
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	4313      	orrs	r3, r2
 8008592:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	697a      	ldr	r2, [r7, #20]
 8008598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	685a      	ldr	r2, [r3, #4]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	621a      	str	r2, [r3, #32]
}
 80085ae:	bf00      	nop
 80085b0:	371c      	adds	r7, #28
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	40010000 	.word	0x40010000
 80085c0:	40010400 	.word	0x40010400

080085c4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b086      	sub	sp, #24
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085dc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	697a      	ldr	r2, [r7, #20]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	f023 0307 	bic.w	r3, r3, #7
 80085ee:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	697a      	ldr	r2, [r7, #20]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	697a      	ldr	r2, [r7, #20]
 8008600:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	2b30      	cmp	r3, #48	; 0x30
 8008608:	d05c      	beq.n	80086c4 <TIM_SlaveTimer_SetConfig+0x100>
 800860a:	2b30      	cmp	r3, #48	; 0x30
 800860c:	d806      	bhi.n	800861c <TIM_SlaveTimer_SetConfig+0x58>
 800860e:	2b10      	cmp	r3, #16
 8008610:	d058      	beq.n	80086c4 <TIM_SlaveTimer_SetConfig+0x100>
 8008612:	2b20      	cmp	r3, #32
 8008614:	d056      	beq.n	80086c4 <TIM_SlaveTimer_SetConfig+0x100>
 8008616:	2b00      	cmp	r3, #0
 8008618:	d054      	beq.n	80086c4 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800861a:	e054      	b.n	80086c6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800861c:	2b50      	cmp	r3, #80	; 0x50
 800861e:	d03d      	beq.n	800869c <TIM_SlaveTimer_SetConfig+0xd8>
 8008620:	2b50      	cmp	r3, #80	; 0x50
 8008622:	d802      	bhi.n	800862a <TIM_SlaveTimer_SetConfig+0x66>
 8008624:	2b40      	cmp	r3, #64	; 0x40
 8008626:	d010      	beq.n	800864a <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8008628:	e04d      	b.n	80086c6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800862a:	2b60      	cmp	r3, #96	; 0x60
 800862c:	d040      	beq.n	80086b0 <TIM_SlaveTimer_SetConfig+0xec>
 800862e:	2b70      	cmp	r3, #112	; 0x70
 8008630:	d000      	beq.n	8008634 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8008632:	e048      	b.n	80086c6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6818      	ldr	r0, [r3, #0]
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	68d9      	ldr	r1, [r3, #12]
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	689a      	ldr	r2, [r3, #8]
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	f000 f8be 	bl	80087c4 <TIM_ETR_SetConfig>
      break;
 8008648:	e03d      	b.n	80086c6 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2b05      	cmp	r3, #5
 8008650:	d101      	bne.n	8008656 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	e038      	b.n	80086c8 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	6a1b      	ldr	r3, [r3, #32]
 800865c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	6a1a      	ldr	r2, [r3, #32]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f022 0201 	bic.w	r2, r2, #1
 800866c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800867c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	011b      	lsls	r3, r3, #4
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	4313      	orrs	r3, r2
 8008688:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	693a      	ldr	r2, [r7, #16]
 8008698:	621a      	str	r2, [r3, #32]
      break;
 800869a:	e014      	b.n	80086c6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6818      	ldr	r0, [r3, #0]
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	6899      	ldr	r1, [r3, #8]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	691b      	ldr	r3, [r3, #16]
 80086a8:	461a      	mov	r2, r3
 80086aa:	f000 f811 	bl	80086d0 <TIM_TI1_ConfigInputStage>
      break;
 80086ae:	e00a      	b.n	80086c6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6818      	ldr	r0, [r3, #0]
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	6899      	ldr	r1, [r3, #8]
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	461a      	mov	r2, r3
 80086be:	f000 f836 	bl	800872e <TIM_TI2_ConfigInputStage>
      break;
 80086c2:	e000      	b.n	80086c6 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 80086c4:	bf00      	nop
  }
  return HAL_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3718      	adds	r7, #24
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b087      	sub	sp, #28
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6a1b      	ldr	r3, [r3, #32]
 80086e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	f023 0201 	bic.w	r2, r3, #1
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	699b      	ldr	r3, [r3, #24]
 80086f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	011b      	lsls	r3, r3, #4
 8008700:	693a      	ldr	r2, [r7, #16]
 8008702:	4313      	orrs	r3, r2
 8008704:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	f023 030a 	bic.w	r3, r3, #10
 800870c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800870e:	697a      	ldr	r2, [r7, #20]
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	4313      	orrs	r3, r2
 8008714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	693a      	ldr	r2, [r7, #16]
 800871a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	621a      	str	r2, [r3, #32]
}
 8008722:	bf00      	nop
 8008724:	371c      	adds	r7, #28
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr

0800872e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800872e:	b480      	push	{r7}
 8008730:	b087      	sub	sp, #28
 8008732:	af00      	add	r7, sp, #0
 8008734:	60f8      	str	r0, [r7, #12]
 8008736:	60b9      	str	r1, [r7, #8]
 8008738:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	f023 0210 	bic.w	r2, r3, #16
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6a1b      	ldr	r3, [r3, #32]
 8008750:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008758:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	031b      	lsls	r3, r3, #12
 800875e:	697a      	ldr	r2, [r7, #20]
 8008760:	4313      	orrs	r3, r2
 8008762:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800876a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	011b      	lsls	r3, r3, #4
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	4313      	orrs	r3, r2
 8008774:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	697a      	ldr	r2, [r7, #20]
 800877a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	693a      	ldr	r2, [r7, #16]
 8008780:	621a      	str	r2, [r3, #32]
}
 8008782:	bf00      	nop
 8008784:	371c      	adds	r7, #28
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr

0800878e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800878e:	b480      	push	{r7}
 8008790:	b085      	sub	sp, #20
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
 8008796:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087a6:	683a      	ldr	r2, [r7, #0]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	f043 0307 	orr.w	r3, r3, #7
 80087b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	609a      	str	r2, [r3, #8]
}
 80087b8:	bf00      	nop
 80087ba:	3714      	adds	r7, #20
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b087      	sub	sp, #28
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	607a      	str	r2, [r7, #4]
 80087d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	021a      	lsls	r2, r3, #8
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	431a      	orrs	r2, r3
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	697a      	ldr	r2, [r7, #20]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	609a      	str	r2, [r3, #8]
}
 80087f8:	bf00      	nop
 80087fa:	371c      	adds	r7, #28
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008804:	b480      	push	{r7}
 8008806:	b087      	sub	sp, #28
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	f003 031f 	and.w	r3, r3, #31
 8008816:	2201      	movs	r2, #1
 8008818:	fa02 f303 	lsl.w	r3, r2, r3
 800881c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6a1a      	ldr	r2, [r3, #32]
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	43db      	mvns	r3, r3
 8008826:	401a      	ands	r2, r3
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6a1a      	ldr	r2, [r3, #32]
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	f003 031f 	and.w	r3, r3, #31
 8008836:	6879      	ldr	r1, [r7, #4]
 8008838:	fa01 f303 	lsl.w	r3, r1, r3
 800883c:	431a      	orrs	r2, r3
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	621a      	str	r2, [r3, #32]
}
 8008842:	bf00      	nop
 8008844:	371c      	adds	r7, #28
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
	...

08008850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008850:	b480      	push	{r7}
 8008852:	b085      	sub	sp, #20
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008860:	2b01      	cmp	r3, #1
 8008862:	d101      	bne.n	8008868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008864:	2302      	movs	r3, #2
 8008866:	e05a      	b.n	800891e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2202      	movs	r2, #2
 8008874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800888e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	4313      	orrs	r3, r2
 8008898:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a21      	ldr	r2, [pc, #132]	; (800892c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d022      	beq.n	80088f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088b4:	d01d      	beq.n	80088f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a1d      	ldr	r2, [pc, #116]	; (8008930 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d018      	beq.n	80088f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a1b      	ldr	r2, [pc, #108]	; (8008934 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d013      	beq.n	80088f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a1a      	ldr	r2, [pc, #104]	; (8008938 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d00e      	beq.n	80088f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a18      	ldr	r2, [pc, #96]	; (800893c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d009      	beq.n	80088f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a17      	ldr	r2, [pc, #92]	; (8008940 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d004      	beq.n	80088f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a15      	ldr	r2, [pc, #84]	; (8008944 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d10c      	bne.n	800890c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	68ba      	ldr	r2, [r7, #8]
 8008900:	4313      	orrs	r3, r2
 8008902:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800891c:	2300      	movs	r3, #0
}
 800891e:	4618      	mov	r0, r3
 8008920:	3714      	adds	r7, #20
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	40010000 	.word	0x40010000
 8008930:	40000400 	.word	0x40000400
 8008934:	40000800 	.word	0x40000800
 8008938:	40000c00 	.word	0x40000c00
 800893c:	40010400 	.word	0x40010400
 8008940:	40014000 	.word	0x40014000
 8008944:	40001800 	.word	0x40001800

08008948 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008952:	2300      	movs	r3, #0
 8008954:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800895c:	2b01      	cmp	r3, #1
 800895e:	d101      	bne.n	8008964 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008960:	2302      	movs	r3, #2
 8008962:	e03d      	b.n	80089e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	4313      	orrs	r3, r2
 8008978:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	4313      	orrs	r3, r2
 8008986:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	4313      	orrs	r3, r2
 8008994:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	695b      	ldr	r3, [r3, #20]
 80089bc:	4313      	orrs	r3, r2
 80089be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	69db      	ldr	r3, [r3, #28]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68fa      	ldr	r2, [r7, #12]
 80089d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3714      	adds	r7, #20
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80089f4:	bf00      	nop
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d101      	bne.n	8008a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e03f      	b.n	8008aa6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d106      	bne.n	8008a40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f7f9 f884 	bl	8001b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2224      	movs	r2, #36	; 0x24
 8008a44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68da      	ldr	r2, [r3, #12]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fb6d 	bl	8009138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	691a      	ldr	r2, [r3, #16]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	695a      	ldr	r2, [r3, #20]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	68da      	ldr	r2, [r3, #12]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2220      	movs	r2, #32
 8008a98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2220      	movs	r2, #32
 8008aa0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
	...

08008ab0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	4613      	mov	r3, r2
 8008abc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	2b20      	cmp	r3, #32
 8008ac8:	d166      	bne.n	8008b98 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d002      	beq.n	8008ad6 <HAL_UART_Receive_DMA+0x26>
 8008ad0:	88fb      	ldrh	r3, [r7, #6]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d101      	bne.n	8008ada <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e05f      	b.n	8008b9a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d101      	bne.n	8008ae8 <HAL_UART_Receive_DMA+0x38>
 8008ae4:	2302      	movs	r3, #2
 8008ae6:	e058      	b.n	8008b9a <HAL_UART_Receive_DMA+0xea>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8008af0:	68ba      	ldr	r2, [r7, #8]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	88fa      	ldrh	r2, [r7, #6]
 8008afa:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2222      	movs	r2, #34	; 0x22
 8008b06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b0e:	4a25      	ldr	r2, [pc, #148]	; (8008ba4 <HAL_UART_Receive_DMA+0xf4>)
 8008b10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b16:	4a24      	ldr	r2, [pc, #144]	; (8008ba8 <HAL_UART_Receive_DMA+0xf8>)
 8008b18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b1e:	4a23      	ldr	r2, [pc, #140]	; (8008bac <HAL_UART_Receive_DMA+0xfc>)
 8008b20:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b26:	2200      	movs	r2, #0
 8008b28:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8008b2a:	f107 0308 	add.w	r3, r7, #8
 8008b2e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	3304      	adds	r3, #4
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	88fb      	ldrh	r3, [r7, #6]
 8008b42:	f7f9 ff5f 	bl	8002a04 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8008b46:	2300      	movs	r3, #0
 8008b48:	613b      	str	r3, [r7, #16]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	613b      	str	r3, [r7, #16]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	613b      	str	r3, [r7, #16]
 8008b5a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	68da      	ldr	r2, [r3, #12]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b72:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	695a      	ldr	r2, [r3, #20]
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f042 0201 	orr.w	r2, r2, #1
 8008b82:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	695a      	ldr	r2, [r3, #20]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b92:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008b94:	2300      	movs	r3, #0
 8008b96:	e000      	b.n	8008b9a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008b98:	2302      	movs	r3, #2
  }
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3718      	adds	r7, #24
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	08008db1 	.word	0x08008db1
 8008ba8:	08008e19 	.word	0x08008e19
 8008bac:	08008e35 	.word	0x08008e35

08008bb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b088      	sub	sp, #32
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	68db      	ldr	r3, [r3, #12]
 8008bc6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	695b      	ldr	r3, [r3, #20]
 8008bce:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	f003 030f 	and.w	r3, r3, #15
 8008bde:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10d      	bne.n	8008c02 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	f003 0320 	and.w	r3, r3, #32
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d008      	beq.n	8008c02 <HAL_UART_IRQHandler+0x52>
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	f003 0320 	and.w	r3, r3, #32
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d003      	beq.n	8008c02 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fa1a 	bl	8009034 <UART_Receive_IT>
      return;
 8008c00:	e0d1      	b.n	8008da6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f000 80b0 	beq.w	8008d6a <HAL_UART_IRQHandler+0x1ba>
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	f003 0301 	and.w	r3, r3, #1
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d105      	bne.n	8008c20 <HAL_UART_IRQHandler+0x70>
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	f000 80a5 	beq.w	8008d6a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	f003 0301 	and.w	r3, r3, #1
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00a      	beq.n	8008c40 <HAL_UART_IRQHandler+0x90>
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d005      	beq.n	8008c40 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c38:	f043 0201 	orr.w	r2, r3, #1
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	f003 0304 	and.w	r3, r3, #4
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00a      	beq.n	8008c60 <HAL_UART_IRQHandler+0xb0>
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	f003 0301 	and.w	r3, r3, #1
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d005      	beq.n	8008c60 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c58:	f043 0202 	orr.w	r2, r3, #2
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	f003 0302 	and.w	r3, r3, #2
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00a      	beq.n	8008c80 <HAL_UART_IRQHandler+0xd0>
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	f003 0301 	and.w	r3, r3, #1
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d005      	beq.n	8008c80 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c78:	f043 0204 	orr.w	r2, r3, #4
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	f003 0308 	and.w	r3, r3, #8
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00f      	beq.n	8008caa <HAL_UART_IRQHandler+0xfa>
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	f003 0320 	and.w	r3, r3, #32
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d104      	bne.n	8008c9e <HAL_UART_IRQHandler+0xee>
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	f003 0301 	and.w	r3, r3, #1
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d005      	beq.n	8008caa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ca2:	f043 0208 	orr.w	r2, r3, #8
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d078      	beq.n	8008da4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	f003 0320 	and.w	r3, r3, #32
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d007      	beq.n	8008ccc <HAL_UART_IRQHandler+0x11c>
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	f003 0320 	and.w	r3, r3, #32
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d002      	beq.n	8008ccc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f9b4 	bl	8009034 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	695b      	ldr	r3, [r3, #20]
 8008cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cd6:	2b40      	cmp	r3, #64	; 0x40
 8008cd8:	bf0c      	ite	eq
 8008cda:	2301      	moveq	r3, #1
 8008cdc:	2300      	movne	r3, #0
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ce6:	f003 0308 	and.w	r3, r3, #8
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d102      	bne.n	8008cf4 <HAL_UART_IRQHandler+0x144>
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d031      	beq.n	8008d58 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 f8fd 	bl	8008ef4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	695b      	ldr	r3, [r3, #20]
 8008d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d04:	2b40      	cmp	r3, #64	; 0x40
 8008d06:	d123      	bne.n	8008d50 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	695a      	ldr	r2, [r3, #20]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d16:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d013      	beq.n	8008d48 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d24:	4a21      	ldr	r2, [pc, #132]	; (8008dac <HAL_UART_IRQHandler+0x1fc>)
 8008d26:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7f9 fec1 	bl	8002ab4 <HAL_DMA_Abort_IT>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d016      	beq.n	8008d66 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d3e:	687a      	ldr	r2, [r7, #4]
 8008d40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008d42:	4610      	mov	r0, r2
 8008d44:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d46:	e00e      	b.n	8008d66 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f7f7 fc4b 	bl	80005e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d4e:	e00a      	b.n	8008d66 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7f7 fc47 	bl	80005e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d56:	e006      	b.n	8008d66 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f7f7 fc43 	bl	80005e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008d64:	e01e      	b.n	8008da4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d66:	bf00      	nop
    return;
 8008d68:	e01c      	b.n	8008da4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d008      	beq.n	8008d86 <HAL_UART_IRQHandler+0x1d6>
 8008d74:	69bb      	ldr	r3, [r7, #24]
 8008d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d003      	beq.n	8008d86 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f8ea 	bl	8008f58 <UART_Transmit_IT>
    return;
 8008d84:	e00f      	b.n	8008da6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00a      	beq.n	8008da6 <HAL_UART_IRQHandler+0x1f6>
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d005      	beq.n	8008da6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f932 	bl	8009004 <UART_EndTransmit_IT>
    return;
 8008da0:	bf00      	nop
 8008da2:	e000      	b.n	8008da6 <HAL_UART_IRQHandler+0x1f6>
    return;
 8008da4:	bf00      	nop
  }
}
 8008da6:	3720      	adds	r7, #32
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	08008f31 	.word	0x08008f31

08008db0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dbc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d11e      	bne.n	8008e0a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68da      	ldr	r2, [r3, #12]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008de0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	695a      	ldr	r2, [r3, #20]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f022 0201 	bic.w	r2, r2, #1
 8008df0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	695a      	ldr	r2, [r3, #20]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e00:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2220      	movs	r2, #32
 8008e06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f7f7 fb8a 	bl	8000524 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e10:	bf00      	nop
 8008e12:	3710      	adds	r7, #16
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e24:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008e26:	68f8      	ldr	r0, [r7, #12]
 8008e28:	f7f7 fbd2 	bl	80005d0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e2c:	bf00      	nop
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e44:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	695b      	ldr	r3, [r3, #20]
 8008e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e50:	2b80      	cmp	r3, #128	; 0x80
 8008e52:	bf0c      	ite	eq
 8008e54:	2301      	moveq	r3, #1
 8008e56:	2300      	movne	r3, #0
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	2b21      	cmp	r3, #33	; 0x21
 8008e66:	d108      	bne.n	8008e7a <UART_DMAError+0x46>
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d005      	beq.n	8008e7a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	2200      	movs	r2, #0
 8008e72:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008e74:	68b8      	ldr	r0, [r7, #8]
 8008e76:	f000 f827 	bl	8008ec8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	695b      	ldr	r3, [r3, #20]
 8008e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e84:	2b40      	cmp	r3, #64	; 0x40
 8008e86:	bf0c      	ite	eq
 8008e88:	2301      	moveq	r3, #1
 8008e8a:	2300      	movne	r3, #0
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	2b22      	cmp	r3, #34	; 0x22
 8008e9a:	d108      	bne.n	8008eae <UART_DMAError+0x7a>
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d005      	beq.n	8008eae <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008ea8:	68b8      	ldr	r0, [r7, #8]
 8008eaa:	f000 f823 	bl	8008ef4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eb2:	f043 0210 	orr.w	r2, r3, #16
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008eba:	68b8      	ldr	r0, [r7, #8]
 8008ebc:	f7f7 fb92 	bl	80005e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ec0:	bf00      	nop
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68da      	ldr	r2, [r3, #12]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008ede:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2220      	movs	r2, #32
 8008ee4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8008ee8:	bf00      	nop
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68da      	ldr	r2, [r3, #12]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008f0a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	695a      	ldr	r2, [r3, #20]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f022 0201 	bic.w	r2, r2, #1
 8008f1a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2220      	movs	r2, #32
 8008f20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008f24:	bf00      	nop
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2200      	movs	r2, #0
 8008f42:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2200      	movs	r2, #0
 8008f48:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f4a:	68f8      	ldr	r0, [r7, #12]
 8008f4c:	f7f7 fb4a 	bl	80005e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f50:	bf00      	nop
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b085      	sub	sp, #20
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008f66:	b2db      	uxtb	r3, r3
 8008f68:	2b21      	cmp	r3, #33	; 0x21
 8008f6a:	d144      	bne.n	8008ff6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f74:	d11a      	bne.n	8008fac <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	881b      	ldrh	r3, [r3, #0]
 8008f80:	461a      	mov	r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f8a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	691b      	ldr	r3, [r3, #16]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d105      	bne.n	8008fa0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a1b      	ldr	r3, [r3, #32]
 8008f98:	1c9a      	adds	r2, r3, #2
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	621a      	str	r2, [r3, #32]
 8008f9e:	e00e      	b.n	8008fbe <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a1b      	ldr	r3, [r3, #32]
 8008fa4:	1c5a      	adds	r2, r3, #1
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	621a      	str	r2, [r3, #32]
 8008faa:	e008      	b.n	8008fbe <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a1b      	ldr	r3, [r3, #32]
 8008fb0:	1c59      	adds	r1, r3, #1
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	6211      	str	r1, [r2, #32]
 8008fb6:	781a      	ldrb	r2, [r3, #0]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	4619      	mov	r1, r3
 8008fcc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d10f      	bne.n	8008ff2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	68da      	ldr	r2, [r3, #12]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008fe0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68da      	ldr	r2, [r3, #12]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ff0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	e000      	b.n	8008ff8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008ff6:	2302      	movs	r3, #2
  }
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3714      	adds	r7, #20
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	68da      	ldr	r2, [r3, #12]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800901a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2220      	movs	r2, #32
 8009020:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f7f7 fa6d 	bl	8000504 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009042:	b2db      	uxtb	r3, r3
 8009044:	2b22      	cmp	r3, #34	; 0x22
 8009046:	d171      	bne.n	800912c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009050:	d123      	bne.n	800909a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009056:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d10e      	bne.n	800907e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	b29b      	uxth	r3, r3
 8009068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800906c:	b29a      	uxth	r2, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009076:	1c9a      	adds	r2, r3, #2
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	629a      	str	r2, [r3, #40]	; 0x28
 800907c:	e029      	b.n	80090d2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	b29b      	uxth	r3, r3
 8009086:	b2db      	uxtb	r3, r3
 8009088:	b29a      	uxth	r2, r3
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009092:	1c5a      	adds	r2, r3, #1
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	629a      	str	r2, [r3, #40]	; 0x28
 8009098:	e01b      	b.n	80090d2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10a      	bne.n	80090b8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	6858      	ldr	r0, [r3, #4]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ac:	1c59      	adds	r1, r3, #1
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	6291      	str	r1, [r2, #40]	; 0x28
 80090b2:	b2c2      	uxtb	r2, r0
 80090b4:	701a      	strb	r2, [r3, #0]
 80090b6:	e00c      	b.n	80090d2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c4:	1c58      	adds	r0, r3, #1
 80090c6:	6879      	ldr	r1, [r7, #4]
 80090c8:	6288      	str	r0, [r1, #40]	; 0x28
 80090ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80090ce:	b2d2      	uxtb	r2, r2
 80090d0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	3b01      	subs	r3, #1
 80090da:	b29b      	uxth	r3, r3
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	4619      	mov	r1, r3
 80090e0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d120      	bne.n	8009128 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68da      	ldr	r2, [r3, #12]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f022 0220 	bic.w	r2, r2, #32
 80090f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	68da      	ldr	r2, [r3, #12]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009104:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	695a      	ldr	r2, [r3, #20]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f022 0201 	bic.w	r2, r2, #1
 8009114:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2220      	movs	r2, #32
 800911a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f7f7 fa00 	bl	8000524 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009124:	2300      	movs	r3, #0
 8009126:	e002      	b.n	800912e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009128:	2300      	movs	r3, #0
 800912a:	e000      	b.n	800912e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800912c:	2302      	movs	r3, #2
  }
}
 800912e:	4618      	mov	r0, r3
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
	...

08009138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800913c:	b085      	sub	sp, #20
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	691b      	ldr	r3, [r3, #16]
 8009148:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	68da      	ldr	r2, [r3, #12]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	430a      	orrs	r2, r1
 8009156:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	689a      	ldr	r2, [r3, #8]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	431a      	orrs	r2, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	695b      	ldr	r3, [r3, #20]
 8009166:	431a      	orrs	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	69db      	ldr	r3, [r3, #28]
 800916c:	4313      	orrs	r3, r2
 800916e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800917a:	f023 030c 	bic.w	r3, r3, #12
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	6812      	ldr	r2, [r2, #0]
 8009182:	68f9      	ldr	r1, [r7, #12]
 8009184:	430b      	orrs	r3, r1
 8009186:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	695b      	ldr	r3, [r3, #20]
 800918e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	699a      	ldr	r2, [r3, #24]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	430a      	orrs	r2, r1
 800919c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	69db      	ldr	r3, [r3, #28]
 80091a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091a6:	f040 818b 	bne.w	80094c0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4ac1      	ldr	r2, [pc, #772]	; (80094b4 <UART_SetConfig+0x37c>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d005      	beq.n	80091c0 <UART_SetConfig+0x88>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4abf      	ldr	r2, [pc, #764]	; (80094b8 <UART_SetConfig+0x380>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	f040 80bd 	bne.w	800933a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80091c0:	f7fe f8aa 	bl	8007318 <HAL_RCC_GetPCLK2Freq>
 80091c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	461d      	mov	r5, r3
 80091ca:	f04f 0600 	mov.w	r6, #0
 80091ce:	46a8      	mov	r8, r5
 80091d0:	46b1      	mov	r9, r6
 80091d2:	eb18 0308 	adds.w	r3, r8, r8
 80091d6:	eb49 0409 	adc.w	r4, r9, r9
 80091da:	4698      	mov	r8, r3
 80091dc:	46a1      	mov	r9, r4
 80091de:	eb18 0805 	adds.w	r8, r8, r5
 80091e2:	eb49 0906 	adc.w	r9, r9, r6
 80091e6:	f04f 0100 	mov.w	r1, #0
 80091ea:	f04f 0200 	mov.w	r2, #0
 80091ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80091f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80091f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80091fa:	4688      	mov	r8, r1
 80091fc:	4691      	mov	r9, r2
 80091fe:	eb18 0005 	adds.w	r0, r8, r5
 8009202:	eb49 0106 	adc.w	r1, r9, r6
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	461d      	mov	r5, r3
 800920c:	f04f 0600 	mov.w	r6, #0
 8009210:	196b      	adds	r3, r5, r5
 8009212:	eb46 0406 	adc.w	r4, r6, r6
 8009216:	461a      	mov	r2, r3
 8009218:	4623      	mov	r3, r4
 800921a:	f7f6 ffeb 	bl	80001f4 <__aeabi_uldivmod>
 800921e:	4603      	mov	r3, r0
 8009220:	460c      	mov	r4, r1
 8009222:	461a      	mov	r2, r3
 8009224:	4ba5      	ldr	r3, [pc, #660]	; (80094bc <UART_SetConfig+0x384>)
 8009226:	fba3 2302 	umull	r2, r3, r3, r2
 800922a:	095b      	lsrs	r3, r3, #5
 800922c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	461d      	mov	r5, r3
 8009234:	f04f 0600 	mov.w	r6, #0
 8009238:	46a9      	mov	r9, r5
 800923a:	46b2      	mov	sl, r6
 800923c:	eb19 0309 	adds.w	r3, r9, r9
 8009240:	eb4a 040a 	adc.w	r4, sl, sl
 8009244:	4699      	mov	r9, r3
 8009246:	46a2      	mov	sl, r4
 8009248:	eb19 0905 	adds.w	r9, r9, r5
 800924c:	eb4a 0a06 	adc.w	sl, sl, r6
 8009250:	f04f 0100 	mov.w	r1, #0
 8009254:	f04f 0200 	mov.w	r2, #0
 8009258:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800925c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009260:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009264:	4689      	mov	r9, r1
 8009266:	4692      	mov	sl, r2
 8009268:	eb19 0005 	adds.w	r0, r9, r5
 800926c:	eb4a 0106 	adc.w	r1, sl, r6
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	461d      	mov	r5, r3
 8009276:	f04f 0600 	mov.w	r6, #0
 800927a:	196b      	adds	r3, r5, r5
 800927c:	eb46 0406 	adc.w	r4, r6, r6
 8009280:	461a      	mov	r2, r3
 8009282:	4623      	mov	r3, r4
 8009284:	f7f6 ffb6 	bl	80001f4 <__aeabi_uldivmod>
 8009288:	4603      	mov	r3, r0
 800928a:	460c      	mov	r4, r1
 800928c:	461a      	mov	r2, r3
 800928e:	4b8b      	ldr	r3, [pc, #556]	; (80094bc <UART_SetConfig+0x384>)
 8009290:	fba3 1302 	umull	r1, r3, r3, r2
 8009294:	095b      	lsrs	r3, r3, #5
 8009296:	2164      	movs	r1, #100	; 0x64
 8009298:	fb01 f303 	mul.w	r3, r1, r3
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	00db      	lsls	r3, r3, #3
 80092a0:	3332      	adds	r3, #50	; 0x32
 80092a2:	4a86      	ldr	r2, [pc, #536]	; (80094bc <UART_SetConfig+0x384>)
 80092a4:	fba2 2303 	umull	r2, r3, r2, r3
 80092a8:	095b      	lsrs	r3, r3, #5
 80092aa:	005b      	lsls	r3, r3, #1
 80092ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80092b0:	4498      	add	r8, r3
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	461d      	mov	r5, r3
 80092b6:	f04f 0600 	mov.w	r6, #0
 80092ba:	46a9      	mov	r9, r5
 80092bc:	46b2      	mov	sl, r6
 80092be:	eb19 0309 	adds.w	r3, r9, r9
 80092c2:	eb4a 040a 	adc.w	r4, sl, sl
 80092c6:	4699      	mov	r9, r3
 80092c8:	46a2      	mov	sl, r4
 80092ca:	eb19 0905 	adds.w	r9, r9, r5
 80092ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80092d2:	f04f 0100 	mov.w	r1, #0
 80092d6:	f04f 0200 	mov.w	r2, #0
 80092da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80092de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80092e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80092e6:	4689      	mov	r9, r1
 80092e8:	4692      	mov	sl, r2
 80092ea:	eb19 0005 	adds.w	r0, r9, r5
 80092ee:	eb4a 0106 	adc.w	r1, sl, r6
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	461d      	mov	r5, r3
 80092f8:	f04f 0600 	mov.w	r6, #0
 80092fc:	196b      	adds	r3, r5, r5
 80092fe:	eb46 0406 	adc.w	r4, r6, r6
 8009302:	461a      	mov	r2, r3
 8009304:	4623      	mov	r3, r4
 8009306:	f7f6 ff75 	bl	80001f4 <__aeabi_uldivmod>
 800930a:	4603      	mov	r3, r0
 800930c:	460c      	mov	r4, r1
 800930e:	461a      	mov	r2, r3
 8009310:	4b6a      	ldr	r3, [pc, #424]	; (80094bc <UART_SetConfig+0x384>)
 8009312:	fba3 1302 	umull	r1, r3, r3, r2
 8009316:	095b      	lsrs	r3, r3, #5
 8009318:	2164      	movs	r1, #100	; 0x64
 800931a:	fb01 f303 	mul.w	r3, r1, r3
 800931e:	1ad3      	subs	r3, r2, r3
 8009320:	00db      	lsls	r3, r3, #3
 8009322:	3332      	adds	r3, #50	; 0x32
 8009324:	4a65      	ldr	r2, [pc, #404]	; (80094bc <UART_SetConfig+0x384>)
 8009326:	fba2 2303 	umull	r2, r3, r2, r3
 800932a:	095b      	lsrs	r3, r3, #5
 800932c:	f003 0207 	and.w	r2, r3, #7
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4442      	add	r2, r8
 8009336:	609a      	str	r2, [r3, #8]
 8009338:	e26f      	b.n	800981a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800933a:	f7fd ffd9 	bl	80072f0 <HAL_RCC_GetPCLK1Freq>
 800933e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	461d      	mov	r5, r3
 8009344:	f04f 0600 	mov.w	r6, #0
 8009348:	46a8      	mov	r8, r5
 800934a:	46b1      	mov	r9, r6
 800934c:	eb18 0308 	adds.w	r3, r8, r8
 8009350:	eb49 0409 	adc.w	r4, r9, r9
 8009354:	4698      	mov	r8, r3
 8009356:	46a1      	mov	r9, r4
 8009358:	eb18 0805 	adds.w	r8, r8, r5
 800935c:	eb49 0906 	adc.w	r9, r9, r6
 8009360:	f04f 0100 	mov.w	r1, #0
 8009364:	f04f 0200 	mov.w	r2, #0
 8009368:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800936c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009370:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009374:	4688      	mov	r8, r1
 8009376:	4691      	mov	r9, r2
 8009378:	eb18 0005 	adds.w	r0, r8, r5
 800937c:	eb49 0106 	adc.w	r1, r9, r6
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	461d      	mov	r5, r3
 8009386:	f04f 0600 	mov.w	r6, #0
 800938a:	196b      	adds	r3, r5, r5
 800938c:	eb46 0406 	adc.w	r4, r6, r6
 8009390:	461a      	mov	r2, r3
 8009392:	4623      	mov	r3, r4
 8009394:	f7f6 ff2e 	bl	80001f4 <__aeabi_uldivmod>
 8009398:	4603      	mov	r3, r0
 800939a:	460c      	mov	r4, r1
 800939c:	461a      	mov	r2, r3
 800939e:	4b47      	ldr	r3, [pc, #284]	; (80094bc <UART_SetConfig+0x384>)
 80093a0:	fba3 2302 	umull	r2, r3, r3, r2
 80093a4:	095b      	lsrs	r3, r3, #5
 80093a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	461d      	mov	r5, r3
 80093ae:	f04f 0600 	mov.w	r6, #0
 80093b2:	46a9      	mov	r9, r5
 80093b4:	46b2      	mov	sl, r6
 80093b6:	eb19 0309 	adds.w	r3, r9, r9
 80093ba:	eb4a 040a 	adc.w	r4, sl, sl
 80093be:	4699      	mov	r9, r3
 80093c0:	46a2      	mov	sl, r4
 80093c2:	eb19 0905 	adds.w	r9, r9, r5
 80093c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80093ca:	f04f 0100 	mov.w	r1, #0
 80093ce:	f04f 0200 	mov.w	r2, #0
 80093d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80093d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80093da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80093de:	4689      	mov	r9, r1
 80093e0:	4692      	mov	sl, r2
 80093e2:	eb19 0005 	adds.w	r0, r9, r5
 80093e6:	eb4a 0106 	adc.w	r1, sl, r6
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	461d      	mov	r5, r3
 80093f0:	f04f 0600 	mov.w	r6, #0
 80093f4:	196b      	adds	r3, r5, r5
 80093f6:	eb46 0406 	adc.w	r4, r6, r6
 80093fa:	461a      	mov	r2, r3
 80093fc:	4623      	mov	r3, r4
 80093fe:	f7f6 fef9 	bl	80001f4 <__aeabi_uldivmod>
 8009402:	4603      	mov	r3, r0
 8009404:	460c      	mov	r4, r1
 8009406:	461a      	mov	r2, r3
 8009408:	4b2c      	ldr	r3, [pc, #176]	; (80094bc <UART_SetConfig+0x384>)
 800940a:	fba3 1302 	umull	r1, r3, r3, r2
 800940e:	095b      	lsrs	r3, r3, #5
 8009410:	2164      	movs	r1, #100	; 0x64
 8009412:	fb01 f303 	mul.w	r3, r1, r3
 8009416:	1ad3      	subs	r3, r2, r3
 8009418:	00db      	lsls	r3, r3, #3
 800941a:	3332      	adds	r3, #50	; 0x32
 800941c:	4a27      	ldr	r2, [pc, #156]	; (80094bc <UART_SetConfig+0x384>)
 800941e:	fba2 2303 	umull	r2, r3, r2, r3
 8009422:	095b      	lsrs	r3, r3, #5
 8009424:	005b      	lsls	r3, r3, #1
 8009426:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800942a:	4498      	add	r8, r3
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	461d      	mov	r5, r3
 8009430:	f04f 0600 	mov.w	r6, #0
 8009434:	46a9      	mov	r9, r5
 8009436:	46b2      	mov	sl, r6
 8009438:	eb19 0309 	adds.w	r3, r9, r9
 800943c:	eb4a 040a 	adc.w	r4, sl, sl
 8009440:	4699      	mov	r9, r3
 8009442:	46a2      	mov	sl, r4
 8009444:	eb19 0905 	adds.w	r9, r9, r5
 8009448:	eb4a 0a06 	adc.w	sl, sl, r6
 800944c:	f04f 0100 	mov.w	r1, #0
 8009450:	f04f 0200 	mov.w	r2, #0
 8009454:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009458:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800945c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009460:	4689      	mov	r9, r1
 8009462:	4692      	mov	sl, r2
 8009464:	eb19 0005 	adds.w	r0, r9, r5
 8009468:	eb4a 0106 	adc.w	r1, sl, r6
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	461d      	mov	r5, r3
 8009472:	f04f 0600 	mov.w	r6, #0
 8009476:	196b      	adds	r3, r5, r5
 8009478:	eb46 0406 	adc.w	r4, r6, r6
 800947c:	461a      	mov	r2, r3
 800947e:	4623      	mov	r3, r4
 8009480:	f7f6 feb8 	bl	80001f4 <__aeabi_uldivmod>
 8009484:	4603      	mov	r3, r0
 8009486:	460c      	mov	r4, r1
 8009488:	461a      	mov	r2, r3
 800948a:	4b0c      	ldr	r3, [pc, #48]	; (80094bc <UART_SetConfig+0x384>)
 800948c:	fba3 1302 	umull	r1, r3, r3, r2
 8009490:	095b      	lsrs	r3, r3, #5
 8009492:	2164      	movs	r1, #100	; 0x64
 8009494:	fb01 f303 	mul.w	r3, r1, r3
 8009498:	1ad3      	subs	r3, r2, r3
 800949a:	00db      	lsls	r3, r3, #3
 800949c:	3332      	adds	r3, #50	; 0x32
 800949e:	4a07      	ldr	r2, [pc, #28]	; (80094bc <UART_SetConfig+0x384>)
 80094a0:	fba2 2303 	umull	r2, r3, r2, r3
 80094a4:	095b      	lsrs	r3, r3, #5
 80094a6:	f003 0207 	and.w	r2, r3, #7
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4442      	add	r2, r8
 80094b0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80094b2:	e1b2      	b.n	800981a <UART_SetConfig+0x6e2>
 80094b4:	40011000 	.word	0x40011000
 80094b8:	40011400 	.word	0x40011400
 80094bc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4ad7      	ldr	r2, [pc, #860]	; (8009824 <UART_SetConfig+0x6ec>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d005      	beq.n	80094d6 <UART_SetConfig+0x39e>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4ad6      	ldr	r2, [pc, #856]	; (8009828 <UART_SetConfig+0x6f0>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	f040 80d1 	bne.w	8009678 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80094d6:	f7fd ff1f 	bl	8007318 <HAL_RCC_GetPCLK2Freq>
 80094da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	469a      	mov	sl, r3
 80094e0:	f04f 0b00 	mov.w	fp, #0
 80094e4:	46d0      	mov	r8, sl
 80094e6:	46d9      	mov	r9, fp
 80094e8:	eb18 0308 	adds.w	r3, r8, r8
 80094ec:	eb49 0409 	adc.w	r4, r9, r9
 80094f0:	4698      	mov	r8, r3
 80094f2:	46a1      	mov	r9, r4
 80094f4:	eb18 080a 	adds.w	r8, r8, sl
 80094f8:	eb49 090b 	adc.w	r9, r9, fp
 80094fc:	f04f 0100 	mov.w	r1, #0
 8009500:	f04f 0200 	mov.w	r2, #0
 8009504:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009508:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800950c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009510:	4688      	mov	r8, r1
 8009512:	4691      	mov	r9, r2
 8009514:	eb1a 0508 	adds.w	r5, sl, r8
 8009518:	eb4b 0609 	adc.w	r6, fp, r9
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	4619      	mov	r1, r3
 8009522:	f04f 0200 	mov.w	r2, #0
 8009526:	f04f 0300 	mov.w	r3, #0
 800952a:	f04f 0400 	mov.w	r4, #0
 800952e:	0094      	lsls	r4, r2, #2
 8009530:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009534:	008b      	lsls	r3, r1, #2
 8009536:	461a      	mov	r2, r3
 8009538:	4623      	mov	r3, r4
 800953a:	4628      	mov	r0, r5
 800953c:	4631      	mov	r1, r6
 800953e:	f7f6 fe59 	bl	80001f4 <__aeabi_uldivmod>
 8009542:	4603      	mov	r3, r0
 8009544:	460c      	mov	r4, r1
 8009546:	461a      	mov	r2, r3
 8009548:	4bb8      	ldr	r3, [pc, #736]	; (800982c <UART_SetConfig+0x6f4>)
 800954a:	fba3 2302 	umull	r2, r3, r3, r2
 800954e:	095b      	lsrs	r3, r3, #5
 8009550:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	469b      	mov	fp, r3
 8009558:	f04f 0c00 	mov.w	ip, #0
 800955c:	46d9      	mov	r9, fp
 800955e:	46e2      	mov	sl, ip
 8009560:	eb19 0309 	adds.w	r3, r9, r9
 8009564:	eb4a 040a 	adc.w	r4, sl, sl
 8009568:	4699      	mov	r9, r3
 800956a:	46a2      	mov	sl, r4
 800956c:	eb19 090b 	adds.w	r9, r9, fp
 8009570:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009574:	f04f 0100 	mov.w	r1, #0
 8009578:	f04f 0200 	mov.w	r2, #0
 800957c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009580:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009584:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009588:	4689      	mov	r9, r1
 800958a:	4692      	mov	sl, r2
 800958c:	eb1b 0509 	adds.w	r5, fp, r9
 8009590:	eb4c 060a 	adc.w	r6, ip, sl
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	4619      	mov	r1, r3
 800959a:	f04f 0200 	mov.w	r2, #0
 800959e:	f04f 0300 	mov.w	r3, #0
 80095a2:	f04f 0400 	mov.w	r4, #0
 80095a6:	0094      	lsls	r4, r2, #2
 80095a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80095ac:	008b      	lsls	r3, r1, #2
 80095ae:	461a      	mov	r2, r3
 80095b0:	4623      	mov	r3, r4
 80095b2:	4628      	mov	r0, r5
 80095b4:	4631      	mov	r1, r6
 80095b6:	f7f6 fe1d 	bl	80001f4 <__aeabi_uldivmod>
 80095ba:	4603      	mov	r3, r0
 80095bc:	460c      	mov	r4, r1
 80095be:	461a      	mov	r2, r3
 80095c0:	4b9a      	ldr	r3, [pc, #616]	; (800982c <UART_SetConfig+0x6f4>)
 80095c2:	fba3 1302 	umull	r1, r3, r3, r2
 80095c6:	095b      	lsrs	r3, r3, #5
 80095c8:	2164      	movs	r1, #100	; 0x64
 80095ca:	fb01 f303 	mul.w	r3, r1, r3
 80095ce:	1ad3      	subs	r3, r2, r3
 80095d0:	011b      	lsls	r3, r3, #4
 80095d2:	3332      	adds	r3, #50	; 0x32
 80095d4:	4a95      	ldr	r2, [pc, #596]	; (800982c <UART_SetConfig+0x6f4>)
 80095d6:	fba2 2303 	umull	r2, r3, r2, r3
 80095da:	095b      	lsrs	r3, r3, #5
 80095dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095e0:	4498      	add	r8, r3
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	469b      	mov	fp, r3
 80095e6:	f04f 0c00 	mov.w	ip, #0
 80095ea:	46d9      	mov	r9, fp
 80095ec:	46e2      	mov	sl, ip
 80095ee:	eb19 0309 	adds.w	r3, r9, r9
 80095f2:	eb4a 040a 	adc.w	r4, sl, sl
 80095f6:	4699      	mov	r9, r3
 80095f8:	46a2      	mov	sl, r4
 80095fa:	eb19 090b 	adds.w	r9, r9, fp
 80095fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009602:	f04f 0100 	mov.w	r1, #0
 8009606:	f04f 0200 	mov.w	r2, #0
 800960a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800960e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009612:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009616:	4689      	mov	r9, r1
 8009618:	4692      	mov	sl, r2
 800961a:	eb1b 0509 	adds.w	r5, fp, r9
 800961e:	eb4c 060a 	adc.w	r6, ip, sl
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	4619      	mov	r1, r3
 8009628:	f04f 0200 	mov.w	r2, #0
 800962c:	f04f 0300 	mov.w	r3, #0
 8009630:	f04f 0400 	mov.w	r4, #0
 8009634:	0094      	lsls	r4, r2, #2
 8009636:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800963a:	008b      	lsls	r3, r1, #2
 800963c:	461a      	mov	r2, r3
 800963e:	4623      	mov	r3, r4
 8009640:	4628      	mov	r0, r5
 8009642:	4631      	mov	r1, r6
 8009644:	f7f6 fdd6 	bl	80001f4 <__aeabi_uldivmod>
 8009648:	4603      	mov	r3, r0
 800964a:	460c      	mov	r4, r1
 800964c:	461a      	mov	r2, r3
 800964e:	4b77      	ldr	r3, [pc, #476]	; (800982c <UART_SetConfig+0x6f4>)
 8009650:	fba3 1302 	umull	r1, r3, r3, r2
 8009654:	095b      	lsrs	r3, r3, #5
 8009656:	2164      	movs	r1, #100	; 0x64
 8009658:	fb01 f303 	mul.w	r3, r1, r3
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	011b      	lsls	r3, r3, #4
 8009660:	3332      	adds	r3, #50	; 0x32
 8009662:	4a72      	ldr	r2, [pc, #456]	; (800982c <UART_SetConfig+0x6f4>)
 8009664:	fba2 2303 	umull	r2, r3, r2, r3
 8009668:	095b      	lsrs	r3, r3, #5
 800966a:	f003 020f 	and.w	r2, r3, #15
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4442      	add	r2, r8
 8009674:	609a      	str	r2, [r3, #8]
 8009676:	e0d0      	b.n	800981a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009678:	f7fd fe3a 	bl	80072f0 <HAL_RCC_GetPCLK1Freq>
 800967c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	469a      	mov	sl, r3
 8009682:	f04f 0b00 	mov.w	fp, #0
 8009686:	46d0      	mov	r8, sl
 8009688:	46d9      	mov	r9, fp
 800968a:	eb18 0308 	adds.w	r3, r8, r8
 800968e:	eb49 0409 	adc.w	r4, r9, r9
 8009692:	4698      	mov	r8, r3
 8009694:	46a1      	mov	r9, r4
 8009696:	eb18 080a 	adds.w	r8, r8, sl
 800969a:	eb49 090b 	adc.w	r9, r9, fp
 800969e:	f04f 0100 	mov.w	r1, #0
 80096a2:	f04f 0200 	mov.w	r2, #0
 80096a6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80096aa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80096ae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80096b2:	4688      	mov	r8, r1
 80096b4:	4691      	mov	r9, r2
 80096b6:	eb1a 0508 	adds.w	r5, sl, r8
 80096ba:	eb4b 0609 	adc.w	r6, fp, r9
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	4619      	mov	r1, r3
 80096c4:	f04f 0200 	mov.w	r2, #0
 80096c8:	f04f 0300 	mov.w	r3, #0
 80096cc:	f04f 0400 	mov.w	r4, #0
 80096d0:	0094      	lsls	r4, r2, #2
 80096d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80096d6:	008b      	lsls	r3, r1, #2
 80096d8:	461a      	mov	r2, r3
 80096da:	4623      	mov	r3, r4
 80096dc:	4628      	mov	r0, r5
 80096de:	4631      	mov	r1, r6
 80096e0:	f7f6 fd88 	bl	80001f4 <__aeabi_uldivmod>
 80096e4:	4603      	mov	r3, r0
 80096e6:	460c      	mov	r4, r1
 80096e8:	461a      	mov	r2, r3
 80096ea:	4b50      	ldr	r3, [pc, #320]	; (800982c <UART_SetConfig+0x6f4>)
 80096ec:	fba3 2302 	umull	r2, r3, r3, r2
 80096f0:	095b      	lsrs	r3, r3, #5
 80096f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	469b      	mov	fp, r3
 80096fa:	f04f 0c00 	mov.w	ip, #0
 80096fe:	46d9      	mov	r9, fp
 8009700:	46e2      	mov	sl, ip
 8009702:	eb19 0309 	adds.w	r3, r9, r9
 8009706:	eb4a 040a 	adc.w	r4, sl, sl
 800970a:	4699      	mov	r9, r3
 800970c:	46a2      	mov	sl, r4
 800970e:	eb19 090b 	adds.w	r9, r9, fp
 8009712:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009716:	f04f 0100 	mov.w	r1, #0
 800971a:	f04f 0200 	mov.w	r2, #0
 800971e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009722:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009726:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800972a:	4689      	mov	r9, r1
 800972c:	4692      	mov	sl, r2
 800972e:	eb1b 0509 	adds.w	r5, fp, r9
 8009732:	eb4c 060a 	adc.w	r6, ip, sl
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	4619      	mov	r1, r3
 800973c:	f04f 0200 	mov.w	r2, #0
 8009740:	f04f 0300 	mov.w	r3, #0
 8009744:	f04f 0400 	mov.w	r4, #0
 8009748:	0094      	lsls	r4, r2, #2
 800974a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800974e:	008b      	lsls	r3, r1, #2
 8009750:	461a      	mov	r2, r3
 8009752:	4623      	mov	r3, r4
 8009754:	4628      	mov	r0, r5
 8009756:	4631      	mov	r1, r6
 8009758:	f7f6 fd4c 	bl	80001f4 <__aeabi_uldivmod>
 800975c:	4603      	mov	r3, r0
 800975e:	460c      	mov	r4, r1
 8009760:	461a      	mov	r2, r3
 8009762:	4b32      	ldr	r3, [pc, #200]	; (800982c <UART_SetConfig+0x6f4>)
 8009764:	fba3 1302 	umull	r1, r3, r3, r2
 8009768:	095b      	lsrs	r3, r3, #5
 800976a:	2164      	movs	r1, #100	; 0x64
 800976c:	fb01 f303 	mul.w	r3, r1, r3
 8009770:	1ad3      	subs	r3, r2, r3
 8009772:	011b      	lsls	r3, r3, #4
 8009774:	3332      	adds	r3, #50	; 0x32
 8009776:	4a2d      	ldr	r2, [pc, #180]	; (800982c <UART_SetConfig+0x6f4>)
 8009778:	fba2 2303 	umull	r2, r3, r2, r3
 800977c:	095b      	lsrs	r3, r3, #5
 800977e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009782:	4498      	add	r8, r3
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	469b      	mov	fp, r3
 8009788:	f04f 0c00 	mov.w	ip, #0
 800978c:	46d9      	mov	r9, fp
 800978e:	46e2      	mov	sl, ip
 8009790:	eb19 0309 	adds.w	r3, r9, r9
 8009794:	eb4a 040a 	adc.w	r4, sl, sl
 8009798:	4699      	mov	r9, r3
 800979a:	46a2      	mov	sl, r4
 800979c:	eb19 090b 	adds.w	r9, r9, fp
 80097a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80097a4:	f04f 0100 	mov.w	r1, #0
 80097a8:	f04f 0200 	mov.w	r2, #0
 80097ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80097b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80097b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80097b8:	4689      	mov	r9, r1
 80097ba:	4692      	mov	sl, r2
 80097bc:	eb1b 0509 	adds.w	r5, fp, r9
 80097c0:	eb4c 060a 	adc.w	r6, ip, sl
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	4619      	mov	r1, r3
 80097ca:	f04f 0200 	mov.w	r2, #0
 80097ce:	f04f 0300 	mov.w	r3, #0
 80097d2:	f04f 0400 	mov.w	r4, #0
 80097d6:	0094      	lsls	r4, r2, #2
 80097d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80097dc:	008b      	lsls	r3, r1, #2
 80097de:	461a      	mov	r2, r3
 80097e0:	4623      	mov	r3, r4
 80097e2:	4628      	mov	r0, r5
 80097e4:	4631      	mov	r1, r6
 80097e6:	f7f6 fd05 	bl	80001f4 <__aeabi_uldivmod>
 80097ea:	4603      	mov	r3, r0
 80097ec:	460c      	mov	r4, r1
 80097ee:	461a      	mov	r2, r3
 80097f0:	4b0e      	ldr	r3, [pc, #56]	; (800982c <UART_SetConfig+0x6f4>)
 80097f2:	fba3 1302 	umull	r1, r3, r3, r2
 80097f6:	095b      	lsrs	r3, r3, #5
 80097f8:	2164      	movs	r1, #100	; 0x64
 80097fa:	fb01 f303 	mul.w	r3, r1, r3
 80097fe:	1ad3      	subs	r3, r2, r3
 8009800:	011b      	lsls	r3, r3, #4
 8009802:	3332      	adds	r3, #50	; 0x32
 8009804:	4a09      	ldr	r2, [pc, #36]	; (800982c <UART_SetConfig+0x6f4>)
 8009806:	fba2 2303 	umull	r2, r3, r2, r3
 800980a:	095b      	lsrs	r3, r3, #5
 800980c:	f003 020f 	and.w	r2, r3, #15
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4442      	add	r2, r8
 8009816:	609a      	str	r2, [r3, #8]
}
 8009818:	e7ff      	b.n	800981a <UART_SetConfig+0x6e2>
 800981a:	bf00      	nop
 800981c:	3714      	adds	r7, #20
 800981e:	46bd      	mov	sp, r7
 8009820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009824:	40011000 	.word	0x40011000
 8009828:	40011400 	.word	0x40011400
 800982c:	51eb851f 	.word	0x51eb851f

08009830 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009830:	b084      	sub	sp, #16
 8009832:	b580      	push	{r7, lr}
 8009834:	b084      	sub	sp, #16
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
 800983a:	f107 001c 	add.w	r0, r7, #28
 800983e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009844:	2b01      	cmp	r3, #1
 8009846:	d122      	bne.n	800988e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800985c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	68db      	ldr	r3, [r3, #12]
 8009868:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009872:	2b01      	cmp	r3, #1
 8009874:	d105      	bne.n	8009882 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f001 fac6 	bl	800ae14 <USB_CoreReset>
 8009888:	4603      	mov	r3, r0
 800988a:	73fb      	strb	r3, [r7, #15]
 800988c:	e01a      	b.n	80098c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f001 faba 	bl	800ae14 <USB_CoreReset>
 80098a0:	4603      	mov	r3, r0
 80098a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80098a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d106      	bne.n	80098b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	639a      	str	r2, [r3, #56]	; 0x38
 80098b6:	e005      	b.n	80098c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80098c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d10b      	bne.n	80098e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	f043 0206 	orr.w	r2, r3, #6
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	f043 0220 	orr.w	r2, r3, #32
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80098e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098ee:	b004      	add	sp, #16
 80098f0:	4770      	bx	lr
	...

080098f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b087      	sub	sp, #28
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	4613      	mov	r3, r2
 8009900:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009902:	79fb      	ldrb	r3, [r7, #7]
 8009904:	2b02      	cmp	r3, #2
 8009906:	d165      	bne.n	80099d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	4a41      	ldr	r2, [pc, #260]	; (8009a10 <USB_SetTurnaroundTime+0x11c>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d906      	bls.n	800991e <USB_SetTurnaroundTime+0x2a>
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	4a40      	ldr	r2, [pc, #256]	; (8009a14 <USB_SetTurnaroundTime+0x120>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d802      	bhi.n	800991e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009918:	230f      	movs	r3, #15
 800991a:	617b      	str	r3, [r7, #20]
 800991c:	e062      	b.n	80099e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	4a3c      	ldr	r2, [pc, #240]	; (8009a14 <USB_SetTurnaroundTime+0x120>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d906      	bls.n	8009934 <USB_SetTurnaroundTime+0x40>
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	4a3b      	ldr	r2, [pc, #236]	; (8009a18 <USB_SetTurnaroundTime+0x124>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d802      	bhi.n	8009934 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800992e:	230e      	movs	r3, #14
 8009930:	617b      	str	r3, [r7, #20]
 8009932:	e057      	b.n	80099e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	4a38      	ldr	r2, [pc, #224]	; (8009a18 <USB_SetTurnaroundTime+0x124>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d906      	bls.n	800994a <USB_SetTurnaroundTime+0x56>
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	4a37      	ldr	r2, [pc, #220]	; (8009a1c <USB_SetTurnaroundTime+0x128>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d802      	bhi.n	800994a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009944:	230d      	movs	r3, #13
 8009946:	617b      	str	r3, [r7, #20]
 8009948:	e04c      	b.n	80099e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	4a33      	ldr	r2, [pc, #204]	; (8009a1c <USB_SetTurnaroundTime+0x128>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d906      	bls.n	8009960 <USB_SetTurnaroundTime+0x6c>
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	4a32      	ldr	r2, [pc, #200]	; (8009a20 <USB_SetTurnaroundTime+0x12c>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d802      	bhi.n	8009960 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800995a:	230c      	movs	r3, #12
 800995c:	617b      	str	r3, [r7, #20]
 800995e:	e041      	b.n	80099e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	4a2f      	ldr	r2, [pc, #188]	; (8009a20 <USB_SetTurnaroundTime+0x12c>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d906      	bls.n	8009976 <USB_SetTurnaroundTime+0x82>
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	4a2e      	ldr	r2, [pc, #184]	; (8009a24 <USB_SetTurnaroundTime+0x130>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d802      	bhi.n	8009976 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009970:	230b      	movs	r3, #11
 8009972:	617b      	str	r3, [r7, #20]
 8009974:	e036      	b.n	80099e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	4a2a      	ldr	r2, [pc, #168]	; (8009a24 <USB_SetTurnaroundTime+0x130>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d906      	bls.n	800998c <USB_SetTurnaroundTime+0x98>
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	4a29      	ldr	r2, [pc, #164]	; (8009a28 <USB_SetTurnaroundTime+0x134>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d802      	bhi.n	800998c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009986:	230a      	movs	r3, #10
 8009988:	617b      	str	r3, [r7, #20]
 800998a:	e02b      	b.n	80099e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	4a26      	ldr	r2, [pc, #152]	; (8009a28 <USB_SetTurnaroundTime+0x134>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d906      	bls.n	80099a2 <USB_SetTurnaroundTime+0xae>
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	4a25      	ldr	r2, [pc, #148]	; (8009a2c <USB_SetTurnaroundTime+0x138>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d802      	bhi.n	80099a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800999c:	2309      	movs	r3, #9
 800999e:	617b      	str	r3, [r7, #20]
 80099a0:	e020      	b.n	80099e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	4a21      	ldr	r2, [pc, #132]	; (8009a2c <USB_SetTurnaroundTime+0x138>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d906      	bls.n	80099b8 <USB_SetTurnaroundTime+0xc4>
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	4a20      	ldr	r2, [pc, #128]	; (8009a30 <USB_SetTurnaroundTime+0x13c>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d802      	bhi.n	80099b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80099b2:	2308      	movs	r3, #8
 80099b4:	617b      	str	r3, [r7, #20]
 80099b6:	e015      	b.n	80099e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	4a1d      	ldr	r2, [pc, #116]	; (8009a30 <USB_SetTurnaroundTime+0x13c>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d906      	bls.n	80099ce <USB_SetTurnaroundTime+0xda>
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	4a1c      	ldr	r2, [pc, #112]	; (8009a34 <USB_SetTurnaroundTime+0x140>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d802      	bhi.n	80099ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80099c8:	2307      	movs	r3, #7
 80099ca:	617b      	str	r3, [r7, #20]
 80099cc:	e00a      	b.n	80099e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80099ce:	2306      	movs	r3, #6
 80099d0:	617b      	str	r3, [r7, #20]
 80099d2:	e007      	b.n	80099e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80099d4:	79fb      	ldrb	r3, [r7, #7]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d102      	bne.n	80099e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80099da:	2309      	movs	r3, #9
 80099dc:	617b      	str	r3, [r7, #20]
 80099de:	e001      	b.n	80099e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80099e0:	2309      	movs	r3, #9
 80099e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	68da      	ldr	r2, [r3, #12]
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	029b      	lsls	r3, r3, #10
 80099f8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80099fc:	431a      	orrs	r2, r3
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	371c      	adds	r7, #28
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr
 8009a10:	00d8acbf 	.word	0x00d8acbf
 8009a14:	00e4e1bf 	.word	0x00e4e1bf
 8009a18:	00f423ff 	.word	0x00f423ff
 8009a1c:	0106737f 	.word	0x0106737f
 8009a20:	011a499f 	.word	0x011a499f
 8009a24:	01312cff 	.word	0x01312cff
 8009a28:	014ca43f 	.word	0x014ca43f
 8009a2c:	016e35ff 	.word	0x016e35ff
 8009a30:	01a6ab1f 	.word	0x01a6ab1f
 8009a34:	01e847ff 	.word	0x01e847ff

08009a38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	f043 0201 	orr.w	r2, r3, #1
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a4c:	2300      	movs	r3, #0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	370c      	adds	r7, #12
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr

08009a5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a5a:	b480      	push	{r7}
 8009a5c:	b083      	sub	sp, #12
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	f023 0201 	bic.w	r2, r3, #1
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a6e:	2300      	movs	r3, #0
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	460b      	mov	r3, r1
 8009a86:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009a94:	78fb      	ldrb	r3, [r7, #3]
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d106      	bne.n	8009aa8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	60da      	str	r2, [r3, #12]
 8009aa6:	e00b      	b.n	8009ac0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009aa8:	78fb      	ldrb	r3, [r7, #3]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d106      	bne.n	8009abc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	60da      	str	r2, [r3, #12]
 8009aba:	e001      	b.n	8009ac0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	e003      	b.n	8009ac8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009ac0:	2032      	movs	r0, #50	; 0x32
 8009ac2:	f7f8 fa17 	bl	8001ef4 <HAL_Delay>

  return HAL_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3708      	adds	r7, #8
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ad0:	b084      	sub	sp, #16
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b086      	sub	sp, #24
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
 8009ada:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009ade:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009aea:	2300      	movs	r3, #0
 8009aec:	613b      	str	r3, [r7, #16]
 8009aee:	e009      	b.n	8009b04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	3340      	adds	r3, #64	; 0x40
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	4413      	add	r3, r2
 8009afa:	2200      	movs	r2, #0
 8009afc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	3301      	adds	r3, #1
 8009b02:	613b      	str	r3, [r7, #16]
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	2b0e      	cmp	r3, #14
 8009b08:	d9f2      	bls.n	8009af0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d11c      	bne.n	8009b4a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b1e:	f043 0302 	orr.w	r3, r3, #2
 8009b22:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b34:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b40:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	639a      	str	r2, [r3, #56]	; 0x38
 8009b48:	e00b      	b.n	8009b62 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b4e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b68:	461a      	mov	r2, r3
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b74:	4619      	mov	r1, r3
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	680b      	ldr	r3, [r1, #0]
 8009b80:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d10c      	bne.n	8009ba2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d104      	bne.n	8009b98 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009b8e:	2100      	movs	r1, #0
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 f949 	bl	8009e28 <USB_SetDevSpeed>
 8009b96:	e008      	b.n	8009baa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009b98:	2101      	movs	r1, #1
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 f944 	bl	8009e28 <USB_SetDevSpeed>
 8009ba0:	e003      	b.n	8009baa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009ba2:	2103      	movs	r1, #3
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 f93f 	bl	8009e28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009baa:	2110      	movs	r1, #16
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 f8f3 	bl	8009d98 <USB_FlushTxFifo>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d001      	beq.n	8009bbc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 f911 	bl	8009de4 <USB_FlushRxFifo>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d001      	beq.n	8009bcc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bde:	461a      	mov	r2, r3
 8009be0:	2300      	movs	r3, #0
 8009be2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bea:	461a      	mov	r2, r3
 8009bec:	2300      	movs	r3, #0
 8009bee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	613b      	str	r3, [r7, #16]
 8009bf4:	e043      	b.n	8009c7e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	015a      	lsls	r2, r3, #5
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c0c:	d118      	bne.n	8009c40 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d10a      	bne.n	8009c2a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	015a      	lsls	r2, r3, #5
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c20:	461a      	mov	r2, r3
 8009c22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009c26:	6013      	str	r3, [r2, #0]
 8009c28:	e013      	b.n	8009c52 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	015a      	lsls	r2, r3, #5
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	4413      	add	r3, r2
 8009c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c36:	461a      	mov	r2, r3
 8009c38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009c3c:	6013      	str	r3, [r2, #0]
 8009c3e:	e008      	b.n	8009c52 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	015a      	lsls	r2, r3, #5
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	4413      	add	r3, r2
 8009c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	2300      	movs	r3, #0
 8009c50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	015a      	lsls	r2, r3, #5
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	4413      	add	r3, r2
 8009c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c5e:	461a      	mov	r2, r3
 8009c60:	2300      	movs	r3, #0
 8009c62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	015a      	lsls	r2, r3, #5
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c70:	461a      	mov	r2, r3
 8009c72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009c76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	613b      	str	r3, [r7, #16]
 8009c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d3b7      	bcc.n	8009bf6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c86:	2300      	movs	r3, #0
 8009c88:	613b      	str	r3, [r7, #16]
 8009c8a:	e043      	b.n	8009d14 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	015a      	lsls	r2, r3, #5
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	4413      	add	r3, r2
 8009c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ca2:	d118      	bne.n	8009cd6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d10a      	bne.n	8009cc0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	015a      	lsls	r2, r3, #5
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009cbc:	6013      	str	r3, [r2, #0]
 8009cbe:	e013      	b.n	8009ce8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	015a      	lsls	r2, r3, #5
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ccc:	461a      	mov	r2, r3
 8009cce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009cd2:	6013      	str	r3, [r2, #0]
 8009cd4:	e008      	b.n	8009ce8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	015a      	lsls	r2, r3, #5
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	4413      	add	r3, r2
 8009cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	015a      	lsls	r2, r3, #5
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	4413      	add	r3, r2
 8009cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	015a      	lsls	r2, r3, #5
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	4413      	add	r3, r2
 8009d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d06:	461a      	mov	r2, r3
 8009d08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009d0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	3301      	adds	r3, #1
 8009d12:	613b      	str	r3, [r7, #16]
 8009d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d16:	693a      	ldr	r2, [r7, #16]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d3b7      	bcc.n	8009c8c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d22:	691b      	ldr	r3, [r3, #16]
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d2e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009d3c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d105      	bne.n	8009d50 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	699b      	ldr	r3, [r3, #24]
 8009d48:	f043 0210 	orr.w	r2, r3, #16
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	699a      	ldr	r2, [r3, #24]
 8009d54:	4b0f      	ldr	r3, [pc, #60]	; (8009d94 <USB_DevInit+0x2c4>)
 8009d56:	4313      	orrs	r3, r2
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d005      	beq.n	8009d6e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	699b      	ldr	r3, [r3, #24]
 8009d66:	f043 0208 	orr.w	r2, r3, #8
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d107      	bne.n	8009d84 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d7c:	f043 0304 	orr.w	r3, r3, #4
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009d84:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3718      	adds	r7, #24
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d90:	b004      	add	sp, #16
 8009d92:	4770      	bx	lr
 8009d94:	803c3800 	.word	0x803c3800

08009d98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009da2:	2300      	movs	r3, #0
 8009da4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	019b      	lsls	r3, r3, #6
 8009daa:	f043 0220 	orr.w	r2, r3, #32
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	3301      	adds	r3, #1
 8009db6:	60fb      	str	r3, [r7, #12]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	4a09      	ldr	r2, [pc, #36]	; (8009de0 <USB_FlushTxFifo+0x48>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d901      	bls.n	8009dc4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009dc0:	2303      	movs	r3, #3
 8009dc2:	e006      	b.n	8009dd2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	f003 0320 	and.w	r3, r3, #32
 8009dcc:	2b20      	cmp	r3, #32
 8009dce:	d0f0      	beq.n	8009db2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3714      	adds	r7, #20
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop
 8009de0:	00030d40 	.word	0x00030d40

08009de4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009dec:	2300      	movs	r3, #0
 8009dee:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2210      	movs	r2, #16
 8009df4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	60fb      	str	r3, [r7, #12]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	4a09      	ldr	r2, [pc, #36]	; (8009e24 <USB_FlushRxFifo+0x40>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d901      	bls.n	8009e08 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009e04:	2303      	movs	r3, #3
 8009e06:	e006      	b.n	8009e16 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	691b      	ldr	r3, [r3, #16]
 8009e0c:	f003 0310 	and.w	r3, r3, #16
 8009e10:	2b10      	cmp	r3, #16
 8009e12:	d0f0      	beq.n	8009df6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009e14:	2300      	movs	r3, #0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3714      	adds	r7, #20
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	00030d40 	.word	0x00030d40

08009e28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b085      	sub	sp, #20
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	460b      	mov	r3, r1
 8009e32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	78fb      	ldrb	r3, [r7, #3]
 8009e42:	68f9      	ldr	r1, [r7, #12]
 8009e44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3714      	adds	r7, #20
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr

08009e5a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	b087      	sub	sp, #28
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	f003 0306 	and.w	r3, r3, #6
 8009e72:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d102      	bne.n	8009e80 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	75fb      	strb	r3, [r7, #23]
 8009e7e:	e00a      	b.n	8009e96 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2b02      	cmp	r3, #2
 8009e84:	d002      	beq.n	8009e8c <USB_GetDevSpeed+0x32>
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2b06      	cmp	r3, #6
 8009e8a:	d102      	bne.n	8009e92 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009e8c:	2302      	movs	r3, #2
 8009e8e:	75fb      	strb	r3, [r7, #23]
 8009e90:	e001      	b.n	8009e96 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009e92:	230f      	movs	r3, #15
 8009e94:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	371c      	adds	r7, #28
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	785b      	ldrb	r3, [r3, #1]
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d13a      	bne.n	8009f36 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ec6:	69da      	ldr	r2, [r3, #28]
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	f003 030f 	and.w	r3, r3, #15
 8009ed0:	2101      	movs	r1, #1
 8009ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	68f9      	ldr	r1, [r7, #12]
 8009eda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	015a      	lsls	r2, r3, #5
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	4413      	add	r3, r2
 8009eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d155      	bne.n	8009fa4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	015a      	lsls	r2, r3, #5
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	4413      	add	r3, r2
 8009f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	78db      	ldrb	r3, [r3, #3]
 8009f12:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f14:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	059b      	lsls	r3, r3, #22
 8009f1a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	0151      	lsls	r1, r2, #5
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	440a      	add	r2, r1
 8009f26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f32:	6013      	str	r3, [r2, #0]
 8009f34:	e036      	b.n	8009fa4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f3c:	69da      	ldr	r2, [r3, #28]
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	f003 030f 	and.w	r3, r3, #15
 8009f46:	2101      	movs	r1, #1
 8009f48:	fa01 f303 	lsl.w	r3, r1, r3
 8009f4c:	041b      	lsls	r3, r3, #16
 8009f4e:	68f9      	ldr	r1, [r7, #12]
 8009f50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f54:	4313      	orrs	r3, r2
 8009f56:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	015a      	lsls	r2, r3, #5
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	4413      	add	r3, r2
 8009f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d11a      	bne.n	8009fa4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	015a      	lsls	r2, r3, #5
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	4413      	add	r3, r2
 8009f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	78db      	ldrb	r3, [r3, #3]
 8009f88:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009f8a:	430b      	orrs	r3, r1
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	0151      	lsls	r1, r2, #5
 8009f92:	68fa      	ldr	r2, [r7, #12]
 8009f94:	440a      	add	r2, r1
 8009f96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fa2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3714      	adds	r7, #20
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
	...

08009fb4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b085      	sub	sp, #20
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	785b      	ldrb	r3, [r3, #1]
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d161      	bne.n	800a094 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	015a      	lsls	r2, r3, #5
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fe2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fe6:	d11f      	bne.n	800a028 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	015a      	lsls	r2, r3, #5
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	4413      	add	r3, r2
 8009ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	0151      	lsls	r1, r2, #5
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	440a      	add	r2, r1
 8009ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a002:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a006:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	015a      	lsls	r2, r3, #5
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	4413      	add	r3, r2
 800a010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	68ba      	ldr	r2, [r7, #8]
 800a018:	0151      	lsls	r1, r2, #5
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	440a      	add	r2, r1
 800a01e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a022:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a026:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a02e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	f003 030f 	and.w	r3, r3, #15
 800a038:	2101      	movs	r1, #1
 800a03a:	fa01 f303 	lsl.w	r3, r1, r3
 800a03e:	b29b      	uxth	r3, r3
 800a040:	43db      	mvns	r3, r3
 800a042:	68f9      	ldr	r1, [r7, #12]
 800a044:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a048:	4013      	ands	r3, r2
 800a04a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a052:	69da      	ldr	r2, [r3, #28]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	f003 030f 	and.w	r3, r3, #15
 800a05c:	2101      	movs	r1, #1
 800a05e:	fa01 f303 	lsl.w	r3, r1, r3
 800a062:	b29b      	uxth	r3, r3
 800a064:	43db      	mvns	r3, r3
 800a066:	68f9      	ldr	r1, [r7, #12]
 800a068:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a06c:	4013      	ands	r3, r2
 800a06e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	015a      	lsls	r2, r3, #5
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	4413      	add	r3, r2
 800a078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	0159      	lsls	r1, r3, #5
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	440b      	add	r3, r1
 800a086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a08a:	4619      	mov	r1, r3
 800a08c:	4b35      	ldr	r3, [pc, #212]	; (800a164 <USB_DeactivateEndpoint+0x1b0>)
 800a08e:	4013      	ands	r3, r2
 800a090:	600b      	str	r3, [r1, #0]
 800a092:	e060      	b.n	800a156 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	015a      	lsls	r2, r3, #5
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	4413      	add	r3, r2
 800a09c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0aa:	d11f      	bne.n	800a0ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	015a      	lsls	r2, r3, #5
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	68ba      	ldr	r2, [r7, #8]
 800a0bc:	0151      	lsls	r1, r2, #5
 800a0be:	68fa      	ldr	r2, [r7, #12]
 800a0c0:	440a      	add	r2, r1
 800a0c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a0ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	015a      	lsls	r2, r3, #5
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	68ba      	ldr	r2, [r7, #8]
 800a0dc:	0151      	lsls	r1, r2, #5
 800a0de:	68fa      	ldr	r2, [r7, #12]
 800a0e0:	440a      	add	r2, r1
 800a0e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	f003 030f 	and.w	r3, r3, #15
 800a0fc:	2101      	movs	r1, #1
 800a0fe:	fa01 f303 	lsl.w	r3, r1, r3
 800a102:	041b      	lsls	r3, r3, #16
 800a104:	43db      	mvns	r3, r3
 800a106:	68f9      	ldr	r1, [r7, #12]
 800a108:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a10c:	4013      	ands	r3, r2
 800a10e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a116:	69da      	ldr	r2, [r3, #28]
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	f003 030f 	and.w	r3, r3, #15
 800a120:	2101      	movs	r1, #1
 800a122:	fa01 f303 	lsl.w	r3, r1, r3
 800a126:	041b      	lsls	r3, r3, #16
 800a128:	43db      	mvns	r3, r3
 800a12a:	68f9      	ldr	r1, [r7, #12]
 800a12c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a130:	4013      	ands	r3, r2
 800a132:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	015a      	lsls	r2, r3, #5
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	4413      	add	r3, r2
 800a13c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a140:	681a      	ldr	r2, [r3, #0]
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	0159      	lsls	r1, r3, #5
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	440b      	add	r3, r1
 800a14a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a14e:	4619      	mov	r1, r3
 800a150:	4b05      	ldr	r3, [pc, #20]	; (800a168 <USB_DeactivateEndpoint+0x1b4>)
 800a152:	4013      	ands	r3, r2
 800a154:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a156:	2300      	movs	r3, #0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3714      	adds	r7, #20
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr
 800a164:	ec337800 	.word	0xec337800
 800a168:	eff37800 	.word	0xeff37800

0800a16c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b08a      	sub	sp, #40	; 0x28
 800a170:	af02      	add	r7, sp, #8
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	4613      	mov	r3, r2
 800a178:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	785b      	ldrb	r3, [r3, #1]
 800a188:	2b01      	cmp	r3, #1
 800a18a:	f040 815c 	bne.w	800a446 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	695b      	ldr	r3, [r3, #20]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d132      	bne.n	800a1fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	015a      	lsls	r2, r3, #5
 800a19a:	69fb      	ldr	r3, [r7, #28]
 800a19c:	4413      	add	r3, r2
 800a19e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1a2:	691b      	ldr	r3, [r3, #16]
 800a1a4:	69ba      	ldr	r2, [r7, #24]
 800a1a6:	0151      	lsls	r1, r2, #5
 800a1a8:	69fa      	ldr	r2, [r7, #28]
 800a1aa:	440a      	add	r2, r1
 800a1ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a1b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a1b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	015a      	lsls	r2, r3, #5
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1c6:	691b      	ldr	r3, [r3, #16]
 800a1c8:	69ba      	ldr	r2, [r7, #24]
 800a1ca:	0151      	lsls	r1, r2, #5
 800a1cc:	69fa      	ldr	r2, [r7, #28]
 800a1ce:	440a      	add	r2, r1
 800a1d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a1d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	015a      	lsls	r2, r3, #5
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	4413      	add	r3, r2
 800a1e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1e6:	691b      	ldr	r3, [r3, #16]
 800a1e8:	69ba      	ldr	r2, [r7, #24]
 800a1ea:	0151      	lsls	r1, r2, #5
 800a1ec:	69fa      	ldr	r2, [r7, #28]
 800a1ee:	440a      	add	r2, r1
 800a1f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1f4:	0cdb      	lsrs	r3, r3, #19
 800a1f6:	04db      	lsls	r3, r3, #19
 800a1f8:	6113      	str	r3, [r2, #16]
 800a1fa:	e074      	b.n	800a2e6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	015a      	lsls	r2, r3, #5
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	4413      	add	r3, r2
 800a204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a208:	691b      	ldr	r3, [r3, #16]
 800a20a:	69ba      	ldr	r2, [r7, #24]
 800a20c:	0151      	lsls	r1, r2, #5
 800a20e:	69fa      	ldr	r2, [r7, #28]
 800a210:	440a      	add	r2, r1
 800a212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a216:	0cdb      	lsrs	r3, r3, #19
 800a218:	04db      	lsls	r3, r3, #19
 800a21a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a21c:	69bb      	ldr	r3, [r7, #24]
 800a21e:	015a      	lsls	r2, r3, #5
 800a220:	69fb      	ldr	r3, [r7, #28]
 800a222:	4413      	add	r3, r2
 800a224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a228:	691b      	ldr	r3, [r3, #16]
 800a22a:	69ba      	ldr	r2, [r7, #24]
 800a22c:	0151      	lsls	r1, r2, #5
 800a22e:	69fa      	ldr	r2, [r7, #28]
 800a230:	440a      	add	r2, r1
 800a232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a236:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a23a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a23e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	015a      	lsls	r2, r3, #5
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	4413      	add	r3, r2
 800a248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a24c:	691a      	ldr	r2, [r3, #16]
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	6959      	ldr	r1, [r3, #20]
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	689b      	ldr	r3, [r3, #8]
 800a256:	440b      	add	r3, r1
 800a258:	1e59      	subs	r1, r3, #1
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	fbb1 f3f3 	udiv	r3, r1, r3
 800a262:	04d9      	lsls	r1, r3, #19
 800a264:	4b9d      	ldr	r3, [pc, #628]	; (800a4dc <USB_EPStartXfer+0x370>)
 800a266:	400b      	ands	r3, r1
 800a268:	69b9      	ldr	r1, [r7, #24]
 800a26a:	0148      	lsls	r0, r1, #5
 800a26c:	69f9      	ldr	r1, [r7, #28]
 800a26e:	4401      	add	r1, r0
 800a270:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a274:	4313      	orrs	r3, r2
 800a276:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	015a      	lsls	r2, r3, #5
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	4413      	add	r3, r2
 800a280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a284:	691a      	ldr	r2, [r3, #16]
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	695b      	ldr	r3, [r3, #20]
 800a28a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a28e:	69b9      	ldr	r1, [r7, #24]
 800a290:	0148      	lsls	r0, r1, #5
 800a292:	69f9      	ldr	r1, [r7, #28]
 800a294:	4401      	add	r1, r0
 800a296:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a29a:	4313      	orrs	r3, r2
 800a29c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	78db      	ldrb	r3, [r3, #3]
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d11f      	bne.n	800a2e6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a2a6:	69bb      	ldr	r3, [r7, #24]
 800a2a8:	015a      	lsls	r2, r3, #5
 800a2aa:	69fb      	ldr	r3, [r7, #28]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2b2:	691b      	ldr	r3, [r3, #16]
 800a2b4:	69ba      	ldr	r2, [r7, #24]
 800a2b6:	0151      	lsls	r1, r2, #5
 800a2b8:	69fa      	ldr	r2, [r7, #28]
 800a2ba:	440a      	add	r2, r1
 800a2bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a2c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	015a      	lsls	r2, r3, #5
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2d2:	691b      	ldr	r3, [r3, #16]
 800a2d4:	69ba      	ldr	r2, [r7, #24]
 800a2d6:	0151      	lsls	r1, r2, #5
 800a2d8:	69fa      	ldr	r2, [r7, #28]
 800a2da:	440a      	add	r2, r1
 800a2dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a2e4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a2e6:	79fb      	ldrb	r3, [r7, #7]
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d14b      	bne.n	800a384 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	691b      	ldr	r3, [r3, #16]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d009      	beq.n	800a308 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a2f4:	69bb      	ldr	r3, [r7, #24]
 800a2f6:	015a      	lsls	r2, r3, #5
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a300:	461a      	mov	r2, r3
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	691b      	ldr	r3, [r3, #16]
 800a306:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	78db      	ldrb	r3, [r3, #3]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d128      	bne.n	800a362 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d110      	bne.n	800a342 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a320:	69bb      	ldr	r3, [r7, #24]
 800a322:	015a      	lsls	r2, r3, #5
 800a324:	69fb      	ldr	r3, [r7, #28]
 800a326:	4413      	add	r3, r2
 800a328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	69ba      	ldr	r2, [r7, #24]
 800a330:	0151      	lsls	r1, r2, #5
 800a332:	69fa      	ldr	r2, [r7, #28]
 800a334:	440a      	add	r2, r1
 800a336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a33a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a33e:	6013      	str	r3, [r2, #0]
 800a340:	e00f      	b.n	800a362 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	015a      	lsls	r2, r3, #5
 800a346:	69fb      	ldr	r3, [r7, #28]
 800a348:	4413      	add	r3, r2
 800a34a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	69ba      	ldr	r2, [r7, #24]
 800a352:	0151      	lsls	r1, r2, #5
 800a354:	69fa      	ldr	r2, [r7, #28]
 800a356:	440a      	add	r2, r1
 800a358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a35c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a360:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	015a      	lsls	r2, r3, #5
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	4413      	add	r3, r2
 800a36a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	69ba      	ldr	r2, [r7, #24]
 800a372:	0151      	lsls	r1, r2, #5
 800a374:	69fa      	ldr	r2, [r7, #28]
 800a376:	440a      	add	r2, r1
 800a378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a37c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a380:	6013      	str	r3, [r2, #0]
 800a382:	e12f      	b.n	800a5e4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	015a      	lsls	r2, r3, #5
 800a388:	69fb      	ldr	r3, [r7, #28]
 800a38a:	4413      	add	r3, r2
 800a38c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	69ba      	ldr	r2, [r7, #24]
 800a394:	0151      	lsls	r1, r2, #5
 800a396:	69fa      	ldr	r2, [r7, #28]
 800a398:	440a      	add	r2, r1
 800a39a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a39e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a3a2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a3a4:	68bb      	ldr	r3, [r7, #8]
 800a3a6:	78db      	ldrb	r3, [r3, #3]
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d015      	beq.n	800a3d8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	695b      	ldr	r3, [r3, #20]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	f000 8117 	beq.w	800a5e4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a3b6:	69fb      	ldr	r3, [r7, #28]
 800a3b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	f003 030f 	and.w	r3, r3, #15
 800a3c6:	2101      	movs	r1, #1
 800a3c8:	fa01 f303 	lsl.w	r3, r1, r3
 800a3cc:	69f9      	ldr	r1, [r7, #28]
 800a3ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	634b      	str	r3, [r1, #52]	; 0x34
 800a3d6:	e105      	b.n	800a5e4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3de:	689b      	ldr	r3, [r3, #8]
 800a3e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d110      	bne.n	800a40a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a3e8:	69bb      	ldr	r3, [r7, #24]
 800a3ea:	015a      	lsls	r2, r3, #5
 800a3ec:	69fb      	ldr	r3, [r7, #28]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	69ba      	ldr	r2, [r7, #24]
 800a3f8:	0151      	lsls	r1, r2, #5
 800a3fa:	69fa      	ldr	r2, [r7, #28]
 800a3fc:	440a      	add	r2, r1
 800a3fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a402:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a406:	6013      	str	r3, [r2, #0]
 800a408:	e00f      	b.n	800a42a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	015a      	lsls	r2, r3, #5
 800a40e:	69fb      	ldr	r3, [r7, #28]
 800a410:	4413      	add	r3, r2
 800a412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	69ba      	ldr	r2, [r7, #24]
 800a41a:	0151      	lsls	r1, r2, #5
 800a41c:	69fa      	ldr	r2, [r7, #28]
 800a41e:	440a      	add	r2, r1
 800a420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a428:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	68d9      	ldr	r1, [r3, #12]
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	781a      	ldrb	r2, [r3, #0]
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	695b      	ldr	r3, [r3, #20]
 800a436:	b298      	uxth	r0, r3
 800a438:	79fb      	ldrb	r3, [r7, #7]
 800a43a:	9300      	str	r3, [sp, #0]
 800a43c:	4603      	mov	r3, r0
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f000 fa2b 	bl	800a89a <USB_WritePacket>
 800a444:	e0ce      	b.n	800a5e4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a446:	69bb      	ldr	r3, [r7, #24]
 800a448:	015a      	lsls	r2, r3, #5
 800a44a:	69fb      	ldr	r3, [r7, #28]
 800a44c:	4413      	add	r3, r2
 800a44e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a452:	691b      	ldr	r3, [r3, #16]
 800a454:	69ba      	ldr	r2, [r7, #24]
 800a456:	0151      	lsls	r1, r2, #5
 800a458:	69fa      	ldr	r2, [r7, #28]
 800a45a:	440a      	add	r2, r1
 800a45c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a460:	0cdb      	lsrs	r3, r3, #19
 800a462:	04db      	lsls	r3, r3, #19
 800a464:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	015a      	lsls	r2, r3, #5
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	4413      	add	r3, r2
 800a46e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	69ba      	ldr	r2, [r7, #24]
 800a476:	0151      	lsls	r1, r2, #5
 800a478:	69fa      	ldr	r2, [r7, #28]
 800a47a:	440a      	add	r2, r1
 800a47c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a480:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a484:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a488:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	695b      	ldr	r3, [r3, #20]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d126      	bne.n	800a4e0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a492:	69bb      	ldr	r3, [r7, #24]
 800a494:	015a      	lsls	r2, r3, #5
 800a496:	69fb      	ldr	r3, [r7, #28]
 800a498:	4413      	add	r3, r2
 800a49a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a49e:	691a      	ldr	r2, [r3, #16]
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4a8:	69b9      	ldr	r1, [r7, #24]
 800a4aa:	0148      	lsls	r0, r1, #5
 800a4ac:	69f9      	ldr	r1, [r7, #28]
 800a4ae:	4401      	add	r1, r0
 800a4b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	015a      	lsls	r2, r3, #5
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	4413      	add	r3, r2
 800a4c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4c4:	691b      	ldr	r3, [r3, #16]
 800a4c6:	69ba      	ldr	r2, [r7, #24]
 800a4c8:	0151      	lsls	r1, r2, #5
 800a4ca:	69fa      	ldr	r2, [r7, #28]
 800a4cc:	440a      	add	r2, r1
 800a4ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a4d6:	6113      	str	r3, [r2, #16]
 800a4d8:	e036      	b.n	800a548 <USB_EPStartXfer+0x3dc>
 800a4da:	bf00      	nop
 800a4dc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	695a      	ldr	r2, [r3, #20]
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	4413      	add	r3, r2
 800a4ea:	1e5a      	subs	r2, r3, #1
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4f4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	015a      	lsls	r2, r3, #5
 800a4fa:	69fb      	ldr	r3, [r7, #28]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a502:	691a      	ldr	r2, [r3, #16]
 800a504:	8afb      	ldrh	r3, [r7, #22]
 800a506:	04d9      	lsls	r1, r3, #19
 800a508:	4b39      	ldr	r3, [pc, #228]	; (800a5f0 <USB_EPStartXfer+0x484>)
 800a50a:	400b      	ands	r3, r1
 800a50c:	69b9      	ldr	r1, [r7, #24]
 800a50e:	0148      	lsls	r0, r1, #5
 800a510:	69f9      	ldr	r1, [r7, #28]
 800a512:	4401      	add	r1, r0
 800a514:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a518:	4313      	orrs	r3, r2
 800a51a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	015a      	lsls	r2, r3, #5
 800a520:	69fb      	ldr	r3, [r7, #28]
 800a522:	4413      	add	r3, r2
 800a524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a528:	691a      	ldr	r2, [r3, #16]
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	8af9      	ldrh	r1, [r7, #22]
 800a530:	fb01 f303 	mul.w	r3, r1, r3
 800a534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a538:	69b9      	ldr	r1, [r7, #24]
 800a53a:	0148      	lsls	r0, r1, #5
 800a53c:	69f9      	ldr	r1, [r7, #28]
 800a53e:	4401      	add	r1, r0
 800a540:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a544:	4313      	orrs	r3, r2
 800a546:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a548:	79fb      	ldrb	r3, [r7, #7]
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d10d      	bne.n	800a56a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d009      	beq.n	800a56a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	68d9      	ldr	r1, [r3, #12]
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	015a      	lsls	r2, r3, #5
 800a55e:	69fb      	ldr	r3, [r7, #28]
 800a560:	4413      	add	r3, r2
 800a562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a566:	460a      	mov	r2, r1
 800a568:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	78db      	ldrb	r3, [r3, #3]
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d128      	bne.n	800a5c4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d110      	bne.n	800a5a4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a582:	69bb      	ldr	r3, [r7, #24]
 800a584:	015a      	lsls	r2, r3, #5
 800a586:	69fb      	ldr	r3, [r7, #28]
 800a588:	4413      	add	r3, r2
 800a58a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	69ba      	ldr	r2, [r7, #24]
 800a592:	0151      	lsls	r1, r2, #5
 800a594:	69fa      	ldr	r2, [r7, #28]
 800a596:	440a      	add	r2, r1
 800a598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a59c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a5a0:	6013      	str	r3, [r2, #0]
 800a5a2:	e00f      	b.n	800a5c4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a5a4:	69bb      	ldr	r3, [r7, #24]
 800a5a6:	015a      	lsls	r2, r3, #5
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	69ba      	ldr	r2, [r7, #24]
 800a5b4:	0151      	lsls	r1, r2, #5
 800a5b6:	69fa      	ldr	r2, [r7, #28]
 800a5b8:	440a      	add	r2, r1
 800a5ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a5c4:	69bb      	ldr	r3, [r7, #24]
 800a5c6:	015a      	lsls	r2, r3, #5
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	4413      	add	r3, r2
 800a5cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	69ba      	ldr	r2, [r7, #24]
 800a5d4:	0151      	lsls	r1, r2, #5
 800a5d6:	69fa      	ldr	r2, [r7, #28]
 800a5d8:	440a      	add	r2, r1
 800a5da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a5e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a5e4:	2300      	movs	r3, #0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3720      	adds	r7, #32
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	1ff80000 	.word	0x1ff80000

0800a5f4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b087      	sub	sp, #28
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	60f8      	str	r0, [r7, #12]
 800a5fc:	60b9      	str	r1, [r7, #8]
 800a5fe:	4613      	mov	r3, r2
 800a600:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	785b      	ldrb	r3, [r3, #1]
 800a610:	2b01      	cmp	r3, #1
 800a612:	f040 80cd 	bne.w	800a7b0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	695b      	ldr	r3, [r3, #20]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d132      	bne.n	800a684 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	015a      	lsls	r2, r3, #5
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	4413      	add	r3, r2
 800a626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a62a:	691b      	ldr	r3, [r3, #16]
 800a62c:	693a      	ldr	r2, [r7, #16]
 800a62e:	0151      	lsls	r1, r2, #5
 800a630:	697a      	ldr	r2, [r7, #20]
 800a632:	440a      	add	r2, r1
 800a634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a638:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a63c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a640:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	015a      	lsls	r2, r3, #5
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	4413      	add	r3, r2
 800a64a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	693a      	ldr	r2, [r7, #16]
 800a652:	0151      	lsls	r1, r2, #5
 800a654:	697a      	ldr	r2, [r7, #20]
 800a656:	440a      	add	r2, r1
 800a658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a65c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a660:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	015a      	lsls	r2, r3, #5
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	4413      	add	r3, r2
 800a66a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a66e:	691b      	ldr	r3, [r3, #16]
 800a670:	693a      	ldr	r2, [r7, #16]
 800a672:	0151      	lsls	r1, r2, #5
 800a674:	697a      	ldr	r2, [r7, #20]
 800a676:	440a      	add	r2, r1
 800a678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a67c:	0cdb      	lsrs	r3, r3, #19
 800a67e:	04db      	lsls	r3, r3, #19
 800a680:	6113      	str	r3, [r2, #16]
 800a682:	e04e      	b.n	800a722 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	015a      	lsls	r2, r3, #5
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	4413      	add	r3, r2
 800a68c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a690:	691b      	ldr	r3, [r3, #16]
 800a692:	693a      	ldr	r2, [r7, #16]
 800a694:	0151      	lsls	r1, r2, #5
 800a696:	697a      	ldr	r2, [r7, #20]
 800a698:	440a      	add	r2, r1
 800a69a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a69e:	0cdb      	lsrs	r3, r3, #19
 800a6a0:	04db      	lsls	r3, r3, #19
 800a6a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	015a      	lsls	r2, r3, #5
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6b0:	691b      	ldr	r3, [r3, #16]
 800a6b2:	693a      	ldr	r2, [r7, #16]
 800a6b4:	0151      	lsls	r1, r2, #5
 800a6b6:	697a      	ldr	r2, [r7, #20]
 800a6b8:	440a      	add	r2, r1
 800a6ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a6c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a6c6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	695a      	ldr	r2, [r3, #20]
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d903      	bls.n	800a6dc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	689a      	ldr	r2, [r3, #8]
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	015a      	lsls	r2, r3, #5
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6e8:	691b      	ldr	r3, [r3, #16]
 800a6ea:	693a      	ldr	r2, [r7, #16]
 800a6ec:	0151      	lsls	r1, r2, #5
 800a6ee:	697a      	ldr	r2, [r7, #20]
 800a6f0:	440a      	add	r2, r1
 800a6f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a6fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	015a      	lsls	r2, r3, #5
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	4413      	add	r3, r2
 800a704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a708:	691a      	ldr	r2, [r3, #16]
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	695b      	ldr	r3, [r3, #20]
 800a70e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a712:	6939      	ldr	r1, [r7, #16]
 800a714:	0148      	lsls	r0, r1, #5
 800a716:	6979      	ldr	r1, [r7, #20]
 800a718:	4401      	add	r1, r0
 800a71a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a71e:	4313      	orrs	r3, r2
 800a720:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a722:	79fb      	ldrb	r3, [r7, #7]
 800a724:	2b01      	cmp	r3, #1
 800a726:	d11e      	bne.n	800a766 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d009      	beq.n	800a744 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	015a      	lsls	r2, r3, #5
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	4413      	add	r3, r2
 800a738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a73c:	461a      	mov	r2, r3
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	691b      	ldr	r3, [r3, #16]
 800a742:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	015a      	lsls	r2, r3, #5
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	4413      	add	r3, r2
 800a74c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	693a      	ldr	r2, [r7, #16]
 800a754:	0151      	lsls	r1, r2, #5
 800a756:	697a      	ldr	r2, [r7, #20]
 800a758:	440a      	add	r2, r1
 800a75a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a75e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a762:	6013      	str	r3, [r2, #0]
 800a764:	e092      	b.n	800a88c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	015a      	lsls	r2, r3, #5
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	4413      	add	r3, r2
 800a76e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	693a      	ldr	r2, [r7, #16]
 800a776:	0151      	lsls	r1, r2, #5
 800a778:	697a      	ldr	r2, [r7, #20]
 800a77a:	440a      	add	r2, r1
 800a77c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a780:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a784:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	695b      	ldr	r3, [r3, #20]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d07e      	beq.n	800a88c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	f003 030f 	and.w	r3, r3, #15
 800a79e:	2101      	movs	r1, #1
 800a7a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a7a4:	6979      	ldr	r1, [r7, #20]
 800a7a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	634b      	str	r3, [r1, #52]	; 0x34
 800a7ae:	e06d      	b.n	800a88c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	015a      	lsls	r2, r3, #5
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	693a      	ldr	r2, [r7, #16]
 800a7c0:	0151      	lsls	r1, r2, #5
 800a7c2:	697a      	ldr	r2, [r7, #20]
 800a7c4:	440a      	add	r2, r1
 800a7c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7ca:	0cdb      	lsrs	r3, r3, #19
 800a7cc:	04db      	lsls	r3, r3, #19
 800a7ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	015a      	lsls	r2, r3, #5
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	4413      	add	r3, r2
 800a7d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	693a      	ldr	r2, [r7, #16]
 800a7e0:	0151      	lsls	r1, r2, #5
 800a7e2:	697a      	ldr	r2, [r7, #20]
 800a7e4:	440a      	add	r2, r1
 800a7e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a7ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a7f2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	695b      	ldr	r3, [r3, #20]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d003      	beq.n	800a804 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	689a      	ldr	r2, [r3, #8]
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	015a      	lsls	r2, r3, #5
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	4413      	add	r3, r2
 800a80c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a810:	691b      	ldr	r3, [r3, #16]
 800a812:	693a      	ldr	r2, [r7, #16]
 800a814:	0151      	lsls	r1, r2, #5
 800a816:	697a      	ldr	r2, [r7, #20]
 800a818:	440a      	add	r2, r1
 800a81a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a81e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a822:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	015a      	lsls	r2, r3, #5
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	4413      	add	r3, r2
 800a82c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a830:	691a      	ldr	r2, [r3, #16]
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	689b      	ldr	r3, [r3, #8]
 800a836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a83a:	6939      	ldr	r1, [r7, #16]
 800a83c:	0148      	lsls	r0, r1, #5
 800a83e:	6979      	ldr	r1, [r7, #20]
 800a840:	4401      	add	r1, r0
 800a842:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a846:	4313      	orrs	r3, r2
 800a848:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a84a:	79fb      	ldrb	r3, [r7, #7]
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d10d      	bne.n	800a86c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d009      	beq.n	800a86c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	68d9      	ldr	r1, [r3, #12]
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	015a      	lsls	r2, r3, #5
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	4413      	add	r3, r2
 800a864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a868:	460a      	mov	r2, r1
 800a86a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	015a      	lsls	r2, r3, #5
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	4413      	add	r3, r2
 800a874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	693a      	ldr	r2, [r7, #16]
 800a87c:	0151      	lsls	r1, r2, #5
 800a87e:	697a      	ldr	r2, [r7, #20]
 800a880:	440a      	add	r2, r1
 800a882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a886:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a88a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a88c:	2300      	movs	r3, #0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	371c      	adds	r7, #28
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr

0800a89a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a89a:	b480      	push	{r7}
 800a89c:	b089      	sub	sp, #36	; 0x24
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	60f8      	str	r0, [r7, #12]
 800a8a2:	60b9      	str	r1, [r7, #8]
 800a8a4:	4611      	mov	r1, r2
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	460b      	mov	r3, r1
 800a8aa:	71fb      	strb	r3, [r7, #7]
 800a8ac:	4613      	mov	r3, r2
 800a8ae:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a8b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d11a      	bne.n	800a8f6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a8c0:	88bb      	ldrh	r3, [r7, #4]
 800a8c2:	3303      	adds	r3, #3
 800a8c4:	089b      	lsrs	r3, r3, #2
 800a8c6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	61bb      	str	r3, [r7, #24]
 800a8cc:	e00f      	b.n	800a8ee <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a8ce:	79fb      	ldrb	r3, [r7, #7]
 800a8d0:	031a      	lsls	r2, r3, #12
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	4413      	add	r3, r2
 800a8d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8da:	461a      	mov	r2, r3
 800a8dc:	69fb      	ldr	r3, [r7, #28]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a8e2:	69fb      	ldr	r3, [r7, #28]
 800a8e4:	3304      	adds	r3, #4
 800a8e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a8e8:	69bb      	ldr	r3, [r7, #24]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	61bb      	str	r3, [r7, #24]
 800a8ee:	69ba      	ldr	r2, [r7, #24]
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d3eb      	bcc.n	800a8ce <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3724      	adds	r7, #36	; 0x24
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr

0800a904 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a904:	b480      	push	{r7}
 800a906:	b089      	sub	sp, #36	; 0x24
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	4613      	mov	r3, r2
 800a910:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a91a:	88fb      	ldrh	r3, [r7, #6]
 800a91c:	3303      	adds	r3, #3
 800a91e:	089b      	lsrs	r3, r3, #2
 800a920:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a922:	2300      	movs	r3, #0
 800a924:	61bb      	str	r3, [r7, #24]
 800a926:	e00b      	b.n	800a940 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	601a      	str	r2, [r3, #0]
    pDest++;
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	3304      	adds	r3, #4
 800a938:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a93a:	69bb      	ldr	r3, [r7, #24]
 800a93c:	3301      	adds	r3, #1
 800a93e:	61bb      	str	r3, [r7, #24]
 800a940:	69ba      	ldr	r2, [r7, #24]
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	429a      	cmp	r2, r3
 800a946:	d3ef      	bcc.n	800a928 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a948:	69fb      	ldr	r3, [r7, #28]
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3724      	adds	r7, #36	; 0x24
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr

0800a956 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a956:	b480      	push	{r7}
 800a958:	b085      	sub	sp, #20
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	785b      	ldrb	r3, [r3, #1]
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d12c      	bne.n	800a9cc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	015a      	lsls	r2, r3, #5
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	4413      	add	r3, r2
 800a97a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	2b00      	cmp	r3, #0
 800a982:	db12      	blt.n	800a9aa <USB_EPSetStall+0x54>
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d00f      	beq.n	800a9aa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	015a      	lsls	r2, r3, #5
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	4413      	add	r3, r2
 800a992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	68ba      	ldr	r2, [r7, #8]
 800a99a:	0151      	lsls	r1, r2, #5
 800a99c:	68fa      	ldr	r2, [r7, #12]
 800a99e:	440a      	add	r2, r1
 800a9a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a9a8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	015a      	lsls	r2, r3, #5
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	68ba      	ldr	r2, [r7, #8]
 800a9ba:	0151      	lsls	r1, r2, #5
 800a9bc:	68fa      	ldr	r2, [r7, #12]
 800a9be:	440a      	add	r2, r1
 800a9c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a9c8:	6013      	str	r3, [r2, #0]
 800a9ca:	e02b      	b.n	800aa24 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	015a      	lsls	r2, r3, #5
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	db12      	blt.n	800aa04 <USB_EPSetStall+0xae>
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d00f      	beq.n	800aa04 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	015a      	lsls	r2, r3, #5
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	68ba      	ldr	r2, [r7, #8]
 800a9f4:	0151      	lsls	r1, r2, #5
 800a9f6:	68fa      	ldr	r2, [r7, #12]
 800a9f8:	440a      	add	r2, r1
 800a9fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aa02:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	015a      	lsls	r2, r3, #5
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	68ba      	ldr	r2, [r7, #8]
 800aa14:	0151      	lsls	r1, r2, #5
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	440a      	add	r2, r1
 800aa1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aa22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aa24:	2300      	movs	r3, #0
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3714      	adds	r7, #20
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr

0800aa32 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aa32:	b480      	push	{r7}
 800aa34:	b085      	sub	sp, #20
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
 800aa3a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	785b      	ldrb	r3, [r3, #1]
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d128      	bne.n	800aaa0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	015a      	lsls	r2, r3, #5
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	4413      	add	r3, r2
 800aa56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	68ba      	ldr	r2, [r7, #8]
 800aa5e:	0151      	lsls	r1, r2, #5
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	440a      	add	r2, r1
 800aa64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa6c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	78db      	ldrb	r3, [r3, #3]
 800aa72:	2b03      	cmp	r3, #3
 800aa74:	d003      	beq.n	800aa7e <USB_EPClearStall+0x4c>
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	78db      	ldrb	r3, [r3, #3]
 800aa7a:	2b02      	cmp	r3, #2
 800aa7c:	d138      	bne.n	800aaf0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	015a      	lsls	r2, r3, #5
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	4413      	add	r3, r2
 800aa86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	68ba      	ldr	r2, [r7, #8]
 800aa8e:	0151      	lsls	r1, r2, #5
 800aa90:	68fa      	ldr	r2, [r7, #12]
 800aa92:	440a      	add	r2, r1
 800aa94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa9c:	6013      	str	r3, [r2, #0]
 800aa9e:	e027      	b.n	800aaf0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	015a      	lsls	r2, r3, #5
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	4413      	add	r3, r2
 800aaa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	68ba      	ldr	r2, [r7, #8]
 800aab0:	0151      	lsls	r1, r2, #5
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	440a      	add	r2, r1
 800aab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aabe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	78db      	ldrb	r3, [r3, #3]
 800aac4:	2b03      	cmp	r3, #3
 800aac6:	d003      	beq.n	800aad0 <USB_EPClearStall+0x9e>
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	78db      	ldrb	r3, [r3, #3]
 800aacc:	2b02      	cmp	r3, #2
 800aace:	d10f      	bne.n	800aaf0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	015a      	lsls	r2, r3, #5
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	4413      	add	r3, r2
 800aad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	68ba      	ldr	r2, [r7, #8]
 800aae0:	0151      	lsls	r1, r2, #5
 800aae2:	68fa      	ldr	r2, [r7, #12]
 800aae4:	440a      	add	r2, r1
 800aae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aaee:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800aaf0:	2300      	movs	r3, #0
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3714      	adds	r7, #20
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr

0800aafe <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800aafe:	b480      	push	{r7}
 800ab00:	b085      	sub	sp, #20
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
 800ab06:	460b      	mov	r3, r1
 800ab08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab1c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ab20:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab28:	681a      	ldr	r2, [r3, #0]
 800ab2a:	78fb      	ldrb	r3, [r7, #3]
 800ab2c:	011b      	lsls	r3, r3, #4
 800ab2e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ab32:	68f9      	ldr	r1, [r7, #12]
 800ab34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ab3c:	2300      	movs	r3, #0
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3714      	adds	r7, #20
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr

0800ab4a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ab4a:	b480      	push	{r7}
 800ab4c:	b085      	sub	sp, #20
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab64:	f023 0303 	bic.w	r3, r3, #3
 800ab68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	68fa      	ldr	r2, [r7, #12]
 800ab74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab78:	f023 0302 	bic.w	r3, r3, #2
 800ab7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab7e:	2300      	movs	r3, #0
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3714      	adds	r7, #20
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b085      	sub	sp, #20
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aba6:	f023 0303 	bic.w	r3, r3, #3
 800abaa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	68fa      	ldr	r2, [r7, #12]
 800abb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800abba:	f043 0302 	orr.w	r3, r3, #2
 800abbe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800abc0:	2300      	movs	r3, #0
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3714      	adds	r7, #20
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr

0800abce <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800abce:	b480      	push	{r7}
 800abd0:	b085      	sub	sp, #20
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	695b      	ldr	r3, [r3, #20]
 800abda:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	699b      	ldr	r3, [r3, #24]
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	4013      	ands	r3, r2
 800abe4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800abe6:	68fb      	ldr	r3, [r7, #12]
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3714      	adds	r7, #20
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr

0800abf4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b085      	sub	sp, #20
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac06:	699b      	ldr	r3, [r3, #24]
 800ac08:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac10:	69db      	ldr	r3, [r3, #28]
 800ac12:	68ba      	ldr	r2, [r7, #8]
 800ac14:	4013      	ands	r3, r2
 800ac16:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	0c1b      	lsrs	r3, r3, #16
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3714      	adds	r7, #20
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac3a:	699b      	ldr	r3, [r3, #24]
 800ac3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac44:	69db      	ldr	r3, [r3, #28]
 800ac46:	68ba      	ldr	r2, [r7, #8]
 800ac48:	4013      	ands	r3, r2
 800ac4a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	b29b      	uxth	r3, r3
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3714      	adds	r7, #20
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b085      	sub	sp, #20
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	460b      	mov	r3, r1
 800ac66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ac6c:	78fb      	ldrb	r3, [r7, #3]
 800ac6e:	015a      	lsls	r2, r3, #5
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	4413      	add	r3, r2
 800ac74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac82:	695b      	ldr	r3, [r3, #20]
 800ac84:	68ba      	ldr	r2, [r7, #8]
 800ac86:	4013      	ands	r3, r2
 800ac88:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac8a:	68bb      	ldr	r3, [r7, #8]
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3714      	adds	r7, #20
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b087      	sub	sp, #28
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	460b      	mov	r3, r1
 800aca2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acae:	691b      	ldr	r3, [r3, #16]
 800acb0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acba:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800acbc:	78fb      	ldrb	r3, [r7, #3]
 800acbe:	f003 030f 	and.w	r3, r3, #15
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	fa22 f303 	lsr.w	r3, r2, r3
 800acc8:	01db      	lsls	r3, r3, #7
 800acca:	b2db      	uxtb	r3, r3
 800accc:	693a      	ldr	r2, [r7, #16]
 800acce:	4313      	orrs	r3, r2
 800acd0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800acd2:	78fb      	ldrb	r3, [r7, #3]
 800acd4:	015a      	lsls	r2, r3, #5
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	4413      	add	r3, r2
 800acda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	693a      	ldr	r2, [r7, #16]
 800ace2:	4013      	ands	r3, r2
 800ace4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ace6:	68bb      	ldr	r3, [r7, #8]
}
 800ace8:	4618      	mov	r0, r3
 800acea:	371c      	adds	r7, #28
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	695b      	ldr	r3, [r3, #20]
 800ad00:	f003 0301 	and.w	r3, r3, #1
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b085      	sub	sp, #20
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	68fa      	ldr	r2, [r7, #12]
 800ad26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad2a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ad2e:	f023 0307 	bic.w	r3, r3, #7
 800ad32:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad46:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad48:	2300      	movs	r3, #0
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3714      	adds	r7, #20
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad54:	4770      	bx	lr
	...

0800ad58 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b087      	sub	sp, #28
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	460b      	mov	r3, r1
 800ad62:	607a      	str	r2, [r7, #4]
 800ad64:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	333c      	adds	r3, #60	; 0x3c
 800ad6e:	3304      	adds	r3, #4
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	4a26      	ldr	r2, [pc, #152]	; (800ae10 <USB_EP0_OutStart+0xb8>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d90a      	bls.n	800ad92 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad8c:	d101      	bne.n	800ad92 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	e037      	b.n	800ae02 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad98:	461a      	mov	r2, r3
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ada4:	691b      	ldr	r3, [r3, #16]
 800ada6:	697a      	ldr	r2, [r7, #20]
 800ada8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800adb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adb8:	691b      	ldr	r3, [r3, #16]
 800adba:	697a      	ldr	r2, [r7, #20]
 800adbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adc0:	f043 0318 	orr.w	r3, r3, #24
 800adc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adcc:	691b      	ldr	r3, [r3, #16]
 800adce:	697a      	ldr	r2, [r7, #20]
 800add0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800add4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800add8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800adda:	7afb      	ldrb	r3, [r7, #11]
 800addc:	2b01      	cmp	r3, #1
 800adde:	d10f      	bne.n	800ae00 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ade6:	461a      	mov	r2, r3
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	697a      	ldr	r2, [r7, #20]
 800adf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adfa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800adfe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae00:	2300      	movs	r3, #0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	371c      	adds	r7, #28
 800ae06:	46bd      	mov	sp, r7
 800ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0c:	4770      	bx	lr
 800ae0e:	bf00      	nop
 800ae10:	4f54300a 	.word	0x4f54300a

0800ae14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	3301      	adds	r3, #1
 800ae24:	60fb      	str	r3, [r7, #12]
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	4a13      	ldr	r2, [pc, #76]	; (800ae78 <USB_CoreReset+0x64>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d901      	bls.n	800ae32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ae2e:	2303      	movs	r3, #3
 800ae30:	e01b      	b.n	800ae6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	691b      	ldr	r3, [r3, #16]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	daf2      	bge.n	800ae20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	f043 0201 	orr.w	r2, r3, #1
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	60fb      	str	r3, [r7, #12]
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	4a09      	ldr	r2, [pc, #36]	; (800ae78 <USB_CoreReset+0x64>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d901      	bls.n	800ae5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ae58:	2303      	movs	r3, #3
 800ae5a:	e006      	b.n	800ae6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	691b      	ldr	r3, [r3, #16]
 800ae60:	f003 0301 	and.w	r3, r3, #1
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d0f0      	beq.n	800ae4a <USB_CoreReset+0x36>

  return HAL_OK;
 800ae68:	2300      	movs	r3, #0
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3714      	adds	r7, #20
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr
 800ae76:	bf00      	nop
 800ae78:	00030d40 	.word	0x00030d40

0800ae7c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	460b      	mov	r3, r1
 800ae86:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ae88:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ae8c:	f00b fd5a 	bl	8016944 <malloc>
 800ae90:	4603      	mov	r3, r0
 800ae92:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d105      	bne.n	800aea6 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800aea2:	2302      	movs	r3, #2
 800aea4:	e066      	b.n	800af74 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	68fa      	ldr	r2, [r7, #12]
 800aeaa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	7c1b      	ldrb	r3, [r3, #16]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d119      	bne.n	800aeea <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aeb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aeba:	2202      	movs	r2, #2
 800aebc:	2181      	movs	r1, #129	; 0x81
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f005 f937 	bl	8010132 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2201      	movs	r2, #1
 800aec8:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aeca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aece:	2202      	movs	r2, #2
 800aed0:	2101      	movs	r1, #1
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f005 f92d 	bl	8010132 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2201      	movs	r2, #1
 800aedc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2210      	movs	r2, #16
 800aee4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800aee8:	e016      	b.n	800af18 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aeea:	2340      	movs	r3, #64	; 0x40
 800aeec:	2202      	movs	r2, #2
 800aeee:	2181      	movs	r1, #129	; 0x81
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f005 f91e 	bl	8010132 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2201      	movs	r2, #1
 800aefa:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aefc:	2340      	movs	r3, #64	; 0x40
 800aefe:	2202      	movs	r2, #2
 800af00:	2101      	movs	r1, #1
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f005 f915 	bl	8010132 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2201      	movs	r2, #1
 800af0c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2210      	movs	r2, #16
 800af14:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800af18:	2308      	movs	r3, #8
 800af1a:	2203      	movs	r2, #3
 800af1c:	2182      	movs	r1, #130	; 0x82
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f005 f907 	bl	8010132 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2201      	movs	r2, #1
 800af28:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2200      	movs	r2, #0
 800af3a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2200      	movs	r2, #0
 800af42:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	7c1b      	ldrb	r3, [r3, #16]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d109      	bne.n	800af62 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800af54:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af58:	2101      	movs	r1, #1
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f005 f9d8 	bl	8010310 <USBD_LL_PrepareReceive>
 800af60:	e007      	b.n	800af72 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800af68:	2340      	movs	r3, #64	; 0x40
 800af6a:	2101      	movs	r1, #1
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f005 f9cf 	bl	8010310 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800af72:	2300      	movs	r3, #0
}
 800af74:	4618      	mov	r0, r3
 800af76:	3710      	adds	r7, #16
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	460b      	mov	r3, r1
 800af86:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800af88:	2300      	movs	r3, #0
 800af8a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800af8c:	2181      	movs	r1, #129	; 0x81
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f005 f8f5 	bl	801017e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2200      	movs	r2, #0
 800af98:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800af9a:	2101      	movs	r1, #1
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f005 f8ee 	bl	801017e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2200      	movs	r2, #0
 800afa6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800afaa:	2182      	movs	r1, #130	; 0x82
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f005 f8e6 	bl	801017e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2200      	movs	r2, #0
 800afb6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2200      	movs	r2, #0
 800afbe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d00e      	beq.n	800afea <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800afdc:	4618      	mov	r0, r3
 800afde:	f00b fcb9 	bl	8016954 <free>
    pdev->pClassData = NULL;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2200      	movs	r2, #0
 800afe6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800afea:	7bfb      	ldrb	r3, [r7, #15]
}
 800afec:	4618      	mov	r0, r3
 800afee:	3710      	adds	r7, #16
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b086      	sub	sp, #24
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b004:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b006:	2300      	movs	r3, #0
 800b008:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b00a:	2300      	movs	r3, #0
 800b00c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800b00e:	2300      	movs	r3, #0
 800b010:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d03a      	beq.n	800b094 <USBD_CDC_Setup+0xa0>
 800b01e:	2b20      	cmp	r3, #32
 800b020:	f040 8097 	bne.w	800b152 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	88db      	ldrh	r3, [r3, #6]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d029      	beq.n	800b080 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	b25b      	sxtb	r3, r3
 800b032:	2b00      	cmp	r3, #0
 800b034:	da11      	bge.n	800b05a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	683a      	ldr	r2, [r7, #0]
 800b040:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800b042:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b044:	683a      	ldr	r2, [r7, #0]
 800b046:	88d2      	ldrh	r2, [r2, #6]
 800b048:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b04a:	6939      	ldr	r1, [r7, #16]
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	88db      	ldrh	r3, [r3, #6]
 800b050:	461a      	mov	r2, r3
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f001 fa9d 	bl	800c592 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800b058:	e082      	b.n	800b160 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	785a      	ldrb	r2, [r3, #1]
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	88db      	ldrh	r3, [r3, #6]
 800b068:	b2da      	uxtb	r2, r3
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b070:	6939      	ldr	r1, [r7, #16]
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	88db      	ldrh	r3, [r3, #6]
 800b076:	461a      	mov	r2, r3
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f001 fab6 	bl	800c5ea <USBD_CtlPrepareRx>
    break;
 800b07e:	e06f      	b.n	800b160 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b086:	689b      	ldr	r3, [r3, #8]
 800b088:	683a      	ldr	r2, [r7, #0]
 800b08a:	7850      	ldrb	r0, [r2, #1]
 800b08c:	2200      	movs	r2, #0
 800b08e:	6839      	ldr	r1, [r7, #0]
 800b090:	4798      	blx	r3
    break;
 800b092:	e065      	b.n	800b160 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	785b      	ldrb	r3, [r3, #1]
 800b098:	2b0b      	cmp	r3, #11
 800b09a:	d84f      	bhi.n	800b13c <USBD_CDC_Setup+0x148>
 800b09c:	a201      	add	r2, pc, #4	; (adr r2, 800b0a4 <USBD_CDC_Setup+0xb0>)
 800b09e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a2:	bf00      	nop
 800b0a4:	0800b0d5 	.word	0x0800b0d5
 800b0a8:	0800b14b 	.word	0x0800b14b
 800b0ac:	0800b13d 	.word	0x0800b13d
 800b0b0:	0800b13d 	.word	0x0800b13d
 800b0b4:	0800b13d 	.word	0x0800b13d
 800b0b8:	0800b13d 	.word	0x0800b13d
 800b0bc:	0800b13d 	.word	0x0800b13d
 800b0c0:	0800b13d 	.word	0x0800b13d
 800b0c4:	0800b13d 	.word	0x0800b13d
 800b0c8:	0800b13d 	.word	0x0800b13d
 800b0cc:	0800b0fd 	.word	0x0800b0fd
 800b0d0:	0800b125 	.word	0x0800b125
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0da:	2b03      	cmp	r3, #3
 800b0dc:	d107      	bne.n	800b0ee <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b0de:	f107 030c 	add.w	r3, r7, #12
 800b0e2:	2202      	movs	r2, #2
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f001 fa53 	bl	800c592 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b0ec:	e030      	b.n	800b150 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b0ee:	6839      	ldr	r1, [r7, #0]
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f001 f9dd 	bl	800c4b0 <USBD_CtlError>
        ret = USBD_FAIL;
 800b0f6:	2303      	movs	r3, #3
 800b0f8:	75fb      	strb	r3, [r7, #23]
      break;
 800b0fa:	e029      	b.n	800b150 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b102:	2b03      	cmp	r3, #3
 800b104:	d107      	bne.n	800b116 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b106:	f107 030f 	add.w	r3, r7, #15
 800b10a:	2201      	movs	r2, #1
 800b10c:	4619      	mov	r1, r3
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f001 fa3f 	bl	800c592 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b114:	e01c      	b.n	800b150 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b116:	6839      	ldr	r1, [r7, #0]
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f001 f9c9 	bl	800c4b0 <USBD_CtlError>
        ret = USBD_FAIL;
 800b11e:	2303      	movs	r3, #3
 800b120:	75fb      	strb	r3, [r7, #23]
      break;
 800b122:	e015      	b.n	800b150 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b12a:	2b03      	cmp	r3, #3
 800b12c:	d00f      	beq.n	800b14e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800b12e:	6839      	ldr	r1, [r7, #0]
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f001 f9bd 	bl	800c4b0 <USBD_CtlError>
        ret = USBD_FAIL;
 800b136:	2303      	movs	r3, #3
 800b138:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b13a:	e008      	b.n	800b14e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800b13c:	6839      	ldr	r1, [r7, #0]
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f001 f9b6 	bl	800c4b0 <USBD_CtlError>
      ret = USBD_FAIL;
 800b144:	2303      	movs	r3, #3
 800b146:	75fb      	strb	r3, [r7, #23]
      break;
 800b148:	e002      	b.n	800b150 <USBD_CDC_Setup+0x15c>
      break;
 800b14a:	bf00      	nop
 800b14c:	e008      	b.n	800b160 <USBD_CDC_Setup+0x16c>
      break;
 800b14e:	bf00      	nop
    }
    break;
 800b150:	e006      	b.n	800b160 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800b152:	6839      	ldr	r1, [r7, #0]
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f001 f9ab 	bl	800c4b0 <USBD_CtlError>
    ret = USBD_FAIL;
 800b15a:	2303      	movs	r3, #3
 800b15c:	75fb      	strb	r3, [r7, #23]
    break;
 800b15e:	bf00      	nop
  }

  return (uint8_t)ret;
 800b160:	7dfb      	ldrb	r3, [r7, #23]
}
 800b162:	4618      	mov	r0, r3
 800b164:	3718      	adds	r7, #24
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop

0800b16c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	460b      	mov	r3, r1
 800b176:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b17e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b186:	2b00      	cmp	r3, #0
 800b188:	d101      	bne.n	800b18e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b18a:	2303      	movs	r3, #3
 800b18c:	e049      	b.n	800b222 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b194:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b196:	78fa      	ldrb	r2, [r7, #3]
 800b198:	6879      	ldr	r1, [r7, #4]
 800b19a:	4613      	mov	r3, r2
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	4413      	add	r3, r2
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	440b      	add	r3, r1
 800b1a4:	3318      	adds	r3, #24
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d029      	beq.n	800b200 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b1ac:	78fa      	ldrb	r2, [r7, #3]
 800b1ae:	6879      	ldr	r1, [r7, #4]
 800b1b0:	4613      	mov	r3, r2
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	4413      	add	r3, r2
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	440b      	add	r3, r1
 800b1ba:	3318      	adds	r3, #24
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	78f9      	ldrb	r1, [r7, #3]
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	00db      	lsls	r3, r3, #3
 800b1c6:	1a5b      	subs	r3, r3, r1
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	4403      	add	r3, r0
 800b1cc:	3344      	adds	r3, #68	; 0x44
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	fbb2 f1f3 	udiv	r1, r2, r3
 800b1d4:	fb03 f301 	mul.w	r3, r3, r1
 800b1d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d110      	bne.n	800b200 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b1de:	78fa      	ldrb	r2, [r7, #3]
 800b1e0:	6879      	ldr	r1, [r7, #4]
 800b1e2:	4613      	mov	r3, r2
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	4413      	add	r3, r2
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	440b      	add	r3, r1
 800b1ec:	3318      	adds	r3, #24
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b1f2:	78f9      	ldrb	r1, [r7, #3]
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f005 f868 	bl	80102ce <USBD_LL_Transmit>
 800b1fe:	e00f      	b.n	800b220 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	2200      	movs	r2, #0
 800b204:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b20e:	691b      	ldr	r3, [r3, #16]
 800b210:	68ba      	ldr	r2, [r7, #8]
 800b212:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b216:	68ba      	ldr	r2, [r7, #8]
 800b218:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b21c:	78fa      	ldrb	r2, [r7, #3]
 800b21e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	3710      	adds	r7, #16
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}

0800b22a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b084      	sub	sp, #16
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
 800b232:	460b      	mov	r3, r1
 800b234:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b23c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b244:	2b00      	cmp	r3, #0
 800b246:	d101      	bne.n	800b24c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b248:	2303      	movs	r3, #3
 800b24a:	e015      	b.n	800b278 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b24c:	78fb      	ldrb	r3, [r7, #3]
 800b24e:	4619      	mov	r1, r3
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f005 f87e 	bl	8010352 <USBD_LL_GetRxDataSize>
 800b256:	4602      	mov	r2, r0
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b264:	68db      	ldr	r3, [r3, #12]
 800b266:	68fa      	ldr	r2, [r7, #12]
 800b268:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b26c:	68fa      	ldr	r2, [r7, #12]
 800b26e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b272:	4611      	mov	r1, r2
 800b274:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b276:	2300      	movs	r3, #0
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3710      	adds	r7, #16
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b28e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b296:	2b00      	cmp	r3, #0
 800b298:	d015      	beq.n	800b2c6 <USBD_CDC_EP0_RxReady+0x46>
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b2a0:	2bff      	cmp	r3, #255	; 0xff
 800b2a2:	d010      	beq.n	800b2c6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b2aa:	689b      	ldr	r3, [r3, #8]
 800b2ac:	68fa      	ldr	r2, [r7, #12]
 800b2ae:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b2b2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b2b4:	68fa      	ldr	r2, [r7, #12]
 800b2b6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b2ba:	b292      	uxth	r2, r2
 800b2bc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	22ff      	movs	r2, #255	; 0xff
 800b2c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800b2c6:	2300      	movs	r3, #0
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3710      	adds	r7, #16
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b083      	sub	sp, #12
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2243      	movs	r2, #67	; 0x43
 800b2dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b2de:	4b03      	ldr	r3, [pc, #12]	; (800b2ec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr
 800b2ec:	20000094 	.word	0x20000094

0800b2f0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2243      	movs	r2, #67	; 0x43
 800b2fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b2fe:	4b03      	ldr	r3, [pc, #12]	; (800b30c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b300:	4618      	mov	r0, r3
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr
 800b30c:	20000050 	.word	0x20000050

0800b310 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2243      	movs	r2, #67	; 0x43
 800b31c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b31e:	4b03      	ldr	r3, [pc, #12]	; (800b32c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b320:	4618      	mov	r0, r3
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr
 800b32c:	200000d8 	.word	0x200000d8

0800b330 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b330:	b480      	push	{r7}
 800b332:	b083      	sub	sp, #12
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	220a      	movs	r2, #10
 800b33c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b33e:	4b03      	ldr	r3, [pc, #12]	; (800b34c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b340:	4618      	mov	r0, r3
 800b342:	370c      	adds	r7, #12
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr
 800b34c:	2000000c 	.word	0x2000000c

0800b350 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d101      	bne.n	800b364 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b360:	2303      	movs	r3, #3
 800b362:	e004      	b.n	800b36e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	683a      	ldr	r2, [r7, #0]
 800b368:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b36c:	2300      	movs	r3, #0
}
 800b36e:	4618      	mov	r0, r3
 800b370:	370c      	adds	r7, #12
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr

0800b37a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b37a:	b480      	push	{r7}
 800b37c:	b087      	sub	sp, #28
 800b37e:	af00      	add	r7, sp, #0
 800b380:	60f8      	str	r0, [r7, #12]
 800b382:	60b9      	str	r1, [r7, #8]
 800b384:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b38c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	68ba      	ldr	r2, [r7, #8]
 800b392:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b39e:	2300      	movs	r3, #0
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	371c      	adds	r7, #28
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b085      	sub	sp, #20
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3bc:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	683a      	ldr	r2, [r7, #0]
 800b3c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b3c6:	2300      	movs	r3, #0
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3714      	adds	r7, #20
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3e2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d101      	bne.n	800b3f6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b3f2:	2303      	movs	r3, #3
 800b3f4:	e01a      	b.n	800b42c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d114      	bne.n	800b42a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	2201      	movs	r2, #1
 800b404:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b41e:	2181      	movs	r1, #129	; 0x81
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f004 ff54 	bl	80102ce <USBD_LL_Transmit>

    ret = USBD_OK;
 800b426:	2300      	movs	r3, #0
 800b428:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3710      	adds	r7, #16
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b084      	sub	sp, #16
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b442:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d101      	bne.n	800b452 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b44e:	2303      	movs	r3, #3
 800b450:	e016      	b.n	800b480 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	7c1b      	ldrb	r3, [r3, #16]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d109      	bne.n	800b46e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b460:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b464:	2101      	movs	r1, #1
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f004 ff52 	bl	8010310 <USBD_LL_PrepareReceive>
 800b46c:	e007      	b.n	800b47e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b474:	2340      	movs	r3, #64	; 0x40
 800b476:	2101      	movs	r1, #1
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f004 ff49 	bl	8010310 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b47e:	2300      	movs	r3, #0
}
 800b480:	4618      	mov	r0, r3
 800b482:	3710      	adds	r7, #16
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b086      	sub	sp, #24
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	4613      	mov	r3, r2
 800b494:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d101      	bne.n	800b4a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b49c:	2303      	movs	r3, #3
 800b49e:	e025      	b.n	800b4ec <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d003      	beq.n	800b4b2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d003      	beq.n	800b4c4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d003      	beq.n	800b4d2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	68ba      	ldr	r2, [r7, #8]
 800b4ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	79fa      	ldrb	r2, [r7, #7]
 800b4de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b4e0:	68f8      	ldr	r0, [r7, #12]
 800b4e2:	f004 fdbf 	bl	8010064 <USBD_LL_Init>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b4ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3718      	adds	r7, #24
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b084      	sub	sp, #16
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b4fe:	2300      	movs	r3, #0
 800b500:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d101      	bne.n	800b50c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b508:	2303      	movs	r3, #3
 800b50a:	e010      	b.n	800b52e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	683a      	ldr	r2, [r7, #0]
 800b510:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b51c:	f107 020e 	add.w	r2, r7, #14
 800b520:	4610      	mov	r0, r2
 800b522:	4798      	blx	r3
 800b524:	4602      	mov	r2, r0
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800b52c:	2300      	movs	r3, #0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3710      	adds	r7, #16
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}

0800b536 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b536:	b580      	push	{r7, lr}
 800b538:	b082      	sub	sp, #8
 800b53a:	af00      	add	r7, sp, #0
 800b53c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f004 fddc 	bl	80100fc <USBD_LL_Start>
 800b544:	4603      	mov	r3, r0
}
 800b546:	4618      	mov	r0, r3
 800b548:	3708      	adds	r7, #8
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}

0800b54e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b54e:	b480      	push	{r7}
 800b550:	b083      	sub	sp, #12
 800b552:	af00      	add	r7, sp, #0
 800b554:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	370c      	adds	r7, #12
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr

0800b564 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	460b      	mov	r3, r1
 800b56e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b570:	2303      	movs	r3, #3
 800b572:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d009      	beq.n	800b592 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	78fa      	ldrb	r2, [r7, #3]
 800b588:	4611      	mov	r1, r2
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	4798      	blx	r3
 800b58e:	4603      	mov	r3, r0
 800b590:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b592:	7bfb      	ldrb	r3, [r7, #15]
}
 800b594:	4618      	mov	r0, r3
 800b596:	3710      	adds	r7, #16
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d007      	beq.n	800b5c2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	78fa      	ldrb	r2, [r7, #3]
 800b5bc:	4611      	mov	r1, r2
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	4798      	blx	r3
  }

  return USBD_OK;
 800b5c2:	2300      	movs	r3, #0
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3708      	adds	r7, #8
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b5dc:	6839      	ldr	r1, [r7, #0]
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f000 ff2c 	bl	800c43c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b600:	f003 031f 	and.w	r3, r3, #31
 800b604:	2b01      	cmp	r3, #1
 800b606:	d00e      	beq.n	800b626 <USBD_LL_SetupStage+0x5a>
 800b608:	2b01      	cmp	r3, #1
 800b60a:	d302      	bcc.n	800b612 <USBD_LL_SetupStage+0x46>
 800b60c:	2b02      	cmp	r3, #2
 800b60e:	d014      	beq.n	800b63a <USBD_LL_SetupStage+0x6e>
 800b610:	e01d      	b.n	800b64e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b618:	4619      	mov	r1, r3
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 fa18 	bl	800ba50 <USBD_StdDevReq>
 800b620:	4603      	mov	r3, r0
 800b622:	73fb      	strb	r3, [r7, #15]
      break;
 800b624:	e020      	b.n	800b668 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b62c:	4619      	mov	r1, r3
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 fa7c 	bl	800bb2c <USBD_StdItfReq>
 800b634:	4603      	mov	r3, r0
 800b636:	73fb      	strb	r3, [r7, #15]
      break;
 800b638:	e016      	b.n	800b668 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b640:	4619      	mov	r1, r3
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 fab8 	bl	800bbb8 <USBD_StdEPReq>
 800b648:	4603      	mov	r3, r0
 800b64a:	73fb      	strb	r3, [r7, #15]
      break;
 800b64c:	e00c      	b.n	800b668 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b654:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b658:	b2db      	uxtb	r3, r3
 800b65a:	4619      	mov	r1, r3
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f004 fdad 	bl	80101bc <USBD_LL_StallEP>
 800b662:	4603      	mov	r3, r0
 800b664:	73fb      	strb	r3, [r7, #15]
      break;
 800b666:	bf00      	nop
  }

  return ret;
 800b668:	7bfb      	ldrb	r3, [r7, #15]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3710      	adds	r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}

0800b672 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b672:	b580      	push	{r7, lr}
 800b674:	b086      	sub	sp, #24
 800b676:	af00      	add	r7, sp, #0
 800b678:	60f8      	str	r0, [r7, #12]
 800b67a:	460b      	mov	r3, r1
 800b67c:	607a      	str	r2, [r7, #4]
 800b67e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b680:	7afb      	ldrb	r3, [r7, #11]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d137      	bne.n	800b6f6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b68c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b694:	2b03      	cmp	r3, #3
 800b696:	d14a      	bne.n	800b72e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	689a      	ldr	r2, [r3, #8]
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	68db      	ldr	r3, [r3, #12]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d913      	bls.n	800b6cc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	689a      	ldr	r2, [r3, #8]
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	1ad2      	subs	r2, r2, r3
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	68da      	ldr	r2, [r3, #12]
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	689b      	ldr	r3, [r3, #8]
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	bf28      	it	cs
 800b6be:	4613      	movcs	r3, r2
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	6879      	ldr	r1, [r7, #4]
 800b6c4:	68f8      	ldr	r0, [r7, #12]
 800b6c6:	f000 ffad 	bl	800c624 <USBD_CtlContinueRx>
 800b6ca:	e030      	b.n	800b72e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6d2:	691b      	ldr	r3, [r3, #16]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d00a      	beq.n	800b6ee <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b6de:	2b03      	cmp	r3, #3
 800b6e0:	d105      	bne.n	800b6ee <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6e8:	691b      	ldr	r3, [r3, #16]
 800b6ea:	68f8      	ldr	r0, [r7, #12]
 800b6ec:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800b6ee:	68f8      	ldr	r0, [r7, #12]
 800b6f0:	f000 ffa9 	bl	800c646 <USBD_CtlSendStatus>
 800b6f4:	e01b      	b.n	800b72e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6fc:	699b      	ldr	r3, [r3, #24]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d013      	beq.n	800b72a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b708:	2b03      	cmp	r3, #3
 800b70a:	d10e      	bne.n	800b72a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b712:	699b      	ldr	r3, [r3, #24]
 800b714:	7afa      	ldrb	r2, [r7, #11]
 800b716:	4611      	mov	r1, r2
 800b718:	68f8      	ldr	r0, [r7, #12]
 800b71a:	4798      	blx	r3
 800b71c:	4603      	mov	r3, r0
 800b71e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800b720:	7dfb      	ldrb	r3, [r7, #23]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d003      	beq.n	800b72e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800b726:	7dfb      	ldrb	r3, [r7, #23]
 800b728:	e002      	b.n	800b730 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b72a:	2303      	movs	r3, #3
 800b72c:	e000      	b.n	800b730 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800b72e:	2300      	movs	r3, #0
}
 800b730:	4618      	mov	r0, r3
 800b732:	3718      	adds	r7, #24
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b086      	sub	sp, #24
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	60f8      	str	r0, [r7, #12]
 800b740:	460b      	mov	r3, r1
 800b742:	607a      	str	r2, [r7, #4]
 800b744:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b746:	7afb      	ldrb	r3, [r7, #11]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d16a      	bne.n	800b822 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	3314      	adds	r3, #20
 800b750:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b758:	2b02      	cmp	r3, #2
 800b75a:	d155      	bne.n	800b808 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	689a      	ldr	r2, [r3, #8]
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	68db      	ldr	r3, [r3, #12]
 800b764:	429a      	cmp	r2, r3
 800b766:	d914      	bls.n	800b792 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b768:	693b      	ldr	r3, [r7, #16]
 800b76a:	689a      	ldr	r2, [r3, #8]
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	68db      	ldr	r3, [r3, #12]
 800b770:	1ad2      	subs	r2, r2, r3
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	689b      	ldr	r3, [r3, #8]
 800b77a:	461a      	mov	r2, r3
 800b77c:	6879      	ldr	r1, [r7, #4]
 800b77e:	68f8      	ldr	r0, [r7, #12]
 800b780:	f000 ff22 	bl	800c5c8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b784:	2300      	movs	r3, #0
 800b786:	2200      	movs	r2, #0
 800b788:	2100      	movs	r1, #0
 800b78a:	68f8      	ldr	r0, [r7, #12]
 800b78c:	f004 fdc0 	bl	8010310 <USBD_LL_PrepareReceive>
 800b790:	e03a      	b.n	800b808 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	68da      	ldr	r2, [r3, #12]
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	689b      	ldr	r3, [r3, #8]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d11c      	bne.n	800b7d8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	685a      	ldr	r2, [r3, #4]
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d316      	bcc.n	800b7d8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	685a      	ldr	r2, [r3, #4]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d20f      	bcs.n	800b7d8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	2100      	movs	r1, #0
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	f000 ff03 	bl	800c5c8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	2100      	movs	r1, #0
 800b7d0:	68f8      	ldr	r0, [r7, #12]
 800b7d2:	f004 fd9d 	bl	8010310 <USBD_LL_PrepareReceive>
 800b7d6:	e017      	b.n	800b808 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7de:	68db      	ldr	r3, [r3, #12]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d00a      	beq.n	800b7fa <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b7ea:	2b03      	cmp	r3, #3
 800b7ec:	d105      	bne.n	800b7fa <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7f4:	68db      	ldr	r3, [r3, #12]
 800b7f6:	68f8      	ldr	r0, [r7, #12]
 800b7f8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b7fa:	2180      	movs	r1, #128	; 0x80
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	f004 fcdd 	bl	80101bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b802:	68f8      	ldr	r0, [r7, #12]
 800b804:	f000 ff32 	bl	800c66c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d123      	bne.n	800b85a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b812:	68f8      	ldr	r0, [r7, #12]
 800b814:	f7ff fe9b 	bl	800b54e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	2200      	movs	r2, #0
 800b81c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b820:	e01b      	b.n	800b85a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b828:	695b      	ldr	r3, [r3, #20]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d013      	beq.n	800b856 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b834:	2b03      	cmp	r3, #3
 800b836:	d10e      	bne.n	800b856 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b83e:	695b      	ldr	r3, [r3, #20]
 800b840:	7afa      	ldrb	r2, [r7, #11]
 800b842:	4611      	mov	r1, r2
 800b844:	68f8      	ldr	r0, [r7, #12]
 800b846:	4798      	blx	r3
 800b848:	4603      	mov	r3, r0
 800b84a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800b84c:	7dfb      	ldrb	r3, [r7, #23]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d003      	beq.n	800b85a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800b852:	7dfb      	ldrb	r3, [r7, #23]
 800b854:	e002      	b.n	800b85c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b856:	2303      	movs	r3, #3
 800b858:	e000      	b.n	800b85c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800b85a:	2300      	movs	r3, #0
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3718      	adds	r7, #24
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b082      	sub	sp, #8
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2201      	movs	r2, #1
 800b870:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2200      	movs	r2, #0
 800b878:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2200      	movs	r2, #0
 800b880:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2200      	movs	r2, #0
 800b886:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b890:	2b00      	cmp	r3, #0
 800b892:	d009      	beq.n	800b8a8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	687a      	ldr	r2, [r7, #4]
 800b89e:	6852      	ldr	r2, [r2, #4]
 800b8a0:	b2d2      	uxtb	r2, r2
 800b8a2:	4611      	mov	r1, r2
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b8a8:	2340      	movs	r3, #64	; 0x40
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	2100      	movs	r1, #0
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f004 fc3f 	bl	8010132 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2240      	movs	r2, #64	; 0x40
 800b8c0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b8c4:	2340      	movs	r3, #64	; 0x40
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	2180      	movs	r1, #128	; 0x80
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f004 fc31 	bl	8010132 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2240      	movs	r2, #64	; 0x40
 800b8da:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b8dc:	2300      	movs	r3, #0
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3708      	adds	r7, #8
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}

0800b8e6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b8e6:	b480      	push	{r7}
 800b8e8:	b083      	sub	sp, #12
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	78fa      	ldrb	r2, [r7, #3]
 800b8f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b8f8:	2300      	movs	r3, #0
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	370c      	adds	r7, #12
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr

0800b906 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b906:	b480      	push	{r7}
 800b908:	b083      	sub	sp, #12
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2204      	movs	r2, #4
 800b91e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b922:	2300      	movs	r3, #0
}
 800b924:	4618      	mov	r0, r3
 800b926:	370c      	adds	r7, #12
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b930:	b480      	push	{r7}
 800b932:	b083      	sub	sp, #12
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b93e:	2b04      	cmp	r3, #4
 800b940:	d105      	bne.n	800b94e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b94e:	2300      	movs	r3, #0
}
 800b950:	4618      	mov	r0, r3
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b96a:	2b03      	cmp	r3, #3
 800b96c:	d10b      	bne.n	800b986 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b974:	69db      	ldr	r3, [r3, #28]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d005      	beq.n	800b986 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b980:	69db      	ldr	r3, [r3, #28]
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b986:	2300      	movs	r3, #0
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3708      	adds	r7, #8
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b990:	b480      	push	{r7}
 800b992:	b083      	sub	sp, #12
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	460b      	mov	r3, r1
 800b99a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b99c:	2300      	movs	r3, #0
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	370c      	adds	r7, #12
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr

0800b9aa <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b9aa:	b480      	push	{r7}
 800b9ac:	b083      	sub	sp, #12
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800b9b6:	2300      	movs	r3, #0
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	370c      	adds	r7, #12
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c2:	4770      	bx	lr

0800b9c4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b083      	sub	sp, #12
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b9cc:	2300      	movs	r3, #0
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	370c      	adds	r7, #12
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr

0800b9da <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b082      	sub	sp, #8
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d009      	beq.n	800ba08 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	687a      	ldr	r2, [r7, #4]
 800b9fe:	6852      	ldr	r2, [r2, #4]
 800ba00:	b2d2      	uxtb	r2, r2
 800ba02:	4611      	mov	r1, r2
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	4798      	blx	r3
  }

  return USBD_OK;
 800ba08:	2300      	movs	r3, #0
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3708      	adds	r7, #8
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}

0800ba12 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ba12:	b480      	push	{r7}
 800ba14:	b087      	sub	sp, #28
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	3301      	adds	r3, #1
 800ba28:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ba30:	8a3b      	ldrh	r3, [r7, #16]
 800ba32:	021b      	lsls	r3, r3, #8
 800ba34:	b21a      	sxth	r2, r3
 800ba36:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	b21b      	sxth	r3, r3
 800ba3e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ba40:	89fb      	ldrh	r3, [r7, #14]
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	371c      	adds	r7, #28
 800ba46:	46bd      	mov	sp, r7
 800ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4c:	4770      	bx	lr
	...

0800ba50 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b084      	sub	sp, #16
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ba66:	2b20      	cmp	r3, #32
 800ba68:	d004      	beq.n	800ba74 <USBD_StdDevReq+0x24>
 800ba6a:	2b40      	cmp	r3, #64	; 0x40
 800ba6c:	d002      	beq.n	800ba74 <USBD_StdDevReq+0x24>
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d00a      	beq.n	800ba88 <USBD_StdDevReq+0x38>
 800ba72:	e050      	b.n	800bb16 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	6839      	ldr	r1, [r7, #0]
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	4798      	blx	r3
 800ba82:	4603      	mov	r3, r0
 800ba84:	73fb      	strb	r3, [r7, #15]
    break;
 800ba86:	e04b      	b.n	800bb20 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	785b      	ldrb	r3, [r3, #1]
 800ba8c:	2b09      	cmp	r3, #9
 800ba8e:	d83c      	bhi.n	800bb0a <USBD_StdDevReq+0xba>
 800ba90:	a201      	add	r2, pc, #4	; (adr r2, 800ba98 <USBD_StdDevReq+0x48>)
 800ba92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba96:	bf00      	nop
 800ba98:	0800baed 	.word	0x0800baed
 800ba9c:	0800bb01 	.word	0x0800bb01
 800baa0:	0800bb0b 	.word	0x0800bb0b
 800baa4:	0800baf7 	.word	0x0800baf7
 800baa8:	0800bb0b 	.word	0x0800bb0b
 800baac:	0800bacb 	.word	0x0800bacb
 800bab0:	0800bac1 	.word	0x0800bac1
 800bab4:	0800bb0b 	.word	0x0800bb0b
 800bab8:	0800bae3 	.word	0x0800bae3
 800babc:	0800bad5 	.word	0x0800bad5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800bac0:	6839      	ldr	r1, [r7, #0]
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 f9ce 	bl	800be64 <USBD_GetDescriptor>
      break;
 800bac8:	e024      	b.n	800bb14 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800baca:	6839      	ldr	r1, [r7, #0]
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 fb33 	bl	800c138 <USBD_SetAddress>
      break;
 800bad2:	e01f      	b.n	800bb14 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800bad4:	6839      	ldr	r1, [r7, #0]
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f000 fb70 	bl	800c1bc <USBD_SetConfig>
 800badc:	4603      	mov	r3, r0
 800bade:	73fb      	strb	r3, [r7, #15]
      break;
 800bae0:	e018      	b.n	800bb14 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800bae2:	6839      	ldr	r1, [r7, #0]
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f000 fc0d 	bl	800c304 <USBD_GetConfig>
      break;
 800baea:	e013      	b.n	800bb14 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800baec:	6839      	ldr	r1, [r7, #0]
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 fc3c 	bl	800c36c <USBD_GetStatus>
      break;
 800baf4:	e00e      	b.n	800bb14 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800baf6:	6839      	ldr	r1, [r7, #0]
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 fc6a 	bl	800c3d2 <USBD_SetFeature>
      break;
 800bafe:	e009      	b.n	800bb14 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800bb00:	6839      	ldr	r1, [r7, #0]
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 fc79 	bl	800c3fa <USBD_ClrFeature>
      break;
 800bb08:	e004      	b.n	800bb14 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800bb0a:	6839      	ldr	r1, [r7, #0]
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f000 fccf 	bl	800c4b0 <USBD_CtlError>
      break;
 800bb12:	bf00      	nop
    }
    break;
 800bb14:	e004      	b.n	800bb20 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800bb16:	6839      	ldr	r1, [r7, #0]
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 fcc9 	bl	800c4b0 <USBD_CtlError>
    break;
 800bb1e:	bf00      	nop
  }

  return ret;
 800bb20:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3710      	adds	r7, #16
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}
 800bb2a:	bf00      	nop

0800bb2c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb36:	2300      	movs	r3, #0
 800bb38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb42:	2b20      	cmp	r3, #32
 800bb44:	d003      	beq.n	800bb4e <USBD_StdItfReq+0x22>
 800bb46:	2b40      	cmp	r3, #64	; 0x40
 800bb48:	d001      	beq.n	800bb4e <USBD_StdItfReq+0x22>
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d12a      	bne.n	800bba4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb54:	3b01      	subs	r3, #1
 800bb56:	2b02      	cmp	r3, #2
 800bb58:	d81d      	bhi.n	800bb96 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	889b      	ldrh	r3, [r3, #4]
 800bb5e:	b2db      	uxtb	r3, r3
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d813      	bhi.n	800bb8c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb6a:	689b      	ldr	r3, [r3, #8]
 800bb6c:	6839      	ldr	r1, [r7, #0]
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	4798      	blx	r3
 800bb72:	4603      	mov	r3, r0
 800bb74:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	88db      	ldrh	r3, [r3, #6]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d110      	bne.n	800bba0 <USBD_StdItfReq+0x74>
 800bb7e:	7bfb      	ldrb	r3, [r7, #15]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d10d      	bne.n	800bba0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 fd5e 	bl	800c646 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800bb8a:	e009      	b.n	800bba0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800bb8c:	6839      	ldr	r1, [r7, #0]
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 fc8e 	bl	800c4b0 <USBD_CtlError>
      break;
 800bb94:	e004      	b.n	800bba0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800bb96:	6839      	ldr	r1, [r7, #0]
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f000 fc89 	bl	800c4b0 <USBD_CtlError>
      break;
 800bb9e:	e000      	b.n	800bba2 <USBD_StdItfReq+0x76>
      break;
 800bba0:	bf00      	nop
    }
    break;
 800bba2:	e004      	b.n	800bbae <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800bba4:	6839      	ldr	r1, [r7, #0]
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f000 fc82 	bl	800c4b0 <USBD_CtlError>
    break;
 800bbac:	bf00      	nop
  }

  return ret;
 800bbae:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3710      	adds	r7, #16
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b084      	sub	sp, #16
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	889b      	ldrh	r3, [r3, #4]
 800bbca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bbd4:	2b20      	cmp	r3, #32
 800bbd6:	d004      	beq.n	800bbe2 <USBD_StdEPReq+0x2a>
 800bbd8:	2b40      	cmp	r3, #64	; 0x40
 800bbda:	d002      	beq.n	800bbe2 <USBD_StdEPReq+0x2a>
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d00a      	beq.n	800bbf6 <USBD_StdEPReq+0x3e>
 800bbe0:	e135      	b.n	800be4e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbe8:	689b      	ldr	r3, [r3, #8]
 800bbea:	6839      	ldr	r1, [r7, #0]
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	4798      	blx	r3
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	73fb      	strb	r3, [r7, #15]
    break;
 800bbf4:	e130      	b.n	800be58 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	785b      	ldrb	r3, [r3, #1]
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	d03e      	beq.n	800bc7c <USBD_StdEPReq+0xc4>
 800bbfe:	2b03      	cmp	r3, #3
 800bc00:	d002      	beq.n	800bc08 <USBD_StdEPReq+0x50>
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d077      	beq.n	800bcf6 <USBD_StdEPReq+0x13e>
 800bc06:	e11c      	b.n	800be42 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc0e:	2b02      	cmp	r3, #2
 800bc10:	d002      	beq.n	800bc18 <USBD_StdEPReq+0x60>
 800bc12:	2b03      	cmp	r3, #3
 800bc14:	d015      	beq.n	800bc42 <USBD_StdEPReq+0x8a>
 800bc16:	e02b      	b.n	800bc70 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc18:	7bbb      	ldrb	r3, [r7, #14]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d00c      	beq.n	800bc38 <USBD_StdEPReq+0x80>
 800bc1e:	7bbb      	ldrb	r3, [r7, #14]
 800bc20:	2b80      	cmp	r3, #128	; 0x80
 800bc22:	d009      	beq.n	800bc38 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc24:	7bbb      	ldrb	r3, [r7, #14]
 800bc26:	4619      	mov	r1, r3
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f004 fac7 	bl	80101bc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc2e:	2180      	movs	r1, #128	; 0x80
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f004 fac3 	bl	80101bc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800bc36:	e020      	b.n	800bc7a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800bc38:	6839      	ldr	r1, [r7, #0]
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 fc38 	bl	800c4b0 <USBD_CtlError>
        break;
 800bc40:	e01b      	b.n	800bc7a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	885b      	ldrh	r3, [r3, #2]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d10e      	bne.n	800bc68 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bc4a:	7bbb      	ldrb	r3, [r7, #14]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d00b      	beq.n	800bc68 <USBD_StdEPReq+0xb0>
 800bc50:	7bbb      	ldrb	r3, [r7, #14]
 800bc52:	2b80      	cmp	r3, #128	; 0x80
 800bc54:	d008      	beq.n	800bc68 <USBD_StdEPReq+0xb0>
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	88db      	ldrh	r3, [r3, #6]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d104      	bne.n	800bc68 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc5e:	7bbb      	ldrb	r3, [r7, #14]
 800bc60:	4619      	mov	r1, r3
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f004 faaa 	bl	80101bc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 fcec 	bl	800c646 <USBD_CtlSendStatus>

        break;
 800bc6e:	e004      	b.n	800bc7a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800bc70:	6839      	ldr	r1, [r7, #0]
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 fc1c 	bl	800c4b0 <USBD_CtlError>
        break;
 800bc78:	bf00      	nop
      }
      break;
 800bc7a:	e0e7      	b.n	800be4c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc82:	2b02      	cmp	r3, #2
 800bc84:	d002      	beq.n	800bc8c <USBD_StdEPReq+0xd4>
 800bc86:	2b03      	cmp	r3, #3
 800bc88:	d015      	beq.n	800bcb6 <USBD_StdEPReq+0xfe>
 800bc8a:	e02d      	b.n	800bce8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc8c:	7bbb      	ldrb	r3, [r7, #14]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00c      	beq.n	800bcac <USBD_StdEPReq+0xf4>
 800bc92:	7bbb      	ldrb	r3, [r7, #14]
 800bc94:	2b80      	cmp	r3, #128	; 0x80
 800bc96:	d009      	beq.n	800bcac <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc98:	7bbb      	ldrb	r3, [r7, #14]
 800bc9a:	4619      	mov	r1, r3
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f004 fa8d 	bl	80101bc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bca2:	2180      	movs	r1, #128	; 0x80
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f004 fa89 	bl	80101bc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800bcaa:	e023      	b.n	800bcf4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800bcac:	6839      	ldr	r1, [r7, #0]
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f000 fbfe 	bl	800c4b0 <USBD_CtlError>
        break;
 800bcb4:	e01e      	b.n	800bcf4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	885b      	ldrh	r3, [r3, #2]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d119      	bne.n	800bcf2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800bcbe:	7bbb      	ldrb	r3, [r7, #14]
 800bcc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d004      	beq.n	800bcd2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bcc8:	7bbb      	ldrb	r3, [r7, #14]
 800bcca:	4619      	mov	r1, r3
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f004 fa94 	bl	80101fa <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 fcb7 	bl	800c646 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcde:	689b      	ldr	r3, [r3, #8]
 800bce0:	6839      	ldr	r1, [r7, #0]
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	4798      	blx	r3
        }
        break;
 800bce6:	e004      	b.n	800bcf2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800bce8:	6839      	ldr	r1, [r7, #0]
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 fbe0 	bl	800c4b0 <USBD_CtlError>
        break;
 800bcf0:	e000      	b.n	800bcf4 <USBD_StdEPReq+0x13c>
        break;
 800bcf2:	bf00      	nop
      }
      break;
 800bcf4:	e0aa      	b.n	800be4c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcfc:	2b02      	cmp	r3, #2
 800bcfe:	d002      	beq.n	800bd06 <USBD_StdEPReq+0x14e>
 800bd00:	2b03      	cmp	r3, #3
 800bd02:	d032      	beq.n	800bd6a <USBD_StdEPReq+0x1b2>
 800bd04:	e097      	b.n	800be36 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd06:	7bbb      	ldrb	r3, [r7, #14]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d007      	beq.n	800bd1c <USBD_StdEPReq+0x164>
 800bd0c:	7bbb      	ldrb	r3, [r7, #14]
 800bd0e:	2b80      	cmp	r3, #128	; 0x80
 800bd10:	d004      	beq.n	800bd1c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800bd12:	6839      	ldr	r1, [r7, #0]
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f000 fbcb 	bl	800c4b0 <USBD_CtlError>
          break;
 800bd1a:	e091      	b.n	800be40 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	da0b      	bge.n	800bd3c <USBD_StdEPReq+0x184>
 800bd24:	7bbb      	ldrb	r3, [r7, #14]
 800bd26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	4413      	add	r3, r2
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	3310      	adds	r3, #16
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	4413      	add	r3, r2
 800bd38:	3304      	adds	r3, #4
 800bd3a:	e00b      	b.n	800bd54 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800bd3c:	7bbb      	ldrb	r3, [r7, #14]
 800bd3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd42:	4613      	mov	r3, r2
 800bd44:	009b      	lsls	r3, r3, #2
 800bd46:	4413      	add	r3, r2
 800bd48:	009b      	lsls	r3, r3, #2
 800bd4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	4413      	add	r3, r2
 800bd52:	3304      	adds	r3, #4
 800bd54:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	2202      	movs	r2, #2
 800bd60:	4619      	mov	r1, r3
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f000 fc15 	bl	800c592 <USBD_CtlSendData>
        break;
 800bd68:	e06a      	b.n	800be40 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800bd6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	da11      	bge.n	800bd96 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bd72:	7bbb      	ldrb	r3, [r7, #14]
 800bd74:	f003 020f 	and.w	r2, r3, #15
 800bd78:	6879      	ldr	r1, [r7, #4]
 800bd7a:	4613      	mov	r3, r2
 800bd7c:	009b      	lsls	r3, r3, #2
 800bd7e:	4413      	add	r3, r2
 800bd80:	009b      	lsls	r3, r3, #2
 800bd82:	440b      	add	r3, r1
 800bd84:	3324      	adds	r3, #36	; 0x24
 800bd86:	881b      	ldrh	r3, [r3, #0]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d117      	bne.n	800bdbc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800bd8c:	6839      	ldr	r1, [r7, #0]
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 fb8e 	bl	800c4b0 <USBD_CtlError>
            break;
 800bd94:	e054      	b.n	800be40 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bd96:	7bbb      	ldrb	r3, [r7, #14]
 800bd98:	f003 020f 	and.w	r2, r3, #15
 800bd9c:	6879      	ldr	r1, [r7, #4]
 800bd9e:	4613      	mov	r3, r2
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	4413      	add	r3, r2
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	440b      	add	r3, r1
 800bda8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bdac:	881b      	ldrh	r3, [r3, #0]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d104      	bne.n	800bdbc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800bdb2:	6839      	ldr	r1, [r7, #0]
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f000 fb7b 	bl	800c4b0 <USBD_CtlError>
            break;
 800bdba:	e041      	b.n	800be40 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	da0b      	bge.n	800bddc <USBD_StdEPReq+0x224>
 800bdc4:	7bbb      	ldrb	r3, [r7, #14]
 800bdc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bdca:	4613      	mov	r3, r2
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	4413      	add	r3, r2
 800bdd0:	009b      	lsls	r3, r3, #2
 800bdd2:	3310      	adds	r3, #16
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	4413      	add	r3, r2
 800bdd8:	3304      	adds	r3, #4
 800bdda:	e00b      	b.n	800bdf4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800bddc:	7bbb      	ldrb	r3, [r7, #14]
 800bdde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bde2:	4613      	mov	r3, r2
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	4413      	add	r3, r2
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	4413      	add	r3, r2
 800bdf2:	3304      	adds	r3, #4
 800bdf4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bdf6:	7bbb      	ldrb	r3, [r7, #14]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d002      	beq.n	800be02 <USBD_StdEPReq+0x24a>
 800bdfc:	7bbb      	ldrb	r3, [r7, #14]
 800bdfe:	2b80      	cmp	r3, #128	; 0x80
 800be00:	d103      	bne.n	800be0a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	2200      	movs	r2, #0
 800be06:	601a      	str	r2, [r3, #0]
 800be08:	e00e      	b.n	800be28 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800be0a:	7bbb      	ldrb	r3, [r7, #14]
 800be0c:	4619      	mov	r1, r3
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f004 fa12 	bl	8010238 <USBD_LL_IsStallEP>
 800be14:	4603      	mov	r3, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	d003      	beq.n	800be22 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	2201      	movs	r2, #1
 800be1e:	601a      	str	r2, [r3, #0]
 800be20:	e002      	b.n	800be28 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	2200      	movs	r2, #0
 800be26:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	2202      	movs	r2, #2
 800be2c:	4619      	mov	r1, r3
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f000 fbaf 	bl	800c592 <USBD_CtlSendData>
          break;
 800be34:	e004      	b.n	800be40 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800be36:	6839      	ldr	r1, [r7, #0]
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f000 fb39 	bl	800c4b0 <USBD_CtlError>
        break;
 800be3e:	bf00      	nop
      }
      break;
 800be40:	e004      	b.n	800be4c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800be42:	6839      	ldr	r1, [r7, #0]
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 fb33 	bl	800c4b0 <USBD_CtlError>
      break;
 800be4a:	bf00      	nop
    }
    break;
 800be4c:	e004      	b.n	800be58 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800be4e:	6839      	ldr	r1, [r7, #0]
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 fb2d 	bl	800c4b0 <USBD_CtlError>
    break;
 800be56:	bf00      	nop
  }

  return ret;
 800be58:	7bfb      	ldrb	r3, [r7, #15]
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3710      	adds	r7, #16
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
	...

0800be64 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b084      	sub	sp, #16
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800be6e:	2300      	movs	r3, #0
 800be70:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800be72:	2300      	movs	r3, #0
 800be74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800be76:	2300      	movs	r3, #0
 800be78:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	885b      	ldrh	r3, [r3, #2]
 800be7e:	0a1b      	lsrs	r3, r3, #8
 800be80:	b29b      	uxth	r3, r3
 800be82:	3b01      	subs	r3, #1
 800be84:	2b06      	cmp	r3, #6
 800be86:	f200 8128 	bhi.w	800c0da <USBD_GetDescriptor+0x276>
 800be8a:	a201      	add	r2, pc, #4	; (adr r2, 800be90 <USBD_GetDescriptor+0x2c>)
 800be8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be90:	0800bead 	.word	0x0800bead
 800be94:	0800bec5 	.word	0x0800bec5
 800be98:	0800bf05 	.word	0x0800bf05
 800be9c:	0800c0db 	.word	0x0800c0db
 800bea0:	0800c0db 	.word	0x0800c0db
 800bea4:	0800c07b 	.word	0x0800c07b
 800bea8:	0800c0a7 	.word	0x0800c0a7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	7c12      	ldrb	r2, [r2, #16]
 800beb8:	f107 0108 	add.w	r1, r7, #8
 800bebc:	4610      	mov	r0, r2
 800bebe:	4798      	blx	r3
 800bec0:	60f8      	str	r0, [r7, #12]
    break;
 800bec2:	e112      	b.n	800c0ea <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	7c1b      	ldrb	r3, [r3, #16]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d10d      	bne.n	800bee8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bed4:	f107 0208 	add.w	r2, r7, #8
 800bed8:	4610      	mov	r0, r2
 800beda:	4798      	blx	r3
 800bedc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	3301      	adds	r3, #1
 800bee2:	2202      	movs	r2, #2
 800bee4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800bee6:	e100      	b.n	800c0ea <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bef0:	f107 0208 	add.w	r2, r7, #8
 800bef4:	4610      	mov	r0, r2
 800bef6:	4798      	blx	r3
 800bef8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	3301      	adds	r3, #1
 800befe:	2202      	movs	r2, #2
 800bf00:	701a      	strb	r2, [r3, #0]
    break;
 800bf02:	e0f2      	b.n	800c0ea <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	885b      	ldrh	r3, [r3, #2]
 800bf08:	b2db      	uxtb	r3, r3
 800bf0a:	2b05      	cmp	r3, #5
 800bf0c:	f200 80ac 	bhi.w	800c068 <USBD_GetDescriptor+0x204>
 800bf10:	a201      	add	r2, pc, #4	; (adr r2, 800bf18 <USBD_GetDescriptor+0xb4>)
 800bf12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf16:	bf00      	nop
 800bf18:	0800bf31 	.word	0x0800bf31
 800bf1c:	0800bf65 	.word	0x0800bf65
 800bf20:	0800bf99 	.word	0x0800bf99
 800bf24:	0800bfcd 	.word	0x0800bfcd
 800bf28:	0800c001 	.word	0x0800c001
 800bf2c:	0800c035 	.word	0x0800c035
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d00b      	beq.n	800bf54 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	7c12      	ldrb	r2, [r2, #16]
 800bf48:	f107 0108 	add.w	r1, r7, #8
 800bf4c:	4610      	mov	r0, r2
 800bf4e:	4798      	blx	r3
 800bf50:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf52:	e091      	b.n	800c078 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800bf54:	6839      	ldr	r1, [r7, #0]
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 faaa 	bl	800c4b0 <USBD_CtlError>
        err++;
 800bf5c:	7afb      	ldrb	r3, [r7, #11]
 800bf5e:	3301      	adds	r3, #1
 800bf60:	72fb      	strb	r3, [r7, #11]
      break;
 800bf62:	e089      	b.n	800c078 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf6a:	689b      	ldr	r3, [r3, #8]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d00b      	beq.n	800bf88 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf76:	689b      	ldr	r3, [r3, #8]
 800bf78:	687a      	ldr	r2, [r7, #4]
 800bf7a:	7c12      	ldrb	r2, [r2, #16]
 800bf7c:	f107 0108 	add.w	r1, r7, #8
 800bf80:	4610      	mov	r0, r2
 800bf82:	4798      	blx	r3
 800bf84:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf86:	e077      	b.n	800c078 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800bf88:	6839      	ldr	r1, [r7, #0]
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 fa90 	bl	800c4b0 <USBD_CtlError>
        err++;
 800bf90:	7afb      	ldrb	r3, [r7, #11]
 800bf92:	3301      	adds	r3, #1
 800bf94:	72fb      	strb	r3, [r7, #11]
      break;
 800bf96:	e06f      	b.n	800c078 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d00b      	beq.n	800bfbc <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfaa:	68db      	ldr	r3, [r3, #12]
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	7c12      	ldrb	r2, [r2, #16]
 800bfb0:	f107 0108 	add.w	r1, r7, #8
 800bfb4:	4610      	mov	r0, r2
 800bfb6:	4798      	blx	r3
 800bfb8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bfba:	e05d      	b.n	800c078 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800bfbc:	6839      	ldr	r1, [r7, #0]
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 fa76 	bl	800c4b0 <USBD_CtlError>
        err++;
 800bfc4:	7afb      	ldrb	r3, [r7, #11]
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	72fb      	strb	r3, [r7, #11]
      break;
 800bfca:	e055      	b.n	800c078 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfd2:	691b      	ldr	r3, [r3, #16]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d00b      	beq.n	800bff0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfde:	691b      	ldr	r3, [r3, #16]
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	7c12      	ldrb	r2, [r2, #16]
 800bfe4:	f107 0108 	add.w	r1, r7, #8
 800bfe8:	4610      	mov	r0, r2
 800bfea:	4798      	blx	r3
 800bfec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bfee:	e043      	b.n	800c078 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800bff0:	6839      	ldr	r1, [r7, #0]
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 fa5c 	bl	800c4b0 <USBD_CtlError>
        err++;
 800bff8:	7afb      	ldrb	r3, [r7, #11]
 800bffa:	3301      	adds	r3, #1
 800bffc:	72fb      	strb	r3, [r7, #11]
      break;
 800bffe:	e03b      	b.n	800c078 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c006:	695b      	ldr	r3, [r3, #20]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d00b      	beq.n	800c024 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c012:	695b      	ldr	r3, [r3, #20]
 800c014:	687a      	ldr	r2, [r7, #4]
 800c016:	7c12      	ldrb	r2, [r2, #16]
 800c018:	f107 0108 	add.w	r1, r7, #8
 800c01c:	4610      	mov	r0, r2
 800c01e:	4798      	blx	r3
 800c020:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c022:	e029      	b.n	800c078 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c024:	6839      	ldr	r1, [r7, #0]
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 fa42 	bl	800c4b0 <USBD_CtlError>
        err++;
 800c02c:	7afb      	ldrb	r3, [r7, #11]
 800c02e:	3301      	adds	r3, #1
 800c030:	72fb      	strb	r3, [r7, #11]
      break;
 800c032:	e021      	b.n	800c078 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c03a:	699b      	ldr	r3, [r3, #24]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d00b      	beq.n	800c058 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c046:	699b      	ldr	r3, [r3, #24]
 800c048:	687a      	ldr	r2, [r7, #4]
 800c04a:	7c12      	ldrb	r2, [r2, #16]
 800c04c:	f107 0108 	add.w	r1, r7, #8
 800c050:	4610      	mov	r0, r2
 800c052:	4798      	blx	r3
 800c054:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c056:	e00f      	b.n	800c078 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c058:	6839      	ldr	r1, [r7, #0]
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f000 fa28 	bl	800c4b0 <USBD_CtlError>
        err++;
 800c060:	7afb      	ldrb	r3, [r7, #11]
 800c062:	3301      	adds	r3, #1
 800c064:	72fb      	strb	r3, [r7, #11]
      break;
 800c066:	e007      	b.n	800c078 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800c068:	6839      	ldr	r1, [r7, #0]
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 fa20 	bl	800c4b0 <USBD_CtlError>
      err++;
 800c070:	7afb      	ldrb	r3, [r7, #11]
 800c072:	3301      	adds	r3, #1
 800c074:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800c076:	bf00      	nop
    }
    break;
 800c078:	e037      	b.n	800c0ea <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	7c1b      	ldrb	r3, [r3, #16]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d109      	bne.n	800c096 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c08a:	f107 0208 	add.w	r2, r7, #8
 800c08e:	4610      	mov	r0, r2
 800c090:	4798      	blx	r3
 800c092:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c094:	e029      	b.n	800c0ea <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800c096:	6839      	ldr	r1, [r7, #0]
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 fa09 	bl	800c4b0 <USBD_CtlError>
      err++;
 800c09e:	7afb      	ldrb	r3, [r7, #11]
 800c0a0:	3301      	adds	r3, #1
 800c0a2:	72fb      	strb	r3, [r7, #11]
    break;
 800c0a4:	e021      	b.n	800c0ea <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	7c1b      	ldrb	r3, [r3, #16]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d10d      	bne.n	800c0ca <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0b6:	f107 0208 	add.w	r2, r7, #8
 800c0ba:	4610      	mov	r0, r2
 800c0bc:	4798      	blx	r3
 800c0be:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	2207      	movs	r2, #7
 800c0c6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c0c8:	e00f      	b.n	800c0ea <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800c0ca:	6839      	ldr	r1, [r7, #0]
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 f9ef 	bl	800c4b0 <USBD_CtlError>
      err++;
 800c0d2:	7afb      	ldrb	r3, [r7, #11]
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	72fb      	strb	r3, [r7, #11]
    break;
 800c0d8:	e007      	b.n	800c0ea <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800c0da:	6839      	ldr	r1, [r7, #0]
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 f9e7 	bl	800c4b0 <USBD_CtlError>
    err++;
 800c0e2:	7afb      	ldrb	r3, [r7, #11]
 800c0e4:	3301      	adds	r3, #1
 800c0e6:	72fb      	strb	r3, [r7, #11]
    break;
 800c0e8:	bf00      	nop
  }

  if (err != 0U)
 800c0ea:	7afb      	ldrb	r3, [r7, #11]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d11e      	bne.n	800c12e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	88db      	ldrh	r3, [r3, #6]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d016      	beq.n	800c126 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800c0f8:	893b      	ldrh	r3, [r7, #8]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d00e      	beq.n	800c11c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	88da      	ldrh	r2, [r3, #6]
 800c102:	893b      	ldrh	r3, [r7, #8]
 800c104:	4293      	cmp	r3, r2
 800c106:	bf28      	it	cs
 800c108:	4613      	movcs	r3, r2
 800c10a:	b29b      	uxth	r3, r3
 800c10c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800c10e:	893b      	ldrh	r3, [r7, #8]
 800c110:	461a      	mov	r2, r3
 800c112:	68f9      	ldr	r1, [r7, #12]
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 fa3c 	bl	800c592 <USBD_CtlSendData>
 800c11a:	e009      	b.n	800c130 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800c11c:	6839      	ldr	r1, [r7, #0]
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 f9c6 	bl	800c4b0 <USBD_CtlError>
 800c124:	e004      	b.n	800c130 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 fa8d 	bl	800c646 <USBD_CtlSendStatus>
 800c12c:	e000      	b.n	800c130 <USBD_GetDescriptor+0x2cc>
    return;
 800c12e:	bf00      	nop
    }
  }
}
 800c130:	3710      	adds	r7, #16
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop

0800c138 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b084      	sub	sp, #16
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	889b      	ldrh	r3, [r3, #4]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d130      	bne.n	800c1ac <USBD_SetAddress+0x74>
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	88db      	ldrh	r3, [r3, #6]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d12c      	bne.n	800c1ac <USBD_SetAddress+0x74>
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	885b      	ldrh	r3, [r3, #2]
 800c156:	2b7f      	cmp	r3, #127	; 0x7f
 800c158:	d828      	bhi.n	800c1ac <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	885b      	ldrh	r3, [r3, #2]
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c164:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c16c:	2b03      	cmp	r3, #3
 800c16e:	d104      	bne.n	800c17a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c170:	6839      	ldr	r1, [r7, #0]
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 f99c 	bl	800c4b0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c178:	e01c      	b.n	800c1b4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	7bfa      	ldrb	r2, [r7, #15]
 800c17e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c182:	7bfb      	ldrb	r3, [r7, #15]
 800c184:	4619      	mov	r1, r3
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f004 f882 	bl	8010290 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f000 fa5a 	bl	800c646 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c192:	7bfb      	ldrb	r3, [r7, #15]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d004      	beq.n	800c1a2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2202      	movs	r2, #2
 800c19c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1a0:	e008      	b.n	800c1b4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1aa:	e003      	b.n	800c1b4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c1ac:	6839      	ldr	r1, [r7, #0]
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f000 f97e 	bl	800c4b0 <USBD_CtlError>
  }
}
 800c1b4:	bf00      	nop
 800c1b6:	3710      	adds	r7, #16
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	885b      	ldrh	r3, [r3, #2]
 800c1ce:	b2da      	uxtb	r2, r3
 800c1d0:	4b4b      	ldr	r3, [pc, #300]	; (800c300 <USBD_SetConfig+0x144>)
 800c1d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c1d4:	4b4a      	ldr	r3, [pc, #296]	; (800c300 <USBD_SetConfig+0x144>)
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d905      	bls.n	800c1e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c1dc:	6839      	ldr	r1, [r7, #0]
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f000 f966 	bl	800c4b0 <USBD_CtlError>
    return USBD_FAIL;
 800c1e4:	2303      	movs	r3, #3
 800c1e6:	e087      	b.n	800c2f8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1ee:	2b02      	cmp	r3, #2
 800c1f0:	d002      	beq.n	800c1f8 <USBD_SetConfig+0x3c>
 800c1f2:	2b03      	cmp	r3, #3
 800c1f4:	d025      	beq.n	800c242 <USBD_SetConfig+0x86>
 800c1f6:	e071      	b.n	800c2dc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800c1f8:	4b41      	ldr	r3, [pc, #260]	; (800c300 <USBD_SetConfig+0x144>)
 800c1fa:	781b      	ldrb	r3, [r3, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d01c      	beq.n	800c23a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800c200:	4b3f      	ldr	r3, [pc, #252]	; (800c300 <USBD_SetConfig+0x144>)
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	461a      	mov	r2, r3
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c20a:	4b3d      	ldr	r3, [pc, #244]	; (800c300 <USBD_SetConfig+0x144>)
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	4619      	mov	r1, r3
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f7ff f9a7 	bl	800b564 <USBD_SetClassConfig>
 800c216:	4603      	mov	r3, r0
 800c218:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800c21a:	7bfb      	ldrb	r3, [r7, #15]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d004      	beq.n	800c22a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800c220:	6839      	ldr	r1, [r7, #0]
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f000 f944 	bl	800c4b0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c228:	e065      	b.n	800c2f6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f000 fa0b 	bl	800c646 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2203      	movs	r2, #3
 800c234:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c238:	e05d      	b.n	800c2f6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 fa03 	bl	800c646 <USBD_CtlSendStatus>
    break;
 800c240:	e059      	b.n	800c2f6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800c242:	4b2f      	ldr	r3, [pc, #188]	; (800c300 <USBD_SetConfig+0x144>)
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d112      	bne.n	800c270 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2202      	movs	r2, #2
 800c24e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800c252:	4b2b      	ldr	r3, [pc, #172]	; (800c300 <USBD_SetConfig+0x144>)
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	461a      	mov	r2, r3
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c25c:	4b28      	ldr	r3, [pc, #160]	; (800c300 <USBD_SetConfig+0x144>)
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	4619      	mov	r1, r3
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f7ff f99a 	bl	800b59c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 f9ec 	bl	800c646 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c26e:	e042      	b.n	800c2f6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800c270:	4b23      	ldr	r3, [pc, #140]	; (800c300 <USBD_SetConfig+0x144>)
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	461a      	mov	r2, r3
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	685b      	ldr	r3, [r3, #4]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d02a      	beq.n	800c2d4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	b2db      	uxtb	r3, r3
 800c284:	4619      	mov	r1, r3
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f7ff f988 	bl	800b59c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800c28c:	4b1c      	ldr	r3, [pc, #112]	; (800c300 <USBD_SetConfig+0x144>)
 800c28e:	781b      	ldrb	r3, [r3, #0]
 800c290:	461a      	mov	r2, r3
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c296:	4b1a      	ldr	r3, [pc, #104]	; (800c300 <USBD_SetConfig+0x144>)
 800c298:	781b      	ldrb	r3, [r3, #0]
 800c29a:	4619      	mov	r1, r3
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f7ff f961 	bl	800b564 <USBD_SetClassConfig>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800c2a6:	7bfb      	ldrb	r3, [r7, #15]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d00f      	beq.n	800c2cc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800c2ac:	6839      	ldr	r1, [r7, #0]
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f000 f8fe 	bl	800c4b0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	b2db      	uxtb	r3, r3
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f7ff f96d 	bl	800b59c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2202      	movs	r2, #2
 800c2c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c2ca:	e014      	b.n	800c2f6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f000 f9ba 	bl	800c646 <USBD_CtlSendStatus>
    break;
 800c2d2:	e010      	b.n	800c2f6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f000 f9b6 	bl	800c646 <USBD_CtlSendStatus>
    break;
 800c2da:	e00c      	b.n	800c2f6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800c2dc:	6839      	ldr	r1, [r7, #0]
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f000 f8e6 	bl	800c4b0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c2e4:	4b06      	ldr	r3, [pc, #24]	; (800c300 <USBD_SetConfig+0x144>)
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f7ff f956 	bl	800b59c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800c2f0:	2303      	movs	r3, #3
 800c2f2:	73fb      	strb	r3, [r7, #15]
    break;
 800c2f4:	bf00      	nop
  }

  return ret;
 800c2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3710      	adds	r7, #16
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}
 800c300:	20000620 	.word	0x20000620

0800c304 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b082      	sub	sp, #8
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	88db      	ldrh	r3, [r3, #6]
 800c312:	2b01      	cmp	r3, #1
 800c314:	d004      	beq.n	800c320 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c316:	6839      	ldr	r1, [r7, #0]
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 f8c9 	bl	800c4b0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800c31e:	e021      	b.n	800c364 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c326:	2b01      	cmp	r3, #1
 800c328:	db17      	blt.n	800c35a <USBD_GetConfig+0x56>
 800c32a:	2b02      	cmp	r3, #2
 800c32c:	dd02      	ble.n	800c334 <USBD_GetConfig+0x30>
 800c32e:	2b03      	cmp	r3, #3
 800c330:	d00b      	beq.n	800c34a <USBD_GetConfig+0x46>
 800c332:	e012      	b.n	800c35a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2200      	movs	r2, #0
 800c338:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	3308      	adds	r3, #8
 800c33e:	2201      	movs	r2, #1
 800c340:	4619      	mov	r1, r3
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 f925 	bl	800c592 <USBD_CtlSendData>
      break;
 800c348:	e00c      	b.n	800c364 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	3304      	adds	r3, #4
 800c34e:	2201      	movs	r2, #1
 800c350:	4619      	mov	r1, r3
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	f000 f91d 	bl	800c592 <USBD_CtlSendData>
      break;
 800c358:	e004      	b.n	800c364 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800c35a:	6839      	ldr	r1, [r7, #0]
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f000 f8a7 	bl	800c4b0 <USBD_CtlError>
      break;
 800c362:	bf00      	nop
}
 800c364:	bf00      	nop
 800c366:	3708      	adds	r7, #8
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c37c:	3b01      	subs	r3, #1
 800c37e:	2b02      	cmp	r3, #2
 800c380:	d81e      	bhi.n	800c3c0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	88db      	ldrh	r3, [r3, #6]
 800c386:	2b02      	cmp	r3, #2
 800c388:	d004      	beq.n	800c394 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800c38a:	6839      	ldr	r1, [r7, #0]
 800c38c:	6878      	ldr	r0, [r7, #4]
 800c38e:	f000 f88f 	bl	800c4b0 <USBD_CtlError>
      break;
 800c392:	e01a      	b.n	800c3ca <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2201      	movs	r2, #1
 800c398:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d005      	beq.n	800c3b0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	68db      	ldr	r3, [r3, #12]
 800c3a8:	f043 0202 	orr.w	r2, r3, #2
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	330c      	adds	r3, #12
 800c3b4:	2202      	movs	r2, #2
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f000 f8ea 	bl	800c592 <USBD_CtlSendData>
    break;
 800c3be:	e004      	b.n	800c3ca <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800c3c0:	6839      	ldr	r1, [r7, #0]
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f000 f874 	bl	800c4b0 <USBD_CtlError>
    break;
 800c3c8:	bf00      	nop
  }
}
 800c3ca:	bf00      	nop
 800c3cc:	3708      	adds	r7, #8
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}

0800c3d2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3d2:	b580      	push	{r7, lr}
 800c3d4:	b082      	sub	sp, #8
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
 800c3da:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	885b      	ldrh	r3, [r3, #2]
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d106      	bne.n	800c3f2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 f92a 	bl	800c646 <USBD_CtlSendStatus>
  }
}
 800c3f2:	bf00      	nop
 800c3f4:	3708      	adds	r7, #8
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}

0800c3fa <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3fa:	b580      	push	{r7, lr}
 800c3fc:	b082      	sub	sp, #8
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	6078      	str	r0, [r7, #4]
 800c402:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c40a:	3b01      	subs	r3, #1
 800c40c:	2b02      	cmp	r3, #2
 800c40e:	d80b      	bhi.n	800c428 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	885b      	ldrh	r3, [r3, #2]
 800c414:	2b01      	cmp	r3, #1
 800c416:	d10c      	bne.n	800c432 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2200      	movs	r2, #0
 800c41c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f000 f910 	bl	800c646 <USBD_CtlSendStatus>
      }
      break;
 800c426:	e004      	b.n	800c432 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c428:	6839      	ldr	r1, [r7, #0]
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f000 f840 	bl	800c4b0 <USBD_CtlError>
      break;
 800c430:	e000      	b.n	800c434 <USBD_ClrFeature+0x3a>
      break;
 800c432:	bf00      	nop
  }
}
 800c434:	bf00      	nop
 800c436:	3708      	adds	r7, #8
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b084      	sub	sp, #16
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	781a      	ldrb	r2, [r3, #0]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	3301      	adds	r3, #1
 800c456:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	781a      	ldrb	r2, [r3, #0]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	3301      	adds	r3, #1
 800c464:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c466:	68f8      	ldr	r0, [r7, #12]
 800c468:	f7ff fad3 	bl	800ba12 <SWAPBYTE>
 800c46c:	4603      	mov	r3, r0
 800c46e:	461a      	mov	r2, r3
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	3301      	adds	r3, #1
 800c478:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	3301      	adds	r3, #1
 800c47e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c480:	68f8      	ldr	r0, [r7, #12]
 800c482:	f7ff fac6 	bl	800ba12 <SWAPBYTE>
 800c486:	4603      	mov	r3, r0
 800c488:	461a      	mov	r2, r3
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	3301      	adds	r3, #1
 800c492:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	3301      	adds	r3, #1
 800c498:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c49a:	68f8      	ldr	r0, [r7, #12]
 800c49c:	f7ff fab9 	bl	800ba12 <SWAPBYTE>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	461a      	mov	r2, r3
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	80da      	strh	r2, [r3, #6]
}
 800c4a8:	bf00      	nop
 800c4aa:	3710      	adds	r7, #16
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4ba:	2180      	movs	r1, #128	; 0x80
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f003 fe7d 	bl	80101bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c4c2:	2100      	movs	r1, #0
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f003 fe79 	bl	80101bc <USBD_LL_StallEP>
}
 800c4ca:	bf00      	nop
 800c4cc:	3708      	adds	r7, #8
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}

0800c4d2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c4d2:	b580      	push	{r7, lr}
 800c4d4:	b086      	sub	sp, #24
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	60f8      	str	r0, [r7, #12]
 800c4da:	60b9      	str	r1, [r7, #8]
 800c4dc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d036      	beq.n	800c556 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c4ec:	6938      	ldr	r0, [r7, #16]
 800c4ee:	f000 f836 	bl	800c55e <USBD_GetLen>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	005b      	lsls	r3, r3, #1
 800c4fa:	b29a      	uxth	r2, r3
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c500:	7dfb      	ldrb	r3, [r7, #23]
 800c502:	68ba      	ldr	r2, [r7, #8]
 800c504:	4413      	add	r3, r2
 800c506:	687a      	ldr	r2, [r7, #4]
 800c508:	7812      	ldrb	r2, [r2, #0]
 800c50a:	701a      	strb	r2, [r3, #0]
  idx++;
 800c50c:	7dfb      	ldrb	r3, [r7, #23]
 800c50e:	3301      	adds	r3, #1
 800c510:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c512:	7dfb      	ldrb	r3, [r7, #23]
 800c514:	68ba      	ldr	r2, [r7, #8]
 800c516:	4413      	add	r3, r2
 800c518:	2203      	movs	r2, #3
 800c51a:	701a      	strb	r2, [r3, #0]
  idx++;
 800c51c:	7dfb      	ldrb	r3, [r7, #23]
 800c51e:	3301      	adds	r3, #1
 800c520:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c522:	e013      	b.n	800c54c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c524:	7dfb      	ldrb	r3, [r7, #23]
 800c526:	68ba      	ldr	r2, [r7, #8]
 800c528:	4413      	add	r3, r2
 800c52a:	693a      	ldr	r2, [r7, #16]
 800c52c:	7812      	ldrb	r2, [r2, #0]
 800c52e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	3301      	adds	r3, #1
 800c534:	613b      	str	r3, [r7, #16]
    idx++;
 800c536:	7dfb      	ldrb	r3, [r7, #23]
 800c538:	3301      	adds	r3, #1
 800c53a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c53c:	7dfb      	ldrb	r3, [r7, #23]
 800c53e:	68ba      	ldr	r2, [r7, #8]
 800c540:	4413      	add	r3, r2
 800c542:	2200      	movs	r2, #0
 800c544:	701a      	strb	r2, [r3, #0]
    idx++;
 800c546:	7dfb      	ldrb	r3, [r7, #23]
 800c548:	3301      	adds	r3, #1
 800c54a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d1e7      	bne.n	800c524 <USBD_GetString+0x52>
 800c554:	e000      	b.n	800c558 <USBD_GetString+0x86>
    return;
 800c556:	bf00      	nop
  }
}
 800c558:	3718      	adds	r7, #24
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}

0800c55e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c55e:	b480      	push	{r7}
 800c560:	b085      	sub	sp, #20
 800c562:	af00      	add	r7, sp, #0
 800c564:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c566:	2300      	movs	r3, #0
 800c568:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c56e:	e005      	b.n	800c57c <USBD_GetLen+0x1e>
  {
    len++;
 800c570:	7bfb      	ldrb	r3, [r7, #15]
 800c572:	3301      	adds	r3, #1
 800c574:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	3301      	adds	r3, #1
 800c57a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d1f5      	bne.n	800c570 <USBD_GetLen+0x12>
  }

  return len;
 800c584:	7bfb      	ldrb	r3, [r7, #15]
}
 800c586:	4618      	mov	r0, r3
 800c588:	3714      	adds	r7, #20
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr

0800c592 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c592:	b580      	push	{r7, lr}
 800c594:	b084      	sub	sp, #16
 800c596:	af00      	add	r7, sp, #0
 800c598:	60f8      	str	r0, [r7, #12]
 800c59a:	60b9      	str	r1, [r7, #8]
 800c59c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2202      	movs	r2, #2
 800c5a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	68ba      	ldr	r2, [r7, #8]
 800c5b6:	2100      	movs	r1, #0
 800c5b8:	68f8      	ldr	r0, [r7, #12]
 800c5ba:	f003 fe88 	bl	80102ce <USBD_LL_Transmit>

  return USBD_OK;
 800c5be:	2300      	movs	r3, #0
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3710      	adds	r7, #16
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	60f8      	str	r0, [r7, #12]
 800c5d0:	60b9      	str	r1, [r7, #8]
 800c5d2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	68ba      	ldr	r2, [r7, #8]
 800c5d8:	2100      	movs	r1, #0
 800c5da:	68f8      	ldr	r0, [r7, #12]
 800c5dc:	f003 fe77 	bl	80102ce <USBD_LL_Transmit>

  return USBD_OK;
 800c5e0:	2300      	movs	r3, #0
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c5ea:	b580      	push	{r7, lr}
 800c5ec:	b084      	sub	sp, #16
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	60f8      	str	r0, [r7, #12]
 800c5f2:	60b9      	str	r1, [r7, #8]
 800c5f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	2203      	movs	r2, #3
 800c5fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	687a      	ldr	r2, [r7, #4]
 800c602:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	687a      	ldr	r2, [r7, #4]
 800c60a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	68ba      	ldr	r2, [r7, #8]
 800c612:	2100      	movs	r1, #0
 800c614:	68f8      	ldr	r0, [r7, #12]
 800c616:	f003 fe7b 	bl	8010310 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c61a:	2300      	movs	r3, #0
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3710      	adds	r7, #16
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b084      	sub	sp, #16
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	68ba      	ldr	r2, [r7, #8]
 800c634:	2100      	movs	r1, #0
 800c636:	68f8      	ldr	r0, [r7, #12]
 800c638:	f003 fe6a 	bl	8010310 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c63c:	2300      	movs	r3, #0
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}

0800c646 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c646:	b580      	push	{r7, lr}
 800c648:	b082      	sub	sp, #8
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2204      	movs	r2, #4
 800c652:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c656:	2300      	movs	r3, #0
 800c658:	2200      	movs	r2, #0
 800c65a:	2100      	movs	r1, #0
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f003 fe36 	bl	80102ce <USBD_LL_Transmit>

  return USBD_OK;
 800c662:	2300      	movs	r3, #0
}
 800c664:	4618      	mov	r0, r3
 800c666:	3708      	adds	r7, #8
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2205      	movs	r2, #5
 800c678:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c67c:	2300      	movs	r3, #0
 800c67e:	2200      	movs	r2, #0
 800c680:	2100      	movs	r1, #0
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f003 fe44 	bl	8010310 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c688:	2300      	movs	r3, #0
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3708      	adds	r7, #8
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}

0800c692 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c692:	b480      	push	{r7}
 800c694:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800c696:	bf00      	nop
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr

0800c6a0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c6a0:	b480      	push	{r7}
 800c6a2:	b085      	sub	sp, #20
 800c6a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6a6:	f3ef 8305 	mrs	r3, IPSR
 800c6aa:	60bb      	str	r3, [r7, #8]
  return(result);
 800c6ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d10f      	bne.n	800c6d2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6b2:	f3ef 8310 	mrs	r3, PRIMASK
 800c6b6:	607b      	str	r3, [r7, #4]
  return(result);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d105      	bne.n	800c6ca <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c6be:	f3ef 8311 	mrs	r3, BASEPRI
 800c6c2:	603b      	str	r3, [r7, #0]
  return(result);
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d007      	beq.n	800c6da <osKernelInitialize+0x3a>
 800c6ca:	4b0e      	ldr	r3, [pc, #56]	; (800c704 <osKernelInitialize+0x64>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	2b02      	cmp	r3, #2
 800c6d0:	d103      	bne.n	800c6da <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800c6d2:	f06f 0305 	mvn.w	r3, #5
 800c6d6:	60fb      	str	r3, [r7, #12]
 800c6d8:	e00c      	b.n	800c6f4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c6da:	4b0a      	ldr	r3, [pc, #40]	; (800c704 <osKernelInitialize+0x64>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d105      	bne.n	800c6ee <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c6e2:	4b08      	ldr	r3, [pc, #32]	; (800c704 <osKernelInitialize+0x64>)
 800c6e4:	2201      	movs	r2, #1
 800c6e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	60fb      	str	r3, [r7, #12]
 800c6ec:	e002      	b.n	800c6f4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800c6ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800c6f4:	68fb      	ldr	r3, [r7, #12]
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3714      	adds	r7, #20
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr
 800c702:	bf00      	nop
 800c704:	20000624 	.word	0x20000624

0800c708 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c70e:	f3ef 8305 	mrs	r3, IPSR
 800c712:	60bb      	str	r3, [r7, #8]
  return(result);
 800c714:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c716:	2b00      	cmp	r3, #0
 800c718:	d10f      	bne.n	800c73a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c71a:	f3ef 8310 	mrs	r3, PRIMASK
 800c71e:	607b      	str	r3, [r7, #4]
  return(result);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d105      	bne.n	800c732 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c726:	f3ef 8311 	mrs	r3, BASEPRI
 800c72a:	603b      	str	r3, [r7, #0]
  return(result);
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d007      	beq.n	800c742 <osKernelStart+0x3a>
 800c732:	4b0f      	ldr	r3, [pc, #60]	; (800c770 <osKernelStart+0x68>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	2b02      	cmp	r3, #2
 800c738:	d103      	bne.n	800c742 <osKernelStart+0x3a>
    stat = osErrorISR;
 800c73a:	f06f 0305 	mvn.w	r3, #5
 800c73e:	60fb      	str	r3, [r7, #12]
 800c740:	e010      	b.n	800c764 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c742:	4b0b      	ldr	r3, [pc, #44]	; (800c770 <osKernelStart+0x68>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2b01      	cmp	r3, #1
 800c748:	d109      	bne.n	800c75e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c74a:	f7ff ffa2 	bl	800c692 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c74e:	4b08      	ldr	r3, [pc, #32]	; (800c770 <osKernelStart+0x68>)
 800c750:	2202      	movs	r2, #2
 800c752:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c754:	f001 fb84 	bl	800de60 <vTaskStartScheduler>
      stat = osOK;
 800c758:	2300      	movs	r3, #0
 800c75a:	60fb      	str	r3, [r7, #12]
 800c75c:	e002      	b.n	800c764 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800c75e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c762:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800c764:	68fb      	ldr	r3, [r7, #12]
}
 800c766:	4618      	mov	r0, r3
 800c768:	3710      	adds	r7, #16
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	20000624 	.word	0x20000624

0800c774 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c774:	b580      	push	{r7, lr}
 800c776:	b090      	sub	sp, #64	; 0x40
 800c778:	af04      	add	r7, sp, #16
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c780:	2300      	movs	r3, #0
 800c782:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c784:	f3ef 8305 	mrs	r3, IPSR
 800c788:	61fb      	str	r3, [r7, #28]
  return(result);
 800c78a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	f040 808f 	bne.w	800c8b0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c792:	f3ef 8310 	mrs	r3, PRIMASK
 800c796:	61bb      	str	r3, [r7, #24]
  return(result);
 800c798:	69bb      	ldr	r3, [r7, #24]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d105      	bne.n	800c7aa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c79e:	f3ef 8311 	mrs	r3, BASEPRI
 800c7a2:	617b      	str	r3, [r7, #20]
  return(result);
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d003      	beq.n	800c7b2 <osThreadNew+0x3e>
 800c7aa:	4b44      	ldr	r3, [pc, #272]	; (800c8bc <osThreadNew+0x148>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	2b02      	cmp	r3, #2
 800c7b0:	d07e      	beq.n	800c8b0 <osThreadNew+0x13c>
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d07b      	beq.n	800c8b0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800c7b8:	2380      	movs	r3, #128	; 0x80
 800c7ba:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800c7bc:	2318      	movs	r3, #24
 800c7be:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800c7c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c7c8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d045      	beq.n	800c85c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d002      	beq.n	800c7de <osThreadNew+0x6a>
        name = attr->name;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	699b      	ldr	r3, [r3, #24]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d002      	beq.n	800c7ec <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	699b      	ldr	r3, [r3, #24]
 800c7ea:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d008      	beq.n	800c804 <osThreadNew+0x90>
 800c7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f4:	2b38      	cmp	r3, #56	; 0x38
 800c7f6:	d805      	bhi.n	800c804 <osThreadNew+0x90>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	f003 0301 	and.w	r3, r3, #1
 800c800:	2b00      	cmp	r3, #0
 800c802:	d001      	beq.n	800c808 <osThreadNew+0x94>
        return (NULL);
 800c804:	2300      	movs	r3, #0
 800c806:	e054      	b.n	800c8b2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	695b      	ldr	r3, [r3, #20]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d003      	beq.n	800c818 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	695b      	ldr	r3, [r3, #20]
 800c814:	089b      	lsrs	r3, r3, #2
 800c816:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	689b      	ldr	r3, [r3, #8]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d00e      	beq.n	800c83e <osThreadNew+0xca>
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	68db      	ldr	r3, [r3, #12]
 800c824:	2b63      	cmp	r3, #99	; 0x63
 800c826:	d90a      	bls.n	800c83e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d006      	beq.n	800c83e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	695b      	ldr	r3, [r3, #20]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d002      	beq.n	800c83e <osThreadNew+0xca>
        mem = 1;
 800c838:	2301      	movs	r3, #1
 800c83a:	623b      	str	r3, [r7, #32]
 800c83c:	e010      	b.n	800c860 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	689b      	ldr	r3, [r3, #8]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d10c      	bne.n	800c860 <osThreadNew+0xec>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	68db      	ldr	r3, [r3, #12]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d108      	bne.n	800c860 <osThreadNew+0xec>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	691b      	ldr	r3, [r3, #16]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d104      	bne.n	800c860 <osThreadNew+0xec>
          mem = 0;
 800c856:	2300      	movs	r3, #0
 800c858:	623b      	str	r3, [r7, #32]
 800c85a:	e001      	b.n	800c860 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800c85c:	2300      	movs	r3, #0
 800c85e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800c860:	6a3b      	ldr	r3, [r7, #32]
 800c862:	2b01      	cmp	r3, #1
 800c864:	d110      	bne.n	800c888 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800c86a:	687a      	ldr	r2, [r7, #4]
 800c86c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c86e:	9202      	str	r2, [sp, #8]
 800c870:	9301      	str	r3, [sp, #4]
 800c872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c874:	9300      	str	r3, [sp, #0]
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c87a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c87c:	68f8      	ldr	r0, [r7, #12]
 800c87e:	f001 f89d 	bl	800d9bc <xTaskCreateStatic>
 800c882:	4603      	mov	r3, r0
 800c884:	613b      	str	r3, [r7, #16]
 800c886:	e013      	b.n	800c8b0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800c888:	6a3b      	ldr	r3, [r7, #32]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d110      	bne.n	800c8b0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c890:	b29a      	uxth	r2, r3
 800c892:	f107 0310 	add.w	r3, r7, #16
 800c896:	9301      	str	r3, [sp, #4]
 800c898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c89a:	9300      	str	r3, [sp, #0]
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c8a0:	68f8      	ldr	r0, [r7, #12]
 800c8a2:	f001 f8e5 	bl	800da70 <xTaskCreate>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	2b01      	cmp	r3, #1
 800c8aa:	d001      	beq.n	800c8b0 <osThreadNew+0x13c>
          hTask = NULL;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c8b0:	693b      	ldr	r3, [r7, #16]
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3730      	adds	r7, #48	; 0x30
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	bf00      	nop
 800c8bc:	20000624 	.word	0x20000624

0800c8c0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b086      	sub	sp, #24
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8c8:	f3ef 8305 	mrs	r3, IPSR
 800c8cc:	613b      	str	r3, [r7, #16]
  return(result);
 800c8ce:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d10f      	bne.n	800c8f4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8d4:	f3ef 8310 	mrs	r3, PRIMASK
 800c8d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d105      	bne.n	800c8ec <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c8e0:	f3ef 8311 	mrs	r3, BASEPRI
 800c8e4:	60bb      	str	r3, [r7, #8]
  return(result);
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d007      	beq.n	800c8fc <osDelay+0x3c>
 800c8ec:	4b0a      	ldr	r3, [pc, #40]	; (800c918 <osDelay+0x58>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	2b02      	cmp	r3, #2
 800c8f2:	d103      	bne.n	800c8fc <osDelay+0x3c>
    stat = osErrorISR;
 800c8f4:	f06f 0305 	mvn.w	r3, #5
 800c8f8:	617b      	str	r3, [r7, #20]
 800c8fa:	e007      	b.n	800c90c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d002      	beq.n	800c90c <osDelay+0x4c>
      vTaskDelay(ticks);
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f001 fa76 	bl	800ddf8 <vTaskDelay>
    }
  }

  return (stat);
 800c90c:	697b      	ldr	r3, [r7, #20]
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3718      	adds	r7, #24
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop
 800c918:	20000624 	.word	0x20000624

0800c91c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b08c      	sub	sp, #48	; 0x30
 800c920:	af02      	add	r7, sp, #8
 800c922:	60f8      	str	r0, [r7, #12]
 800c924:	60b9      	str	r1, [r7, #8]
 800c926:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c928:	2300      	movs	r3, #0
 800c92a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c92c:	f3ef 8305 	mrs	r3, IPSR
 800c930:	61bb      	str	r3, [r7, #24]
  return(result);
 800c932:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c934:	2b00      	cmp	r3, #0
 800c936:	d170      	bne.n	800ca1a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c938:	f3ef 8310 	mrs	r3, PRIMASK
 800c93c:	617b      	str	r3, [r7, #20]
  return(result);
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d105      	bne.n	800c950 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c944:	f3ef 8311 	mrs	r3, BASEPRI
 800c948:	613b      	str	r3, [r7, #16]
  return(result);
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d003      	beq.n	800c958 <osMessageQueueNew+0x3c>
 800c950:	4b34      	ldr	r3, [pc, #208]	; (800ca24 <osMessageQueueNew+0x108>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	2b02      	cmp	r3, #2
 800c956:	d060      	beq.n	800ca1a <osMessageQueueNew+0xfe>
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d05d      	beq.n	800ca1a <osMessageQueueNew+0xfe>
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d05a      	beq.n	800ca1a <osMessageQueueNew+0xfe>
    mem = -1;
 800c964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c968:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d029      	beq.n	800c9c4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	689b      	ldr	r3, [r3, #8]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d012      	beq.n	800c99e <osMessageQueueNew+0x82>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	68db      	ldr	r3, [r3, #12]
 800c97c:	2b4f      	cmp	r3, #79	; 0x4f
 800c97e:	d90e      	bls.n	800c99e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c984:	2b00      	cmp	r3, #0
 800c986:	d00a      	beq.n	800c99e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	695a      	ldr	r2, [r3, #20]
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	68b9      	ldr	r1, [r7, #8]
 800c990:	fb01 f303 	mul.w	r3, r1, r3
 800c994:	429a      	cmp	r2, r3
 800c996:	d302      	bcc.n	800c99e <osMessageQueueNew+0x82>
        mem = 1;
 800c998:	2301      	movs	r3, #1
 800c99a:	623b      	str	r3, [r7, #32]
 800c99c:	e014      	b.n	800c9c8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	689b      	ldr	r3, [r3, #8]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d110      	bne.n	800c9c8 <osMessageQueueNew+0xac>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	68db      	ldr	r3, [r3, #12]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d10c      	bne.n	800c9c8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d108      	bne.n	800c9c8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	695b      	ldr	r3, [r3, #20]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d104      	bne.n	800c9c8 <osMessageQueueNew+0xac>
          mem = 0;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	623b      	str	r3, [r7, #32]
 800c9c2:	e001      	b.n	800c9c8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800c9c8:	6a3b      	ldr	r3, [r7, #32]
 800c9ca:	2b01      	cmp	r3, #1
 800c9cc:	d10c      	bne.n	800c9e8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	691a      	ldr	r2, [r3, #16]
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6899      	ldr	r1, [r3, #8]
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	9300      	str	r3, [sp, #0]
 800c9da:	460b      	mov	r3, r1
 800c9dc:	68b9      	ldr	r1, [r7, #8]
 800c9de:	68f8      	ldr	r0, [r7, #12]
 800c9e0:	f000 faa0 	bl	800cf24 <xQueueGenericCreateStatic>
 800c9e4:	6278      	str	r0, [r7, #36]	; 0x24
 800c9e6:	e008      	b.n	800c9fa <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800c9e8:	6a3b      	ldr	r3, [r7, #32]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d105      	bne.n	800c9fa <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	68b9      	ldr	r1, [r7, #8]
 800c9f2:	68f8      	ldr	r0, [r7, #12]
 800c9f4:	f000 fb09 	bl	800d00a <xQueueGenericCreate>
 800c9f8:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d00c      	beq.n	800ca1a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d003      	beq.n	800ca0e <osMessageQueueNew+0xf2>
        name = attr->name;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	61fb      	str	r3, [r7, #28]
 800ca0c:	e001      	b.n	800ca12 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800ca12:	69f9      	ldr	r1, [r7, #28]
 800ca14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca16:	f000 ff75 	bl	800d904 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ca1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3728      	adds	r7, #40	; 0x28
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}
 800ca24:	20000624 	.word	0x20000624

0800ca28 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b08a      	sub	sp, #40	; 0x28
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	60f8      	str	r0, [r7, #12]
 800ca30:	60b9      	str	r1, [r7, #8]
 800ca32:	603b      	str	r3, [r7, #0]
 800ca34:	4613      	mov	r3, r2
 800ca36:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca40:	f3ef 8305 	mrs	r3, IPSR
 800ca44:	61fb      	str	r3, [r7, #28]
  return(result);
 800ca46:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d10f      	bne.n	800ca6c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca4c:	f3ef 8310 	mrs	r3, PRIMASK
 800ca50:	61bb      	str	r3, [r7, #24]
  return(result);
 800ca52:	69bb      	ldr	r3, [r7, #24]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d105      	bne.n	800ca64 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ca58:	f3ef 8311 	mrs	r3, BASEPRI
 800ca5c:	617b      	str	r3, [r7, #20]
  return(result);
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d02c      	beq.n	800cabe <osMessageQueuePut+0x96>
 800ca64:	4b28      	ldr	r3, [pc, #160]	; (800cb08 <osMessageQueuePut+0xe0>)
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	2b02      	cmp	r3, #2
 800ca6a:	d128      	bne.n	800cabe <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ca6c:	6a3b      	ldr	r3, [r7, #32]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d005      	beq.n	800ca7e <osMessageQueuePut+0x56>
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d002      	beq.n	800ca7e <osMessageQueuePut+0x56>
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d003      	beq.n	800ca86 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800ca7e:	f06f 0303 	mvn.w	r3, #3
 800ca82:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ca84:	e039      	b.n	800cafa <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800ca86:	2300      	movs	r3, #0
 800ca88:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ca8a:	f107 0210 	add.w	r2, r7, #16
 800ca8e:	2300      	movs	r3, #0
 800ca90:	68b9      	ldr	r1, [r7, #8]
 800ca92:	6a38      	ldr	r0, [r7, #32]
 800ca94:	f000 fc16 	bl	800d2c4 <xQueueGenericSendFromISR>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	2b01      	cmp	r3, #1
 800ca9c:	d003      	beq.n	800caa6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800ca9e:	f06f 0302 	mvn.w	r3, #2
 800caa2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800caa4:	e029      	b.n	800cafa <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d026      	beq.n	800cafa <osMessageQueuePut+0xd2>
 800caac:	4b17      	ldr	r3, [pc, #92]	; (800cb0c <osMessageQueuePut+0xe4>)
 800caae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cab2:	601a      	str	r2, [r3, #0]
 800cab4:	f3bf 8f4f 	dsb	sy
 800cab8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cabc:	e01d      	b.n	800cafa <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cabe:	6a3b      	ldr	r3, [r7, #32]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d002      	beq.n	800caca <osMessageQueuePut+0xa2>
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d103      	bne.n	800cad2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800caca:	f06f 0303 	mvn.w	r3, #3
 800cace:	627b      	str	r3, [r7, #36]	; 0x24
 800cad0:	e014      	b.n	800cafc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cad2:	2300      	movs	r3, #0
 800cad4:	683a      	ldr	r2, [r7, #0]
 800cad6:	68b9      	ldr	r1, [r7, #8]
 800cad8:	6a38      	ldr	r0, [r7, #32]
 800cada:	f000 faf9 	bl	800d0d0 <xQueueGenericSend>
 800cade:	4603      	mov	r3, r0
 800cae0:	2b01      	cmp	r3, #1
 800cae2:	d00b      	beq.n	800cafc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d003      	beq.n	800caf2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800caea:	f06f 0301 	mvn.w	r3, #1
 800caee:	627b      	str	r3, [r7, #36]	; 0x24
 800caf0:	e004      	b.n	800cafc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800caf2:	f06f 0302 	mvn.w	r3, #2
 800caf6:	627b      	str	r3, [r7, #36]	; 0x24
 800caf8:	e000      	b.n	800cafc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cafa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800cafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3728      	adds	r7, #40	; 0x28
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
 800cb06:	bf00      	nop
 800cb08:	20000624 	.word	0x20000624
 800cb0c:	e000ed04 	.word	0xe000ed04

0800cb10 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b08a      	sub	sp, #40	; 0x28
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	60b9      	str	r1, [r7, #8]
 800cb1a:	607a      	str	r2, [r7, #4]
 800cb1c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cb22:	2300      	movs	r3, #0
 800cb24:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb26:	f3ef 8305 	mrs	r3, IPSR
 800cb2a:	61fb      	str	r3, [r7, #28]
  return(result);
 800cb2c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d10f      	bne.n	800cb52 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb32:	f3ef 8310 	mrs	r3, PRIMASK
 800cb36:	61bb      	str	r3, [r7, #24]
  return(result);
 800cb38:	69bb      	ldr	r3, [r7, #24]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d105      	bne.n	800cb4a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cb3e:	f3ef 8311 	mrs	r3, BASEPRI
 800cb42:	617b      	str	r3, [r7, #20]
  return(result);
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d02c      	beq.n	800cba4 <osMessageQueueGet+0x94>
 800cb4a:	4b28      	ldr	r3, [pc, #160]	; (800cbec <osMessageQueueGet+0xdc>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	2b02      	cmp	r3, #2
 800cb50:	d128      	bne.n	800cba4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cb52:	6a3b      	ldr	r3, [r7, #32]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d005      	beq.n	800cb64 <osMessageQueueGet+0x54>
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d002      	beq.n	800cb64 <osMessageQueueGet+0x54>
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d003      	beq.n	800cb6c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800cb64:	f06f 0303 	mvn.w	r3, #3
 800cb68:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cb6a:	e038      	b.n	800cbde <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cb70:	f107 0310 	add.w	r3, r7, #16
 800cb74:	461a      	mov	r2, r3
 800cb76:	68b9      	ldr	r1, [r7, #8]
 800cb78:	6a38      	ldr	r0, [r7, #32]
 800cb7a:	f000 fd13 	bl	800d5a4 <xQueueReceiveFromISR>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	2b01      	cmp	r3, #1
 800cb82:	d003      	beq.n	800cb8c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800cb84:	f06f 0302 	mvn.w	r3, #2
 800cb88:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cb8a:	e028      	b.n	800cbde <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d025      	beq.n	800cbde <osMessageQueueGet+0xce>
 800cb92:	4b17      	ldr	r3, [pc, #92]	; (800cbf0 <osMessageQueueGet+0xe0>)
 800cb94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb98:	601a      	str	r2, [r3, #0]
 800cb9a:	f3bf 8f4f 	dsb	sy
 800cb9e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cba2:	e01c      	b.n	800cbde <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cba4:	6a3b      	ldr	r3, [r7, #32]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d002      	beq.n	800cbb0 <osMessageQueueGet+0xa0>
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d103      	bne.n	800cbb8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800cbb0:	f06f 0303 	mvn.w	r3, #3
 800cbb4:	627b      	str	r3, [r7, #36]	; 0x24
 800cbb6:	e013      	b.n	800cbe0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cbb8:	683a      	ldr	r2, [r7, #0]
 800cbba:	68b9      	ldr	r1, [r7, #8]
 800cbbc:	6a38      	ldr	r0, [r7, #32]
 800cbbe:	f000 fc15 	bl	800d3ec <xQueueReceive>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d00b      	beq.n	800cbe0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d003      	beq.n	800cbd6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800cbce:	f06f 0301 	mvn.w	r3, #1
 800cbd2:	627b      	str	r3, [r7, #36]	; 0x24
 800cbd4:	e004      	b.n	800cbe0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800cbd6:	f06f 0302 	mvn.w	r3, #2
 800cbda:	627b      	str	r3, [r7, #36]	; 0x24
 800cbdc:	e000      	b.n	800cbe0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cbde:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800cbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3728      	adds	r7, #40	; 0x28
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	20000624 	.word	0x20000624
 800cbf0:	e000ed04 	.word	0xe000ed04

0800cbf4 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b08c      	sub	sp, #48	; 0x30
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800cc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d102      	bne.n	800cc0c <osMessageQueueGetSpace+0x18>
    space = 0U;
 800cc06:	2300      	movs	r3, #0
 800cc08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc0a:	e033      	b.n	800cc74 <osMessageQueueGetSpace+0x80>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc0c:	f3ef 8305 	mrs	r3, IPSR
 800cc10:	623b      	str	r3, [r7, #32]
  return(result);
 800cc12:	6a3b      	ldr	r3, [r7, #32]
  }
  else if (IS_IRQ()) {
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d10f      	bne.n	800cc38 <osMessageQueueGetSpace+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc18:	f3ef 8310 	mrs	r3, PRIMASK
 800cc1c:	61fb      	str	r3, [r7, #28]
  return(result);
 800cc1e:	69fb      	ldr	r3, [r7, #28]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d105      	bne.n	800cc30 <osMessageQueueGetSpace+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cc24:	f3ef 8311 	mrs	r3, BASEPRI
 800cc28:	61bb      	str	r3, [r7, #24]
  return(result);
 800cc2a:	69bb      	ldr	r3, [r7, #24]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d01d      	beq.n	800cc6c <osMessageQueueGetSpace+0x78>
 800cc30:	4b13      	ldr	r3, [pc, #76]	; (800cc80 <osMessageQueueGetSpace+0x8c>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	2b02      	cmp	r3, #2
 800cc36:	d119      	bne.n	800cc6c <osMessageQueueGetSpace+0x78>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cc38:	f3ef 8211 	mrs	r2, BASEPRI
 800cc3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc40:	f383 8811 	msr	BASEPRI, r3
 800cc44:	f3bf 8f6f 	isb	sy
 800cc48:	f3bf 8f4f 	dsb	sy
 800cc4c:	613a      	str	r2, [r7, #16]
 800cc4e:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cc50:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800cc52:	627b      	str	r3, [r7, #36]	; 0x24

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800cc54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc5c:	1ad3      	subs	r3, r2, r3
 800cc5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc62:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	f383 8811 	msr	BASEPRI, r3

    taskEXIT_CRITICAL_FROM_ISR(isrm);
 800cc6a:	e003      	b.n	800cc74 <osMessageQueueGetSpace+0x80>
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800cc6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc6e:	f000 fd16 	bl	800d69e <uxQueueSpacesAvailable>
 800cc72:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return (space);
 800cc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3730      	adds	r7, #48	; 0x30
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	20000624 	.word	0x20000624

0800cc84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cc84:	b480      	push	{r7}
 800cc86:	b085      	sub	sp, #20
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	60f8      	str	r0, [r7, #12]
 800cc8c:	60b9      	str	r1, [r7, #8]
 800cc8e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	4a07      	ldr	r2, [pc, #28]	; (800ccb0 <vApplicationGetIdleTaskMemory+0x2c>)
 800cc94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	4a06      	ldr	r2, [pc, #24]	; (800ccb4 <vApplicationGetIdleTaskMemory+0x30>)
 800cc9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2280      	movs	r2, #128	; 0x80
 800cca0:	601a      	str	r2, [r3, #0]
}
 800cca2:	bf00      	nop
 800cca4:	3714      	adds	r7, #20
 800cca6:	46bd      	mov	sp, r7
 800cca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccac:	4770      	bx	lr
 800ccae:	bf00      	nop
 800ccb0:	20000628 	.word	0x20000628
 800ccb4:	2000068c 	.word	0x2000068c

0800ccb8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ccb8:	b480      	push	{r7}
 800ccba:	b085      	sub	sp, #20
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	60f8      	str	r0, [r7, #12]
 800ccc0:	60b9      	str	r1, [r7, #8]
 800ccc2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	4a07      	ldr	r2, [pc, #28]	; (800cce4 <vApplicationGetTimerTaskMemory+0x2c>)
 800ccc8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	4a06      	ldr	r2, [pc, #24]	; (800cce8 <vApplicationGetTimerTaskMemory+0x30>)
 800ccce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ccd6:	601a      	str	r2, [r3, #0]
}
 800ccd8:	bf00      	nop
 800ccda:	3714      	adds	r7, #20
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr
 800cce4:	2000088c 	.word	0x2000088c
 800cce8:	200008f0 	.word	0x200008f0

0800ccec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ccec:	b480      	push	{r7}
 800ccee:	b083      	sub	sp, #12
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f103 0208 	add.w	r2, r3, #8
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f103 0208 	add.w	r2, r3, #8
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f103 0208 	add.w	r2, r3, #8
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cd20:	bf00      	nop
 800cd22:	370c      	adds	r7, #12
 800cd24:	46bd      	mov	sp, r7
 800cd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2a:	4770      	bx	lr

0800cd2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cd2c:	b480      	push	{r7}
 800cd2e:	b083      	sub	sp, #12
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	2200      	movs	r2, #0
 800cd38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cd3a:	bf00      	nop
 800cd3c:	370c      	adds	r7, #12
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd44:	4770      	bx	lr

0800cd46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd46:	b480      	push	{r7}
 800cd48:	b085      	sub	sp, #20
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
 800cd4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	685b      	ldr	r3, [r3, #4]
 800cd54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	68fa      	ldr	r2, [r7, #12]
 800cd5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	689a      	ldr	r2, [r3, #8]
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	689b      	ldr	r3, [r3, #8]
 800cd68:	683a      	ldr	r2, [r7, #0]
 800cd6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	683a      	ldr	r2, [r7, #0]
 800cd70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	1c5a      	adds	r2, r3, #1
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	601a      	str	r2, [r3, #0]
}
 800cd82:	bf00      	nop
 800cd84:	3714      	adds	r7, #20
 800cd86:	46bd      	mov	sp, r7
 800cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8c:	4770      	bx	lr

0800cd8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cd8e:	b480      	push	{r7}
 800cd90:	b085      	sub	sp, #20
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
 800cd96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cda4:	d103      	bne.n	800cdae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	691b      	ldr	r3, [r3, #16]
 800cdaa:	60fb      	str	r3, [r7, #12]
 800cdac:	e00c      	b.n	800cdc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	3308      	adds	r3, #8
 800cdb2:	60fb      	str	r3, [r7, #12]
 800cdb4:	e002      	b.n	800cdbc <vListInsert+0x2e>
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	685b      	ldr	r3, [r3, #4]
 800cdba:	60fb      	str	r3, [r7, #12]
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	68ba      	ldr	r2, [r7, #8]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d2f6      	bcs.n	800cdb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	685a      	ldr	r2, [r3, #4]
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	685b      	ldr	r3, [r3, #4]
 800cdd4:	683a      	ldr	r2, [r7, #0]
 800cdd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	68fa      	ldr	r2, [r7, #12]
 800cddc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	683a      	ldr	r2, [r7, #0]
 800cde2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	1c5a      	adds	r2, r3, #1
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	601a      	str	r2, [r3, #0]
}
 800cdf4:	bf00      	nop
 800cdf6:	3714      	adds	r7, #20
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ce00:	b480      	push	{r7}
 800ce02:	b085      	sub	sp, #20
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	691b      	ldr	r3, [r3, #16]
 800ce0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	685b      	ldr	r3, [r3, #4]
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	6892      	ldr	r2, [r2, #8]
 800ce16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	689b      	ldr	r3, [r3, #8]
 800ce1c:	687a      	ldr	r2, [r7, #4]
 800ce1e:	6852      	ldr	r2, [r2, #4]
 800ce20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	687a      	ldr	r2, [r7, #4]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d103      	bne.n	800ce34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	689a      	ldr	r2, [r3, #8]
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2200      	movs	r2, #0
 800ce38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	1e5a      	subs	r2, r3, #1
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3714      	adds	r7, #20
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce52:	4770      	bx	lr

0800ce54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b084      	sub	sp, #16
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d109      	bne.n	800ce7c <xQueueGenericReset+0x28>
	__asm volatile
 800ce68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce6c:	f383 8811 	msr	BASEPRI, r3
 800ce70:	f3bf 8f6f 	isb	sy
 800ce74:	f3bf 8f4f 	dsb	sy
 800ce78:	60bb      	str	r3, [r7, #8]
 800ce7a:	e7fe      	b.n	800ce7a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800ce7c:	f002 fabe 	bl	800f3fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	681a      	ldr	r2, [r3, #0]
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce88:	68f9      	ldr	r1, [r7, #12]
 800ce8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce8c:	fb01 f303 	mul.w	r3, r1, r3
 800ce90:	441a      	add	r2, r3
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681a      	ldr	r2, [r3, #0]
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	681a      	ldr	r2, [r3, #0]
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceac:	3b01      	subs	r3, #1
 800ceae:	68f9      	ldr	r1, [r7, #12]
 800ceb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ceb2:	fb01 f303 	mul.w	r3, r1, r3
 800ceb6:	441a      	add	r2, r3
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	22ff      	movs	r2, #255	; 0xff
 800cec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	22ff      	movs	r2, #255	; 0xff
 800cec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d114      	bne.n	800cefc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	691b      	ldr	r3, [r3, #16]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d01a      	beq.n	800cf10 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	3310      	adds	r3, #16
 800cede:	4618      	mov	r0, r3
 800cee0:	f001 fa5c 	bl	800e39c <xTaskRemoveFromEventList>
 800cee4:	4603      	mov	r3, r0
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d012      	beq.n	800cf10 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ceea:	4b0d      	ldr	r3, [pc, #52]	; (800cf20 <xQueueGenericReset+0xcc>)
 800ceec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cef0:	601a      	str	r2, [r3, #0]
 800cef2:	f3bf 8f4f 	dsb	sy
 800cef6:	f3bf 8f6f 	isb	sy
 800cefa:	e009      	b.n	800cf10 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	3310      	adds	r3, #16
 800cf00:	4618      	mov	r0, r3
 800cf02:	f7ff fef3 	bl	800ccec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	3324      	adds	r3, #36	; 0x24
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7ff feee 	bl	800ccec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cf10:	f002 faa2 	bl	800f458 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cf14:	2301      	movs	r3, #1
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3710      	adds	r7, #16
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	bf00      	nop
 800cf20:	e000ed04 	.word	0xe000ed04

0800cf24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b08e      	sub	sp, #56	; 0x38
 800cf28:	af02      	add	r7, sp, #8
 800cf2a:	60f8      	str	r0, [r7, #12]
 800cf2c:	60b9      	str	r1, [r7, #8]
 800cf2e:	607a      	str	r2, [r7, #4]
 800cf30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d109      	bne.n	800cf4c <xQueueGenericCreateStatic+0x28>
 800cf38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf3c:	f383 8811 	msr	BASEPRI, r3
 800cf40:	f3bf 8f6f 	isb	sy
 800cf44:	f3bf 8f4f 	dsb	sy
 800cf48:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf4a:	e7fe      	b.n	800cf4a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d109      	bne.n	800cf66 <xQueueGenericCreateStatic+0x42>
 800cf52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf56:	f383 8811 	msr	BASEPRI, r3
 800cf5a:	f3bf 8f6f 	isb	sy
 800cf5e:	f3bf 8f4f 	dsb	sy
 800cf62:	627b      	str	r3, [r7, #36]	; 0x24
 800cf64:	e7fe      	b.n	800cf64 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d002      	beq.n	800cf72 <xQueueGenericCreateStatic+0x4e>
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d001      	beq.n	800cf76 <xQueueGenericCreateStatic+0x52>
 800cf72:	2301      	movs	r3, #1
 800cf74:	e000      	b.n	800cf78 <xQueueGenericCreateStatic+0x54>
 800cf76:	2300      	movs	r3, #0
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d109      	bne.n	800cf90 <xQueueGenericCreateStatic+0x6c>
 800cf7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf80:	f383 8811 	msr	BASEPRI, r3
 800cf84:	f3bf 8f6f 	isb	sy
 800cf88:	f3bf 8f4f 	dsb	sy
 800cf8c:	623b      	str	r3, [r7, #32]
 800cf8e:	e7fe      	b.n	800cf8e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d102      	bne.n	800cf9c <xQueueGenericCreateStatic+0x78>
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d101      	bne.n	800cfa0 <xQueueGenericCreateStatic+0x7c>
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	e000      	b.n	800cfa2 <xQueueGenericCreateStatic+0x7e>
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d109      	bne.n	800cfba <xQueueGenericCreateStatic+0x96>
 800cfa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfaa:	f383 8811 	msr	BASEPRI, r3
 800cfae:	f3bf 8f6f 	isb	sy
 800cfb2:	f3bf 8f4f 	dsb	sy
 800cfb6:	61fb      	str	r3, [r7, #28]
 800cfb8:	e7fe      	b.n	800cfb8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cfba:	2350      	movs	r3, #80	; 0x50
 800cfbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	2b50      	cmp	r3, #80	; 0x50
 800cfc2:	d009      	beq.n	800cfd8 <xQueueGenericCreateStatic+0xb4>
 800cfc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc8:	f383 8811 	msr	BASEPRI, r3
 800cfcc:	f3bf 8f6f 	isb	sy
 800cfd0:	f3bf 8f4f 	dsb	sy
 800cfd4:	61bb      	str	r3, [r7, #24]
 800cfd6:	e7fe      	b.n	800cfd6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cfd8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cfde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d00d      	beq.n	800d000 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cfe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cfec:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff2:	9300      	str	r3, [sp, #0]
 800cff4:	4613      	mov	r3, r2
 800cff6:	687a      	ldr	r2, [r7, #4]
 800cff8:	68b9      	ldr	r1, [r7, #8]
 800cffa:	68f8      	ldr	r0, [r7, #12]
 800cffc:	f000 f844 	bl	800d088 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d002:	4618      	mov	r0, r3
 800d004:	3730      	adds	r7, #48	; 0x30
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}

0800d00a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d00a:	b580      	push	{r7, lr}
 800d00c:	b08a      	sub	sp, #40	; 0x28
 800d00e:	af02      	add	r7, sp, #8
 800d010:	60f8      	str	r0, [r7, #12]
 800d012:	60b9      	str	r1, [r7, #8]
 800d014:	4613      	mov	r3, r2
 800d016:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d109      	bne.n	800d032 <xQueueGenericCreate+0x28>
 800d01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d022:	f383 8811 	msr	BASEPRI, r3
 800d026:	f3bf 8f6f 	isb	sy
 800d02a:	f3bf 8f4f 	dsb	sy
 800d02e:	613b      	str	r3, [r7, #16]
 800d030:	e7fe      	b.n	800d030 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d102      	bne.n	800d03e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d038:	2300      	movs	r3, #0
 800d03a:	61fb      	str	r3, [r7, #28]
 800d03c:	e004      	b.n	800d048 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	68ba      	ldr	r2, [r7, #8]
 800d042:	fb02 f303 	mul.w	r3, r2, r3
 800d046:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d048:	69fb      	ldr	r3, [r7, #28]
 800d04a:	3350      	adds	r3, #80	; 0x50
 800d04c:	4618      	mov	r0, r3
 800d04e:	f002 faef 	bl	800f630 <pvPortMalloc>
 800d052:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d054:	69bb      	ldr	r3, [r7, #24]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d011      	beq.n	800d07e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d05a:	69bb      	ldr	r3, [r7, #24]
 800d05c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	3350      	adds	r3, #80	; 0x50
 800d062:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d064:	69bb      	ldr	r3, [r7, #24]
 800d066:	2200      	movs	r2, #0
 800d068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d06c:	79fa      	ldrb	r2, [r7, #7]
 800d06e:	69bb      	ldr	r3, [r7, #24]
 800d070:	9300      	str	r3, [sp, #0]
 800d072:	4613      	mov	r3, r2
 800d074:	697a      	ldr	r2, [r7, #20]
 800d076:	68b9      	ldr	r1, [r7, #8]
 800d078:	68f8      	ldr	r0, [r7, #12]
 800d07a:	f000 f805 	bl	800d088 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d07e:	69bb      	ldr	r3, [r7, #24]
	}
 800d080:	4618      	mov	r0, r3
 800d082:	3720      	adds	r7, #32
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	60f8      	str	r0, [r7, #12]
 800d090:	60b9      	str	r1, [r7, #8]
 800d092:	607a      	str	r2, [r7, #4]
 800d094:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d103      	bne.n	800d0a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d09c:	69bb      	ldr	r3, [r7, #24]
 800d09e:	69ba      	ldr	r2, [r7, #24]
 800d0a0:	601a      	str	r2, [r3, #0]
 800d0a2:	e002      	b.n	800d0aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d0a4:	69bb      	ldr	r3, [r7, #24]
 800d0a6:	687a      	ldr	r2, [r7, #4]
 800d0a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d0aa:	69bb      	ldr	r3, [r7, #24]
 800d0ac:	68fa      	ldr	r2, [r7, #12]
 800d0ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d0b0:	69bb      	ldr	r3, [r7, #24]
 800d0b2:	68ba      	ldr	r2, [r7, #8]
 800d0b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d0b6:	2101      	movs	r1, #1
 800d0b8:	69b8      	ldr	r0, [r7, #24]
 800d0ba:	f7ff fecb 	bl	800ce54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d0be:	69bb      	ldr	r3, [r7, #24]
 800d0c0:	78fa      	ldrb	r2, [r7, #3]
 800d0c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d0c6:	bf00      	nop
 800d0c8:	3710      	adds	r7, #16
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}
	...

0800d0d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b08e      	sub	sp, #56	; 0x38
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	60f8      	str	r0, [r7, #12]
 800d0d8:	60b9      	str	r1, [r7, #8]
 800d0da:	607a      	str	r2, [r7, #4]
 800d0dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d109      	bne.n	800d100 <xQueueGenericSend+0x30>
 800d0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f0:	f383 8811 	msr	BASEPRI, r3
 800d0f4:	f3bf 8f6f 	isb	sy
 800d0f8:	f3bf 8f4f 	dsb	sy
 800d0fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0fe:	e7fe      	b.n	800d0fe <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d103      	bne.n	800d10e <xQueueGenericSend+0x3e>
 800d106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d101      	bne.n	800d112 <xQueueGenericSend+0x42>
 800d10e:	2301      	movs	r3, #1
 800d110:	e000      	b.n	800d114 <xQueueGenericSend+0x44>
 800d112:	2300      	movs	r3, #0
 800d114:	2b00      	cmp	r3, #0
 800d116:	d109      	bne.n	800d12c <xQueueGenericSend+0x5c>
 800d118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11c:	f383 8811 	msr	BASEPRI, r3
 800d120:	f3bf 8f6f 	isb	sy
 800d124:	f3bf 8f4f 	dsb	sy
 800d128:	627b      	str	r3, [r7, #36]	; 0x24
 800d12a:	e7fe      	b.n	800d12a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	2b02      	cmp	r3, #2
 800d130:	d103      	bne.n	800d13a <xQueueGenericSend+0x6a>
 800d132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d136:	2b01      	cmp	r3, #1
 800d138:	d101      	bne.n	800d13e <xQueueGenericSend+0x6e>
 800d13a:	2301      	movs	r3, #1
 800d13c:	e000      	b.n	800d140 <xQueueGenericSend+0x70>
 800d13e:	2300      	movs	r3, #0
 800d140:	2b00      	cmp	r3, #0
 800d142:	d109      	bne.n	800d158 <xQueueGenericSend+0x88>
 800d144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d148:	f383 8811 	msr	BASEPRI, r3
 800d14c:	f3bf 8f6f 	isb	sy
 800d150:	f3bf 8f4f 	dsb	sy
 800d154:	623b      	str	r3, [r7, #32]
 800d156:	e7fe      	b.n	800d156 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d158:	f001 fad6 	bl	800e708 <xTaskGetSchedulerState>
 800d15c:	4603      	mov	r3, r0
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d102      	bne.n	800d168 <xQueueGenericSend+0x98>
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d101      	bne.n	800d16c <xQueueGenericSend+0x9c>
 800d168:	2301      	movs	r3, #1
 800d16a:	e000      	b.n	800d16e <xQueueGenericSend+0x9e>
 800d16c:	2300      	movs	r3, #0
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d109      	bne.n	800d186 <xQueueGenericSend+0xb6>
 800d172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d176:	f383 8811 	msr	BASEPRI, r3
 800d17a:	f3bf 8f6f 	isb	sy
 800d17e:	f3bf 8f4f 	dsb	sy
 800d182:	61fb      	str	r3, [r7, #28]
 800d184:	e7fe      	b.n	800d184 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d186:	f002 f939 	bl	800f3fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d18c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d192:	429a      	cmp	r2, r3
 800d194:	d302      	bcc.n	800d19c <xQueueGenericSend+0xcc>
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	2b02      	cmp	r3, #2
 800d19a:	d129      	bne.n	800d1f0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d19c:	683a      	ldr	r2, [r7, #0]
 800d19e:	68b9      	ldr	r1, [r7, #8]
 800d1a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1a2:	f000 fa9e 	bl	800d6e2 <prvCopyDataToQueue>
 800d1a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d010      	beq.n	800d1d2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b2:	3324      	adds	r3, #36	; 0x24
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f001 f8f1 	bl	800e39c <xTaskRemoveFromEventList>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d013      	beq.n	800d1e8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d1c0:	4b3f      	ldr	r3, [pc, #252]	; (800d2c0 <xQueueGenericSend+0x1f0>)
 800d1c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1c6:	601a      	str	r2, [r3, #0]
 800d1c8:	f3bf 8f4f 	dsb	sy
 800d1cc:	f3bf 8f6f 	isb	sy
 800d1d0:	e00a      	b.n	800d1e8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d007      	beq.n	800d1e8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d1d8:	4b39      	ldr	r3, [pc, #228]	; (800d2c0 <xQueueGenericSend+0x1f0>)
 800d1da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1de:	601a      	str	r2, [r3, #0]
 800d1e0:	f3bf 8f4f 	dsb	sy
 800d1e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d1e8:	f002 f936 	bl	800f458 <vPortExitCritical>
				return pdPASS;
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	e063      	b.n	800d2b8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d103      	bne.n	800d1fe <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d1f6:	f002 f92f 	bl	800f458 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	e05c      	b.n	800d2b8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d1fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d200:	2b00      	cmp	r3, #0
 800d202:	d106      	bne.n	800d212 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d204:	f107 0314 	add.w	r3, r7, #20
 800d208:	4618      	mov	r0, r3
 800d20a:	f001 f929 	bl	800e460 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d20e:	2301      	movs	r3, #1
 800d210:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d212:	f002 f921 	bl	800f458 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d216:	f000 fe89 	bl	800df2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d21a:	f002 f8ef 	bl	800f3fc <vPortEnterCritical>
 800d21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d220:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d224:	b25b      	sxtb	r3, r3
 800d226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d22a:	d103      	bne.n	800d234 <xQueueGenericSend+0x164>
 800d22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d22e:	2200      	movs	r2, #0
 800d230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d236:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d23a:	b25b      	sxtb	r3, r3
 800d23c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d240:	d103      	bne.n	800d24a <xQueueGenericSend+0x17a>
 800d242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d244:	2200      	movs	r2, #0
 800d246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d24a:	f002 f905 	bl	800f458 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d24e:	1d3a      	adds	r2, r7, #4
 800d250:	f107 0314 	add.w	r3, r7, #20
 800d254:	4611      	mov	r1, r2
 800d256:	4618      	mov	r0, r3
 800d258:	f001 f918 	bl	800e48c <xTaskCheckForTimeOut>
 800d25c:	4603      	mov	r3, r0
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d124      	bne.n	800d2ac <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d262:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d264:	f000 fb35 	bl	800d8d2 <prvIsQueueFull>
 800d268:	4603      	mov	r3, r0
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d018      	beq.n	800d2a0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d270:	3310      	adds	r3, #16
 800d272:	687a      	ldr	r2, [r7, #4]
 800d274:	4611      	mov	r1, r2
 800d276:	4618      	mov	r0, r3
 800d278:	f001 f842 	bl	800e300 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d27c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d27e:	f000 fac0 	bl	800d802 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d282:	f000 fe61 	bl	800df48 <xTaskResumeAll>
 800d286:	4603      	mov	r3, r0
 800d288:	2b00      	cmp	r3, #0
 800d28a:	f47f af7c 	bne.w	800d186 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800d28e:	4b0c      	ldr	r3, [pc, #48]	; (800d2c0 <xQueueGenericSend+0x1f0>)
 800d290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d294:	601a      	str	r2, [r3, #0]
 800d296:	f3bf 8f4f 	dsb	sy
 800d29a:	f3bf 8f6f 	isb	sy
 800d29e:	e772      	b.n	800d186 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d2a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2a2:	f000 faae 	bl	800d802 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2a6:	f000 fe4f 	bl	800df48 <xTaskResumeAll>
 800d2aa:	e76c      	b.n	800d186 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d2ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2ae:	f000 faa8 	bl	800d802 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d2b2:	f000 fe49 	bl	800df48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d2b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	3738      	adds	r7, #56	; 0x38
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}
 800d2c0:	e000ed04 	.word	0xe000ed04

0800d2c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b08e      	sub	sp, #56	; 0x38
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	60f8      	str	r0, [r7, #12]
 800d2cc:	60b9      	str	r1, [r7, #8]
 800d2ce:	607a      	str	r2, [r7, #4]
 800d2d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d109      	bne.n	800d2f0 <xQueueGenericSendFromISR+0x2c>
 800d2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e0:	f383 8811 	msr	BASEPRI, r3
 800d2e4:	f3bf 8f6f 	isb	sy
 800d2e8:	f3bf 8f4f 	dsb	sy
 800d2ec:	627b      	str	r3, [r7, #36]	; 0x24
 800d2ee:	e7fe      	b.n	800d2ee <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d103      	bne.n	800d2fe <xQueueGenericSendFromISR+0x3a>
 800d2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d101      	bne.n	800d302 <xQueueGenericSendFromISR+0x3e>
 800d2fe:	2301      	movs	r3, #1
 800d300:	e000      	b.n	800d304 <xQueueGenericSendFromISR+0x40>
 800d302:	2300      	movs	r3, #0
 800d304:	2b00      	cmp	r3, #0
 800d306:	d109      	bne.n	800d31c <xQueueGenericSendFromISR+0x58>
 800d308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d30c:	f383 8811 	msr	BASEPRI, r3
 800d310:	f3bf 8f6f 	isb	sy
 800d314:	f3bf 8f4f 	dsb	sy
 800d318:	623b      	str	r3, [r7, #32]
 800d31a:	e7fe      	b.n	800d31a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	2b02      	cmp	r3, #2
 800d320:	d103      	bne.n	800d32a <xQueueGenericSendFromISR+0x66>
 800d322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d326:	2b01      	cmp	r3, #1
 800d328:	d101      	bne.n	800d32e <xQueueGenericSendFromISR+0x6a>
 800d32a:	2301      	movs	r3, #1
 800d32c:	e000      	b.n	800d330 <xQueueGenericSendFromISR+0x6c>
 800d32e:	2300      	movs	r3, #0
 800d330:	2b00      	cmp	r3, #0
 800d332:	d109      	bne.n	800d348 <xQueueGenericSendFromISR+0x84>
 800d334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d338:	f383 8811 	msr	BASEPRI, r3
 800d33c:	f3bf 8f6f 	isb	sy
 800d340:	f3bf 8f4f 	dsb	sy
 800d344:	61fb      	str	r3, [r7, #28]
 800d346:	e7fe      	b.n	800d346 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d348:	f002 f934 	bl	800f5b4 <vPortValidateInterruptPriority>
	__asm volatile
 800d34c:	f3ef 8211 	mrs	r2, BASEPRI
 800d350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d354:	f383 8811 	msr	BASEPRI, r3
 800d358:	f3bf 8f6f 	isb	sy
 800d35c:	f3bf 8f4f 	dsb	sy
 800d360:	61ba      	str	r2, [r7, #24]
 800d362:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d364:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d366:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d370:	429a      	cmp	r2, r3
 800d372:	d302      	bcc.n	800d37a <xQueueGenericSendFromISR+0xb6>
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	2b02      	cmp	r3, #2
 800d378:	d12c      	bne.n	800d3d4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d37c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d380:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d384:	683a      	ldr	r2, [r7, #0]
 800d386:	68b9      	ldr	r1, [r7, #8]
 800d388:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d38a:	f000 f9aa 	bl	800d6e2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d38e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d396:	d112      	bne.n	800d3be <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d016      	beq.n	800d3ce <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a2:	3324      	adds	r3, #36	; 0x24
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f000 fff9 	bl	800e39c <xTaskRemoveFromEventList>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d00e      	beq.n	800d3ce <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d00b      	beq.n	800d3ce <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	601a      	str	r2, [r3, #0]
 800d3bc:	e007      	b.n	800d3ce <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d3be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	b2db      	uxtb	r3, r3
 800d3c6:	b25a      	sxtb	r2, r3
 800d3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d3d2:	e001      	b.n	800d3d8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	637b      	str	r3, [r7, #52]	; 0x34
 800d3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3da:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3738      	adds	r7, #56	; 0x38
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b08c      	sub	sp, #48	; 0x30
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d402:	2b00      	cmp	r3, #0
 800d404:	d109      	bne.n	800d41a <xQueueReceive+0x2e>
	__asm volatile
 800d406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d40a:	f383 8811 	msr	BASEPRI, r3
 800d40e:	f3bf 8f6f 	isb	sy
 800d412:	f3bf 8f4f 	dsb	sy
 800d416:	623b      	str	r3, [r7, #32]
 800d418:	e7fe      	b.n	800d418 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d103      	bne.n	800d428 <xQueueReceive+0x3c>
 800d420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d424:	2b00      	cmp	r3, #0
 800d426:	d101      	bne.n	800d42c <xQueueReceive+0x40>
 800d428:	2301      	movs	r3, #1
 800d42a:	e000      	b.n	800d42e <xQueueReceive+0x42>
 800d42c:	2300      	movs	r3, #0
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d109      	bne.n	800d446 <xQueueReceive+0x5a>
 800d432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d436:	f383 8811 	msr	BASEPRI, r3
 800d43a:	f3bf 8f6f 	isb	sy
 800d43e:	f3bf 8f4f 	dsb	sy
 800d442:	61fb      	str	r3, [r7, #28]
 800d444:	e7fe      	b.n	800d444 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d446:	f001 f95f 	bl	800e708 <xTaskGetSchedulerState>
 800d44a:	4603      	mov	r3, r0
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d102      	bne.n	800d456 <xQueueReceive+0x6a>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d101      	bne.n	800d45a <xQueueReceive+0x6e>
 800d456:	2301      	movs	r3, #1
 800d458:	e000      	b.n	800d45c <xQueueReceive+0x70>
 800d45a:	2300      	movs	r3, #0
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d109      	bne.n	800d474 <xQueueReceive+0x88>
 800d460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d464:	f383 8811 	msr	BASEPRI, r3
 800d468:	f3bf 8f6f 	isb	sy
 800d46c:	f3bf 8f4f 	dsb	sy
 800d470:	61bb      	str	r3, [r7, #24]
 800d472:	e7fe      	b.n	800d472 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d474:	f001 ffc2 	bl	800f3fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d47a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d47c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d480:	2b00      	cmp	r3, #0
 800d482:	d01f      	beq.n	800d4c4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d484:	68b9      	ldr	r1, [r7, #8]
 800d486:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d488:	f000 f995 	bl	800d7b6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48e:	1e5a      	subs	r2, r3, #1
 800d490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d492:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d496:	691b      	ldr	r3, [r3, #16]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d00f      	beq.n	800d4bc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d49e:	3310      	adds	r3, #16
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f000 ff7b 	bl	800e39c <xTaskRemoveFromEventList>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d007      	beq.n	800d4bc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d4ac:	4b3c      	ldr	r3, [pc, #240]	; (800d5a0 <xQueueReceive+0x1b4>)
 800d4ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4b2:	601a      	str	r2, [r3, #0]
 800d4b4:	f3bf 8f4f 	dsb	sy
 800d4b8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d4bc:	f001 ffcc 	bl	800f458 <vPortExitCritical>
				return pdPASS;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	e069      	b.n	800d598 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d103      	bne.n	800d4d2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d4ca:	f001 ffc5 	bl	800f458 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	e062      	b.n	800d598 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d106      	bne.n	800d4e6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d4d8:	f107 0310 	add.w	r3, r7, #16
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f000 ffbf 	bl	800e460 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d4e6:	f001 ffb7 	bl	800f458 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d4ea:	f000 fd1f 	bl	800df2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d4ee:	f001 ff85 	bl	800f3fc <vPortEnterCritical>
 800d4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4f8:	b25b      	sxtb	r3, r3
 800d4fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4fe:	d103      	bne.n	800d508 <xQueueReceive+0x11c>
 800d500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d502:	2200      	movs	r2, #0
 800d504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d50a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d50e:	b25b      	sxtb	r3, r3
 800d510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d514:	d103      	bne.n	800d51e <xQueueReceive+0x132>
 800d516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d518:	2200      	movs	r2, #0
 800d51a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d51e:	f001 ff9b 	bl	800f458 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d522:	1d3a      	adds	r2, r7, #4
 800d524:	f107 0310 	add.w	r3, r7, #16
 800d528:	4611      	mov	r1, r2
 800d52a:	4618      	mov	r0, r3
 800d52c:	f000 ffae 	bl	800e48c <xTaskCheckForTimeOut>
 800d530:	4603      	mov	r3, r0
 800d532:	2b00      	cmp	r3, #0
 800d534:	d123      	bne.n	800d57e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d538:	f000 f9b5 	bl	800d8a6 <prvIsQueueEmpty>
 800d53c:	4603      	mov	r3, r0
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d017      	beq.n	800d572 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d544:	3324      	adds	r3, #36	; 0x24
 800d546:	687a      	ldr	r2, [r7, #4]
 800d548:	4611      	mov	r1, r2
 800d54a:	4618      	mov	r0, r3
 800d54c:	f000 fed8 	bl	800e300 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d552:	f000 f956 	bl	800d802 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d556:	f000 fcf7 	bl	800df48 <xTaskResumeAll>
 800d55a:	4603      	mov	r3, r0
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d189      	bne.n	800d474 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800d560:	4b0f      	ldr	r3, [pc, #60]	; (800d5a0 <xQueueReceive+0x1b4>)
 800d562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d566:	601a      	str	r2, [r3, #0]
 800d568:	f3bf 8f4f 	dsb	sy
 800d56c:	f3bf 8f6f 	isb	sy
 800d570:	e780      	b.n	800d474 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d574:	f000 f945 	bl	800d802 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d578:	f000 fce6 	bl	800df48 <xTaskResumeAll>
 800d57c:	e77a      	b.n	800d474 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d57e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d580:	f000 f93f 	bl	800d802 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d584:	f000 fce0 	bl	800df48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d58a:	f000 f98c 	bl	800d8a6 <prvIsQueueEmpty>
 800d58e:	4603      	mov	r3, r0
 800d590:	2b00      	cmp	r3, #0
 800d592:	f43f af6f 	beq.w	800d474 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d596:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3730      	adds	r7, #48	; 0x30
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}
 800d5a0:	e000ed04 	.word	0xe000ed04

0800d5a4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b08e      	sub	sp, #56	; 0x38
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	60f8      	str	r0, [r7, #12]
 800d5ac:	60b9      	str	r1, [r7, #8]
 800d5ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d109      	bne.n	800d5ce <xQueueReceiveFromISR+0x2a>
 800d5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5be:	f383 8811 	msr	BASEPRI, r3
 800d5c2:	f3bf 8f6f 	isb	sy
 800d5c6:	f3bf 8f4f 	dsb	sy
 800d5ca:	623b      	str	r3, [r7, #32]
 800d5cc:	e7fe      	b.n	800d5cc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d103      	bne.n	800d5dc <xQueueReceiveFromISR+0x38>
 800d5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d101      	bne.n	800d5e0 <xQueueReceiveFromISR+0x3c>
 800d5dc:	2301      	movs	r3, #1
 800d5de:	e000      	b.n	800d5e2 <xQueueReceiveFromISR+0x3e>
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d109      	bne.n	800d5fa <xQueueReceiveFromISR+0x56>
 800d5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ea:	f383 8811 	msr	BASEPRI, r3
 800d5ee:	f3bf 8f6f 	isb	sy
 800d5f2:	f3bf 8f4f 	dsb	sy
 800d5f6:	61fb      	str	r3, [r7, #28]
 800d5f8:	e7fe      	b.n	800d5f8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d5fa:	f001 ffdb 	bl	800f5b4 <vPortValidateInterruptPriority>
	__asm volatile
 800d5fe:	f3ef 8211 	mrs	r2, BASEPRI
 800d602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d606:	f383 8811 	msr	BASEPRI, r3
 800d60a:	f3bf 8f6f 	isb	sy
 800d60e:	f3bf 8f4f 	dsb	sy
 800d612:	61ba      	str	r2, [r7, #24]
 800d614:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d616:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d618:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d61e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d622:	2b00      	cmp	r3, #0
 800d624:	d02f      	beq.n	800d686 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d628:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d62c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d630:	68b9      	ldr	r1, [r7, #8]
 800d632:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d634:	f000 f8bf 	bl	800d7b6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63a:	1e5a      	subs	r2, r3, #1
 800d63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d63e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d640:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d648:	d112      	bne.n	800d670 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d64c:	691b      	ldr	r3, [r3, #16]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d016      	beq.n	800d680 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d654:	3310      	adds	r3, #16
 800d656:	4618      	mov	r0, r3
 800d658:	f000 fea0 	bl	800e39c <xTaskRemoveFromEventList>
 800d65c:	4603      	mov	r3, r0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d00e      	beq.n	800d680 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d00b      	beq.n	800d680 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2201      	movs	r2, #1
 800d66c:	601a      	str	r2, [r3, #0]
 800d66e:	e007      	b.n	800d680 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d674:	3301      	adds	r3, #1
 800d676:	b2db      	uxtb	r3, r3
 800d678:	b25a      	sxtb	r2, r3
 800d67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d67c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d680:	2301      	movs	r3, #1
 800d682:	637b      	str	r3, [r7, #52]	; 0x34
 800d684:	e001      	b.n	800d68a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800d686:	2300      	movs	r3, #0
 800d688:	637b      	str	r3, [r7, #52]	; 0x34
 800d68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d68c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d696:	4618      	mov	r0, r3
 800d698:	3738      	adds	r7, #56	; 0x38
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}

0800d69e <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800d69e:	b580      	push	{r7, lr}
 800d6a0:	b086      	sub	sp, #24
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d109      	bne.n	800d6c4 <uxQueueSpacesAvailable+0x26>
	__asm volatile
 800d6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b4:	f383 8811 	msr	BASEPRI, r3
 800d6b8:	f3bf 8f6f 	isb	sy
 800d6bc:	f3bf 8f4f 	dsb	sy
 800d6c0:	60fb      	str	r3, [r7, #12]
 800d6c2:	e7fe      	b.n	800d6c2 <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 800d6c4:	f001 fe9a 	bl	800f3fc <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6d0:	1ad3      	subs	r3, r2, r3
 800d6d2:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800d6d4:	f001 fec0 	bl	800f458 <vPortExitCritical>

	return uxReturn;
 800d6d8:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3718      	adds	r7, #24
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	bd80      	pop	{r7, pc}

0800d6e2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d6e2:	b580      	push	{r7, lr}
 800d6e4:	b086      	sub	sp, #24
 800d6e6:	af00      	add	r7, sp, #0
 800d6e8:	60f8      	str	r0, [r7, #12]
 800d6ea:	60b9      	str	r1, [r7, #8]
 800d6ec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6f6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d10d      	bne.n	800d71c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d14d      	bne.n	800d7a4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	689b      	ldr	r3, [r3, #8]
 800d70c:	4618      	mov	r0, r3
 800d70e:	f001 f819 	bl	800e744 <xTaskPriorityDisinherit>
 800d712:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	2200      	movs	r2, #0
 800d718:	609a      	str	r2, [r3, #8]
 800d71a:	e043      	b.n	800d7a4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d119      	bne.n	800d756 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	6858      	ldr	r0, [r3, #4]
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d72a:	461a      	mov	r2, r3
 800d72c:	68b9      	ldr	r1, [r7, #8]
 800d72e:	f009 f919 	bl	8016964 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	685a      	ldr	r2, [r3, #4]
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d73a:	441a      	add	r2, r3
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	685a      	ldr	r2, [r3, #4]
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	689b      	ldr	r3, [r3, #8]
 800d748:	429a      	cmp	r2, r3
 800d74a:	d32b      	bcc.n	800d7a4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	681a      	ldr	r2, [r3, #0]
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	605a      	str	r2, [r3, #4]
 800d754:	e026      	b.n	800d7a4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	68d8      	ldr	r0, [r3, #12]
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d75e:	461a      	mov	r2, r3
 800d760:	68b9      	ldr	r1, [r7, #8]
 800d762:	f009 f8ff 	bl	8016964 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	68da      	ldr	r2, [r3, #12]
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d76e:	425b      	negs	r3, r3
 800d770:	441a      	add	r2, r3
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	68da      	ldr	r2, [r3, #12]
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	429a      	cmp	r2, r3
 800d780:	d207      	bcs.n	800d792 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	689a      	ldr	r2, [r3, #8]
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d78a:	425b      	negs	r3, r3
 800d78c:	441a      	add	r2, r3
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2b02      	cmp	r3, #2
 800d796:	d105      	bne.n	800d7a4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d798:	693b      	ldr	r3, [r7, #16]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d002      	beq.n	800d7a4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	3b01      	subs	r3, #1
 800d7a2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	1c5a      	adds	r2, r3, #1
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d7ac:	697b      	ldr	r3, [r7, #20]
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3718      	adds	r7, #24
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}

0800d7b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d7b6:	b580      	push	{r7, lr}
 800d7b8:	b082      	sub	sp, #8
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	6078      	str	r0, [r7, #4]
 800d7be:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d018      	beq.n	800d7fa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	68da      	ldr	r2, [r3, #12]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7d0:	441a      	add	r2, r3
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	68da      	ldr	r2, [r3, #12]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	689b      	ldr	r3, [r3, #8]
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d303      	bcc.n	800d7ea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681a      	ldr	r2, [r3, #0]
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	68d9      	ldr	r1, [r3, #12]
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	6838      	ldr	r0, [r7, #0]
 800d7f6:	f009 f8b5 	bl	8016964 <memcpy>
	}
}
 800d7fa:	bf00      	nop
 800d7fc:	3708      	adds	r7, #8
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}

0800d802 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d802:	b580      	push	{r7, lr}
 800d804:	b084      	sub	sp, #16
 800d806:	af00      	add	r7, sp, #0
 800d808:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d80a:	f001 fdf7 	bl	800f3fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d814:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d816:	e011      	b.n	800d83c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d012      	beq.n	800d846 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	3324      	adds	r3, #36	; 0x24
 800d824:	4618      	mov	r0, r3
 800d826:	f000 fdb9 	bl	800e39c <xTaskRemoveFromEventList>
 800d82a:	4603      	mov	r3, r0
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d001      	beq.n	800d834 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d830:	f000 fe8c 	bl	800e54c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d834:	7bfb      	ldrb	r3, [r7, #15]
 800d836:	3b01      	subs	r3, #1
 800d838:	b2db      	uxtb	r3, r3
 800d83a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d83c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d840:	2b00      	cmp	r3, #0
 800d842:	dce9      	bgt.n	800d818 <prvUnlockQueue+0x16>
 800d844:	e000      	b.n	800d848 <prvUnlockQueue+0x46>
					break;
 800d846:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	22ff      	movs	r2, #255	; 0xff
 800d84c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d850:	f001 fe02 	bl	800f458 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d854:	f001 fdd2 	bl	800f3fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d85e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d860:	e011      	b.n	800d886 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	691b      	ldr	r3, [r3, #16]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d012      	beq.n	800d890 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	3310      	adds	r3, #16
 800d86e:	4618      	mov	r0, r3
 800d870:	f000 fd94 	bl	800e39c <xTaskRemoveFromEventList>
 800d874:	4603      	mov	r3, r0
 800d876:	2b00      	cmp	r3, #0
 800d878:	d001      	beq.n	800d87e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d87a:	f000 fe67 	bl	800e54c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d87e:	7bbb      	ldrb	r3, [r7, #14]
 800d880:	3b01      	subs	r3, #1
 800d882:	b2db      	uxtb	r3, r3
 800d884:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d886:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	dce9      	bgt.n	800d862 <prvUnlockQueue+0x60>
 800d88e:	e000      	b.n	800d892 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d890:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	22ff      	movs	r2, #255	; 0xff
 800d896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d89a:	f001 fddd 	bl	800f458 <vPortExitCritical>
}
 800d89e:	bf00      	nop
 800d8a0:	3710      	adds	r7, #16
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	bd80      	pop	{r7, pc}

0800d8a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d8a6:	b580      	push	{r7, lr}
 800d8a8:	b084      	sub	sp, #16
 800d8aa:	af00      	add	r7, sp, #0
 800d8ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d8ae:	f001 fda5 	bl	800f3fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d102      	bne.n	800d8c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	60fb      	str	r3, [r7, #12]
 800d8be:	e001      	b.n	800d8c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d8c4:	f001 fdc8 	bl	800f458 <vPortExitCritical>

	return xReturn;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3710      	adds	r7, #16
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}

0800d8d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d8d2:	b580      	push	{r7, lr}
 800d8d4:	b084      	sub	sp, #16
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d8da:	f001 fd8f 	bl	800f3fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	d102      	bne.n	800d8f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	60fb      	str	r3, [r7, #12]
 800d8ee:	e001      	b.n	800d8f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d8f4:	f001 fdb0 	bl	800f458 <vPortExitCritical>

	return xReturn;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3710      	adds	r7, #16
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
	...

0800d904 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d904:	b480      	push	{r7}
 800d906:	b085      	sub	sp, #20
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d90e:	2300      	movs	r3, #0
 800d910:	60fb      	str	r3, [r7, #12]
 800d912:	e014      	b.n	800d93e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d914:	4a0e      	ldr	r2, [pc, #56]	; (800d950 <vQueueAddToRegistry+0x4c>)
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d10b      	bne.n	800d938 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d920:	490b      	ldr	r1, [pc, #44]	; (800d950 <vQueueAddToRegistry+0x4c>)
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	683a      	ldr	r2, [r7, #0]
 800d926:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d92a:	4a09      	ldr	r2, [pc, #36]	; (800d950 <vQueueAddToRegistry+0x4c>)
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	00db      	lsls	r3, r3, #3
 800d930:	4413      	add	r3, r2
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d936:	e005      	b.n	800d944 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	3301      	adds	r3, #1
 800d93c:	60fb      	str	r3, [r7, #12]
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	2b07      	cmp	r3, #7
 800d942:	d9e7      	bls.n	800d914 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d944:	bf00      	nop
 800d946:	3714      	adds	r7, #20
 800d948:	46bd      	mov	sp, r7
 800d94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94e:	4770      	bx	lr
 800d950:	20006f04 	.word	0x20006f04

0800d954 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d954:	b580      	push	{r7, lr}
 800d956:	b086      	sub	sp, #24
 800d958:	af00      	add	r7, sp, #0
 800d95a:	60f8      	str	r0, [r7, #12]
 800d95c:	60b9      	str	r1, [r7, #8]
 800d95e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d964:	f001 fd4a 	bl	800f3fc <vPortEnterCritical>
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d96e:	b25b      	sxtb	r3, r3
 800d970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d974:	d103      	bne.n	800d97e <vQueueWaitForMessageRestricted+0x2a>
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	2200      	movs	r2, #0
 800d97a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d984:	b25b      	sxtb	r3, r3
 800d986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d98a:	d103      	bne.n	800d994 <vQueueWaitForMessageRestricted+0x40>
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	2200      	movs	r2, #0
 800d990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d994:	f001 fd60 	bl	800f458 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d106      	bne.n	800d9ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	3324      	adds	r3, #36	; 0x24
 800d9a4:	687a      	ldr	r2, [r7, #4]
 800d9a6:	68b9      	ldr	r1, [r7, #8]
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f000 fccd 	bl	800e348 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d9ae:	6978      	ldr	r0, [r7, #20]
 800d9b0:	f7ff ff27 	bl	800d802 <prvUnlockQueue>
	}
 800d9b4:	bf00      	nop
 800d9b6:	3718      	adds	r7, #24
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}

0800d9bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b08e      	sub	sp, #56	; 0x38
 800d9c0:	af04      	add	r7, sp, #16
 800d9c2:	60f8      	str	r0, [r7, #12]
 800d9c4:	60b9      	str	r1, [r7, #8]
 800d9c6:	607a      	str	r2, [r7, #4]
 800d9c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d9ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d109      	bne.n	800d9e4 <xTaskCreateStatic+0x28>
 800d9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d4:	f383 8811 	msr	BASEPRI, r3
 800d9d8:	f3bf 8f6f 	isb	sy
 800d9dc:	f3bf 8f4f 	dsb	sy
 800d9e0:	623b      	str	r3, [r7, #32]
 800d9e2:	e7fe      	b.n	800d9e2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800d9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d109      	bne.n	800d9fe <xTaskCreateStatic+0x42>
 800d9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ee:	f383 8811 	msr	BASEPRI, r3
 800d9f2:	f3bf 8f6f 	isb	sy
 800d9f6:	f3bf 8f4f 	dsb	sy
 800d9fa:	61fb      	str	r3, [r7, #28]
 800d9fc:	e7fe      	b.n	800d9fc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d9fe:	2364      	movs	r3, #100	; 0x64
 800da00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	2b64      	cmp	r3, #100	; 0x64
 800da06:	d009      	beq.n	800da1c <xTaskCreateStatic+0x60>
 800da08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da0c:	f383 8811 	msr	BASEPRI, r3
 800da10:	f3bf 8f6f 	isb	sy
 800da14:	f3bf 8f4f 	dsb	sy
 800da18:	61bb      	str	r3, [r7, #24]
 800da1a:	e7fe      	b.n	800da1a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800da1c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800da1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da20:	2b00      	cmp	r3, #0
 800da22:	d01e      	beq.n	800da62 <xTaskCreateStatic+0xa6>
 800da24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da26:	2b00      	cmp	r3, #0
 800da28:	d01b      	beq.n	800da62 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800da2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da2c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800da2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da32:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800da34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da36:	2202      	movs	r2, #2
 800da38:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800da3c:	2300      	movs	r3, #0
 800da3e:	9303      	str	r3, [sp, #12]
 800da40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da42:	9302      	str	r3, [sp, #8]
 800da44:	f107 0314 	add.w	r3, r7, #20
 800da48:	9301      	str	r3, [sp, #4]
 800da4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da4c:	9300      	str	r3, [sp, #0]
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	687a      	ldr	r2, [r7, #4]
 800da52:	68b9      	ldr	r1, [r7, #8]
 800da54:	68f8      	ldr	r0, [r7, #12]
 800da56:	f000 f850 	bl	800dafa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800da5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da5c:	f000 f8e2 	bl	800dc24 <prvAddNewTaskToReadyList>
 800da60:	e001      	b.n	800da66 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800da62:	2300      	movs	r3, #0
 800da64:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800da66:	697b      	ldr	r3, [r7, #20]
	}
 800da68:	4618      	mov	r0, r3
 800da6a:	3728      	adds	r7, #40	; 0x28
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800da70:	b580      	push	{r7, lr}
 800da72:	b08c      	sub	sp, #48	; 0x30
 800da74:	af04      	add	r7, sp, #16
 800da76:	60f8      	str	r0, [r7, #12]
 800da78:	60b9      	str	r1, [r7, #8]
 800da7a:	603b      	str	r3, [r7, #0]
 800da7c:	4613      	mov	r3, r2
 800da7e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800da80:	88fb      	ldrh	r3, [r7, #6]
 800da82:	009b      	lsls	r3, r3, #2
 800da84:	4618      	mov	r0, r3
 800da86:	f001 fdd3 	bl	800f630 <pvPortMalloc>
 800da8a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d00e      	beq.n	800dab0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800da92:	2064      	movs	r0, #100	; 0x64
 800da94:	f001 fdcc 	bl	800f630 <pvPortMalloc>
 800da98:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800da9a:	69fb      	ldr	r3, [r7, #28]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d003      	beq.n	800daa8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800daa0:	69fb      	ldr	r3, [r7, #28]
 800daa2:	697a      	ldr	r2, [r7, #20]
 800daa4:	631a      	str	r2, [r3, #48]	; 0x30
 800daa6:	e005      	b.n	800dab4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800daa8:	6978      	ldr	r0, [r7, #20]
 800daaa:	f001 fe83 	bl	800f7b4 <vPortFree>
 800daae:	e001      	b.n	800dab4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dab0:	2300      	movs	r3, #0
 800dab2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dab4:	69fb      	ldr	r3, [r7, #28]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d017      	beq.n	800daea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800daba:	69fb      	ldr	r3, [r7, #28]
 800dabc:	2200      	movs	r2, #0
 800dabe:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dac2:	88fa      	ldrh	r2, [r7, #6]
 800dac4:	2300      	movs	r3, #0
 800dac6:	9303      	str	r3, [sp, #12]
 800dac8:	69fb      	ldr	r3, [r7, #28]
 800daca:	9302      	str	r3, [sp, #8]
 800dacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dace:	9301      	str	r3, [sp, #4]
 800dad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad2:	9300      	str	r3, [sp, #0]
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	68b9      	ldr	r1, [r7, #8]
 800dad8:	68f8      	ldr	r0, [r7, #12]
 800dada:	f000 f80e 	bl	800dafa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dade:	69f8      	ldr	r0, [r7, #28]
 800dae0:	f000 f8a0 	bl	800dc24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dae4:	2301      	movs	r3, #1
 800dae6:	61bb      	str	r3, [r7, #24]
 800dae8:	e002      	b.n	800daf0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800daea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800daee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800daf0:	69bb      	ldr	r3, [r7, #24]
	}
 800daf2:	4618      	mov	r0, r3
 800daf4:	3720      	adds	r7, #32
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}

0800dafa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dafa:	b580      	push	{r7, lr}
 800dafc:	b088      	sub	sp, #32
 800dafe:	af00      	add	r7, sp, #0
 800db00:	60f8      	str	r0, [r7, #12]
 800db02:	60b9      	str	r1, [r7, #8]
 800db04:	607a      	str	r2, [r7, #4]
 800db06:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800db08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db0a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	009b      	lsls	r3, r3, #2
 800db10:	461a      	mov	r2, r3
 800db12:	21a5      	movs	r1, #165	; 0xa5
 800db14:	f008 ff31 	bl	801697a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800db18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800db22:	3b01      	subs	r3, #1
 800db24:	009b      	lsls	r3, r3, #2
 800db26:	4413      	add	r3, r2
 800db28:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800db2a:	69bb      	ldr	r3, [r7, #24]
 800db2c:	f023 0307 	bic.w	r3, r3, #7
 800db30:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800db32:	69bb      	ldr	r3, [r7, #24]
 800db34:	f003 0307 	and.w	r3, r3, #7
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d009      	beq.n	800db50 <prvInitialiseNewTask+0x56>
 800db3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db40:	f383 8811 	msr	BASEPRI, r3
 800db44:	f3bf 8f6f 	isb	sy
 800db48:	f3bf 8f4f 	dsb	sy
 800db4c:	617b      	str	r3, [r7, #20]
 800db4e:	e7fe      	b.n	800db4e <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800db50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db52:	69ba      	ldr	r2, [r7, #24]
 800db54:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d01f      	beq.n	800db9c <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db5c:	2300      	movs	r3, #0
 800db5e:	61fb      	str	r3, [r7, #28]
 800db60:	e012      	b.n	800db88 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800db62:	68ba      	ldr	r2, [r7, #8]
 800db64:	69fb      	ldr	r3, [r7, #28]
 800db66:	4413      	add	r3, r2
 800db68:	7819      	ldrb	r1, [r3, #0]
 800db6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db6c:	69fb      	ldr	r3, [r7, #28]
 800db6e:	4413      	add	r3, r2
 800db70:	3334      	adds	r3, #52	; 0x34
 800db72:	460a      	mov	r2, r1
 800db74:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800db76:	68ba      	ldr	r2, [r7, #8]
 800db78:	69fb      	ldr	r3, [r7, #28]
 800db7a:	4413      	add	r3, r2
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d006      	beq.n	800db90 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800db82:	69fb      	ldr	r3, [r7, #28]
 800db84:	3301      	adds	r3, #1
 800db86:	61fb      	str	r3, [r7, #28]
 800db88:	69fb      	ldr	r3, [r7, #28]
 800db8a:	2b0f      	cmp	r3, #15
 800db8c:	d9e9      	bls.n	800db62 <prvInitialiseNewTask+0x68>
 800db8e:	e000      	b.n	800db92 <prvInitialiseNewTask+0x98>
			{
				break;
 800db90:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800db92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db94:	2200      	movs	r2, #0
 800db96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800db9a:	e003      	b.n	800dba4 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800db9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9e:	2200      	movs	r2, #0
 800dba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba6:	2b37      	cmp	r3, #55	; 0x37
 800dba8:	d901      	bls.n	800dbae <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dbaa:	2337      	movs	r3, #55	; 0x37
 800dbac:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbb2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbb8:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800dbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc2:	3304      	adds	r3, #4
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7ff f8b1 	bl	800cd2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbcc:	3318      	adds	r3, #24
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f7ff f8ac 	bl	800cd2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbd8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbdc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dbe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbe8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800dbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbec:	2200      	movs	r2, #0
 800dbee:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dbf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dbfe:	683a      	ldr	r2, [r7, #0]
 800dc00:	68f9      	ldr	r1, [r7, #12]
 800dc02:	69b8      	ldr	r0, [r7, #24]
 800dc04:	f001 fad6 	bl	800f1b4 <pxPortInitialiseStack>
 800dc08:	4602      	mov	r2, r0
 800dc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc0c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d002      	beq.n	800dc1a <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dc1a:	bf00      	nop
 800dc1c:	3720      	adds	r7, #32
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}
	...

0800dc24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b082      	sub	sp, #8
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dc2c:	f001 fbe6 	bl	800f3fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dc30:	4b2d      	ldr	r3, [pc, #180]	; (800dce8 <prvAddNewTaskToReadyList+0xc4>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	3301      	adds	r3, #1
 800dc36:	4a2c      	ldr	r2, [pc, #176]	; (800dce8 <prvAddNewTaskToReadyList+0xc4>)
 800dc38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800dc3a:	4b2c      	ldr	r3, [pc, #176]	; (800dcec <prvAddNewTaskToReadyList+0xc8>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d109      	bne.n	800dc56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dc42:	4a2a      	ldr	r2, [pc, #168]	; (800dcec <prvAddNewTaskToReadyList+0xc8>)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dc48:	4b27      	ldr	r3, [pc, #156]	; (800dce8 <prvAddNewTaskToReadyList+0xc4>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	2b01      	cmp	r3, #1
 800dc4e:	d110      	bne.n	800dc72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dc50:	f000 fca0 	bl	800e594 <prvInitialiseTaskLists>
 800dc54:	e00d      	b.n	800dc72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dc56:	4b26      	ldr	r3, [pc, #152]	; (800dcf0 <prvAddNewTaskToReadyList+0xcc>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d109      	bne.n	800dc72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dc5e:	4b23      	ldr	r3, [pc, #140]	; (800dcec <prvAddNewTaskToReadyList+0xc8>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	d802      	bhi.n	800dc72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dc6c:	4a1f      	ldr	r2, [pc, #124]	; (800dcec <prvAddNewTaskToReadyList+0xc8>)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dc72:	4b20      	ldr	r3, [pc, #128]	; (800dcf4 <prvAddNewTaskToReadyList+0xd0>)
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	3301      	adds	r3, #1
 800dc78:	4a1e      	ldr	r2, [pc, #120]	; (800dcf4 <prvAddNewTaskToReadyList+0xd0>)
 800dc7a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dc7c:	4b1d      	ldr	r3, [pc, #116]	; (800dcf4 <prvAddNewTaskToReadyList+0xd0>)
 800dc7e:	681a      	ldr	r2, [r3, #0]
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc88:	4b1b      	ldr	r3, [pc, #108]	; (800dcf8 <prvAddNewTaskToReadyList+0xd4>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	d903      	bls.n	800dc98 <prvAddNewTaskToReadyList+0x74>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc94:	4a18      	ldr	r2, [pc, #96]	; (800dcf8 <prvAddNewTaskToReadyList+0xd4>)
 800dc96:	6013      	str	r3, [r2, #0]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc9c:	4613      	mov	r3, r2
 800dc9e:	009b      	lsls	r3, r3, #2
 800dca0:	4413      	add	r3, r2
 800dca2:	009b      	lsls	r3, r3, #2
 800dca4:	4a15      	ldr	r2, [pc, #84]	; (800dcfc <prvAddNewTaskToReadyList+0xd8>)
 800dca6:	441a      	add	r2, r3
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	3304      	adds	r3, #4
 800dcac:	4619      	mov	r1, r3
 800dcae:	4610      	mov	r0, r2
 800dcb0:	f7ff f849 	bl	800cd46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dcb4:	f001 fbd0 	bl	800f458 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dcb8:	4b0d      	ldr	r3, [pc, #52]	; (800dcf0 <prvAddNewTaskToReadyList+0xcc>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d00e      	beq.n	800dcde <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dcc0:	4b0a      	ldr	r3, [pc, #40]	; (800dcec <prvAddNewTaskToReadyList+0xc8>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d207      	bcs.n	800dcde <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800dcce:	4b0c      	ldr	r3, [pc, #48]	; (800dd00 <prvAddNewTaskToReadyList+0xdc>)
 800dcd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcd4:	601a      	str	r2, [r3, #0]
 800dcd6:	f3bf 8f4f 	dsb	sy
 800dcda:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dcde:	bf00      	nop
 800dce0:	3708      	adds	r7, #8
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	200011c4 	.word	0x200011c4
 800dcec:	20000cf0 	.word	0x20000cf0
 800dcf0:	200011d0 	.word	0x200011d0
 800dcf4:	200011e0 	.word	0x200011e0
 800dcf8:	200011cc 	.word	0x200011cc
 800dcfc:	20000cf4 	.word	0x20000cf4
 800dd00:	e000ed04 	.word	0xe000ed04

0800dd04 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b08a      	sub	sp, #40	; 0x28
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
 800dd0c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d109      	bne.n	800dd2c <vTaskDelayUntil+0x28>
 800dd18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd1c:	f383 8811 	msr	BASEPRI, r3
 800dd20:	f3bf 8f6f 	isb	sy
 800dd24:	f3bf 8f4f 	dsb	sy
 800dd28:	617b      	str	r3, [r7, #20]
 800dd2a:	e7fe      	b.n	800dd2a <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d109      	bne.n	800dd46 <vTaskDelayUntil+0x42>
 800dd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd36:	f383 8811 	msr	BASEPRI, r3
 800dd3a:	f3bf 8f6f 	isb	sy
 800dd3e:	f3bf 8f4f 	dsb	sy
 800dd42:	613b      	str	r3, [r7, #16]
 800dd44:	e7fe      	b.n	800dd44 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800dd46:	4b29      	ldr	r3, [pc, #164]	; (800ddec <vTaskDelayUntil+0xe8>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d009      	beq.n	800dd62 <vTaskDelayUntil+0x5e>
 800dd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd52:	f383 8811 	msr	BASEPRI, r3
 800dd56:	f3bf 8f6f 	isb	sy
 800dd5a:	f3bf 8f4f 	dsb	sy
 800dd5e:	60fb      	str	r3, [r7, #12]
 800dd60:	e7fe      	b.n	800dd60 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800dd62:	f000 f8e3 	bl	800df2c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800dd66:	4b22      	ldr	r3, [pc, #136]	; (800ddf0 <vTaskDelayUntil+0xec>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	683a      	ldr	r2, [r7, #0]
 800dd72:	4413      	add	r3, r2
 800dd74:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	6a3a      	ldr	r2, [r7, #32]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d20b      	bcs.n	800dd98 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	69fa      	ldr	r2, [r7, #28]
 800dd86:	429a      	cmp	r2, r3
 800dd88:	d211      	bcs.n	800ddae <vTaskDelayUntil+0xaa>
 800dd8a:	69fa      	ldr	r2, [r7, #28]
 800dd8c:	6a3b      	ldr	r3, [r7, #32]
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d90d      	bls.n	800ddae <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800dd92:	2301      	movs	r3, #1
 800dd94:	627b      	str	r3, [r7, #36]	; 0x24
 800dd96:	e00a      	b.n	800ddae <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	69fa      	ldr	r2, [r7, #28]
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	d303      	bcc.n	800ddaa <vTaskDelayUntil+0xa6>
 800dda2:	69fa      	ldr	r2, [r7, #28]
 800dda4:	6a3b      	ldr	r3, [r7, #32]
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d901      	bls.n	800ddae <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800ddaa:	2301      	movs	r3, #1
 800ddac:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	69fa      	ldr	r2, [r7, #28]
 800ddb2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800ddb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d006      	beq.n	800ddc8 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800ddba:	69fa      	ldr	r2, [r7, #28]
 800ddbc:	6a3b      	ldr	r3, [r7, #32]
 800ddbe:	1ad3      	subs	r3, r2, r3
 800ddc0:	2100      	movs	r1, #0
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f000 fe5c 	bl	800ea80 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800ddc8:	f000 f8be 	bl	800df48 <xTaskResumeAll>
 800ddcc:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ddce:	69bb      	ldr	r3, [r7, #24]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d107      	bne.n	800dde4 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800ddd4:	4b07      	ldr	r3, [pc, #28]	; (800ddf4 <vTaskDelayUntil+0xf0>)
 800ddd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddda:	601a      	str	r2, [r3, #0]
 800dddc:	f3bf 8f4f 	dsb	sy
 800dde0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dde4:	bf00      	nop
 800dde6:	3728      	adds	r7, #40	; 0x28
 800dde8:	46bd      	mov	sp, r7
 800ddea:	bd80      	pop	{r7, pc}
 800ddec:	200011ec 	.word	0x200011ec
 800ddf0:	200011c8 	.word	0x200011c8
 800ddf4:	e000ed04 	.word	0xe000ed04

0800ddf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b084      	sub	sp, #16
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800de00:	2300      	movs	r3, #0
 800de02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d016      	beq.n	800de38 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800de0a:	4b13      	ldr	r3, [pc, #76]	; (800de58 <vTaskDelay+0x60>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d009      	beq.n	800de26 <vTaskDelay+0x2e>
 800de12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de16:	f383 8811 	msr	BASEPRI, r3
 800de1a:	f3bf 8f6f 	isb	sy
 800de1e:	f3bf 8f4f 	dsb	sy
 800de22:	60bb      	str	r3, [r7, #8]
 800de24:	e7fe      	b.n	800de24 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800de26:	f000 f881 	bl	800df2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800de2a:	2100      	movs	r1, #0
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f000 fe27 	bl	800ea80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800de32:	f000 f889 	bl	800df48 <xTaskResumeAll>
 800de36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d107      	bne.n	800de4e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800de3e:	4b07      	ldr	r3, [pc, #28]	; (800de5c <vTaskDelay+0x64>)
 800de40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de44:	601a      	str	r2, [r3, #0]
 800de46:	f3bf 8f4f 	dsb	sy
 800de4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800de4e:	bf00      	nop
 800de50:	3710      	adds	r7, #16
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}
 800de56:	bf00      	nop
 800de58:	200011ec 	.word	0x200011ec
 800de5c:	e000ed04 	.word	0xe000ed04

0800de60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b08a      	sub	sp, #40	; 0x28
 800de64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800de66:	2300      	movs	r3, #0
 800de68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800de6a:	2300      	movs	r3, #0
 800de6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800de6e:	463a      	mov	r2, r7
 800de70:	1d39      	adds	r1, r7, #4
 800de72:	f107 0308 	add.w	r3, r7, #8
 800de76:	4618      	mov	r0, r3
 800de78:	f7fe ff04 	bl	800cc84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800de7c:	6839      	ldr	r1, [r7, #0]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	68ba      	ldr	r2, [r7, #8]
 800de82:	9202      	str	r2, [sp, #8]
 800de84:	9301      	str	r3, [sp, #4]
 800de86:	2300      	movs	r3, #0
 800de88:	9300      	str	r3, [sp, #0]
 800de8a:	2300      	movs	r3, #0
 800de8c:	460a      	mov	r2, r1
 800de8e:	4921      	ldr	r1, [pc, #132]	; (800df14 <vTaskStartScheduler+0xb4>)
 800de90:	4821      	ldr	r0, [pc, #132]	; (800df18 <vTaskStartScheduler+0xb8>)
 800de92:	f7ff fd93 	bl	800d9bc <xTaskCreateStatic>
 800de96:	4602      	mov	r2, r0
 800de98:	4b20      	ldr	r3, [pc, #128]	; (800df1c <vTaskStartScheduler+0xbc>)
 800de9a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800de9c:	4b1f      	ldr	r3, [pc, #124]	; (800df1c <vTaskStartScheduler+0xbc>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d002      	beq.n	800deaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dea4:	2301      	movs	r3, #1
 800dea6:	617b      	str	r3, [r7, #20]
 800dea8:	e001      	b.n	800deae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800deaa:	2300      	movs	r3, #0
 800deac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	2b01      	cmp	r3, #1
 800deb2:	d102      	bne.n	800deba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800deb4:	f000 fe38 	bl	800eb28 <xTimerCreateTimerTask>
 800deb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	2b01      	cmp	r3, #1
 800debe:	d117      	bne.n	800def0 <vTaskStartScheduler+0x90>
 800dec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec4:	f383 8811 	msr	BASEPRI, r3
 800dec8:	f3bf 8f6f 	isb	sy
 800decc:	f3bf 8f4f 	dsb	sy
 800ded0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ded2:	4b13      	ldr	r3, [pc, #76]	; (800df20 <vTaskStartScheduler+0xc0>)
 800ded4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ded8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800deda:	4b12      	ldr	r3, [pc, #72]	; (800df24 <vTaskStartScheduler+0xc4>)
 800dedc:	2201      	movs	r2, #1
 800dede:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dee0:	4b11      	ldr	r3, [pc, #68]	; (800df28 <vTaskStartScheduler+0xc8>)
 800dee2:	2200      	movs	r2, #0
 800dee4:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800dee6:	f7f2 fb87 	bl	80005f8 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800deea:	f001 f9e9 	bl	800f2c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800deee:	e00d      	b.n	800df0c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800def6:	d109      	bne.n	800df0c <vTaskStartScheduler+0xac>
 800def8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800defc:	f383 8811 	msr	BASEPRI, r3
 800df00:	f3bf 8f6f 	isb	sy
 800df04:	f3bf 8f4f 	dsb	sy
 800df08:	60fb      	str	r3, [r7, #12]
 800df0a:	e7fe      	b.n	800df0a <vTaskStartScheduler+0xaa>
}
 800df0c:	bf00      	nop
 800df0e:	3718      	adds	r7, #24
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}
 800df14:	08016c10 	.word	0x08016c10
 800df18:	0800e565 	.word	0x0800e565
 800df1c:	200011e8 	.word	0x200011e8
 800df20:	200011e4 	.word	0x200011e4
 800df24:	200011d0 	.word	0x200011d0
 800df28:	200011c8 	.word	0x200011c8

0800df2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800df2c:	b480      	push	{r7}
 800df2e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800df30:	4b04      	ldr	r3, [pc, #16]	; (800df44 <vTaskSuspendAll+0x18>)
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	3301      	adds	r3, #1
 800df36:	4a03      	ldr	r2, [pc, #12]	; (800df44 <vTaskSuspendAll+0x18>)
 800df38:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800df3a:	bf00      	nop
 800df3c:	46bd      	mov	sp, r7
 800df3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df42:	4770      	bx	lr
 800df44:	200011ec 	.word	0x200011ec

0800df48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b084      	sub	sp, #16
 800df4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800df4e:	2300      	movs	r3, #0
 800df50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800df52:	2300      	movs	r3, #0
 800df54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800df56:	4b41      	ldr	r3, [pc, #260]	; (800e05c <xTaskResumeAll+0x114>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d109      	bne.n	800df72 <xTaskResumeAll+0x2a>
 800df5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df62:	f383 8811 	msr	BASEPRI, r3
 800df66:	f3bf 8f6f 	isb	sy
 800df6a:	f3bf 8f4f 	dsb	sy
 800df6e:	603b      	str	r3, [r7, #0]
 800df70:	e7fe      	b.n	800df70 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800df72:	f001 fa43 	bl	800f3fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800df76:	4b39      	ldr	r3, [pc, #228]	; (800e05c <xTaskResumeAll+0x114>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	3b01      	subs	r3, #1
 800df7c:	4a37      	ldr	r2, [pc, #220]	; (800e05c <xTaskResumeAll+0x114>)
 800df7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df80:	4b36      	ldr	r3, [pc, #216]	; (800e05c <xTaskResumeAll+0x114>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d162      	bne.n	800e04e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800df88:	4b35      	ldr	r3, [pc, #212]	; (800e060 <xTaskResumeAll+0x118>)
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d05e      	beq.n	800e04e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800df90:	e02f      	b.n	800dff2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df92:	4b34      	ldr	r3, [pc, #208]	; (800e064 <xTaskResumeAll+0x11c>)
 800df94:	68db      	ldr	r3, [r3, #12]
 800df96:	68db      	ldr	r3, [r3, #12]
 800df98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	3318      	adds	r3, #24
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7fe ff2e 	bl	800ce00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	3304      	adds	r3, #4
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f7fe ff29 	bl	800ce00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfb2:	4b2d      	ldr	r3, [pc, #180]	; (800e068 <xTaskResumeAll+0x120>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d903      	bls.n	800dfc2 <xTaskResumeAll+0x7a>
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfbe:	4a2a      	ldr	r2, [pc, #168]	; (800e068 <xTaskResumeAll+0x120>)
 800dfc0:	6013      	str	r3, [r2, #0]
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfc6:	4613      	mov	r3, r2
 800dfc8:	009b      	lsls	r3, r3, #2
 800dfca:	4413      	add	r3, r2
 800dfcc:	009b      	lsls	r3, r3, #2
 800dfce:	4a27      	ldr	r2, [pc, #156]	; (800e06c <xTaskResumeAll+0x124>)
 800dfd0:	441a      	add	r2, r3
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	3304      	adds	r3, #4
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	4610      	mov	r0, r2
 800dfda:	f7fe feb4 	bl	800cd46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfe2:	4b23      	ldr	r3, [pc, #140]	; (800e070 <xTaskResumeAll+0x128>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d302      	bcc.n	800dff2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800dfec:	4b21      	ldr	r3, [pc, #132]	; (800e074 <xTaskResumeAll+0x12c>)
 800dfee:	2201      	movs	r2, #1
 800dff0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dff2:	4b1c      	ldr	r3, [pc, #112]	; (800e064 <xTaskResumeAll+0x11c>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d1cb      	bne.n	800df92 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d001      	beq.n	800e004 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e000:	f000 fb62 	bl	800e6c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e004:	4b1c      	ldr	r3, [pc, #112]	; (800e078 <xTaskResumeAll+0x130>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d010      	beq.n	800e032 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e010:	f000 f846 	bl	800e0a0 <xTaskIncrementTick>
 800e014:	4603      	mov	r3, r0
 800e016:	2b00      	cmp	r3, #0
 800e018:	d002      	beq.n	800e020 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e01a:	4b16      	ldr	r3, [pc, #88]	; (800e074 <xTaskResumeAll+0x12c>)
 800e01c:	2201      	movs	r2, #1
 800e01e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	3b01      	subs	r3, #1
 800e024:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d1f1      	bne.n	800e010 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800e02c:	4b12      	ldr	r3, [pc, #72]	; (800e078 <xTaskResumeAll+0x130>)
 800e02e:	2200      	movs	r2, #0
 800e030:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e032:	4b10      	ldr	r3, [pc, #64]	; (800e074 <xTaskResumeAll+0x12c>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d009      	beq.n	800e04e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e03a:	2301      	movs	r3, #1
 800e03c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e03e:	4b0f      	ldr	r3, [pc, #60]	; (800e07c <xTaskResumeAll+0x134>)
 800e040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e044:	601a      	str	r2, [r3, #0]
 800e046:	f3bf 8f4f 	dsb	sy
 800e04a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e04e:	f001 fa03 	bl	800f458 <vPortExitCritical>

	return xAlreadyYielded;
 800e052:	68bb      	ldr	r3, [r7, #8]
}
 800e054:	4618      	mov	r0, r3
 800e056:	3710      	adds	r7, #16
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}
 800e05c:	200011ec 	.word	0x200011ec
 800e060:	200011c4 	.word	0x200011c4
 800e064:	20001184 	.word	0x20001184
 800e068:	200011cc 	.word	0x200011cc
 800e06c:	20000cf4 	.word	0x20000cf4
 800e070:	20000cf0 	.word	0x20000cf0
 800e074:	200011d8 	.word	0x200011d8
 800e078:	200011d4 	.word	0x200011d4
 800e07c:	e000ed04 	.word	0xe000ed04

0800e080 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e080:	b480      	push	{r7}
 800e082:	b083      	sub	sp, #12
 800e084:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e086:	4b05      	ldr	r3, [pc, #20]	; (800e09c <xTaskGetTickCount+0x1c>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e08c:	687b      	ldr	r3, [r7, #4]
}
 800e08e:	4618      	mov	r0, r3
 800e090:	370c      	adds	r7, #12
 800e092:	46bd      	mov	sp, r7
 800e094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e098:	4770      	bx	lr
 800e09a:	bf00      	nop
 800e09c:	200011c8 	.word	0x200011c8

0800e0a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b086      	sub	sp, #24
 800e0a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e0aa:	4b4e      	ldr	r3, [pc, #312]	; (800e1e4 <xTaskIncrementTick+0x144>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	f040 8088 	bne.w	800e1c4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e0b4:	4b4c      	ldr	r3, [pc, #304]	; (800e1e8 <xTaskIncrementTick+0x148>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	3301      	adds	r3, #1
 800e0ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e0bc:	4a4a      	ldr	r2, [pc, #296]	; (800e1e8 <xTaskIncrementTick+0x148>)
 800e0be:	693b      	ldr	r3, [r7, #16]
 800e0c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e0c2:	693b      	ldr	r3, [r7, #16]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d11f      	bne.n	800e108 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800e0c8:	4b48      	ldr	r3, [pc, #288]	; (800e1ec <xTaskIncrementTick+0x14c>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d009      	beq.n	800e0e6 <xTaskIncrementTick+0x46>
 800e0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d6:	f383 8811 	msr	BASEPRI, r3
 800e0da:	f3bf 8f6f 	isb	sy
 800e0de:	f3bf 8f4f 	dsb	sy
 800e0e2:	603b      	str	r3, [r7, #0]
 800e0e4:	e7fe      	b.n	800e0e4 <xTaskIncrementTick+0x44>
 800e0e6:	4b41      	ldr	r3, [pc, #260]	; (800e1ec <xTaskIncrementTick+0x14c>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	60fb      	str	r3, [r7, #12]
 800e0ec:	4b40      	ldr	r3, [pc, #256]	; (800e1f0 <xTaskIncrementTick+0x150>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	4a3e      	ldr	r2, [pc, #248]	; (800e1ec <xTaskIncrementTick+0x14c>)
 800e0f2:	6013      	str	r3, [r2, #0]
 800e0f4:	4a3e      	ldr	r2, [pc, #248]	; (800e1f0 <xTaskIncrementTick+0x150>)
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	6013      	str	r3, [r2, #0]
 800e0fa:	4b3e      	ldr	r3, [pc, #248]	; (800e1f4 <xTaskIncrementTick+0x154>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	3301      	adds	r3, #1
 800e100:	4a3c      	ldr	r2, [pc, #240]	; (800e1f4 <xTaskIncrementTick+0x154>)
 800e102:	6013      	str	r3, [r2, #0]
 800e104:	f000 fae0 	bl	800e6c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e108:	4b3b      	ldr	r3, [pc, #236]	; (800e1f8 <xTaskIncrementTick+0x158>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	693a      	ldr	r2, [r7, #16]
 800e10e:	429a      	cmp	r2, r3
 800e110:	d349      	bcc.n	800e1a6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e112:	4b36      	ldr	r3, [pc, #216]	; (800e1ec <xTaskIncrementTick+0x14c>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d104      	bne.n	800e126 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e11c:	4b36      	ldr	r3, [pc, #216]	; (800e1f8 <xTaskIncrementTick+0x158>)
 800e11e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e122:	601a      	str	r2, [r3, #0]
					break;
 800e124:	e03f      	b.n	800e1a6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e126:	4b31      	ldr	r3, [pc, #196]	; (800e1ec <xTaskIncrementTick+0x14c>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	68db      	ldr	r3, [r3, #12]
 800e12c:	68db      	ldr	r3, [r3, #12]
 800e12e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e136:	693a      	ldr	r2, [r7, #16]
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d203      	bcs.n	800e146 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e13e:	4a2e      	ldr	r2, [pc, #184]	; (800e1f8 <xTaskIncrementTick+0x158>)
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e144:	e02f      	b.n	800e1a6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	3304      	adds	r3, #4
 800e14a:	4618      	mov	r0, r3
 800e14c:	f7fe fe58 	bl	800ce00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e154:	2b00      	cmp	r3, #0
 800e156:	d004      	beq.n	800e162 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	3318      	adds	r3, #24
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7fe fe4f 	bl	800ce00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e166:	4b25      	ldr	r3, [pc, #148]	; (800e1fc <xTaskIncrementTick+0x15c>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	429a      	cmp	r2, r3
 800e16c:	d903      	bls.n	800e176 <xTaskIncrementTick+0xd6>
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e172:	4a22      	ldr	r2, [pc, #136]	; (800e1fc <xTaskIncrementTick+0x15c>)
 800e174:	6013      	str	r3, [r2, #0]
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e17a:	4613      	mov	r3, r2
 800e17c:	009b      	lsls	r3, r3, #2
 800e17e:	4413      	add	r3, r2
 800e180:	009b      	lsls	r3, r3, #2
 800e182:	4a1f      	ldr	r2, [pc, #124]	; (800e200 <xTaskIncrementTick+0x160>)
 800e184:	441a      	add	r2, r3
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	3304      	adds	r3, #4
 800e18a:	4619      	mov	r1, r3
 800e18c:	4610      	mov	r0, r2
 800e18e:	f7fe fdda 	bl	800cd46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e196:	4b1b      	ldr	r3, [pc, #108]	; (800e204 <xTaskIncrementTick+0x164>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e19c:	429a      	cmp	r2, r3
 800e19e:	d3b8      	bcc.n	800e112 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e1a4:	e7b5      	b.n	800e112 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e1a6:	4b17      	ldr	r3, [pc, #92]	; (800e204 <xTaskIncrementTick+0x164>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1ac:	4914      	ldr	r1, [pc, #80]	; (800e200 <xTaskIncrementTick+0x160>)
 800e1ae:	4613      	mov	r3, r2
 800e1b0:	009b      	lsls	r3, r3, #2
 800e1b2:	4413      	add	r3, r2
 800e1b4:	009b      	lsls	r3, r3, #2
 800e1b6:	440b      	add	r3, r1
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	2b01      	cmp	r3, #1
 800e1bc:	d907      	bls.n	800e1ce <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800e1be:	2301      	movs	r3, #1
 800e1c0:	617b      	str	r3, [r7, #20]
 800e1c2:	e004      	b.n	800e1ce <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e1c4:	4b10      	ldr	r3, [pc, #64]	; (800e208 <xTaskIncrementTick+0x168>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	4a0f      	ldr	r2, [pc, #60]	; (800e208 <xTaskIncrementTick+0x168>)
 800e1cc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e1ce:	4b0f      	ldr	r3, [pc, #60]	; (800e20c <xTaskIncrementTick+0x16c>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d001      	beq.n	800e1da <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800e1d6:	2301      	movs	r3, #1
 800e1d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e1da:	697b      	ldr	r3, [r7, #20]
}
 800e1dc:	4618      	mov	r0, r3
 800e1de:	3718      	adds	r7, #24
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}
 800e1e4:	200011ec 	.word	0x200011ec
 800e1e8:	200011c8 	.word	0x200011c8
 800e1ec:	2000117c 	.word	0x2000117c
 800e1f0:	20001180 	.word	0x20001180
 800e1f4:	200011dc 	.word	0x200011dc
 800e1f8:	200011e4 	.word	0x200011e4
 800e1fc:	200011cc 	.word	0x200011cc
 800e200:	20000cf4 	.word	0x20000cf4
 800e204:	20000cf0 	.word	0x20000cf0
 800e208:	200011d4 	.word	0x200011d4
 800e20c:	200011d8 	.word	0x200011d8

0800e210 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b084      	sub	sp, #16
 800e214:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e216:	4b33      	ldr	r3, [pc, #204]	; (800e2e4 <vTaskSwitchContext+0xd4>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d003      	beq.n	800e226 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e21e:	4b32      	ldr	r3, [pc, #200]	; (800e2e8 <vTaskSwitchContext+0xd8>)
 800e220:	2201      	movs	r2, #1
 800e222:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e224:	e059      	b.n	800e2da <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 800e226:	4b30      	ldr	r3, [pc, #192]	; (800e2e8 <vTaskSwitchContext+0xd8>)
 800e228:	2200      	movs	r2, #0
 800e22a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e22c:	f7f2 f9eb 	bl	8000606 <getRunTimeCounterValue>
 800e230:	4602      	mov	r2, r0
 800e232:	4b2e      	ldr	r3, [pc, #184]	; (800e2ec <vTaskSwitchContext+0xdc>)
 800e234:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e236:	4b2d      	ldr	r3, [pc, #180]	; (800e2ec <vTaskSwitchContext+0xdc>)
 800e238:	681a      	ldr	r2, [r3, #0]
 800e23a:	4b2d      	ldr	r3, [pc, #180]	; (800e2f0 <vTaskSwitchContext+0xe0>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	429a      	cmp	r2, r3
 800e240:	d909      	bls.n	800e256 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e242:	4b2c      	ldr	r3, [pc, #176]	; (800e2f4 <vTaskSwitchContext+0xe4>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800e248:	4a28      	ldr	r2, [pc, #160]	; (800e2ec <vTaskSwitchContext+0xdc>)
 800e24a:	6810      	ldr	r0, [r2, #0]
 800e24c:	4a28      	ldr	r2, [pc, #160]	; (800e2f0 <vTaskSwitchContext+0xe0>)
 800e24e:	6812      	ldr	r2, [r2, #0]
 800e250:	1a82      	subs	r2, r0, r2
 800e252:	440a      	add	r2, r1
 800e254:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800e256:	4b25      	ldr	r3, [pc, #148]	; (800e2ec <vTaskSwitchContext+0xdc>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	4a25      	ldr	r2, [pc, #148]	; (800e2f0 <vTaskSwitchContext+0xe0>)
 800e25c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e25e:	4b26      	ldr	r3, [pc, #152]	; (800e2f8 <vTaskSwitchContext+0xe8>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	60fb      	str	r3, [r7, #12]
 800e264:	e00f      	b.n	800e286 <vTaskSwitchContext+0x76>
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d109      	bne.n	800e280 <vTaskSwitchContext+0x70>
 800e26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e270:	f383 8811 	msr	BASEPRI, r3
 800e274:	f3bf 8f6f 	isb	sy
 800e278:	f3bf 8f4f 	dsb	sy
 800e27c:	607b      	str	r3, [r7, #4]
 800e27e:	e7fe      	b.n	800e27e <vTaskSwitchContext+0x6e>
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	3b01      	subs	r3, #1
 800e284:	60fb      	str	r3, [r7, #12]
 800e286:	491d      	ldr	r1, [pc, #116]	; (800e2fc <vTaskSwitchContext+0xec>)
 800e288:	68fa      	ldr	r2, [r7, #12]
 800e28a:	4613      	mov	r3, r2
 800e28c:	009b      	lsls	r3, r3, #2
 800e28e:	4413      	add	r3, r2
 800e290:	009b      	lsls	r3, r3, #2
 800e292:	440b      	add	r3, r1
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d0e5      	beq.n	800e266 <vTaskSwitchContext+0x56>
 800e29a:	68fa      	ldr	r2, [r7, #12]
 800e29c:	4613      	mov	r3, r2
 800e29e:	009b      	lsls	r3, r3, #2
 800e2a0:	4413      	add	r3, r2
 800e2a2:	009b      	lsls	r3, r3, #2
 800e2a4:	4a15      	ldr	r2, [pc, #84]	; (800e2fc <vTaskSwitchContext+0xec>)
 800e2a6:	4413      	add	r3, r2
 800e2a8:	60bb      	str	r3, [r7, #8]
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	685b      	ldr	r3, [r3, #4]
 800e2ae:	685a      	ldr	r2, [r3, #4]
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	605a      	str	r2, [r3, #4]
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	685a      	ldr	r2, [r3, #4]
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	3308      	adds	r3, #8
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d104      	bne.n	800e2ca <vTaskSwitchContext+0xba>
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	685b      	ldr	r3, [r3, #4]
 800e2c4:	685a      	ldr	r2, [r3, #4]
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	605a      	str	r2, [r3, #4]
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	685b      	ldr	r3, [r3, #4]
 800e2ce:	68db      	ldr	r3, [r3, #12]
 800e2d0:	4a08      	ldr	r2, [pc, #32]	; (800e2f4 <vTaskSwitchContext+0xe4>)
 800e2d2:	6013      	str	r3, [r2, #0]
 800e2d4:	4a08      	ldr	r2, [pc, #32]	; (800e2f8 <vTaskSwitchContext+0xe8>)
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	6013      	str	r3, [r2, #0]
}
 800e2da:	bf00      	nop
 800e2dc:	3710      	adds	r7, #16
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
 800e2e2:	bf00      	nop
 800e2e4:	200011ec 	.word	0x200011ec
 800e2e8:	200011d8 	.word	0x200011d8
 800e2ec:	200011f4 	.word	0x200011f4
 800e2f0:	200011f0 	.word	0x200011f0
 800e2f4:	20000cf0 	.word	0x20000cf0
 800e2f8:	200011cc 	.word	0x200011cc
 800e2fc:	20000cf4 	.word	0x20000cf4

0800e300 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b084      	sub	sp, #16
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
 800e308:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d109      	bne.n	800e324 <vTaskPlaceOnEventList+0x24>
 800e310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e314:	f383 8811 	msr	BASEPRI, r3
 800e318:	f3bf 8f6f 	isb	sy
 800e31c:	f3bf 8f4f 	dsb	sy
 800e320:	60fb      	str	r3, [r7, #12]
 800e322:	e7fe      	b.n	800e322 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e324:	4b07      	ldr	r3, [pc, #28]	; (800e344 <vTaskPlaceOnEventList+0x44>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	3318      	adds	r3, #24
 800e32a:	4619      	mov	r1, r3
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f7fe fd2e 	bl	800cd8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e332:	2101      	movs	r1, #1
 800e334:	6838      	ldr	r0, [r7, #0]
 800e336:	f000 fba3 	bl	800ea80 <prvAddCurrentTaskToDelayedList>
}
 800e33a:	bf00      	nop
 800e33c:	3710      	adds	r7, #16
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}
 800e342:	bf00      	nop
 800e344:	20000cf0 	.word	0x20000cf0

0800e348 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b086      	sub	sp, #24
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	60f8      	str	r0, [r7, #12]
 800e350:	60b9      	str	r1, [r7, #8]
 800e352:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d109      	bne.n	800e36e <vTaskPlaceOnEventListRestricted+0x26>
 800e35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e35e:	f383 8811 	msr	BASEPRI, r3
 800e362:	f3bf 8f6f 	isb	sy
 800e366:	f3bf 8f4f 	dsb	sy
 800e36a:	617b      	str	r3, [r7, #20]
 800e36c:	e7fe      	b.n	800e36c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e36e:	4b0a      	ldr	r3, [pc, #40]	; (800e398 <vTaskPlaceOnEventListRestricted+0x50>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	3318      	adds	r3, #24
 800e374:	4619      	mov	r1, r3
 800e376:	68f8      	ldr	r0, [r7, #12]
 800e378:	f7fe fce5 	bl	800cd46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d002      	beq.n	800e388 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800e382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e386:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e388:	6879      	ldr	r1, [r7, #4]
 800e38a:	68b8      	ldr	r0, [r7, #8]
 800e38c:	f000 fb78 	bl	800ea80 <prvAddCurrentTaskToDelayedList>
	}
 800e390:	bf00      	nop
 800e392:	3718      	adds	r7, #24
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}
 800e398:	20000cf0 	.word	0x20000cf0

0800e39c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b086      	sub	sp, #24
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	68db      	ldr	r3, [r3, #12]
 800e3a8:	68db      	ldr	r3, [r3, #12]
 800e3aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e3ac:	693b      	ldr	r3, [r7, #16]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d109      	bne.n	800e3c6 <xTaskRemoveFromEventList+0x2a>
 800e3b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b6:	f383 8811 	msr	BASEPRI, r3
 800e3ba:	f3bf 8f6f 	isb	sy
 800e3be:	f3bf 8f4f 	dsb	sy
 800e3c2:	60fb      	str	r3, [r7, #12]
 800e3c4:	e7fe      	b.n	800e3c4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e3c6:	693b      	ldr	r3, [r7, #16]
 800e3c8:	3318      	adds	r3, #24
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f7fe fd18 	bl	800ce00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3d0:	4b1d      	ldr	r3, [pc, #116]	; (800e448 <xTaskRemoveFromEventList+0xac>)
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d11d      	bne.n	800e414 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e3d8:	693b      	ldr	r3, [r7, #16]
 800e3da:	3304      	adds	r3, #4
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f7fe fd0f 	bl	800ce00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e3e2:	693b      	ldr	r3, [r7, #16]
 800e3e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3e6:	4b19      	ldr	r3, [pc, #100]	; (800e44c <xTaskRemoveFromEventList+0xb0>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d903      	bls.n	800e3f6 <xTaskRemoveFromEventList+0x5a>
 800e3ee:	693b      	ldr	r3, [r7, #16]
 800e3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3f2:	4a16      	ldr	r2, [pc, #88]	; (800e44c <xTaskRemoveFromEventList+0xb0>)
 800e3f4:	6013      	str	r3, [r2, #0]
 800e3f6:	693b      	ldr	r3, [r7, #16]
 800e3f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3fa:	4613      	mov	r3, r2
 800e3fc:	009b      	lsls	r3, r3, #2
 800e3fe:	4413      	add	r3, r2
 800e400:	009b      	lsls	r3, r3, #2
 800e402:	4a13      	ldr	r2, [pc, #76]	; (800e450 <xTaskRemoveFromEventList+0xb4>)
 800e404:	441a      	add	r2, r3
 800e406:	693b      	ldr	r3, [r7, #16]
 800e408:	3304      	adds	r3, #4
 800e40a:	4619      	mov	r1, r3
 800e40c:	4610      	mov	r0, r2
 800e40e:	f7fe fc9a 	bl	800cd46 <vListInsertEnd>
 800e412:	e005      	b.n	800e420 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e414:	693b      	ldr	r3, [r7, #16]
 800e416:	3318      	adds	r3, #24
 800e418:	4619      	mov	r1, r3
 800e41a:	480e      	ldr	r0, [pc, #56]	; (800e454 <xTaskRemoveFromEventList+0xb8>)
 800e41c:	f7fe fc93 	bl	800cd46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e420:	693b      	ldr	r3, [r7, #16]
 800e422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e424:	4b0c      	ldr	r3, [pc, #48]	; (800e458 <xTaskRemoveFromEventList+0xbc>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d905      	bls.n	800e43a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e42e:	2301      	movs	r3, #1
 800e430:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e432:	4b0a      	ldr	r3, [pc, #40]	; (800e45c <xTaskRemoveFromEventList+0xc0>)
 800e434:	2201      	movs	r2, #1
 800e436:	601a      	str	r2, [r3, #0]
 800e438:	e001      	b.n	800e43e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e43a:	2300      	movs	r3, #0
 800e43c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e43e:	697b      	ldr	r3, [r7, #20]
}
 800e440:	4618      	mov	r0, r3
 800e442:	3718      	adds	r7, #24
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}
 800e448:	200011ec 	.word	0x200011ec
 800e44c:	200011cc 	.word	0x200011cc
 800e450:	20000cf4 	.word	0x20000cf4
 800e454:	20001184 	.word	0x20001184
 800e458:	20000cf0 	.word	0x20000cf0
 800e45c:	200011d8 	.word	0x200011d8

0800e460 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e460:	b480      	push	{r7}
 800e462:	b083      	sub	sp, #12
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e468:	4b06      	ldr	r3, [pc, #24]	; (800e484 <vTaskInternalSetTimeOutState+0x24>)
 800e46a:	681a      	ldr	r2, [r3, #0]
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e470:	4b05      	ldr	r3, [pc, #20]	; (800e488 <vTaskInternalSetTimeOutState+0x28>)
 800e472:	681a      	ldr	r2, [r3, #0]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	605a      	str	r2, [r3, #4]
}
 800e478:	bf00      	nop
 800e47a:	370c      	adds	r7, #12
 800e47c:	46bd      	mov	sp, r7
 800e47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e482:	4770      	bx	lr
 800e484:	200011dc 	.word	0x200011dc
 800e488:	200011c8 	.word	0x200011c8

0800e48c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b088      	sub	sp, #32
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d109      	bne.n	800e4b0 <xTaskCheckForTimeOut+0x24>
 800e49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a0:	f383 8811 	msr	BASEPRI, r3
 800e4a4:	f3bf 8f6f 	isb	sy
 800e4a8:	f3bf 8f4f 	dsb	sy
 800e4ac:	613b      	str	r3, [r7, #16]
 800e4ae:	e7fe      	b.n	800e4ae <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d109      	bne.n	800e4ca <xTaskCheckForTimeOut+0x3e>
 800e4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ba:	f383 8811 	msr	BASEPRI, r3
 800e4be:	f3bf 8f6f 	isb	sy
 800e4c2:	f3bf 8f4f 	dsb	sy
 800e4c6:	60fb      	str	r3, [r7, #12]
 800e4c8:	e7fe      	b.n	800e4c8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800e4ca:	f000 ff97 	bl	800f3fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e4ce:	4b1d      	ldr	r3, [pc, #116]	; (800e544 <xTaskCheckForTimeOut+0xb8>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	685b      	ldr	r3, [r3, #4]
 800e4d8:	69ba      	ldr	r2, [r7, #24]
 800e4da:	1ad3      	subs	r3, r2, r3
 800e4dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4e6:	d102      	bne.n	800e4ee <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	61fb      	str	r3, [r7, #28]
 800e4ec:	e023      	b.n	800e536 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681a      	ldr	r2, [r3, #0]
 800e4f2:	4b15      	ldr	r3, [pc, #84]	; (800e548 <xTaskCheckForTimeOut+0xbc>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d007      	beq.n	800e50a <xTaskCheckForTimeOut+0x7e>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	685b      	ldr	r3, [r3, #4]
 800e4fe:	69ba      	ldr	r2, [r7, #24]
 800e500:	429a      	cmp	r2, r3
 800e502:	d302      	bcc.n	800e50a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e504:	2301      	movs	r3, #1
 800e506:	61fb      	str	r3, [r7, #28]
 800e508:	e015      	b.n	800e536 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	697a      	ldr	r2, [r7, #20]
 800e510:	429a      	cmp	r2, r3
 800e512:	d20b      	bcs.n	800e52c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	681a      	ldr	r2, [r3, #0]
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	1ad2      	subs	r2, r2, r3
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f7ff ff9d 	bl	800e460 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e526:	2300      	movs	r3, #0
 800e528:	61fb      	str	r3, [r7, #28]
 800e52a:	e004      	b.n	800e536 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	2200      	movs	r2, #0
 800e530:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e532:	2301      	movs	r3, #1
 800e534:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e536:	f000 ff8f 	bl	800f458 <vPortExitCritical>

	return xReturn;
 800e53a:	69fb      	ldr	r3, [r7, #28]
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	3720      	adds	r7, #32
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}
 800e544:	200011c8 	.word	0x200011c8
 800e548:	200011dc 	.word	0x200011dc

0800e54c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e54c:	b480      	push	{r7}
 800e54e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e550:	4b03      	ldr	r3, [pc, #12]	; (800e560 <vTaskMissedYield+0x14>)
 800e552:	2201      	movs	r2, #1
 800e554:	601a      	str	r2, [r3, #0]
}
 800e556:	bf00      	nop
 800e558:	46bd      	mov	sp, r7
 800e55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55e:	4770      	bx	lr
 800e560:	200011d8 	.word	0x200011d8

0800e564 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b082      	sub	sp, #8
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e56c:	f000 f852 	bl	800e614 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e570:	4b06      	ldr	r3, [pc, #24]	; (800e58c <prvIdleTask+0x28>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	2b01      	cmp	r3, #1
 800e576:	d9f9      	bls.n	800e56c <prvIdleTask+0x8>
			{
				taskYIELD();
 800e578:	4b05      	ldr	r3, [pc, #20]	; (800e590 <prvIdleTask+0x2c>)
 800e57a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e57e:	601a      	str	r2, [r3, #0]
 800e580:	f3bf 8f4f 	dsb	sy
 800e584:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e588:	e7f0      	b.n	800e56c <prvIdleTask+0x8>
 800e58a:	bf00      	nop
 800e58c:	20000cf4 	.word	0x20000cf4
 800e590:	e000ed04 	.word	0xe000ed04

0800e594 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b082      	sub	sp, #8
 800e598:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e59a:	2300      	movs	r3, #0
 800e59c:	607b      	str	r3, [r7, #4]
 800e59e:	e00c      	b.n	800e5ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e5a0:	687a      	ldr	r2, [r7, #4]
 800e5a2:	4613      	mov	r3, r2
 800e5a4:	009b      	lsls	r3, r3, #2
 800e5a6:	4413      	add	r3, r2
 800e5a8:	009b      	lsls	r3, r3, #2
 800e5aa:	4a12      	ldr	r2, [pc, #72]	; (800e5f4 <prvInitialiseTaskLists+0x60>)
 800e5ac:	4413      	add	r3, r2
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f7fe fb9c 	bl	800ccec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	3301      	adds	r3, #1
 800e5b8:	607b      	str	r3, [r7, #4]
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2b37      	cmp	r3, #55	; 0x37
 800e5be:	d9ef      	bls.n	800e5a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e5c0:	480d      	ldr	r0, [pc, #52]	; (800e5f8 <prvInitialiseTaskLists+0x64>)
 800e5c2:	f7fe fb93 	bl	800ccec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e5c6:	480d      	ldr	r0, [pc, #52]	; (800e5fc <prvInitialiseTaskLists+0x68>)
 800e5c8:	f7fe fb90 	bl	800ccec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e5cc:	480c      	ldr	r0, [pc, #48]	; (800e600 <prvInitialiseTaskLists+0x6c>)
 800e5ce:	f7fe fb8d 	bl	800ccec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e5d2:	480c      	ldr	r0, [pc, #48]	; (800e604 <prvInitialiseTaskLists+0x70>)
 800e5d4:	f7fe fb8a 	bl	800ccec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e5d8:	480b      	ldr	r0, [pc, #44]	; (800e608 <prvInitialiseTaskLists+0x74>)
 800e5da:	f7fe fb87 	bl	800ccec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e5de:	4b0b      	ldr	r3, [pc, #44]	; (800e60c <prvInitialiseTaskLists+0x78>)
 800e5e0:	4a05      	ldr	r2, [pc, #20]	; (800e5f8 <prvInitialiseTaskLists+0x64>)
 800e5e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e5e4:	4b0a      	ldr	r3, [pc, #40]	; (800e610 <prvInitialiseTaskLists+0x7c>)
 800e5e6:	4a05      	ldr	r2, [pc, #20]	; (800e5fc <prvInitialiseTaskLists+0x68>)
 800e5e8:	601a      	str	r2, [r3, #0]
}
 800e5ea:	bf00      	nop
 800e5ec:	3708      	adds	r7, #8
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	bf00      	nop
 800e5f4:	20000cf4 	.word	0x20000cf4
 800e5f8:	20001154 	.word	0x20001154
 800e5fc:	20001168 	.word	0x20001168
 800e600:	20001184 	.word	0x20001184
 800e604:	20001198 	.word	0x20001198
 800e608:	200011b0 	.word	0x200011b0
 800e60c:	2000117c 	.word	0x2000117c
 800e610:	20001180 	.word	0x20001180

0800e614 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b082      	sub	sp, #8
 800e618:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e61a:	e019      	b.n	800e650 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e61c:	f000 feee 	bl	800f3fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e620:	4b0f      	ldr	r3, [pc, #60]	; (800e660 <prvCheckTasksWaitingTermination+0x4c>)
 800e622:	68db      	ldr	r3, [r3, #12]
 800e624:	68db      	ldr	r3, [r3, #12]
 800e626:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	3304      	adds	r3, #4
 800e62c:	4618      	mov	r0, r3
 800e62e:	f7fe fbe7 	bl	800ce00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e632:	4b0c      	ldr	r3, [pc, #48]	; (800e664 <prvCheckTasksWaitingTermination+0x50>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	3b01      	subs	r3, #1
 800e638:	4a0a      	ldr	r2, [pc, #40]	; (800e664 <prvCheckTasksWaitingTermination+0x50>)
 800e63a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e63c:	4b0a      	ldr	r3, [pc, #40]	; (800e668 <prvCheckTasksWaitingTermination+0x54>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	3b01      	subs	r3, #1
 800e642:	4a09      	ldr	r2, [pc, #36]	; (800e668 <prvCheckTasksWaitingTermination+0x54>)
 800e644:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e646:	f000 ff07 	bl	800f458 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f000 f80e 	bl	800e66c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e650:	4b05      	ldr	r3, [pc, #20]	; (800e668 <prvCheckTasksWaitingTermination+0x54>)
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d1e1      	bne.n	800e61c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e658:	bf00      	nop
 800e65a:	3708      	adds	r7, #8
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}
 800e660:	20001198 	.word	0x20001198
 800e664:	200011c4 	.word	0x200011c4
 800e668:	200011ac 	.word	0x200011ac

0800e66c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b084      	sub	sp, #16
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d108      	bne.n	800e690 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e682:	4618      	mov	r0, r3
 800e684:	f001 f896 	bl	800f7b4 <vPortFree>
				vPortFree( pxTCB );
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f001 f893 	bl	800f7b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e68e:	e017      	b.n	800e6c0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800e696:	2b01      	cmp	r3, #1
 800e698:	d103      	bne.n	800e6a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f001 f88a 	bl	800f7b4 <vPortFree>
	}
 800e6a0:	e00e      	b.n	800e6c0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800e6a8:	2b02      	cmp	r3, #2
 800e6aa:	d009      	beq.n	800e6c0 <prvDeleteTCB+0x54>
 800e6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6b0:	f383 8811 	msr	BASEPRI, r3
 800e6b4:	f3bf 8f6f 	isb	sy
 800e6b8:	f3bf 8f4f 	dsb	sy
 800e6bc:	60fb      	str	r3, [r7, #12]
 800e6be:	e7fe      	b.n	800e6be <prvDeleteTCB+0x52>
	}
 800e6c0:	bf00      	nop
 800e6c2:	3710      	adds	r7, #16
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}

0800e6c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e6c8:	b480      	push	{r7}
 800e6ca:	b083      	sub	sp, #12
 800e6cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e6ce:	4b0c      	ldr	r3, [pc, #48]	; (800e700 <prvResetNextTaskUnblockTime+0x38>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d104      	bne.n	800e6e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e6d8:	4b0a      	ldr	r3, [pc, #40]	; (800e704 <prvResetNextTaskUnblockTime+0x3c>)
 800e6da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e6de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e6e0:	e008      	b.n	800e6f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6e2:	4b07      	ldr	r3, [pc, #28]	; (800e700 <prvResetNextTaskUnblockTime+0x38>)
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	68db      	ldr	r3, [r3, #12]
 800e6e8:	68db      	ldr	r3, [r3, #12]
 800e6ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	685b      	ldr	r3, [r3, #4]
 800e6f0:	4a04      	ldr	r2, [pc, #16]	; (800e704 <prvResetNextTaskUnblockTime+0x3c>)
 800e6f2:	6013      	str	r3, [r2, #0]
}
 800e6f4:	bf00      	nop
 800e6f6:	370c      	adds	r7, #12
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fe:	4770      	bx	lr
 800e700:	2000117c 	.word	0x2000117c
 800e704:	200011e4 	.word	0x200011e4

0800e708 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e708:	b480      	push	{r7}
 800e70a:	b083      	sub	sp, #12
 800e70c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e70e:	4b0b      	ldr	r3, [pc, #44]	; (800e73c <xTaskGetSchedulerState+0x34>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d102      	bne.n	800e71c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e716:	2301      	movs	r3, #1
 800e718:	607b      	str	r3, [r7, #4]
 800e71a:	e008      	b.n	800e72e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e71c:	4b08      	ldr	r3, [pc, #32]	; (800e740 <xTaskGetSchedulerState+0x38>)
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d102      	bne.n	800e72a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e724:	2302      	movs	r3, #2
 800e726:	607b      	str	r3, [r7, #4]
 800e728:	e001      	b.n	800e72e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e72a:	2300      	movs	r3, #0
 800e72c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e72e:	687b      	ldr	r3, [r7, #4]
	}
 800e730:	4618      	mov	r0, r3
 800e732:	370c      	adds	r7, #12
 800e734:	46bd      	mov	sp, r7
 800e736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73a:	4770      	bx	lr
 800e73c:	200011d0 	.word	0x200011d0
 800e740:	200011ec 	.word	0x200011ec

0800e744 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e744:	b580      	push	{r7, lr}
 800e746:	b086      	sub	sp, #24
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e750:	2300      	movs	r3, #0
 800e752:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d054      	beq.n	800e804 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e75a:	4b2d      	ldr	r3, [pc, #180]	; (800e810 <xTaskPriorityDisinherit+0xcc>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	693a      	ldr	r2, [r7, #16]
 800e760:	429a      	cmp	r2, r3
 800e762:	d009      	beq.n	800e778 <xTaskPriorityDisinherit+0x34>
 800e764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e768:	f383 8811 	msr	BASEPRI, r3
 800e76c:	f3bf 8f6f 	isb	sy
 800e770:	f3bf 8f4f 	dsb	sy
 800e774:	60fb      	str	r3, [r7, #12]
 800e776:	e7fe      	b.n	800e776 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d109      	bne.n	800e794 <xTaskPriorityDisinherit+0x50>
 800e780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e784:	f383 8811 	msr	BASEPRI, r3
 800e788:	f3bf 8f6f 	isb	sy
 800e78c:	f3bf 8f4f 	dsb	sy
 800e790:	60bb      	str	r3, [r7, #8]
 800e792:	e7fe      	b.n	800e792 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e798:	1e5a      	subs	r2, r3, #1
 800e79a:	693b      	ldr	r3, [r7, #16]
 800e79c:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e79e:	693b      	ldr	r3, [r7, #16]
 800e7a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7a2:	693b      	ldr	r3, [r7, #16]
 800e7a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d02c      	beq.n	800e804 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e7aa:	693b      	ldr	r3, [r7, #16]
 800e7ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d128      	bne.n	800e804 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7b2:	693b      	ldr	r3, [r7, #16]
 800e7b4:	3304      	adds	r3, #4
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7fe fb22 	bl	800ce00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e7bc:	693b      	ldr	r3, [r7, #16]
 800e7be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e7c0:	693b      	ldr	r3, [r7, #16]
 800e7c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7c4:	693b      	ldr	r3, [r7, #16]
 800e7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e7cc:	693b      	ldr	r3, [r7, #16]
 800e7ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7d4:	4b0f      	ldr	r3, [pc, #60]	; (800e814 <xTaskPriorityDisinherit+0xd0>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	d903      	bls.n	800e7e4 <xTaskPriorityDisinherit+0xa0>
 800e7dc:	693b      	ldr	r3, [r7, #16]
 800e7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7e0:	4a0c      	ldr	r2, [pc, #48]	; (800e814 <xTaskPriorityDisinherit+0xd0>)
 800e7e2:	6013      	str	r3, [r2, #0]
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7e8:	4613      	mov	r3, r2
 800e7ea:	009b      	lsls	r3, r3, #2
 800e7ec:	4413      	add	r3, r2
 800e7ee:	009b      	lsls	r3, r3, #2
 800e7f0:	4a09      	ldr	r2, [pc, #36]	; (800e818 <xTaskPriorityDisinherit+0xd4>)
 800e7f2:	441a      	add	r2, r3
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	3304      	adds	r3, #4
 800e7f8:	4619      	mov	r1, r3
 800e7fa:	4610      	mov	r0, r2
 800e7fc:	f7fe faa3 	bl	800cd46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e800:	2301      	movs	r3, #1
 800e802:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e804:	697b      	ldr	r3, [r7, #20]
	}
 800e806:	4618      	mov	r0, r3
 800e808:	3718      	adds	r7, #24
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd80      	pop	{r7, pc}
 800e80e:	bf00      	nop
 800e810:	20000cf0 	.word	0x20000cf0
 800e814:	200011cc 	.word	0x200011cc
 800e818:	20000cf4 	.word	0x20000cf4

0800e81c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b086      	sub	sp, #24
 800e820:	af00      	add	r7, sp, #0
 800e822:	60f8      	str	r0, [r7, #12]
 800e824:	60b9      	str	r1, [r7, #8]
 800e826:	607a      	str	r2, [r7, #4]
 800e828:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800e82a:	f000 fde7 	bl	800f3fc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800e82e:	4b26      	ldr	r3, [pc, #152]	; (800e8c8 <xTaskNotifyWait+0xac>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800e836:	b2db      	uxtb	r3, r3
 800e838:	2b02      	cmp	r3, #2
 800e83a:	d01a      	beq.n	800e872 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800e83c:	4b22      	ldr	r3, [pc, #136]	; (800e8c8 <xTaskNotifyWait+0xac>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800e842:	68fa      	ldr	r2, [r7, #12]
 800e844:	43d2      	mvns	r2, r2
 800e846:	400a      	ands	r2, r1
 800e848:	65da      	str	r2, [r3, #92]	; 0x5c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800e84a:	4b1f      	ldr	r3, [pc, #124]	; (800e8c8 <xTaskNotifyWait+0xac>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	2201      	movs	r2, #1
 800e850:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

				if( xTicksToWait > ( TickType_t ) 0 )
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d00b      	beq.n	800e872 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e85a:	2101      	movs	r1, #1
 800e85c:	6838      	ldr	r0, [r7, #0]
 800e85e:	f000 f90f 	bl	800ea80 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800e862:	4b1a      	ldr	r3, [pc, #104]	; (800e8cc <xTaskNotifyWait+0xb0>)
 800e864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e868:	601a      	str	r2, [r3, #0]
 800e86a:	f3bf 8f4f 	dsb	sy
 800e86e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e872:	f000 fdf1 	bl	800f458 <vPortExitCritical>

		taskENTER_CRITICAL();
 800e876:	f000 fdc1 	bl	800f3fc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d004      	beq.n	800e88a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800e880:	4b11      	ldr	r3, [pc, #68]	; (800e8c8 <xTaskNotifyWait+0xac>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800e88a:	4b0f      	ldr	r3, [pc, #60]	; (800e8c8 <xTaskNotifyWait+0xac>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800e892:	b2db      	uxtb	r3, r3
 800e894:	2b02      	cmp	r3, #2
 800e896:	d002      	beq.n	800e89e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800e898:	2300      	movs	r3, #0
 800e89a:	617b      	str	r3, [r7, #20]
 800e89c:	e008      	b.n	800e8b0 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800e89e:	4b0a      	ldr	r3, [pc, #40]	; (800e8c8 <xTaskNotifyWait+0xac>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800e8a4:	68ba      	ldr	r2, [r7, #8]
 800e8a6:	43d2      	mvns	r2, r2
 800e8a8:	400a      	ands	r2, r1
 800e8aa:	65da      	str	r2, [r3, #92]	; 0x5c
				xReturn = pdTRUE;
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e8b0:	4b05      	ldr	r3, [pc, #20]	; (800e8c8 <xTaskNotifyWait+0xac>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		}
		taskEXIT_CRITICAL();
 800e8ba:	f000 fdcd 	bl	800f458 <vPortExitCritical>

		return xReturn;
 800e8be:	697b      	ldr	r3, [r7, #20]
	}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	3718      	adds	r7, #24
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}
 800e8c8:	20000cf0 	.word	0x20000cf0
 800e8cc:	e000ed04 	.word	0xe000ed04

0800e8d0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b08e      	sub	sp, #56	; 0x38
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	60f8      	str	r0, [r7, #12]
 800e8d8:	60b9      	str	r1, [r7, #8]
 800e8da:	603b      	str	r3, [r7, #0]
 800e8dc:	4613      	mov	r3, r2
 800e8de:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d109      	bne.n	800e8fe <xTaskGenericNotifyFromISR+0x2e>
 800e8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ee:	f383 8811 	msr	BASEPRI, r3
 800e8f2:	f3bf 8f6f 	isb	sy
 800e8f6:	f3bf 8f4f 	dsb	sy
 800e8fa:	627b      	str	r3, [r7, #36]	; 0x24
 800e8fc:	e7fe      	b.n	800e8fc <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e8fe:	f000 fe59 	bl	800f5b4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800e906:	f3ef 8211 	mrs	r2, BASEPRI
 800e90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e90e:	f383 8811 	msr	BASEPRI, r3
 800e912:	f3bf 8f6f 	isb	sy
 800e916:	f3bf 8f4f 	dsb	sy
 800e91a:	623a      	str	r2, [r7, #32]
 800e91c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800e91e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e920:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d003      	beq.n	800e930 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e92a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e932:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800e936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e93c:	2202      	movs	r2, #2
 800e93e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 800e942:	79fb      	ldrb	r3, [r7, #7]
 800e944:	2b04      	cmp	r3, #4
 800e946:	d829      	bhi.n	800e99c <xTaskGenericNotifyFromISR+0xcc>
 800e948:	a201      	add	r2, pc, #4	; (adr r2, 800e950 <xTaskGenericNotifyFromISR+0x80>)
 800e94a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e94e:	bf00      	nop
 800e950:	0800e9bb 	.word	0x0800e9bb
 800e954:	0800e965 	.word	0x0800e965
 800e958:	0800e973 	.word	0x0800e973
 800e95c:	0800e97f 	.word	0x0800e97f
 800e960:	0800e987 	.word	0x0800e987
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800e964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e966:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	431a      	orrs	r2, r3
 800e96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e96e:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 800e970:	e026      	b.n	800e9c0 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800e972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e976:	1c5a      	adds	r2, r3, #1
 800e978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e97a:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 800e97c:	e020      	b.n	800e9c0 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800e97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e980:	68ba      	ldr	r2, [r7, #8]
 800e982:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 800e984:	e01c      	b.n	800e9c0 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800e986:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e98a:	2b02      	cmp	r3, #2
 800e98c:	d003      	beq.n	800e996 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e990:	68ba      	ldr	r2, [r7, #8]
 800e992:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800e994:	e014      	b.n	800e9c0 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 800e996:	2300      	movs	r3, #0
 800e998:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800e99a:	e011      	b.n	800e9c0 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800e99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e99e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e9a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9a4:	d00b      	beq.n	800e9be <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 800e9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9aa:	f383 8811 	msr	BASEPRI, r3
 800e9ae:	f3bf 8f6f 	isb	sy
 800e9b2:	f3bf 8f4f 	dsb	sy
 800e9b6:	61bb      	str	r3, [r7, #24]
 800e9b8:	e7fe      	b.n	800e9b8 <xTaskGenericNotifyFromISR+0xe8>
					break;
 800e9ba:	bf00      	nop
 800e9bc:	e000      	b.n	800e9c0 <xTaskGenericNotifyFromISR+0xf0>
					break;
 800e9be:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e9c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e9c4:	2b01      	cmp	r3, #1
 800e9c6:	d145      	bne.n	800ea54 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d009      	beq.n	800e9e4 <xTaskGenericNotifyFromISR+0x114>
 800e9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d4:	f383 8811 	msr	BASEPRI, r3
 800e9d8:	f3bf 8f6f 	isb	sy
 800e9dc:	f3bf 8f4f 	dsb	sy
 800e9e0:	617b      	str	r3, [r7, #20]
 800e9e2:	e7fe      	b.n	800e9e2 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e9e4:	4b20      	ldr	r3, [pc, #128]	; (800ea68 <xTaskGenericNotifyFromISR+0x198>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d11d      	bne.n	800ea28 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ee:	3304      	adds	r3, #4
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f7fe fa05 	bl	800ce00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9fa:	4b1c      	ldr	r3, [pc, #112]	; (800ea6c <xTaskGenericNotifyFromISR+0x19c>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	429a      	cmp	r2, r3
 800ea00:	d903      	bls.n	800ea0a <xTaskGenericNotifyFromISR+0x13a>
 800ea02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea06:	4a19      	ldr	r2, [pc, #100]	; (800ea6c <xTaskGenericNotifyFromISR+0x19c>)
 800ea08:	6013      	str	r3, [r2, #0]
 800ea0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea0e:	4613      	mov	r3, r2
 800ea10:	009b      	lsls	r3, r3, #2
 800ea12:	4413      	add	r3, r2
 800ea14:	009b      	lsls	r3, r3, #2
 800ea16:	4a16      	ldr	r2, [pc, #88]	; (800ea70 <xTaskGenericNotifyFromISR+0x1a0>)
 800ea18:	441a      	add	r2, r3
 800ea1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1c:	3304      	adds	r3, #4
 800ea1e:	4619      	mov	r1, r3
 800ea20:	4610      	mov	r0, r2
 800ea22:	f7fe f990 	bl	800cd46 <vListInsertEnd>
 800ea26:	e005      	b.n	800ea34 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800ea28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea2a:	3318      	adds	r3, #24
 800ea2c:	4619      	mov	r1, r3
 800ea2e:	4811      	ldr	r0, [pc, #68]	; (800ea74 <xTaskGenericNotifyFromISR+0x1a4>)
 800ea30:	f7fe f989 	bl	800cd46 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ea34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea38:	4b0f      	ldr	r3, [pc, #60]	; (800ea78 <xTaskGenericNotifyFromISR+0x1a8>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	d908      	bls.n	800ea54 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800ea42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d002      	beq.n	800ea4e <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800ea48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800ea4e:	4b0b      	ldr	r3, [pc, #44]	; (800ea7c <xTaskGenericNotifyFromISR+0x1ac>)
 800ea50:	2201      	movs	r2, #1
 800ea52:	601a      	str	r2, [r3, #0]
 800ea54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea56:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ea58:	693b      	ldr	r3, [r7, #16]
 800ea5a:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800ea5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3738      	adds	r7, #56	; 0x38
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}
 800ea68:	200011ec 	.word	0x200011ec
 800ea6c:	200011cc 	.word	0x200011cc
 800ea70:	20000cf4 	.word	0x20000cf4
 800ea74:	20001184 	.word	0x20001184
 800ea78:	20000cf0 	.word	0x20000cf0
 800ea7c:	200011d8 	.word	0x200011d8

0800ea80 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b084      	sub	sp, #16
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
 800ea88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ea8a:	4b21      	ldr	r3, [pc, #132]	; (800eb10 <prvAddCurrentTaskToDelayedList+0x90>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ea90:	4b20      	ldr	r3, [pc, #128]	; (800eb14 <prvAddCurrentTaskToDelayedList+0x94>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	3304      	adds	r3, #4
 800ea96:	4618      	mov	r0, r3
 800ea98:	f7fe f9b2 	bl	800ce00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eaa2:	d10a      	bne.n	800eaba <prvAddCurrentTaskToDelayedList+0x3a>
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d007      	beq.n	800eaba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eaaa:	4b1a      	ldr	r3, [pc, #104]	; (800eb14 <prvAddCurrentTaskToDelayedList+0x94>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	3304      	adds	r3, #4
 800eab0:	4619      	mov	r1, r3
 800eab2:	4819      	ldr	r0, [pc, #100]	; (800eb18 <prvAddCurrentTaskToDelayedList+0x98>)
 800eab4:	f7fe f947 	bl	800cd46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800eab8:	e026      	b.n	800eb08 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800eaba:	68fa      	ldr	r2, [r7, #12]
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	4413      	add	r3, r2
 800eac0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800eac2:	4b14      	ldr	r3, [pc, #80]	; (800eb14 <prvAddCurrentTaskToDelayedList+0x94>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	68ba      	ldr	r2, [r7, #8]
 800eac8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800eaca:	68ba      	ldr	r2, [r7, #8]
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	429a      	cmp	r2, r3
 800ead0:	d209      	bcs.n	800eae6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ead2:	4b12      	ldr	r3, [pc, #72]	; (800eb1c <prvAddCurrentTaskToDelayedList+0x9c>)
 800ead4:	681a      	ldr	r2, [r3, #0]
 800ead6:	4b0f      	ldr	r3, [pc, #60]	; (800eb14 <prvAddCurrentTaskToDelayedList+0x94>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	3304      	adds	r3, #4
 800eadc:	4619      	mov	r1, r3
 800eade:	4610      	mov	r0, r2
 800eae0:	f7fe f955 	bl	800cd8e <vListInsert>
}
 800eae4:	e010      	b.n	800eb08 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800eae6:	4b0e      	ldr	r3, [pc, #56]	; (800eb20 <prvAddCurrentTaskToDelayedList+0xa0>)
 800eae8:	681a      	ldr	r2, [r3, #0]
 800eaea:	4b0a      	ldr	r3, [pc, #40]	; (800eb14 <prvAddCurrentTaskToDelayedList+0x94>)
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	3304      	adds	r3, #4
 800eaf0:	4619      	mov	r1, r3
 800eaf2:	4610      	mov	r0, r2
 800eaf4:	f7fe f94b 	bl	800cd8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800eaf8:	4b0a      	ldr	r3, [pc, #40]	; (800eb24 <prvAddCurrentTaskToDelayedList+0xa4>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	68ba      	ldr	r2, [r7, #8]
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d202      	bcs.n	800eb08 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800eb02:	4a08      	ldr	r2, [pc, #32]	; (800eb24 <prvAddCurrentTaskToDelayedList+0xa4>)
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	6013      	str	r3, [r2, #0]
}
 800eb08:	bf00      	nop
 800eb0a:	3710      	adds	r7, #16
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	200011c8 	.word	0x200011c8
 800eb14:	20000cf0 	.word	0x20000cf0
 800eb18:	200011b0 	.word	0x200011b0
 800eb1c:	20001180 	.word	0x20001180
 800eb20:	2000117c 	.word	0x2000117c
 800eb24:	200011e4 	.word	0x200011e4

0800eb28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b08a      	sub	sp, #40	; 0x28
 800eb2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800eb32:	f000 faff 	bl	800f134 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800eb36:	4b1c      	ldr	r3, [pc, #112]	; (800eba8 <xTimerCreateTimerTask+0x80>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d021      	beq.n	800eb82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800eb3e:	2300      	movs	r3, #0
 800eb40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800eb42:	2300      	movs	r3, #0
 800eb44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800eb46:	1d3a      	adds	r2, r7, #4
 800eb48:	f107 0108 	add.w	r1, r7, #8
 800eb4c:	f107 030c 	add.w	r3, r7, #12
 800eb50:	4618      	mov	r0, r3
 800eb52:	f7fe f8b1 	bl	800ccb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800eb56:	6879      	ldr	r1, [r7, #4]
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	68fa      	ldr	r2, [r7, #12]
 800eb5c:	9202      	str	r2, [sp, #8]
 800eb5e:	9301      	str	r3, [sp, #4]
 800eb60:	2302      	movs	r3, #2
 800eb62:	9300      	str	r3, [sp, #0]
 800eb64:	2300      	movs	r3, #0
 800eb66:	460a      	mov	r2, r1
 800eb68:	4910      	ldr	r1, [pc, #64]	; (800ebac <xTimerCreateTimerTask+0x84>)
 800eb6a:	4811      	ldr	r0, [pc, #68]	; (800ebb0 <xTimerCreateTimerTask+0x88>)
 800eb6c:	f7fe ff26 	bl	800d9bc <xTaskCreateStatic>
 800eb70:	4602      	mov	r2, r0
 800eb72:	4b10      	ldr	r3, [pc, #64]	; (800ebb4 <xTimerCreateTimerTask+0x8c>)
 800eb74:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800eb76:	4b0f      	ldr	r3, [pc, #60]	; (800ebb4 <xTimerCreateTimerTask+0x8c>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d001      	beq.n	800eb82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800eb7e:	2301      	movs	r3, #1
 800eb80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800eb82:	697b      	ldr	r3, [r7, #20]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d109      	bne.n	800eb9c <xTimerCreateTimerTask+0x74>
	__asm volatile
 800eb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb8c:	f383 8811 	msr	BASEPRI, r3
 800eb90:	f3bf 8f6f 	isb	sy
 800eb94:	f3bf 8f4f 	dsb	sy
 800eb98:	613b      	str	r3, [r7, #16]
 800eb9a:	e7fe      	b.n	800eb9a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800eb9c:	697b      	ldr	r3, [r7, #20]
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3718      	adds	r7, #24
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}
 800eba6:	bf00      	nop
 800eba8:	20001228 	.word	0x20001228
 800ebac:	08016c18 	.word	0x08016c18
 800ebb0:	0800ece9 	.word	0x0800ece9
 800ebb4:	2000122c 	.word	0x2000122c

0800ebb8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b08a      	sub	sp, #40	; 0x28
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	60f8      	str	r0, [r7, #12]
 800ebc0:	60b9      	str	r1, [r7, #8]
 800ebc2:	607a      	str	r2, [r7, #4]
 800ebc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d109      	bne.n	800ebe4 <xTimerGenericCommand+0x2c>
 800ebd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd4:	f383 8811 	msr	BASEPRI, r3
 800ebd8:	f3bf 8f6f 	isb	sy
 800ebdc:	f3bf 8f4f 	dsb	sy
 800ebe0:	623b      	str	r3, [r7, #32]
 800ebe2:	e7fe      	b.n	800ebe2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ebe4:	4b19      	ldr	r3, [pc, #100]	; (800ec4c <xTimerGenericCommand+0x94>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d02a      	beq.n	800ec42 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ebec:	68bb      	ldr	r3, [r7, #8]
 800ebee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	2b05      	cmp	r3, #5
 800ebfc:	dc18      	bgt.n	800ec30 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ebfe:	f7ff fd83 	bl	800e708 <xTaskGetSchedulerState>
 800ec02:	4603      	mov	r3, r0
 800ec04:	2b02      	cmp	r3, #2
 800ec06:	d109      	bne.n	800ec1c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ec08:	4b10      	ldr	r3, [pc, #64]	; (800ec4c <xTimerGenericCommand+0x94>)
 800ec0a:	6818      	ldr	r0, [r3, #0]
 800ec0c:	f107 0110 	add.w	r1, r7, #16
 800ec10:	2300      	movs	r3, #0
 800ec12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec14:	f7fe fa5c 	bl	800d0d0 <xQueueGenericSend>
 800ec18:	6278      	str	r0, [r7, #36]	; 0x24
 800ec1a:	e012      	b.n	800ec42 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ec1c:	4b0b      	ldr	r3, [pc, #44]	; (800ec4c <xTimerGenericCommand+0x94>)
 800ec1e:	6818      	ldr	r0, [r3, #0]
 800ec20:	f107 0110 	add.w	r1, r7, #16
 800ec24:	2300      	movs	r3, #0
 800ec26:	2200      	movs	r2, #0
 800ec28:	f7fe fa52 	bl	800d0d0 <xQueueGenericSend>
 800ec2c:	6278      	str	r0, [r7, #36]	; 0x24
 800ec2e:	e008      	b.n	800ec42 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ec30:	4b06      	ldr	r3, [pc, #24]	; (800ec4c <xTimerGenericCommand+0x94>)
 800ec32:	6818      	ldr	r0, [r3, #0]
 800ec34:	f107 0110 	add.w	r1, r7, #16
 800ec38:	2300      	movs	r3, #0
 800ec3a:	683a      	ldr	r2, [r7, #0]
 800ec3c:	f7fe fb42 	bl	800d2c4 <xQueueGenericSendFromISR>
 800ec40:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ec42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	3728      	adds	r7, #40	; 0x28
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}
 800ec4c:	20001228 	.word	0x20001228

0800ec50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b088      	sub	sp, #32
 800ec54:	af02      	add	r7, sp, #8
 800ec56:	6078      	str	r0, [r7, #4]
 800ec58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec5a:	4b22      	ldr	r3, [pc, #136]	; (800ece4 <prvProcessExpiredTimer+0x94>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	68db      	ldr	r3, [r3, #12]
 800ec60:	68db      	ldr	r3, [r3, #12]
 800ec62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	3304      	adds	r3, #4
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f7fe f8c9 	bl	800ce00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec74:	f003 0304 	and.w	r3, r3, #4
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d021      	beq.n	800ecc0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	699a      	ldr	r2, [r3, #24]
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	18d1      	adds	r1, r2, r3
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	683a      	ldr	r2, [r7, #0]
 800ec88:	6978      	ldr	r0, [r7, #20]
 800ec8a:	f000 f8d1 	bl	800ee30 <prvInsertTimerInActiveList>
 800ec8e:	4603      	mov	r3, r0
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d01e      	beq.n	800ecd2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ec94:	2300      	movs	r3, #0
 800ec96:	9300      	str	r3, [sp, #0]
 800ec98:	2300      	movs	r3, #0
 800ec9a:	687a      	ldr	r2, [r7, #4]
 800ec9c:	2100      	movs	r1, #0
 800ec9e:	6978      	ldr	r0, [r7, #20]
 800eca0:	f7ff ff8a 	bl	800ebb8 <xTimerGenericCommand>
 800eca4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d112      	bne.n	800ecd2 <prvProcessExpiredTimer+0x82>
 800ecac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecb0:	f383 8811 	msr	BASEPRI, r3
 800ecb4:	f3bf 8f6f 	isb	sy
 800ecb8:	f3bf 8f4f 	dsb	sy
 800ecbc:	60fb      	str	r3, [r7, #12]
 800ecbe:	e7fe      	b.n	800ecbe <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ecc6:	f023 0301 	bic.w	r3, r3, #1
 800ecca:	b2da      	uxtb	r2, r3
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	6a1b      	ldr	r3, [r3, #32]
 800ecd6:	6978      	ldr	r0, [r7, #20]
 800ecd8:	4798      	blx	r3
}
 800ecda:	bf00      	nop
 800ecdc:	3718      	adds	r7, #24
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}
 800ece2:	bf00      	nop
 800ece4:	20001220 	.word	0x20001220

0800ece8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b084      	sub	sp, #16
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ecf0:	f107 0308 	add.w	r3, r7, #8
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f000 f857 	bl	800eda8 <prvGetNextExpireTime>
 800ecfa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ecfc:	68bb      	ldr	r3, [r7, #8]
 800ecfe:	4619      	mov	r1, r3
 800ed00:	68f8      	ldr	r0, [r7, #12]
 800ed02:	f000 f803 	bl	800ed0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ed06:	f000 f8d5 	bl	800eeb4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ed0a:	e7f1      	b.n	800ecf0 <prvTimerTask+0x8>

0800ed0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b084      	sub	sp, #16
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
 800ed14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ed16:	f7ff f909 	bl	800df2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ed1a:	f107 0308 	add.w	r3, r7, #8
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f000 f866 	bl	800edf0 <prvSampleTimeNow>
 800ed24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d130      	bne.n	800ed8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d10a      	bne.n	800ed48 <prvProcessTimerOrBlockTask+0x3c>
 800ed32:	687a      	ldr	r2, [r7, #4]
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d806      	bhi.n	800ed48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ed3a:	f7ff f905 	bl	800df48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ed3e:	68f9      	ldr	r1, [r7, #12]
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f7ff ff85 	bl	800ec50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ed46:	e024      	b.n	800ed92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d008      	beq.n	800ed60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ed4e:	4b13      	ldr	r3, [pc, #76]	; (800ed9c <prvProcessTimerOrBlockTask+0x90>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d101      	bne.n	800ed5c <prvProcessTimerOrBlockTask+0x50>
 800ed58:	2301      	movs	r3, #1
 800ed5a:	e000      	b.n	800ed5e <prvProcessTimerOrBlockTask+0x52>
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ed60:	4b0f      	ldr	r3, [pc, #60]	; (800eda0 <prvProcessTimerOrBlockTask+0x94>)
 800ed62:	6818      	ldr	r0, [r3, #0]
 800ed64:	687a      	ldr	r2, [r7, #4]
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	1ad3      	subs	r3, r2, r3
 800ed6a:	683a      	ldr	r2, [r7, #0]
 800ed6c:	4619      	mov	r1, r3
 800ed6e:	f7fe fdf1 	bl	800d954 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ed72:	f7ff f8e9 	bl	800df48 <xTaskResumeAll>
 800ed76:	4603      	mov	r3, r0
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d10a      	bne.n	800ed92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ed7c:	4b09      	ldr	r3, [pc, #36]	; (800eda4 <prvProcessTimerOrBlockTask+0x98>)
 800ed7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed82:	601a      	str	r2, [r3, #0]
 800ed84:	f3bf 8f4f 	dsb	sy
 800ed88:	f3bf 8f6f 	isb	sy
}
 800ed8c:	e001      	b.n	800ed92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ed8e:	f7ff f8db 	bl	800df48 <xTaskResumeAll>
}
 800ed92:	bf00      	nop
 800ed94:	3710      	adds	r7, #16
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}
 800ed9a:	bf00      	nop
 800ed9c:	20001224 	.word	0x20001224
 800eda0:	20001228 	.word	0x20001228
 800eda4:	e000ed04 	.word	0xe000ed04

0800eda8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800eda8:	b480      	push	{r7}
 800edaa:	b085      	sub	sp, #20
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800edb0:	4b0e      	ldr	r3, [pc, #56]	; (800edec <prvGetNextExpireTime+0x44>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d101      	bne.n	800edbe <prvGetNextExpireTime+0x16>
 800edba:	2201      	movs	r2, #1
 800edbc:	e000      	b.n	800edc0 <prvGetNextExpireTime+0x18>
 800edbe:	2200      	movs	r2, #0
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d105      	bne.n	800edd8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800edcc:	4b07      	ldr	r3, [pc, #28]	; (800edec <prvGetNextExpireTime+0x44>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	68db      	ldr	r3, [r3, #12]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	60fb      	str	r3, [r7, #12]
 800edd6:	e001      	b.n	800eddc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800edd8:	2300      	movs	r3, #0
 800edda:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800eddc:	68fb      	ldr	r3, [r7, #12]
}
 800edde:	4618      	mov	r0, r3
 800ede0:	3714      	adds	r7, #20
 800ede2:	46bd      	mov	sp, r7
 800ede4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede8:	4770      	bx	lr
 800edea:	bf00      	nop
 800edec:	20001220 	.word	0x20001220

0800edf0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800edf8:	f7ff f942 	bl	800e080 <xTaskGetTickCount>
 800edfc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800edfe:	4b0b      	ldr	r3, [pc, #44]	; (800ee2c <prvSampleTimeNow+0x3c>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	68fa      	ldr	r2, [r7, #12]
 800ee04:	429a      	cmp	r2, r3
 800ee06:	d205      	bcs.n	800ee14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ee08:	f000 f930 	bl	800f06c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2201      	movs	r2, #1
 800ee10:	601a      	str	r2, [r3, #0]
 800ee12:	e002      	b.n	800ee1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2200      	movs	r2, #0
 800ee18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ee1a:	4a04      	ldr	r2, [pc, #16]	; (800ee2c <prvSampleTimeNow+0x3c>)
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ee20:	68fb      	ldr	r3, [r7, #12]
}
 800ee22:	4618      	mov	r0, r3
 800ee24:	3710      	adds	r7, #16
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}
 800ee2a:	bf00      	nop
 800ee2c:	20001230 	.word	0x20001230

0800ee30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b086      	sub	sp, #24
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	60f8      	str	r0, [r7, #12]
 800ee38:	60b9      	str	r1, [r7, #8]
 800ee3a:	607a      	str	r2, [r7, #4]
 800ee3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ee3e:	2300      	movs	r3, #0
 800ee40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	68ba      	ldr	r2, [r7, #8]
 800ee46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	68fa      	ldr	r2, [r7, #12]
 800ee4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ee4e:	68ba      	ldr	r2, [r7, #8]
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d812      	bhi.n	800ee7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee56:	687a      	ldr	r2, [r7, #4]
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	1ad2      	subs	r2, r2, r3
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	699b      	ldr	r3, [r3, #24]
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d302      	bcc.n	800ee6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ee64:	2301      	movs	r3, #1
 800ee66:	617b      	str	r3, [r7, #20]
 800ee68:	e01b      	b.n	800eea2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ee6a:	4b10      	ldr	r3, [pc, #64]	; (800eeac <prvInsertTimerInActiveList+0x7c>)
 800ee6c:	681a      	ldr	r2, [r3, #0]
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	3304      	adds	r3, #4
 800ee72:	4619      	mov	r1, r3
 800ee74:	4610      	mov	r0, r2
 800ee76:	f7fd ff8a 	bl	800cd8e <vListInsert>
 800ee7a:	e012      	b.n	800eea2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ee7c:	687a      	ldr	r2, [r7, #4]
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d206      	bcs.n	800ee92 <prvInsertTimerInActiveList+0x62>
 800ee84:	68ba      	ldr	r2, [r7, #8]
 800ee86:	683b      	ldr	r3, [r7, #0]
 800ee88:	429a      	cmp	r2, r3
 800ee8a:	d302      	bcc.n	800ee92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	617b      	str	r3, [r7, #20]
 800ee90:	e007      	b.n	800eea2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ee92:	4b07      	ldr	r3, [pc, #28]	; (800eeb0 <prvInsertTimerInActiveList+0x80>)
 800ee94:	681a      	ldr	r2, [r3, #0]
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	3304      	adds	r3, #4
 800ee9a:	4619      	mov	r1, r3
 800ee9c:	4610      	mov	r0, r2
 800ee9e:	f7fd ff76 	bl	800cd8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800eea2:	697b      	ldr	r3, [r7, #20]
}
 800eea4:	4618      	mov	r0, r3
 800eea6:	3718      	adds	r7, #24
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}
 800eeac:	20001224 	.word	0x20001224
 800eeb0:	20001220 	.word	0x20001220

0800eeb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b08e      	sub	sp, #56	; 0x38
 800eeb8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eeba:	e0c6      	b.n	800f04a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	da17      	bge.n	800eef2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800eec2:	1d3b      	adds	r3, r7, #4
 800eec4:	3304      	adds	r3, #4
 800eec6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800eec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d109      	bne.n	800eee2 <prvProcessReceivedCommands+0x2e>
 800eece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed2:	f383 8811 	msr	BASEPRI, r3
 800eed6:	f3bf 8f6f 	isb	sy
 800eeda:	f3bf 8f4f 	dsb	sy
 800eede:	61fb      	str	r3, [r7, #28]
 800eee0:	e7fe      	b.n	800eee0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800eee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eee8:	6850      	ldr	r0, [r2, #4]
 800eeea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eeec:	6892      	ldr	r2, [r2, #8]
 800eeee:	4611      	mov	r1, r2
 800eef0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	f2c0 80a7 	blt.w	800f048 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800eefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef00:	695b      	ldr	r3, [r3, #20]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d004      	beq.n	800ef10 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ef06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef08:	3304      	adds	r3, #4
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f7fd ff78 	bl	800ce00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ef10:	463b      	mov	r3, r7
 800ef12:	4618      	mov	r0, r3
 800ef14:	f7ff ff6c 	bl	800edf0 <prvSampleTimeNow>
 800ef18:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2b09      	cmp	r3, #9
 800ef1e:	f200 8094 	bhi.w	800f04a <prvProcessReceivedCommands+0x196>
 800ef22:	a201      	add	r2, pc, #4	; (adr r2, 800ef28 <prvProcessReceivedCommands+0x74>)
 800ef24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef28:	0800ef51 	.word	0x0800ef51
 800ef2c:	0800ef51 	.word	0x0800ef51
 800ef30:	0800ef51 	.word	0x0800ef51
 800ef34:	0800efc3 	.word	0x0800efc3
 800ef38:	0800efd7 	.word	0x0800efd7
 800ef3c:	0800f01f 	.word	0x0800f01f
 800ef40:	0800ef51 	.word	0x0800ef51
 800ef44:	0800ef51 	.word	0x0800ef51
 800ef48:	0800efc3 	.word	0x0800efc3
 800ef4c:	0800efd7 	.word	0x0800efd7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ef50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef56:	f043 0301 	orr.w	r3, r3, #1
 800ef5a:	b2da      	uxtb	r2, r3
 800ef5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ef62:	68ba      	ldr	r2, [r7, #8]
 800ef64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef66:	699b      	ldr	r3, [r3, #24]
 800ef68:	18d1      	adds	r1, r2, r3
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef70:	f7ff ff5e 	bl	800ee30 <prvInsertTimerInActiveList>
 800ef74:	4603      	mov	r3, r0
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d067      	beq.n	800f04a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ef7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef7c:	6a1b      	ldr	r3, [r3, #32]
 800ef7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ef82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef88:	f003 0304 	and.w	r3, r3, #4
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d05c      	beq.n	800f04a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ef90:	68ba      	ldr	r2, [r7, #8]
 800ef92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef94:	699b      	ldr	r3, [r3, #24]
 800ef96:	441a      	add	r2, r3
 800ef98:	2300      	movs	r3, #0
 800ef9a:	9300      	str	r3, [sp, #0]
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	2100      	movs	r1, #0
 800efa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800efa2:	f7ff fe09 	bl	800ebb8 <xTimerGenericCommand>
 800efa6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800efa8:	6a3b      	ldr	r3, [r7, #32]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d14d      	bne.n	800f04a <prvProcessReceivedCommands+0x196>
 800efae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efb2:	f383 8811 	msr	BASEPRI, r3
 800efb6:	f3bf 8f6f 	isb	sy
 800efba:	f3bf 8f4f 	dsb	sy
 800efbe:	61bb      	str	r3, [r7, #24]
 800efc0:	e7fe      	b.n	800efc0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800efc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800efc8:	f023 0301 	bic.w	r3, r3, #1
 800efcc:	b2da      	uxtb	r2, r3
 800efce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800efd4:	e039      	b.n	800f04a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800efd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800efdc:	f043 0301 	orr.w	r3, r3, #1
 800efe0:	b2da      	uxtb	r2, r3
 800efe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efe4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800efe8:	68ba      	ldr	r2, [r7, #8]
 800efea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800efee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eff0:	699b      	ldr	r3, [r3, #24]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d109      	bne.n	800f00a <prvProcessReceivedCommands+0x156>
 800eff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800effa:	f383 8811 	msr	BASEPRI, r3
 800effe:	f3bf 8f6f 	isb	sy
 800f002:	f3bf 8f4f 	dsb	sy
 800f006:	617b      	str	r3, [r7, #20]
 800f008:	e7fe      	b.n	800f008 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f00c:	699a      	ldr	r2, [r3, #24]
 800f00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f010:	18d1      	adds	r1, r2, r3
 800f012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f018:	f7ff ff0a 	bl	800ee30 <prvInsertTimerInActiveList>
					break;
 800f01c:	e015      	b.n	800f04a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f020:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f024:	f003 0302 	and.w	r3, r3, #2
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d103      	bne.n	800f034 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800f02c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f02e:	f000 fbc1 	bl	800f7b4 <vPortFree>
 800f032:	e00a      	b.n	800f04a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f036:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f03a:	f023 0301 	bic.w	r3, r3, #1
 800f03e:	b2da      	uxtb	r2, r3
 800f040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f046:	e000      	b.n	800f04a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f048:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f04a:	4b07      	ldr	r3, [pc, #28]	; (800f068 <prvProcessReceivedCommands+0x1b4>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	1d39      	adds	r1, r7, #4
 800f050:	2200      	movs	r2, #0
 800f052:	4618      	mov	r0, r3
 800f054:	f7fe f9ca 	bl	800d3ec <xQueueReceive>
 800f058:	4603      	mov	r3, r0
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	f47f af2e 	bne.w	800eebc <prvProcessReceivedCommands+0x8>
	}
}
 800f060:	bf00      	nop
 800f062:	3730      	adds	r7, #48	; 0x30
 800f064:	46bd      	mov	sp, r7
 800f066:	bd80      	pop	{r7, pc}
 800f068:	20001228 	.word	0x20001228

0800f06c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b088      	sub	sp, #32
 800f070:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f072:	e047      	b.n	800f104 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f074:	4b2d      	ldr	r3, [pc, #180]	; (800f12c <prvSwitchTimerLists+0xc0>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	68db      	ldr	r3, [r3, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f07e:	4b2b      	ldr	r3, [pc, #172]	; (800f12c <prvSwitchTimerLists+0xc0>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	68db      	ldr	r3, [r3, #12]
 800f084:	68db      	ldr	r3, [r3, #12]
 800f086:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	3304      	adds	r3, #4
 800f08c:	4618      	mov	r0, r3
 800f08e:	f7fd feb7 	bl	800ce00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	6a1b      	ldr	r3, [r3, #32]
 800f096:	68f8      	ldr	r0, [r7, #12]
 800f098:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f0a0:	f003 0304 	and.w	r3, r3, #4
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d02d      	beq.n	800f104 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	699b      	ldr	r3, [r3, #24]
 800f0ac:	693a      	ldr	r2, [r7, #16]
 800f0ae:	4413      	add	r3, r2
 800f0b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f0b2:	68ba      	ldr	r2, [r7, #8]
 800f0b4:	693b      	ldr	r3, [r7, #16]
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	d90e      	bls.n	800f0d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	68ba      	ldr	r2, [r7, #8]
 800f0be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	68fa      	ldr	r2, [r7, #12]
 800f0c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f0c6:	4b19      	ldr	r3, [pc, #100]	; (800f12c <prvSwitchTimerLists+0xc0>)
 800f0c8:	681a      	ldr	r2, [r3, #0]
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	3304      	adds	r3, #4
 800f0ce:	4619      	mov	r1, r3
 800f0d0:	4610      	mov	r0, r2
 800f0d2:	f7fd fe5c 	bl	800cd8e <vListInsert>
 800f0d6:	e015      	b.n	800f104 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f0d8:	2300      	movs	r3, #0
 800f0da:	9300      	str	r3, [sp, #0]
 800f0dc:	2300      	movs	r3, #0
 800f0de:	693a      	ldr	r2, [r7, #16]
 800f0e0:	2100      	movs	r1, #0
 800f0e2:	68f8      	ldr	r0, [r7, #12]
 800f0e4:	f7ff fd68 	bl	800ebb8 <xTimerGenericCommand>
 800f0e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d109      	bne.n	800f104 <prvSwitchTimerLists+0x98>
 800f0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0f4:	f383 8811 	msr	BASEPRI, r3
 800f0f8:	f3bf 8f6f 	isb	sy
 800f0fc:	f3bf 8f4f 	dsb	sy
 800f100:	603b      	str	r3, [r7, #0]
 800f102:	e7fe      	b.n	800f102 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f104:	4b09      	ldr	r3, [pc, #36]	; (800f12c <prvSwitchTimerLists+0xc0>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d1b2      	bne.n	800f074 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f10e:	4b07      	ldr	r3, [pc, #28]	; (800f12c <prvSwitchTimerLists+0xc0>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f114:	4b06      	ldr	r3, [pc, #24]	; (800f130 <prvSwitchTimerLists+0xc4>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	4a04      	ldr	r2, [pc, #16]	; (800f12c <prvSwitchTimerLists+0xc0>)
 800f11a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f11c:	4a04      	ldr	r2, [pc, #16]	; (800f130 <prvSwitchTimerLists+0xc4>)
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	6013      	str	r3, [r2, #0]
}
 800f122:	bf00      	nop
 800f124:	3718      	adds	r7, #24
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}
 800f12a:	bf00      	nop
 800f12c:	20001220 	.word	0x20001220
 800f130:	20001224 	.word	0x20001224

0800f134 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b082      	sub	sp, #8
 800f138:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f13a:	f000 f95f 	bl	800f3fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f13e:	4b15      	ldr	r3, [pc, #84]	; (800f194 <prvCheckForValidListAndQueue+0x60>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d120      	bne.n	800f188 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f146:	4814      	ldr	r0, [pc, #80]	; (800f198 <prvCheckForValidListAndQueue+0x64>)
 800f148:	f7fd fdd0 	bl	800ccec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f14c:	4813      	ldr	r0, [pc, #76]	; (800f19c <prvCheckForValidListAndQueue+0x68>)
 800f14e:	f7fd fdcd 	bl	800ccec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f152:	4b13      	ldr	r3, [pc, #76]	; (800f1a0 <prvCheckForValidListAndQueue+0x6c>)
 800f154:	4a10      	ldr	r2, [pc, #64]	; (800f198 <prvCheckForValidListAndQueue+0x64>)
 800f156:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f158:	4b12      	ldr	r3, [pc, #72]	; (800f1a4 <prvCheckForValidListAndQueue+0x70>)
 800f15a:	4a10      	ldr	r2, [pc, #64]	; (800f19c <prvCheckForValidListAndQueue+0x68>)
 800f15c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f15e:	2300      	movs	r3, #0
 800f160:	9300      	str	r3, [sp, #0]
 800f162:	4b11      	ldr	r3, [pc, #68]	; (800f1a8 <prvCheckForValidListAndQueue+0x74>)
 800f164:	4a11      	ldr	r2, [pc, #68]	; (800f1ac <prvCheckForValidListAndQueue+0x78>)
 800f166:	2110      	movs	r1, #16
 800f168:	200a      	movs	r0, #10
 800f16a:	f7fd fedb 	bl	800cf24 <xQueueGenericCreateStatic>
 800f16e:	4602      	mov	r2, r0
 800f170:	4b08      	ldr	r3, [pc, #32]	; (800f194 <prvCheckForValidListAndQueue+0x60>)
 800f172:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f174:	4b07      	ldr	r3, [pc, #28]	; (800f194 <prvCheckForValidListAndQueue+0x60>)
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d005      	beq.n	800f188 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f17c:	4b05      	ldr	r3, [pc, #20]	; (800f194 <prvCheckForValidListAndQueue+0x60>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	490b      	ldr	r1, [pc, #44]	; (800f1b0 <prvCheckForValidListAndQueue+0x7c>)
 800f182:	4618      	mov	r0, r3
 800f184:	f7fe fbbe 	bl	800d904 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f188:	f000 f966 	bl	800f458 <vPortExitCritical>
}
 800f18c:	bf00      	nop
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}
 800f192:	bf00      	nop
 800f194:	20001228 	.word	0x20001228
 800f198:	200011f8 	.word	0x200011f8
 800f19c:	2000120c 	.word	0x2000120c
 800f1a0:	20001220 	.word	0x20001220
 800f1a4:	20001224 	.word	0x20001224
 800f1a8:	200012d4 	.word	0x200012d4
 800f1ac:	20001234 	.word	0x20001234
 800f1b0:	08016c20 	.word	0x08016c20

0800f1b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f1b4:	b480      	push	{r7}
 800f1b6:	b085      	sub	sp, #20
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	60f8      	str	r0, [r7, #12]
 800f1bc:	60b9      	str	r1, [r7, #8]
 800f1be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	3b04      	subs	r3, #4
 800f1c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f1cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	3b04      	subs	r3, #4
 800f1d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	f023 0201 	bic.w	r2, r3, #1
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	3b04      	subs	r3, #4
 800f1e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f1e4:	4a0c      	ldr	r2, [pc, #48]	; (800f218 <pxPortInitialiseStack+0x64>)
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	3b14      	subs	r3, #20
 800f1ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f1f0:	687a      	ldr	r2, [r7, #4]
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	3b04      	subs	r3, #4
 800f1fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	f06f 0202 	mvn.w	r2, #2
 800f202:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	3b20      	subs	r3, #32
 800f208:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f20a:	68fb      	ldr	r3, [r7, #12]
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3714      	adds	r7, #20
 800f210:	46bd      	mov	sp, r7
 800f212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f216:	4770      	bx	lr
 800f218:	0800f21d 	.word	0x0800f21d

0800f21c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f21c:	b480      	push	{r7}
 800f21e:	b085      	sub	sp, #20
 800f220:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f222:	2300      	movs	r3, #0
 800f224:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f226:	4b11      	ldr	r3, [pc, #68]	; (800f26c <prvTaskExitError+0x50>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f22e:	d009      	beq.n	800f244 <prvTaskExitError+0x28>
 800f230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f234:	f383 8811 	msr	BASEPRI, r3
 800f238:	f3bf 8f6f 	isb	sy
 800f23c:	f3bf 8f4f 	dsb	sy
 800f240:	60fb      	str	r3, [r7, #12]
 800f242:	e7fe      	b.n	800f242 <prvTaskExitError+0x26>
 800f244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f248:	f383 8811 	msr	BASEPRI, r3
 800f24c:	f3bf 8f6f 	isb	sy
 800f250:	f3bf 8f4f 	dsb	sy
 800f254:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f256:	bf00      	nop
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d0fc      	beq.n	800f258 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f25e:	bf00      	nop
 800f260:	3714      	adds	r7, #20
 800f262:	46bd      	mov	sp, r7
 800f264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f268:	4770      	bx	lr
 800f26a:	bf00      	nop
 800f26c:	2000011c 	.word	0x2000011c

0800f270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f270:	4b07      	ldr	r3, [pc, #28]	; (800f290 <pxCurrentTCBConst2>)
 800f272:	6819      	ldr	r1, [r3, #0]
 800f274:	6808      	ldr	r0, [r1, #0]
 800f276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f27a:	f380 8809 	msr	PSP, r0
 800f27e:	f3bf 8f6f 	isb	sy
 800f282:	f04f 0000 	mov.w	r0, #0
 800f286:	f380 8811 	msr	BASEPRI, r0
 800f28a:	4770      	bx	lr
 800f28c:	f3af 8000 	nop.w

0800f290 <pxCurrentTCBConst2>:
 800f290:	20000cf0 	.word	0x20000cf0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f294:	bf00      	nop
 800f296:	bf00      	nop

0800f298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f298:	4808      	ldr	r0, [pc, #32]	; (800f2bc <prvPortStartFirstTask+0x24>)
 800f29a:	6800      	ldr	r0, [r0, #0]
 800f29c:	6800      	ldr	r0, [r0, #0]
 800f29e:	f380 8808 	msr	MSP, r0
 800f2a2:	f04f 0000 	mov.w	r0, #0
 800f2a6:	f380 8814 	msr	CONTROL, r0
 800f2aa:	b662      	cpsie	i
 800f2ac:	b661      	cpsie	f
 800f2ae:	f3bf 8f4f 	dsb	sy
 800f2b2:	f3bf 8f6f 	isb	sy
 800f2b6:	df00      	svc	0
 800f2b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f2ba:	bf00      	nop
 800f2bc:	e000ed08 	.word	0xe000ed08

0800f2c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b086      	sub	sp, #24
 800f2c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f2c6:	4b44      	ldr	r3, [pc, #272]	; (800f3d8 <xPortStartScheduler+0x118>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	4a44      	ldr	r2, [pc, #272]	; (800f3dc <xPortStartScheduler+0x11c>)
 800f2cc:	4293      	cmp	r3, r2
 800f2ce:	d109      	bne.n	800f2e4 <xPortStartScheduler+0x24>
 800f2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d4:	f383 8811 	msr	BASEPRI, r3
 800f2d8:	f3bf 8f6f 	isb	sy
 800f2dc:	f3bf 8f4f 	dsb	sy
 800f2e0:	613b      	str	r3, [r7, #16]
 800f2e2:	e7fe      	b.n	800f2e2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f2e4:	4b3c      	ldr	r3, [pc, #240]	; (800f3d8 <xPortStartScheduler+0x118>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	4a3d      	ldr	r2, [pc, #244]	; (800f3e0 <xPortStartScheduler+0x120>)
 800f2ea:	4293      	cmp	r3, r2
 800f2ec:	d109      	bne.n	800f302 <xPortStartScheduler+0x42>
 800f2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2f2:	f383 8811 	msr	BASEPRI, r3
 800f2f6:	f3bf 8f6f 	isb	sy
 800f2fa:	f3bf 8f4f 	dsb	sy
 800f2fe:	60fb      	str	r3, [r7, #12]
 800f300:	e7fe      	b.n	800f300 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f302:	4b38      	ldr	r3, [pc, #224]	; (800f3e4 <xPortStartScheduler+0x124>)
 800f304:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f306:	697b      	ldr	r3, [r7, #20]
 800f308:	781b      	ldrb	r3, [r3, #0]
 800f30a:	b2db      	uxtb	r3, r3
 800f30c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	22ff      	movs	r2, #255	; 0xff
 800f312:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f314:	697b      	ldr	r3, [r7, #20]
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	b2db      	uxtb	r3, r3
 800f31a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f31c:	78fb      	ldrb	r3, [r7, #3]
 800f31e:	b2db      	uxtb	r3, r3
 800f320:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f324:	b2da      	uxtb	r2, r3
 800f326:	4b30      	ldr	r3, [pc, #192]	; (800f3e8 <xPortStartScheduler+0x128>)
 800f328:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f32a:	4b30      	ldr	r3, [pc, #192]	; (800f3ec <xPortStartScheduler+0x12c>)
 800f32c:	2207      	movs	r2, #7
 800f32e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f330:	e009      	b.n	800f346 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800f332:	4b2e      	ldr	r3, [pc, #184]	; (800f3ec <xPortStartScheduler+0x12c>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	3b01      	subs	r3, #1
 800f338:	4a2c      	ldr	r2, [pc, #176]	; (800f3ec <xPortStartScheduler+0x12c>)
 800f33a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f33c:	78fb      	ldrb	r3, [r7, #3]
 800f33e:	b2db      	uxtb	r3, r3
 800f340:	005b      	lsls	r3, r3, #1
 800f342:	b2db      	uxtb	r3, r3
 800f344:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f346:	78fb      	ldrb	r3, [r7, #3]
 800f348:	b2db      	uxtb	r3, r3
 800f34a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f34e:	2b80      	cmp	r3, #128	; 0x80
 800f350:	d0ef      	beq.n	800f332 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f352:	4b26      	ldr	r3, [pc, #152]	; (800f3ec <xPortStartScheduler+0x12c>)
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	f1c3 0307 	rsb	r3, r3, #7
 800f35a:	2b04      	cmp	r3, #4
 800f35c:	d009      	beq.n	800f372 <xPortStartScheduler+0xb2>
 800f35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f362:	f383 8811 	msr	BASEPRI, r3
 800f366:	f3bf 8f6f 	isb	sy
 800f36a:	f3bf 8f4f 	dsb	sy
 800f36e:	60bb      	str	r3, [r7, #8]
 800f370:	e7fe      	b.n	800f370 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f372:	4b1e      	ldr	r3, [pc, #120]	; (800f3ec <xPortStartScheduler+0x12c>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	021b      	lsls	r3, r3, #8
 800f378:	4a1c      	ldr	r2, [pc, #112]	; (800f3ec <xPortStartScheduler+0x12c>)
 800f37a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f37c:	4b1b      	ldr	r3, [pc, #108]	; (800f3ec <xPortStartScheduler+0x12c>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f384:	4a19      	ldr	r2, [pc, #100]	; (800f3ec <xPortStartScheduler+0x12c>)
 800f386:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	b2da      	uxtb	r2, r3
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f390:	4b17      	ldr	r3, [pc, #92]	; (800f3f0 <xPortStartScheduler+0x130>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	4a16      	ldr	r2, [pc, #88]	; (800f3f0 <xPortStartScheduler+0x130>)
 800f396:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f39a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f39c:	4b14      	ldr	r3, [pc, #80]	; (800f3f0 <xPortStartScheduler+0x130>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	4a13      	ldr	r2, [pc, #76]	; (800f3f0 <xPortStartScheduler+0x130>)
 800f3a2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f3a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f3a8:	f000 f8d6 	bl	800f558 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f3ac:	4b11      	ldr	r3, [pc, #68]	; (800f3f4 <xPortStartScheduler+0x134>)
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f3b2:	f000 f8f5 	bl	800f5a0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f3b6:	4b10      	ldr	r3, [pc, #64]	; (800f3f8 <xPortStartScheduler+0x138>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	4a0f      	ldr	r2, [pc, #60]	; (800f3f8 <xPortStartScheduler+0x138>)
 800f3bc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f3c0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f3c2:	f7ff ff69 	bl	800f298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f3c6:	f7fe ff23 	bl	800e210 <vTaskSwitchContext>
	prvTaskExitError();
 800f3ca:	f7ff ff27 	bl	800f21c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f3ce:	2300      	movs	r3, #0
}
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	3718      	adds	r7, #24
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	bd80      	pop	{r7, pc}
 800f3d8:	e000ed00 	.word	0xe000ed00
 800f3dc:	410fc271 	.word	0x410fc271
 800f3e0:	410fc270 	.word	0x410fc270
 800f3e4:	e000e400 	.word	0xe000e400
 800f3e8:	20001324 	.word	0x20001324
 800f3ec:	20001328 	.word	0x20001328
 800f3f0:	e000ed20 	.word	0xe000ed20
 800f3f4:	2000011c 	.word	0x2000011c
 800f3f8:	e000ef34 	.word	0xe000ef34

0800f3fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	b083      	sub	sp, #12
 800f400:	af00      	add	r7, sp, #0
 800f402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f406:	f383 8811 	msr	BASEPRI, r3
 800f40a:	f3bf 8f6f 	isb	sy
 800f40e:	f3bf 8f4f 	dsb	sy
 800f412:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f414:	4b0e      	ldr	r3, [pc, #56]	; (800f450 <vPortEnterCritical+0x54>)
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	3301      	adds	r3, #1
 800f41a:	4a0d      	ldr	r2, [pc, #52]	; (800f450 <vPortEnterCritical+0x54>)
 800f41c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f41e:	4b0c      	ldr	r3, [pc, #48]	; (800f450 <vPortEnterCritical+0x54>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	2b01      	cmp	r3, #1
 800f424:	d10e      	bne.n	800f444 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f426:	4b0b      	ldr	r3, [pc, #44]	; (800f454 <vPortEnterCritical+0x58>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	b2db      	uxtb	r3, r3
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d009      	beq.n	800f444 <vPortEnterCritical+0x48>
 800f430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f434:	f383 8811 	msr	BASEPRI, r3
 800f438:	f3bf 8f6f 	isb	sy
 800f43c:	f3bf 8f4f 	dsb	sy
 800f440:	603b      	str	r3, [r7, #0]
 800f442:	e7fe      	b.n	800f442 <vPortEnterCritical+0x46>
	}
}
 800f444:	bf00      	nop
 800f446:	370c      	adds	r7, #12
 800f448:	46bd      	mov	sp, r7
 800f44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44e:	4770      	bx	lr
 800f450:	2000011c 	.word	0x2000011c
 800f454:	e000ed04 	.word	0xe000ed04

0800f458 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f458:	b480      	push	{r7}
 800f45a:	b083      	sub	sp, #12
 800f45c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f45e:	4b11      	ldr	r3, [pc, #68]	; (800f4a4 <vPortExitCritical+0x4c>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d109      	bne.n	800f47a <vPortExitCritical+0x22>
 800f466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f46a:	f383 8811 	msr	BASEPRI, r3
 800f46e:	f3bf 8f6f 	isb	sy
 800f472:	f3bf 8f4f 	dsb	sy
 800f476:	607b      	str	r3, [r7, #4]
 800f478:	e7fe      	b.n	800f478 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800f47a:	4b0a      	ldr	r3, [pc, #40]	; (800f4a4 <vPortExitCritical+0x4c>)
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	3b01      	subs	r3, #1
 800f480:	4a08      	ldr	r2, [pc, #32]	; (800f4a4 <vPortExitCritical+0x4c>)
 800f482:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f484:	4b07      	ldr	r3, [pc, #28]	; (800f4a4 <vPortExitCritical+0x4c>)
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d104      	bne.n	800f496 <vPortExitCritical+0x3e>
 800f48c:	2300      	movs	r3, #0
 800f48e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800f496:	bf00      	nop
 800f498:	370c      	adds	r7, #12
 800f49a:	46bd      	mov	sp, r7
 800f49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a0:	4770      	bx	lr
 800f4a2:	bf00      	nop
 800f4a4:	2000011c 	.word	0x2000011c
	...

0800f4b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f4b0:	f3ef 8009 	mrs	r0, PSP
 800f4b4:	f3bf 8f6f 	isb	sy
 800f4b8:	4b15      	ldr	r3, [pc, #84]	; (800f510 <pxCurrentTCBConst>)
 800f4ba:	681a      	ldr	r2, [r3, #0]
 800f4bc:	f01e 0f10 	tst.w	lr, #16
 800f4c0:	bf08      	it	eq
 800f4c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f4c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4ca:	6010      	str	r0, [r2, #0]
 800f4cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f4d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f4d4:	f380 8811 	msr	BASEPRI, r0
 800f4d8:	f3bf 8f4f 	dsb	sy
 800f4dc:	f3bf 8f6f 	isb	sy
 800f4e0:	f7fe fe96 	bl	800e210 <vTaskSwitchContext>
 800f4e4:	f04f 0000 	mov.w	r0, #0
 800f4e8:	f380 8811 	msr	BASEPRI, r0
 800f4ec:	bc09      	pop	{r0, r3}
 800f4ee:	6819      	ldr	r1, [r3, #0]
 800f4f0:	6808      	ldr	r0, [r1, #0]
 800f4f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4f6:	f01e 0f10 	tst.w	lr, #16
 800f4fa:	bf08      	it	eq
 800f4fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f500:	f380 8809 	msr	PSP, r0
 800f504:	f3bf 8f6f 	isb	sy
 800f508:	4770      	bx	lr
 800f50a:	bf00      	nop
 800f50c:	f3af 8000 	nop.w

0800f510 <pxCurrentTCBConst>:
 800f510:	20000cf0 	.word	0x20000cf0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f514:	bf00      	nop
 800f516:	bf00      	nop

0800f518 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b082      	sub	sp, #8
 800f51c:	af00      	add	r7, sp, #0
	__asm volatile
 800f51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f522:	f383 8811 	msr	BASEPRI, r3
 800f526:	f3bf 8f6f 	isb	sy
 800f52a:	f3bf 8f4f 	dsb	sy
 800f52e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f530:	f7fe fdb6 	bl	800e0a0 <xTaskIncrementTick>
 800f534:	4603      	mov	r3, r0
 800f536:	2b00      	cmp	r3, #0
 800f538:	d003      	beq.n	800f542 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f53a:	4b06      	ldr	r3, [pc, #24]	; (800f554 <SysTick_Handler+0x3c>)
 800f53c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f540:	601a      	str	r2, [r3, #0]
 800f542:	2300      	movs	r3, #0
 800f544:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800f54c:	bf00      	nop
 800f54e:	3708      	adds	r7, #8
 800f550:	46bd      	mov	sp, r7
 800f552:	bd80      	pop	{r7, pc}
 800f554:	e000ed04 	.word	0xe000ed04

0800f558 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f558:	b480      	push	{r7}
 800f55a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f55c:	4b0b      	ldr	r3, [pc, #44]	; (800f58c <vPortSetupTimerInterrupt+0x34>)
 800f55e:	2200      	movs	r2, #0
 800f560:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f562:	4b0b      	ldr	r3, [pc, #44]	; (800f590 <vPortSetupTimerInterrupt+0x38>)
 800f564:	2200      	movs	r2, #0
 800f566:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f568:	4b0a      	ldr	r3, [pc, #40]	; (800f594 <vPortSetupTimerInterrupt+0x3c>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	4a0a      	ldr	r2, [pc, #40]	; (800f598 <vPortSetupTimerInterrupt+0x40>)
 800f56e:	fba2 2303 	umull	r2, r3, r2, r3
 800f572:	099b      	lsrs	r3, r3, #6
 800f574:	4a09      	ldr	r2, [pc, #36]	; (800f59c <vPortSetupTimerInterrupt+0x44>)
 800f576:	3b01      	subs	r3, #1
 800f578:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f57a:	4b04      	ldr	r3, [pc, #16]	; (800f58c <vPortSetupTimerInterrupt+0x34>)
 800f57c:	2207      	movs	r2, #7
 800f57e:	601a      	str	r2, [r3, #0]
}
 800f580:	bf00      	nop
 800f582:	46bd      	mov	sp, r7
 800f584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f588:	4770      	bx	lr
 800f58a:	bf00      	nop
 800f58c:	e000e010 	.word	0xe000e010
 800f590:	e000e018 	.word	0xe000e018
 800f594:	20000000 	.word	0x20000000
 800f598:	10624dd3 	.word	0x10624dd3
 800f59c:	e000e014 	.word	0xe000e014

0800f5a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f5a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f5b0 <vPortEnableVFP+0x10>
 800f5a4:	6801      	ldr	r1, [r0, #0]
 800f5a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f5aa:	6001      	str	r1, [r0, #0]
 800f5ac:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f5ae:	bf00      	nop
 800f5b0:	e000ed88 	.word	0xe000ed88

0800f5b4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f5b4:	b480      	push	{r7}
 800f5b6:	b085      	sub	sp, #20
 800f5b8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f5ba:	f3ef 8305 	mrs	r3, IPSR
 800f5be:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	2b0f      	cmp	r3, #15
 800f5c4:	d913      	bls.n	800f5ee <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f5c6:	4a16      	ldr	r2, [pc, #88]	; (800f620 <vPortValidateInterruptPriority+0x6c>)
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	4413      	add	r3, r2
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f5d0:	4b14      	ldr	r3, [pc, #80]	; (800f624 <vPortValidateInterruptPriority+0x70>)
 800f5d2:	781b      	ldrb	r3, [r3, #0]
 800f5d4:	7afa      	ldrb	r2, [r7, #11]
 800f5d6:	429a      	cmp	r2, r3
 800f5d8:	d209      	bcs.n	800f5ee <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800f5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5de:	f383 8811 	msr	BASEPRI, r3
 800f5e2:	f3bf 8f6f 	isb	sy
 800f5e6:	f3bf 8f4f 	dsb	sy
 800f5ea:	607b      	str	r3, [r7, #4]
 800f5ec:	e7fe      	b.n	800f5ec <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f5ee:	4b0e      	ldr	r3, [pc, #56]	; (800f628 <vPortValidateInterruptPriority+0x74>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f5f6:	4b0d      	ldr	r3, [pc, #52]	; (800f62c <vPortValidateInterruptPriority+0x78>)
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	429a      	cmp	r2, r3
 800f5fc:	d909      	bls.n	800f612 <vPortValidateInterruptPriority+0x5e>
 800f5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f602:	f383 8811 	msr	BASEPRI, r3
 800f606:	f3bf 8f6f 	isb	sy
 800f60a:	f3bf 8f4f 	dsb	sy
 800f60e:	603b      	str	r3, [r7, #0]
 800f610:	e7fe      	b.n	800f610 <vPortValidateInterruptPriority+0x5c>
	}
 800f612:	bf00      	nop
 800f614:	3714      	adds	r7, #20
 800f616:	46bd      	mov	sp, r7
 800f618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61c:	4770      	bx	lr
 800f61e:	bf00      	nop
 800f620:	e000e3f0 	.word	0xe000e3f0
 800f624:	20001324 	.word	0x20001324
 800f628:	e000ed0c 	.word	0xe000ed0c
 800f62c:	20001328 	.word	0x20001328

0800f630 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b08a      	sub	sp, #40	; 0x28
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f638:	2300      	movs	r3, #0
 800f63a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f63c:	f7fe fc76 	bl	800df2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f640:	4b57      	ldr	r3, [pc, #348]	; (800f7a0 <pvPortMalloc+0x170>)
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d101      	bne.n	800f64c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f648:	f000 f90c 	bl	800f864 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f64c:	4b55      	ldr	r3, [pc, #340]	; (800f7a4 <pvPortMalloc+0x174>)
 800f64e:	681a      	ldr	r2, [r3, #0]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	4013      	ands	r3, r2
 800f654:	2b00      	cmp	r3, #0
 800f656:	f040 808c 	bne.w	800f772 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d01c      	beq.n	800f69a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800f660:	2208      	movs	r2, #8
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	4413      	add	r3, r2
 800f666:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f003 0307 	and.w	r3, r3, #7
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d013      	beq.n	800f69a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f023 0307 	bic.w	r3, r3, #7
 800f678:	3308      	adds	r3, #8
 800f67a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f003 0307 	and.w	r3, r3, #7
 800f682:	2b00      	cmp	r3, #0
 800f684:	d009      	beq.n	800f69a <pvPortMalloc+0x6a>
 800f686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f68a:	f383 8811 	msr	BASEPRI, r3
 800f68e:	f3bf 8f6f 	isb	sy
 800f692:	f3bf 8f4f 	dsb	sy
 800f696:	617b      	str	r3, [r7, #20]
 800f698:	e7fe      	b.n	800f698 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d068      	beq.n	800f772 <pvPortMalloc+0x142>
 800f6a0:	4b41      	ldr	r3, [pc, #260]	; (800f7a8 <pvPortMalloc+0x178>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	687a      	ldr	r2, [r7, #4]
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	d863      	bhi.n	800f772 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f6aa:	4b40      	ldr	r3, [pc, #256]	; (800f7ac <pvPortMalloc+0x17c>)
 800f6ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f6ae:	4b3f      	ldr	r3, [pc, #252]	; (800f7ac <pvPortMalloc+0x17c>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f6b4:	e004      	b.n	800f6c0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800f6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6c2:	685b      	ldr	r3, [r3, #4]
 800f6c4:	687a      	ldr	r2, [r7, #4]
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	d903      	bls.n	800f6d2 <pvPortMalloc+0xa2>
 800f6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d1f1      	bne.n	800f6b6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f6d2:	4b33      	ldr	r3, [pc, #204]	; (800f7a0 <pvPortMalloc+0x170>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	d04a      	beq.n	800f772 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f6dc:	6a3b      	ldr	r3, [r7, #32]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	2208      	movs	r2, #8
 800f6e2:	4413      	add	r3, r2
 800f6e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e8:	681a      	ldr	r2, [r3, #0]
 800f6ea:	6a3b      	ldr	r3, [r7, #32]
 800f6ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f0:	685a      	ldr	r2, [r3, #4]
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	1ad2      	subs	r2, r2, r3
 800f6f6:	2308      	movs	r3, #8
 800f6f8:	005b      	lsls	r3, r3, #1
 800f6fa:	429a      	cmp	r2, r3
 800f6fc:	d91e      	bls.n	800f73c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f6fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	4413      	add	r3, r2
 800f704:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f706:	69bb      	ldr	r3, [r7, #24]
 800f708:	f003 0307 	and.w	r3, r3, #7
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d009      	beq.n	800f724 <pvPortMalloc+0xf4>
 800f710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f714:	f383 8811 	msr	BASEPRI, r3
 800f718:	f3bf 8f6f 	isb	sy
 800f71c:	f3bf 8f4f 	dsb	sy
 800f720:	613b      	str	r3, [r7, #16]
 800f722:	e7fe      	b.n	800f722 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f726:	685a      	ldr	r2, [r3, #4]
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	1ad2      	subs	r2, r2, r3
 800f72c:	69bb      	ldr	r3, [r7, #24]
 800f72e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f732:	687a      	ldr	r2, [r7, #4]
 800f734:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f736:	69b8      	ldr	r0, [r7, #24]
 800f738:	f000 f8f6 	bl	800f928 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f73c:	4b1a      	ldr	r3, [pc, #104]	; (800f7a8 <pvPortMalloc+0x178>)
 800f73e:	681a      	ldr	r2, [r3, #0]
 800f740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f742:	685b      	ldr	r3, [r3, #4]
 800f744:	1ad3      	subs	r3, r2, r3
 800f746:	4a18      	ldr	r2, [pc, #96]	; (800f7a8 <pvPortMalloc+0x178>)
 800f748:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f74a:	4b17      	ldr	r3, [pc, #92]	; (800f7a8 <pvPortMalloc+0x178>)
 800f74c:	681a      	ldr	r2, [r3, #0]
 800f74e:	4b18      	ldr	r3, [pc, #96]	; (800f7b0 <pvPortMalloc+0x180>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	429a      	cmp	r2, r3
 800f754:	d203      	bcs.n	800f75e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f756:	4b14      	ldr	r3, [pc, #80]	; (800f7a8 <pvPortMalloc+0x178>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	4a15      	ldr	r2, [pc, #84]	; (800f7b0 <pvPortMalloc+0x180>)
 800f75c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f760:	685a      	ldr	r2, [r3, #4]
 800f762:	4b10      	ldr	r3, [pc, #64]	; (800f7a4 <pvPortMalloc+0x174>)
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	431a      	orrs	r2, r3
 800f768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f76a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f76e:	2200      	movs	r2, #0
 800f770:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f772:	f7fe fbe9 	bl	800df48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f776:	69fb      	ldr	r3, [r7, #28]
 800f778:	f003 0307 	and.w	r3, r3, #7
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d009      	beq.n	800f794 <pvPortMalloc+0x164>
 800f780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f784:	f383 8811 	msr	BASEPRI, r3
 800f788:	f3bf 8f6f 	isb	sy
 800f78c:	f3bf 8f4f 	dsb	sy
 800f790:	60fb      	str	r3, [r7, #12]
 800f792:	e7fe      	b.n	800f792 <pvPortMalloc+0x162>
	return pvReturn;
 800f794:	69fb      	ldr	r3, [r7, #28]
}
 800f796:	4618      	mov	r0, r3
 800f798:	3728      	adds	r7, #40	; 0x28
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}
 800f79e:	bf00      	nop
 800f7a0:	20004f34 	.word	0x20004f34
 800f7a4:	20004f40 	.word	0x20004f40
 800f7a8:	20004f38 	.word	0x20004f38
 800f7ac:	20004f2c 	.word	0x20004f2c
 800f7b0:	20004f3c 	.word	0x20004f3c

0800f7b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b086      	sub	sp, #24
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d046      	beq.n	800f854 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f7c6:	2308      	movs	r3, #8
 800f7c8:	425b      	negs	r3, r3
 800f7ca:	697a      	ldr	r2, [r7, #20]
 800f7cc:	4413      	add	r3, r2
 800f7ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f7d4:	693b      	ldr	r3, [r7, #16]
 800f7d6:	685a      	ldr	r2, [r3, #4]
 800f7d8:	4b20      	ldr	r3, [pc, #128]	; (800f85c <vPortFree+0xa8>)
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	4013      	ands	r3, r2
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d109      	bne.n	800f7f6 <vPortFree+0x42>
 800f7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7e6:	f383 8811 	msr	BASEPRI, r3
 800f7ea:	f3bf 8f6f 	isb	sy
 800f7ee:	f3bf 8f4f 	dsb	sy
 800f7f2:	60fb      	str	r3, [r7, #12]
 800f7f4:	e7fe      	b.n	800f7f4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f7f6:	693b      	ldr	r3, [r7, #16]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d009      	beq.n	800f812 <vPortFree+0x5e>
 800f7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f802:	f383 8811 	msr	BASEPRI, r3
 800f806:	f3bf 8f6f 	isb	sy
 800f80a:	f3bf 8f4f 	dsb	sy
 800f80e:	60bb      	str	r3, [r7, #8]
 800f810:	e7fe      	b.n	800f810 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f812:	693b      	ldr	r3, [r7, #16]
 800f814:	685a      	ldr	r2, [r3, #4]
 800f816:	4b11      	ldr	r3, [pc, #68]	; (800f85c <vPortFree+0xa8>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	4013      	ands	r3, r2
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d019      	beq.n	800f854 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f820:	693b      	ldr	r3, [r7, #16]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d115      	bne.n	800f854 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f828:	693b      	ldr	r3, [r7, #16]
 800f82a:	685a      	ldr	r2, [r3, #4]
 800f82c:	4b0b      	ldr	r3, [pc, #44]	; (800f85c <vPortFree+0xa8>)
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	43db      	mvns	r3, r3
 800f832:	401a      	ands	r2, r3
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f838:	f7fe fb78 	bl	800df2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f83c:	693b      	ldr	r3, [r7, #16]
 800f83e:	685a      	ldr	r2, [r3, #4]
 800f840:	4b07      	ldr	r3, [pc, #28]	; (800f860 <vPortFree+0xac>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	4413      	add	r3, r2
 800f846:	4a06      	ldr	r2, [pc, #24]	; (800f860 <vPortFree+0xac>)
 800f848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f84a:	6938      	ldr	r0, [r7, #16]
 800f84c:	f000 f86c 	bl	800f928 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f850:	f7fe fb7a 	bl	800df48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f854:	bf00      	nop
 800f856:	3718      	adds	r7, #24
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}
 800f85c:	20004f40 	.word	0x20004f40
 800f860:	20004f38 	.word	0x20004f38

0800f864 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f864:	b480      	push	{r7}
 800f866:	b085      	sub	sp, #20
 800f868:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f86a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f86e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f870:	4b27      	ldr	r3, [pc, #156]	; (800f910 <prvHeapInit+0xac>)
 800f872:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	f003 0307 	and.w	r3, r3, #7
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d00c      	beq.n	800f898 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	3307      	adds	r3, #7
 800f882:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	f023 0307 	bic.w	r3, r3, #7
 800f88a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f88c:	68ba      	ldr	r2, [r7, #8]
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	1ad3      	subs	r3, r2, r3
 800f892:	4a1f      	ldr	r2, [pc, #124]	; (800f910 <prvHeapInit+0xac>)
 800f894:	4413      	add	r3, r2
 800f896:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f89c:	4a1d      	ldr	r2, [pc, #116]	; (800f914 <prvHeapInit+0xb0>)
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f8a2:	4b1c      	ldr	r3, [pc, #112]	; (800f914 <prvHeapInit+0xb0>)
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	68ba      	ldr	r2, [r7, #8]
 800f8ac:	4413      	add	r3, r2
 800f8ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f8b0:	2208      	movs	r2, #8
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	1a9b      	subs	r3, r3, r2
 800f8b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	f023 0307 	bic.w	r3, r3, #7
 800f8be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	4a15      	ldr	r2, [pc, #84]	; (800f918 <prvHeapInit+0xb4>)
 800f8c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f8c6:	4b14      	ldr	r3, [pc, #80]	; (800f918 <prvHeapInit+0xb4>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f8ce:	4b12      	ldr	r3, [pc, #72]	; (800f918 <prvHeapInit+0xb4>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	68fa      	ldr	r2, [r7, #12]
 800f8de:	1ad2      	subs	r2, r2, r3
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f8e4:	4b0c      	ldr	r3, [pc, #48]	; (800f918 <prvHeapInit+0xb4>)
 800f8e6:	681a      	ldr	r2, [r3, #0]
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	685b      	ldr	r3, [r3, #4]
 800f8f0:	4a0a      	ldr	r2, [pc, #40]	; (800f91c <prvHeapInit+0xb8>)
 800f8f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f8f4:	683b      	ldr	r3, [r7, #0]
 800f8f6:	685b      	ldr	r3, [r3, #4]
 800f8f8:	4a09      	ldr	r2, [pc, #36]	; (800f920 <prvHeapInit+0xbc>)
 800f8fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f8fc:	4b09      	ldr	r3, [pc, #36]	; (800f924 <prvHeapInit+0xc0>)
 800f8fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f902:	601a      	str	r2, [r3, #0]
}
 800f904:	bf00      	nop
 800f906:	3714      	adds	r7, #20
 800f908:	46bd      	mov	sp, r7
 800f90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90e:	4770      	bx	lr
 800f910:	2000132c 	.word	0x2000132c
 800f914:	20004f2c 	.word	0x20004f2c
 800f918:	20004f34 	.word	0x20004f34
 800f91c:	20004f3c 	.word	0x20004f3c
 800f920:	20004f38 	.word	0x20004f38
 800f924:	20004f40 	.word	0x20004f40

0800f928 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f928:	b480      	push	{r7}
 800f92a:	b085      	sub	sp, #20
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f930:	4b28      	ldr	r3, [pc, #160]	; (800f9d4 <prvInsertBlockIntoFreeList+0xac>)
 800f932:	60fb      	str	r3, [r7, #12]
 800f934:	e002      	b.n	800f93c <prvInsertBlockIntoFreeList+0x14>
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	60fb      	str	r3, [r7, #12]
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	687a      	ldr	r2, [r7, #4]
 800f942:	429a      	cmp	r2, r3
 800f944:	d8f7      	bhi.n	800f936 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	685b      	ldr	r3, [r3, #4]
 800f94e:	68ba      	ldr	r2, [r7, #8]
 800f950:	4413      	add	r3, r2
 800f952:	687a      	ldr	r2, [r7, #4]
 800f954:	429a      	cmp	r2, r3
 800f956:	d108      	bne.n	800f96a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	685a      	ldr	r2, [r3, #4]
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	685b      	ldr	r3, [r3, #4]
 800f960:	441a      	add	r2, r3
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	685b      	ldr	r3, [r3, #4]
 800f972:	68ba      	ldr	r2, [r7, #8]
 800f974:	441a      	add	r2, r3
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	429a      	cmp	r2, r3
 800f97c:	d118      	bne.n	800f9b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	681a      	ldr	r2, [r3, #0]
 800f982:	4b15      	ldr	r3, [pc, #84]	; (800f9d8 <prvInsertBlockIntoFreeList+0xb0>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	429a      	cmp	r2, r3
 800f988:	d00d      	beq.n	800f9a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	685a      	ldr	r2, [r3, #4]
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	685b      	ldr	r3, [r3, #4]
 800f994:	441a      	add	r2, r3
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	681a      	ldr	r2, [r3, #0]
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	601a      	str	r2, [r3, #0]
 800f9a4:	e008      	b.n	800f9b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f9a6:	4b0c      	ldr	r3, [pc, #48]	; (800f9d8 <prvInsertBlockIntoFreeList+0xb0>)
 800f9a8:	681a      	ldr	r2, [r3, #0]
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	601a      	str	r2, [r3, #0]
 800f9ae:	e003      	b.n	800f9b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	681a      	ldr	r2, [r3, #0]
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f9b8:	68fa      	ldr	r2, [r7, #12]
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	429a      	cmp	r2, r3
 800f9be:	d002      	beq.n	800f9c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	687a      	ldr	r2, [r7, #4]
 800f9c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f9c6:	bf00      	nop
 800f9c8:	3714      	adds	r7, #20
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d0:	4770      	bx	lr
 800f9d2:	bf00      	nop
 800f9d4:	20004f2c 	.word	0x20004f2c
 800f9d8:	20004f34 	.word	0x20004f34

0800f9dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	4912      	ldr	r1, [pc, #72]	; (800fa2c <MX_USB_DEVICE_Init+0x50>)
 800f9e4:	4812      	ldr	r0, [pc, #72]	; (800fa30 <MX_USB_DEVICE_Init+0x54>)
 800f9e6:	f7fb fd4f 	bl	800b488 <USBD_Init>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d001      	beq.n	800f9f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f9f0:	f7f1 fd60 	bl	80014b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f9f4:	490f      	ldr	r1, [pc, #60]	; (800fa34 <MX_USB_DEVICE_Init+0x58>)
 800f9f6:	480e      	ldr	r0, [pc, #56]	; (800fa30 <MX_USB_DEVICE_Init+0x54>)
 800f9f8:	f7fb fd7c 	bl	800b4f4 <USBD_RegisterClass>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d001      	beq.n	800fa06 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fa02:	f7f1 fd57 	bl	80014b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fa06:	490c      	ldr	r1, [pc, #48]	; (800fa38 <MX_USB_DEVICE_Init+0x5c>)
 800fa08:	4809      	ldr	r0, [pc, #36]	; (800fa30 <MX_USB_DEVICE_Init+0x54>)
 800fa0a:	f7fb fca1 	bl	800b350 <USBD_CDC_RegisterInterface>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d001      	beq.n	800fa18 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fa14:	f7f1 fd4e 	bl	80014b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fa18:	4805      	ldr	r0, [pc, #20]	; (800fa30 <MX_USB_DEVICE_Init+0x54>)
 800fa1a:	f7fb fd8c 	bl	800b536 <USBD_Start>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d001      	beq.n	800fa28 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fa24:	f7f1 fd46 	bl	80014b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fa28:	bf00      	nop
 800fa2a:	bd80      	pop	{r7, pc}
 800fa2c:	20000134 	.word	0x20000134
 800fa30:	20006f44 	.word	0x20006f44
 800fa34:	20000018 	.word	0x20000018
 800fa38:	20000120 	.word	0x20000120

0800fa3c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fa40:	2200      	movs	r2, #0
 800fa42:	4905      	ldr	r1, [pc, #20]	; (800fa58 <CDC_Init_FS+0x1c>)
 800fa44:	4805      	ldr	r0, [pc, #20]	; (800fa5c <CDC_Init_FS+0x20>)
 800fa46:	f7fb fc98 	bl	800b37a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fa4a:	4905      	ldr	r1, [pc, #20]	; (800fa60 <CDC_Init_FS+0x24>)
 800fa4c:	4803      	ldr	r0, [pc, #12]	; (800fa5c <CDC_Init_FS+0x20>)
 800fa4e:	f7fb fcad 	bl	800b3ac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fa52:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fa54:	4618      	mov	r0, r3
 800fa56:	bd80      	pop	{r7, pc}
 800fa58:	20007a14 	.word	0x20007a14
 800fa5c:	20006f44 	.word	0x20006f44
 800fa60:	20007214 	.word	0x20007214

0800fa64 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fa64:	b480      	push	{r7}
 800fa66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fa68:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa72:	4770      	bx	lr

0800fa74 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fa74:	b480      	push	{r7}
 800fa76:	b083      	sub	sp, #12
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	6039      	str	r1, [r7, #0]
 800fa7e:	71fb      	strb	r3, [r7, #7]
 800fa80:	4613      	mov	r3, r2
 800fa82:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fa84:	79fb      	ldrb	r3, [r7, #7]
 800fa86:	2b23      	cmp	r3, #35	; 0x23
 800fa88:	d84a      	bhi.n	800fb20 <CDC_Control_FS+0xac>
 800fa8a:	a201      	add	r2, pc, #4	; (adr r2, 800fa90 <CDC_Control_FS+0x1c>)
 800fa8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa90:	0800fb21 	.word	0x0800fb21
 800fa94:	0800fb21 	.word	0x0800fb21
 800fa98:	0800fb21 	.word	0x0800fb21
 800fa9c:	0800fb21 	.word	0x0800fb21
 800faa0:	0800fb21 	.word	0x0800fb21
 800faa4:	0800fb21 	.word	0x0800fb21
 800faa8:	0800fb21 	.word	0x0800fb21
 800faac:	0800fb21 	.word	0x0800fb21
 800fab0:	0800fb21 	.word	0x0800fb21
 800fab4:	0800fb21 	.word	0x0800fb21
 800fab8:	0800fb21 	.word	0x0800fb21
 800fabc:	0800fb21 	.word	0x0800fb21
 800fac0:	0800fb21 	.word	0x0800fb21
 800fac4:	0800fb21 	.word	0x0800fb21
 800fac8:	0800fb21 	.word	0x0800fb21
 800facc:	0800fb21 	.word	0x0800fb21
 800fad0:	0800fb21 	.word	0x0800fb21
 800fad4:	0800fb21 	.word	0x0800fb21
 800fad8:	0800fb21 	.word	0x0800fb21
 800fadc:	0800fb21 	.word	0x0800fb21
 800fae0:	0800fb21 	.word	0x0800fb21
 800fae4:	0800fb21 	.word	0x0800fb21
 800fae8:	0800fb21 	.word	0x0800fb21
 800faec:	0800fb21 	.word	0x0800fb21
 800faf0:	0800fb21 	.word	0x0800fb21
 800faf4:	0800fb21 	.word	0x0800fb21
 800faf8:	0800fb21 	.word	0x0800fb21
 800fafc:	0800fb21 	.word	0x0800fb21
 800fb00:	0800fb21 	.word	0x0800fb21
 800fb04:	0800fb21 	.word	0x0800fb21
 800fb08:	0800fb21 	.word	0x0800fb21
 800fb0c:	0800fb21 	.word	0x0800fb21
 800fb10:	0800fb21 	.word	0x0800fb21
 800fb14:	0800fb21 	.word	0x0800fb21
 800fb18:	0800fb21 	.word	0x0800fb21
 800fb1c:	0800fb21 	.word	0x0800fb21
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fb20:	bf00      	nop
  }

  return (USBD_OK);
 800fb22:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fb24:	4618      	mov	r0, r3
 800fb26:	370c      	adds	r7, #12
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2e:	4770      	bx	lr

0800fb30 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b082      	sub	sp, #8
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
 800fb38:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	return impl_CDC_Receive_FS(Buf, Len);
 800fb3a:	6839      	ldr	r1, [r7, #0]
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f006 fbf3 	bl	8016328 <impl_CDC_Receive_FS>
 800fb42:	4603      	mov	r3, r0

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  return (USBD_OK);
  /* USER CODE END 6 */
}
 800fb44:	4618      	mov	r0, r3
 800fb46:	3708      	adds	r7, #8
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd80      	pop	{r7, pc}

0800fb4c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b084      	sub	sp, #16
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
 800fb54:	460b      	mov	r3, r1
 800fb56:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fb58:	2300      	movs	r3, #0
 800fb5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fb5c:	4b0d      	ldr	r3, [pc, #52]	; (800fb94 <CDC_Transmit_FS+0x48>)
 800fb5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fb62:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d001      	beq.n	800fb72 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800fb6e:	2301      	movs	r3, #1
 800fb70:	e00b      	b.n	800fb8a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fb72:	887b      	ldrh	r3, [r7, #2]
 800fb74:	461a      	mov	r2, r3
 800fb76:	6879      	ldr	r1, [r7, #4]
 800fb78:	4806      	ldr	r0, [pc, #24]	; (800fb94 <CDC_Transmit_FS+0x48>)
 800fb7a:	f7fb fbfe 	bl	800b37a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fb7e:	4805      	ldr	r0, [pc, #20]	; (800fb94 <CDC_Transmit_FS+0x48>)
 800fb80:	f7fb fc28 	bl	800b3d4 <USBD_CDC_TransmitPacket>
 800fb84:	4603      	mov	r3, r0
 800fb86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fb88:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	3710      	adds	r7, #16
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	bd80      	pop	{r7, pc}
 800fb92:	bf00      	nop
 800fb94:	20006f44 	.word	0x20006f44

0800fb98 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fb98:	b480      	push	{r7}
 800fb9a:	b087      	sub	sp, #28
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	60f8      	str	r0, [r7, #12]
 800fba0:	60b9      	str	r1, [r7, #8]
 800fba2:	4613      	mov	r3, r2
 800fba4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fba6:	2300      	movs	r3, #0
 800fba8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fbaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	371c      	adds	r7, #28
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb8:	4770      	bx	lr
	...

0800fbbc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fbbc:	b480      	push	{r7}
 800fbbe:	b083      	sub	sp, #12
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	6039      	str	r1, [r7, #0]
 800fbc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	2212      	movs	r2, #18
 800fbcc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fbce:	4b03      	ldr	r3, [pc, #12]	; (800fbdc <USBD_FS_DeviceDescriptor+0x20>)
}
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	370c      	adds	r7, #12
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbda:	4770      	bx	lr
 800fbdc:	20000150 	.word	0x20000150

0800fbe0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fbe0:	b480      	push	{r7}
 800fbe2:	b083      	sub	sp, #12
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	6039      	str	r1, [r7, #0]
 800fbea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	2204      	movs	r2, #4
 800fbf0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fbf2:	4b03      	ldr	r3, [pc, #12]	; (800fc00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	370c      	adds	r7, #12
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfe:	4770      	bx	lr
 800fc00:	20000164 	.word	0x20000164

0800fc04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b082      	sub	sp, #8
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	6039      	str	r1, [r7, #0]
 800fc0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fc10:	79fb      	ldrb	r3, [r7, #7]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d105      	bne.n	800fc22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fc16:	683a      	ldr	r2, [r7, #0]
 800fc18:	4907      	ldr	r1, [pc, #28]	; (800fc38 <USBD_FS_ProductStrDescriptor+0x34>)
 800fc1a:	4808      	ldr	r0, [pc, #32]	; (800fc3c <USBD_FS_ProductStrDescriptor+0x38>)
 800fc1c:	f7fc fc59 	bl	800c4d2 <USBD_GetString>
 800fc20:	e004      	b.n	800fc2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fc22:	683a      	ldr	r2, [r7, #0]
 800fc24:	4904      	ldr	r1, [pc, #16]	; (800fc38 <USBD_FS_ProductStrDescriptor+0x34>)
 800fc26:	4805      	ldr	r0, [pc, #20]	; (800fc3c <USBD_FS_ProductStrDescriptor+0x38>)
 800fc28:	f7fc fc53 	bl	800c4d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fc2c:	4b02      	ldr	r3, [pc, #8]	; (800fc38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3708      	adds	r7, #8
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}
 800fc36:	bf00      	nop
 800fc38:	20008214 	.word	0x20008214
 800fc3c:	08016c28 	.word	0x08016c28

0800fc40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b082      	sub	sp, #8
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	4603      	mov	r3, r0
 800fc48:	6039      	str	r1, [r7, #0]
 800fc4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fc4c:	683a      	ldr	r2, [r7, #0]
 800fc4e:	4904      	ldr	r1, [pc, #16]	; (800fc60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fc50:	4804      	ldr	r0, [pc, #16]	; (800fc64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fc52:	f7fc fc3e 	bl	800c4d2 <USBD_GetString>
  return USBD_StrDesc;
 800fc56:	4b02      	ldr	r3, [pc, #8]	; (800fc60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fc58:	4618      	mov	r0, r3
 800fc5a:	3708      	adds	r7, #8
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}
 800fc60:	20008214 	.word	0x20008214
 800fc64:	08016c40 	.word	0x08016c40

0800fc68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b082      	sub	sp, #8
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	4603      	mov	r3, r0
 800fc70:	6039      	str	r1, [r7, #0]
 800fc72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	221a      	movs	r2, #26
 800fc78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fc7a:	f000 f843 	bl	800fd04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fc7e:	4b02      	ldr	r3, [pc, #8]	; (800fc88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	3708      	adds	r7, #8
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}
 800fc88:	20000168 	.word	0x20000168

0800fc8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b082      	sub	sp, #8
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	4603      	mov	r3, r0
 800fc94:	6039      	str	r1, [r7, #0]
 800fc96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fc98:	79fb      	ldrb	r3, [r7, #7]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d105      	bne.n	800fcaa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fc9e:	683a      	ldr	r2, [r7, #0]
 800fca0:	4907      	ldr	r1, [pc, #28]	; (800fcc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fca2:	4808      	ldr	r0, [pc, #32]	; (800fcc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fca4:	f7fc fc15 	bl	800c4d2 <USBD_GetString>
 800fca8:	e004      	b.n	800fcb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fcaa:	683a      	ldr	r2, [r7, #0]
 800fcac:	4904      	ldr	r1, [pc, #16]	; (800fcc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fcae:	4805      	ldr	r0, [pc, #20]	; (800fcc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fcb0:	f7fc fc0f 	bl	800c4d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fcb4:	4b02      	ldr	r3, [pc, #8]	; (800fcc0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	3708      	adds	r7, #8
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}
 800fcbe:	bf00      	nop
 800fcc0:	20008214 	.word	0x20008214
 800fcc4:	08016c54 	.word	0x08016c54

0800fcc8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b082      	sub	sp, #8
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	4603      	mov	r3, r0
 800fcd0:	6039      	str	r1, [r7, #0]
 800fcd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fcd4:	79fb      	ldrb	r3, [r7, #7]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d105      	bne.n	800fce6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fcda:	683a      	ldr	r2, [r7, #0]
 800fcdc:	4907      	ldr	r1, [pc, #28]	; (800fcfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fcde:	4808      	ldr	r0, [pc, #32]	; (800fd00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fce0:	f7fc fbf7 	bl	800c4d2 <USBD_GetString>
 800fce4:	e004      	b.n	800fcf0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fce6:	683a      	ldr	r2, [r7, #0]
 800fce8:	4904      	ldr	r1, [pc, #16]	; (800fcfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fcea:	4805      	ldr	r0, [pc, #20]	; (800fd00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fcec:	f7fc fbf1 	bl	800c4d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fcf0:	4b02      	ldr	r3, [pc, #8]	; (800fcfc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	3708      	adds	r7, #8
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}
 800fcfa:	bf00      	nop
 800fcfc:	20008214 	.word	0x20008214
 800fd00:	08016c60 	.word	0x08016c60

0800fd04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b084      	sub	sp, #16
 800fd08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fd0a:	4b0f      	ldr	r3, [pc, #60]	; (800fd48 <Get_SerialNum+0x44>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fd10:	4b0e      	ldr	r3, [pc, #56]	; (800fd4c <Get_SerialNum+0x48>)
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fd16:	4b0e      	ldr	r3, [pc, #56]	; (800fd50 <Get_SerialNum+0x4c>)
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fd1c:	68fa      	ldr	r2, [r7, #12]
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	4413      	add	r3, r2
 800fd22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d009      	beq.n	800fd3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fd2a:	2208      	movs	r2, #8
 800fd2c:	4909      	ldr	r1, [pc, #36]	; (800fd54 <Get_SerialNum+0x50>)
 800fd2e:	68f8      	ldr	r0, [r7, #12]
 800fd30:	f000 f814 	bl	800fd5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fd34:	2204      	movs	r2, #4
 800fd36:	4908      	ldr	r1, [pc, #32]	; (800fd58 <Get_SerialNum+0x54>)
 800fd38:	68b8      	ldr	r0, [r7, #8]
 800fd3a:	f000 f80f 	bl	800fd5c <IntToUnicode>
  }
}
 800fd3e:	bf00      	nop
 800fd40:	3710      	adds	r7, #16
 800fd42:	46bd      	mov	sp, r7
 800fd44:	bd80      	pop	{r7, pc}
 800fd46:	bf00      	nop
 800fd48:	1fff7a10 	.word	0x1fff7a10
 800fd4c:	1fff7a14 	.word	0x1fff7a14
 800fd50:	1fff7a18 	.word	0x1fff7a18
 800fd54:	2000016a 	.word	0x2000016a
 800fd58:	2000017a 	.word	0x2000017a

0800fd5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fd5c:	b480      	push	{r7}
 800fd5e:	b087      	sub	sp, #28
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	60f8      	str	r0, [r7, #12]
 800fd64:	60b9      	str	r1, [r7, #8]
 800fd66:	4613      	mov	r3, r2
 800fd68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fd6e:	2300      	movs	r3, #0
 800fd70:	75fb      	strb	r3, [r7, #23]
 800fd72:	e027      	b.n	800fdc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	0f1b      	lsrs	r3, r3, #28
 800fd78:	2b09      	cmp	r3, #9
 800fd7a:	d80b      	bhi.n	800fd94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	0f1b      	lsrs	r3, r3, #28
 800fd80:	b2da      	uxtb	r2, r3
 800fd82:	7dfb      	ldrb	r3, [r7, #23]
 800fd84:	005b      	lsls	r3, r3, #1
 800fd86:	4619      	mov	r1, r3
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	440b      	add	r3, r1
 800fd8c:	3230      	adds	r2, #48	; 0x30
 800fd8e:	b2d2      	uxtb	r2, r2
 800fd90:	701a      	strb	r2, [r3, #0]
 800fd92:	e00a      	b.n	800fdaa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	0f1b      	lsrs	r3, r3, #28
 800fd98:	b2da      	uxtb	r2, r3
 800fd9a:	7dfb      	ldrb	r3, [r7, #23]
 800fd9c:	005b      	lsls	r3, r3, #1
 800fd9e:	4619      	mov	r1, r3
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	440b      	add	r3, r1
 800fda4:	3237      	adds	r2, #55	; 0x37
 800fda6:	b2d2      	uxtb	r2, r2
 800fda8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	011b      	lsls	r3, r3, #4
 800fdae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fdb0:	7dfb      	ldrb	r3, [r7, #23]
 800fdb2:	005b      	lsls	r3, r3, #1
 800fdb4:	3301      	adds	r3, #1
 800fdb6:	68ba      	ldr	r2, [r7, #8]
 800fdb8:	4413      	add	r3, r2
 800fdba:	2200      	movs	r2, #0
 800fdbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fdbe:	7dfb      	ldrb	r3, [r7, #23]
 800fdc0:	3301      	adds	r3, #1
 800fdc2:	75fb      	strb	r3, [r7, #23]
 800fdc4:	7dfa      	ldrb	r2, [r7, #23]
 800fdc6:	79fb      	ldrb	r3, [r7, #7]
 800fdc8:	429a      	cmp	r2, r3
 800fdca:	d3d3      	bcc.n	800fd74 <IntToUnicode+0x18>
  }
}
 800fdcc:	bf00      	nop
 800fdce:	371c      	adds	r7, #28
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd6:	4770      	bx	lr

0800fdd8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b08a      	sub	sp, #40	; 0x28
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fde0:	f107 0314 	add.w	r3, r7, #20
 800fde4:	2200      	movs	r2, #0
 800fde6:	601a      	str	r2, [r3, #0]
 800fde8:	605a      	str	r2, [r3, #4]
 800fdea:	609a      	str	r2, [r3, #8]
 800fdec:	60da      	str	r2, [r3, #12]
 800fdee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fdf8:	d13a      	bne.n	800fe70 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	613b      	str	r3, [r7, #16]
 800fdfe:	4b1e      	ldr	r3, [pc, #120]	; (800fe78 <HAL_PCD_MspInit+0xa0>)
 800fe00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe02:	4a1d      	ldr	r2, [pc, #116]	; (800fe78 <HAL_PCD_MspInit+0xa0>)
 800fe04:	f043 0301 	orr.w	r3, r3, #1
 800fe08:	6313      	str	r3, [r2, #48]	; 0x30
 800fe0a:	4b1b      	ldr	r3, [pc, #108]	; (800fe78 <HAL_PCD_MspInit+0xa0>)
 800fe0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe0e:	f003 0301 	and.w	r3, r3, #1
 800fe12:	613b      	str	r3, [r7, #16]
 800fe14:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fe16:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fe1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fe1c:	2302      	movs	r3, #2
 800fe1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe20:	2300      	movs	r3, #0
 800fe22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fe24:	2303      	movs	r3, #3
 800fe26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fe28:	230a      	movs	r3, #10
 800fe2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fe2c:	f107 0314 	add.w	r3, r7, #20
 800fe30:	4619      	mov	r1, r3
 800fe32:	4812      	ldr	r0, [pc, #72]	; (800fe7c <HAL_PCD_MspInit+0xa4>)
 800fe34:	f7f3 f8d6 	bl	8002fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fe38:	4b0f      	ldr	r3, [pc, #60]	; (800fe78 <HAL_PCD_MspInit+0xa0>)
 800fe3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe3c:	4a0e      	ldr	r2, [pc, #56]	; (800fe78 <HAL_PCD_MspInit+0xa0>)
 800fe3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe42:	6353      	str	r3, [r2, #52]	; 0x34
 800fe44:	2300      	movs	r3, #0
 800fe46:	60fb      	str	r3, [r7, #12]
 800fe48:	4b0b      	ldr	r3, [pc, #44]	; (800fe78 <HAL_PCD_MspInit+0xa0>)
 800fe4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe4c:	4a0a      	ldr	r2, [pc, #40]	; (800fe78 <HAL_PCD_MspInit+0xa0>)
 800fe4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fe52:	6453      	str	r3, [r2, #68]	; 0x44
 800fe54:	4b08      	ldr	r3, [pc, #32]	; (800fe78 <HAL_PCD_MspInit+0xa0>)
 800fe56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fe5c:	60fb      	str	r3, [r7, #12]
 800fe5e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800fe60:	2200      	movs	r2, #0
 800fe62:	2105      	movs	r1, #5
 800fe64:	2043      	movs	r0, #67	; 0x43
 800fe66:	f7f2 fcf5 	bl	8002854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fe6a:	2043      	movs	r0, #67	; 0x43
 800fe6c:	f7f2 fd0e 	bl	800288c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fe70:	bf00      	nop
 800fe72:	3728      	adds	r7, #40	; 0x28
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}
 800fe78:	40023800 	.word	0x40023800
 800fe7c:	40020000 	.word	0x40020000

0800fe80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b082      	sub	sp, #8
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800fe94:	4619      	mov	r1, r3
 800fe96:	4610      	mov	r0, r2
 800fe98:	f7fb fb98 	bl	800b5cc <USBD_LL_SetupStage>
}
 800fe9c:	bf00      	nop
 800fe9e:	3708      	adds	r7, #8
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}

0800fea4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b082      	sub	sp, #8
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
 800feac:	460b      	mov	r3, r1
 800feae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800feb6:	78fa      	ldrb	r2, [r7, #3]
 800feb8:	6879      	ldr	r1, [r7, #4]
 800feba:	4613      	mov	r3, r2
 800febc:	00db      	lsls	r3, r3, #3
 800febe:	1a9b      	subs	r3, r3, r2
 800fec0:	009b      	lsls	r3, r3, #2
 800fec2:	440b      	add	r3, r1
 800fec4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fec8:	681a      	ldr	r2, [r3, #0]
 800feca:	78fb      	ldrb	r3, [r7, #3]
 800fecc:	4619      	mov	r1, r3
 800fece:	f7fb fbd0 	bl	800b672 <USBD_LL_DataOutStage>
}
 800fed2:	bf00      	nop
 800fed4:	3708      	adds	r7, #8
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}

0800feda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800feda:	b580      	push	{r7, lr}
 800fedc:	b082      	sub	sp, #8
 800fede:	af00      	add	r7, sp, #0
 800fee0:	6078      	str	r0, [r7, #4]
 800fee2:	460b      	mov	r3, r1
 800fee4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800feec:	78fa      	ldrb	r2, [r7, #3]
 800feee:	6879      	ldr	r1, [r7, #4]
 800fef0:	4613      	mov	r3, r2
 800fef2:	00db      	lsls	r3, r3, #3
 800fef4:	1a9b      	subs	r3, r3, r2
 800fef6:	009b      	lsls	r3, r3, #2
 800fef8:	440b      	add	r3, r1
 800fefa:	3348      	adds	r3, #72	; 0x48
 800fefc:	681a      	ldr	r2, [r3, #0]
 800fefe:	78fb      	ldrb	r3, [r7, #3]
 800ff00:	4619      	mov	r1, r3
 800ff02:	f7fb fc19 	bl	800b738 <USBD_LL_DataInStage>
}
 800ff06:	bf00      	nop
 800ff08:	3708      	adds	r7, #8
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}

0800ff0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff0e:	b580      	push	{r7, lr}
 800ff10:	b082      	sub	sp, #8
 800ff12:	af00      	add	r7, sp, #0
 800ff14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f7fb fd1d 	bl	800b95c <USBD_LL_SOF>
}
 800ff22:	bf00      	nop
 800ff24:	3708      	adds	r7, #8
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}

0800ff2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff2a:	b580      	push	{r7, lr}
 800ff2c:	b084      	sub	sp, #16
 800ff2e:	af00      	add	r7, sp, #0
 800ff30:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ff32:	2301      	movs	r3, #1
 800ff34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	68db      	ldr	r3, [r3, #12]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d102      	bne.n	800ff44 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	73fb      	strb	r3, [r7, #15]
 800ff42:	e008      	b.n	800ff56 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	68db      	ldr	r3, [r3, #12]
 800ff48:	2b02      	cmp	r3, #2
 800ff4a:	d102      	bne.n	800ff52 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ff4c:	2301      	movs	r3, #1
 800ff4e:	73fb      	strb	r3, [r7, #15]
 800ff50:	e001      	b.n	800ff56 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ff52:	f7f1 faaf 	bl	80014b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ff5c:	7bfa      	ldrb	r2, [r7, #15]
 800ff5e:	4611      	mov	r1, r2
 800ff60:	4618      	mov	r0, r3
 800ff62:	f7fb fcc0 	bl	800b8e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	f7fb fc79 	bl	800b864 <USBD_LL_Reset>
}
 800ff72:	bf00      	nop
 800ff74:	3710      	adds	r7, #16
 800ff76:	46bd      	mov	sp, r7
 800ff78:	bd80      	pop	{r7, pc}
	...

0800ff7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b082      	sub	sp, #8
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f7fb fcbb 	bl	800b906 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	687a      	ldr	r2, [r7, #4]
 800ff9c:	6812      	ldr	r2, [r2, #0]
 800ff9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ffa2:	f043 0301 	orr.w	r3, r3, #1
 800ffa6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	6a1b      	ldr	r3, [r3, #32]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d005      	beq.n	800ffbc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ffb0:	4b04      	ldr	r3, [pc, #16]	; (800ffc4 <HAL_PCD_SuspendCallback+0x48>)
 800ffb2:	691b      	ldr	r3, [r3, #16]
 800ffb4:	4a03      	ldr	r2, [pc, #12]	; (800ffc4 <HAL_PCD_SuspendCallback+0x48>)
 800ffb6:	f043 0306 	orr.w	r3, r3, #6
 800ffba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ffbc:	bf00      	nop
 800ffbe:	3708      	adds	r7, #8
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd80      	pop	{r7, pc}
 800ffc4:	e000ed00 	.word	0xe000ed00

0800ffc8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b082      	sub	sp, #8
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f7fb fcaa 	bl	800b930 <USBD_LL_Resume>
}
 800ffdc:	bf00      	nop
 800ffde:	3708      	adds	r7, #8
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	bd80      	pop	{r7, pc}

0800ffe4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b082      	sub	sp, #8
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
 800ffec:	460b      	mov	r3, r1
 800ffee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fff6:	78fa      	ldrb	r2, [r7, #3]
 800fff8:	4611      	mov	r1, r2
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7fb fcd5 	bl	800b9aa <USBD_LL_IsoOUTIncomplete>
}
 8010000:	bf00      	nop
 8010002:	3708      	adds	r7, #8
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}

08010008 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b082      	sub	sp, #8
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	460b      	mov	r3, r1
 8010012:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801001a:	78fa      	ldrb	r2, [r7, #3]
 801001c:	4611      	mov	r1, r2
 801001e:	4618      	mov	r0, r3
 8010020:	f7fb fcb6 	bl	800b990 <USBD_LL_IsoINIncomplete>
}
 8010024:	bf00      	nop
 8010026:	3708      	adds	r7, #8
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}

0801002c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b082      	sub	sp, #8
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801003a:	4618      	mov	r0, r3
 801003c:	f7fb fcc2 	bl	800b9c4 <USBD_LL_DevConnected>
}
 8010040:	bf00      	nop
 8010042:	3708      	adds	r7, #8
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}

08010048 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b082      	sub	sp, #8
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010056:	4618      	mov	r0, r3
 8010058:	f7fb fcbf 	bl	800b9da <USBD_LL_DevDisconnected>
}
 801005c:	bf00      	nop
 801005e:	3708      	adds	r7, #8
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}

08010064 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b082      	sub	sp, #8
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	781b      	ldrb	r3, [r3, #0]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d13c      	bne.n	80100ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010074:	4a20      	ldr	r2, [pc, #128]	; (80100f8 <USBD_LL_Init+0x94>)
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	4a1e      	ldr	r2, [pc, #120]	; (80100f8 <USBD_LL_Init+0x94>)
 8010080:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010084:	4b1c      	ldr	r3, [pc, #112]	; (80100f8 <USBD_LL_Init+0x94>)
 8010086:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801008a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801008c:	4b1a      	ldr	r3, [pc, #104]	; (80100f8 <USBD_LL_Init+0x94>)
 801008e:	2204      	movs	r2, #4
 8010090:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010092:	4b19      	ldr	r3, [pc, #100]	; (80100f8 <USBD_LL_Init+0x94>)
 8010094:	2202      	movs	r2, #2
 8010096:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010098:	4b17      	ldr	r3, [pc, #92]	; (80100f8 <USBD_LL_Init+0x94>)
 801009a:	2200      	movs	r2, #0
 801009c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801009e:	4b16      	ldr	r3, [pc, #88]	; (80100f8 <USBD_LL_Init+0x94>)
 80100a0:	2202      	movs	r2, #2
 80100a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80100a4:	4b14      	ldr	r3, [pc, #80]	; (80100f8 <USBD_LL_Init+0x94>)
 80100a6:	2200      	movs	r2, #0
 80100a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80100aa:	4b13      	ldr	r3, [pc, #76]	; (80100f8 <USBD_LL_Init+0x94>)
 80100ac:	2200      	movs	r2, #0
 80100ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80100b0:	4b11      	ldr	r3, [pc, #68]	; (80100f8 <USBD_LL_Init+0x94>)
 80100b2:	2200      	movs	r2, #0
 80100b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80100b6:	4b10      	ldr	r3, [pc, #64]	; (80100f8 <USBD_LL_Init+0x94>)
 80100b8:	2200      	movs	r2, #0
 80100ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80100bc:	4b0e      	ldr	r3, [pc, #56]	; (80100f8 <USBD_LL_Init+0x94>)
 80100be:	2200      	movs	r2, #0
 80100c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80100c2:	480d      	ldr	r0, [pc, #52]	; (80100f8 <USBD_LL_Init+0x94>)
 80100c4:	f7f5 fb56 	bl	8005774 <HAL_PCD_Init>
 80100c8:	4603      	mov	r3, r0
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d001      	beq.n	80100d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80100ce:	f7f1 f9f1 	bl	80014b4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80100d2:	2180      	movs	r1, #128	; 0x80
 80100d4:	4808      	ldr	r0, [pc, #32]	; (80100f8 <USBD_LL_Init+0x94>)
 80100d6:	f7f6 fcb4 	bl	8006a42 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80100da:	2240      	movs	r2, #64	; 0x40
 80100dc:	2100      	movs	r1, #0
 80100de:	4806      	ldr	r0, [pc, #24]	; (80100f8 <USBD_LL_Init+0x94>)
 80100e0:	f7f6 fc68 	bl	80069b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80100e4:	2280      	movs	r2, #128	; 0x80
 80100e6:	2101      	movs	r1, #1
 80100e8:	4803      	ldr	r0, [pc, #12]	; (80100f8 <USBD_LL_Init+0x94>)
 80100ea:	f7f6 fc63 	bl	80069b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80100ee:	2300      	movs	r3, #0
}
 80100f0:	4618      	mov	r0, r3
 80100f2:	3708      	adds	r7, #8
 80100f4:	46bd      	mov	sp, r7
 80100f6:	bd80      	pop	{r7, pc}
 80100f8:	20008414 	.word	0x20008414

080100fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b084      	sub	sp, #16
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010104:	2300      	movs	r3, #0
 8010106:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010108:	2300      	movs	r3, #0
 801010a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010112:	4618      	mov	r0, r3
 8010114:	f7f5 fc4b 	bl	80059ae <HAL_PCD_Start>
 8010118:	4603      	mov	r3, r0
 801011a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801011c:	7bfb      	ldrb	r3, [r7, #15]
 801011e:	4618      	mov	r0, r3
 8010120:	f000 f92a 	bl	8010378 <USBD_Get_USB_Status>
 8010124:	4603      	mov	r3, r0
 8010126:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010128:	7bbb      	ldrb	r3, [r7, #14]
}
 801012a:	4618      	mov	r0, r3
 801012c:	3710      	adds	r7, #16
 801012e:	46bd      	mov	sp, r7
 8010130:	bd80      	pop	{r7, pc}

08010132 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010132:	b580      	push	{r7, lr}
 8010134:	b084      	sub	sp, #16
 8010136:	af00      	add	r7, sp, #0
 8010138:	6078      	str	r0, [r7, #4]
 801013a:	4608      	mov	r0, r1
 801013c:	4611      	mov	r1, r2
 801013e:	461a      	mov	r2, r3
 8010140:	4603      	mov	r3, r0
 8010142:	70fb      	strb	r3, [r7, #3]
 8010144:	460b      	mov	r3, r1
 8010146:	70bb      	strb	r3, [r7, #2]
 8010148:	4613      	mov	r3, r2
 801014a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801014c:	2300      	movs	r3, #0
 801014e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010150:	2300      	movs	r3, #0
 8010152:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801015a:	78bb      	ldrb	r3, [r7, #2]
 801015c:	883a      	ldrh	r2, [r7, #0]
 801015e:	78f9      	ldrb	r1, [r7, #3]
 8010160:	f7f6 f82f 	bl	80061c2 <HAL_PCD_EP_Open>
 8010164:	4603      	mov	r3, r0
 8010166:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010168:	7bfb      	ldrb	r3, [r7, #15]
 801016a:	4618      	mov	r0, r3
 801016c:	f000 f904 	bl	8010378 <USBD_Get_USB_Status>
 8010170:	4603      	mov	r3, r0
 8010172:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010174:	7bbb      	ldrb	r3, [r7, #14]
}
 8010176:	4618      	mov	r0, r3
 8010178:	3710      	adds	r7, #16
 801017a:	46bd      	mov	sp, r7
 801017c:	bd80      	pop	{r7, pc}

0801017e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801017e:	b580      	push	{r7, lr}
 8010180:	b084      	sub	sp, #16
 8010182:	af00      	add	r7, sp, #0
 8010184:	6078      	str	r0, [r7, #4]
 8010186:	460b      	mov	r3, r1
 8010188:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801018a:	2300      	movs	r3, #0
 801018c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801018e:	2300      	movs	r3, #0
 8010190:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010198:	78fa      	ldrb	r2, [r7, #3]
 801019a:	4611      	mov	r1, r2
 801019c:	4618      	mov	r0, r3
 801019e:	f7f6 f878 	bl	8006292 <HAL_PCD_EP_Close>
 80101a2:	4603      	mov	r3, r0
 80101a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80101a6:	7bfb      	ldrb	r3, [r7, #15]
 80101a8:	4618      	mov	r0, r3
 80101aa:	f000 f8e5 	bl	8010378 <USBD_Get_USB_Status>
 80101ae:	4603      	mov	r3, r0
 80101b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80101b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80101b4:	4618      	mov	r0, r3
 80101b6:	3710      	adds	r7, #16
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}

080101bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b084      	sub	sp, #16
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
 80101c4:	460b      	mov	r3, r1
 80101c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101c8:	2300      	movs	r3, #0
 80101ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101cc:	2300      	movs	r3, #0
 80101ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80101d6:	78fa      	ldrb	r2, [r7, #3]
 80101d8:	4611      	mov	r1, r2
 80101da:	4618      	mov	r0, r3
 80101dc:	f7f6 f950 	bl	8006480 <HAL_PCD_EP_SetStall>
 80101e0:	4603      	mov	r3, r0
 80101e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80101e4:	7bfb      	ldrb	r3, [r7, #15]
 80101e6:	4618      	mov	r0, r3
 80101e8:	f000 f8c6 	bl	8010378 <USBD_Get_USB_Status>
 80101ec:	4603      	mov	r3, r0
 80101ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80101f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80101f2:	4618      	mov	r0, r3
 80101f4:	3710      	adds	r7, #16
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}

080101fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80101fa:	b580      	push	{r7, lr}
 80101fc:	b084      	sub	sp, #16
 80101fe:	af00      	add	r7, sp, #0
 8010200:	6078      	str	r0, [r7, #4]
 8010202:	460b      	mov	r3, r1
 8010204:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010206:	2300      	movs	r3, #0
 8010208:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801020a:	2300      	movs	r3, #0
 801020c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010214:	78fa      	ldrb	r2, [r7, #3]
 8010216:	4611      	mov	r1, r2
 8010218:	4618      	mov	r0, r3
 801021a:	f7f6 f995 	bl	8006548 <HAL_PCD_EP_ClrStall>
 801021e:	4603      	mov	r3, r0
 8010220:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010222:	7bfb      	ldrb	r3, [r7, #15]
 8010224:	4618      	mov	r0, r3
 8010226:	f000 f8a7 	bl	8010378 <USBD_Get_USB_Status>
 801022a:	4603      	mov	r3, r0
 801022c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801022e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010230:	4618      	mov	r0, r3
 8010232:	3710      	adds	r7, #16
 8010234:	46bd      	mov	sp, r7
 8010236:	bd80      	pop	{r7, pc}

08010238 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010238:	b480      	push	{r7}
 801023a:	b085      	sub	sp, #20
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
 8010240:	460b      	mov	r3, r1
 8010242:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801024a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801024c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010250:	2b00      	cmp	r3, #0
 8010252:	da0b      	bge.n	801026c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010254:	78fb      	ldrb	r3, [r7, #3]
 8010256:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801025a:	68f9      	ldr	r1, [r7, #12]
 801025c:	4613      	mov	r3, r2
 801025e:	00db      	lsls	r3, r3, #3
 8010260:	1a9b      	subs	r3, r3, r2
 8010262:	009b      	lsls	r3, r3, #2
 8010264:	440b      	add	r3, r1
 8010266:	333e      	adds	r3, #62	; 0x3e
 8010268:	781b      	ldrb	r3, [r3, #0]
 801026a:	e00b      	b.n	8010284 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801026c:	78fb      	ldrb	r3, [r7, #3]
 801026e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010272:	68f9      	ldr	r1, [r7, #12]
 8010274:	4613      	mov	r3, r2
 8010276:	00db      	lsls	r3, r3, #3
 8010278:	1a9b      	subs	r3, r3, r2
 801027a:	009b      	lsls	r3, r3, #2
 801027c:	440b      	add	r3, r1
 801027e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010282:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010284:	4618      	mov	r0, r3
 8010286:	3714      	adds	r7, #20
 8010288:	46bd      	mov	sp, r7
 801028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028e:	4770      	bx	lr

08010290 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b084      	sub	sp, #16
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	460b      	mov	r3, r1
 801029a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801029c:	2300      	movs	r3, #0
 801029e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102a0:	2300      	movs	r3, #0
 80102a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80102aa:	78fa      	ldrb	r2, [r7, #3]
 80102ac:	4611      	mov	r1, r2
 80102ae:	4618      	mov	r0, r3
 80102b0:	f7f5 ff62 	bl	8006178 <HAL_PCD_SetAddress>
 80102b4:	4603      	mov	r3, r0
 80102b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80102b8:	7bfb      	ldrb	r3, [r7, #15]
 80102ba:	4618      	mov	r0, r3
 80102bc:	f000 f85c 	bl	8010378 <USBD_Get_USB_Status>
 80102c0:	4603      	mov	r3, r0
 80102c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80102c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80102c6:	4618      	mov	r0, r3
 80102c8:	3710      	adds	r7, #16
 80102ca:	46bd      	mov	sp, r7
 80102cc:	bd80      	pop	{r7, pc}

080102ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80102ce:	b580      	push	{r7, lr}
 80102d0:	b086      	sub	sp, #24
 80102d2:	af00      	add	r7, sp, #0
 80102d4:	60f8      	str	r0, [r7, #12]
 80102d6:	607a      	str	r2, [r7, #4]
 80102d8:	603b      	str	r3, [r7, #0]
 80102da:	460b      	mov	r3, r1
 80102dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80102de:	2300      	movs	r3, #0
 80102e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102e2:	2300      	movs	r3, #0
 80102e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80102ec:	7af9      	ldrb	r1, [r7, #11]
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	687a      	ldr	r2, [r7, #4]
 80102f2:	f7f6 f87b 	bl	80063ec <HAL_PCD_EP_Transmit>
 80102f6:	4603      	mov	r3, r0
 80102f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80102fa:	7dfb      	ldrb	r3, [r7, #23]
 80102fc:	4618      	mov	r0, r3
 80102fe:	f000 f83b 	bl	8010378 <USBD_Get_USB_Status>
 8010302:	4603      	mov	r3, r0
 8010304:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010306:	7dbb      	ldrb	r3, [r7, #22]
}
 8010308:	4618      	mov	r0, r3
 801030a:	3718      	adds	r7, #24
 801030c:	46bd      	mov	sp, r7
 801030e:	bd80      	pop	{r7, pc}

08010310 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b086      	sub	sp, #24
 8010314:	af00      	add	r7, sp, #0
 8010316:	60f8      	str	r0, [r7, #12]
 8010318:	607a      	str	r2, [r7, #4]
 801031a:	603b      	str	r3, [r7, #0]
 801031c:	460b      	mov	r3, r1
 801031e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010320:	2300      	movs	r3, #0
 8010322:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010324:	2300      	movs	r3, #0
 8010326:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801032e:	7af9      	ldrb	r1, [r7, #11]
 8010330:	683b      	ldr	r3, [r7, #0]
 8010332:	687a      	ldr	r2, [r7, #4]
 8010334:	f7f5 fff7 	bl	8006326 <HAL_PCD_EP_Receive>
 8010338:	4603      	mov	r3, r0
 801033a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801033c:	7dfb      	ldrb	r3, [r7, #23]
 801033e:	4618      	mov	r0, r3
 8010340:	f000 f81a 	bl	8010378 <USBD_Get_USB_Status>
 8010344:	4603      	mov	r3, r0
 8010346:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010348:	7dbb      	ldrb	r3, [r7, #22]
}
 801034a:	4618      	mov	r0, r3
 801034c:	3718      	adds	r7, #24
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}

08010352 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010352:	b580      	push	{r7, lr}
 8010354:	b082      	sub	sp, #8
 8010356:	af00      	add	r7, sp, #0
 8010358:	6078      	str	r0, [r7, #4]
 801035a:	460b      	mov	r3, r1
 801035c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010364:	78fa      	ldrb	r2, [r7, #3]
 8010366:	4611      	mov	r1, r2
 8010368:	4618      	mov	r0, r3
 801036a:	f7f6 f827 	bl	80063bc <HAL_PCD_EP_GetRxCount>
 801036e:	4603      	mov	r3, r0
}
 8010370:	4618      	mov	r0, r3
 8010372:	3708      	adds	r7, #8
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}

08010378 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010378:	b480      	push	{r7}
 801037a:	b085      	sub	sp, #20
 801037c:	af00      	add	r7, sp, #0
 801037e:	4603      	mov	r3, r0
 8010380:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010382:	2300      	movs	r3, #0
 8010384:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010386:	79fb      	ldrb	r3, [r7, #7]
 8010388:	2b03      	cmp	r3, #3
 801038a:	d817      	bhi.n	80103bc <USBD_Get_USB_Status+0x44>
 801038c:	a201      	add	r2, pc, #4	; (adr r2, 8010394 <USBD_Get_USB_Status+0x1c>)
 801038e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010392:	bf00      	nop
 8010394:	080103a5 	.word	0x080103a5
 8010398:	080103ab 	.word	0x080103ab
 801039c:	080103b1 	.word	0x080103b1
 80103a0:	080103b7 	.word	0x080103b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80103a4:	2300      	movs	r3, #0
 80103a6:	73fb      	strb	r3, [r7, #15]
    break;
 80103a8:	e00b      	b.n	80103c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80103aa:	2303      	movs	r3, #3
 80103ac:	73fb      	strb	r3, [r7, #15]
    break;
 80103ae:	e008      	b.n	80103c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80103b0:	2301      	movs	r3, #1
 80103b2:	73fb      	strb	r3, [r7, #15]
    break;
 80103b4:	e005      	b.n	80103c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80103b6:	2303      	movs	r3, #3
 80103b8:	73fb      	strb	r3, [r7, #15]
    break;
 80103ba:	e002      	b.n	80103c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80103bc:	2303      	movs	r3, #3
 80103be:	73fb      	strb	r3, [r7, #15]
    break;
 80103c0:	bf00      	nop
  }
  return usb_status;
 80103c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80103c4:	4618      	mov	r0, r3
 80103c6:	3714      	adds	r7, #20
 80103c8:	46bd      	mov	sp, r7
 80103ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ce:	4770      	bx	lr

080103d0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80103d0:	b480      	push	{r7}
 80103d2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80103d4:	bf00      	nop
 80103d6:	46bd      	mov	sp, r7
 80103d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103dc:	4770      	bx	lr
	...

080103e0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b086      	sub	sp, #24
 80103e4:	af04      	add	r7, sp, #16
 80103e6:	4603      	mov	r3, r0
 80103e8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80103ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80103ee:	9302      	str	r3, [sp, #8]
 80103f0:	2301      	movs	r3, #1
 80103f2:	9301      	str	r3, [sp, #4]
 80103f4:	1dfb      	adds	r3, r7, #7
 80103f6:	9300      	str	r3, [sp, #0]
 80103f8:	2301      	movs	r3, #1
 80103fa:	2200      	movs	r2, #0
 80103fc:	2178      	movs	r1, #120	; 0x78
 80103fe:	4803      	ldr	r0, [pc, #12]	; (801040c <ssd1306_WriteCommand+0x2c>)
 8010400:	f7f3 f8dc 	bl	80035bc <HAL_I2C_Mem_Write>
}
 8010404:	bf00      	nop
 8010406:	3708      	adds	r7, #8
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}
 801040c:	20005cd8 	.word	0x20005cd8

08010410 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8010410:	b580      	push	{r7, lr}
 8010412:	b086      	sub	sp, #24
 8010414:	af04      	add	r7, sp, #16
 8010416:	6078      	str	r0, [r7, #4]
 8010418:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	b29b      	uxth	r3, r3
 801041e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010422:	9202      	str	r2, [sp, #8]
 8010424:	9301      	str	r3, [sp, #4]
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	9300      	str	r3, [sp, #0]
 801042a:	2301      	movs	r3, #1
 801042c:	2240      	movs	r2, #64	; 0x40
 801042e:	2178      	movs	r1, #120	; 0x78
 8010430:	4803      	ldr	r0, [pc, #12]	; (8010440 <ssd1306_WriteData+0x30>)
 8010432:	f7f3 f8c3 	bl	80035bc <HAL_I2C_Mem_Write>
}
 8010436:	bf00      	nop
 8010438:	3708      	adds	r7, #8
 801043a:	46bd      	mov	sp, r7
 801043c:	bd80      	pop	{r7, pc}
 801043e:	bf00      	nop
 8010440:	20005cd8 	.word	0x20005cd8

08010444 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8010444:	b580      	push	{r7, lr}
 8010446:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8010448:	f7ff ffc2 	bl	80103d0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 801044c:	2064      	movs	r0, #100	; 0x64
 801044e:	f7f1 fd51 	bl	8001ef4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8010452:	2000      	movs	r0, #0
 8010454:	f000 fb2a 	bl	8010aac <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8010458:	2020      	movs	r0, #32
 801045a:	f7ff ffc1 	bl	80103e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 801045e:	2000      	movs	r0, #0
 8010460:	f7ff ffbe 	bl	80103e0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8010464:	20b0      	movs	r0, #176	; 0xb0
 8010466:	f7ff ffbb 	bl	80103e0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 801046a:	20c8      	movs	r0, #200	; 0xc8
 801046c:	f7ff ffb8 	bl	80103e0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8010470:	2000      	movs	r0, #0
 8010472:	f7ff ffb5 	bl	80103e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8010476:	2010      	movs	r0, #16
 8010478:	f7ff ffb2 	bl	80103e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 801047c:	2040      	movs	r0, #64	; 0x40
 801047e:	f7ff ffaf 	bl	80103e0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8010482:	20ff      	movs	r0, #255	; 0xff
 8010484:	f000 faff 	bl	8010a86 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8010488:	20a1      	movs	r0, #161	; 0xa1
 801048a:	f7ff ffa9 	bl	80103e0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 801048e:	20a6      	movs	r0, #166	; 0xa6
 8010490:	f7ff ffa6 	bl	80103e0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8010494:	20a8      	movs	r0, #168	; 0xa8
 8010496:	f7ff ffa3 	bl	80103e0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 801049a:	201f      	movs	r0, #31
 801049c:	f7ff ffa0 	bl	80103e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80104a0:	20a4      	movs	r0, #164	; 0xa4
 80104a2:	f7ff ff9d 	bl	80103e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80104a6:	20d3      	movs	r0, #211	; 0xd3
 80104a8:	f7ff ff9a 	bl	80103e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80104ac:	2000      	movs	r0, #0
 80104ae:	f7ff ff97 	bl	80103e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80104b2:	20d5      	movs	r0, #213	; 0xd5
 80104b4:	f7ff ff94 	bl	80103e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80104b8:	20f0      	movs	r0, #240	; 0xf0
 80104ba:	f7ff ff91 	bl	80103e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80104be:	20d9      	movs	r0, #217	; 0xd9
 80104c0:	f7ff ff8e 	bl	80103e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80104c4:	2022      	movs	r0, #34	; 0x22
 80104c6:	f7ff ff8b 	bl	80103e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80104ca:	20da      	movs	r0, #218	; 0xda
 80104cc:	f7ff ff88 	bl	80103e0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 80104d0:	2002      	movs	r0, #2
 80104d2:	f7ff ff85 	bl	80103e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80104d6:	20db      	movs	r0, #219	; 0xdb
 80104d8:	f7ff ff82 	bl	80103e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80104dc:	2020      	movs	r0, #32
 80104de:	f7ff ff7f 	bl	80103e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80104e2:	208d      	movs	r0, #141	; 0x8d
 80104e4:	f7ff ff7c 	bl	80103e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80104e8:	2014      	movs	r0, #20
 80104ea:	f7ff ff79 	bl	80103e0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80104ee:	2001      	movs	r0, #1
 80104f0:	f000 fadc 	bl	8010aac <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80104f4:	2000      	movs	r0, #0
 80104f6:	f000 f80f 	bl	8010518 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80104fa:	f000 f8bd 	bl	8010678 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80104fe:	4b05      	ldr	r3, [pc, #20]	; (8010514 <ssd1306_Init+0xd0>)
 8010500:	2200      	movs	r2, #0
 8010502:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8010504:	4b03      	ldr	r3, [pc, #12]	; (8010514 <ssd1306_Init+0xd0>)
 8010506:	2200      	movs	r2, #0
 8010508:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 801050a:	4b02      	ldr	r3, [pc, #8]	; (8010514 <ssd1306_Init+0xd0>)
 801050c:	2201      	movs	r2, #1
 801050e:	715a      	strb	r2, [r3, #5]
}
 8010510:	bf00      	nop
 8010512:	bd80      	pop	{r7, pc}
 8010514:	20005144 	.word	0x20005144

08010518 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8010518:	b480      	push	{r7}
 801051a:	b085      	sub	sp, #20
 801051c:	af00      	add	r7, sp, #0
 801051e:	4603      	mov	r3, r0
 8010520:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8010522:	2300      	movs	r3, #0
 8010524:	60fb      	str	r3, [r7, #12]
 8010526:	e00d      	b.n	8010544 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8010528:	79fb      	ldrb	r3, [r7, #7]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d101      	bne.n	8010532 <ssd1306_Fill+0x1a>
 801052e:	2100      	movs	r1, #0
 8010530:	e000      	b.n	8010534 <ssd1306_Fill+0x1c>
 8010532:	21ff      	movs	r1, #255	; 0xff
 8010534:	4a08      	ldr	r2, [pc, #32]	; (8010558 <ssd1306_Fill+0x40>)
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	4413      	add	r3, r2
 801053a:	460a      	mov	r2, r1
 801053c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	3301      	adds	r3, #1
 8010542:	60fb      	str	r3, [r7, #12]
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801054a:	d3ed      	bcc.n	8010528 <ssd1306_Fill+0x10>
    }
}
 801054c:	bf00      	nop
 801054e:	3714      	adds	r7, #20
 8010550:	46bd      	mov	sp, r7
 8010552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010556:	4770      	bx	lr
 8010558:	20004f44 	.word	0x20004f44

0801055c <ssd1306_FillZone>:


void ssd1306_FillZone(uint8_t x, uint8_t y, uint8_t wx, uint8_t wy, SSD1306_COLOR color)
{
 801055c:	b490      	push	{r4, r7}
 801055e:	b08a      	sub	sp, #40	; 0x28
 8010560:	af00      	add	r7, sp, #0
 8010562:	4604      	mov	r4, r0
 8010564:	4608      	mov	r0, r1
 8010566:	4611      	mov	r1, r2
 8010568:	461a      	mov	r2, r3
 801056a:	4623      	mov	r3, r4
 801056c:	71fb      	strb	r3, [r7, #7]
 801056e:	4603      	mov	r3, r0
 8010570:	71bb      	strb	r3, [r7, #6]
 8010572:	460b      	mov	r3, r1
 8010574:	717b      	strb	r3, [r7, #5]
 8010576:	4613      	mov	r3, r2
 8010578:	713b      	strb	r3, [r7, #4]
    uint32_t xi;
    uint32_t yi;

    int by = y/8;
 801057a:	79bb      	ldrb	r3, [r7, #6]
 801057c:	08db      	lsrs	r3, r3, #3
 801057e:	b2db      	uxtb	r3, r3
 8010580:	61bb      	str	r3, [r7, #24]
    int bly = (y+wy+7)/8;
 8010582:	79ba      	ldrb	r2, [r7, #6]
 8010584:	793b      	ldrb	r3, [r7, #4]
 8010586:	4413      	add	r3, r2
 8010588:	3307      	adds	r3, #7
 801058a:	2b00      	cmp	r3, #0
 801058c:	da00      	bge.n	8010590 <ssd1306_FillZone+0x34>
 801058e:	3307      	adds	r3, #7
 8010590:	10db      	asrs	r3, r3, #3
 8010592:	617b      	str	r3, [r7, #20]

    for (yi = by; yi < bly; yi++) {
 8010594:	69bb      	ldr	r3, [r7, #24]
 8010596:	623b      	str	r3, [r7, #32]
 8010598:	e063      	b.n	8010662 <ssd1306_FillZone+0x106>
    	uint8_t b = 0xFF;
 801059a:	23ff      	movs	r3, #255	; 0xff
 801059c:	77fb      	strb	r3, [r7, #31]
    	if (yi == by) {
 801059e:	69bb      	ldr	r3, [r7, #24]
 80105a0:	6a3a      	ldr	r2, [r7, #32]
 80105a2:	429a      	cmp	r2, r3
 80105a4:	d106      	bne.n	80105b4 <ssd1306_FillZone+0x58>
    		b = b << (y & 0x7);
 80105a6:	7ffa      	ldrb	r2, [r7, #31]
 80105a8:	79bb      	ldrb	r3, [r7, #6]
 80105aa:	f003 0307 	and.w	r3, r3, #7
 80105ae:	fa02 f303 	lsl.w	r3, r2, r3
 80105b2:	77fb      	strb	r3, [r7, #31]
    	}
    	if (yi == bly-1) {
 80105b4:	697b      	ldr	r3, [r7, #20]
 80105b6:	3b01      	subs	r3, #1
 80105b8:	461a      	mov	r2, r3
 80105ba:	6a3b      	ldr	r3, [r7, #32]
 80105bc:	4293      	cmp	r3, r2
 80105be:	d113      	bne.n	80105e8 <ssd1306_FillZone+0x8c>
    		int s = (y+wy) & 0x7;
 80105c0:	79ba      	ldrb	r2, [r7, #6]
 80105c2:	793b      	ldrb	r3, [r7, #4]
 80105c4:	4413      	add	r3, r2
 80105c6:	b2db      	uxtb	r3, r3
 80105c8:	f003 0307 	and.w	r3, r3, #7
 80105cc:	613b      	str	r3, [r7, #16]
    		if (s) b &= ~(0xFFU << s);
 80105ce:	693b      	ldr	r3, [r7, #16]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d009      	beq.n	80105e8 <ssd1306_FillZone+0x8c>
 80105d4:	22ff      	movs	r2, #255	; 0xff
 80105d6:	693b      	ldr	r3, [r7, #16]
 80105d8:	fa02 f303 	lsl.w	r3, r2, r3
 80105dc:	b2db      	uxtb	r3, r3
 80105de:	43db      	mvns	r3, r3
 80105e0:	b2da      	uxtb	r2, r3
 80105e2:	7ffb      	ldrb	r3, [r7, #31]
 80105e4:	4013      	ands	r3, r2
 80105e6:	77fb      	strb	r3, [r7, #31]
    	}
    	for (xi = x; xi <x+wx; xi++) {
 80105e8:	79fb      	ldrb	r3, [r7, #7]
 80105ea:	627b      	str	r3, [r7, #36]	; 0x24
 80105ec:	e02d      	b.n	801064a <ssd1306_FillZone+0xee>
    		int i = yi*SSD1306_WIDTH+xi;
 80105ee:	6a3b      	ldr	r3, [r7, #32]
 80105f0:	01da      	lsls	r2, r3, #7
 80105f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f4:	4413      	add	r3, r2
 80105f6:	60fb      	str	r3, [r7, #12]
    		if (i>=SSD1306_BUFFER_SIZE) break;
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80105fe:	da2c      	bge.n	801065a <ssd1306_FillZone+0xfe>
    		if (color == Black) {
 8010600:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8010604:	2b00      	cmp	r3, #0
 8010606:	d111      	bne.n	801062c <ssd1306_FillZone+0xd0>
    			SSD1306_Buffer[i] &= ~b;
 8010608:	4a1a      	ldr	r2, [pc, #104]	; (8010674 <ssd1306_FillZone+0x118>)
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	4413      	add	r3, r2
 801060e:	781b      	ldrb	r3, [r3, #0]
 8010610:	b25a      	sxtb	r2, r3
 8010612:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010616:	43db      	mvns	r3, r3
 8010618:	b25b      	sxtb	r3, r3
 801061a:	4013      	ands	r3, r2
 801061c:	b25b      	sxtb	r3, r3
 801061e:	b2d9      	uxtb	r1, r3
 8010620:	4a14      	ldr	r2, [pc, #80]	; (8010674 <ssd1306_FillZone+0x118>)
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	4413      	add	r3, r2
 8010626:	460a      	mov	r2, r1
 8010628:	701a      	strb	r2, [r3, #0]
 801062a:	e00b      	b.n	8010644 <ssd1306_FillZone+0xe8>
    		} else {
    			SSD1306_Buffer[i] |= b;
 801062c:	4a11      	ldr	r2, [pc, #68]	; (8010674 <ssd1306_FillZone+0x118>)
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	4413      	add	r3, r2
 8010632:	781a      	ldrb	r2, [r3, #0]
 8010634:	7ffb      	ldrb	r3, [r7, #31]
 8010636:	4313      	orrs	r3, r2
 8010638:	b2d9      	uxtb	r1, r3
 801063a:	4a0e      	ldr	r2, [pc, #56]	; (8010674 <ssd1306_FillZone+0x118>)
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	4413      	add	r3, r2
 8010640:	460a      	mov	r2, r1
 8010642:	701a      	strb	r2, [r3, #0]
    	for (xi = x; xi <x+wx; xi++) {
 8010644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010646:	3301      	adds	r3, #1
 8010648:	627b      	str	r3, [r7, #36]	; 0x24
 801064a:	79fa      	ldrb	r2, [r7, #7]
 801064c:	797b      	ldrb	r3, [r7, #5]
 801064e:	4413      	add	r3, r2
 8010650:	461a      	mov	r2, r3
 8010652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010654:	4293      	cmp	r3, r2
 8010656:	d3ca      	bcc.n	80105ee <ssd1306_FillZone+0x92>
 8010658:	e000      	b.n	801065c <ssd1306_FillZone+0x100>
    		if (i>=SSD1306_BUFFER_SIZE) break;
 801065a:	bf00      	nop
    for (yi = by; yi < bly; yi++) {
 801065c:	6a3b      	ldr	r3, [r7, #32]
 801065e:	3301      	adds	r3, #1
 8010660:	623b      	str	r3, [r7, #32]
 8010662:	697b      	ldr	r3, [r7, #20]
 8010664:	6a3a      	ldr	r2, [r7, #32]
 8010666:	429a      	cmp	r2, r3
 8010668:	d397      	bcc.n	801059a <ssd1306_FillZone+0x3e>
    		}
    	}
    }

}
 801066a:	bf00      	nop
 801066c:	3728      	adds	r7, #40	; 0x28
 801066e:	46bd      	mov	sp, r7
 8010670:	bc90      	pop	{r4, r7}
 8010672:	4770      	bx	lr
 8010674:	20004f44 	.word	0x20004f44

08010678 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8010678:	b580      	push	{r7, lr}
 801067a:	b082      	sub	sp, #8
 801067c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 801067e:	2300      	movs	r3, #0
 8010680:	71fb      	strb	r3, [r7, #7]
 8010682:	e016      	b.n	80106b2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8010684:	79fb      	ldrb	r3, [r7, #7]
 8010686:	3b50      	subs	r3, #80	; 0x50
 8010688:	b2db      	uxtb	r3, r3
 801068a:	4618      	mov	r0, r3
 801068c:	f7ff fea8 	bl	80103e0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8010690:	2000      	movs	r0, #0
 8010692:	f7ff fea5 	bl	80103e0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8010696:	2010      	movs	r0, #16
 8010698:	f7ff fea2 	bl	80103e0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 801069c:	79fb      	ldrb	r3, [r7, #7]
 801069e:	01db      	lsls	r3, r3, #7
 80106a0:	4a07      	ldr	r2, [pc, #28]	; (80106c0 <ssd1306_UpdateScreen+0x48>)
 80106a2:	4413      	add	r3, r2
 80106a4:	2180      	movs	r1, #128	; 0x80
 80106a6:	4618      	mov	r0, r3
 80106a8:	f7ff feb2 	bl	8010410 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80106ac:	79fb      	ldrb	r3, [r7, #7]
 80106ae:	3301      	adds	r3, #1
 80106b0:	71fb      	strb	r3, [r7, #7]
 80106b2:	79fb      	ldrb	r3, [r7, #7]
 80106b4:	2b03      	cmp	r3, #3
 80106b6:	d9e5      	bls.n	8010684 <ssd1306_UpdateScreen+0xc>
    }
}
 80106b8:	bf00      	nop
 80106ba:	3708      	adds	r7, #8
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd80      	pop	{r7, pc}
 80106c0:	20004f44 	.word	0x20004f44

080106c4 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80106c4:	b480      	push	{r7}
 80106c6:	b083      	sub	sp, #12
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	4603      	mov	r3, r0
 80106cc:	71fb      	strb	r3, [r7, #7]
 80106ce:	460b      	mov	r3, r1
 80106d0:	71bb      	strb	r3, [r7, #6]
 80106d2:	4613      	mov	r3, r2
 80106d4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80106d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	db48      	blt.n	8010770 <ssd1306_DrawPixel+0xac>
 80106de:	79bb      	ldrb	r3, [r7, #6]
 80106e0:	2b1f      	cmp	r3, #31
 80106e2:	d845      	bhi.n	8010770 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80106e4:	4b25      	ldr	r3, [pc, #148]	; (801077c <ssd1306_DrawPixel+0xb8>)
 80106e6:	791b      	ldrb	r3, [r3, #4]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d006      	beq.n	80106fa <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80106ec:	797b      	ldrb	r3, [r7, #5]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	bf0c      	ite	eq
 80106f2:	2301      	moveq	r3, #1
 80106f4:	2300      	movne	r3, #0
 80106f6:	b2db      	uxtb	r3, r3
 80106f8:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 80106fa:	797b      	ldrb	r3, [r7, #5]
 80106fc:	2b01      	cmp	r3, #1
 80106fe:	d11a      	bne.n	8010736 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8010700:	79fa      	ldrb	r2, [r7, #7]
 8010702:	79bb      	ldrb	r3, [r7, #6]
 8010704:	08db      	lsrs	r3, r3, #3
 8010706:	b2d8      	uxtb	r0, r3
 8010708:	4603      	mov	r3, r0
 801070a:	01db      	lsls	r3, r3, #7
 801070c:	4413      	add	r3, r2
 801070e:	4a1c      	ldr	r2, [pc, #112]	; (8010780 <ssd1306_DrawPixel+0xbc>)
 8010710:	5cd3      	ldrb	r3, [r2, r3]
 8010712:	b25a      	sxtb	r2, r3
 8010714:	79bb      	ldrb	r3, [r7, #6]
 8010716:	f003 0307 	and.w	r3, r3, #7
 801071a:	2101      	movs	r1, #1
 801071c:	fa01 f303 	lsl.w	r3, r1, r3
 8010720:	b25b      	sxtb	r3, r3
 8010722:	4313      	orrs	r3, r2
 8010724:	b259      	sxtb	r1, r3
 8010726:	79fa      	ldrb	r2, [r7, #7]
 8010728:	4603      	mov	r3, r0
 801072a:	01db      	lsls	r3, r3, #7
 801072c:	4413      	add	r3, r2
 801072e:	b2c9      	uxtb	r1, r1
 8010730:	4a13      	ldr	r2, [pc, #76]	; (8010780 <ssd1306_DrawPixel+0xbc>)
 8010732:	54d1      	strb	r1, [r2, r3]
 8010734:	e01d      	b.n	8010772 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8010736:	79fa      	ldrb	r2, [r7, #7]
 8010738:	79bb      	ldrb	r3, [r7, #6]
 801073a:	08db      	lsrs	r3, r3, #3
 801073c:	b2d8      	uxtb	r0, r3
 801073e:	4603      	mov	r3, r0
 8010740:	01db      	lsls	r3, r3, #7
 8010742:	4413      	add	r3, r2
 8010744:	4a0e      	ldr	r2, [pc, #56]	; (8010780 <ssd1306_DrawPixel+0xbc>)
 8010746:	5cd3      	ldrb	r3, [r2, r3]
 8010748:	b25a      	sxtb	r2, r3
 801074a:	79bb      	ldrb	r3, [r7, #6]
 801074c:	f003 0307 	and.w	r3, r3, #7
 8010750:	2101      	movs	r1, #1
 8010752:	fa01 f303 	lsl.w	r3, r1, r3
 8010756:	b25b      	sxtb	r3, r3
 8010758:	43db      	mvns	r3, r3
 801075a:	b25b      	sxtb	r3, r3
 801075c:	4013      	ands	r3, r2
 801075e:	b259      	sxtb	r1, r3
 8010760:	79fa      	ldrb	r2, [r7, #7]
 8010762:	4603      	mov	r3, r0
 8010764:	01db      	lsls	r3, r3, #7
 8010766:	4413      	add	r3, r2
 8010768:	b2c9      	uxtb	r1, r1
 801076a:	4a05      	ldr	r2, [pc, #20]	; (8010780 <ssd1306_DrawPixel+0xbc>)
 801076c:	54d1      	strb	r1, [r2, r3]
 801076e:	e000      	b.n	8010772 <ssd1306_DrawPixel+0xae>
        return;
 8010770:	bf00      	nop
    }
}
 8010772:	370c      	adds	r7, #12
 8010774:	46bd      	mov	sp, r7
 8010776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077a:	4770      	bx	lr
 801077c:	20005144 	.word	0x20005144
 8010780:	20004f44 	.word	0x20004f44

08010784 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8010784:	b590      	push	{r4, r7, lr}
 8010786:	b089      	sub	sp, #36	; 0x24
 8010788:	af00      	add	r7, sp, #0
 801078a:	4604      	mov	r4, r0
 801078c:	1d38      	adds	r0, r7, #4
 801078e:	e880 0006 	stmia.w	r0, {r1, r2}
 8010792:	461a      	mov	r2, r3
 8010794:	4623      	mov	r3, r4
 8010796:	73fb      	strb	r3, [r7, #15]
 8010798:	4613      	mov	r3, r2
 801079a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 801079c:	7bfb      	ldrb	r3, [r7, #15]
 801079e:	2b1f      	cmp	r3, #31
 80107a0:	d902      	bls.n	80107a8 <ssd1306_WriteChar+0x24>
 80107a2:	7bfb      	ldrb	r3, [r7, #15]
 80107a4:	2b7e      	cmp	r3, #126	; 0x7e
 80107a6:	d901      	bls.n	80107ac <ssd1306_WriteChar+0x28>
        return 0;
 80107a8:	2300      	movs	r3, #0
 80107aa:	e06d      	b.n	8010888 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80107ac:	4b38      	ldr	r3, [pc, #224]	; (8010890 <ssd1306_WriteChar+0x10c>)
 80107ae:	881b      	ldrh	r3, [r3, #0]
 80107b0:	461a      	mov	r2, r3
 80107b2:	793b      	ldrb	r3, [r7, #4]
 80107b4:	4413      	add	r3, r2
 80107b6:	2b80      	cmp	r3, #128	; 0x80
 80107b8:	dc06      	bgt.n	80107c8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80107ba:	4b35      	ldr	r3, [pc, #212]	; (8010890 <ssd1306_WriteChar+0x10c>)
 80107bc:	885b      	ldrh	r3, [r3, #2]
 80107be:	461a      	mov	r2, r3
 80107c0:	797b      	ldrb	r3, [r7, #5]
 80107c2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80107c4:	2b20      	cmp	r3, #32
 80107c6:	dd01      	ble.n	80107cc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80107c8:	2300      	movs	r3, #0
 80107ca:	e05d      	b.n	8010888 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80107cc:	2300      	movs	r3, #0
 80107ce:	61fb      	str	r3, [r7, #28]
 80107d0:	e04c      	b.n	801086c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80107d2:	68ba      	ldr	r2, [r7, #8]
 80107d4:	7bfb      	ldrb	r3, [r7, #15]
 80107d6:	3b20      	subs	r3, #32
 80107d8:	7979      	ldrb	r1, [r7, #5]
 80107da:	fb01 f303 	mul.w	r3, r1, r3
 80107de:	4619      	mov	r1, r3
 80107e0:	69fb      	ldr	r3, [r7, #28]
 80107e2:	440b      	add	r3, r1
 80107e4:	005b      	lsls	r3, r3, #1
 80107e6:	4413      	add	r3, r2
 80107e8:	881b      	ldrh	r3, [r3, #0]
 80107ea:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80107ec:	2300      	movs	r3, #0
 80107ee:	61bb      	str	r3, [r7, #24]
 80107f0:	e034      	b.n	801085c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80107f2:	697a      	ldr	r2, [r7, #20]
 80107f4:	69bb      	ldr	r3, [r7, #24]
 80107f6:	fa02 f303 	lsl.w	r3, r2, r3
 80107fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d012      	beq.n	8010828 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8010802:	4b23      	ldr	r3, [pc, #140]	; (8010890 <ssd1306_WriteChar+0x10c>)
 8010804:	881b      	ldrh	r3, [r3, #0]
 8010806:	b2da      	uxtb	r2, r3
 8010808:	69bb      	ldr	r3, [r7, #24]
 801080a:	b2db      	uxtb	r3, r3
 801080c:	4413      	add	r3, r2
 801080e:	b2d8      	uxtb	r0, r3
 8010810:	4b1f      	ldr	r3, [pc, #124]	; (8010890 <ssd1306_WriteChar+0x10c>)
 8010812:	885b      	ldrh	r3, [r3, #2]
 8010814:	b2da      	uxtb	r2, r3
 8010816:	69fb      	ldr	r3, [r7, #28]
 8010818:	b2db      	uxtb	r3, r3
 801081a:	4413      	add	r3, r2
 801081c:	b2db      	uxtb	r3, r3
 801081e:	7bba      	ldrb	r2, [r7, #14]
 8010820:	4619      	mov	r1, r3
 8010822:	f7ff ff4f 	bl	80106c4 <ssd1306_DrawPixel>
 8010826:	e016      	b.n	8010856 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8010828:	4b19      	ldr	r3, [pc, #100]	; (8010890 <ssd1306_WriteChar+0x10c>)
 801082a:	881b      	ldrh	r3, [r3, #0]
 801082c:	b2da      	uxtb	r2, r3
 801082e:	69bb      	ldr	r3, [r7, #24]
 8010830:	b2db      	uxtb	r3, r3
 8010832:	4413      	add	r3, r2
 8010834:	b2d8      	uxtb	r0, r3
 8010836:	4b16      	ldr	r3, [pc, #88]	; (8010890 <ssd1306_WriteChar+0x10c>)
 8010838:	885b      	ldrh	r3, [r3, #2]
 801083a:	b2da      	uxtb	r2, r3
 801083c:	69fb      	ldr	r3, [r7, #28]
 801083e:	b2db      	uxtb	r3, r3
 8010840:	4413      	add	r3, r2
 8010842:	b2d9      	uxtb	r1, r3
 8010844:	7bbb      	ldrb	r3, [r7, #14]
 8010846:	2b00      	cmp	r3, #0
 8010848:	bf0c      	ite	eq
 801084a:	2301      	moveq	r3, #1
 801084c:	2300      	movne	r3, #0
 801084e:	b2db      	uxtb	r3, r3
 8010850:	461a      	mov	r2, r3
 8010852:	f7ff ff37 	bl	80106c4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8010856:	69bb      	ldr	r3, [r7, #24]
 8010858:	3301      	adds	r3, #1
 801085a:	61bb      	str	r3, [r7, #24]
 801085c:	793b      	ldrb	r3, [r7, #4]
 801085e:	461a      	mov	r2, r3
 8010860:	69bb      	ldr	r3, [r7, #24]
 8010862:	4293      	cmp	r3, r2
 8010864:	d3c5      	bcc.n	80107f2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8010866:	69fb      	ldr	r3, [r7, #28]
 8010868:	3301      	adds	r3, #1
 801086a:	61fb      	str	r3, [r7, #28]
 801086c:	797b      	ldrb	r3, [r7, #5]
 801086e:	461a      	mov	r2, r3
 8010870:	69fb      	ldr	r3, [r7, #28]
 8010872:	4293      	cmp	r3, r2
 8010874:	d3ad      	bcc.n	80107d2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8010876:	4b06      	ldr	r3, [pc, #24]	; (8010890 <ssd1306_WriteChar+0x10c>)
 8010878:	881a      	ldrh	r2, [r3, #0]
 801087a:	793b      	ldrb	r3, [r7, #4]
 801087c:	b29b      	uxth	r3, r3
 801087e:	4413      	add	r3, r2
 8010880:	b29a      	uxth	r2, r3
 8010882:	4b03      	ldr	r3, [pc, #12]	; (8010890 <ssd1306_WriteChar+0x10c>)
 8010884:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8010886:	7bfb      	ldrb	r3, [r7, #15]
}
 8010888:	4618      	mov	r0, r3
 801088a:	3724      	adds	r7, #36	; 0x24
 801088c:	46bd      	mov	sp, r7
 801088e:	bd90      	pop	{r4, r7, pc}
 8010890:	20005144 	.word	0x20005144

08010894 <ssd1306_WriteString>:
    }

    // Everything ok
    return *str;
}
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color) {
 8010894:	b580      	push	{r7, lr}
 8010896:	b084      	sub	sp, #16
 8010898:	af00      	add	r7, sp, #0
 801089a:	60f8      	str	r0, [r7, #12]
 801089c:	1d38      	adds	r0, r7, #4
 801089e:	e880 0006 	stmia.w	r0, {r1, r2}
 80108a2:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80108a4:	e012      	b.n	80108cc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	7818      	ldrb	r0, [r3, #0]
 80108aa:	78fb      	ldrb	r3, [r7, #3]
 80108ac:	1d3a      	adds	r2, r7, #4
 80108ae:	ca06      	ldmia	r2, {r1, r2}
 80108b0:	f7ff ff68 	bl	8010784 <ssd1306_WriteChar>
 80108b4:	4603      	mov	r3, r0
 80108b6:	461a      	mov	r2, r3
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	781b      	ldrb	r3, [r3, #0]
 80108bc:	429a      	cmp	r2, r3
 80108be:	d002      	beq.n	80108c6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	781b      	ldrb	r3, [r3, #0]
 80108c4:	e008      	b.n	80108d8 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	3301      	adds	r3, #1
 80108ca:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	781b      	ldrb	r3, [r3, #0]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d1e8      	bne.n	80108a6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	781b      	ldrb	r3, [r3, #0]
}
 80108d8:	4618      	mov	r0, r3
 80108da:	3710      	adds	r7, #16
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd80      	pop	{r7, pc}

080108e0 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80108e0:	b480      	push	{r7}
 80108e2:	b083      	sub	sp, #12
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	4603      	mov	r3, r0
 80108e8:	460a      	mov	r2, r1
 80108ea:	71fb      	strb	r3, [r7, #7]
 80108ec:	4613      	mov	r3, r2
 80108ee:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80108f0:	79fb      	ldrb	r3, [r7, #7]
 80108f2:	b29a      	uxth	r2, r3
 80108f4:	4b05      	ldr	r3, [pc, #20]	; (801090c <ssd1306_SetCursor+0x2c>)
 80108f6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80108f8:	79bb      	ldrb	r3, [r7, #6]
 80108fa:	b29a      	uxth	r2, r3
 80108fc:	4b03      	ldr	r3, [pc, #12]	; (801090c <ssd1306_SetCursor+0x2c>)
 80108fe:	805a      	strh	r2, [r3, #2]
}
 8010900:	bf00      	nop
 8010902:	370c      	adds	r7, #12
 8010904:	46bd      	mov	sp, r7
 8010906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801090a:	4770      	bx	lr
 801090c:	20005144 	.word	0x20005144

08010910 <ssd1306_GetCursorX>:

uint8_t ssd1306_GetCursorX(void)
{
 8010910:	b480      	push	{r7}
 8010912:	af00      	add	r7, sp, #0
	return SSD1306.CurrentX;
 8010914:	4b03      	ldr	r3, [pc, #12]	; (8010924 <ssd1306_GetCursorX+0x14>)
 8010916:	881b      	ldrh	r3, [r3, #0]
 8010918:	b2db      	uxtb	r3, r3
}
 801091a:	4618      	mov	r0, r3
 801091c:	46bd      	mov	sp, r7
 801091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010922:	4770      	bx	lr
 8010924:	20005144 	.word	0x20005144

08010928 <ssd1306_GetCursorY>:
uint8_t ssd1306_GetCursorY(void)
{
 8010928:	b480      	push	{r7}
 801092a:	af00      	add	r7, sp, #0
	return SSD1306.CurrentY;
 801092c:	4b03      	ldr	r3, [pc, #12]	; (801093c <ssd1306_GetCursorY+0x14>)
 801092e:	885b      	ldrh	r3, [r3, #2]
 8010930:	b2db      	uxtb	r3, r3
}
 8010932:	4618      	mov	r0, r3
 8010934:	46bd      	mov	sp, r7
 8010936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093a:	4770      	bx	lr
 801093c:	20005144 	.word	0x20005144

08010940 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8010940:	b590      	push	{r4, r7, lr}
 8010942:	b089      	sub	sp, #36	; 0x24
 8010944:	af00      	add	r7, sp, #0
 8010946:	4604      	mov	r4, r0
 8010948:	4608      	mov	r0, r1
 801094a:	4611      	mov	r1, r2
 801094c:	461a      	mov	r2, r3
 801094e:	4623      	mov	r3, r4
 8010950:	71fb      	strb	r3, [r7, #7]
 8010952:	4603      	mov	r3, r0
 8010954:	71bb      	strb	r3, [r7, #6]
 8010956:	460b      	mov	r3, r1
 8010958:	717b      	strb	r3, [r7, #5]
 801095a:	4613      	mov	r3, r2
 801095c:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 801095e:	797a      	ldrb	r2, [r7, #5]
 8010960:	79fb      	ldrb	r3, [r7, #7]
 8010962:	1ad3      	subs	r3, r2, r3
 8010964:	2b00      	cmp	r3, #0
 8010966:	bfb8      	it	lt
 8010968:	425b      	neglt	r3, r3
 801096a:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 801096c:	793a      	ldrb	r2, [r7, #4]
 801096e:	79bb      	ldrb	r3, [r7, #6]
 8010970:	1ad3      	subs	r3, r2, r3
 8010972:	2b00      	cmp	r3, #0
 8010974:	bfb8      	it	lt
 8010976:	425b      	neglt	r3, r3
 8010978:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 801097a:	79fa      	ldrb	r2, [r7, #7]
 801097c:	797b      	ldrb	r3, [r7, #5]
 801097e:	429a      	cmp	r2, r3
 8010980:	d201      	bcs.n	8010986 <ssd1306_Line+0x46>
 8010982:	2301      	movs	r3, #1
 8010984:	e001      	b.n	801098a <ssd1306_Line+0x4a>
 8010986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801098a:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 801098c:	79ba      	ldrb	r2, [r7, #6]
 801098e:	793b      	ldrb	r3, [r7, #4]
 8010990:	429a      	cmp	r2, r3
 8010992:	d201      	bcs.n	8010998 <ssd1306_Line+0x58>
 8010994:	2301      	movs	r3, #1
 8010996:	e001      	b.n	801099c <ssd1306_Line+0x5c>
 8010998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801099c:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 801099e:	69ba      	ldr	r2, [r7, #24]
 80109a0:	697b      	ldr	r3, [r7, #20]
 80109a2:	1ad3      	subs	r3, r2, r3
 80109a4:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 80109a6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80109aa:	7939      	ldrb	r1, [r7, #4]
 80109ac:	797b      	ldrb	r3, [r7, #5]
 80109ae:	4618      	mov	r0, r3
 80109b0:	f7ff fe88 	bl	80106c4 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 80109b4:	e024      	b.n	8010a00 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 80109b6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80109ba:	79b9      	ldrb	r1, [r7, #6]
 80109bc:	79fb      	ldrb	r3, [r7, #7]
 80109be:	4618      	mov	r0, r3
 80109c0:	f7ff fe80 	bl	80106c4 <ssd1306_DrawPixel>
    error2 = error * 2;
 80109c4:	69fb      	ldr	r3, [r7, #28]
 80109c6:	005b      	lsls	r3, r3, #1
 80109c8:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 80109ca:	697b      	ldr	r3, [r7, #20]
 80109cc:	425b      	negs	r3, r3
 80109ce:	68ba      	ldr	r2, [r7, #8]
 80109d0:	429a      	cmp	r2, r3
 80109d2:	dd08      	ble.n	80109e6 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 80109d4:	69fa      	ldr	r2, [r7, #28]
 80109d6:	697b      	ldr	r3, [r7, #20]
 80109d8:	1ad3      	subs	r3, r2, r3
 80109da:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 80109dc:	693b      	ldr	r3, [r7, #16]
 80109de:	b2da      	uxtb	r2, r3
 80109e0:	79fb      	ldrb	r3, [r7, #7]
 80109e2:	4413      	add	r3, r2
 80109e4:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 80109e6:	68ba      	ldr	r2, [r7, #8]
 80109e8:	69bb      	ldr	r3, [r7, #24]
 80109ea:	429a      	cmp	r2, r3
 80109ec:	da08      	bge.n	8010a00 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 80109ee:	69fa      	ldr	r2, [r7, #28]
 80109f0:	69bb      	ldr	r3, [r7, #24]
 80109f2:	4413      	add	r3, r2
 80109f4:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	b2da      	uxtb	r2, r3
 80109fa:	79bb      	ldrb	r3, [r7, #6]
 80109fc:	4413      	add	r3, r2
 80109fe:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8010a00:	79fa      	ldrb	r2, [r7, #7]
 8010a02:	797b      	ldrb	r3, [r7, #5]
 8010a04:	429a      	cmp	r2, r3
 8010a06:	d1d6      	bne.n	80109b6 <ssd1306_Line+0x76>
 8010a08:	79ba      	ldrb	r2, [r7, #6]
 8010a0a:	793b      	ldrb	r3, [r7, #4]
 8010a0c:	429a      	cmp	r2, r3
 8010a0e:	d1d2      	bne.n	80109b6 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8010a10:	bf00      	nop
}
 8010a12:	3724      	adds	r7, #36	; 0x24
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bd90      	pop	{r4, r7, pc}

08010a18 <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8010a18:	b590      	push	{r4, r7, lr}
 8010a1a:	b085      	sub	sp, #20
 8010a1c:	af02      	add	r7, sp, #8
 8010a1e:	4604      	mov	r4, r0
 8010a20:	4608      	mov	r0, r1
 8010a22:	4611      	mov	r1, r2
 8010a24:	461a      	mov	r2, r3
 8010a26:	4623      	mov	r3, r4
 8010a28:	71fb      	strb	r3, [r7, #7]
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	71bb      	strb	r3, [r7, #6]
 8010a2e:	460b      	mov	r3, r1
 8010a30:	717b      	strb	r3, [r7, #5]
 8010a32:	4613      	mov	r3, r2
 8010a34:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 8010a36:	79bc      	ldrb	r4, [r7, #6]
 8010a38:	797a      	ldrb	r2, [r7, #5]
 8010a3a:	79b9      	ldrb	r1, [r7, #6]
 8010a3c:	79f8      	ldrb	r0, [r7, #7]
 8010a3e:	7e3b      	ldrb	r3, [r7, #24]
 8010a40:	9300      	str	r3, [sp, #0]
 8010a42:	4623      	mov	r3, r4
 8010a44:	f7ff ff7c 	bl	8010940 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8010a48:	793c      	ldrb	r4, [r7, #4]
 8010a4a:	797a      	ldrb	r2, [r7, #5]
 8010a4c:	79b9      	ldrb	r1, [r7, #6]
 8010a4e:	7978      	ldrb	r0, [r7, #5]
 8010a50:	7e3b      	ldrb	r3, [r7, #24]
 8010a52:	9300      	str	r3, [sp, #0]
 8010a54:	4623      	mov	r3, r4
 8010a56:	f7ff ff73 	bl	8010940 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 8010a5a:	793c      	ldrb	r4, [r7, #4]
 8010a5c:	79fa      	ldrb	r2, [r7, #7]
 8010a5e:	7939      	ldrb	r1, [r7, #4]
 8010a60:	7978      	ldrb	r0, [r7, #5]
 8010a62:	7e3b      	ldrb	r3, [r7, #24]
 8010a64:	9300      	str	r3, [sp, #0]
 8010a66:	4623      	mov	r3, r4
 8010a68:	f7ff ff6a 	bl	8010940 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 8010a6c:	79bc      	ldrb	r4, [r7, #6]
 8010a6e:	79fa      	ldrb	r2, [r7, #7]
 8010a70:	7939      	ldrb	r1, [r7, #4]
 8010a72:	79f8      	ldrb	r0, [r7, #7]
 8010a74:	7e3b      	ldrb	r3, [r7, #24]
 8010a76:	9300      	str	r3, [sp, #0]
 8010a78:	4623      	mov	r3, r4
 8010a7a:	f7ff ff61 	bl	8010940 <ssd1306_Line>

  return;
 8010a7e:	bf00      	nop
}
 8010a80:	370c      	adds	r7, #12
 8010a82:	46bd      	mov	sp, r7
 8010a84:	bd90      	pop	{r4, r7, pc}

08010a86 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8010a86:	b580      	push	{r7, lr}
 8010a88:	b084      	sub	sp, #16
 8010a8a:	af00      	add	r7, sp, #0
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8010a90:	2381      	movs	r3, #129	; 0x81
 8010a92:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8010a94:	7bfb      	ldrb	r3, [r7, #15]
 8010a96:	4618      	mov	r0, r3
 8010a98:	f7ff fca2 	bl	80103e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8010a9c:	79fb      	ldrb	r3, [r7, #7]
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f7ff fc9e 	bl	80103e0 <ssd1306_WriteCommand>
}
 8010aa4:	bf00      	nop
 8010aa6:	3710      	adds	r7, #16
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bd80      	pop	{r7, pc}

08010aac <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b084      	sub	sp, #16
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8010ab6:	79fb      	ldrb	r3, [r7, #7]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d005      	beq.n	8010ac8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8010abc:	23af      	movs	r3, #175	; 0xaf
 8010abe:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8010ac0:	4b08      	ldr	r3, [pc, #32]	; (8010ae4 <ssd1306_SetDisplayOn+0x38>)
 8010ac2:	2201      	movs	r2, #1
 8010ac4:	719a      	strb	r2, [r3, #6]
 8010ac6:	e004      	b.n	8010ad2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8010ac8:	23ae      	movs	r3, #174	; 0xae
 8010aca:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8010acc:	4b05      	ldr	r3, [pc, #20]	; (8010ae4 <ssd1306_SetDisplayOn+0x38>)
 8010ace:	2200      	movs	r2, #0
 8010ad0:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8010ad2:	7bfb      	ldrb	r3, [r7, #15]
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	f7ff fc83 	bl	80103e0 <ssd1306_WriteCommand>
}
 8010ada:	bf00      	nop
 8010adc:	3710      	adds	r7, #16
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}
 8010ae2:	bf00      	nop
 8010ae4:	20005144 	.word	0x20005144

08010ae8 <HAL_I2C_MemTxCpltCallback>:
		mqf_write_from_canton(&m);
	}
}

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010ae8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8010aec:	b08a      	sub	sp, #40	; 0x28
 8010aee:	af02      	add	r7, sp, #8
 8010af0:	6078      	str	r0, [r7, #4]
	BEGIN_ISR
 8010af2:	f002 fe1d 	bl	8013730 <GetCycleCount64>
 8010af6:	4603      	mov	r3, r0
 8010af8:	460c      	mov	r4, r1
 8010afa:	e9c7 3404 	strd	r3, r4, [r7, #16]
	BaseType_t higher=0;
 8010afe:	2300      	movs	r3, #0
 8010b00:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(ina3221_taskHandle, NOTIF_INA_WRCOMPL, eSetBits, &higher);
 8010b02:	4b1b      	ldr	r3, [pc, #108]	; (8010b70 <HAL_I2C_MemTxCpltCallback+0x88>)
 8010b04:	6818      	ldr	r0, [r3, #0]
 8010b06:	f107 030c 	add.w	r3, r7, #12
 8010b0a:	9300      	str	r3, [sp, #0]
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	2201      	movs	r2, #1
 8010b10:	2110      	movs	r1, #16
 8010b12:	f7fd fedd 	bl	800e8d0 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d007      	beq.n	8010b2c <HAL_I2C_MemTxCpltCallback+0x44>
 8010b1c:	4b15      	ldr	r3, [pc, #84]	; (8010b74 <HAL_I2C_MemTxCpltCallback+0x8c>)
 8010b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b22:	601a      	str	r2, [r3, #0]
 8010b24:	f3bf 8f4f 	dsb	sy
 8010b28:	f3bf 8f6f 	isb	sy
	END_ISR;
 8010b2c:	f002 fe00 	bl	8013730 <GetCycleCount64>
 8010b30:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8010b34:	e9d7 bc04 	ldrd	fp, ip, [r7, #16]
 8010b38:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8010b3c:	460b      	mov	r3, r1
 8010b3e:	4614      	mov	r4, r2
 8010b40:	ebb3 030b 	subs.w	r3, r3, fp
 8010b44:	eb64 040c 	sbc.w	r4, r4, ip
 8010b48:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8010b4c:	f04f 0200 	mov.w	r2, #0
 8010b50:	42a2      	cmp	r2, r4
 8010b52:	bf08      	it	eq
 8010b54:	4299      	cmpeq	r1, r3
 8010b56:	d206      	bcs.n	8010b66 <HAL_I2C_MemTxCpltCallback+0x7e>
 8010b58:	69ba      	ldr	r2, [r7, #24]
 8010b5a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8010b5e:	1ad3      	subs	r3, r2, r3
 8010b60:	4618      	mov	r0, r3
 8010b62:	f002 fdd3 	bl	801370c <long_isr>
}
 8010b66:	bf00      	nop
 8010b68:	3720      	adds	r7, #32
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8010b70:	20006c7c 	.word	0x20006c7c
 8010b74:	e000ed04 	.word	0xe000ed04

08010b78 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8010b78:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8010b7c:	b08a      	sub	sp, #40	; 0x28
 8010b7e:	af02      	add	r7, sp, #8
 8010b80:	6078      	str	r0, [r7, #4]
	BEGIN_ISR
 8010b82:	f002 fdd5 	bl	8013730 <GetCycleCount64>
 8010b86:	4603      	mov	r3, r0
 8010b88:	460c      	mov	r4, r1
 8010b8a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	BaseType_t higher=0;
 8010b8e:	2300      	movs	r3, #0
 8010b90:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(ina3221_taskHandle, NOTIF_INA_RDCOMPL, eSetBits, &higher);
 8010b92:	4b1b      	ldr	r3, [pc, #108]	; (8010c00 <HAL_I2C_MemRxCpltCallback+0x88>)
 8010b94:	6818      	ldr	r0, [r3, #0]
 8010b96:	f107 030c 	add.w	r3, r7, #12
 8010b9a:	9300      	str	r3, [sp, #0]
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	2201      	movs	r2, #1
 8010ba0:	2120      	movs	r1, #32
 8010ba2:	f7fd fe95 	bl	800e8d0 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d007      	beq.n	8010bbc <HAL_I2C_MemRxCpltCallback+0x44>
 8010bac:	4b15      	ldr	r3, [pc, #84]	; (8010c04 <HAL_I2C_MemRxCpltCallback+0x8c>)
 8010bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bb2:	601a      	str	r2, [r3, #0]
 8010bb4:	f3bf 8f4f 	dsb	sy
 8010bb8:	f3bf 8f6f 	isb	sy
	END_ISR;
 8010bbc:	f002 fdb8 	bl	8013730 <GetCycleCount64>
 8010bc0:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8010bc4:	e9d7 bc04 	ldrd	fp, ip, [r7, #16]
 8010bc8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8010bcc:	460b      	mov	r3, r1
 8010bce:	4614      	mov	r4, r2
 8010bd0:	ebb3 030b 	subs.w	r3, r3, fp
 8010bd4:	eb64 040c 	sbc.w	r4, r4, ip
 8010bd8:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8010bdc:	f04f 0200 	mov.w	r2, #0
 8010be0:	42a2      	cmp	r2, r4
 8010be2:	bf08      	it	eq
 8010be4:	4299      	cmpeq	r1, r3
 8010be6:	d206      	bcs.n	8010bf6 <HAL_I2C_MemRxCpltCallback+0x7e>
 8010be8:	69ba      	ldr	r2, [r7, #24]
 8010bea:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8010bee:	1ad3      	subs	r3, r2, r3
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	f002 fd8b 	bl	801370c <long_isr>
}
 8010bf6:	bf00      	nop
 8010bf8:	3720      	adds	r7, #32
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8010c00:	20006c7c 	.word	0x20006c7c
 8010c04:	e000ed04 	.word	0xe000ed04

08010c08 <HAL_I2C_ErrorCallback>:



void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010c08:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8010c0c:	b08a      	sub	sp, #40	; 0x28
 8010c0e:	af02      	add	r7, sp, #8
 8010c10:	6078      	str	r0, [r7, #4]
	BEGIN_ISR
 8010c12:	f002 fd8d 	bl	8013730 <GetCycleCount64>
 8010c16:	4603      	mov	r3, r0
 8010c18:	460c      	mov	r4, r1
 8010c1a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	lastErr = hi2c->ErrorCode;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c22:	461a      	mov	r2, r3
 8010c24:	4b1d      	ldr	r3, [pc, #116]	; (8010c9c <HAL_I2C_ErrorCallback+0x94>)
 8010c26:	601a      	str	r2, [r3, #0]
	BaseType_t higher=0;
 8010c28:	2300      	movs	r3, #0
 8010c2a:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(ina3221_taskHandle, NOTIF_INA_ERR, eSetBits, &higher);
 8010c2c:	4b1c      	ldr	r3, [pc, #112]	; (8010ca0 <HAL_I2C_ErrorCallback+0x98>)
 8010c2e:	6818      	ldr	r0, [r3, #0]
 8010c30:	f107 030c 	add.w	r3, r7, #12
 8010c34:	9300      	str	r3, [sp, #0]
 8010c36:	2300      	movs	r3, #0
 8010c38:	2201      	movs	r2, #1
 8010c3a:	2140      	movs	r1, #64	; 0x40
 8010c3c:	f7fd fe48 	bl	800e8d0 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d007      	beq.n	8010c56 <HAL_I2C_ErrorCallback+0x4e>
 8010c46:	4b17      	ldr	r3, [pc, #92]	; (8010ca4 <HAL_I2C_ErrorCallback+0x9c>)
 8010c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c4c:	601a      	str	r2, [r3, #0]
 8010c4e:	f3bf 8f4f 	dsb	sy
 8010c52:	f3bf 8f6f 	isb	sy
	END_ISR;
 8010c56:	f002 fd6b 	bl	8013730 <GetCycleCount64>
 8010c5a:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8010c5e:	e9d7 bc04 	ldrd	fp, ip, [r7, #16]
 8010c62:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8010c66:	460b      	mov	r3, r1
 8010c68:	4614      	mov	r4, r2
 8010c6a:	ebb3 030b 	subs.w	r3, r3, fp
 8010c6e:	eb64 040c 	sbc.w	r4, r4, ip
 8010c72:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8010c76:	f04f 0200 	mov.w	r2, #0
 8010c7a:	42a2      	cmp	r2, r4
 8010c7c:	bf08      	it	eq
 8010c7e:	4299      	cmpeq	r1, r3
 8010c80:	d206      	bcs.n	8010c90 <HAL_I2C_ErrorCallback+0x88>
 8010c82:	69ba      	ldr	r2, [r7, #24]
 8010c84:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8010c88:	1ad3      	subs	r3, r2, r3
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f002 fd3e 	bl	801370c <long_isr>
}
 8010c90:	bf00      	nop
 8010c92:	3720      	adds	r7, #32
 8010c94:	46bd      	mov	sp, r7
 8010c96:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8010c9a:	bf00      	nop
 8010c9c:	20005150 	.word	0x20005150
 8010ca0:	20006c7c 	.word	0x20006c7c
 8010ca4:	e000ed04 	.word	0xe000ed04

08010ca8 <ina3221_task_start>:
}

// ----------------------------------------------------------------------------------

void ina3221_task_start(void *argument)
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b082      	sub	sp, #8
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
#if INA3221_TASK
	if (DISABLE_INA3221) {
		for(;;) {
			osDelay(1);
 8010cb0:	2001      	movs	r0, #1
 8010cb2:	f7fb fe05 	bl	800c8c0 <osDelay>
 8010cb6:	e7fb      	b.n	8010cb0 <ina3221_task_start+0x8>

08010cb8 <itm_debug1>:
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b086      	sub	sp, #24
 8010cbc:	af02      	add	r7, sp, #8
 8010cbe:	60f8      	str	r0, [r7, #12]
 8010cc0:	60b9      	str	r1, [r7, #8]
 8010cc2:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8010cc4:	4b08      	ldr	r3, [pc, #32]	; (8010ce8 <itm_debug1+0x30>)
 8010cc6:	681a      	ldr	r2, [r3, #0]
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	4013      	ands	r3, r2
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d007      	beq.n	8010ce0 <itm_debug1+0x28>
 8010cd0:	2301      	movs	r3, #1
 8010cd2:	9300      	str	r3, [sp, #0]
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	6879      	ldr	r1, [r7, #4]
 8010cda:	68b8      	ldr	r0, [r7, #8]
 8010cdc:	f005 fc2c 	bl	8016538 <_itm_debug3>
}
 8010ce0:	bf00      	nop
 8010ce2:	3710      	adds	r7, #16
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}
 8010ce8:	20000538 	.word	0x20000538

08010cec <ihm_setlayout>:
		CODE_ZONE_TEXT3s,  CODE_SVAL4,  6, /*CODE_STR|7,*/ CODE_SVAL4,  7, /*CODE_STR|7,*/ CODE_SVAL4,  8,
		CODE_END
};

void ihm_setlayout(int numdisp, int numlayout)
{
 8010cec:	b480      	push	{r7}
 8010cee:	b085      	sub	sp, #20
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
 8010cf4:	6039      	str	r1, [r7, #0]
	const uint8_t *p = NULL;
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	60fb      	str	r3, [r7, #12]
	switch (numlayout) {
 8010cfa:	683b      	ldr	r3, [r7, #0]
 8010cfc:	2b01      	cmp	r3, #1
 8010cfe:	d008      	beq.n	8010d12 <ihm_setlayout+0x26>
 8010d00:	2b01      	cmp	r3, #1
 8010d02:	dc01      	bgt.n	8010d08 <ihm_setlayout+0x1c>
 8010d04:	2b00      	cmp	r3, #0
	case LAYOUT_DEFAULT: // default
		break;
 8010d06:	e00d      	b.n	8010d24 <ihm_setlayout+0x38>
	switch (numlayout) {
 8010d08:	2bc8      	cmp	r3, #200	; 0xc8
 8010d0a:	d005      	beq.n	8010d18 <ihm_setlayout+0x2c>
 8010d0c:	2bc9      	cmp	r3, #201	; 0xc9
 8010d0e:	d006      	beq.n	8010d1e <ihm_setlayout+0x32>
 8010d10:	e008      	b.n	8010d24 <ihm_setlayout+0x38>
	case LAYOUT_MANUAL: // speed mode
		p = layout_manual;
 8010d12:	4b0a      	ldr	r3, [pc, #40]	; (8010d3c <ihm_setlayout+0x50>)
 8010d14:	60fb      	str	r3, [r7, #12]
		break;
 8010d16:	e005      	b.n	8010d24 <ihm_setlayout+0x38>

	case LAYOUT_INA3221_DETECT: // ina3221 I2C detection
		p = layout_ina3221_i2c;
 8010d18:	4b09      	ldr	r3, [pc, #36]	; (8010d40 <ihm_setlayout+0x54>)
 8010d1a:	60fb      	str	r3, [r7, #12]
		break;
 8010d1c:	e002      	b.n	8010d24 <ihm_setlayout+0x38>
	case LAYOUT_INA3221_VAL:
		p = layout_ina3221_val;
 8010d1e:	4b09      	ldr	r3, [pc, #36]	; (8010d44 <ihm_setlayout+0x58>)
 8010d20:	60fb      	str	r3, [r7, #12]
		break;
 8010d22:	bf00      	nop
	}
	disp[numdisp] = p;
 8010d24:	4908      	ldr	r1, [pc, #32]	; (8010d48 <ihm_setlayout+0x5c>)
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	68fa      	ldr	r2, [r7, #12]
 8010d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010d2e:	bf00      	nop
 8010d30:	3714      	adds	r7, #20
 8010d32:	46bd      	mov	sp, r7
 8010d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d38:	4770      	bx	lr
 8010d3a:	bf00      	nop
 8010d3c:	0801881c 	.word	0x0801881c
 8010d40:	0801882c 	.word	0x0801882c
 8010d44:	08018844 	.word	0x08018844
 8010d48:	20005154 	.word	0x20005154

08010d4c <ihm_setvar>:
// ----------------------------------------------------------------

static uint16_t regs[DISP_MAX_REGS][MAX_DISP];

void ihm_setvar(int numdisp, int varnum, uint16_t val)
{
 8010d4c:	b480      	push	{r7}
 8010d4e:	b085      	sub	sp, #20
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	60f8      	str	r0, [r7, #12]
 8010d54:	60b9      	str	r1, [r7, #8]
 8010d56:	4613      	mov	r3, r2
 8010d58:	80fb      	strh	r3, [r7, #6]
	if (varnum>DISP_MAX_REGS) return;
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	2b10      	cmp	r3, #16
 8010d5e:	dc0a      	bgt.n	8010d76 <ihm_setvar+0x2a>
	if (numdisp>MAX_DISP) return;
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	2b01      	cmp	r3, #1
 8010d64:	dc09      	bgt.n	8010d7a <ihm_setvar+0x2e>
	regs[varnum][numdisp] = val;
 8010d66:	4908      	ldr	r1, [pc, #32]	; (8010d88 <ihm_setvar+0x3c>)
 8010d68:	68ba      	ldr	r2, [r7, #8]
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	4413      	add	r3, r2
 8010d6e:	88fa      	ldrh	r2, [r7, #6]
 8010d70:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8010d74:	e002      	b.n	8010d7c <ihm_setvar+0x30>
	if (varnum>DISP_MAX_REGS) return;
 8010d76:	bf00      	nop
 8010d78:	e000      	b.n	8010d7c <ihm_setvar+0x30>
	if (numdisp>MAX_DISP) return;
 8010d7a:	bf00      	nop
}
 8010d7c:	3714      	adds	r7, #20
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d84:	4770      	bx	lr
 8010d86:	bf00      	nop
 8010d88:	20005158 	.word	0x20005158

08010d8c <ihm_getvar>:
uint16_t ihm_getvar(int numdisp, int varnum)
{
 8010d8c:	b480      	push	{r7}
 8010d8e:	b083      	sub	sp, #12
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
 8010d94:	6039      	str	r1, [r7, #0]
	if (varnum>DISP_MAX_REGS) return 0;
 8010d96:	683b      	ldr	r3, [r7, #0]
 8010d98:	2b10      	cmp	r3, #16
 8010d9a:	dd01      	ble.n	8010da0 <ihm_getvar+0x14>
 8010d9c:	2300      	movs	r3, #0
 8010d9e:	e00a      	b.n	8010db6 <ihm_getvar+0x2a>
	if (numdisp>MAX_DISP) return 0;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	2b01      	cmp	r3, #1
 8010da4:	dd01      	ble.n	8010daa <ihm_getvar+0x1e>
 8010da6:	2300      	movs	r3, #0
 8010da8:	e005      	b.n	8010db6 <ihm_getvar+0x2a>
	return regs[varnum][numdisp];
 8010daa:	4906      	ldr	r1, [pc, #24]	; (8010dc4 <ihm_getvar+0x38>)
 8010dac:	683a      	ldr	r2, [r7, #0]
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	4413      	add	r3, r2
 8010db2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
}
 8010db6:	4618      	mov	r0, r3
 8010db8:	370c      	adds	r7, #12
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc0:	4770      	bx	lr
 8010dc2:	bf00      	nop
 8010dc4:	20005158 	.word	0x20005158

08010dc8 <disp_layout>:
static void write_snum4(int16_t v, FontDef *curfont);
static void write_bargraph(int16_t v, int16_t min, int16_t max);
static void write_sbargraph(int16_t v, int16_t min, int16_t max);

void disp_layout(int numdisp)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b08a      	sub	sp, #40	; 0x28
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
	uint32_t t0 = HAL_GetTick();
 8010dd0:	f7f1 f884 	bl	8001edc <HAL_GetTick>
 8010dd4:	61b8      	str	r0, [r7, #24]
	const uint8_t *d = disp[numdisp];
 8010dd6:	4ad3      	ldr	r2, [pc, #844]	; (8011124 <disp_layout+0x35c>)
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010dde:	627b      	str	r3, [r7, #36]	; 0x24
	if (!d) d = default_layout;
 8010de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d101      	bne.n	8010dea <disp_layout+0x22>
 8010de6:	4bd0      	ldr	r3, [pc, #832]	; (8011128 <disp_layout+0x360>)
 8010de8:	627b      	str	r3, [r7, #36]	; 0x24
	ssd1306_Fill(Black);
 8010dea:	2000      	movs	r0, #0
 8010dec:	f7ff fb94 	bl	8010518 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8010df0:	2100      	movs	r1, #0
 8010df2:	2000      	movs	r0, #0
 8010df4:	f7ff fd74 	bl	80108e0 <ssd1306_SetCursor>
	FontDef *curfont = &Font_7x10;
 8010df8:	4bcc      	ldr	r3, [pc, #816]	; (801112c <disp_layout+0x364>)
 8010dfa:	623b      	str	r3, [r7, #32]
	int16_t v16s;
	//uint16_t *puval;
	static uint16_t last_dur1=0;
	static uint16_t last_dur2=0;

	for (int i=0; i<MAX_OPCODE_PER_DISPLAY; i++) {
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	61fb      	str	r3, [r7, #28]
 8010e00:	e21e      	b.n	8011240 <disp_layout+0x478>
		if (CODE_END == d[i]) break;
 8010e02:	69fb      	ldr	r3, [r7, #28]
 8010e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e06:	4413      	add	r3, r2
 8010e08:	781b      	ldrb	r3, [r3, #0]
 8010e0a:	2bfe      	cmp	r3, #254	; 0xfe
 8010e0c:	f000 821d 	beq.w	801124a <disp_layout+0x482>
		if ((d[i] & 0x80)==0) {
 8010e10:	69fb      	ldr	r3, [r7, #28]
 8010e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e14:	4413      	add	r3, r2
 8010e16:	781b      	ldrb	r3, [r3, #0]
 8010e18:	b25b      	sxtb	r3, r3
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	db10      	blt.n	8010e40 <disp_layout+0x78>
			const char * stri = ui_strings[d[i]&0x7F];
 8010e1e:	69fb      	ldr	r3, [r7, #28]
 8010e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e22:	4413      	add	r3, r2
 8010e24:	781b      	ldrb	r3, [r3, #0]
 8010e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e2a:	4ac1      	ldr	r2, [pc, #772]	; (8011130 <disp_layout+0x368>)
 8010e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e30:	613b      	str	r3, [r7, #16]
			ssd1306_WriteString(stri, *curfont, White);
 8010e32:	6a3a      	ldr	r2, [r7, #32]
 8010e34:	2301      	movs	r3, #1
 8010e36:	ca06      	ldmia	r2, {r1, r2}
 8010e38:	6938      	ldr	r0, [r7, #16]
 8010e3a:	f7ff fd2b 	bl	8010894 <ssd1306_WriteString>
			continue;
 8010e3e:	e1fc      	b.n	801123a <disp_layout+0x472>
		}
		switch (d[i]) {
 8010e40:	69fb      	ldr	r3, [r7, #28]
 8010e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e44:	4413      	add	r3, r2
 8010e46:	781b      	ldrb	r3, [r3, #0]
 8010e48:	3b80      	subs	r3, #128	; 0x80
 8010e4a:	2b7f      	cmp	r3, #127	; 0x7f
 8010e4c:	f200 81e7 	bhi.w	801121e <disp_layout+0x456>
 8010e50:	a201      	add	r2, pc, #4	; (adr r2, 8010e58 <disp_layout+0x90>)
 8010e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e56:	bf00      	nop
 8010e58:	08011059 	.word	0x08011059
 8010e5c:	08011067 	.word	0x08011067
 8010e60:	08011075 	.word	0x08011075
 8010e64:	08011083 	.word	0x08011083
 8010e68:	08011091 	.word	0x08011091
 8010e6c:	0801109f 	.word	0x0801109f
 8010e70:	080110ad 	.word	0x080110ad
 8010e74:	080110bb 	.word	0x080110bb
 8010e78:	080111dd 	.word	0x080111dd
 8010e7c:	0801121f 	.word	0x0801121f
 8010e80:	0801121f 	.word	0x0801121f
 8010e84:	0801121f 	.word	0x0801121f
 8010e88:	0801121f 	.word	0x0801121f
 8010e8c:	0801121f 	.word	0x0801121f
 8010e90:	0801121f 	.word	0x0801121f
 8010e94:	080111f1 	.word	0x080111f1
 8010e98:	0801121f 	.word	0x0801121f
 8010e9c:	0801121f 	.word	0x0801121f
 8010ea0:	0801121f 	.word	0x0801121f
 8010ea4:	0801121f 	.word	0x0801121f
 8010ea8:	0801121f 	.word	0x0801121f
 8010eac:	0801121f 	.word	0x0801121f
 8010eb0:	0801121f 	.word	0x0801121f
 8010eb4:	0801121f 	.word	0x0801121f
 8010eb8:	0801121f 	.word	0x0801121f
 8010ebc:	0801121f 	.word	0x0801121f
 8010ec0:	0801121f 	.word	0x0801121f
 8010ec4:	0801121f 	.word	0x0801121f
 8010ec8:	0801121f 	.word	0x0801121f
 8010ecc:	0801121f 	.word	0x0801121f
 8010ed0:	0801121f 	.word	0x0801121f
 8010ed4:	0801121f 	.word	0x0801121f
 8010ed8:	0801121f 	.word	0x0801121f
 8010edc:	0801121f 	.word	0x0801121f
 8010ee0:	0801121f 	.word	0x0801121f
 8010ee4:	0801121f 	.word	0x0801121f
 8010ee8:	0801121f 	.word	0x0801121f
 8010eec:	0801121f 	.word	0x0801121f
 8010ef0:	0801121f 	.word	0x0801121f
 8010ef4:	0801121f 	.word	0x0801121f
 8010ef8:	0801121f 	.word	0x0801121f
 8010efc:	0801121f 	.word	0x0801121f
 8010f00:	0801121f 	.word	0x0801121f
 8010f04:	0801121f 	.word	0x0801121f
 8010f08:	0801121f 	.word	0x0801121f
 8010f0c:	0801121f 	.word	0x0801121f
 8010f10:	0801121f 	.word	0x0801121f
 8010f14:	0801121f 	.word	0x0801121f
 8010f18:	0801121f 	.word	0x0801121f
 8010f1c:	0801121f 	.word	0x0801121f
 8010f20:	0801121f 	.word	0x0801121f
 8010f24:	0801121f 	.word	0x0801121f
 8010f28:	0801121f 	.word	0x0801121f
 8010f2c:	0801121f 	.word	0x0801121f
 8010f30:	0801121f 	.word	0x0801121f
 8010f34:	0801121f 	.word	0x0801121f
 8010f38:	0801121f 	.word	0x0801121f
 8010f3c:	0801121f 	.word	0x0801121f
 8010f40:	0801121f 	.word	0x0801121f
 8010f44:	0801121f 	.word	0x0801121f
 8010f48:	0801121f 	.word	0x0801121f
 8010f4c:	0801121f 	.word	0x0801121f
 8010f50:	0801121f 	.word	0x0801121f
 8010f54:	0801121f 	.word	0x0801121f
 8010f58:	080110c9 	.word	0x080110c9
 8010f5c:	08011217 	.word	0x08011217
 8010f60:	08011161 	.word	0x08011161
 8010f64:	0801121f 	.word	0x0801121f
 8010f68:	080110fd 	.word	0x080110fd
 8010f6c:	08011139 	.word	0x08011139
 8010f70:	08011187 	.word	0x08011187
 8010f74:	080111b1 	.word	0x080111b1
 8010f78:	0801121f 	.word	0x0801121f
 8010f7c:	0801121f 	.word	0x0801121f
 8010f80:	0801121f 	.word	0x0801121f
 8010f84:	0801121f 	.word	0x0801121f
 8010f88:	0801121f 	.word	0x0801121f
 8010f8c:	0801121f 	.word	0x0801121f
 8010f90:	0801121f 	.word	0x0801121f
 8010f94:	0801121f 	.word	0x0801121f
 8010f98:	0801121f 	.word	0x0801121f
 8010f9c:	0801121f 	.word	0x0801121f
 8010fa0:	0801121f 	.word	0x0801121f
 8010fa4:	0801121f 	.word	0x0801121f
 8010fa8:	0801121f 	.word	0x0801121f
 8010fac:	0801121f 	.word	0x0801121f
 8010fb0:	0801121f 	.word	0x0801121f
 8010fb4:	0801121f 	.word	0x0801121f
 8010fb8:	0801121f 	.word	0x0801121f
 8010fbc:	0801121f 	.word	0x0801121f
 8010fc0:	0801121f 	.word	0x0801121f
 8010fc4:	0801121f 	.word	0x0801121f
 8010fc8:	0801121f 	.word	0x0801121f
 8010fcc:	0801121f 	.word	0x0801121f
 8010fd0:	0801121f 	.word	0x0801121f
 8010fd4:	0801121f 	.word	0x0801121f
 8010fd8:	0801121f 	.word	0x0801121f
 8010fdc:	0801121f 	.word	0x0801121f
 8010fe0:	0801121f 	.word	0x0801121f
 8010fe4:	0801121f 	.word	0x0801121f
 8010fe8:	0801121f 	.word	0x0801121f
 8010fec:	0801121f 	.word	0x0801121f
 8010ff0:	0801121f 	.word	0x0801121f
 8010ff4:	0801121f 	.word	0x0801121f
 8010ff8:	0801121f 	.word	0x0801121f
 8010ffc:	0801121f 	.word	0x0801121f
 8011000:	0801121f 	.word	0x0801121f
 8011004:	0801121f 	.word	0x0801121f
 8011008:	0801121f 	.word	0x0801121f
 801100c:	0801121f 	.word	0x0801121f
 8011010:	0801121f 	.word	0x0801121f
 8011014:	0801121f 	.word	0x0801121f
 8011018:	0801121f 	.word	0x0801121f
 801101c:	0801121f 	.word	0x0801121f
 8011020:	0801121f 	.word	0x0801121f
 8011024:	0801121f 	.word	0x0801121f
 8011028:	0801121f 	.word	0x0801121f
 801102c:	0801121f 	.word	0x0801121f
 8011030:	0801121f 	.word	0x0801121f
 8011034:	0801121f 	.word	0x0801121f
 8011038:	0801121f 	.word	0x0801121f
 801103c:	0801121f 	.word	0x0801121f
 8011040:	0801121f 	.word	0x0801121f
 8011044:	0801121f 	.word	0x0801121f
 8011048:	0801121f 	.word	0x0801121f
 801104c:	0801121f 	.word	0x0801121f
 8011050:	0801121f 	.word	0x0801121f
 8011054:	08011239 	.word	0x08011239
		case CODE_NOP: break;
		case CODE_ZONE_STATUS:
			ssd1306_SetCursor(0, 0);
 8011058:	2100      	movs	r1, #0
 801105a:	2000      	movs	r0, #0
 801105c:	f7ff fc40 	bl	80108e0 <ssd1306_SetCursor>
			curfont = &Font_7x10;
 8011060:	4b32      	ldr	r3, [pc, #200]	; (801112c <disp_layout+0x364>)
 8011062:	623b      	str	r3, [r7, #32]
			break;
 8011064:	e0e9      	b.n	801123a <disp_layout+0x472>
		case CODE_ZONE_MODE:
			ssd1306_SetCursor(RIGHT_X, 0);
 8011066:	2100      	movs	r1, #0
 8011068:	2040      	movs	r0, #64	; 0x40
 801106a:	f7ff fc39 	bl	80108e0 <ssd1306_SetCursor>
			curfont = &Font_7x10;
 801106e:	4b2f      	ldr	r3, [pc, #188]	; (801112c <disp_layout+0x364>)
 8011070:	623b      	str	r3, [r7, #32]
			break;
 8011072:	e0e2      	b.n	801123a <disp_layout+0x472>
		case CODE_ZONE_TEXT1:
			ssd1306_SetCursor(0, TEXT_Y);
 8011074:	210c      	movs	r1, #12
 8011076:	2000      	movs	r0, #0
 8011078:	f7ff fc32 	bl	80108e0 <ssd1306_SetCursor>
			curfont = &Font_11x18;
 801107c:	4b2d      	ldr	r3, [pc, #180]	; (8011134 <disp_layout+0x36c>)
 801107e:	623b      	str	r3, [r7, #32]
			break;
 8011080:	e0db      	b.n	801123a <disp_layout+0x472>
		case CODE_ZONE_TEXT2:
			ssd1306_SetCursor(RIGHT_X, TEXT_Y);
 8011082:	210c      	movs	r1, #12
 8011084:	2040      	movs	r0, #64	; 0x40
 8011086:	f7ff fc2b 	bl	80108e0 <ssd1306_SetCursor>
			curfont = &Font_11x18;
 801108a:	4b2a      	ldr	r3, [pc, #168]	; (8011134 <disp_layout+0x36c>)
 801108c:	623b      	str	r3, [r7, #32]
			break;
 801108e:	e0d4      	b.n	801123a <disp_layout+0x472>
		case CODE_ZONE_TEXT1s:
			ssd1306_SetCursor(0, TEXT_Y);
 8011090:	210c      	movs	r1, #12
 8011092:	2000      	movs	r0, #0
 8011094:	f7ff fc24 	bl	80108e0 <ssd1306_SetCursor>
			curfont = &Font_7x10;
 8011098:	4b24      	ldr	r3, [pc, #144]	; (801112c <disp_layout+0x364>)
 801109a:	623b      	str	r3, [r7, #32]
			break;
 801109c:	e0cd      	b.n	801123a <disp_layout+0x472>
		case CODE_ZONE_TEXT2s:
			ssd1306_SetCursor(RIGHT_X, TEXT_Y);
 801109e:	210c      	movs	r1, #12
 80110a0:	2040      	movs	r0, #64	; 0x40
 80110a2:	f7ff fc1d 	bl	80108e0 <ssd1306_SetCursor>
			curfont = &Font_7x10;
 80110a6:	4b21      	ldr	r3, [pc, #132]	; (801112c <disp_layout+0x364>)
 80110a8:	623b      	str	r3, [r7, #32]
			break;
 80110aa:	e0c6      	b.n	801123a <disp_layout+0x472>
		case CODE_ZONE_TEXT3s:
			ssd1306_SetCursor(0, TEXT_Y+10);
 80110ac:	2116      	movs	r1, #22
 80110ae:	2000      	movs	r0, #0
 80110b0:	f7ff fc16 	bl	80108e0 <ssd1306_SetCursor>
			curfont = &Font_7x10;
 80110b4:	4b1d      	ldr	r3, [pc, #116]	; (801112c <disp_layout+0x364>)
 80110b6:	623b      	str	r3, [r7, #32]
			break;
 80110b8:	e0bf      	b.n	801123a <disp_layout+0x472>
		case CODE_ZONE_TEXT4s:
			ssd1306_SetCursor(RIGHT_X, TEXT_Y+10);
 80110ba:	2116      	movs	r1, #22
 80110bc:	2040      	movs	r0, #64	; 0x40
 80110be:	f7ff fc0f 	bl	80108e0 <ssd1306_SetCursor>
			curfont = &Font_7x10;
 80110c2:	4b1a      	ldr	r3, [pc, #104]	; (801112c <disp_layout+0x364>)
 80110c4:	623b      	str	r3, [r7, #32]
			break;
 80110c6:	e0b8      	b.n	801123a <disp_layout+0x472>
			ssd1306_SetCursor(0,0);
			curfont = &Font_16x26;
			break;
#endif
		case CODE_DIGIT:
			i++;
 80110c8:	69fb      	ldr	r3, [r7, #28]
 80110ca:	3301      	adds	r3, #1
 80110cc:	61fb      	str	r3, [r7, #28]
			v16u = (int16_t) _GET_REG(numdisp, d[i]);
 80110ce:	69fb      	ldr	r3, [r7, #28]
 80110d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110d2:	4413      	add	r3, r2
 80110d4:	781b      	ldrb	r3, [r3, #0]
 80110d6:	4619      	mov	r1, r3
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f7ff fe57 	bl	8010d8c <ihm_getvar>
 80110de:	4603      	mov	r3, r0
 80110e0:	82bb      	strh	r3, [r7, #20]
			ssd1306_WriteChar('0'+(v16u & 0xF) , *curfont, White);
 80110e2:	8abb      	ldrh	r3, [r7, #20]
 80110e4:	b2db      	uxtb	r3, r3
 80110e6:	f003 030f 	and.w	r3, r3, #15
 80110ea:	b2db      	uxtb	r3, r3
 80110ec:	3330      	adds	r3, #48	; 0x30
 80110ee:	b2d8      	uxtb	r0, r3
 80110f0:	6a3a      	ldr	r2, [r7, #32]
 80110f2:	2301      	movs	r3, #1
 80110f4:	ca06      	ldmia	r2, {r1, r2}
 80110f6:	f7ff fb45 	bl	8010784 <ssd1306_WriteChar>
			break;
 80110fa:	e09e      	b.n	801123a <disp_layout+0x472>
		case CODE_SVAL:
			i++;
 80110fc:	69fb      	ldr	r3, [r7, #28]
 80110fe:	3301      	adds	r3, #1
 8011100:	61fb      	str	r3, [r7, #28]
			v16s = (int16_t) _GET_REG(numdisp, d[i]);
 8011102:	69fb      	ldr	r3, [r7, #28]
 8011104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011106:	4413      	add	r3, r2
 8011108:	781b      	ldrb	r3, [r3, #0]
 801110a:	4619      	mov	r1, r3
 801110c:	6878      	ldr	r0, [r7, #4]
 801110e:	f7ff fe3d 	bl	8010d8c <ihm_getvar>
 8011112:	4603      	mov	r3, r0
 8011114:	82fb      	strh	r3, [r7, #22]
			write_snum(v16s, curfont);
 8011116:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801111a:	6a39      	ldr	r1, [r7, #32]
 801111c:	4618      	mov	r0, r3
 801111e:	f000 f919 	bl	8011354 <write_snum>
			break;
 8011122:	e08a      	b.n	801123a <disp_layout+0x472>
 8011124:	20005154 	.word	0x20005154
 8011128:	08018810 	.word	0x08018810
 801112c:	20000184 	.word	0x20000184
 8011130:	20000194 	.word	0x20000194
 8011134:	2000018c 	.word	0x2000018c
		case CODE_SVAL4:
			i++;
 8011138:	69fb      	ldr	r3, [r7, #28]
 801113a:	3301      	adds	r3, #1
 801113c:	61fb      	str	r3, [r7, #28]
			v16s = (int16_t) _GET_REG(numdisp, d[i]);
 801113e:	69fb      	ldr	r3, [r7, #28]
 8011140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011142:	4413      	add	r3, r2
 8011144:	781b      	ldrb	r3, [r3, #0]
 8011146:	4619      	mov	r1, r3
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	f7ff fe1f 	bl	8010d8c <ihm_getvar>
 801114e:	4603      	mov	r3, r0
 8011150:	82fb      	strh	r3, [r7, #22]
			write_snum4(v16s, curfont);
 8011152:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011156:	6a39      	ldr	r1, [r7, #32]
 8011158:	4618      	mov	r0, r3
 801115a:	f000 f939 	bl	80113d0 <write_snum4>
			break;
 801115e:	e06c      	b.n	801123a <disp_layout+0x472>
		case CODE_UVAL:
			i++;
 8011160:	69fb      	ldr	r3, [r7, #28]
 8011162:	3301      	adds	r3, #1
 8011164:	61fb      	str	r3, [r7, #28]
			v16u = _GET_REG(numdisp, d[i]);
 8011166:	69fb      	ldr	r3, [r7, #28]
 8011168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801116a:	4413      	add	r3, r2
 801116c:	781b      	ldrb	r3, [r3, #0]
 801116e:	4619      	mov	r1, r3
 8011170:	6878      	ldr	r0, [r7, #4]
 8011172:	f7ff fe0b 	bl	8010d8c <ihm_getvar>
 8011176:	4603      	mov	r3, r0
 8011178:	82bb      	strh	r3, [r7, #20]
			write_unum(v16u, curfont);
 801117a:	8abb      	ldrh	r3, [r7, #20]
 801117c:	6a39      	ldr	r1, [r7, #32]
 801117e:	4618      	mov	r0, r3
 8011180:	f000 f8d8 	bl	8011334 <write_unum>
			break;
 8011184:	e059      	b.n	801123a <disp_layout+0x472>
		case CODE_GRAPH_LEVEL:
			i++;
 8011186:	69fb      	ldr	r3, [r7, #28]
 8011188:	3301      	adds	r3, #1
 801118a:	61fb      	str	r3, [r7, #28]
			v16u = _GET_REG(numdisp, d[i]);
 801118c:	69fb      	ldr	r3, [r7, #28]
 801118e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011190:	4413      	add	r3, r2
 8011192:	781b      	ldrb	r3, [r3, #0]
 8011194:	4619      	mov	r1, r3
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	f7ff fdf8 	bl	8010d8c <ihm_getvar>
 801119c:	4603      	mov	r3, r0
 801119e:	82bb      	strh	r3, [r7, #20]
			write_bargraph(v16u, 0, 100);
 80111a0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80111a4:	2264      	movs	r2, #100	; 0x64
 80111a6:	2100      	movs	r1, #0
 80111a8:	4618      	mov	r0, r3
 80111aa:	f000 f94b 	bl	8011444 <write_bargraph>
			break;
 80111ae:	e044      	b.n	801123a <disp_layout+0x472>
		case CODE_GRAPH_SLEVEL:
			i++;
 80111b0:	69fb      	ldr	r3, [r7, #28]
 80111b2:	3301      	adds	r3, #1
 80111b4:	61fb      	str	r3, [r7, #28]
			v16s = _GET_REG(numdisp, d[i]);
 80111b6:	69fb      	ldr	r3, [r7, #28]
 80111b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111ba:	4413      	add	r3, r2
 80111bc:	781b      	ldrb	r3, [r3, #0]
 80111be:	4619      	mov	r1, r3
 80111c0:	6878      	ldr	r0, [r7, #4]
 80111c2:	f7ff fde3 	bl	8010d8c <ihm_getvar>
 80111c6:	4603      	mov	r3, r0
 80111c8:	82fb      	strh	r3, [r7, #22]
			write_sbargraph(v16s, -100, 100);
 80111ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80111ce:	2264      	movs	r2, #100	; 0x64
 80111d0:	f06f 0163 	mvn.w	r1, #99	; 0x63
 80111d4:	4618      	mov	r0, r3
 80111d6:	f000 f9a1 	bl	801151c <write_sbargraph>
			break;
 80111da:	e02e      	b.n	801123a <disp_layout+0x472>
		case CODE_TIM4_CNT: {
			extern TIM_HandleTypeDef htim4;
			v16u = htim4.Instance->CNT;
 80111dc:	4b29      	ldr	r3, [pc, #164]	; (8011284 <disp_layout+0x4bc>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111e2:	82bb      	strh	r3, [r7, #20]
			write_unum(v16u, curfont);
 80111e4:	8abb      	ldrh	r3, [r7, #20]
 80111e6:	6a39      	ldr	r1, [r7, #32]
 80111e8:	4618      	mov	r0, r3
 80111ea:	f000 f8a3 	bl	8011334 <write_unum>
			break;
 80111ee:	e024      	b.n	801123a <disp_layout+0x472>
		}
		case CODE_PROFILE:
			write_unum((int16_t)last_dur1, curfont);
 80111f0:	4b25      	ldr	r3, [pc, #148]	; (8011288 <disp_layout+0x4c0>)
 80111f2:	881b      	ldrh	r3, [r3, #0]
 80111f4:	6a39      	ldr	r1, [r7, #32]
 80111f6:	4618      	mov	r0, r3
 80111f8:	f000 f89c 	bl	8011334 <write_unum>
			ssd1306_WriteChar('/', *curfont, White);
 80111fc:	6a3a      	ldr	r2, [r7, #32]
 80111fe:	2301      	movs	r3, #1
 8011200:	ca06      	ldmia	r2, {r1, r2}
 8011202:	202f      	movs	r0, #47	; 0x2f
 8011204:	f7ff fabe 	bl	8010784 <ssd1306_WriteChar>
			write_unum((int16_t)last_dur2, curfont);
 8011208:	4b20      	ldr	r3, [pc, #128]	; (801128c <disp_layout+0x4c4>)
 801120a:	881b      	ldrh	r3, [r3, #0]
 801120c:	6a39      	ldr	r1, [r7, #32]
 801120e:	4618      	mov	r0, r3
 8011210:	f000 f890 	bl	8011334 <write_unum>
			break;
 8011214:	e011      	b.n	801123a <disp_layout+0x472>
		case CODE_DIR:
			i+=1;
 8011216:	69fb      	ldr	r3, [r7, #28]
 8011218:	3301      	adds	r3, #1
 801121a:	61fb      	str	r3, [r7, #28]
			break;
 801121c:	e00d      	b.n	801123a <disp_layout+0x472>


		default:
			switch (d[i] & 0xC0) {
 801121e:	69fb      	ldr	r3, [r7, #28]
 8011220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011222:	4413      	add	r3, r2
 8011224:	781b      	ldrb	r3, [r3, #0]
 8011226:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801122a:	2bc0      	cmp	r3, #192	; 0xc0
 801122c:	d000      	beq.n	8011230 <disp_layout+0x468>
			default:
			case 0x80: break;
 801122e:	e004      	b.n	801123a <disp_layout+0x472>
			case 0xC0: i++; break;
 8011230:	69fb      	ldr	r3, [r7, #28]
 8011232:	3301      	adds	r3, #1
 8011234:	61fb      	str	r3, [r7, #28]
 8011236:	e000      	b.n	801123a <disp_layout+0x472>
		case CODE_NOP: break;
 8011238:	bf00      	nop
	for (int i=0; i<MAX_OPCODE_PER_DISPLAY; i++) {
 801123a:	69fb      	ldr	r3, [r7, #28]
 801123c:	3301      	adds	r3, #1
 801123e:	61fb      	str	r3, [r7, #28]
 8011240:	69fb      	ldr	r3, [r7, #28]
 8011242:	2b17      	cmp	r3, #23
 8011244:	f77f addd 	ble.w	8010e02 <disp_layout+0x3a>
 8011248:	e000      	b.n	801124c <disp_layout+0x484>
		if (CODE_END == d[i]) break;
 801124a:	bf00      	nop
			//case 0xB0: i+=2; break;
			//case 0xD0: i+=4; break;
			}
		}
	}
	uint32_t t1 = HAL_GetTick();
 801124c:	f7f0 fe46 	bl	8001edc <HAL_GetTick>
 8011250:	60f8      	str	r0, [r7, #12]
	ssd1306_UpdateScreen();
 8011252:	f7ff fa11 	bl	8010678 <ssd1306_UpdateScreen>
	uint32_t t2 = HAL_GetTick();
 8011256:	f7f0 fe41 	bl	8001edc <HAL_GetTick>
 801125a:	60b8      	str	r0, [r7, #8]
	last_dur1 = t2-t0;
 801125c:	68bb      	ldr	r3, [r7, #8]
 801125e:	b29a      	uxth	r2, r3
 8011260:	69bb      	ldr	r3, [r7, #24]
 8011262:	b29b      	uxth	r3, r3
 8011264:	1ad3      	subs	r3, r2, r3
 8011266:	b29a      	uxth	r2, r3
 8011268:	4b07      	ldr	r3, [pc, #28]	; (8011288 <disp_layout+0x4c0>)
 801126a:	801a      	strh	r2, [r3, #0]
	last_dur2 = t2-t1;
 801126c:	68bb      	ldr	r3, [r7, #8]
 801126e:	b29a      	uxth	r2, r3
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	b29b      	uxth	r3, r3
 8011274:	1ad3      	subs	r3, r2, r3
 8011276:	b29a      	uxth	r2, r3
 8011278:	4b04      	ldr	r3, [pc, #16]	; (801128c <disp_layout+0x4c4>)
 801127a:	801a      	strh	r2, [r3, #0]
}
 801127c:	bf00      	nop
 801127e:	3728      	adds	r7, #40	; 0x28
 8011280:	46bd      	mov	sp, r7
 8011282:	bd80      	pop	{r7, pc}
 8011284:	20005c94 	.word	0x20005c94
 8011288:	20005178 	.word	0x20005178
 801128c:	2000517a 	.word	0x2000517a

08011290 <_write_unum>:
	}
}
*/

static void _write_unum(uint16_t v, FontDef *curfont, uint8_t hzero)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b086      	sub	sp, #24
 8011294:	af00      	add	r7, sp, #0
 8011296:	4603      	mov	r3, r0
 8011298:	6039      	str	r1, [r7, #0]
 801129a:	80fb      	strh	r3, [r7, #6]
 801129c:	4613      	mov	r3, r2
 801129e:	717b      	strb	r3, [r7, #5]
	int f = 0;
 80112a0:	2300      	movs	r3, #0
 80112a2:	617b      	str	r3, [r7, #20]
	for (int i=10000;i>0; i = i /10) {
 80112a4:	f242 7310 	movw	r3, #10000	; 0x2710
 80112a8:	613b      	str	r3, [r7, #16]
 80112aa:	e039      	b.n	8011320 <_write_unum+0x90>
		int n = v/i;
 80112ac:	88fa      	ldrh	r2, [r7, #6]
 80112ae:	693b      	ldr	r3, [r7, #16]
 80112b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80112b4:	60fb      	str	r3, [r7, #12]
		if (!n && !f && (i>1)) {
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d112      	bne.n	80112e2 <_write_unum+0x52>
 80112bc:	697b      	ldr	r3, [r7, #20]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d10f      	bne.n	80112e2 <_write_unum+0x52>
 80112c2:	693b      	ldr	r3, [r7, #16]
 80112c4:	2b01      	cmp	r3, #1
 80112c6:	dd0c      	ble.n	80112e2 <_write_unum+0x52>
			if (!hzero) continue;
 80112c8:	797b      	ldrb	r3, [r7, #5]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d01f      	beq.n	801130e <_write_unum+0x7e>
			if (hzero == ' ') {
 80112ce:	797b      	ldrb	r3, [r7, #5]
 80112d0:	2b20      	cmp	r3, #32
 80112d2:	d106      	bne.n	80112e2 <_write_unum+0x52>
				ssd1306_WriteChar(' ', *curfont, White);
 80112d4:	683a      	ldr	r2, [r7, #0]
 80112d6:	2301      	movs	r3, #1
 80112d8:	ca06      	ldmia	r2, {r1, r2}
 80112da:	2020      	movs	r0, #32
 80112dc:	f7ff fa52 	bl	8010784 <ssd1306_WriteChar>
				continue;
 80112e0:	e016      	b.n	8011310 <_write_unum+0x80>
			}
		}
		f = 1;
 80112e2:	2301      	movs	r3, #1
 80112e4:	617b      	str	r3, [r7, #20]
		ssd1306_WriteChar(n+'0', *curfont, White);
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	b2db      	uxtb	r3, r3
 80112ea:	3330      	adds	r3, #48	; 0x30
 80112ec:	b2d8      	uxtb	r0, r3
 80112ee:	683a      	ldr	r2, [r7, #0]
 80112f0:	2301      	movs	r3, #1
 80112f2:	ca06      	ldmia	r2, {r1, r2}
 80112f4:	f7ff fa46 	bl	8010784 <ssd1306_WriteChar>
		v = v - i*n;
 80112f8:	693b      	ldr	r3, [r7, #16]
 80112fa:	b29a      	uxth	r2, r3
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	b29b      	uxth	r3, r3
 8011300:	fb12 f303 	smulbb	r3, r2, r3
 8011304:	b29b      	uxth	r3, r3
 8011306:	88fa      	ldrh	r2, [r7, #6]
 8011308:	1ad3      	subs	r3, r2, r3
 801130a:	80fb      	strh	r3, [r7, #6]
 801130c:	e000      	b.n	8011310 <_write_unum+0x80>
			if (!hzero) continue;
 801130e:	bf00      	nop
	for (int i=10000;i>0; i = i /10) {
 8011310:	693b      	ldr	r3, [r7, #16]
 8011312:	4a07      	ldr	r2, [pc, #28]	; (8011330 <_write_unum+0xa0>)
 8011314:	fb82 1203 	smull	r1, r2, r2, r3
 8011318:	1092      	asrs	r2, r2, #2
 801131a:	17db      	asrs	r3, r3, #31
 801131c:	1ad3      	subs	r3, r2, r3
 801131e:	613b      	str	r3, [r7, #16]
 8011320:	693b      	ldr	r3, [r7, #16]
 8011322:	2b00      	cmp	r3, #0
 8011324:	dcc2      	bgt.n	80112ac <_write_unum+0x1c>
	}
}
 8011326:	bf00      	nop
 8011328:	3718      	adds	r7, #24
 801132a:	46bd      	mov	sp, r7
 801132c:	bd80      	pop	{r7, pc}
 801132e:	bf00      	nop
 8011330:	66666667 	.word	0x66666667

08011334 <write_unum>:
static void write_unum(uint16_t v, FontDef *curfont)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b082      	sub	sp, #8
 8011338:	af00      	add	r7, sp, #0
 801133a:	4603      	mov	r3, r0
 801133c:	6039      	str	r1, [r7, #0]
 801133e:	80fb      	strh	r3, [r7, #6]
	_write_unum(v, curfont, 0);
 8011340:	88fb      	ldrh	r3, [r7, #6]
 8011342:	2200      	movs	r2, #0
 8011344:	6839      	ldr	r1, [r7, #0]
 8011346:	4618      	mov	r0, r3
 8011348:	f7ff ffa2 	bl	8011290 <_write_unum>
}
 801134c:	bf00      	nop
 801134e:	3708      	adds	r7, #8
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}

08011354 <write_snum>:
static void write_snum(int16_t v, FontDef *curfont)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b082      	sub	sp, #8
 8011358:	af00      	add	r7, sp, #0
 801135a:	4603      	mov	r3, r0
 801135c:	6039      	str	r1, [r7, #0]
 801135e:	80fb      	strh	r3, [r7, #6]
	if ((v<-5000)||(v>5000)) {
 8011360:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011364:	4a17      	ldr	r2, [pc, #92]	; (80113c4 <write_snum+0x70>)
 8011366:	4293      	cmp	r3, r2
 8011368:	db05      	blt.n	8011376 <write_snum+0x22>
 801136a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801136e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011372:	4293      	cmp	r3, r2
 8011374:	dd06      	ble.n	8011384 <write_snum+0x30>
		itm_debug1(DBG_UI|DBG_ERR, "strange here", v);
 8011376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801137a:	461a      	mov	r2, r3
 801137c:	4912      	ldr	r1, [pc, #72]	; (80113c8 <write_snum+0x74>)
 801137e:	4813      	ldr	r0, [pc, #76]	; (80113cc <write_snum+0x78>)
 8011380:	f7ff fc9a 	bl	8010cb8 <itm_debug1>
	}
	if (v < 0) {
 8011384:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011388:	2b00      	cmp	r3, #0
 801138a:	da06      	bge.n	801139a <write_snum+0x46>
		ssd1306_WriteChar('-', *curfont, White);
 801138c:	683a      	ldr	r2, [r7, #0]
 801138e:	2301      	movs	r3, #1
 8011390:	ca06      	ldmia	r2, {r1, r2}
 8011392:	202d      	movs	r0, #45	; 0x2d
 8011394:	f7ff f9f6 	bl	8010784 <ssd1306_WriteChar>
 8011398:	e005      	b.n	80113a6 <write_snum+0x52>
	} else {
		ssd1306_WriteChar('+', *curfont, White);
 801139a:	683a      	ldr	r2, [r7, #0]
 801139c:	2301      	movs	r3, #1
 801139e:	ca06      	ldmia	r2, {r1, r2}
 80113a0:	202b      	movs	r0, #43	; 0x2b
 80113a2:	f7ff f9ef 	bl	8010784 <ssd1306_WriteChar>
	}
	write_unum(abs(v), curfont);
 80113a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	bfb8      	it	lt
 80113ae:	425b      	neglt	r3, r3
 80113b0:	b29b      	uxth	r3, r3
 80113b2:	6839      	ldr	r1, [r7, #0]
 80113b4:	4618      	mov	r0, r3
 80113b6:	f7ff ffbd 	bl	8011334 <write_unum>
}
 80113ba:	bf00      	nop
 80113bc:	3708      	adds	r7, #8
 80113be:	46bd      	mov	sp, r7
 80113c0:	bd80      	pop	{r7, pc}
 80113c2:	bf00      	nop
 80113c4:	ffffec78 	.word	0xffffec78
 80113c8:	08016d18 	.word	0x08016d18
 80113cc:	80000800 	.word	0x80000800

080113d0 <write_snum4>:

static void write_snum4(int16_t v, FontDef *curfont)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b082      	sub	sp, #8
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	4603      	mov	r3, r0
 80113d8:	6039      	str	r1, [r7, #0]
 80113da:	80fb      	strh	r3, [r7, #6]
	if (v<-9999) v=-9999;
 80113dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80113e0:	4a17      	ldr	r2, [pc, #92]	; (8011440 <write_snum4+0x70>)
 80113e2:	4293      	cmp	r3, r2
 80113e4:	da02      	bge.n	80113ec <write_snum4+0x1c>
 80113e6:	f64d 03f1 	movw	r3, #55537	; 0xd8f1
 80113ea:	80fb      	strh	r3, [r7, #6]
	if (v>9999) v=9999;
 80113ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80113f0:	f242 720f 	movw	r2, #9999	; 0x270f
 80113f4:	4293      	cmp	r3, r2
 80113f6:	dd02      	ble.n	80113fe <write_snum4+0x2e>
 80113f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80113fc:	80fb      	strh	r3, [r7, #6]
	if (v < 0) {
 80113fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011402:	2b00      	cmp	r3, #0
 8011404:	da06      	bge.n	8011414 <write_snum4+0x44>
		ssd1306_WriteChar('-', *curfont, White);
 8011406:	683a      	ldr	r2, [r7, #0]
 8011408:	2301      	movs	r3, #1
 801140a:	ca06      	ldmia	r2, {r1, r2}
 801140c:	202d      	movs	r0, #45	; 0x2d
 801140e:	f7ff f9b9 	bl	8010784 <ssd1306_WriteChar>
 8011412:	e005      	b.n	8011420 <write_snum4+0x50>
	} else {
		ssd1306_WriteChar('+', *curfont, White);
 8011414:	683a      	ldr	r2, [r7, #0]
 8011416:	2301      	movs	r3, #1
 8011418:	ca06      	ldmia	r2, {r1, r2}
 801141a:	202b      	movs	r0, #43	; 0x2b
 801141c:	f7ff f9b2 	bl	8010784 <ssd1306_WriteChar>
	}
	_write_unum(abs(v), curfont,1);
 8011420:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011424:	2b00      	cmp	r3, #0
 8011426:	bfb8      	it	lt
 8011428:	425b      	neglt	r3, r3
 801142a:	b29b      	uxth	r3, r3
 801142c:	2201      	movs	r2, #1
 801142e:	6839      	ldr	r1, [r7, #0]
 8011430:	4618      	mov	r0, r3
 8011432:	f7ff ff2d 	bl	8011290 <_write_unum>
}
 8011436:	bf00      	nop
 8011438:	3708      	adds	r7, #8
 801143a:	46bd      	mov	sp, r7
 801143c:	bd80      	pop	{r7, pc}
 801143e:	bf00      	nop
 8011440:	ffffd8f1 	.word	0xffffd8f1

08011444 <write_bargraph>:

static void write_bargraph(int16_t v, int16_t min, int16_t max)
{
 8011444:	b590      	push	{r4, r7, lr}
 8011446:	b087      	sub	sp, #28
 8011448:	af02      	add	r7, sp, #8
 801144a:	4603      	mov	r3, r0
 801144c:	80fb      	strh	r3, [r7, #6]
 801144e:	460b      	mov	r3, r1
 8011450:	80bb      	strh	r3, [r7, #4]
 8011452:	4613      	mov	r3, r2
 8011454:	807b      	strh	r3, [r7, #2]
	uint8_t x0 = ssd1306_GetCursorX();
 8011456:	f7ff fa5b 	bl	8010910 <ssd1306_GetCursorX>
 801145a:	4603      	mov	r3, r0
 801145c:	73fb      	strb	r3, [r7, #15]
	uint8_t y0 = ssd1306_GetCursorY();
 801145e:	f7ff fa63 	bl	8010928 <ssd1306_GetCursorY>
 8011462:	4603      	mov	r3, r0
 8011464:	73bb      	strb	r3, [r7, #14]
	const uint8_t w = 50;
 8011466:	2332      	movs	r3, #50	; 0x32
 8011468:	737b      	strb	r3, [r7, #13]
	const uint8_t h = 11; //y0+=3;
 801146a:	230b      	movs	r3, #11
 801146c:	733b      	strb	r3, [r7, #12]
	ssd1306_DrawRectangle(x0, y0, x0+w, y0+h, White);
 801146e:	7bfa      	ldrb	r2, [r7, #15]
 8011470:	7b7b      	ldrb	r3, [r7, #13]
 8011472:	4413      	add	r3, r2
 8011474:	b2dc      	uxtb	r4, r3
 8011476:	7bba      	ldrb	r2, [r7, #14]
 8011478:	7b3b      	ldrb	r3, [r7, #12]
 801147a:	4413      	add	r3, r2
 801147c:	b2da      	uxtb	r2, r3
 801147e:	7bb9      	ldrb	r1, [r7, #14]
 8011480:	7bf8      	ldrb	r0, [r7, #15]
 8011482:	2301      	movs	r3, #1
 8011484:	9300      	str	r3, [sp, #0]
 8011486:	4613      	mov	r3, r2
 8011488:	4622      	mov	r2, r4
 801148a:	f7ff fac5 	bl	8010a18 <ssd1306_DrawRectangle>

	if (v>max) v=max;
 801148e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011492:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011496:	429a      	cmp	r2, r3
 8011498:	dd01      	ble.n	801149e <write_bargraph+0x5a>
 801149a:	887b      	ldrh	r3, [r7, #2]
 801149c:	80fb      	strh	r3, [r7, #6]
	if (v<min) v=min;
 801149e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80114a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80114a6:	429a      	cmp	r2, r3
 80114a8:	da01      	bge.n	80114ae <write_bargraph+0x6a>
 80114aa:	88bb      	ldrh	r3, [r7, #4]
 80114ac:	80fb      	strh	r3, [r7, #6]
	int l = ((int)w*(v-min))/(max-min);
 80114ae:	7b7b      	ldrb	r3, [r7, #13]
 80114b0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80114b4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80114b8:	1a8a      	subs	r2, r1, r2
 80114ba:	fb02 f203 	mul.w	r2, r2, r3
 80114be:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80114c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80114c6:	1acb      	subs	r3, r1, r3
 80114c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80114cc:	60bb      	str	r3, [r7, #8]
	if (l>0) ssd1306_FillZone(x0, y0, l, h, White);
 80114ce:	68bb      	ldr	r3, [r7, #8]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	dd09      	ble.n	80114e8 <write_bargraph+0xa4>
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	b2da      	uxtb	r2, r3
 80114d8:	7b3c      	ldrb	r4, [r7, #12]
 80114da:	7bb9      	ldrb	r1, [r7, #14]
 80114dc:	7bf8      	ldrb	r0, [r7, #15]
 80114de:	2301      	movs	r3, #1
 80114e0:	9300      	str	r3, [sp, #0]
 80114e2:	4623      	mov	r3, r4
 80114e4:	f7ff f83a 	bl	801055c <ssd1306_FillZone>
	if ((min<0) && (max>0)) {
 80114e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	da11      	bge.n	8011514 <write_bargraph+0xd0>
 80114f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	dd0d      	ble.n	8011514 <write_bargraph+0xd0>
		l = ((int)w*(0-min))/(max-min);
 80114f8:	7b7b      	ldrb	r3, [r7, #13]
 80114fa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80114fe:	4252      	negs	r2, r2
 8011500:	fb02 f203 	mul.w	r2, r2, r3
 8011504:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8011508:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801150c:	1acb      	subs	r3, r1, r3
 801150e:	fb92 f3f3 	sdiv	r3, r2, r3
 8011512:	60bb      	str	r3, [r7, #8]
		/// TODO ?
	}
}
 8011514:	bf00      	nop
 8011516:	3714      	adds	r7, #20
 8011518:	46bd      	mov	sp, r7
 801151a:	bd90      	pop	{r4, r7, pc}

0801151c <write_sbargraph>:



static void write_sbargraph(int16_t v, int16_t min, int16_t max)
{
 801151c:	b590      	push	{r4, r7, lr}
 801151e:	b089      	sub	sp, #36	; 0x24
 8011520:	af02      	add	r7, sp, #8
 8011522:	4603      	mov	r3, r0
 8011524:	80fb      	strh	r3, [r7, #6]
 8011526:	460b      	mov	r3, r1
 8011528:	80bb      	strh	r3, [r7, #4]
 801152a:	4613      	mov	r3, r2
 801152c:	807b      	strh	r3, [r7, #2]
	uint8_t x0 = ssd1306_GetCursorX();
 801152e:	f7ff f9ef 	bl	8010910 <ssd1306_GetCursorX>
 8011532:	4603      	mov	r3, r0
 8011534:	75fb      	strb	r3, [r7, #23]
	uint8_t y0 = ssd1306_GetCursorY();
 8011536:	f7ff f9f7 	bl	8010928 <ssd1306_GetCursorY>
 801153a:	4603      	mov	r3, r0
 801153c:	75bb      	strb	r3, [r7, #22]
	const uint8_t w = 50;
 801153e:	2332      	movs	r3, #50	; 0x32
 8011540:	757b      	strb	r3, [r7, #21]
	const uint8_t h = 11; //y0+=3;
 8011542:	230b      	movs	r3, #11
 8011544:	753b      	strb	r3, [r7, #20]
	ssd1306_DrawRectangle(x0, y0, x0+w, y0+h, White);
 8011546:	7dfa      	ldrb	r2, [r7, #23]
 8011548:	7d7b      	ldrb	r3, [r7, #21]
 801154a:	4413      	add	r3, r2
 801154c:	b2dc      	uxtb	r4, r3
 801154e:	7dba      	ldrb	r2, [r7, #22]
 8011550:	7d3b      	ldrb	r3, [r7, #20]
 8011552:	4413      	add	r3, r2
 8011554:	b2da      	uxtb	r2, r3
 8011556:	7db9      	ldrb	r1, [r7, #22]
 8011558:	7df8      	ldrb	r0, [r7, #23]
 801155a:	2301      	movs	r3, #1
 801155c:	9300      	str	r3, [sp, #0]
 801155e:	4613      	mov	r3, r2
 8011560:	4622      	mov	r2, r4
 8011562:	f7ff fa59 	bl	8010a18 <ssd1306_DrawRectangle>

	if (v>max) v=max;
 8011566:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801156a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801156e:	429a      	cmp	r2, r3
 8011570:	dd01      	ble.n	8011576 <write_sbargraph+0x5a>
 8011572:	887b      	ldrh	r3, [r7, #2]
 8011574:	80fb      	strh	r3, [r7, #6]
	if (v<min) v=min;
 8011576:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801157a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801157e:	429a      	cmp	r2, r3
 8011580:	da01      	bge.n	8011586 <write_sbargraph+0x6a>
 8011582:	88bb      	ldrh	r3, [r7, #4]
 8011584:	80fb      	strh	r3, [r7, #6]
	int m = ((int)w*(0-min))/(max-min);
 8011586:	7d7b      	ldrb	r3, [r7, #21]
 8011588:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801158c:	4252      	negs	r2, r2
 801158e:	fb02 f203 	mul.w	r2, r2, r3
 8011592:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8011596:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801159a:	1acb      	subs	r3, r1, r3
 801159c:	fb92 f3f3 	sdiv	r3, r2, r3
 80115a0:	613b      	str	r3, [r7, #16]
	int l = ((int)w*(v-min))/(max-min);
 80115a2:	7d7b      	ldrb	r3, [r7, #21]
 80115a4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80115a8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80115ac:	1a8a      	subs	r2, r1, r2
 80115ae:	fb02 f203 	mul.w	r2, r2, r3
 80115b2:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80115b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80115ba:	1acb      	subs	r3, r1, r3
 80115bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80115c0:	60fb      	str	r3, [r7, #12]
	if (l>m) ssd1306_FillZone(x0+m, y0, l-m, h, White);
 80115c2:	68fa      	ldr	r2, [r7, #12]
 80115c4:	693b      	ldr	r3, [r7, #16]
 80115c6:	429a      	cmp	r2, r3
 80115c8:	dd12      	ble.n	80115f0 <write_sbargraph+0xd4>
 80115ca:	693b      	ldr	r3, [r7, #16]
 80115cc:	b2da      	uxtb	r2, r3
 80115ce:	7dfb      	ldrb	r3, [r7, #23]
 80115d0:	4413      	add	r3, r2
 80115d2:	b2d8      	uxtb	r0, r3
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	b2da      	uxtb	r2, r3
 80115d8:	693b      	ldr	r3, [r7, #16]
 80115da:	b2db      	uxtb	r3, r3
 80115dc:	1ad3      	subs	r3, r2, r3
 80115de:	b2da      	uxtb	r2, r3
 80115e0:	7d3c      	ldrb	r4, [r7, #20]
 80115e2:	7db9      	ldrb	r1, [r7, #22]
 80115e4:	2301      	movs	r3, #1
 80115e6:	9300      	str	r3, [sp, #0]
 80115e8:	4623      	mov	r3, r4
 80115ea:	f7fe ffb7 	bl	801055c <ssd1306_FillZone>
 80115ee:	e011      	b.n	8011614 <write_sbargraph+0xf8>
	else ssd1306_FillZone(x0+l, y0, m-l, h, White);
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	b2da      	uxtb	r2, r3
 80115f4:	7dfb      	ldrb	r3, [r7, #23]
 80115f6:	4413      	add	r3, r2
 80115f8:	b2d8      	uxtb	r0, r3
 80115fa:	693b      	ldr	r3, [r7, #16]
 80115fc:	b2da      	uxtb	r2, r3
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	b2db      	uxtb	r3, r3
 8011602:	1ad3      	subs	r3, r2, r3
 8011604:	b2da      	uxtb	r2, r3
 8011606:	7d3c      	ldrb	r4, [r7, #20]
 8011608:	7db9      	ldrb	r1, [r7, #22]
 801160a:	2301      	movs	r3, #1
 801160c:	9300      	str	r3, [sp, #0]
 801160e:	4623      	mov	r3, r4
 8011610:	f7fe ffa4 	bl	801055c <ssd1306_FillZone>
	ssd1306_Line(x0+m, y0-1, x0+m, y0+h+2, White);
 8011614:	693b      	ldr	r3, [r7, #16]
 8011616:	b2da      	uxtb	r2, r3
 8011618:	7dfb      	ldrb	r3, [r7, #23]
 801161a:	4413      	add	r3, r2
 801161c:	b2d8      	uxtb	r0, r3
 801161e:	7dbb      	ldrb	r3, [r7, #22]
 8011620:	3b01      	subs	r3, #1
 8011622:	b2d9      	uxtb	r1, r3
 8011624:	693b      	ldr	r3, [r7, #16]
 8011626:	b2da      	uxtb	r2, r3
 8011628:	7dfb      	ldrb	r3, [r7, #23]
 801162a:	4413      	add	r3, r2
 801162c:	b2dc      	uxtb	r4, r3
 801162e:	7dba      	ldrb	r2, [r7, #22]
 8011630:	7d3b      	ldrb	r3, [r7, #20]
 8011632:	4413      	add	r3, r2
 8011634:	b2db      	uxtb	r3, r3
 8011636:	3302      	adds	r3, #2
 8011638:	b2da      	uxtb	r2, r3
 801163a:	2301      	movs	r3, #1
 801163c:	9300      	str	r3, [sp, #0]
 801163e:	4613      	mov	r3, r2
 8011640:	4622      	mov	r2, r4
 8011642:	f7ff f97d 	bl	8010940 <ssd1306_Line>
	if ((min<0) && (max>0)) {
 8011646:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801164a:	2b00      	cmp	r3, #0
 801164c:	da11      	bge.n	8011672 <write_sbargraph+0x156>
 801164e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011652:	2b00      	cmp	r3, #0
 8011654:	dd0d      	ble.n	8011672 <write_sbargraph+0x156>
		l = ((int)w*(0-min))/(max-min);
 8011656:	7d7b      	ldrb	r3, [r7, #21]
 8011658:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801165c:	4252      	negs	r2, r2
 801165e:	fb02 f203 	mul.w	r2, r2, r3
 8011662:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8011666:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801166a:	1acb      	subs	r3, r1, r3
 801166c:	fb92 f3f3 	sdiv	r3, r2, r3
 8011670:	60fb      	str	r3, [r7, #12]
		/// TODO
	}
}
 8011672:	bf00      	nop
 8011674:	371c      	adds	r7, #28
 8011676:	46bd      	mov	sp, r7
 8011678:	bd90      	pop	{r4, r7, pc}
	...

0801167c <itm_debug1>:
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b086      	sub	sp, #24
 8011680:	af02      	add	r7, sp, #8
 8011682:	60f8      	str	r0, [r7, #12]
 8011684:	60b9      	str	r1, [r7, #8]
 8011686:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8011688:	4b08      	ldr	r3, [pc, #32]	; (80116ac <itm_debug1+0x30>)
 801168a:	681a      	ldr	r2, [r3, #0]
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	4013      	ands	r3, r2
 8011690:	2b00      	cmp	r3, #0
 8011692:	d007      	beq.n	80116a4 <itm_debug1+0x28>
 8011694:	2301      	movs	r3, #1
 8011696:	9300      	str	r3, [sp, #0]
 8011698:	2300      	movs	r3, #0
 801169a:	2200      	movs	r2, #0
 801169c:	6879      	ldr	r1, [r7, #4]
 801169e:	68b8      	ldr	r0, [r7, #8]
 80116a0:	f004 ff4a 	bl	8016538 <_itm_debug3>
}
 80116a4:	bf00      	nop
 80116a6:	3710      	adds	r7, #16
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}
 80116ac:	20000538 	.word	0x20000538

080116b0 <itm_debug2>:
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b086      	sub	sp, #24
 80116b4:	af02      	add	r7, sp, #8
 80116b6:	60f8      	str	r0, [r7, #12]
 80116b8:	60b9      	str	r1, [r7, #8]
 80116ba:	607a      	str	r2, [r7, #4]
 80116bc:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 80116be:	4b09      	ldr	r3, [pc, #36]	; (80116e4 <itm_debug2+0x34>)
 80116c0:	681a      	ldr	r2, [r3, #0]
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	4013      	ands	r3, r2
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d007      	beq.n	80116da <itm_debug2+0x2a>
 80116ca:	2302      	movs	r3, #2
 80116cc:	9300      	str	r3, [sp, #0]
 80116ce:	2300      	movs	r3, #0
 80116d0:	683a      	ldr	r2, [r7, #0]
 80116d2:	6879      	ldr	r1, [r7, #4]
 80116d4:	68b8      	ldr	r0, [r7, #8]
 80116d6:	f004 ff2f 	bl	8016538 <_itm_debug3>
}
 80116da:	bf00      	nop
 80116dc:	3710      	adds	r7, #16
 80116de:	46bd      	mov	sp, r7
 80116e0:	bd80      	pop	{r7, pc}
 80116e2:	bf00      	nop
 80116e4:	20000538 	.word	0x20000538

080116e8 <mqf_read_to_ui>:

LFMQUEUE_DEF_H(to_forward_usb, msg_64_t)
LFMQUEUE_DEF_H(from_forward_usb, msg_64_t)


LFMQUEUE_DEF_H(to_ui, msg_64_t)
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b082      	sub	sp, #8
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
 80116f0:	6879      	ldr	r1, [r7, #4]
 80116f2:	4804      	ldr	r0, [pc, #16]	; (8011704 <mqf_read_to_ui+0x1c>)
 80116f4:	f005 f8a0 	bl	8016838 <mqf_read>
 80116f8:	4603      	mov	r3, r0
 80116fa:	4618      	mov	r0, r3
 80116fc:	3708      	adds	r7, #8
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}
 8011702:	bf00      	nop
 8011704:	20000514 	.word	0x20000514

08011708 <mqf_write_from_ui>:
LFMQUEUE_DEF_H(from_ui, msg_64_t)
 8011708:	b580      	push	{r7, lr}
 801170a:	b082      	sub	sp, #8
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
 8011710:	6879      	ldr	r1, [r7, #4]
 8011712:	4804      	ldr	r0, [pc, #16]	; (8011724 <mqf_write_from_ui+0x1c>)
 8011714:	f005 f816 	bl	8016744 <mqf_write>
 8011718:	4603      	mov	r3, r0
 801171a:	4618      	mov	r0, r3
 801171c:	3708      	adds	r7, #8
 801171e:	46bd      	mov	sp, r7
 8011720:	bd80      	pop	{r7, pc}
 8011722:	bf00      	nop
 8011724:	20000520 	.word	0x20000520

08011728 <get_srotary>:
	return ((p<<ENC_MUL2)>>ENC_DIV2);//>>1;
}


static int16_t get_srotary(TIM_HandleTypeDef *ptdef)
{
 8011728:	b480      	push	{r7}
 801172a:	b085      	sub	sp, #20
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
	int16_t p = __HAL_TIM_GET_COUNTER(ptdef);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011736:	81fb      	strh	r3, [r7, #14]
	if (p<-ENC_MAX-MIDDLE_ZERO) {
 8011738:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801173c:	f113 0f36 	cmn.w	r3, #54	; 0x36
 8011740:	da08      	bge.n	8011754 <get_srotary+0x2c>
		p = -ENC_MAX-MIDDLE_ZERO;
 8011742:	f64f 73ca 	movw	r3, #65482	; 0xffca
 8011746:	81fb      	strh	r3, [r7, #14]
		__HAL_TIM_SET_COUNTER(ptdef, p);
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011750:	625a      	str	r2, [r3, #36]	; 0x24
 8011752:	e00a      	b.n	801176a <get_srotary+0x42>
	} else if (p>=ENC_MAX+MIDDLE_ZERO) {
 8011754:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011758:	2b35      	cmp	r3, #53	; 0x35
 801175a:	dd06      	ble.n	801176a <get_srotary+0x42>
		p=ENC_MAX+MIDDLE_ZERO;
 801175c:	2336      	movs	r3, #54	; 0x36
 801175e:	81fb      	strh	r3, [r7, #14]
		__HAL_TIM_SET_COUNTER(ptdef, p);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011768:	625a      	str	r2, [r3, #36]	; 0x24
	}
	if (abs(p)<MIDDLE_ZERO) p=0;
 801176a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801176e:	f113 0f03 	cmn.w	r3, #3
 8011772:	db06      	blt.n	8011782 <get_srotary+0x5a>
 8011774:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011778:	2b03      	cmp	r3, #3
 801177a:	dc02      	bgt.n	8011782 <get_srotary+0x5a>
 801177c:	2300      	movs	r3, #0
 801177e:	81fb      	strh	r3, [r7, #14]
 8011780:	e00c      	b.n	801179c <get_srotary+0x74>
	else if (p>0) p=p-MIDDLE_ZERO;
 8011782:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011786:	2b00      	cmp	r3, #0
 8011788:	dd04      	ble.n	8011794 <get_srotary+0x6c>
 801178a:	89fb      	ldrh	r3, [r7, #14]
 801178c:	3b04      	subs	r3, #4
 801178e:	b29b      	uxth	r3, r3
 8011790:	81fb      	strh	r3, [r7, #14]
 8011792:	e003      	b.n	801179c <get_srotary+0x74>
	else p=p+MIDDLE_ZERO;
 8011794:	89fb      	ldrh	r3, [r7, #14]
 8011796:	3304      	adds	r3, #4
 8011798:	b29b      	uxth	r3, r3
 801179a:	81fb      	strh	r3, [r7, #14]
	return ((p<<ENC_MUL2)>>ENC_DIV2);//>>1;
 801179c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80117a0:	005b      	lsls	r3, r3, #1
 80117a2:	b21b      	sxth	r3, r3
}
 80117a4:	4618      	mov	r0, r3
 80117a6:	3714      	adds	r7, #20
 80117a8:	46bd      	mov	sp, r7
 80117aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ae:	4770      	bx	lr

080117b0 <ihm_runtick>:
static void ui_process_msg(void);

static int ihm_mode = 0;

void ihm_runtick(void)
{
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b088      	sub	sp, #32
 80117b4:	af00      	add	r7, sp, #0
	static int cnt=0;
	static int first = 0;
	if (!first) {
 80117b6:	4b71      	ldr	r3, [pc, #452]	; (801197c <ihm_runtick+0x1cc>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d12d      	bne.n	801181a <ihm_runtick+0x6a>
		first = 1;
 80117be:	4b6f      	ldr	r3, [pc, #444]	; (801197c <ihm_runtick+0x1cc>)
 80117c0:	2201      	movs	r2, #1
 80117c2:	601a      	str	r2, [r3, #0]
		itm_debug1(DBG_UI, "UI init", 0);
 80117c4:	2200      	movs	r2, #0
 80117c6:	496e      	ldr	r1, [pc, #440]	; (8011980 <ihm_runtick+0x1d0>)
 80117c8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80117cc:	f7ff ff56 	bl	801167c <itm_debug1>
		switch(ihm_mode) {
 80117d0:	4b6c      	ldr	r3, [pc, #432]	; (8011984 <ihm_runtick+0x1d4>)
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	2b01      	cmp	r3, #1
 80117d6:	d008      	beq.n	80117ea <ihm_runtick+0x3a>
 80117d8:	2b02      	cmp	r3, #2
 80117da:	d00b      	beq.n	80117f4 <ihm_runtick+0x44>
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d10e      	bne.n	80117fe <ihm_runtick+0x4e>
		case 0:
			ihm_setlayout(0, LAYOUT_MANUAL);
 80117e0:	2101      	movs	r1, #1
 80117e2:	2000      	movs	r0, #0
 80117e4:	f7ff fa82 	bl	8010cec <ihm_setlayout>
			break;
 80117e8:	e009      	b.n	80117fe <ihm_runtick+0x4e>
		case 1:
			ihm_setlayout(0, LAYOUT_INA3221_DETECT);
 80117ea:	21c8      	movs	r1, #200	; 0xc8
 80117ec:	2000      	movs	r0, #0
 80117ee:	f7ff fa7d 	bl	8010cec <ihm_setlayout>
			break;
 80117f2:	e004      	b.n	80117fe <ihm_runtick+0x4e>
		case 2:
			ihm_setlayout(0, LAYOUT_INA3221_VAL);
 80117f4:	21c9      	movs	r1, #201	; 0xc9
 80117f6:	2000      	movs	r0, #0
 80117f8:	f7ff fa78 	bl	8010cec <ihm_setlayout>
			break;
 80117fc:	bf00      	nop
		}
		for (int i = 0; i<DISP_MAX_REGS; i++) {
 80117fe:	2300      	movs	r3, #0
 8011800:	61fb      	str	r3, [r7, #28]
 8011802:	e007      	b.n	8011814 <ihm_runtick+0x64>
			ihm_setvar(0, i, 0);
 8011804:	2200      	movs	r2, #0
 8011806:	69f9      	ldr	r1, [r7, #28]
 8011808:	2000      	movs	r0, #0
 801180a:	f7ff fa9f 	bl	8010d4c <ihm_setvar>
		for (int i = 0; i<DISP_MAX_REGS; i++) {
 801180e:	69fb      	ldr	r3, [r7, #28]
 8011810:	3301      	adds	r3, #1
 8011812:	61fb      	str	r3, [r7, #28]
 8011814:	69fb      	ldr	r3, [r7, #28]
 8011816:	2b0f      	cmp	r3, #15
 8011818:	ddf4      	ble.n	8011804 <ihm_runtick+0x54>
		}
	}
	itm_debug1(DBG_UI, "UI tick", 0);
 801181a:	2200      	movs	r2, #0
 801181c:	495a      	ldr	r1, [pc, #360]	; (8011988 <ihm_runtick+0x1d8>)
 801181e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011822:	f7ff ff2b 	bl	801167c <itm_debug1>

	needsrefresh_mask = 0;
 8011826:	4b59      	ldr	r3, [pc, #356]	; (801198c <ihm_runtick+0x1dc>)
 8011828:	2200      	movs	r2, #0
 801182a:	701a      	strb	r2, [r3, #0]
	// scan rotary encoder -----------
	for (int i=0; i<MAX_ROTARY; i++) {
 801182c:	2300      	movs	r3, #0
 801182e:	61bb      	str	r3, [r7, #24]
 8011830:	e065      	b.n	80118fe <ihm_runtick+0x14e>
				m.v1u = rot_position[i];
				mqf_write_from_ui(&m);
			}
		}
#else
		int16_t p = get_srotary(&htim4);
 8011832:	4857      	ldr	r0, [pc, #348]	; (8011990 <ihm_runtick+0x1e0>)
 8011834:	f7ff ff78 	bl	8011728 <get_srotary>
 8011838:	4603      	mov	r3, r0
 801183a:	81fb      	strh	r3, [r7, #14]
		if (p != rot_position[i]) {
 801183c:	4a55      	ldr	r2, [pc, #340]	; (8011994 <ihm_runtick+0x1e4>)
 801183e:	69bb      	ldr	r3, [r7, #24]
 8011840:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8011844:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011848:	429a      	cmp	r2, r3
 801184a:	d055      	beq.n	80118f8 <ihm_runtick+0x148>
			// pos changed
			rot_position[i] = p;
 801184c:	4951      	ldr	r1, [pc, #324]	; (8011994 <ihm_runtick+0x1e4>)
 801184e:	69bb      	ldr	r3, [r7, #24]
 8011850:	89fa      	ldrh	r2, [r7, #14]
 8011852:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			if (ihm_mode==0) {
 8011856:	4b4b      	ldr	r3, [pc, #300]	; (8011984 <ihm_runtick+0x1d4>)
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d10f      	bne.n	801187e <ihm_runtick+0xce>
				ihm_setvar(0, 1, (uint16_t) rot_position[0]);
 801185e:	4b4d      	ldr	r3, [pc, #308]	; (8011994 <ihm_runtick+0x1e4>)
 8011860:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011864:	b29b      	uxth	r3, r3
 8011866:	461a      	mov	r2, r3
 8011868:	2101      	movs	r1, #1
 801186a:	2000      	movs	r0, #0
 801186c:	f7ff fa6e 	bl	8010d4c <ihm_setvar>
				//ihm_setvar(0, 1, ((int)rot0_position - 50));
				SET_NEEDSREFRESH(0);
 8011870:	4b46      	ldr	r3, [pc, #280]	; (801198c <ihm_runtick+0x1dc>)
 8011872:	781b      	ldrb	r3, [r3, #0]
 8011874:	f043 0301 	orr.w	r3, r3, #1
 8011878:	b2da      	uxtb	r2, r3
 801187a:	4b44      	ldr	r3, [pc, #272]	; (801198c <ihm_runtick+0x1dc>)
 801187c:	701a      	strb	r2, [r3, #0]
			}
			if (drive_mode[i]) {
 801187e:	4a46      	ldr	r2, [pc, #280]	; (8011998 <ihm_runtick+0x1e8>)
 8011880:	69bb      	ldr	r3, [r7, #24]
 8011882:	4413      	add	r3, r2
 8011884:	781b      	ldrb	r3, [r3, #0]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d036      	beq.n	80118f8 <ihm_runtick+0x148>
				msg_64_t m;
				m.from = MA_UI(i);
 801188a:	69bb      	ldr	r3, [r7, #24]
 801188c:	b25b      	sxtb	r3, r3
 801188e:	f003 031f 	and.w	r3, r3, #31
 8011892:	b25b      	sxtb	r3, r3
 8011894:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011898:	b25b      	sxtb	r3, r3
 801189a:	b2db      	uxtb	r3, r3
 801189c:	707b      	strb	r3, [r7, #1]
				m.to = MA_CONTROL_T(i);
 801189e:	69bb      	ldr	r3, [r7, #24]
 80118a0:	b25b      	sxtb	r3, r3
 80118a2:	f003 0307 	and.w	r3, r3, #7
 80118a6:	b25b      	sxtb	r3, r3
 80118a8:	f063 032f 	orn	r3, r3, #47	; 0x2f
 80118ac:	b25b      	sxtb	r3, r3
 80118ae:	b2db      	uxtb	r3, r3
 80118b0:	703b      	strb	r3, [r7, #0]
				m.cmd = CMD_MDRIVE_SPEED_DIR;
 80118b2:	2317      	movs	r3, #23
 80118b4:	70bb      	strb	r3, [r7, #2]
				m.v1u = abs(rot_position[i]);
 80118b6:	4a37      	ldr	r2, [pc, #220]	; (8011994 <ihm_runtick+0x1e4>)
 80118b8:	69bb      	ldr	r3, [r7, #24]
 80118ba:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	bfb8      	it	lt
 80118c2:	425b      	neglt	r3, r3
 80118c4:	b29b      	uxth	r3, r3
 80118c6:	80bb      	strh	r3, [r7, #4]
				m.v2 = SIGNOF0(rot_position[i]);
 80118c8:	4a32      	ldr	r2, [pc, #200]	; (8011994 <ihm_runtick+0x1e4>)
 80118ca:	69bb      	ldr	r3, [r7, #24]
 80118cc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	db0a      	blt.n	80118ea <ihm_runtick+0x13a>
 80118d4:	4a2f      	ldr	r2, [pc, #188]	; (8011994 <ihm_runtick+0x1e4>)
 80118d6:	69bb      	ldr	r3, [r7, #24]
 80118d8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	bfcc      	ite	gt
 80118e0:	2301      	movgt	r3, #1
 80118e2:	2300      	movle	r3, #0
 80118e4:	b2db      	uxtb	r3, r3
 80118e6:	b21b      	sxth	r3, r3
 80118e8:	e001      	b.n	80118ee <ihm_runtick+0x13e>
 80118ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80118ee:	80fb      	strh	r3, [r7, #6]
				// TODO handle dir
				mqf_write_from_ui(&m);
 80118f0:	463b      	mov	r3, r7
 80118f2:	4618      	mov	r0, r3
 80118f4:	f7ff ff08 	bl	8011708 <mqf_write_from_ui>
	for (int i=0; i<MAX_ROTARY; i++) {
 80118f8:	69bb      	ldr	r3, [r7, #24]
 80118fa:	3301      	adds	r3, #1
 80118fc:	61bb      	str	r3, [r7, #24]
 80118fe:	69bb      	ldr	r3, [r7, #24]
 8011900:	2b00      	cmp	r3, #0
 8011902:	dd96      	ble.n	8011832 <ihm_runtick+0x82>
	}

	// scan buttons ------------------

	// mode test hook
	if (ihm_mode==1) {
 8011904:	4b1f      	ldr	r3, [pc, #124]	; (8011984 <ihm_runtick+0x1d4>)
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	2b01      	cmp	r3, #1
 801190a:	d119      	bne.n	8011940 <ihm_runtick+0x190>
		// ina3221 detection
		for (int i=0; i<4; i++) {
 801190c:	2300      	movs	r3, #0
 801190e:	617b      	str	r3, [r7, #20]
 8011910:	e00c      	b.n	801192c <ihm_runtick+0x17c>
			ihm_setvar(0, i, ina3221_devices[i]);
 8011912:	4a22      	ldr	r2, [pc, #136]	; (801199c <ihm_runtick+0x1ec>)
 8011914:	697b      	ldr	r3, [r7, #20]
 8011916:	4413      	add	r3, r2
 8011918:	781b      	ldrb	r3, [r3, #0]
 801191a:	b29b      	uxth	r3, r3
 801191c:	461a      	mov	r2, r3
 801191e:	6979      	ldr	r1, [r7, #20]
 8011920:	2000      	movs	r0, #0
 8011922:	f7ff fa13 	bl	8010d4c <ihm_setvar>
		for (int i=0; i<4; i++) {
 8011926:	697b      	ldr	r3, [r7, #20]
 8011928:	3301      	adds	r3, #1
 801192a:	617b      	str	r3, [r7, #20]
 801192c:	697b      	ldr	r3, [r7, #20]
 801192e:	2b03      	cmp	r3, #3
 8011930:	ddef      	ble.n	8011912 <ihm_runtick+0x162>
		}
		SET_NEEDSREFRESH(0);
 8011932:	4b16      	ldr	r3, [pc, #88]	; (801198c <ihm_runtick+0x1dc>)
 8011934:	781b      	ldrb	r3, [r3, #0]
 8011936:	f043 0301 	orr.w	r3, r3, #1
 801193a:	b2da      	uxtb	r2, r3
 801193c:	4b13      	ldr	r3, [pc, #76]	; (801198c <ihm_runtick+0x1dc>)
 801193e:	701a      	strb	r2, [r3, #0]
	} else if (ihm_mode==2) {

	}
	// process messages --------------
	ui_process_msg();
 8011940:	f000 f82e 	bl	80119a0 <ui_process_msg>
		ihm_setvar(0, 1, -cnt);
		SET_NEEDSREFRESH(0);
		cnt++;
	}
	// update displays ---------------
	for (int i=0; i<MAX_DISP; i++) {
 8011944:	2300      	movs	r3, #0
 8011946:	613b      	str	r3, [r7, #16]
 8011948:	e010      	b.n	801196c <ihm_runtick+0x1bc>
		if (NEEDSREFRESH(i)) {
 801194a:	4b10      	ldr	r3, [pc, #64]	; (801198c <ihm_runtick+0x1dc>)
 801194c:	781b      	ldrb	r3, [r3, #0]
 801194e:	461a      	mov	r2, r3
 8011950:	693b      	ldr	r3, [r7, #16]
 8011952:	fa42 f303 	asr.w	r3, r2, r3
 8011956:	f003 0301 	and.w	r3, r3, #1
 801195a:	b2db      	uxtb	r3, r3
 801195c:	2b00      	cmp	r3, #0
 801195e:	d002      	beq.n	8011966 <ihm_runtick+0x1b6>
			disp_layout(i);
 8011960:	6938      	ldr	r0, [r7, #16]
 8011962:	f7ff fa31 	bl	8010dc8 <disp_layout>
	for (int i=0; i<MAX_DISP; i++) {
 8011966:	693b      	ldr	r3, [r7, #16]
 8011968:	3301      	adds	r3, #1
 801196a:	613b      	str	r3, [r7, #16]
 801196c:	693b      	ldr	r3, [r7, #16]
 801196e:	2b00      	cmp	r3, #0
 8011970:	ddeb      	ble.n	801194a <ihm_runtick+0x19a>
		}
	}
}
 8011972:	bf00      	nop
 8011974:	3720      	adds	r7, #32
 8011976:	46bd      	mov	sp, r7
 8011978:	bd80      	pop	{r7, pc}
 801197a:	bf00      	nop
 801197c:	20005188 	.word	0x20005188
 8011980:	08016d28 	.word	0x08016d28
 8011984:	20005180 	.word	0x20005180
 8011988:	08016d30 	.word	0x08016d30
 801198c:	2000517c 	.word	0x2000517c
 8011990:	20005c94 	.word	0x20005c94
 8011994:	20000200 	.word	0x20000200
 8011998:	20000204 	.word	0x20000204
 801199c:	2000514c 	.word	0x2000514c

080119a0 <ui_process_msg>:

static int test_mode=0;

static void ui_process_msg(void)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b088      	sub	sp, #32
 80119a4:	af00      	add	r7, sp, #0
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_ui(&m);
 80119a6:	463b      	mov	r3, r7
 80119a8:	4618      	mov	r0, r3
 80119aa:	f7ff fe9d 	bl	80116e8 <mqf_read_to_ui>
 80119ae:	61b8      	str	r0, [r7, #24]
		if (rc) break;
 80119b0:	69bb      	ldr	r3, [r7, #24]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	f040 80ba 	bne.w	8011b2c <ui_process_msg+0x18c>

		if (m.cmd == CMD_TRTSPD_NOTIF) {
 80119b8:	78bb      	ldrb	r3, [r7, #2]
 80119ba:	2b24      	cmp	r3, #36	; 0x24
 80119bc:	d105      	bne.n	80119ca <ui_process_msg+0x2a>
			itm_debug1(DBG_UI, "hop", 0);
 80119be:	2200      	movs	r2, #0
 80119c0:	4962      	ldr	r1, [pc, #392]	; (8011b4c <ui_process_msg+0x1ac>)
 80119c2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80119c6:	f7ff fe59 	bl	801167c <itm_debug1>
		}

		switch(m.cmd) {
 80119ca:	78bb      	ldrb	r3, [r7, #2]
 80119cc:	2b25      	cmp	r3, #37	; 0x25
 80119ce:	f000 80af 	beq.w	8011b30 <ui_process_msg+0x190>
 80119d2:	2bfc      	cmp	r3, #252	; 0xfc
 80119d4:	d003      	beq.n	80119de <ui_process_msg+0x3e>
 80119d6:	2b01      	cmp	r3, #1
 80119d8:	f000 80ac 	beq.w	8011b34 <ui_process_msg+0x194>
 80119dc:	e004      	b.n	80119e8 <ui_process_msg+0x48>
        case CMD_TEST_MODE:
            test_mode = m.v1u;
 80119de:	88bb      	ldrh	r3, [r7, #4]
 80119e0:	461a      	mov	r2, r3
 80119e2:	4b5b      	ldr	r3, [pc, #364]	; (8011b50 <ui_process_msg+0x1b0>)
 80119e4:	601a      	str	r2, [r3, #0]
            //ui_write_mode(0);
    		//ui_msg5(0, "T");
            return;
 80119e6:	e0ae      	b.n	8011b46 <ui_process_msg+0x1a6>
        		SET_NEEDSREFRESH(0);
        	}
        	return;
        	break;
        }
		if (IS_CONTROL_T(m.from)) {
 80119e8:	787b      	ldrb	r3, [r7, #1]
 80119ea:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80119ee:	2bd0      	cmp	r3, #208	; 0xd0
 80119f0:	d149      	bne.n	8011a86 <ui_process_msg+0xe6>
			int trnum = m.from & 0x07;
 80119f2:	787b      	ldrb	r3, [r7, #1]
 80119f4:	f003 0307 	and.w	r3, r3, #7
 80119f8:	617b      	str	r3, [r7, #20]
			switch (m.cmd) {
 80119fa:	78bb      	ldrb	r3, [r7, #2]
 80119fc:	2b23      	cmp	r3, #35	; 0x23
 80119fe:	f000 809b 	beq.w	8011b38 <ui_process_msg+0x198>
 8011a02:	2b23      	cmp	r3, #35	; 0x23
 8011a04:	dc05      	bgt.n	8011a12 <ui_process_msg+0x72>
 8011a06:	2b21      	cmp	r3, #33	; 0x21
 8011a08:	f000 8098 	beq.w	8011b3c <ui_process_msg+0x19c>
 8011a0c:	2b22      	cmp	r3, #34	; 0x22
 8011a0e:	d005      	beq.n	8011a1c <ui_process_msg+0x7c>
 8011a10:	e030      	b.n	8011a74 <ui_process_msg+0xd4>
 8011a12:	2b24      	cmp	r3, #36	; 0x24
 8011a14:	d00f      	beq.n	8011a36 <ui_process_msg+0x96>
 8011a16:	2ba1      	cmp	r3, #161	; 0xa1
 8011a18:	d037      	beq.n	8011a8a <ui_process_msg+0xea>
 8011a1a:	e02b      	b.n	8011a74 <ui_process_msg+0xd4>
			case CMD_TRSTATUS_NOTIF:
				// TODO trnum -> display num
				if (ihm_mode == 0) {
 8011a1c:	4b4d      	ldr	r3, [pc, #308]	; (8011b54 <ui_process_msg+0x1b4>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	f040 808d 	bne.w	8011b40 <ui_process_msg+0x1a0>
					//TODO
					//ihm_setvar(0, 2, m.v1u);
					SET_NEEDSREFRESH(0);
 8011a26:	4b4c      	ldr	r3, [pc, #304]	; (8011b58 <ui_process_msg+0x1b8>)
 8011a28:	781b      	ldrb	r3, [r3, #0]
 8011a2a:	f043 0301 	orr.w	r3, r3, #1
 8011a2e:	b2da      	uxtb	r2, r3
 8011a30:	4b49      	ldr	r3, [pc, #292]	; (8011b58 <ui_process_msg+0x1b8>)
 8011a32:	701a      	strb	r2, [r3, #0]
				}
				return;
 8011a34:	e084      	b.n	8011b40 <ui_process_msg+0x1a0>
				break;
			case CMD_TRTSPD_NOTIF:
				itm_debug2(DBG_UI|DBG_CTRL, "rx tspd notif", trnum, m.v1u);
 8011a36:	88bb      	ldrh	r3, [r7, #4]
 8011a38:	697a      	ldr	r2, [r7, #20]
 8011a3a:	4948      	ldr	r1, [pc, #288]	; (8011b5c <ui_process_msg+0x1bc>)
 8011a3c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8011a40:	f7ff fe36 	bl	80116b0 <itm_debug2>
				// TODO trnum -> display num
				if (!NOTIF_VOFF && (ihm_mode == 0)) {
 8011a44:	4b43      	ldr	r3, [pc, #268]	; (8011b54 <ui_process_msg+0x1b4>)
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d17b      	bne.n	8011b44 <ui_process_msg+0x1a4>
					ihm_setvar(0, 2, m.v2 * m.v1u);
 8011a4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011a50:	b29a      	uxth	r2, r3
 8011a52:	88bb      	ldrh	r3, [r7, #4]
 8011a54:	fb12 f303 	smulbb	r3, r2, r3
 8011a58:	b29b      	uxth	r3, r3
 8011a5a:	461a      	mov	r2, r3
 8011a5c:	2102      	movs	r1, #2
 8011a5e:	2000      	movs	r0, #0
 8011a60:	f7ff f974 	bl	8010d4c <ihm_setvar>
					SET_NEEDSREFRESH(0);
 8011a64:	4b3c      	ldr	r3, [pc, #240]	; (8011b58 <ui_process_msg+0x1b8>)
 8011a66:	781b      	ldrb	r3, [r3, #0]
 8011a68:	f043 0301 	orr.w	r3, r3, #1
 8011a6c:	b2da      	uxtb	r2, r3
 8011a6e:	4b3a      	ldr	r3, [pc, #232]	; (8011b58 <ui_process_msg+0x1b8>)
 8011a70:	701a      	strb	r2, [r3, #0]
				}
				return;
 8011a72:	e067      	b.n	8011b44 <ui_process_msg+0x1a4>
				return;
				break;
			case CMD_UI_MSG:
				break; // see below
			default:
				itm_debug1(DBG_UI, "unk ctl", m.cmd);
 8011a74:	78bb      	ldrb	r3, [r7, #2]
 8011a76:	461a      	mov	r2, r3
 8011a78:	4939      	ldr	r1, [pc, #228]	; (8011b60 <ui_process_msg+0x1c0>)
 8011a7a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011a7e:	f7ff fdfd 	bl	801167c <itm_debug1>
				return;
 8011a82:	bf00      	nop
 8011a84:	e05f      	b.n	8011b46 <ui_process_msg+0x1a6>
				break;
			}
		}
 8011a86:	bf00      	nop
 8011a88:	e000      	b.n	8011a8c <ui_process_msg+0xec>
				break; // see below
 8011a8a:	bf00      	nop
		if (IS_UI(m.to)) {
 8011a8c:	783b      	ldrb	r3, [r7, #0]
 8011a8e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8011a92:	2b80      	cmp	r3, #128	; 0x80
 8011a94:	d13f      	bne.n	8011b16 <ui_process_msg+0x176>
			int dn = m.to & 0x1F;
 8011a96:	783b      	ldrb	r3, [r7, #0]
 8011a98:	f003 031f 	and.w	r3, r3, #31
 8011a9c:	613b      	str	r3, [r7, #16]
			if (dn != 1) {
 8011a9e:	693b      	ldr	r3, [r7, #16]
 8011aa0:	2b01      	cmp	r3, #1
 8011aa2:	d006      	beq.n	8011ab2 <ui_process_msg+0x112>
				itm_debug1(DBG_UI, "?dn", dn);
 8011aa4:	693a      	ldr	r2, [r7, #16]
 8011aa6:	492f      	ldr	r1, [pc, #188]	; (8011b64 <ui_process_msg+0x1c4>)
 8011aa8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011aac:	f7ff fde6 	bl	801167c <itm_debug1>
 8011ab0:	e779      	b.n	80119a6 <ui_process_msg+0x6>
				continue;
			}
			switch (m.cmd) {
 8011ab2:	78bb      	ldrb	r3, [r7, #2]
 8011ab4:	2b20      	cmp	r3, #32
 8011ab6:	d002      	beq.n	8011abe <ui_process_msg+0x11e>
 8011ab8:	2ba1      	cmp	r3, #161	; 0xa1
 8011aba:	d033      	beq.n	8011b24 <ui_process_msg+0x184>
 8011abc:	e022      	b.n	8011b04 <ui_process_msg+0x164>
			case CMD_UI_MSG:
				//ui_msg5(dn, (char *) m.rbytes+1);
				break;
			case CMD_INA3221_REPORT:
				if (ihm_mode == 2) {
 8011abe:	4b25      	ldr	r3, [pc, #148]	; (8011b54 <ui_process_msg+0x1b4>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	2b02      	cmp	r3, #2
 8011ac4:	d130      	bne.n	8011b28 <ui_process_msg+0x188>
					int16_t *values = (int16_t *) m.v32u;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	60fb      	str	r3, [r7, #12]
					for (int i =0; i<12; i++) {
 8011aca:	2300      	movs	r3, #0
 8011acc:	61fb      	str	r3, [r7, #28]
 8011ace:	e00e      	b.n	8011aee <ui_process_msg+0x14e>
						ihm_setvar(0, i, values[i]);
 8011ad0:	69fb      	ldr	r3, [r7, #28]
 8011ad2:	005b      	lsls	r3, r3, #1
 8011ad4:	68fa      	ldr	r2, [r7, #12]
 8011ad6:	4413      	add	r3, r2
 8011ad8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011adc:	b29b      	uxth	r3, r3
 8011ade:	461a      	mov	r2, r3
 8011ae0:	69f9      	ldr	r1, [r7, #28]
 8011ae2:	2000      	movs	r0, #0
 8011ae4:	f7ff f932 	bl	8010d4c <ihm_setvar>
					for (int i =0; i<12; i++) {
 8011ae8:	69fb      	ldr	r3, [r7, #28]
 8011aea:	3301      	adds	r3, #1
 8011aec:	61fb      	str	r3, [r7, #28]
 8011aee:	69fb      	ldr	r3, [r7, #28]
 8011af0:	2b0b      	cmp	r3, #11
 8011af2:	dded      	ble.n	8011ad0 <ui_process_msg+0x130>
					}
					SET_NEEDSREFRESH(0);
 8011af4:	4b18      	ldr	r3, [pc, #96]	; (8011b58 <ui_process_msg+0x1b8>)
 8011af6:	781b      	ldrb	r3, [r3, #0]
 8011af8:	f043 0301 	orr.w	r3, r3, #1
 8011afc:	b2da      	uxtb	r2, r3
 8011afe:	4b16      	ldr	r3, [pc, #88]	; (8011b58 <ui_process_msg+0x1b8>)
 8011b00:	701a      	strb	r2, [r3, #0]
				}
				break;
 8011b02:	e011      	b.n	8011b28 <ui_process_msg+0x188>

			default:
				itm_debug1(DBG_UI, "cmd?", m.cmd);
 8011b04:	78bb      	ldrb	r3, [r7, #2]
 8011b06:	461a      	mov	r2, r3
 8011b08:	4917      	ldr	r1, [pc, #92]	; (8011b68 <ui_process_msg+0x1c8>)
 8011b0a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011b0e:	f7ff fdb5 	bl	801167c <itm_debug1>
				break;
 8011b12:	bf00      	nop
 8011b14:	e009      	b.n	8011b2a <ui_process_msg+0x18a>
			}
		} else {
			itm_debug1(DBG_UI, "non ui msg", 0);
 8011b16:	2200      	movs	r2, #0
 8011b18:	4914      	ldr	r1, [pc, #80]	; (8011b6c <ui_process_msg+0x1cc>)
 8011b1a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011b1e:	f7ff fdad 	bl	801167c <itm_debug1>
 8011b22:	e740      	b.n	80119a6 <ui_process_msg+0x6>
				break;
 8011b24:	bf00      	nop
 8011b26:	e73e      	b.n	80119a6 <ui_process_msg+0x6>
				break;
 8011b28:	bf00      	nop
	for (;;) {
 8011b2a:	e73c      	b.n	80119a6 <ui_process_msg+0x6>
		if (rc) break;
 8011b2c:	bf00      	nop
 8011b2e:	e00a      	b.n	8011b46 <ui_process_msg+0x1a6>
        	return;
 8011b30:	bf00      	nop
 8011b32:	e008      	b.n	8011b46 <ui_process_msg+0x1a6>
        	return;
 8011b34:	bf00      	nop
 8011b36:	e006      	b.n	8011b46 <ui_process_msg+0x1a6>
				return;
 8011b38:	bf00      	nop
 8011b3a:	e004      	b.n	8011b46 <ui_process_msg+0x1a6>
				return;
 8011b3c:	bf00      	nop
 8011b3e:	e002      	b.n	8011b46 <ui_process_msg+0x1a6>
				return;
 8011b40:	bf00      	nop
 8011b42:	e000      	b.n	8011b46 <ui_process_msg+0x1a6>
				return;
 8011b44:	bf00      	nop
		}
	}
}
 8011b46:	3720      	adds	r7, #32
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	bd80      	pop	{r7, pc}
 8011b4c:	08016d38 	.word	0x08016d38
 8011b50:	20005184 	.word	0x20005184
 8011b54:	20005180 	.word	0x20005180
 8011b58:	2000517c 	.word	0x2000517c
 8011b5c:	08016d3c 	.word	0x08016d3c
 8011b60:	08016d4c 	.word	0x08016d4c
 8011b64:	08016d54 	.word	0x08016d54
 8011b68:	08016d58 	.word	0x08016d58
 8011b6c:	08016d60 	.word	0x08016d60

08011b70 <itm_debug1>:
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b086      	sub	sp, #24
 8011b74:	af02      	add	r7, sp, #8
 8011b76:	60f8      	str	r0, [r7, #12]
 8011b78:	60b9      	str	r1, [r7, #8]
 8011b7a:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8011b7c:	4b08      	ldr	r3, [pc, #32]	; (8011ba0 <itm_debug1+0x30>)
 8011b7e:	681a      	ldr	r2, [r3, #0]
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	4013      	ands	r3, r2
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d007      	beq.n	8011b98 <itm_debug1+0x28>
 8011b88:	2301      	movs	r3, #1
 8011b8a:	9300      	str	r3, [sp, #0]
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	2200      	movs	r2, #0
 8011b90:	6879      	ldr	r1, [r7, #4]
 8011b92:	68b8      	ldr	r0, [r7, #8]
 8011b94:	f004 fcd0 	bl	8016538 <_itm_debug3>
}
 8011b98:	bf00      	nop
 8011b9a:	3710      	adds	r7, #16
 8011b9c:	46bd      	mov	sp, r7
 8011b9e:	bd80      	pop	{r7, pc}
 8011ba0:	20000538 	.word	0x20000538

08011ba4 <itm_debug2>:
{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b086      	sub	sp, #24
 8011ba8:	af02      	add	r7, sp, #8
 8011baa:	60f8      	str	r0, [r7, #12]
 8011bac:	60b9      	str	r1, [r7, #8]
 8011bae:	607a      	str	r2, [r7, #4]
 8011bb0:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8011bb2:	4b09      	ldr	r3, [pc, #36]	; (8011bd8 <itm_debug2+0x34>)
 8011bb4:	681a      	ldr	r2, [r3, #0]
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	4013      	ands	r3, r2
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d007      	beq.n	8011bce <itm_debug2+0x2a>
 8011bbe:	2302      	movs	r3, #2
 8011bc0:	9300      	str	r3, [sp, #0]
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	683a      	ldr	r2, [r7, #0]
 8011bc6:	6879      	ldr	r1, [r7, #4]
 8011bc8:	68b8      	ldr	r0, [r7, #8]
 8011bca:	f004 fcb5 	bl	8016538 <_itm_debug3>
}
 8011bce:	bf00      	nop
 8011bd0:	3710      	adds	r7, #16
 8011bd2:	46bd      	mov	sp, r7
 8011bd4:	bd80      	pop	{r7, pc}
 8011bd6:	bf00      	nop
 8011bd8:	20000538 	.word	0x20000538

08011bdc <itm_debug3>:
static inline void itm_debug3(uint32_t f, const char *msg, int v1, int v2, int v3)
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b086      	sub	sp, #24
 8011be0:	af02      	add	r7, sp, #8
 8011be2:	60f8      	str	r0, [r7, #12]
 8011be4:	60b9      	str	r1, [r7, #8]
 8011be6:	607a      	str	r2, [r7, #4]
 8011be8:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 8011bea:	4b09      	ldr	r3, [pc, #36]	; (8011c10 <itm_debug3+0x34>)
 8011bec:	681a      	ldr	r2, [r3, #0]
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	4013      	ands	r3, r2
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d007      	beq.n	8011c06 <itm_debug3+0x2a>
 8011bf6:	2303      	movs	r3, #3
 8011bf8:	9300      	str	r3, [sp, #0]
 8011bfa:	69bb      	ldr	r3, [r7, #24]
 8011bfc:	683a      	ldr	r2, [r7, #0]
 8011bfe:	6879      	ldr	r1, [r7, #4]
 8011c00:	68b8      	ldr	r0, [r7, #8]
 8011c02:	f004 fc99 	bl	8016538 <_itm_debug3>
}
 8011c06:	bf00      	nop
 8011c08:	3710      	adds	r7, #16
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	bd80      	pop	{r7, pc}
 8011c0e:	bf00      	nop
 8011c10:	20000538 	.word	0x20000538

08011c14 <mqf_read_to_ctrl>:
/* from upper */
#define CMD_SET_TARGET_SPEED 0x10
#define CMD_SET_C1_C2		 0x11


LFMQUEUE_DEF_H(to_ctrl, msg_64_t)
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b082      	sub	sp, #8
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
 8011c1c:	6879      	ldr	r1, [r7, #4]
 8011c1e:	4804      	ldr	r0, [pc, #16]	; (8011c30 <mqf_read_to_ctrl+0x1c>)
 8011c20:	f004 fe0a 	bl	8016838 <mqf_read>
 8011c24:	4603      	mov	r3, r0
 8011c26:	4618      	mov	r0, r3
 8011c28:	3708      	adds	r7, #8
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	bd80      	pop	{r7, pc}
 8011c2e:	bf00      	nop
 8011c30:	200004fc 	.word	0x200004fc

08011c34 <mqf_write_from_ctrl>:
LFMQUEUE_DEF_H(from_ctrl, msg_64_t)
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b082      	sub	sp, #8
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6078      	str	r0, [r7, #4]
 8011c3c:	6879      	ldr	r1, [r7, #4]
 8011c3e:	4804      	ldr	r0, [pc, #16]	; (8011c50 <mqf_write_from_ctrl+0x1c>)
 8011c40:	f004 fd80 	bl	8016744 <mqf_write>
 8011c44:	4603      	mov	r3, r0
 8011c46:	4618      	mov	r0, r3
 8011c48:	3708      	adds	r7, #8
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	bd80      	pop	{r7, pc}
 8011c4e:	bf00      	nop
 8011c50:	20000508 	.word	0x20000508

08011c54 <ui_msg>:
#define CMD_UI_MSG			0xA1	// obsolete?

#include "../IHM/ihm_messages.h"

static inline void ui_msg(int dispnum,uint8_t msgnum, msg_64_t *m, uint8_t from)
{
 8011c54:	b480      	push	{r7}
 8011c56:	b085      	sub	sp, #20
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	60f8      	str	r0, [r7, #12]
 8011c5c:	607a      	str	r2, [r7, #4]
 8011c5e:	461a      	mov	r2, r3
 8011c60:	460b      	mov	r3, r1
 8011c62:	72fb      	strb	r3, [r7, #11]
 8011c64:	4613      	mov	r3, r2
 8011c66:	72bb      	strb	r3, [r7, #10]
	m->to = MA_UI(dispnum);
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	b25b      	sxtb	r3, r3
 8011c6c:	f003 031f 	and.w	r3, r3, #31
 8011c70:	b25b      	sxtb	r3, r3
 8011c72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011c76:	b25b      	sxtb	r3, r3
 8011c78:	b2da      	uxtb	r2, r3
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	701a      	strb	r2, [r3, #0]
	m->from = from;
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	7aba      	ldrb	r2, [r7, #10]
 8011c82:	705a      	strb	r2, [r3, #1]
	m->cmd = CMD_UI_MSG;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	22a1      	movs	r2, #161	; 0xa1
 8011c88:	709a      	strb	r2, [r3, #2]
	m->v1u = msgnum;
 8011c8a:	7afb      	ldrb	r3, [r7, #11]
 8011c8c:	b29a      	uxth	r2, r3
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	809a      	strh	r2, [r3, #4]
	//int n = strlen(txt);
	//n = (n>5) ? 5 : n;
	//memcpy(m->rbytes+1, txt, n);
}
 8011c92:	bf00      	nop
 8011c94:	3714      	adds	r7, #20
 8011c96:	46bd      	mov	sp, r7
 8011c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9c:	4770      	bx	lr

08011c9e <_sub_addr_to_sub_num>:
 l2r : (sw t 2) (blk 5.1) (blk 5.2)
 */
#include "../msg/trainmsg.h"

static inline int _sub_addr_to_sub_num(uint8_t addr, uint8_t sub)
{
 8011c9e:	b480      	push	{r7}
 8011ca0:	b085      	sub	sp, #20
 8011ca2:	af00      	add	r7, sp, #0
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	460a      	mov	r2, r1
 8011ca8:	71fb      	strb	r3, [r7, #7]
 8011caa:	4613      	mov	r3, r2
 8011cac:	71bb      	strb	r3, [r7, #6]
    int brd = MA_2_BOARD(addr);
 8011cae:	79fb      	ldrb	r3, [r7, #7]
 8011cb0:	10db      	asrs	r3, r3, #3
 8011cb2:	f003 0307 	and.w	r3, r3, #7
 8011cb6:	60fb      	str	r3, [r7, #12]
    int n = brd * 12 + sub;
 8011cb8:	68fa      	ldr	r2, [r7, #12]
 8011cba:	4613      	mov	r3, r2
 8011cbc:	005b      	lsls	r3, r3, #1
 8011cbe:	4413      	add	r3, r2
 8011cc0:	009b      	lsls	r3, r3, #2
 8011cc2:	461a      	mov	r2, r3
 8011cc4:	79bb      	ldrb	r3, [r7, #6]
 8011cc6:	4413      	add	r3, r2
 8011cc8:	60bb      	str	r3, [r7, #8]
    return n;
 8011cca:	68bb      	ldr	r3, [r7, #8]
}
 8011ccc:	4618      	mov	r0, r3
 8011cce:	3714      	adds	r7, #20
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd6:	4770      	bx	lr

08011cd8 <_blk_addr_to_blk_num>:

static inline int _blk_addr_to_blk_num(uint8_t addr)
{
 8011cd8:	b480      	push	{r7}
 8011cda:	b085      	sub	sp, #20
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	4603      	mov	r3, r0
 8011ce0:	71fb      	strb	r3, [r7, #7]
    int brd = MA_2_BOARD(addr);
 8011ce2:	79fb      	ldrb	r3, [r7, #7]
 8011ce4:	10db      	asrs	r3, r3, #3
 8011ce6:	f003 0307 	and.w	r3, r3, #7
 8011cea:	60fb      	str	r3, [r7, #12]
    int nc = addr & 0x07;
 8011cec:	79fb      	ldrb	r3, [r7, #7]
 8011cee:	f003 0307 	and.w	r3, r3, #7
 8011cf2:	60bb      	str	r3, [r7, #8]
    return brd*6+nc;
 8011cf4:	68fa      	ldr	r2, [r7, #12]
 8011cf6:	4613      	mov	r3, r2
 8011cf8:	005b      	lsls	r3, r3, #1
 8011cfa:	4413      	add	r3, r2
 8011cfc:	005b      	lsls	r3, r3, #1
 8011cfe:	461a      	mov	r2, r3
 8011d00:	68bb      	ldr	r3, [r7, #8]
 8011d02:	4413      	add	r3, r2
}
 8011d04:	4618      	mov	r0, r3
 8011d06:	3714      	adds	r7, #20
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0e:	4770      	bx	lr

08011d10 <_blk_num_to_blk_addr>:
    int brd = subnum/12;
    return MA_CANTON(brd, 0);
}

static uint8_t _blk_num_to_blk_addr(int blknum)
{
 8011d10:	b480      	push	{r7}
 8011d12:	b085      	sub	sp, #20
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]
	if (blknum == -1) return 0xFF;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011d1e:	d101      	bne.n	8011d24 <_blk_num_to_blk_addr+0x14>
 8011d20:	23ff      	movs	r3, #255	; 0xff
 8011d22:	e020      	b.n	8011d66 <_blk_num_to_blk_addr+0x56>
    int nc = blknum % 6;
 8011d24:	687a      	ldr	r2, [r7, #4]
 8011d26:	4b13      	ldr	r3, [pc, #76]	; (8011d74 <_blk_num_to_blk_addr+0x64>)
 8011d28:	fb83 3102 	smull	r3, r1, r3, r2
 8011d2c:	17d3      	asrs	r3, r2, #31
 8011d2e:	1ac9      	subs	r1, r1, r3
 8011d30:	460b      	mov	r3, r1
 8011d32:	005b      	lsls	r3, r3, #1
 8011d34:	440b      	add	r3, r1
 8011d36:	005b      	lsls	r3, r3, #1
 8011d38:	1ad3      	subs	r3, r2, r3
 8011d3a:	60fb      	str	r3, [r7, #12]
    int brd = blknum/6;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	4a0d      	ldr	r2, [pc, #52]	; (8011d74 <_blk_num_to_blk_addr+0x64>)
 8011d40:	fb82 1203 	smull	r1, r2, r2, r3
 8011d44:	17db      	asrs	r3, r3, #31
 8011d46:	1ad3      	subs	r3, r2, r3
 8011d48:	60bb      	str	r3, [r7, #8]
    return MA_CANTON(brd, nc);
 8011d4a:	68bb      	ldr	r3, [r7, #8]
 8011d4c:	00db      	lsls	r3, r3, #3
 8011d4e:	b25b      	sxtb	r3, r3
 8011d50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011d54:	b25a      	sxtb	r2, r3
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	b25b      	sxtb	r3, r3
 8011d5a:	f003 0307 	and.w	r3, r3, #7
 8011d5e:	b25b      	sxtb	r3, r3
 8011d60:	4313      	orrs	r3, r2
 8011d62:	b25b      	sxtb	r3, r3
 8011d64:	b2db      	uxtb	r3, r3
}
 8011d66:	4618      	mov	r0, r3
 8011d68:	3714      	adds	r7, #20
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d70:	4770      	bx	lr
 8011d72:	bf00      	nop
 8011d74:	2aaaaaab 	.word	0x2aaaaaab

08011d78 <blk_addr_for_sub_addr>:
int _next_sub_num_for_sub_num(int subnum, uint8_t left);

// ---------------------------------------------------------------------

static inline uint8_t blk_addr_for_sub_addr(uint8_t addr, uint8_t sub)
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b084      	sub	sp, #16
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	4603      	mov	r3, r0
 8011d80:	460a      	mov	r2, r1
 8011d82:	71fb      	strb	r3, [r7, #7]
 8011d84:	4613      	mov	r3, r2
 8011d86:	71bb      	strb	r3, [r7, #6]
    int n = _sub_addr_to_sub_num(addr, sub);
 8011d88:	79ba      	ldrb	r2, [r7, #6]
 8011d8a:	79fb      	ldrb	r3, [r7, #7]
 8011d8c:	4611      	mov	r1, r2
 8011d8e:	4618      	mov	r0, r3
 8011d90:	f7ff ff85 	bl	8011c9e <_sub_addr_to_sub_num>
 8011d94:	60f8      	str	r0, [r7, #12]
    n = _blk_num_for_sub_num(n);
 8011d96:	68f8      	ldr	r0, [r7, #12]
 8011d98:	f004 fb0a 	bl	80163b0 <_blk_num_for_sub_num>
 8011d9c:	60f8      	str	r0, [r7, #12]
    return _blk_num_to_blk_addr(n);
 8011d9e:	68f8      	ldr	r0, [r7, #12]
 8011da0:	f7ff ffb6 	bl	8011d10 <_blk_num_to_blk_addr>
 8011da4:	4603      	mov	r3, r0
}
 8011da6:	4618      	mov	r0, r3
 8011da8:	3710      	adds	r7, #16
 8011daa:	46bd      	mov	sp, r7
 8011dac:	bd80      	pop	{r7, pc}

08011dae <next_block_addr>:

static inline uint8_t next_block_addr(uint8_t blkaddr, uint8_t left)
{
 8011dae:	b580      	push	{r7, lr}
 8011db0:	b084      	sub	sp, #16
 8011db2:	af00      	add	r7, sp, #0
 8011db4:	4603      	mov	r3, r0
 8011db6:	460a      	mov	r2, r1
 8011db8:	71fb      	strb	r3, [r7, #7]
 8011dba:	4613      	mov	r3, r2
 8011dbc:	71bb      	strb	r3, [r7, #6]
    int blknum = _blk_addr_to_blk_num(blkaddr);
 8011dbe:	79fb      	ldrb	r3, [r7, #7]
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f7ff ff89 	bl	8011cd8 <_blk_addr_to_blk_num>
 8011dc6:	60f8      	str	r0, [r7, #12]
    int n = _next_block_num(blknum, left);
 8011dc8:	79bb      	ldrb	r3, [r7, #6]
 8011dca:	4619      	mov	r1, r3
 8011dcc:	68f8      	ldr	r0, [r7, #12]
 8011dce:	f004 fb0b 	bl	80163e8 <_next_block_num>
 8011dd2:	60b8      	str	r0, [r7, #8]
    return _blk_num_to_blk_addr(n);
 8011dd4:	68b8      	ldr	r0, [r7, #8]
 8011dd6:	f7ff ff9b 	bl	8011d10 <_blk_num_to_blk_addr>
 8011dda:	4603      	mov	r3, r0
}
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3710      	adds	r7, #16
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}

08011de4 <ctrl_set_mode>:
static void train_switched_to_c2(int tn, const train_config_t *tconf, train_ctrl_t *tvar, uint8_t fromBemf);
static void pose_triggered(int tidx, train_ctrl_t *tvar, uint8_t blkaddr);


static void ctrl_set_mode(int trnum, train_mode_t mode)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b084      	sub	sp, #16
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
 8011dec:	460b      	mov	r3, r1
 8011dee:	70fb      	strb	r3, [r7, #3]
	if (trctl[trnum]._mode == mode) return;
 8011df0:	4a13      	ldr	r2, [pc, #76]	; (8011e40 <ctrl_set_mode+0x5c>)
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8011df8:	78fa      	ldrb	r2, [r7, #3]
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	d01b      	beq.n	8011e36 <ctrl_set_mode+0x52>
	trctl[trnum]._mode = mode;
 8011dfe:	4910      	ldr	r1, [pc, #64]	; (8011e40 <ctrl_set_mode+0x5c>)
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	78fa      	ldrb	r2, [r7, #3]
 8011e04:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	// notif UI
	msg_64_t m;
	m.from = MA_CONTROL_T(trnum);
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	b25b      	sxtb	r3, r3
 8011e0c:	f003 0307 	and.w	r3, r3, #7
 8011e10:	b25b      	sxtb	r3, r3
 8011e12:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8011e16:	b25b      	sxtb	r3, r3
 8011e18:	b2db      	uxtb	r3, r3
 8011e1a:	727b      	strb	r3, [r7, #9]
	m.to = MA_UI(1); // fix me
 8011e1c:	2381      	movs	r3, #129	; 0x81
 8011e1e:	723b      	strb	r3, [r7, #8]
	m.cmd = CMD_TRMODE_NOTIF;
 8011e20:	2321      	movs	r3, #33	; 0x21
 8011e22:	72bb      	strb	r3, [r7, #10]
	m.v1u = mode;
 8011e24:	78fb      	ldrb	r3, [r7, #3]
 8011e26:	b29b      	uxth	r3, r3
 8011e28:	81bb      	strh	r3, [r7, #12]
	mqf_write_from_ctrl(&m);
 8011e2a:	f107 0308 	add.w	r3, r7, #8
 8011e2e:	4618      	mov	r0, r3
 8011e30:	f7ff ff00 	bl	8011c34 <mqf_write_from_ctrl>
 8011e34:	e000      	b.n	8011e38 <ctrl_set_mode+0x54>
	if (trctl[trnum]._mode == mode) return;
 8011e36:	bf00      	nop
}
 8011e38:	3710      	adds	r7, #16
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	bd80      	pop	{r7, pc}
 8011e3e:	bf00      	nop
 8011e40:	2000518c 	.word	0x2000518c

08011e44 <ctrl_set_status>:

static void ctrl_set_status(int trnum, train_status_t status)
{
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b084      	sub	sp, #16
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
 8011e4c:	460b      	mov	r3, r1
 8011e4e:	70fb      	strb	r3, [r7, #3]
	if (trctl[trnum]._status == status) return;
 8011e50:	4a14      	ldr	r2, [pc, #80]	; (8011ea4 <ctrl_set_status+0x60>)
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	00db      	lsls	r3, r3, #3
 8011e56:	4413      	add	r3, r2
 8011e58:	785b      	ldrb	r3, [r3, #1]
 8011e5a:	78fa      	ldrb	r2, [r7, #3]
 8011e5c:	429a      	cmp	r2, r3
 8011e5e:	d01c      	beq.n	8011e9a <ctrl_set_status+0x56>
	trctl[trnum]._status = status;
 8011e60:	4a10      	ldr	r2, [pc, #64]	; (8011ea4 <ctrl_set_status+0x60>)
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	00db      	lsls	r3, r3, #3
 8011e66:	4413      	add	r3, r2
 8011e68:	78fa      	ldrb	r2, [r7, #3]
 8011e6a:	705a      	strb	r2, [r3, #1]
	// notif UI
	msg_64_t m;
	m.from = MA_CONTROL_T(trnum);
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	b25b      	sxtb	r3, r3
 8011e70:	f003 0307 	and.w	r3, r3, #7
 8011e74:	b25b      	sxtb	r3, r3
 8011e76:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8011e7a:	b25b      	sxtb	r3, r3
 8011e7c:	b2db      	uxtb	r3, r3
 8011e7e:	727b      	strb	r3, [r7, #9]
	m.to = MA_UI(1); // fix me
 8011e80:	2381      	movs	r3, #129	; 0x81
 8011e82:	723b      	strb	r3, [r7, #8]
	m.cmd = CMD_TRSTATUS_NOTIF;
 8011e84:	2322      	movs	r3, #34	; 0x22
 8011e86:	72bb      	strb	r3, [r7, #10]
	m.v1u = status;
 8011e88:	78fb      	ldrb	r3, [r7, #3]
 8011e8a:	b29b      	uxth	r3, r3
 8011e8c:	81bb      	strh	r3, [r7, #12]
	mqf_write_from_ctrl(&m);
 8011e8e:	f107 0308 	add.w	r3, r7, #8
 8011e92:	4618      	mov	r0, r3
 8011e94:	f7ff fece 	bl	8011c34 <mqf_write_from_ctrl>
 8011e98:	e000      	b.n	8011e9c <ctrl_set_status+0x58>
	if (trctl[trnum]._status == status) return;
 8011e9a:	bf00      	nop
}
 8011e9c:	3710      	adds	r7, #16
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	bd80      	pop	{r7, pc}
 8011ea2:	bf00      	nop
 8011ea4:	2000518c 	.word	0x2000518c

08011ea8 <update_c2>:

static void update_c2(int trnum)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b088      	sub	sp, #32
 8011eac:	af02      	add	r7, sp, #8
 8011eae:	6078      	str	r0, [r7, #4]
	train_ctrl_t *tvar = &trctl[trnum];
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	00db      	lsls	r3, r3, #3
 8011eb4:	4a31      	ldr	r2, [pc, #196]	; (8011f7c <update_c2+0xd4>)
 8011eb6:	4413      	add	r3, r2
 8011eb8:	617b      	str	r3, [r7, #20]
	if (tvar->canton1_addr == 0xFF) {
 8011eba:	697b      	ldr	r3, [r7, #20]
 8011ebc:	795b      	ldrb	r3, [r3, #5]
 8011ebe:	2bff      	cmp	r3, #255	; 0xff
 8011ec0:	d105      	bne.n	8011ece <update_c2+0x26>
		itm_debug1(DBG_ERR|DBG_CTRL, "no c1", trnum);
 8011ec2:	687a      	ldr	r2, [r7, #4]
 8011ec4:	492e      	ldr	r1, [pc, #184]	; (8011f80 <update_c2+0xd8>)
 8011ec6:	482f      	ldr	r0, [pc, #188]	; (8011f84 <update_c2+0xdc>)
 8011ec8:	f7ff fe52 	bl	8011b70 <itm_debug1>
 8011ecc:	e052      	b.n	8011f74 <update_c2+0xcc>
		return;
	}
	int dir = trctl[trnum]._dir;
 8011ece:	4a2b      	ldr	r2, [pc, #172]	; (8011f7c <update_c2+0xd4>)
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	00db      	lsls	r3, r3, #3
 8011ed4:	4413      	add	r3, r2
 8011ed6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011eda:	613b      	str	r3, [r7, #16]
	if (!dir) {
 8011edc:	693b      	ldr	r3, [r7, #16]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d103      	bne.n	8011eea <update_c2+0x42>
		tvar->canton2_addr = 0;
 8011ee2:	697b      	ldr	r3, [r7, #20]
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	719a      	strb	r2, [r3, #6]
 8011ee8:	e012      	b.n	8011f10 <update_c2+0x68>
	} else {
		tvar->canton2_addr = next_block_addr(trctl[trnum].canton1_addr, (tvar->_dir<0));
 8011eea:	4a24      	ldr	r2, [pc, #144]	; (8011f7c <update_c2+0xd4>)
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	00db      	lsls	r3, r3, #3
 8011ef0:	4413      	add	r3, r2
 8011ef2:	795a      	ldrb	r2, [r3, #5]
 8011ef4:	697b      	ldr	r3, [r7, #20]
 8011ef6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011efa:	b2db      	uxtb	r3, r3
 8011efc:	09db      	lsrs	r3, r3, #7
 8011efe:	b2db      	uxtb	r3, r3
 8011f00:	4619      	mov	r1, r3
 8011f02:	4610      	mov	r0, r2
 8011f04:	f7ff ff53 	bl	8011dae <next_block_addr>
 8011f08:	4603      	mov	r3, r0
 8011f0a:	461a      	mov	r2, r3
 8011f0c:	697b      	ldr	r3, [r7, #20]
 8011f0e:	719a      	strb	r2, [r3, #6]
	}
	itm_debug3(DBG_CTRL, "updt_c2", trnum, tvar->canton1_addr, tvar->canton2_addr);
 8011f10:	697b      	ldr	r3, [r7, #20]
 8011f12:	795b      	ldrb	r3, [r3, #5]
 8011f14:	461a      	mov	r2, r3
 8011f16:	697b      	ldr	r3, [r7, #20]
 8011f18:	799b      	ldrb	r3, [r3, #6]
 8011f1a:	9300      	str	r3, [sp, #0]
 8011f1c:	4613      	mov	r3, r2
 8011f1e:	687a      	ldr	r2, [r7, #4]
 8011f20:	4919      	ldr	r1, [pc, #100]	; (8011f88 <update_c2+0xe0>)
 8011f22:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8011f26:	f7ff fe59 	bl	8011bdc <itm_debug3>
	msg_64_t m;
	m.from = MA_CONTROL_T(trnum);
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	b25b      	sxtb	r3, r3
 8011f2e:	f003 0307 	and.w	r3, r3, #7
 8011f32:	b25b      	sxtb	r3, r3
 8011f34:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8011f38:	b25b      	sxtb	r3, r3
 8011f3a:	b2db      	uxtb	r3, r3
 8011f3c:	727b      	strb	r3, [r7, #9]
	m.to =  MA_TRAIN_SC(0);
 8011f3e:	23c8      	movs	r3, #200	; 0xc8
 8011f40:	723b      	strb	r3, [r7, #8]
	m.cmd = CMD_SET_C1_C2;
 8011f42:	2311      	movs	r3, #17
 8011f44:	72bb      	strb	r3, [r7, #10]
	m.vbytes[0] = trctl[trnum].canton1_addr;
 8011f46:	4a0d      	ldr	r2, [pc, #52]	; (8011f7c <update_c2+0xd4>)
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	00db      	lsls	r3, r3, #3
 8011f4c:	4413      	add	r3, r2
 8011f4e:	795b      	ldrb	r3, [r3, #5]
 8011f50:	733b      	strb	r3, [r7, #12]
	m.vbytes[1] = dir;
 8011f52:	693b      	ldr	r3, [r7, #16]
 8011f54:	b2db      	uxtb	r3, r3
 8011f56:	737b      	strb	r3, [r7, #13]
	m.vbytes[2] = trctl[trnum].canton2_addr;
 8011f58:	4a08      	ldr	r2, [pc, #32]	; (8011f7c <update_c2+0xd4>)
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	00db      	lsls	r3, r3, #3
 8011f5e:	4413      	add	r3, r2
 8011f60:	799b      	ldrb	r3, [r3, #6]
 8011f62:	73bb      	strb	r3, [r7, #14]
	m.vbytes[3] = dir; // 0;
 8011f64:	693b      	ldr	r3, [r7, #16]
 8011f66:	b2db      	uxtb	r3, r3
 8011f68:	73fb      	strb	r3, [r7, #15]
	mqf_write_from_ctrl(&m);
 8011f6a:	f107 0308 	add.w	r3, r7, #8
 8011f6e:	4618      	mov	r0, r3
 8011f70:	f7ff fe60 	bl	8011c34 <mqf_write_from_ctrl>
}
 8011f74:	3718      	adds	r7, #24
 8011f76:	46bd      	mov	sp, r7
 8011f78:	bd80      	pop	{r7, pc}
 8011f7a:	bf00      	nop
 8011f7c:	2000518c 	.word	0x2000518c
 8011f80:	08016d6c 	.word	0x08016d6c
 8011f84:	80000400 	.word	0x80000400
 8011f88:	08016d74 	.word	0x08016d74

08011f8c <ctrl_set_dir>:

static int8_t ctrl_set_dir(int trnum, int dir)
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b084      	sub	sp, #16
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
 8011f94:	6039      	str	r1, [r7, #0]
	itm_debug2(DBG_CTRL, "setdir", trnum, dir);
 8011f96:	683b      	ldr	r3, [r7, #0]
 8011f98:	687a      	ldr	r2, [r7, #4]
 8011f9a:	491b      	ldr	r1, [pc, #108]	; (8012008 <ctrl_set_dir+0x7c>)
 8011f9c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8011fa0:	f7ff fe00 	bl	8011ba4 <itm_debug2>
	if (trctl[trnum]._dir == dir) return 0;
 8011fa4:	4a19      	ldr	r2, [pc, #100]	; (801200c <ctrl_set_dir+0x80>)
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	00db      	lsls	r3, r3, #3
 8011faa:	4413      	add	r3, r2
 8011fac:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011fb0:	461a      	mov	r2, r3
 8011fb2:	683b      	ldr	r3, [r7, #0]
 8011fb4:	4293      	cmp	r3, r2
 8011fb6:	d101      	bne.n	8011fbc <ctrl_set_dir+0x30>
 8011fb8:	2300      	movs	r3, #0
 8011fba:	e021      	b.n	8012000 <ctrl_set_dir+0x74>
	//if (trctl[trnum]._target_speed) return 0;

	msg_64_t m;
	m.from = MA_CONTROL_T(trnum);
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	b25b      	sxtb	r3, r3
 8011fc0:	f003 0307 	and.w	r3, r3, #7
 8011fc4:	b25b      	sxtb	r3, r3
 8011fc6:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8011fca:	b25b      	sxtb	r3, r3
 8011fcc:	b2db      	uxtb	r3, r3
 8011fce:	727b      	strb	r3, [r7, #9]
	trctl[trnum]._dir = dir;
 8011fd0:	683b      	ldr	r3, [r7, #0]
 8011fd2:	b259      	sxtb	r1, r3
 8011fd4:	4a0d      	ldr	r2, [pc, #52]	; (801200c <ctrl_set_dir+0x80>)
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	00db      	lsls	r3, r3, #3
 8011fda:	4413      	add	r3, r2
 8011fdc:	460a      	mov	r2, r1
 8011fde:	711a      	strb	r2, [r3, #4]

	update_c2(trnum);
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	f7ff ff61 	bl	8011ea8 <update_c2>


	// notif UI
	m.to = MA_UI(1); // fix me
 8011fe6:	2381      	movs	r3, #129	; 0x81
 8011fe8:	723b      	strb	r3, [r7, #8]
	m.cmd = CMD_TRDIR_NOTIF;
 8011fea:	2323      	movs	r3, #35	; 0x23
 8011fec:	72bb      	strb	r3, [r7, #10]
	m.v1 = dir;
 8011fee:	683b      	ldr	r3, [r7, #0]
 8011ff0:	b21b      	sxth	r3, r3
 8011ff2:	81bb      	strh	r3, [r7, #12]
	mqf_write_from_ctrl(&m);
 8011ff4:	f107 0308 	add.w	r3, r7, #8
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	f7ff fe1b 	bl	8011c34 <mqf_write_from_ctrl>

	// TODO : change C2
	return 1;
 8011ffe:	2301      	movs	r3, #1
}
 8012000:	4618      	mov	r0, r3
 8012002:	3710      	adds	r7, #16
 8012004:	46bd      	mov	sp, r7
 8012006:	bd80      	pop	{r7, pc}
 8012008:	08016d7c 	.word	0x08016d7c
 801200c:	2000518c 	.word	0x2000518c

08012010 <ctrl_set_tspeed>:

static int8_t ctrl_set_tspeed(int trnum, uint16_t tspd)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b084      	sub	sp, #16
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
 8012018:	460b      	mov	r3, r1
 801201a:	807b      	strh	r3, [r7, #2]
	if (trctl[trnum]._target_speed == tspd) return 0;
 801201c:	4a27      	ldr	r2, [pc, #156]	; (80120bc <ctrl_set_tspeed+0xac>)
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	00db      	lsls	r3, r3, #3
 8012022:	4413      	add	r3, r2
 8012024:	885b      	ldrh	r3, [r3, #2]
 8012026:	887a      	ldrh	r2, [r7, #2]
 8012028:	429a      	cmp	r2, r3
 801202a:	d101      	bne.n	8012030 <ctrl_set_tspeed+0x20>
 801202c:	2300      	movs	r3, #0
 801202e:	e041      	b.n	80120b4 <ctrl_set_tspeed+0xa4>
	trctl[trnum]._target_speed = tspd;
 8012030:	4a22      	ldr	r2, [pc, #136]	; (80120bc <ctrl_set_tspeed+0xac>)
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	00db      	lsls	r3, r3, #3
 8012036:	4413      	add	r3, r2
 8012038:	887a      	ldrh	r2, [r7, #2]
 801203a:	805a      	strh	r2, [r3, #2]

	// notif UI
	itm_debug2(DBG_UI|DBG_CTRL, "tx tspd notif", trnum, tspd);
 801203c:	887b      	ldrh	r3, [r7, #2]
 801203e:	687a      	ldr	r2, [r7, #4]
 8012040:	491f      	ldr	r1, [pc, #124]	; (80120c0 <ctrl_set_tspeed+0xb0>)
 8012042:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8012046:	f7ff fdad 	bl	8011ba4 <itm_debug2>
	msg_64_t m;
	m.from = MA_CONTROL_T(trnum);
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	b25b      	sxtb	r3, r3
 801204e:	f003 0307 	and.w	r3, r3, #7
 8012052:	b25b      	sxtb	r3, r3
 8012054:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8012058:	b25b      	sxtb	r3, r3
 801205a:	b2db      	uxtb	r3, r3
 801205c:	727b      	strb	r3, [r7, #9]
	m.to = MA_UI(1); // TODO : fix me
 801205e:	2381      	movs	r3, #129	; 0x81
 8012060:	723b      	strb	r3, [r7, #8]
	m.cmd = CMD_TRTSPD_NOTIF;
 8012062:	2324      	movs	r3, #36	; 0x24
 8012064:	72bb      	strb	r3, [r7, #10]
	m.v1u = tspd;
 8012066:	887b      	ldrh	r3, [r7, #2]
 8012068:	81bb      	strh	r3, [r7, #12]
	m.v2 = trctl[trnum]._dir;
 801206a:	4a14      	ldr	r2, [pc, #80]	; (80120bc <ctrl_set_tspeed+0xac>)
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	00db      	lsls	r3, r3, #3
 8012070:	4413      	add	r3, r2
 8012072:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012076:	b21b      	sxth	r3, r3
 8012078:	81fb      	strh	r3, [r7, #14]
	mqf_write_from_ctrl(&m);
 801207a:	f107 0308 	add.w	r3, r7, #8
 801207e:	4618      	mov	r0, r3
 8012080:	f7ff fdd8 	bl	8011c34 <mqf_write_from_ctrl>

	m.to = MA_TRAIN_SC(trnum);
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	b25b      	sxtb	r3, r3
 8012088:	f003 0307 	and.w	r3, r3, #7
 801208c:	b25b      	sxtb	r3, r3
 801208e:	f063 0337 	orn	r3, r3, #55	; 0x37
 8012092:	b25b      	sxtb	r3, r3
 8012094:	b2db      	uxtb	r3, r3
 8012096:	723b      	strb	r3, [r7, #8]
	m.cmd = CMD_SET_TARGET_SPEED;
 8012098:	2310      	movs	r3, #16
 801209a:	72bb      	strb	r3, [r7, #10]
	// direction already given by SET_C1_C2
	//m.v1 = trctl[trnum]._dir*trctl[trnum]._target_speed;
	m.v1u = trctl[trnum]._target_speed;
 801209c:	4a07      	ldr	r2, [pc, #28]	; (80120bc <ctrl_set_tspeed+0xac>)
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	00db      	lsls	r3, r3, #3
 80120a2:	4413      	add	r3, r2
 80120a4:	885b      	ldrh	r3, [r3, #2]
 80120a6:	81bb      	strh	r3, [r7, #12]
	mqf_write_from_ctrl(&m);
 80120a8:	f107 0308 	add.w	r3, r7, #8
 80120ac:	4618      	mov	r0, r3
 80120ae:	f7ff fdc1 	bl	8011c34 <mqf_write_from_ctrl>

	return 1;
 80120b2:	2301      	movs	r3, #1
}
 80120b4:	4618      	mov	r0, r3
 80120b6:	3710      	adds	r7, #16
 80120b8:	46bd      	mov	sp, r7
 80120ba:	bd80      	pop	{r7, pc}
 80120bc:	2000518c 	.word	0x2000518c
 80120c0:	08016d84 	.word	0x08016d84

080120c4 <ctrl_init>:


static void ctrl_init(void)
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	af00      	add	r7, sp, #0
	memset(trctl, 0, sizeof(train_ctrl_t)*NUM_TRAINS);
 80120c8:	2240      	movs	r2, #64	; 0x40
 80120ca:	2100      	movs	r1, #0
 80120cc:	4806      	ldr	r0, [pc, #24]	; (80120e8 <ctrl_init+0x24>)
 80120ce:	f004 fc54 	bl	801697a <memset>
	ctrl_set_mode(0, train_fullmanual);
 80120d2:	2102      	movs	r1, #2
 80120d4:	2000      	movs	r0, #0
 80120d6:	f7ff fe85 	bl	8011de4 <ctrl_set_mode>
	ctrl_set_tspeed(0, 0);
 80120da:	2100      	movs	r1, #0
 80120dc:	2000      	movs	r0, #0
 80120de:	f7ff ff97 	bl	8012010 <ctrl_set_tspeed>
}
 80120e2:	bf00      	nop
 80120e4:	bd80      	pop	{r7, pc}
 80120e6:	bf00      	nop
 80120e8:	2000518c 	.word	0x2000518c

080120ec <ctrl_run_tick>:


// ----------------------------------------------------------------------------

void ctrl_run_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt)
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b098      	sub	sp, #96	; 0x60
 80120f0:	af02      	add	r7, sp, #8
 80120f2:	60f8      	str	r0, [r7, #12]
 80120f4:	60b9      	str	r1, [r7, #8]
 80120f6:	607a      	str	r2, [r7, #4]
	static int first=1;
	if (first) {
 80120f8:	4b8c      	ldr	r3, [pc, #560]	; (801232c <ctrl_run_tick+0x240>)
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d01c      	beq.n	801213a <ctrl_run_tick+0x4e>
		first = 0;
 8012100:	4b8a      	ldr	r3, [pc, #552]	; (801232c <ctrl_run_tick+0x240>)
 8012102:	2200      	movs	r2, #0
 8012104:	601a      	str	r2, [r3, #0]
		ctrl_init();
 8012106:	f7ff ffdd 	bl	80120c4 <ctrl_init>
		ctrl_reset();
 801210a:	f000 f923 	bl	8012354 <ctrl_reset>

		msg_64_t m;
		ui_msg(1, IHMMSG_TRAINCTL_INIT, &m, MA_CONTROL());
 801210e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012112:	23d7      	movs	r3, #215	; 0xd7
 8012114:	2100      	movs	r1, #0
 8012116:	2001      	movs	r0, #1
 8012118:	f7ff fd9c 	bl	8011c54 <ui_msg>
		mqf_write_from_ctrl(&m);
 801211c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012120:	4618      	mov	r0, r3
 8012122:	f7ff fd87 	bl	8011c34 <mqf_write_from_ctrl>
		if ((1)) {
			trctl[0].canton1_addr = MA_CANTON(0, 1); // initial blk
 8012126:	4b82      	ldr	r3, [pc, #520]	; (8012330 <ctrl_run_tick+0x244>)
 8012128:	2201      	movs	r2, #1
 801212a:	715a      	strb	r2, [r3, #5]
			trctl[0].canton2_addr = 0xFF;
 801212c:	4b80      	ldr	r3, [pc, #512]	; (8012330 <ctrl_run_tick+0x244>)
 801212e:	22ff      	movs	r2, #255	; 0xff
 8012130:	719a      	strb	r2, [r3, #6]
			ctrl_set_dir(0, 0);
 8012132:	2100      	movs	r1, #0
 8012134:	2000      	movs	r0, #0
 8012136:	f7ff ff29 	bl	8011f8c <ctrl_set_dir>
		}
	}
	/* process messages */
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_ctrl(&m);
 801213a:	f107 0310 	add.w	r3, r7, #16
 801213e:	4618      	mov	r0, r3
 8012140:	f7ff fd68 	bl	8011c14 <mqf_read_to_ctrl>
 8012144:	6578      	str	r0, [r7, #84]	; 0x54
		if (rc) break;
 8012146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012148:	2b00      	cmp	r3, #0
 801214a:	f040 80eb 	bne.w	8012324 <ctrl_run_tick+0x238>
        switch (m.cmd) {
 801214e:	7cbb      	ldrb	r3, [r7, #18]
 8012150:	2bfe      	cmp	r3, #254	; 0xfe
 8012152:	d007      	beq.n	8012164 <ctrl_run_tick+0x78>
 8012154:	2bff      	cmp	r3, #255	; 0xff
 8012156:	d002      	beq.n	801215e <ctrl_run_tick+0x72>
 8012158:	2bfc      	cmp	r3, #252	; 0xfc
 801215a:	d006      	beq.n	801216a <ctrl_run_tick+0x7e>
 801215c:	e00d      	b.n	801217a <ctrl_run_tick+0x8e>
            case CMD_RESET:
                test_mode = 0; // FALLTHRU
 801215e:	4b75      	ldr	r3, [pc, #468]	; (8012334 <ctrl_run_tick+0x248>)
 8012160:	2200      	movs	r2, #0
 8012162:	701a      	strb	r2, [r3, #0]
            case CMD_EMERGENCY_STOP:
                ctrl_reset();
 8012164:	f000 f8f6 	bl	8012354 <ctrl_reset>
                continue;
 8012168:	e0db      	b.n	8012322 <ctrl_run_tick+0x236>
                break;
            case CMD_TEST_MODE:
                test_mode = m.v1u;
 801216a:	8abb      	ldrh	r3, [r7, #20]
 801216c:	b2da      	uxtb	r2, r3
 801216e:	4b71      	ldr	r3, [pc, #452]	; (8012334 <ctrl_run_tick+0x248>)
 8012170:	701a      	strb	r2, [r3, #0]
                testerAddr = m.from;
 8012172:	7c7a      	ldrb	r2, [r7, #17]
 8012174:	4b70      	ldr	r3, [pc, #448]	; (8012338 <ctrl_run_tick+0x24c>)
 8012176:	701a      	strb	r2, [r3, #0]
                continue;
 8012178:	e0d3      	b.n	8012322 <ctrl_run_tick+0x236>
                break;
        }
        if (test_mode & (m.from != testerAddr)) {
 801217a:	4b6e      	ldr	r3, [pc, #440]	; (8012334 <ctrl_run_tick+0x248>)
 801217c:	781b      	ldrb	r3, [r3, #0]
 801217e:	4619      	mov	r1, r3
 8012180:	7c7a      	ldrb	r2, [r7, #17]
 8012182:	4b6d      	ldr	r3, [pc, #436]	; (8012338 <ctrl_run_tick+0x24c>)
 8012184:	781b      	ldrb	r3, [r3, #0]
 8012186:	429a      	cmp	r2, r3
 8012188:	bf14      	ite	ne
 801218a:	2301      	movne	r3, #1
 801218c:	2300      	moveq	r3, #0
 801218e:	b2db      	uxtb	r3, r3
 8012190:	400b      	ands	r3, r1
 8012192:	2b00      	cmp	r3, #0
 8012194:	f040 80be 	bne.w	8012314 <ctrl_run_tick+0x228>
            continue;
        }
		if (IS_CONTROL_T(m.to)) {
 8012198:	7c3b      	ldrb	r3, [r7, #16]
 801219a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801219e:	2bd0      	cmp	r3, #208	; 0xd0
 80121a0:	f040 80b0 	bne.w	8012304 <ctrl_run_tick+0x218>
			if (test_mode) continue;
 80121a4:	4b63      	ldr	r3, [pc, #396]	; (8012334 <ctrl_run_tick+0x248>)
 80121a6:	781b      	ldrb	r3, [r3, #0]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	f040 80b5 	bne.w	8012318 <ctrl_run_tick+0x22c>
			int tidx = m.to & 0x7;
 80121ae:	7c3b      	ldrb	r3, [r7, #16]
 80121b0:	f003 0307 	and.w	r3, r3, #7
 80121b4:	653b      	str	r3, [r7, #80]	; 0x50
			train_ctrl_t *tvar = &trctl[tidx];
 80121b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121b8:	00db      	lsls	r3, r3, #3
 80121ba:	4a5d      	ldr	r2, [pc, #372]	; (8012330 <ctrl_run_tick+0x244>)
 80121bc:	4413      	add	r3, r2
 80121be:	64fb      	str	r3, [r7, #76]	; 0x4c

			switch (m.cmd) {
 80121c0:	7cbb      	ldrb	r3, [r7, #18]
 80121c2:	2b15      	cmp	r3, #21
 80121c4:	d046      	beq.n	8012254 <ctrl_run_tick+0x168>
 80121c6:	2b15      	cmp	r3, #21
 80121c8:	dc04      	bgt.n	80121d4 <ctrl_run_tick+0xe8>
 80121ca:	2b12      	cmp	r3, #18
 80121cc:	d00a      	beq.n	80121e4 <ctrl_run_tick+0xf8>
 80121ce:	2b13      	cmp	r3, #19
 80121d0:	d010      	beq.n	80121f4 <ctrl_run_tick+0x108>
			case CMD_POSE_TRIGGERED:
				itm_debug2(DBG_POSE, "Trig", m.v1u, m.v2u);
				pose_triggered(tidx, tvar, m.v1u);
				break;
			default:
				break;
 80121d2:	e0a6      	b.n	8012322 <ctrl_run_tick+0x236>
			switch (m.cmd) {
 80121d4:	2b17      	cmp	r3, #23
 80121d6:	d037      	beq.n	8012248 <ctrl_run_tick+0x15c>
 80121d8:	2b17      	cmp	r3, #23
 80121da:	db68      	blt.n	80122ae <ctrl_run_tick+0x1c2>
 80121dc:	2b51      	cmp	r3, #81	; 0x51
 80121de:	f000 8081 	beq.w	80122e4 <ctrl_run_tick+0x1f8>
				break;
 80121e2:	e09e      	b.n	8012322 <ctrl_run_tick+0x236>
				presence_changed(m.from, m.sub, m.v1u, m.v2);
 80121e4:	7c78      	ldrb	r0, [r7, #17]
 80121e6:	7cf9      	ldrb	r1, [r7, #19]
 80121e8:	8aba      	ldrh	r2, [r7, #20]
 80121ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80121ee:	f000 f8b9 	bl	8012364 <presence_changed>
				break;
 80121f2:	e096      	b.n	8012322 <ctrl_run_tick+0x236>
				itm_debug2(DBG_CTRL,"BEMF/C2", tidx,  m.v1u);
 80121f4:	8abb      	ldrh	r3, [r7, #20]
 80121f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80121f8:	4950      	ldr	r1, [pc, #320]	; (801233c <ctrl_run_tick+0x250>)
 80121fa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80121fe:	f7ff fcd1 	bl	8011ba4 <itm_debug2>
				train_ctrl_t *tvar = &trctl[tidx];
 8012202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012204:	00db      	lsls	r3, r3, #3
 8012206:	4a4a      	ldr	r2, [pc, #296]	; (8012330 <ctrl_run_tick+0x244>)
 8012208:	4413      	add	r3, r2
 801220a:	643b      	str	r3, [r7, #64]	; 0x40
				if (m.v1u != tvar->canton2_addr) {
 801220c:	8aba      	ldrh	r2, [r7, #20]
 801220e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012210:	799b      	ldrb	r3, [r3, #6]
 8012212:	b29b      	uxth	r3, r3
 8012214:	429a      	cmp	r2, r3
 8012216:	d00c      	beq.n	8012232 <ctrl_run_tick+0x146>
					itm_debug3(DBG_CTRL, "not c2", tidx, m.v1u, tvar->canton2_addr);
 8012218:	8abb      	ldrh	r3, [r7, #20]
 801221a:	461a      	mov	r2, r3
 801221c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801221e:	799b      	ldrb	r3, [r3, #6]
 8012220:	9300      	str	r3, [sp, #0]
 8012222:	4613      	mov	r3, r2
 8012224:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012226:	4946      	ldr	r1, [pc, #280]	; (8012340 <ctrl_run_tick+0x254>)
 8012228:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801222c:	f7ff fcd6 	bl	8011bdc <itm_debug3>
					break;
 8012230:	e077      	b.n	8012322 <ctrl_run_tick+0x236>
				const train_config_t *tconf = get_train_cnf(tidx);
 8012232:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8012234:	f001 fbfa 	bl	8013a2c <get_train_cnf>
 8012238:	63f8      	str	r0, [r7, #60]	; 0x3c
				train_switched_to_c2(tidx, tconf, tvar, 1);
 801223a:	2301      	movs	r3, #1
 801223c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801223e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012240:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8012242:	f000 f967 	bl	8012514 <train_switched_to_c2>
				break;
 8012246:	e06c      	b.n	8012322 <ctrl_run_tick+0x236>
				ctrl_set_dir(tidx, m.v2);
 8012248:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801224c:	4619      	mov	r1, r3
 801224e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8012250:	f7ff fe9c 	bl	8011f8c <ctrl_set_dir>
				itm_debug3(DBG_CTRL, "M/spd", tidx, m.v1u, m.v2);
 8012254:	8abb      	ldrh	r3, [r7, #20]
 8012256:	461a      	mov	r2, r3
 8012258:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801225c:	9300      	str	r3, [sp, #0]
 801225e:	4613      	mov	r3, r2
 8012260:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012262:	4938      	ldr	r1, [pc, #224]	; (8012344 <ctrl_run_tick+0x258>)
 8012264:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8012268:	f7ff fcb8 	bl	8011bdc <itm_debug3>
				int16_t tspd = m.v1u;
 801226c:	8abb      	ldrh	r3, [r7, #20]
 801226e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				_UNUSED_ int spdchanged = 0;
 8012272:	2300      	movs	r3, #0
 8012274:	647b      	str	r3, [r7, #68]	; 0x44
				if ((tvar->_mode == train_fullmanual) || (tvar->_mode == train_manual)) {
 8012276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012278:	781b      	ldrb	r3, [r3, #0]
 801227a:	2b02      	cmp	r3, #2
 801227c:	d003      	beq.n	8012286 <ctrl_run_tick+0x19a>
 801227e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012280:	781b      	ldrb	r3, [r3, #0]
 8012282:	2b01      	cmp	r3, #1
 8012284:	d14a      	bne.n	801231c <ctrl_run_tick+0x230>
					ctrl_set_status(tidx, tspd ? train_running : train_station);
 8012286:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 801228a:	2b00      	cmp	r3, #0
 801228c:	d001      	beq.n	8012292 <ctrl_run_tick+0x1a6>
 801228e:	2301      	movs	r3, #1
 8012290:	e000      	b.n	8012294 <ctrl_run_tick+0x1a8>
 8012292:	2302      	movs	r3, #2
 8012294:	4619      	mov	r1, r3
 8012296:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8012298:	f7ff fdd4 	bl	8011e44 <ctrl_set_status>
					spdchanged = ctrl_set_tspeed(tidx, tspd);
 801229c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80122a0:	4619      	mov	r1, r3
 80122a2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80122a4:	f7ff feb4 	bl	8012010 <ctrl_set_tspeed>
 80122a8:	4603      	mov	r3, r0
 80122aa:	647b      	str	r3, [r7, #68]	; 0x44
				break;
 80122ac:	e036      	b.n	801231c <ctrl_run_tick+0x230>
				itm_debug2(DBG_CTRL, "M/dir", tidx, m.v1);
 80122ae:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80122b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80122b4:	4924      	ldr	r1, [pc, #144]	; (8012348 <ctrl_run_tick+0x25c>)
 80122b6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80122ba:	f7ff fc73 	bl	8011ba4 <itm_debug2>
				if (0==tvar->_target_speed) {
 80122be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122c0:	885b      	ldrh	r3, [r3, #2]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d12c      	bne.n	8012320 <ctrl_run_tick+0x234>
					if ((tvar->_mode == train_fullmanual) || (tvar->_mode == train_manual)) {
 80122c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122c8:	781b      	ldrb	r3, [r3, #0]
 80122ca:	2b02      	cmp	r3, #2
 80122cc:	d003      	beq.n	80122d6 <ctrl_run_tick+0x1ea>
 80122ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122d0:	781b      	ldrb	r3, [r3, #0]
 80122d2:	2b01      	cmp	r3, #1
 80122d4:	d124      	bne.n	8012320 <ctrl_run_tick+0x234>
						ctrl_set_dir(tidx, m.v1);
 80122d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80122da:	4619      	mov	r1, r3
 80122dc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80122de:	f7ff fe55 	bl	8011f8c <ctrl_set_dir>
				break;
 80122e2:	e01d      	b.n	8012320 <ctrl_run_tick+0x234>
				itm_debug2(DBG_POSE, "Trig", m.v1u, m.v2u);
 80122e4:	8abb      	ldrh	r3, [r7, #20]
 80122e6:	461a      	mov	r2, r3
 80122e8:	8afb      	ldrh	r3, [r7, #22]
 80122ea:	4918      	ldr	r1, [pc, #96]	; (801234c <ctrl_run_tick+0x260>)
 80122ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80122f0:	f7ff fc58 	bl	8011ba4 <itm_debug2>
				pose_triggered(tidx, tvar, m.v1u);
 80122f4:	8abb      	ldrh	r3, [r7, #20]
 80122f6:	b2db      	uxtb	r3, r3
 80122f8:	461a      	mov	r2, r3
 80122fa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80122fc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80122fe:	f000 f97b 	bl	80125f8 <pose_triggered>
				break;
 8012302:	e00e      	b.n	8012322 <ctrl_run_tick+0x236>

			}
		} else {
			itm_debug1(DBG_MSG|DBG_CTRL, "bad msg", m.to);
 8012304:	7c3b      	ldrb	r3, [r7, #16]
 8012306:	461a      	mov	r2, r3
 8012308:	4911      	ldr	r1, [pc, #68]	; (8012350 <ctrl_run_tick+0x264>)
 801230a:	f240 4002 	movw	r0, #1026	; 0x402
 801230e:	f7ff fc2f 	bl	8011b70 <itm_debug1>
 8012312:	e712      	b.n	801213a <ctrl_run_tick+0x4e>
            continue;
 8012314:	bf00      	nop
 8012316:	e710      	b.n	801213a <ctrl_run_tick+0x4e>
			if (test_mode) continue;
 8012318:	bf00      	nop
 801231a:	e70e      	b.n	801213a <ctrl_run_tick+0x4e>
				break;
 801231c:	bf00      	nop
 801231e:	e70c      	b.n	801213a <ctrl_run_tick+0x4e>
				break;
 8012320:	bf00      	nop
	for (;;) {
 8012322:	e70a      	b.n	801213a <ctrl_run_tick+0x4e>
		}
	}
	// xxx
}
 8012324:	bf00      	nop
 8012326:	3758      	adds	r7, #88	; 0x58
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}
 801232c:	20000208 	.word	0x20000208
 8012330:	2000518c 	.word	0x2000518c
 8012334:	200051cc 	.word	0x200051cc
 8012338:	200051cd 	.word	0x200051cd
 801233c:	08016d94 	.word	0x08016d94
 8012340:	08016d9c 	.word	0x08016d9c
 8012344:	08016da4 	.word	0x08016da4
 8012348:	08016dac 	.word	0x08016dac
 801234c:	08016db4 	.word	0x08016db4
 8012350:	08016dbc 	.word	0x08016dbc

08012354 <ctrl_reset>:

// ---------------------------------------------------------------
//static int spd0 = 30;

static void ctrl_reset(void)
{
 8012354:	b480      	push	{r7}
 8012356:	af00      	add	r7, sp, #0
	//TODO
}
 8012358:	bf00      	nop
 801235a:	46bd      	mov	sp, r7
 801235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012360:	4770      	bx	lr
	...

08012364 <presence_changed>:

static void presence_changed(uint8_t from_addr, uint8_t lsegnum, uint16_t p, int16_t ival)
{
 8012364:	b590      	push	{r4, r7, lr}
 8012366:	b08b      	sub	sp, #44	; 0x2c
 8012368:	af02      	add	r7, sp, #8
 801236a:	4604      	mov	r4, r0
 801236c:	4608      	mov	r0, r1
 801236e:	4611      	mov	r1, r2
 8012370:	461a      	mov	r2, r3
 8012372:	4623      	mov	r3, r4
 8012374:	71fb      	strb	r3, [r7, #7]
 8012376:	4603      	mov	r3, r0
 8012378:	71bb      	strb	r3, [r7, #6]
 801237a:	460b      	mov	r3, r1
 801237c:	80bb      	strh	r3, [r7, #4]
 801237e:	4613      	mov	r3, r2
 8012380:	807b      	strh	r3, [r7, #2]
	static int t[12]={0};
	int segnum = _sub_addr_to_sub_num(from_addr, lsegnum);
 8012382:	79ba      	ldrb	r2, [r7, #6]
 8012384:	79fb      	ldrb	r3, [r7, #7]
 8012386:	4611      	mov	r1, r2
 8012388:	4618      	mov	r0, r3
 801238a:	f7ff fc88 	bl	8011c9e <_sub_addr_to_sub_num>
 801238e:	6178      	str	r0, [r7, #20]
	itm_debug3(DBG_PRES|DBG_CTRL, "PRC", lsegnum, p, ival);
 8012390:	79ba      	ldrb	r2, [r7, #6]
 8012392:	88b9      	ldrh	r1, [r7, #4]
 8012394:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012398:	9300      	str	r3, [sp, #0]
 801239a:	460b      	mov	r3, r1
 801239c:	4950      	ldr	r1, [pc, #320]	; (80124e0 <presence_changed+0x17c>)
 801239e:	f44f 6088 	mov.w	r0, #1088	; 0x440
 80123a2:	f7ff fc1b 	bl	8011bdc <itm_debug3>
	if ((segnum<0) || (segnum>11)) return;
 80123a6:	697b      	ldr	r3, [r7, #20]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	f2c0 8095 	blt.w	80124d8 <presence_changed+0x174>
 80123ae:	697b      	ldr	r3, [r7, #20]
 80123b0:	2b0b      	cmp	r3, #11
 80123b2:	f300 8091 	bgt.w	80124d8 <presence_changed+0x174>
	t[segnum]=p;
 80123b6:	88ba      	ldrh	r2, [r7, #4]
 80123b8:	494a      	ldr	r1, [pc, #296]	; (80124e4 <presence_changed+0x180>)
 80123ba:	697b      	ldr	r3, [r7, #20]
 80123bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	itm_debug3(DBG_PRES|DBG_CTRL, "PRS", t[0], t[1], t[2]);
 80123c0:	4b48      	ldr	r3, [pc, #288]	; (80124e4 <presence_changed+0x180>)
 80123c2:	681a      	ldr	r2, [r3, #0]
 80123c4:	4b47      	ldr	r3, [pc, #284]	; (80124e4 <presence_changed+0x180>)
 80123c6:	6859      	ldr	r1, [r3, #4]
 80123c8:	4b46      	ldr	r3, [pc, #280]	; (80124e4 <presence_changed+0x180>)
 80123ca:	689b      	ldr	r3, [r3, #8]
 80123cc:	9300      	str	r3, [sp, #0]
 80123ce:	460b      	mov	r3, r1
 80123d0:	4945      	ldr	r1, [pc, #276]	; (80124e8 <presence_changed+0x184>)
 80123d2:	f44f 6088 	mov.w	r0, #1088	; 0x440
 80123d6:	f7ff fc01 	bl	8011bdc <itm_debug3>

	uint8_t canton = blk_addr_for_sub_addr(from_addr, segnum);
 80123da:	697b      	ldr	r3, [r7, #20]
 80123dc:	b2da      	uxtb	r2, r3
 80123de:	79fb      	ldrb	r3, [r7, #7]
 80123e0:	4611      	mov	r1, r2
 80123e2:	4618      	mov	r0, r3
 80123e4:	f7ff fcc8 	bl	8011d78 <blk_addr_for_sub_addr>
 80123e8:	4603      	mov	r3, r0
 80123ea:	74fb      	strb	r3, [r7, #19]
	if (0xFF == canton) {
 80123ec:	7cfb      	ldrb	r3, [r7, #19]
 80123ee:	2bff      	cmp	r3, #255	; 0xff
 80123f0:	d106      	bne.n	8012400 <presence_changed+0x9c>
		itm_debug2(DBG_ERR|DBG_CTRL, "blk??", from_addr, segnum);
 80123f2:	79fa      	ldrb	r2, [r7, #7]
 80123f4:	697b      	ldr	r3, [r7, #20]
 80123f6:	493d      	ldr	r1, [pc, #244]	; (80124ec <presence_changed+0x188>)
 80123f8:	483d      	ldr	r0, [pc, #244]	; (80124f0 <presence_changed+0x18c>)
 80123fa:	f7ff fbd3 	bl	8011ba4 <itm_debug2>
		return;
 80123fe:	e06c      	b.n	80124da <presence_changed+0x176>
	}
	int f = 0;
 8012400:	2300      	movs	r3, #0
 8012402:	61fb      	str	r3, [r7, #28]

	for (int tn = 0; tn < NUM_TRAINS; tn++) {
 8012404:	2300      	movs	r3, #0
 8012406:	61bb      	str	r3, [r7, #24]
 8012408:	e059      	b.n	80124be <presence_changed+0x15a>
		train_ctrl_t *tvar = &trctl[tn];
 801240a:	69bb      	ldr	r3, [r7, #24]
 801240c:	00db      	lsls	r3, r3, #3
 801240e:	4a39      	ldr	r2, [pc, #228]	; (80124f4 <presence_changed+0x190>)
 8012410:	4413      	add	r3, r2
 8012412:	60fb      	str	r3, [r7, #12]
		const train_config_t *tconf = get_train_cnf(tn);
 8012414:	69b8      	ldr	r0, [r7, #24]
 8012416:	f001 fb09 	bl	8013a2c <get_train_cnf>
 801241a:	60b8      	str	r0, [r7, #8]
		// check enabled
		if (!tconf->enabled) continue;
 801241c:	68bb      	ldr	r3, [r7, #8]
 801241e:	7c9b      	ldrb	r3, [r3, #18]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d048      	beq.n	80124b6 <presence_changed+0x152>
		if (tvar->canton1_addr == canton) {
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	795b      	ldrb	r3, [r3, #5]
 8012428:	7cfa      	ldrb	r2, [r7, #19]
 801242a:	429a      	cmp	r2, r3
 801242c:	d126      	bne.n	801247c <presence_changed+0x118>
			if (p) {
 801242e:	88bb      	ldrh	r3, [r7, #4]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d006      	beq.n	8012442 <presence_changed+0xde>
				itm_debug2(DBG_PRES, "?enter c1", tn, segnum);
 8012434:	697b      	ldr	r3, [r7, #20]
 8012436:	69ba      	ldr	r2, [r7, #24]
 8012438:	492f      	ldr	r1, [pc, #188]	; (80124f8 <presence_changed+0x194>)
 801243a:	2040      	movs	r0, #64	; 0x40
 801243c:	f7ff fbb2 	bl	8011ba4 <itm_debug2>
 8012440:	e019      	b.n	8012476 <presence_changed+0x112>
			} else {
				if (tvar->c1toc2transition) {
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	79db      	ldrb	r3, [r3, #7]
 8012446:	f003 0301 	and.w	r3, r3, #1
 801244a:	b2db      	uxtb	r3, r3
 801244c:	2b00      	cmp	r3, #0
 801244e:	d00c      	beq.n	801246a <presence_changed+0x106>
					itm_debug2(DBG_PRES, "leave c1", tn, segnum);
 8012450:	697b      	ldr	r3, [r7, #20]
 8012452:	69ba      	ldr	r2, [r7, #24]
 8012454:	4929      	ldr	r1, [pc, #164]	; (80124fc <presence_changed+0x198>)
 8012456:	2040      	movs	r0, #64	; 0x40
 8012458:	f7ff fba4 	bl	8011ba4 <itm_debug2>
					train_switched_to_c2(tn, tconf, tvar, 0);
 801245c:	2300      	movs	r3, #0
 801245e:	68fa      	ldr	r2, [r7, #12]
 8012460:	68b9      	ldr	r1, [r7, #8]
 8012462:	69b8      	ldr	r0, [r7, #24]
 8012464:	f000 f856 	bl	8012514 <train_switched_to_c2>
 8012468:	e005      	b.n	8012476 <presence_changed+0x112>
				} else {
					itm_debug2(DBG_PRES, "?lv c1 no tr", tn, segnum);
 801246a:	697b      	ldr	r3, [r7, #20]
 801246c:	69ba      	ldr	r2, [r7, #24]
 801246e:	4924      	ldr	r1, [pc, #144]	; (8012500 <presence_changed+0x19c>)
 8012470:	2040      	movs	r0, #64	; 0x40
 8012472:	f7ff fb97 	bl	8011ba4 <itm_debug2>
				}

			}
			f = 1;
 8012476:	2301      	movs	r3, #1
 8012478:	61fb      	str	r3, [r7, #28]
 801247a:	e01d      	b.n	80124b8 <presence_changed+0x154>
		} else if (tvar->canton2_addr == canton) {
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	799b      	ldrb	r3, [r3, #6]
 8012480:	7cfa      	ldrb	r2, [r7, #19]
 8012482:	429a      	cmp	r2, r3
 8012484:	d118      	bne.n	80124b8 <presence_changed+0x154>
			if (p) {
 8012486:	88bb      	ldrh	r3, [r7, #4]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d00b      	beq.n	80124a4 <presence_changed+0x140>
				itm_debug2(DBG_PRES, "enter c2", tn, segnum);
 801248c:	697b      	ldr	r3, [r7, #20]
 801248e:	69ba      	ldr	r2, [r7, #24]
 8012490:	491c      	ldr	r1, [pc, #112]	; (8012504 <presence_changed+0x1a0>)
 8012492:	2040      	movs	r0, #64	; 0x40
 8012494:	f7ff fb86 	bl	8011ba4 <itm_debug2>
				tvar->c1toc2transition = 1;
 8012498:	68fa      	ldr	r2, [r7, #12]
 801249a:	79d3      	ldrb	r3, [r2, #7]
 801249c:	f043 0301 	orr.w	r3, r3, #1
 80124a0:	71d3      	strb	r3, [r2, #7]
 80124a2:	e005      	b.n	80124b0 <presence_changed+0x14c>
			} else {
				itm_debug2(DBG_PRES, "?leave c2", tn, segnum);
 80124a4:	697b      	ldr	r3, [r7, #20]
 80124a6:	69ba      	ldr	r2, [r7, #24]
 80124a8:	4917      	ldr	r1, [pc, #92]	; (8012508 <presence_changed+0x1a4>)
 80124aa:	2040      	movs	r0, #64	; 0x40
 80124ac:	f7ff fb7a 	bl	8011ba4 <itm_debug2>
			}
			f = 1;
 80124b0:	2301      	movs	r3, #1
 80124b2:	61fb      	str	r3, [r7, #28]
 80124b4:	e000      	b.n	80124b8 <presence_changed+0x154>
		if (!tconf->enabled) continue;
 80124b6:	bf00      	nop
	for (int tn = 0; tn < NUM_TRAINS; tn++) {
 80124b8:	69bb      	ldr	r3, [r7, #24]
 80124ba:	3301      	adds	r3, #1
 80124bc:	61bb      	str	r3, [r7, #24]
 80124be:	69bb      	ldr	r3, [r7, #24]
 80124c0:	2b07      	cmp	r3, #7
 80124c2:	dda2      	ble.n	801240a <presence_changed+0xa6>
		}
	}
	if (!f) {
 80124c4:	69fb      	ldr	r3, [r7, #28]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d107      	bne.n	80124da <presence_changed+0x176>
		// presence on unexpected canton
		itm_debug2(DBG_ERR|DBG_PRES, "?unexp", segnum, canton);
 80124ca:	7cfb      	ldrb	r3, [r7, #19]
 80124cc:	697a      	ldr	r2, [r7, #20]
 80124ce:	490f      	ldr	r1, [pc, #60]	; (801250c <presence_changed+0x1a8>)
 80124d0:	480f      	ldr	r0, [pc, #60]	; (8012510 <presence_changed+0x1ac>)
 80124d2:	f7ff fb67 	bl	8011ba4 <itm_debug2>
 80124d6:	e000      	b.n	80124da <presence_changed+0x176>
	if ((segnum<0) || (segnum>11)) return;
 80124d8:	bf00      	nop
	}
}
 80124da:	3724      	adds	r7, #36	; 0x24
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd90      	pop	{r4, r7, pc}
 80124e0:	08016dc4 	.word	0x08016dc4
 80124e4:	200051d0 	.word	0x200051d0
 80124e8:	08016dc8 	.word	0x08016dc8
 80124ec:	08016dcc 	.word	0x08016dcc
 80124f0:	80000400 	.word	0x80000400
 80124f4:	2000518c 	.word	0x2000518c
 80124f8:	08016dd4 	.word	0x08016dd4
 80124fc:	08016de0 	.word	0x08016de0
 8012500:	08016dec 	.word	0x08016dec
 8012504:	08016dfc 	.word	0x08016dfc
 8012508:	08016e08 	.word	0x08016e08
 801250c:	08016e14 	.word	0x08016e14
 8012510:	80000040 	.word	0x80000040

08012514 <train_switched_to_c2>:

static void set_pose_trig(int numtrain, int32_t pose);

static void train_switched_to_c2(int tn, const train_config_t *tconf, train_ctrl_t *tvar, uint8_t fromBemf)
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b086      	sub	sp, #24
 8012518:	af00      	add	r7, sp, #0
 801251a:	60f8      	str	r0, [r7, #12]
 801251c:	60b9      	str	r1, [r7, #8]
 801251e:	607a      	str	r2, [r7, #4]
 8012520:	70fb      	strb	r3, [r7, #3]
	uint8_t c1 = tvar->canton1_addr;
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	795b      	ldrb	r3, [r3, #5]
 8012526:	75fb      	strb	r3, [r7, #23]
	uint8_t c2 = tvar->canton2_addr;
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	799b      	ldrb	r3, [r3, #6]
 801252c:	75bb      	strb	r3, [r7, #22]

	itm_debug2(DBG_CTRL, "switch c2", tn, tvar->canton2_addr);
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	799b      	ldrb	r3, [r3, #6]
 8012532:	68fa      	ldr	r2, [r7, #12]
 8012534:	4918      	ldr	r1, [pc, #96]	; (8012598 <train_switched_to_c2+0x84>)
 8012536:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801253a:	f7ff fb33 	bl	8011ba4 <itm_debug2>

	tvar->canton1_addr = tvar->canton2_addr;
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	799a      	ldrb	r2, [r3, #6]
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	715a      	strb	r2, [r3, #5]
	update_c2(tn);
 8012546:	68f8      	ldr	r0, [r7, #12]
 8012548:	f7ff fcae 	bl	8011ea8 <update_c2>
			else if (tvar->_dir<0) nd = 1;
			ctrl_set_dir(tn, nd);
		}
	}
	if ((1)) {
		if ((c1 == MA_CANTON(0,1)) &&
 801254c:	7dfb      	ldrb	r3, [r7, #23]
 801254e:	2b01      	cmp	r3, #1
 8012550:	d10d      	bne.n	801256e <train_switched_to_c2+0x5a>
 8012552:	7dbb      	ldrb	r3, [r7, #22]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d10a      	bne.n	801256e <train_switched_to_c2+0x5a>
				(c2 == MA_CANTON(0,0))) {
			// 1->0
			itm_debug1(DBG_CTRL|DBG_POSE, "HI 1-0", 0);
 8012558:	2200      	movs	r2, #0
 801255a:	4910      	ldr	r1, [pc, #64]	; (801259c <train_switched_to_c2+0x88>)
 801255c:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 8012560:	f7ff fb06 	bl	8011b70 <itm_debug1>
			set_pose_trig(tn, -9000);
 8012564:	490e      	ldr	r1, [pc, #56]	; (80125a0 <train_switched_to_c2+0x8c>)
 8012566:	68f8      	ldr	r0, [r7, #12]
 8012568:	f000 f81e 	bl	80125a8 <set_pose_trig>
			// 0->1
			itm_debug1(DBG_CTRL|DBG_POSE, "HI °-1", 0);
			set_pose_trig(tn, 6000);
		}
	}
}
 801256c:	e010      	b.n	8012590 <train_switched_to_c2+0x7c>
		} else if  ((c2 == MA_CANTON(0,1)) &&
 801256e:	7dbb      	ldrb	r3, [r7, #22]
 8012570:	2b01      	cmp	r3, #1
 8012572:	d10d      	bne.n	8012590 <train_switched_to_c2+0x7c>
 8012574:	7dfb      	ldrb	r3, [r7, #23]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d10a      	bne.n	8012590 <train_switched_to_c2+0x7c>
			itm_debug1(DBG_CTRL|DBG_POSE, "HI °-1", 0);
 801257a:	2200      	movs	r2, #0
 801257c:	4909      	ldr	r1, [pc, #36]	; (80125a4 <train_switched_to_c2+0x90>)
 801257e:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 8012582:	f7ff faf5 	bl	8011b70 <itm_debug1>
			set_pose_trig(tn, 6000);
 8012586:	f241 7170 	movw	r1, #6000	; 0x1770
 801258a:	68f8      	ldr	r0, [r7, #12]
 801258c:	f000 f80c 	bl	80125a8 <set_pose_trig>
}
 8012590:	bf00      	nop
 8012592:	3718      	adds	r7, #24
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}
 8012598:	08016e1c 	.word	0x08016e1c
 801259c:	08016e28 	.word	0x08016e28
 80125a0:	ffffdcd8 	.word	0xffffdcd8
 80125a4:	08016e30 	.word	0x08016e30

080125a8 <set_pose_trig>:

static void set_pose_trig(int numtrain, int32_t pose)
{
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b084      	sub	sp, #16
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
 80125b0:	6039      	str	r1, [r7, #0]
	msg_64_t m;
	m.from = MA_CONTROL_T(numtrain);
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	b25b      	sxtb	r3, r3
 80125b6:	f003 0307 	and.w	r3, r3, #7
 80125ba:	b25b      	sxtb	r3, r3
 80125bc:	f063 032f 	orn	r3, r3, #47	; 0x2f
 80125c0:	b25b      	sxtb	r3, r3
 80125c2:	b2db      	uxtb	r3, r3
 80125c4:	727b      	strb	r3, [r7, #9]
	m.from = MA_CONTROL_T(numtrain);
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	b25b      	sxtb	r3, r3
 80125ca:	f003 0307 	and.w	r3, r3, #7
 80125ce:	b25b      	sxtb	r3, r3
 80125d0:	f063 032f 	orn	r3, r3, #47	; 0x2f
 80125d4:	b25b      	sxtb	r3, r3
 80125d6:	b2db      	uxtb	r3, r3
 80125d8:	727b      	strb	r3, [r7, #9]
	m.to =  MA_TRAIN_SC(0);
 80125da:	23c8      	movs	r3, #200	; 0xc8
 80125dc:	723b      	strb	r3, [r7, #8]
	m.cmd = CMD_POSE_SET_TRIG;
 80125de:	2350      	movs	r3, #80	; 0x50
 80125e0:	72bb      	strb	r3, [r7, #10]
	m.v32 = pose;
 80125e2:	683b      	ldr	r3, [r7, #0]
 80125e4:	60fb      	str	r3, [r7, #12]
	mqf_write_from_ctrl(&m);
 80125e6:	f107 0308 	add.w	r3, r7, #8
 80125ea:	4618      	mov	r0, r3
 80125ec:	f7ff fb22 	bl	8011c34 <mqf_write_from_ctrl>
}
 80125f0:	bf00      	nop
 80125f2:	3710      	adds	r7, #16
 80125f4:	46bd      	mov	sp, r7
 80125f6:	bd80      	pop	{r7, pc}

080125f8 <pose_triggered>:

static void pose_triggered(int tidx, train_ctrl_t *tvar, uint8_t blkaddr)
{
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b086      	sub	sp, #24
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	60f8      	str	r0, [r7, #12]
 8012600:	60b9      	str	r1, [r7, #8]
 8012602:	4613      	mov	r3, r2
 8012604:	71fb      	strb	r3, [r7, #7]
	int nd = 0;
 8012606:	2300      	movs	r3, #0
 8012608:	617b      	str	r3, [r7, #20]
	if (tvar->_dir>0) nd = -1;
 801260a:	68bb      	ldr	r3, [r7, #8]
 801260c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012610:	2b00      	cmp	r3, #0
 8012612:	dd03      	ble.n	801261c <pose_triggered+0x24>
 8012614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012618:	617b      	str	r3, [r7, #20]
 801261a:	e006      	b.n	801262a <pose_triggered+0x32>
	else if (tvar->_dir<0) nd = 1;
 801261c:	68bb      	ldr	r3, [r7, #8]
 801261e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012622:	2b00      	cmp	r3, #0
 8012624:	da01      	bge.n	801262a <pose_triggered+0x32>
 8012626:	2301      	movs	r3, #1
 8012628:	617b      	str	r3, [r7, #20]
	ctrl_set_dir(tidx, nd);
 801262a:	6979      	ldr	r1, [r7, #20]
 801262c:	68f8      	ldr	r0, [r7, #12]
 801262e:	f7ff fcad 	bl	8011f8c <ctrl_set_dir>
}
 8012632:	bf00      	nop
 8012634:	3718      	adds	r7, #24
 8012636:	46bd      	mov	sp, r7
 8012638:	bd80      	pop	{r7, pc}
	...

0801263c <itm_debug1>:
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b086      	sub	sp, #24
 8012640:	af02      	add	r7, sp, #8
 8012642:	60f8      	str	r0, [r7, #12]
 8012644:	60b9      	str	r1, [r7, #8]
 8012646:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8012648:	4b08      	ldr	r3, [pc, #32]	; (801266c <itm_debug1+0x30>)
 801264a:	681a      	ldr	r2, [r3, #0]
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	4013      	ands	r3, r2
 8012650:	2b00      	cmp	r3, #0
 8012652:	d007      	beq.n	8012664 <itm_debug1+0x28>
 8012654:	2301      	movs	r3, #1
 8012656:	9300      	str	r3, [sp, #0]
 8012658:	2300      	movs	r3, #0
 801265a:	2200      	movs	r2, #0
 801265c:	6879      	ldr	r1, [r7, #4]
 801265e:	68b8      	ldr	r0, [r7, #8]
 8012660:	f003 ff6a 	bl	8016538 <_itm_debug3>
}
 8012664:	bf00      	nop
 8012666:	3710      	adds	r7, #16
 8012668:	46bd      	mov	sp, r7
 801266a:	bd80      	pop	{r7, pc}
 801266c:	20000538 	.word	0x20000538

08012670 <itm_debug3>:
{
 8012670:	b580      	push	{r7, lr}
 8012672:	b086      	sub	sp, #24
 8012674:	af02      	add	r7, sp, #8
 8012676:	60f8      	str	r0, [r7, #12]
 8012678:	60b9      	str	r1, [r7, #8]
 801267a:	607a      	str	r2, [r7, #4]
 801267c:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 801267e:	4b09      	ldr	r3, [pc, #36]	; (80126a4 <itm_debug3+0x34>)
 8012680:	681a      	ldr	r2, [r3, #0]
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	4013      	ands	r3, r2
 8012686:	2b00      	cmp	r3, #0
 8012688:	d007      	beq.n	801269a <itm_debug3+0x2a>
 801268a:	2303      	movs	r3, #3
 801268c:	9300      	str	r3, [sp, #0]
 801268e:	69bb      	ldr	r3, [r7, #24]
 8012690:	683a      	ldr	r2, [r7, #0]
 8012692:	6879      	ldr	r1, [r7, #4]
 8012694:	68b8      	ldr	r0, [r7, #8]
 8012696:	f003 ff4f 	bl	8016538 <_itm_debug3>
}
 801269a:	bf00      	nop
 801269c:	3710      	adds	r7, #16
 801269e:	46bd      	mov	sp, r7
 80126a0:	bd80      	pop	{r7, pc}
 80126a2:	bf00      	nop
 80126a4:	20000538 	.word	0x20000538

080126a8 <canton_error>:
#define ERR_STRANGE			-4242

int trainctl_error(char l, int code, const char *msg);

static inline int canton_error(int code, const char *msg)
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b082      	sub	sp, #8
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
 80126b0:	6039      	str	r1, [r7, #0]
	return trainctl_error('C', code, msg);
 80126b2:	683a      	ldr	r2, [r7, #0]
 80126b4:	6879      	ldr	r1, [r7, #4]
 80126b6:	2043      	movs	r0, #67	; 0x43
 80126b8:	f001 f808 	bl	80136cc <trainctl_error>
 80126bc:	4603      	mov	r3, r0
}
 80126be:	4618      	mov	r0, r3
 80126c0:	3708      	adds	r7, #8
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd80      	pop	{r7, pc}

080126c6 <canton_error_rc>:
static inline int canton_error_rc(int rc, int code, const char *msg)
{
 80126c6:	b580      	push	{r7, lr}
 80126c8:	b084      	sub	sp, #16
 80126ca:	af00      	add	r7, sp, #0
 80126cc:	60f8      	str	r0, [r7, #12]
 80126ce:	60b9      	str	r1, [r7, #8]
 80126d0:	607a      	str	r2, [r7, #4]
	trainctl_error('C', code, msg);
 80126d2:	687a      	ldr	r2, [r7, #4]
 80126d4:	68b9      	ldr	r1, [r7, #8]
 80126d6:	2043      	movs	r0, #67	; 0x43
 80126d8:	f000 fff8 	bl	80136cc <trainctl_error>
	return rc;
 80126dc:	68fb      	ldr	r3, [r7, #12]
}
 80126de:	4618      	mov	r0, r3
 80126e0:	3710      	adds	r7, #16
 80126e2:	46bd      	mov	sp, r7
 80126e4:	bd80      	pop	{r7, pc}
	...

080126e8 <mqf_read_to_canton>:
/* turnout command */
#define CMD_TURNOUT_A		0x31
#define CMD_TURNOUT_B		0x32


LFMQUEUE_DEF_H(to_canton, msg_64_t)
 80126e8:	b580      	push	{r7, lr}
 80126ea:	b082      	sub	sp, #8
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]
 80126f0:	6879      	ldr	r1, [r7, #4]
 80126f2:	4804      	ldr	r0, [pc, #16]	; (8012704 <mqf_read_to_canton+0x1c>)
 80126f4:	f004 f8a0 	bl	8016838 <mqf_read>
 80126f8:	4603      	mov	r3, r0
 80126fa:	4618      	mov	r0, r3
 80126fc:	3708      	adds	r7, #8
 80126fe:	46bd      	mov	sp, r7
 8012700:	bd80      	pop	{r7, pc}
 8012702:	bf00      	nop
 8012704:	2000049c 	.word	0x2000049c

08012708 <mqf_write_from_canton>:
LFMQUEUE_DEF_H(from_canton, msg_64_t)
 8012708:	b580      	push	{r7, lr}
 801270a:	b082      	sub	sp, #8
 801270c:	af00      	add	r7, sp, #0
 801270e:	6078      	str	r0, [r7, #4]
 8012710:	6879      	ldr	r1, [r7, #4]
 8012712:	4804      	ldr	r0, [pc, #16]	; (8012724 <mqf_write_from_canton+0x1c>)
 8012714:	f004 f816 	bl	8016744 <mqf_write>
 8012718:	4603      	mov	r3, r0
 801271a:	4618      	mov	r0, r3
 801271c:	3708      	adds	r7, #8
 801271e:	46bd      	mov	sp, r7
 8012720:	bd80      	pop	{r7, pc}
 8012722:	bf00      	nop
 8012724:	200004a8 	.word	0x200004a8

08012728 <canton_reset>:

static void canton_set_pwm(int cn, const canton_config_t *c, canton_vars_t *v,  int dir, int duty);
void canton_set_volt(int cn, const canton_config_t *c, canton_vars_t *v, int voltidx);

static void canton_reset(void)
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b086      	sub	sp, #24
 801272c:	af02      	add	r7, sp, #8
	for (int i = 0; i<NUM_LOCAL_CANTONS_SW; i++) {
 801272e:	2300      	movs	r3, #0
 8012730:	60fb      	str	r3, [r7, #12]
 8012732:	e01c      	b.n	801276e <canton_reset+0x46>
		USE_CANTON(i)
 8012734:	68f8      	ldr	r0, [r7, #12]
 8012736:	f001 f951 	bl	80139dc <get_canton_cnf>
 801273a:	60b8      	str	r0, [r7, #8]
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	00db      	lsls	r3, r3, #3
 8012740:	4a0e      	ldr	r2, [pc, #56]	; (801277c <canton_reset+0x54>)
 8012742:	4413      	add	r3, r2
 8012744:	607b      	str	r3, [r7, #4]
		cvars->cur_dir = 99;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	2263      	movs	r2, #99	; 0x63
 801274a:	701a      	strb	r2, [r3, #0]
		canton_set_pwm(i, cconf, cvars, 0, 0);
 801274c:	2300      	movs	r3, #0
 801274e:	9300      	str	r3, [sp, #0]
 8012750:	2300      	movs	r3, #0
 8012752:	687a      	ldr	r2, [r7, #4]
 8012754:	68b9      	ldr	r1, [r7, #8]
 8012756:	68f8      	ldr	r0, [r7, #12]
 8012758:	f000 f944 	bl	80129e4 <canton_set_pwm>
		canton_set_volt(i, cconf, cvars,  7);
 801275c:	2307      	movs	r3, #7
 801275e:	687a      	ldr	r2, [r7, #4]
 8012760:	68b9      	ldr	r1, [r7, #8]
 8012762:	68f8      	ldr	r0, [r7, #12]
 8012764:	f000 fa94 	bl	8012c90 <canton_set_volt>
	for (int i = 0; i<NUM_LOCAL_CANTONS_SW; i++) {
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	3301      	adds	r3, #1
 801276c:	60fb      	str	r3, [r7, #12]
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	2b07      	cmp	r3, #7
 8012772:	dddf      	ble.n	8012734 <canton_reset+0xc>
	}
}
 8012774:	bf00      	nop
 8012776:	3710      	adds	r7, #16
 8012778:	46bd      	mov	sp, r7
 801277a:	bd80      	pop	{r7, pc}
 801277c:	20005220 	.word	0x20005220

08012780 <handle_canton_cmd>:

static uint8_t test_mode = 0;
static uint8_t testerAddr = 0;

static void handle_canton_cmd(int cidx, msg_64_t *m)
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b086      	sub	sp, #24
 8012784:	af02      	add	r7, sp, #8
 8012786:	6078      	str	r0, [r7, #4]
 8012788:	6039      	str	r1, [r7, #0]
	if (m->cmd & 0x40) {
 801278a:	683b      	ldr	r3, [r7, #0]
 801278c:	789b      	ldrb	r3, [r3, #2]
 801278e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012792:	2b00      	cmp	r3, #0
 8012794:	d00b      	beq.n	80127ae <handle_canton_cmd+0x2e>
		itm_debug1(DBG_LOWCTRL, "msg-bemf", m->to);
 8012796:	683b      	ldr	r3, [r7, #0]
 8012798:	781b      	ldrb	r3, [r3, #0]
 801279a:	461a      	mov	r2, r3
 801279c:	493a      	ldr	r1, [pc, #232]	; (8012888 <handle_canton_cmd+0x108>)
 801279e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80127a2:	f7ff ff4b 	bl	801263c <itm_debug1>
		bemf_msg(m);
 80127a6:	6838      	ldr	r0, [r7, #0]
 80127a8:	f000 fbe8 	bl	8012f7c <bemf_msg>
		return;
 80127ac:	e069      	b.n	8012882 <handle_canton_cmd+0x102>
	}


	USE_CANTON(cidx)
 80127ae:	6878      	ldr	r0, [r7, #4]
 80127b0:	f001 f914 	bl	80139dc <get_canton_cnf>
 80127b4:	60f8      	str	r0, [r7, #12]
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	00db      	lsls	r3, r3, #3
 80127ba:	4a34      	ldr	r2, [pc, #208]	; (801288c <handle_canton_cmd+0x10c>)
 80127bc:	4413      	add	r3, r2
 80127be:	60bb      	str	r3, [r7, #8]
	if (!cvars) {
 80127c0:	68bb      	ldr	r3, [r7, #8]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d105      	bne.n	80127d2 <handle_canton_cmd+0x52>
		itm_debug1(DBG_LOWCTRL|DBG_ERR, "no cvars", cidx);
 80127c6:	687a      	ldr	r2, [r7, #4]
 80127c8:	4931      	ldr	r1, [pc, #196]	; (8012890 <handle_canton_cmd+0x110>)
 80127ca:	4832      	ldr	r0, [pc, #200]	; (8012894 <handle_canton_cmd+0x114>)
 80127cc:	f7ff ff36 	bl	801263c <itm_debug1>
		return;
 80127d0:	e057      	b.n	8012882 <handle_canton_cmd+0x102>
	}
	switch (m->cmd) {
 80127d2:	683b      	ldr	r3, [r7, #0]
 80127d4:	789b      	ldrb	r3, [r3, #2]
 80127d6:	2b01      	cmp	r3, #1
 80127d8:	d016      	beq.n	8012808 <handle_canton_cmd+0x88>
 80127da:	2b02      	cmp	r3, #2
 80127dc:	d148      	bne.n	8012870 <handle_canton_cmd+0xf0>
	case CMD_STOP:
		itm_debug1(DBG_LOWCTRL, "CMD STOP", 0);
 80127de:	2200      	movs	r2, #0
 80127e0:	492d      	ldr	r1, [pc, #180]	; (8012898 <handle_canton_cmd+0x118>)
 80127e2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80127e6:	f7ff ff29 	bl	801263c <itm_debug1>
		canton_set_pwm(cidx, cconf, cvars, 0, 0);
 80127ea:	2300      	movs	r3, #0
 80127ec:	9300      	str	r3, [sp, #0]
 80127ee:	2300      	movs	r3, #0
 80127f0:	68ba      	ldr	r2, [r7, #8]
 80127f2:	68f9      	ldr	r1, [r7, #12]
 80127f4:	6878      	ldr	r0, [r7, #4]
 80127f6:	f000 f8f5 	bl	80129e4 <canton_set_pwm>
		canton_set_volt(cidx, cconf, cvars,  7);
 80127fa:	2307      	movs	r3, #7
 80127fc:	68ba      	ldr	r2, [r7, #8]
 80127fe:	68f9      	ldr	r1, [r7, #12]
 8012800:	6878      	ldr	r0, [r7, #4]
 8012802:	f000 fa45 	bl	8012c90 <canton_set_volt>
		break;
 8012806:	e03c      	b.n	8012882 <handle_canton_cmd+0x102>
	case CMD_SETVPWM:
		itm_debug3(DBG_LOWCTRL, "SETVPWM", cidx, m->v1u, m->v2);
 8012808:	683b      	ldr	r3, [r7, #0]
 801280a:	889b      	ldrh	r3, [r3, #4]
 801280c:	461a      	mov	r2, r3
 801280e:	683b      	ldr	r3, [r7, #0]
 8012810:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012814:	9300      	str	r3, [sp, #0]
 8012816:	4613      	mov	r3, r2
 8012818:	687a      	ldr	r2, [r7, #4]
 801281a:	4920      	ldr	r1, [pc, #128]	; (801289c <handle_canton_cmd+0x11c>)
 801281c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012820:	f7ff ff26 	bl	8012670 <itm_debug3>
		canton_set_pwm(cidx, cconf, cvars, SIGNOF0(m->v2), abs(m->v2));
 8012824:	683b      	ldr	r3, [r7, #0]
 8012826:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801282a:	2b00      	cmp	r3, #0
 801282c:	db09      	blt.n	8012842 <handle_canton_cmd+0xc2>
 801282e:	683b      	ldr	r3, [r7, #0]
 8012830:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012834:	2b00      	cmp	r3, #0
 8012836:	bfcc      	ite	gt
 8012838:	2301      	movgt	r3, #1
 801283a:	2300      	movle	r3, #0
 801283c:	b2db      	uxtb	r3, r3
 801283e:	461a      	mov	r2, r3
 8012840:	e001      	b.n	8012846 <handle_canton_cmd+0xc6>
 8012842:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012846:	683b      	ldr	r3, [r7, #0]
 8012848:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801284c:	2b00      	cmp	r3, #0
 801284e:	bfb8      	it	lt
 8012850:	425b      	neglt	r3, r3
 8012852:	9300      	str	r3, [sp, #0]
 8012854:	4613      	mov	r3, r2
 8012856:	68ba      	ldr	r2, [r7, #8]
 8012858:	68f9      	ldr	r1, [r7, #12]
 801285a:	6878      	ldr	r0, [r7, #4]
 801285c:	f000 f8c2 	bl	80129e4 <canton_set_pwm>
		canton_set_volt(cidx, cconf, cvars,  m->v1u);
 8012860:	683b      	ldr	r3, [r7, #0]
 8012862:	889b      	ldrh	r3, [r3, #4]
 8012864:	68ba      	ldr	r2, [r7, #8]
 8012866:	68f9      	ldr	r1, [r7, #12]
 8012868:	6878      	ldr	r0, [r7, #4]
 801286a:	f000 fa11 	bl	8012c90 <canton_set_volt>
		break;
 801286e:	e008      	b.n	8012882 <handle_canton_cmd+0x102>
	default:
		itm_debug1(DBG_LOWCTRL, "not handled msg", m->cmd);
 8012870:	683b      	ldr	r3, [r7, #0]
 8012872:	789b      	ldrb	r3, [r3, #2]
 8012874:	461a      	mov	r2, r3
 8012876:	490a      	ldr	r1, [pc, #40]	; (80128a0 <handle_canton_cmd+0x120>)
 8012878:	f44f 7080 	mov.w	r0, #256	; 0x100
 801287c:	f7ff fede 	bl	801263c <itm_debug1>
		break;
 8012880:	bf00      	nop
	}
}
 8012882:	3710      	adds	r7, #16
 8012884:	46bd      	mov	sp, r7
 8012886:	bd80      	pop	{r7, pc}
 8012888:	08016e38 	.word	0x08016e38
 801288c:	20005220 	.word	0x20005220
 8012890:	08016e44 	.word	0x08016e44
 8012894:	80000100 	.word	0x80000100
 8012898:	08016e50 	.word	0x08016e50
 801289c:	08016e5c 	.word	0x08016e5c
 80128a0:	08016e64 	.word	0x08016e64

080128a4 <canton_tick>:


void canton_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt)
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b08c      	sub	sp, #48	; 0x30
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	60f8      	str	r0, [r7, #12]
 80128ac:	60b9      	str	r1, [r7, #8]
 80128ae:	607a      	str	r2, [r7, #4]
	static int first=1;
	if (first) {
 80128b0:	4b46      	ldr	r3, [pc, #280]	; (80129cc <canton_tick+0x128>)
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d006      	beq.n	80128c6 <canton_tick+0x22>
		first = 0;
 80128b8:	4b44      	ldr	r3, [pc, #272]	; (80129cc <canton_tick+0x128>)
 80128ba:	2200      	movs	r2, #0
 80128bc:	601a      	str	r2, [r3, #0]
		canton_reset();
 80128be:	f7ff ff33 	bl	8012728 <canton_reset>
		bemf_reset();
 80128c2:	f000 fb41 	bl	8012f48 <bemf_reset>
	}
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_canton(&m);
 80128c6:	f107 0318 	add.w	r3, r7, #24
 80128ca:	4618      	mov	r0, r3
 80128cc:	f7ff ff0c 	bl	80126e8 <mqf_read_to_canton>
 80128d0:	6278      	str	r0, [r7, #36]	; 0x24
		if (rc) break;
 80128d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d174      	bne.n	80129c2 <canton_tick+0x11e>
        switch (m.cmd) {
 80128d8:	7ebb      	ldrb	r3, [r7, #26]
 80128da:	2bfc      	cmp	r3, #252	; 0xfc
 80128dc:	d009      	beq.n	80128f2 <canton_tick+0x4e>
 80128de:	2bfc      	cmp	r3, #252	; 0xfc
 80128e0:	db16      	blt.n	8012910 <canton_tick+0x6c>
 80128e2:	3bfe      	subs	r3, #254	; 0xfe
 80128e4:	2b01      	cmp	r3, #1
 80128e6:	d813      	bhi.n	8012910 <canton_tick+0x6c>
        case CMD_RESET: // FALLTHRU
        case CMD_EMERGENCY_STOP:
            canton_reset();
 80128e8:	f7ff ff1e 	bl	8012728 <canton_reset>
            bemf_reset();
 80128ec:	f000 fb2c 	bl	8012f48 <bemf_reset>
            break;
 80128f0:	e00e      	b.n	8012910 <canton_tick+0x6c>
        case CMD_TEST_MODE:
            test_mode = m.v1u;
 80128f2:	8bbb      	ldrh	r3, [r7, #28]
 80128f4:	b2da      	uxtb	r2, r3
 80128f6:	4b36      	ldr	r3, [pc, #216]	; (80129d0 <canton_tick+0x12c>)
 80128f8:	701a      	strb	r2, [r3, #0]
            testerAddr = m.from;
 80128fa:	7e7a      	ldrb	r2, [r7, #25]
 80128fc:	4b35      	ldr	r3, [pc, #212]	; (80129d4 <canton_tick+0x130>)
 80128fe:	701a      	strb	r2, [r3, #0]
            bemf_test_all = 1; //(m.to == MA_BROADCAST) ? 1 : 0;
 8012900:	4b35      	ldr	r3, [pc, #212]	; (80129d8 <canton_tick+0x134>)
 8012902:	2201      	movs	r2, #1
 8012904:	701a      	strb	r2, [r3, #0]
            bemf_test_mode = test_mode;
 8012906:	4b32      	ldr	r3, [pc, #200]	; (80129d0 <canton_tick+0x12c>)
 8012908:	781a      	ldrb	r2, [r3, #0]
 801290a:	4b34      	ldr	r3, [pc, #208]	; (80129dc <canton_tick+0x138>)
 801290c:	701a      	strb	r2, [r3, #0]
            break;
 801290e:	bf00      	nop
        }
        if (test_mode && (testerAddr != m.from)) {
 8012910:	4b2f      	ldr	r3, [pc, #188]	; (80129d0 <canton_tick+0x12c>)
 8012912:	781b      	ldrb	r3, [r3, #0]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d004      	beq.n	8012922 <canton_tick+0x7e>
 8012918:	7e7a      	ldrb	r2, [r7, #25]
 801291a:	4b2e      	ldr	r3, [pc, #184]	; (80129d4 <canton_tick+0x130>)
 801291c:	781b      	ldrb	r3, [r3, #0]
 801291e:	429a      	cmp	r2, r3
 8012920:	d14d      	bne.n	80129be <canton_tick+0x11a>
            continue;
        }

        int cidx = -1;
 8012922:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012926:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (IS_BROADCAST(m.to)) {
 8012928:	7e3b      	ldrb	r3, [r7, #24]
 801292a:	2bff      	cmp	r3, #255	; 0xff
 801292c:	d103      	bne.n	8012936 <canton_tick+0x92>
        	cidx = -1;
 801292e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012932:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012934:	e011      	b.n	801295a <canton_tick+0xb6>
        } else if (IS_CANTON(m.to)) {
 8012936:	7e3b      	ldrb	r3, [r7, #24]
 8012938:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801293c:	2b00      	cmp	r3, #0
 801293e:	d104      	bne.n	801294a <canton_tick+0xa6>
        	cidx = m.to & 0x07;
 8012940:	7e3b      	ldrb	r3, [r7, #24]
 8012942:	f003 0307 	and.w	r3, r3, #7
 8012946:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012948:	e007      	b.n	801295a <canton_tick+0xb6>
        } else {
			itm_debug1(DBG_LOWCTRL, "not handled msg", m.cmd);
 801294a:	7ebb      	ldrb	r3, [r7, #26]
 801294c:	461a      	mov	r2, r3
 801294e:	4924      	ldr	r1, [pc, #144]	; (80129e0 <canton_tick+0x13c>)
 8012950:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012954:	f7ff fe72 	bl	801263c <itm_debug1>
			continue;
 8012958:	e032      	b.n	80129c0 <canton_tick+0x11c>
        }
        if ((test_mode==1) && (CMD_SETVPWM == m.cmd)) {
 801295a:	4b1d      	ldr	r3, [pc, #116]	; (80129d0 <canton_tick+0x12c>)
 801295c:	781b      	ldrb	r3, [r3, #0]
 801295e:	2b01      	cmp	r3, #1
 8012960:	d113      	bne.n	801298a <canton_tick+0xe6>
 8012962:	7ebb      	ldrb	r3, [r7, #26]
 8012964:	2b01      	cmp	r3, #1
 8012966:	d110      	bne.n	801298a <canton_tick+0xe6>
        	// in test mode, forward CMD_SETVPWM to UI for display
        	msg_64_t m2 = m;
 8012968:	f107 0310 	add.w	r3, r7, #16
 801296c:	f107 0218 	add.w	r2, r7, #24
 8012970:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012974:	e883 0003 	stmia.w	r3, {r0, r1}
        	m2.from = m2.to;
 8012978:	7c3b      	ldrb	r3, [r7, #16]
 801297a:	747b      	strb	r3, [r7, #17]
        	m2.to = MA_UI(1);
 801297c:	2381      	movs	r3, #129	; 0x81
 801297e:	743b      	strb	r3, [r7, #16]
     		mqf_write_from_canton(&m2);
 8012980:	f107 0310 	add.w	r3, r7, #16
 8012984:	4618      	mov	r0, r3
 8012986:	f7ff febf 	bl	8012708 <mqf_write_from_canton>
       	}
        if (cidx>=0) handle_canton_cmd(cidx, &m);
 801298a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801298c:	2b00      	cmp	r3, #0
 801298e:	db06      	blt.n	801299e <canton_tick+0xfa>
 8012990:	f107 0318 	add.w	r3, r7, #24
 8012994:	4619      	mov	r1, r3
 8012996:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012998:	f7ff fef2 	bl	8012780 <handle_canton_cmd>
 801299c:	e793      	b.n	80128c6 <canton_tick+0x22>
        else {
        	// broadcast
        	for (int i=0; i<NUM_LOCAL_CANTONS_HW; i++) {
 801299e:	2300      	movs	r3, #0
 80129a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80129a2:	e008      	b.n	80129b6 <canton_tick+0x112>
        		handle_canton_cmd(i, &m);
 80129a4:	f107 0318 	add.w	r3, r7, #24
 80129a8:	4619      	mov	r1, r3
 80129aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80129ac:	f7ff fee8 	bl	8012780 <handle_canton_cmd>
        	for (int i=0; i<NUM_LOCAL_CANTONS_HW; i++) {
 80129b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129b2:	3301      	adds	r3, #1
 80129b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80129b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129b8:	2b04      	cmp	r3, #4
 80129ba:	ddf3      	ble.n	80129a4 <canton_tick+0x100>
 80129bc:	e783      	b.n	80128c6 <canton_tick+0x22>
            continue;
 80129be:	bf00      	nop
	for (;;) {
 80129c0:	e781      	b.n	80128c6 <canton_tick+0x22>
        	}
        }
	}
}
 80129c2:	bf00      	nop
 80129c4:	3730      	adds	r7, #48	; 0x30
 80129c6:	46bd      	mov	sp, r7
 80129c8:	bd80      	pop	{r7, pc}
 80129ca:	bf00      	nop
 80129cc:	2000020c 	.word	0x2000020c
 80129d0:	20005260 	.word	0x20005260
 80129d4:	20005261 	.word	0x20005261
 80129d8:	20005263 	.word	0x20005263
 80129dc:	20005262 	.word	0x20005262
 80129e0:	08016e64 	.word	0x08016e64

080129e4 <canton_set_pwm>:
#define USE_PWM_STOP 0
/*
 * it seems that output goes to high impedence when we stop pwm ????
 */
static void canton_set_pwm(int cidx, const canton_config_t *c, canton_vars_t *v,  int dir, int duty)
{
 80129e4:	b580      	push	{r7, lr}
 80129e6:	b08a      	sub	sp, #40	; 0x28
 80129e8:	af02      	add	r7, sp, #8
 80129ea:	60f8      	str	r0, [r7, #12]
 80129ec:	60b9      	str	r1, [r7, #8]
 80129ee:	607a      	str	r2, [r7, #4]
 80129f0:	603b      	str	r3, [r7, #0]
	itm_debug3(DBG_LOWCTRL, "c/set_pwm", cidx, dir, duty);
 80129f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129f4:	9300      	str	r3, [sp, #0]
 80129f6:	683b      	ldr	r3, [r7, #0]
 80129f8:	68fa      	ldr	r2, [r7, #12]
 80129fa:	499a      	ldr	r1, [pc, #616]	; (8012c64 <canton_set_pwm+0x280>)
 80129fc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012a00:	f7ff fe36 	bl	8012670 <itm_debug3>
	int t = 2*duty; // with centered pwm (or normal)
 8012a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a06:	005b      	lsls	r3, r3, #1
 8012a08:	617b      	str	r3, [r7, #20]

	if ((v->cur_dir == dir) && (v->cur_pwm_duty==duty)) {
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	f993 3000 	ldrsb.w	r3, [r3]
 8012a10:	461a      	mov	r2, r3
 8012a12:	683b      	ldr	r3, [r7, #0]
 8012a14:	4293      	cmp	r3, r2
 8012a16:	d10c      	bne.n	8012a32 <canton_set_pwm+0x4e>
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	885b      	ldrh	r3, [r3, #2]
 8012a1c:	461a      	mov	r2, r3
 8012a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a20:	4293      	cmp	r3, r2
 8012a22:	d106      	bne.n	8012a32 <canton_set_pwm+0x4e>
		itm_debug1(DBG_LOWCTRL, "c/same", duty);
 8012a24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a26:	4990      	ldr	r1, [pc, #576]	; (8012c68 <canton_set_pwm+0x284>)
 8012a28:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012a2c:	f7ff fe06 	bl	801263c <itm_debug1>
		return;
 8012a30:	e114      	b.n	8012c5c <canton_set_pwm+0x278>
	}

	TIM_HandleTypeDef *pwm_timer = CantonTimerHandles[c->pwm_timer_num];
 8012a32:	68bb      	ldr	r3, [r7, #8]
 8012a34:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8012a38:	461a      	mov	r2, r3
 8012a3a:	4b8c      	ldr	r3, [pc, #560]	; (8012c6c <canton_set_pwm+0x288>)
 8012a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a40:	613b      	str	r3, [r7, #16]
	if (!pwm_timer) {
 8012a42:	693b      	ldr	r3, [r7, #16]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d108      	bne.n	8012a5a <canton_set_pwm+0x76>
		itm_debug1(DBG_LOWCTRL|DBG_ERR, "c/notim", c->pwm_timer_num);
 8012a48:	68bb      	ldr	r3, [r7, #8]
 8012a4a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8012a4e:	461a      	mov	r2, r3
 8012a50:	4987      	ldr	r1, [pc, #540]	; (8012c70 <canton_set_pwm+0x28c>)
 8012a52:	4888      	ldr	r0, [pc, #544]	; (8012c74 <canton_set_pwm+0x290>)
 8012a54:	f7ff fdf2 	bl	801263c <itm_debug1>
		return;
 8012a58:	e100      	b.n	8012c5c <canton_set_pwm+0x278>
	}
	if (v->cur_dir != dir) {
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	f993 3000 	ldrsb.w	r3, [r3]
 8012a60:	461a      	mov	r2, r3
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	4293      	cmp	r3, r2
 8012a66:	d03c      	beq.n	8012ae2 <canton_set_pwm+0xfe>
		v->cur_dir = dir;
 8012a68:	683b      	ldr	r3, [r7, #0]
 8012a6a:	b25a      	sxtb	r2, r3
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	701a      	strb	r2, [r3, #0]
		itm_debug3(DBG_LOWCTRL, "set dir", dir, c->ch0, c->ch1);
 8012a70:	68bb      	ldr	r3, [r7, #8]
 8012a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a74:	461a      	mov	r2, r3
 8012a76:	68bb      	ldr	r3, [r7, #8]
 8012a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a7a:	9300      	str	r3, [sp, #0]
 8012a7c:	4613      	mov	r3, r2
 8012a7e:	683a      	ldr	r2, [r7, #0]
 8012a80:	497d      	ldr	r1, [pc, #500]	; (8012c78 <canton_set_pwm+0x294>)
 8012a82:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012a86:	f7ff fdf3 	bl	8012670 <itm_debug3>
		if (dir>0) {
 8012a8a:	683b      	ldr	r3, [r7, #0]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	dd0c      	ble.n	8012aaa <canton_set_pwm+0xc6>
			if (USE_PWM_STOP) my_HAL_TIM_PWM_Stop(pwm_timer, c->ch1);
			else HAL_TIM_PWM_Start(pwm_timer, c->ch1);
 8012a90:	68bb      	ldr	r3, [r7, #8]
 8012a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a94:	4619      	mov	r1, r3
 8012a96:	6938      	ldr	r0, [r7, #16]
 8012a98:	f7f4 fef4 	bl	8007884 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(pwm_timer, c->ch0);
 8012a9c:	68bb      	ldr	r3, [r7, #8]
 8012a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012aa0:	4619      	mov	r1, r3
 8012aa2:	6938      	ldr	r0, [r7, #16]
 8012aa4:	f7f4 feee 	bl	8007884 <HAL_TIM_PWM_Start>
 8012aa8:	e01b      	b.n	8012ae2 <canton_set_pwm+0xfe>
		} else if (dir<0) {
 8012aaa:	683b      	ldr	r3, [r7, #0]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	da0c      	bge.n	8012aca <canton_set_pwm+0xe6>
			if (USE_PWM_STOP) my_HAL_TIM_PWM_Stop(pwm_timer, c->ch0);
			else HAL_TIM_PWM_Start(pwm_timer, c->ch0);
 8012ab0:	68bb      	ldr	r3, [r7, #8]
 8012ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ab4:	4619      	mov	r1, r3
 8012ab6:	6938      	ldr	r0, [r7, #16]
 8012ab8:	f7f4 fee4 	bl	8007884 <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(pwm_timer, c->ch1);
 8012abc:	68bb      	ldr	r3, [r7, #8]
 8012abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ac0:	4619      	mov	r1, r3
 8012ac2:	6938      	ldr	r0, [r7, #16]
 8012ac4:	f7f4 fede 	bl	8007884 <HAL_TIM_PWM_Start>
 8012ac8:	e00b      	b.n	8012ae2 <canton_set_pwm+0xfe>
		} else {
			if (USE_PWM_STOP) {
				my_HAL_TIM_PWM_Stop(pwm_timer, c->ch0);
				my_HAL_TIM_PWM_Stop(pwm_timer, c->ch1);
			} else {
				HAL_TIM_PWM_Start(pwm_timer, c->ch0);
 8012aca:	68bb      	ldr	r3, [r7, #8]
 8012acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ace:	4619      	mov	r1, r3
 8012ad0:	6938      	ldr	r0, [r7, #16]
 8012ad2:	f7f4 fed7 	bl	8007884 <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(pwm_timer, c->ch1);
 8012ad6:	68bb      	ldr	r3, [r7, #8]
 8012ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ada:	4619      	mov	r1, r3
 8012adc:	6938      	ldr	r0, [r7, #16]
 8012ade:	f7f4 fed1 	bl	8007884 <HAL_TIM_PWM_Start>
			}
		}
	}
	if (!dir) {
 8012ae2:	683b      	ldr	r3, [r7, #0]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d101      	bne.n	8012aec <canton_set_pwm+0x108>
		duty = 0;
 8012ae8:	2300      	movs	r3, #0
 8012aea:	62bb      	str	r3, [r7, #40]	; 0x28
		if (USE_PWM_STOP) {
			v->cur_pwm_duty = 0;
			return;
		}
	}
	v->cur_pwm_duty = duty;
 8012aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aee:	b29a      	uxth	r2, r3
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	805a      	strh	r2, [r3, #2]
	uint32_t chon;
	uint32_t choff;
	if (dir>0) {
 8012af4:	683b      	ldr	r3, [r7, #0]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	dd06      	ble.n	8012b08 <canton_set_pwm+0x124>
		chon = c->ch0;
 8012afa:	68bb      	ldr	r3, [r7, #8]
 8012afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012afe:	61bb      	str	r3, [r7, #24]
		choff = c->ch1;
 8012b00:	68bb      	ldr	r3, [r7, #8]
 8012b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b04:	61fb      	str	r3, [r7, #28]
 8012b06:	e005      	b.n	8012b14 <canton_set_pwm+0x130>
	} else {
		chon = c->ch1;
 8012b08:	68bb      	ldr	r3, [r7, #8]
 8012b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b0c:	61bb      	str	r3, [r7, #24]
		choff = c->ch0;
 8012b0e:	68bb      	ldr	r3, [r7, #8]
 8012b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b12:	61fb      	str	r3, [r7, #28]
	}
	if (!USE_PWM_STOP) {
		switch (choff) {
 8012b14:	69fb      	ldr	r3, [r7, #28]
 8012b16:	2b0c      	cmp	r3, #12
 8012b18:	d848      	bhi.n	8012bac <canton_set_pwm+0x1c8>
 8012b1a:	a201      	add	r2, pc, #4	; (adr r2, 8012b20 <canton_set_pwm+0x13c>)
 8012b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b20:	08012b55 	.word	0x08012b55
 8012b24:	08012bad 	.word	0x08012bad
 8012b28:	08012bad 	.word	0x08012bad
 8012b2c:	08012bad 	.word	0x08012bad
 8012b30:	08012b6b 	.word	0x08012b6b
 8012b34:	08012bad 	.word	0x08012bad
 8012b38:	08012bad 	.word	0x08012bad
 8012b3c:	08012bad 	.word	0x08012bad
 8012b40:	08012b81 	.word	0x08012b81
 8012b44:	08012bad 	.word	0x08012bad
 8012b48:	08012bad 	.word	0x08012bad
 8012b4c:	08012bad 	.word	0x08012bad
 8012b50:	08012b97 	.word	0x08012b97
		case TIM_CHANNEL_1:
			itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH1/CCR1", 0);
 8012b54:	2200      	movs	r2, #0
 8012b56:	4949      	ldr	r1, [pc, #292]	; (8012c7c <canton_set_pwm+0x298>)
 8012b58:	f240 1001 	movw	r0, #257	; 0x101
 8012b5c:	f7ff fd6e 	bl	801263c <itm_debug1>
			pwm_timer->Instance->CCR1 = 0;
 8012b60:	693b      	ldr	r3, [r7, #16]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	2200      	movs	r2, #0
 8012b66:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8012b68:	e026      	b.n	8012bb8 <canton_set_pwm+0x1d4>
		case TIM_CHANNEL_2:
			itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH2/CCR1", 0);
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	4944      	ldr	r1, [pc, #272]	; (8012c80 <canton_set_pwm+0x29c>)
 8012b6e:	f240 1001 	movw	r0, #257	; 0x101
 8012b72:	f7ff fd63 	bl	801263c <itm_debug1>
			pwm_timer->Instance->CCR2 = 0;
 8012b76:	693b      	ldr	r3, [r7, #16]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8012b7e:	e01b      	b.n	8012bb8 <canton_set_pwm+0x1d4>
		case TIM_CHANNEL_3:
			itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH3/CCR1", 0);
 8012b80:	2200      	movs	r2, #0
 8012b82:	4940      	ldr	r1, [pc, #256]	; (8012c84 <canton_set_pwm+0x2a0>)
 8012b84:	f240 1001 	movw	r0, #257	; 0x101
 8012b88:	f7ff fd58 	bl	801263c <itm_debug1>
			pwm_timer->Instance->CCR3 = 0;
 8012b8c:	693b      	ldr	r3, [r7, #16]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	2200      	movs	r2, #0
 8012b92:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8012b94:	e010      	b.n	8012bb8 <canton_set_pwm+0x1d4>
		case TIM_CHANNEL_4:
			itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH4/CCR1", 0);
 8012b96:	2200      	movs	r2, #0
 8012b98:	493b      	ldr	r1, [pc, #236]	; (8012c88 <canton_set_pwm+0x2a4>)
 8012b9a:	f240 1001 	movw	r0, #257	; 0x101
 8012b9e:	f7ff fd4d 	bl	801263c <itm_debug1>
			pwm_timer->Instance->CCR4 = 0;
 8012ba2:	693b      	ldr	r3, [r7, #16]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	2200      	movs	r2, #0
 8012ba8:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8012baa:	e005      	b.n	8012bb8 <canton_set_pwm+0x1d4>
		default:
			canton_error(ERR_BAD_PARAM_TIM, "bad timer channel");
 8012bac:	4937      	ldr	r1, [pc, #220]	; (8012c8c <canton_set_pwm+0x2a8>)
 8012bae:	f06f 0002 	mvn.w	r0, #2
 8012bb2:	f7ff fd79 	bl	80126a8 <canton_error>
			break;
 8012bb6:	bf00      	nop
		}
	}
	switch (chon) {
 8012bb8:	69bb      	ldr	r3, [r7, #24]
 8012bba:	2b0c      	cmp	r3, #12
 8012bbc:	d848      	bhi.n	8012c50 <canton_set_pwm+0x26c>
 8012bbe:	a201      	add	r2, pc, #4	; (adr r2, 8012bc4 <canton_set_pwm+0x1e0>)
 8012bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bc4:	08012bf9 	.word	0x08012bf9
 8012bc8:	08012c51 	.word	0x08012c51
 8012bcc:	08012c51 	.word	0x08012c51
 8012bd0:	08012c51 	.word	0x08012c51
 8012bd4:	08012c0f 	.word	0x08012c0f
 8012bd8:	08012c51 	.word	0x08012c51
 8012bdc:	08012c51 	.word	0x08012c51
 8012be0:	08012c51 	.word	0x08012c51
 8012be4:	08012c25 	.word	0x08012c25
 8012be8:	08012c51 	.word	0x08012c51
 8012bec:	08012c51 	.word	0x08012c51
 8012bf0:	08012c51 	.word	0x08012c51
 8012bf4:	08012c3b 	.word	0x08012c3b
	case TIM_CHANNEL_1:
		itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH1/CCR1", t);
 8012bf8:	697a      	ldr	r2, [r7, #20]
 8012bfa:	4920      	ldr	r1, [pc, #128]	; (8012c7c <canton_set_pwm+0x298>)
 8012bfc:	f240 1001 	movw	r0, #257	; 0x101
 8012c00:	f7ff fd1c 	bl	801263c <itm_debug1>
		pwm_timer->Instance->CCR1 = t;
 8012c04:	693b      	ldr	r3, [r7, #16]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	697a      	ldr	r2, [r7, #20]
 8012c0a:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8012c0c:	e026      	b.n	8012c5c <canton_set_pwm+0x278>
	case TIM_CHANNEL_2:
		itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH2/CCR1", t);
 8012c0e:	697a      	ldr	r2, [r7, #20]
 8012c10:	491b      	ldr	r1, [pc, #108]	; (8012c80 <canton_set_pwm+0x29c>)
 8012c12:	f240 1001 	movw	r0, #257	; 0x101
 8012c16:	f7ff fd11 	bl	801263c <itm_debug1>
		pwm_timer->Instance->CCR2 = t;
 8012c1a:	693b      	ldr	r3, [r7, #16]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	697a      	ldr	r2, [r7, #20]
 8012c20:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8012c22:	e01b      	b.n	8012c5c <canton_set_pwm+0x278>
	case TIM_CHANNEL_3:
		itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH3/CCR1", t);
 8012c24:	697a      	ldr	r2, [r7, #20]
 8012c26:	4917      	ldr	r1, [pc, #92]	; (8012c84 <canton_set_pwm+0x2a0>)
 8012c28:	f240 1001 	movw	r0, #257	; 0x101
 8012c2c:	f7ff fd06 	bl	801263c <itm_debug1>
		pwm_timer->Instance->CCR3 = t;
 8012c30:	693b      	ldr	r3, [r7, #16]
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	697a      	ldr	r2, [r7, #20]
 8012c36:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8012c38:	e010      	b.n	8012c5c <canton_set_pwm+0x278>
	case TIM_CHANNEL_4:
		itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH4/CCR1", t);
 8012c3a:	697a      	ldr	r2, [r7, #20]
 8012c3c:	4912      	ldr	r1, [pc, #72]	; (8012c88 <canton_set_pwm+0x2a4>)
 8012c3e:	f240 1001 	movw	r0, #257	; 0x101
 8012c42:	f7ff fcfb 	bl	801263c <itm_debug1>
		pwm_timer->Instance->CCR4 = t;
 8012c46:	693b      	ldr	r3, [r7, #16]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	697a      	ldr	r2, [r7, #20]
 8012c4c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8012c4e:	e005      	b.n	8012c5c <canton_set_pwm+0x278>
	default:
		canton_error(ERR_BAD_PARAM_TIM, "bad timer channel");
 8012c50:	490e      	ldr	r1, [pc, #56]	; (8012c8c <canton_set_pwm+0x2a8>)
 8012c52:	f06f 0002 	mvn.w	r0, #2
 8012c56:	f7ff fd27 	bl	80126a8 <canton_error>
		break;
 8012c5a:	bf00      	nop
	}

}
 8012c5c:	3720      	adds	r7, #32
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}
 8012c62:	bf00      	nop
 8012c64:	08016e74 	.word	0x08016e74
 8012c68:	08016e80 	.word	0x08016e80
 8012c6c:	20005200 	.word	0x20005200
 8012c70:	08016e88 	.word	0x08016e88
 8012c74:	80000100 	.word	0x80000100
 8012c78:	08016e90 	.word	0x08016e90
 8012c7c:	08016e98 	.word	0x08016e98
 8012c80:	08016ea4 	.word	0x08016ea4
 8012c84:	08016eb0 	.word	0x08016eb0
 8012c88:	08016ebc 	.word	0x08016ebc
 8012c8c:	08016ec8 	.word	0x08016ec8

08012c90 <canton_set_volt>:
void canton_set_volt(int cidx, const canton_config_t *c, canton_vars_t *v, int voltidx)
{
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b086      	sub	sp, #24
 8012c94:	af02      	add	r7, sp, #8
 8012c96:	60f8      	str	r0, [r7, #12]
 8012c98:	60b9      	str	r1, [r7, #8]
 8012c9a:	607a      	str	r2, [r7, #4]
 8012c9c:	603b      	str	r3, [r7, #0]
	v->cur_voltidx = voltidx;
 8012c9e:	683b      	ldr	r3, [r7, #0]
 8012ca0:	b2da      	uxtb	r2, r3
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	705a      	strb	r2, [r3, #1]
    v->selected_centivolt =  (c->volts_cv[v->cur_voltidx]);
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	785b      	ldrb	r3, [r3, #1]
 8012caa:	461a      	mov	r2, r3
 8012cac:	68bb      	ldr	r3, [r7, #8]
 8012cae:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012cb2:	461a      	mov	r2, r3
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	605a      	str	r2, [r3, #4]
	itm_debug3(DBG_LOWCTRL, "c/set_volt", cidx, voltidx, v->selected_centivolt);
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	685b      	ldr	r3, [r3, #4]
 8012cbc:	9300      	str	r3, [sp, #0]
 8012cbe:	683b      	ldr	r3, [r7, #0]
 8012cc0:	68fa      	ldr	r2, [r7, #12]
 8012cc2:	4917      	ldr	r1, [pc, #92]	; (8012d20 <canton_set_volt+0x90>)
 8012cc4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012cc8:	f7ff fcd2 	bl	8012670 <itm_debug3>
    if ((0)) debug_info('C', 0, "SET VLT ", voltidx,  v->selected_centivolt,0);
    if ((0)) debug_info('C', 0, "VLT BIT ", (voltidx & 0x03) ? 1 : 0,
    				(voltidx & 0x02) ? 1 : 0,
    				(voltidx & 0x01) ? 1 : 0);

	HAL_GPIO_WritePin(c->volt_port_b0, c->volt_b0, (voltidx & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8012ccc:	68bb      	ldr	r3, [r7, #8]
 8012cce:	6918      	ldr	r0, [r3, #16]
 8012cd0:	68bb      	ldr	r3, [r7, #8]
 8012cd2:	8b99      	ldrh	r1, [r3, #28]
 8012cd4:	683b      	ldr	r3, [r7, #0]
 8012cd6:	b2db      	uxtb	r3, r3
 8012cd8:	f003 0301 	and.w	r3, r3, #1
 8012cdc:	b2db      	uxtb	r3, r3
 8012cde:	461a      	mov	r2, r3
 8012ce0:	f7f0 fb1a 	bl	8003318 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c->volt_port_b1, c->volt_b1, (voltidx & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8012ce4:	68bb      	ldr	r3, [r7, #8]
 8012ce6:	6958      	ldr	r0, [r3, #20]
 8012ce8:	68bb      	ldr	r3, [r7, #8]
 8012cea:	8bd9      	ldrh	r1, [r3, #30]
 8012cec:	683b      	ldr	r3, [r7, #0]
 8012cee:	105b      	asrs	r3, r3, #1
 8012cf0:	b2db      	uxtb	r3, r3
 8012cf2:	f003 0301 	and.w	r3, r3, #1
 8012cf6:	b2db      	uxtb	r3, r3
 8012cf8:	461a      	mov	r2, r3
 8012cfa:	f7f0 fb0d 	bl	8003318 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c->volt_port_b2, c->volt_b2, (voltidx & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8012cfe:	68bb      	ldr	r3, [r7, #8]
 8012d00:	6998      	ldr	r0, [r3, #24]
 8012d02:	68bb      	ldr	r3, [r7, #8]
 8012d04:	8c19      	ldrh	r1, [r3, #32]
 8012d06:	683b      	ldr	r3, [r7, #0]
 8012d08:	109b      	asrs	r3, r3, #2
 8012d0a:	b2db      	uxtb	r3, r3
 8012d0c:	f003 0301 	and.w	r3, r3, #1
 8012d10:	b2db      	uxtb	r3, r3
 8012d12:	461a      	mov	r2, r3
 8012d14:	f7f0 fb00 	bl	8003318 <HAL_GPIO_WritePin>
	if (voltidx & 0x04) s |= VOLT_0_SEL2_Pin; else r |=  c->volt_b2;
	if (voltidx & 0x08) s |= VOLT_0_SEL3_Pin; else r |=  c->volt_b3;
	HAL_GPIO_WritePin(c->volt_port, s, GPIO_PIN_SET);
	HAL_GPIO_WritePin(c->volt_port, r, GPIO_PIN_RESET);
#endif
}
 8012d18:	bf00      	nop
 8012d1a:	3710      	adds	r7, #16
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	bd80      	pop	{r7, pc}
 8012d20:	08016edc 	.word	0x08016edc

08012d24 <volt_index>:
int volt_index(uint16_t mili_power,
		const canton_config_t *c1, //canton_vars_t *v1,
		const canton_config_t *c2, //canton_vars_t *v2,
		int *pvi1, int *pvi2,
		train_volt_policy_t pol)
{
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b08a      	sub	sp, #40	; 0x28
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	60b9      	str	r1, [r7, #8]
 8012d2c:	607a      	str	r2, [r7, #4]
 8012d2e:	603b      	str	r3, [r7, #0]
 8012d30:	4603      	mov	r3, r0
 8012d32:	81fb      	strh	r3, [r7, #14]
	int duty=0;
 8012d34:	2300      	movs	r3, #0
 8012d36:	627b      	str	r3, [r7, #36]	; 0x24
	*pvi1 = MAX_PVI;
 8012d38:	683b      	ldr	r3, [r7, #0]
 8012d3a:	2207      	movs	r2, #7
 8012d3c:	601a      	str	r2, [r3, #0]
	*pvi2 = MAX_PVI;
 8012d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d40:	2207      	movs	r2, #7
 8012d42:	601a      	str	r2, [r3, #0]

	if (mili_power <0)    return canton_error_rc(0, ERR_BAD_PARAM_MPOW, "negative milipower");
	if (mili_power >1000) return canton_error_rc(0, ERR_BAD_PARAM_MPOW, "milipower should be 0-999");
 8012d44:	89fb      	ldrh	r3, [r7, #14]
 8012d46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012d4a:	d907      	bls.n	8012d5c <volt_index+0x38>
 8012d4c:	4a55      	ldr	r2, [pc, #340]	; (8012ea4 <volt_index+0x180>)
 8012d4e:	f06f 0103 	mvn.w	r1, #3
 8012d52:	2000      	movs	r0, #0
 8012d54:	f7ff fcb7 	bl	80126c6 <canton_error_rc>
 8012d58:	4603      	mov	r3, r0
 8012d5a:	e09e      	b.n	8012e9a <volt_index+0x176>
	switch (pol) {
 8012d5c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8012d60:	2b01      	cmp	r3, #1
 8012d62:	d00d      	beq.n	8012d80 <volt_index+0x5c>
 8012d64:	2b02      	cmp	r3, #2
 8012d66:	d053      	beq.n	8012e10 <volt_index+0xec>
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d017      	beq.n	8012d9c <volt_index+0x78>
	default :
        duty = 0;
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	627b      	str	r3, [r7, #36]	; 0x24
		return canton_error_rc(0, ERR_BAD_PARAM_VPOL, "bad volt policy");
 8012d70:	4a4d      	ldr	r2, [pc, #308]	; (8012ea8 <volt_index+0x184>)
 8012d72:	f06f 0104 	mvn.w	r1, #4
 8012d76:	2000      	movs	r0, #0
 8012d78:	f7ff fca5 	bl	80126c6 <canton_error_rc>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	e08c      	b.n	8012e9a <volt_index+0x176>
		break;
	case vpolicy_pure_pwm:
		*pvi1 = 0;
 8012d80:	683b      	ldr	r3, [r7, #0]
 8012d82:	2200      	movs	r2, #0
 8012d84:	601a      	str	r2, [r3, #0]
		*pvi2 = 0;
 8012d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d88:	2200      	movs	r2, #0
 8012d8a:	601a      	str	r2, [r3, #0]
		duty = mili_power / 10;
 8012d8c:	89fb      	ldrh	r3, [r7, #14]
 8012d8e:	4a47      	ldr	r2, [pc, #284]	; (8012eac <volt_index+0x188>)
 8012d90:	fba2 2303 	umull	r2, r3, r2, r3
 8012d94:	08db      	lsrs	r3, r3, #3
 8012d96:	b29b      	uxth	r3, r3
 8012d98:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8012d9a:	e078      	b.n	8012e8e <volt_index+0x16a>
    case vpolicy_normal:
            // fall back to full volt +  pwm
            *pvi1 = *pvi2 = 0;
 8012d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d9e:	2200      	movs	r2, #0
 8012da0:	601a      	str	r2, [r3, #0]
 8012da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012da4:	681a      	ldr	r2, [r3, #0]
 8012da6:	683b      	ldr	r3, [r7, #0]
 8012da8:	601a      	str	r2, [r3, #0]
            duty = mili_power / 10;
 8012daa:	89fb      	ldrh	r3, [r7, #14]
 8012dac:	4a3f      	ldr	r2, [pc, #252]	; (8012eac <volt_index+0x188>)
 8012dae:	fba2 2303 	umull	r2, r3, r2, r3
 8012db2:	08db      	lsrs	r3, r3, #3
 8012db4:	b29b      	uxth	r3, r3
 8012db6:	627b      	str	r3, [r7, #36]	; 0x24
            for (int i=MAX_PVI; i>=0; i--) {
 8012db8:	2307      	movs	r3, #7
 8012dba:	623b      	str	r3, [r7, #32]
 8012dbc:	e024      	b.n	8012e08 <volt_index+0xe4>
                if (!c1->volts_cv[i]) continue;
 8012dbe:	68bb      	ldr	r3, [r7, #8]
 8012dc0:	6a3a      	ldr	r2, [r7, #32]
 8012dc2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d018      	beq.n	8012dfc <volt_index+0xd8>
                // c1->volts in 0.01V unit
                int d = 100*mili_power / c1->volts_cv[i];
 8012dca:	89fb      	ldrh	r3, [r7, #14]
 8012dcc:	2264      	movs	r2, #100	; 0x64
 8012dce:	fb02 f303 	mul.w	r3, r2, r3
 8012dd2:	68ba      	ldr	r2, [r7, #8]
 8012dd4:	6a39      	ldr	r1, [r7, #32]
 8012dd6:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8012dda:	fb93 f3f2 	sdiv	r3, r3, r2
 8012dde:	613b      	str	r3, [r7, #16]
                if (d>MAX_PWM) {
 8012de0:	693b      	ldr	r3, [r7, #16]
 8012de2:	2b5a      	cmp	r3, #90	; 0x5a
 8012de4:	dc0c      	bgt.n	8012e00 <volt_index+0xdc>
                    continue;
                }
                // XXX for now we assume all canton have same board with same voltage level
                *pvi1 = *pvi2 = i;
 8012de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012de8:	6a3a      	ldr	r2, [r7, #32]
 8012dea:	601a      	str	r2, [r3, #0]
 8012dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dee:	681a      	ldr	r2, [r3, #0]
 8012df0:	683b      	ldr	r3, [r7, #0]
 8012df2:	601a      	str	r2, [r3, #0]
                duty = d;
 8012df4:	693b      	ldr	r3, [r7, #16]
 8012df6:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8012df8:	bf00      	nop
            }
		break;
 8012dfa:	e048      	b.n	8012e8e <volt_index+0x16a>
                if (!c1->volts_cv[i]) continue;
 8012dfc:	bf00      	nop
 8012dfe:	e000      	b.n	8012e02 <volt_index+0xde>
                    continue;
 8012e00:	bf00      	nop
            for (int i=MAX_PVI; i>=0; i--) {
 8012e02:	6a3b      	ldr	r3, [r7, #32]
 8012e04:	3b01      	subs	r3, #1
 8012e06:	623b      	str	r3, [r7, #32]
 8012e08:	6a3b      	ldr	r3, [r7, #32]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	dad7      	bge.n	8012dbe <volt_index+0x9a>
		break;
 8012e0e:	e03e      	b.n	8012e8e <volt_index+0x16a>
			break;
    	}
    	break;
#endif
	case vpolicy_pure_volt:
		duty = MAX_PWM;
 8012e10:	235a      	movs	r3, #90	; 0x5a
 8012e12:	627b      	str	r3, [r7, #36]	; 0x24
        int s = 0;
 8012e14:	2300      	movs	r3, #0
 8012e16:	61fb      	str	r3, [r7, #28]
		for (int i=MAX_PVI; i>=0; i--) {
 8012e18:	2307      	movs	r3, #7
 8012e1a:	61bb      	str	r3, [r7, #24]
 8012e1c:	e031      	b.n	8012e82 <volt_index+0x15e>
			if (!c1->volts_cv[i]) continue;
 8012e1e:	68bb      	ldr	r3, [r7, #8]
 8012e20:	69ba      	ldr	r2, [r7, #24]
 8012e22:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d027      	beq.n	8012e7a <volt_index+0x156>
			// c1->volts in 0.01V unit. 10V = 1000
			int p = c1->volts_cv[i]*MAX_PWM/100;  // 0.01V * % , ex : 345*90
 8012e2a:	68bb      	ldr	r3, [r7, #8]
 8012e2c:	69ba      	ldr	r2, [r7, #24]
 8012e2e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012e32:	461a      	mov	r2, r3
 8012e34:	235a      	movs	r3, #90	; 0x5a
 8012e36:	fb03 f302 	mul.w	r3, r3, r2
 8012e3a:	4a1d      	ldr	r2, [pc, #116]	; (8012eb0 <volt_index+0x18c>)
 8012e3c:	fb82 1203 	smull	r1, r2, r2, r3
 8012e40:	1152      	asrs	r2, r2, #5
 8012e42:	17db      	asrs	r3, r3, #31
 8012e44:	1ad3      	subs	r3, r2, r3
 8012e46:	617b      	str	r3, [r7, #20]
			if (p <= mili_power) {
 8012e48:	89fb      	ldrh	r3, [r7, #14]
 8012e4a:	697a      	ldr	r2, [r7, #20]
 8012e4c:	429a      	cmp	r2, r3
 8012e4e:	dc08      	bgt.n	8012e62 <volt_index+0x13e>
                s = 1;
 8012e50:	2301      	movs	r3, #1
 8012e52:	61fb      	str	r3, [r7, #28]
				*pvi1 = i;
 8012e54:	683b      	ldr	r3, [r7, #0]
 8012e56:	69ba      	ldr	r2, [r7, #24]
 8012e58:	601a      	str	r2, [r3, #0]
				*pvi2 = i;
 8012e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e5c:	69ba      	ldr	r2, [r7, #24]
 8012e5e:	601a      	str	r2, [r3, #0]
 8012e60:	e00c      	b.n	8012e7c <volt_index+0x158>
			} else {
                if (!s) {
 8012e62:	69fb      	ldr	r3, [r7, #28]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d110      	bne.n	8012e8a <volt_index+0x166>
                    // lower than minimal power
                    *pvi1 = i;
 8012e68:	683b      	ldr	r3, [r7, #0]
 8012e6a:	69ba      	ldr	r2, [r7, #24]
 8012e6c:	601a      	str	r2, [r3, #0]
                    *pvi2 = i;
 8012e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e70:	69ba      	ldr	r2, [r7, #24]
 8012e72:	601a      	str	r2, [r3, #0]
                    duty = 0;
 8012e74:	2300      	movs	r3, #0
 8012e76:	627b      	str	r3, [r7, #36]	; 0x24
                }
                // ok
				break;
 8012e78:	e007      	b.n	8012e8a <volt_index+0x166>
			if (!c1->volts_cv[i]) continue;
 8012e7a:	bf00      	nop
		for (int i=MAX_PVI; i>=0; i--) {
 8012e7c:	69bb      	ldr	r3, [r7, #24]
 8012e7e:	3b01      	subs	r3, #1
 8012e80:	61bb      	str	r3, [r7, #24]
 8012e82:	69bb      	ldr	r3, [r7, #24]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	daca      	bge.n	8012e1e <volt_index+0xfa>
			}
		}
		break;
 8012e88:	e000      	b.n	8012e8c <volt_index+0x168>
				break;
 8012e8a:	bf00      	nop
		break;
 8012e8c:	bf00      	nop
	}
    if (duty>MAX_PWM) {
 8012e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e90:	2b5a      	cmp	r3, #90	; 0x5a
 8012e92:	dd01      	ble.n	8012e98 <volt_index+0x174>
        duty = MAX_PWM;
 8012e94:	235a      	movs	r3, #90	; 0x5a
 8012e96:	627b      	str	r3, [r7, #36]	; 0x24
        //canton_error(ERR_BAD_PARAM_MPOW, "test msg");
    }
	return duty;
 8012e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	3728      	adds	r7, #40	; 0x28
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	bd80      	pop	{r7, pc}
 8012ea2:	bf00      	nop
 8012ea4:	08016ee8 	.word	0x08016ee8
 8012ea8:	08016f04 	.word	0x08016f04
 8012eac:	cccccccd 	.word	0xcccccccd
 8012eb0:	51eb851f 	.word	0x51eb851f

08012eb4 <itm_debug1>:
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b086      	sub	sp, #24
 8012eb8:	af02      	add	r7, sp, #8
 8012eba:	60f8      	str	r0, [r7, #12]
 8012ebc:	60b9      	str	r1, [r7, #8]
 8012ebe:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8012ec0:	4b08      	ldr	r3, [pc, #32]	; (8012ee4 <itm_debug1+0x30>)
 8012ec2:	681a      	ldr	r2, [r3, #0]
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	4013      	ands	r3, r2
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d007      	beq.n	8012edc <itm_debug1+0x28>
 8012ecc:	2301      	movs	r3, #1
 8012ece:	9300      	str	r3, [sp, #0]
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	6879      	ldr	r1, [r7, #4]
 8012ed6:	68b8      	ldr	r0, [r7, #8]
 8012ed8:	f003 fb2e 	bl	8016538 <_itm_debug3>
}
 8012edc:	bf00      	nop
 8012ede:	3710      	adds	r7, #16
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	bd80      	pop	{r7, pc}
 8012ee4:	20000538 	.word	0x20000538

08012ee8 <itm_debug3>:
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b086      	sub	sp, #24
 8012eec:	af02      	add	r7, sp, #8
 8012eee:	60f8      	str	r0, [r7, #12]
 8012ef0:	60b9      	str	r1, [r7, #8]
 8012ef2:	607a      	str	r2, [r7, #4]
 8012ef4:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 8012ef6:	4b09      	ldr	r3, [pc, #36]	; (8012f1c <itm_debug3+0x34>)
 8012ef8:	681a      	ldr	r2, [r3, #0]
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	4013      	ands	r3, r2
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d007      	beq.n	8012f12 <itm_debug3+0x2a>
 8012f02:	2303      	movs	r3, #3
 8012f04:	9300      	str	r3, [sp, #0]
 8012f06:	69bb      	ldr	r3, [r7, #24]
 8012f08:	683a      	ldr	r2, [r7, #0]
 8012f0a:	6879      	ldr	r1, [r7, #4]
 8012f0c:	68b8      	ldr	r0, [r7, #8]
 8012f0e:	f003 fb13 	bl	8016538 <_itm_debug3>
}
 8012f12:	bf00      	nop
 8012f14:	3710      	adds	r7, #16
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}
 8012f1a:	bf00      	nop
 8012f1c:	20000538 	.word	0x20000538

08012f20 <runtime_error>:
	trainctl_error('G', code, msg);
	return NULL;
}

static inline void *runtime_error(int code, const char *msg)
{
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b082      	sub	sp, #8
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
 8012f28:	6039      	str	r1, [r7, #0]
	itm_debug1(DBG_CONFIG, msg, code);
 8012f2a:	687a      	ldr	r2, [r7, #4]
 8012f2c:	6839      	ldr	r1, [r7, #0]
 8012f2e:	2080      	movs	r0, #128	; 0x80
 8012f30:	f7ff ffc0 	bl	8012eb4 <itm_debug1>
	trainctl_error('G', code, msg);
 8012f34:	683a      	ldr	r2, [r7, #0]
 8012f36:	6879      	ldr	r1, [r7, #4]
 8012f38:	2047      	movs	r0, #71	; 0x47
 8012f3a:	f000 fbc7 	bl	80136cc <trainctl_error>
	return NULL;
 8012f3e:	2300      	movs	r3, #0
}
 8012f40:	4618      	mov	r0, r3
 8012f42:	3708      	adds	r7, #8
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd80      	pop	{r7, pc}

08012f48 <bemf_reset>:
#define USE_CANTON(_idx) \
		const canton_config_t *cconf = get_canton_cnf(_idx); \
		//canton_vars_t         *cvars = &canton_vars[_idx];

void bemf_reset(void)
{
 8012f48:	b480      	push	{r7}
 8012f4a:	b083      	sub	sp, #12
 8012f4c:	af00      	add	r7, sp, #0
	for (int i=0; i<NUM_LOCAL_CANTONS_SW; i++) {
 8012f4e:	2300      	movs	r3, #0
 8012f50:	607b      	str	r3, [r7, #4]
 8012f52:	e007      	b.n	8012f64 <bemf_reset+0x1c>
		bemf_to[i]=0xFF;
 8012f54:	4a08      	ldr	r2, [pc, #32]	; (8012f78 <bemf_reset+0x30>)
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	4413      	add	r3, r2
 8012f5a:	22ff      	movs	r2, #255	; 0xff
 8012f5c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<NUM_LOCAL_CANTONS_SW; i++) {
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	3301      	adds	r3, #1
 8012f62:	607b      	str	r3, [r7, #4]
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	2b07      	cmp	r3, #7
 8012f68:	ddf4      	ble.n	8012f54 <bemf_reset+0xc>
	}
}
 8012f6a:	bf00      	nop
 8012f6c:	370c      	adds	r7, #12
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f74:	4770      	bx	lr
 8012f76:	bf00      	nop
 8012f78:	20000210 	.word	0x20000210

08012f7c <bemf_msg>:

void bemf_msg(msg_64_t *m)
{
 8012f7c:	b480      	push	{r7}
 8012f7e:	b085      	sub	sp, #20
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	6078      	str	r0, [r7, #4]
	if (!IS_CANTON(m->to)) {
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	781b      	ldrb	r3, [r3, #0]
 8012f88:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d119      	bne.n	8012fc4 <bemf_msg+0x48>
		// error
		return;
	}
	int idx = m->to & 0x07;
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	781b      	ldrb	r3, [r3, #0]
 8012f94:	f003 0307 	and.w	r3, r3, #7
 8012f98:	60fb      	str	r3, [r7, #12]
	switch(m->cmd) {
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	789b      	ldrb	r3, [r3, #2]
 8012f9e:	2b40      	cmp	r3, #64	; 0x40
 8012fa0:	d007      	beq.n	8012fb2 <bemf_msg+0x36>
 8012fa2:	2b41      	cmp	r3, #65	; 0x41
 8012fa4:	d10f      	bne.n	8012fc6 <bemf_msg+0x4a>
	case CMD_BEMF_OFF:
		bemf_to[idx] = 0xFF;
 8012fa6:	4a0a      	ldr	r2, [pc, #40]	; (8012fd0 <bemf_msg+0x54>)
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	4413      	add	r3, r2
 8012fac:	22ff      	movs	r2, #255	; 0xff
 8012fae:	701a      	strb	r2, [r3, #0]
		break;
 8012fb0:	e009      	b.n	8012fc6 <bemf_msg+0x4a>
	case CMD_BEMF_ON:
		bemf_to[idx] = m->from;
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	7859      	ldrb	r1, [r3, #1]
 8012fb6:	4a06      	ldr	r2, [pc, #24]	; (8012fd0 <bemf_msg+0x54>)
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	4413      	add	r3, r2
 8012fbc:	460a      	mov	r2, r1
 8012fbe:	701a      	strb	r2, [r3, #0]
		break;
 8012fc0:	bf00      	nop
 8012fc2:	e000      	b.n	8012fc6 <bemf_msg+0x4a>
		return;
 8012fc4:	bf00      	nop
	}
}
 8012fc6:	3714      	adds	r7, #20
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fce:	4770      	bx	lr
 8012fd0:	20000210 	.word	0x20000210

08012fd4 <bemf_tick>:

void bemf_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt)
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b084      	sub	sp, #16
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	60f8      	str	r0, [r7, #12]
 8012fdc:	60b9      	str	r1, [r7, #8]
 8012fde:	607a      	str	r2, [r7, #4]
	itm_debug1(DBG_ADC, "------- btk", notif_flags);
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	461a      	mov	r2, r3
 8012fe4:	4916      	ldr	r1, [pc, #88]	; (8013040 <bemf_tick+0x6c>)
 8012fe6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8012fea:	f7ff ff63 	bl	8012eb4 <itm_debug1>
	if (notif_flags & NOTIF_NEW_ADC_1) {
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	f003 0301 	and.w	r3, r3, #1
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d014      	beq.n	8013022 <bemf_tick+0x4e>
		if (notif_flags & NOTIF_NEW_ADC_2) {
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	f003 0302 	and.w	r3, r3, #2
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d00a      	beq.n	8013018 <bemf_tick+0x44>
			itm_debug1(DBG_ERR|DBG_LOWCTRL|DBG_TIM, "both", notif_flags);
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	461a      	mov	r2, r3
 8013006:	490f      	ldr	r1, [pc, #60]	; (8013044 <bemf_tick+0x70>)
 8013008:	480f      	ldr	r0, [pc, #60]	; (8013048 <bemf_tick+0x74>)
 801300a:	f7ff ff53 	bl	8012eb4 <itm_debug1>
			runtime_error(ERR_DMA, "both NEW_ADC1 and NEW_ADC2");
 801300e:	490f      	ldr	r1, [pc, #60]	; (801304c <bemf_tick+0x78>)
 8013010:	f06f 000b 	mvn.w	r0, #11
 8013014:	f7ff ff84 	bl	8012f20 <runtime_error>
		}
		process_adc(&train_adc_buf[0], dt);
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	4619      	mov	r1, r3
 801301c:	480c      	ldr	r0, [pc, #48]	; (8013050 <bemf_tick+0x7c>)
 801301e:	f000 f835 	bl	801308c <process_adc>
	}
	if (notif_flags & NOTIF_NEW_ADC_2) {
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	f003 0302 	and.w	r3, r3, #2
 8013028:	2b00      	cmp	r3, #0
 801302a:	d004      	beq.n	8013036 <bemf_tick+0x62>
		process_adc(&train_adc_buf[1], dt);
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	4619      	mov	r1, r3
 8013030:	4808      	ldr	r0, [pc, #32]	; (8013054 <bemf_tick+0x80>)
 8013032:	f000 f82b 	bl	801308c <process_adc>
	}
}
 8013036:	bf00      	nop
 8013038:	3710      	adds	r7, #16
 801303a:	46bd      	mov	sp, r7
 801303c:	bd80      	pop	{r7, pc}
 801303e:	bf00      	nop
 8013040:	08016f14 	.word	0x08016f14
 8013044:	08016f20 	.word	0x08016f20
 8013048:	80000101 	.word	0x80000101
 801304c:	08016f28 	.word	0x08016f28
 8013050:	2000881c 	.word	0x2000881c
 8013054:	20008844 	.word	0x20008844

08013058 <bemf_convert_to_centivolt>:
	return ((m * 4545 * 33) / (4096*100));
}


static inline int32_t bemf_convert_to_centivolt(const canton_config_t *c, int32_t m)
{
 8013058:	b480      	push	{r7}
 801305a:	b083      	sub	sp, #12
 801305c:	af00      	add	r7, sp, #0
 801305e:	6078      	str	r0, [r7, #4]
 8013060:	6039      	str	r1, [r7, #0]
			m = 2200*m/2000;
		}
	}
#endif

	return ((m * 4545 * 33) / (4096*100));
 8013062:	683b      	ldr	r3, [r7, #0]
 8013064:	4a07      	ldr	r2, [pc, #28]	; (8013084 <bemf_convert_to_centivolt+0x2c>)
 8013066:	fb02 f303 	mul.w	r3, r2, r3
 801306a:	4a07      	ldr	r2, [pc, #28]	; (8013088 <bemf_convert_to_centivolt+0x30>)
 801306c:	fb82 1203 	smull	r1, r2, r2, r3
 8013070:	1452      	asrs	r2, r2, #17
 8013072:	17db      	asrs	r3, r3, #31
 8013074:	1ad3      	subs	r3, r2, r3
}
 8013076:	4618      	mov	r0, r3
 8013078:	370c      	adds	r7, #12
 801307a:	46bd      	mov	sp, r7
 801307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013080:	4770      	bx	lr
 8013082:	bf00      	nop
 8013084:	000249e1 	.word	0x000249e1
 8013088:	51eb851f 	.word	0x51eb851f

0801308c <process_adc>:

/// ---------------------------------------------------------------------------------------

static void process_adc(volatile adc_buf_t *buf, int32_t ticks)
{
 801308c:	b580      	push	{r7, lr}
 801308e:	b092      	sub	sp, #72	; 0x48
 8013090:	af02      	add	r7, sp, #8
 8013092:	6078      	str	r0, [r7, #4]
 8013094:	6039      	str	r1, [r7, #0]
	for (int i=0; i<NUM_LOCAL_CANTONS_HW; i++) {
 8013096:	2300      	movs	r3, #0
 8013098:	63fb      	str	r3, [r7, #60]	; 0x3c
 801309a:	e0b2      	b.n	8013202 <process_adc+0x176>
		USE_CANTON(i)
 801309c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801309e:	f000 fc9d 	bl	80139dc <get_canton_cnf>
 80130a2:	6338      	str	r0, [r7, #48]	; 0x30
		// process BEMF
#ifndef USE_INA3221
	    canton_intensity(cconf, cvars, buf[i].intOff, buf[i].intOn);
#error ohla
#endif
		int skp = 0;
 80130a4:	2300      	movs	r3, #0
 80130a6:	63bb      	str	r3, [r7, #56]	; 0x38
		if (bemf_test_mode && (bemf_test_all)&& (i<3)) {
 80130a8:	4b5a      	ldr	r3, [pc, #360]	; (8013214 <process_adc+0x188>)
 80130aa:	781b      	ldrb	r3, [r3, #0]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d009      	beq.n	80130c4 <process_adc+0x38>
 80130b0:	4b59      	ldr	r3, [pc, #356]	; (8013218 <process_adc+0x18c>)
 80130b2:	781b      	ldrb	r3, [r3, #0]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d005      	beq.n	80130c4 <process_adc+0x38>
 80130b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130ba:	2b02      	cmp	r3, #2
 80130bc:	dc02      	bgt.n	80130c4 <process_adc+0x38>
			skp = 1;
 80130be:	2301      	movs	r3, #1
 80130c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80130c2:	e006      	b.n	80130d2 <process_adc+0x46>
		} else if (0xFF == bemf_to[i]) {
 80130c4:	4a55      	ldr	r2, [pc, #340]	; (801321c <process_adc+0x190>)
 80130c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130c8:	4413      	add	r3, r2
 80130ca:	781b      	ldrb	r3, [r3, #0]
 80130cc:	2bff      	cmp	r3, #255	; 0xff
 80130ce:	f000 8092 	beq.w	80131f6 <process_adc+0x16a>
			continue;
		}

		const canton_config_t *c = get_canton_cnf(i);
 80130d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80130d4:	f000 fc82 	bl	80139dc <get_canton_cnf>
 80130d8:	62f8      	str	r0, [r7, #44]	; 0x2c
		int32_t voffa = bemf_convert_to_centivolt(c, buf[i].voffA);
		int32_t voffb = bemf_convert_to_centivolt(c, buf[i].voffB);
		int32_t vona = bemf_convert_to_centivolt(c, buf[i].vonA);
		int32_t vonb = bemf_convert_to_centivolt(c, buf[i].vonB);
		 */
		int32_t voffa = bemf_convert_to_centivolt(c, buf->off[i].vA);
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80130de:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80130e2:	b29b      	uxth	r3, r3
 80130e4:	4619      	mov	r1, r3
 80130e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80130e8:	f7ff ffb6 	bl	8013058 <bemf_convert_to_centivolt>
 80130ec:	62b8      	str	r0, [r7, #40]	; 0x28
		int32_t voffb = bemf_convert_to_centivolt(c, buf->off[i].vB);
 80130ee:	687a      	ldr	r2, [r7, #4]
 80130f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130f2:	009b      	lsls	r3, r3, #2
 80130f4:	4413      	add	r3, r2
 80130f6:	885b      	ldrh	r3, [r3, #2]
 80130f8:	b29b      	uxth	r3, r3
 80130fa:	4619      	mov	r1, r3
 80130fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80130fe:	f7ff ffab 	bl	8013058 <bemf_convert_to_centivolt>
 8013102:	6278      	str	r0, [r7, #36]	; 0x24
		int32_t vona =  bemf_convert_to_centivolt(c, buf->on[i].vA);
 8013104:	687a      	ldr	r2, [r7, #4]
 8013106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013108:	3304      	adds	r3, #4
 801310a:	009b      	lsls	r3, r3, #2
 801310c:	4413      	add	r3, r2
 801310e:	889b      	ldrh	r3, [r3, #4]
 8013110:	b29b      	uxth	r3, r3
 8013112:	4619      	mov	r1, r3
 8013114:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013116:	f7ff ff9f 	bl	8013058 <bemf_convert_to_centivolt>
 801311a:	6238      	str	r0, [r7, #32]
		int32_t vonb =  bemf_convert_to_centivolt(c, buf->on[i].vB);
 801311c:	687a      	ldr	r2, [r7, #4]
 801311e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013120:	3304      	adds	r3, #4
 8013122:	009b      	lsls	r3, r3, #2
 8013124:	4413      	add	r3, r2
 8013126:	88db      	ldrh	r3, [r3, #6]
 8013128:	b29b      	uxth	r3, r3
 801312a:	4619      	mov	r1, r3
 801312c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801312e:	f7ff ff93 	bl	8013058 <bemf_convert_to_centivolt>
 8013132:	61f8      	str	r0, [r7, #28]

		int16_t voff = (int16_t)(voffb-voffa);
 8013134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013136:	b29a      	uxth	r2, r3
 8013138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801313a:	b29b      	uxth	r3, r3
 801313c:	1ad3      	subs	r3, r2, r3
 801313e:	b29b      	uxth	r3, r3
 8013140:	86fb      	strh	r3, [r7, #54]	; 0x36
		int16_t von  = (int16_t)(vonb-vona);
 8013142:	69fb      	ldr	r3, [r7, #28]
 8013144:	b29a      	uxth	r2, r3
 8013146:	6a3b      	ldr	r3, [r7, #32]
 8013148:	b29b      	uxth	r3, r3
 801314a:	1ad3      	subs	r3, r2, r3
 801314c:	b29b      	uxth	r3, r3
 801314e:	86bb      	strh	r3, [r7, #52]	; 0x34

		if (cconf->reverse_bemf) {
 8013150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013152:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013156:	f003 0302 	and.w	r3, r3, #2
 801315a:	b2db      	uxtb	r3, r3
 801315c:	2b00      	cmp	r3, #0
 801315e:	d007      	beq.n	8013170 <process_adc+0xe4>
			voff = -voff;
 8013160:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013162:	425b      	negs	r3, r3
 8013164:	b29b      	uxth	r3, r3
 8013166:	86fb      	strh	r3, [r7, #54]	; 0x36
			von = -von;
 8013168:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801316a:	425b      	negs	r3, r3
 801316c:	b29b      	uxth	r3, r3
 801316e:	86bb      	strh	r3, [r7, #52]	; 0x34
		}
		if ((1)) {
			itm_debug3(DBG_ADC|DBG_LOWCTRL, "ADC/Voff", i, voffa, voffb);
 8013170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013172:	9300      	str	r3, [sp, #0]
 8013174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013176:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013178:	4929      	ldr	r1, [pc, #164]	; (8013220 <process_adc+0x194>)
 801317a:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 801317e:	f7ff feb3 	bl	8012ee8 <itm_debug3>
			itm_debug3(DBG_ADC|DBG_LOWCTRL, "ADC/Von",  i, vona, vonb);
 8013182:	69fb      	ldr	r3, [r7, #28]
 8013184:	9300      	str	r3, [sp, #0]
 8013186:	6a3b      	ldr	r3, [r7, #32]
 8013188:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801318a:	4926      	ldr	r1, [pc, #152]	; (8013224 <process_adc+0x198>)
 801318c:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8013190:	f7ff feaa 	bl	8012ee8 <itm_debug3>
			itm_debug3(DBG_ADC|DBG_LOWCTRL, "ADCoi", i,  voff, von);
 8013194:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8013198:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 801319c:	9300      	str	r3, [sp, #0]
 801319e:	4613      	mov	r3, r2
 80131a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80131a2:	4921      	ldr	r1, [pc, #132]	; (8013228 <process_adc+0x19c>)
 80131a4:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 80131a8:	f7ff fe9e 	bl	8012ee8 <itm_debug3>
		}
		if (skp) continue;
 80131ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d123      	bne.n	80131fa <process_adc+0x16e>
				m.v2 = von;
				mqf_write(&from_canton, &m);
			}
		}
		msg_64_t m;
		m.from = MA_CANTON(localBoardNum, i);
 80131b2:	4b1e      	ldr	r3, [pc, #120]	; (801322c <process_adc+0x1a0>)
 80131b4:	781b      	ldrb	r3, [r3, #0]
 80131b6:	00db      	lsls	r3, r3, #3
 80131b8:	b25b      	sxtb	r3, r3
 80131ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80131be:	b25a      	sxtb	r2, r3
 80131c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131c2:	b25b      	sxtb	r3, r3
 80131c4:	f003 0307 	and.w	r3, r3, #7
 80131c8:	b25b      	sxtb	r3, r3
 80131ca:	4313      	orrs	r3, r2
 80131cc:	b25b      	sxtb	r3, r3
 80131ce:	b2db      	uxtb	r3, r3
 80131d0:	747b      	strb	r3, [r7, #17]
		m.to = bemf_to[i];
 80131d2:	4a12      	ldr	r2, [pc, #72]	; (801321c <process_adc+0x190>)
 80131d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131d6:	4413      	add	r3, r2
 80131d8:	781b      	ldrb	r3, [r3, #0]
 80131da:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_BEMF_NOTIF;
 80131dc:	2303      	movs	r3, #3
 80131de:	74bb      	strb	r3, [r7, #18]
		m.v1 = voff;
 80131e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80131e2:	82bb      	strh	r3, [r7, #20]
		m.v2 = von;
 80131e4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80131e6:	82fb      	strh	r3, [r7, #22]
		mqf_write(&from_canton, &m);
 80131e8:	f107 0310 	add.w	r3, r7, #16
 80131ec:	4619      	mov	r1, r3
 80131ee:	4810      	ldr	r0, [pc, #64]	; (8013230 <process_adc+0x1a4>)
 80131f0:	f003 faa8 	bl	8016744 <mqf_write>
 80131f4:	e002      	b.n	80131fc <process_adc+0x170>
			continue;
 80131f6:	bf00      	nop
 80131f8:	e000      	b.n	80131fc <process_adc+0x170>
		if (skp) continue;
 80131fa:	bf00      	nop
	for (int i=0; i<NUM_LOCAL_CANTONS_HW; i++) {
 80131fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80131fe:	3301      	adds	r3, #1
 8013200:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013204:	2b04      	cmp	r3, #4
 8013206:	f77f af49 	ble.w	801309c <process_adc+0x10>

	}
}
 801320a:	bf00      	nop
 801320c:	3740      	adds	r7, #64	; 0x40
 801320e:	46bd      	mov	sp, r7
 8013210:	bd80      	pop	{r7, pc}
 8013212:	bf00      	nop
 8013214:	20005262 	.word	0x20005262
 8013218:	20005263 	.word	0x20005263
 801321c:	20000210 	.word	0x20000210
 8013220:	08016f44 	.word	0x08016f44
 8013224:	08016f50 	.word	0x08016f50
 8013228:	08016f58 	.word	0x08016f58
 801322c:	20005315 	.word	0x20005315
 8013230:	200004a8 	.word	0x200004a8

08013234 <presdect_tick>:
#include "railconfig.h"


#if INA3221_TASK
void presdect_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt)
{
 8013234:	b480      	push	{r7}
 8013236:	b085      	sub	sp, #20
 8013238:	af00      	add	r7, sp, #0
 801323a:	60f8      	str	r0, [r7, #12]
 801323c:	60b9      	str	r1, [r7, #8]
 801323e:	607a      	str	r2, [r7, #4]
}
 8013240:	bf00      	nop
 8013242:	3714      	adds	r7, #20
 8013244:	46bd      	mov	sp, r7
 8013246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801324a:	4770      	bx	lr

0801324c <itm_debug1>:
{
 801324c:	b580      	push	{r7, lr}
 801324e:	b086      	sub	sp, #24
 8013250:	af02      	add	r7, sp, #8
 8013252:	60f8      	str	r0, [r7, #12]
 8013254:	60b9      	str	r1, [r7, #8]
 8013256:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8013258:	4b08      	ldr	r3, [pc, #32]	; (801327c <itm_debug1+0x30>)
 801325a:	681a      	ldr	r2, [r3, #0]
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	4013      	ands	r3, r2
 8013260:	2b00      	cmp	r3, #0
 8013262:	d007      	beq.n	8013274 <itm_debug1+0x28>
 8013264:	2301      	movs	r3, #1
 8013266:	9300      	str	r3, [sp, #0]
 8013268:	2300      	movs	r3, #0
 801326a:	2200      	movs	r2, #0
 801326c:	6879      	ldr	r1, [r7, #4]
 801326e:	68b8      	ldr	r0, [r7, #8]
 8013270:	f003 f962 	bl	8016538 <_itm_debug3>
}
 8013274:	bf00      	nop
 8013276:	3710      	adds	r7, #16
 8013278:	46bd      	mov	sp, r7
 801327a:	bd80      	pop	{r7, pc}
 801327c:	20000538 	.word	0x20000538

08013280 <turnout_error>:
{
 8013280:	b580      	push	{r7, lr}
 8013282:	b082      	sub	sp, #8
 8013284:	af00      	add	r7, sp, #0
 8013286:	6078      	str	r0, [r7, #4]
 8013288:	6039      	str	r1, [r7, #0]
	return trainctl_error('A', code, msg);
 801328a:	683a      	ldr	r2, [r7, #0]
 801328c:	6879      	ldr	r1, [r7, #4]
 801328e:	2041      	movs	r0, #65	; 0x41
 8013290:	f000 fa1c 	bl	80136cc <trainctl_error>
 8013294:	4603      	mov	r3, r0
}
 8013296:	4618      	mov	r0, r3
 8013298:	3708      	adds	r7, #8
 801329a:	46bd      	mov	sp, r7
 801329c:	bd80      	pop	{r7, pc}

0801329e <debug_info>:
{
	trainctl_notif('T', train_idx, cmd, dta, dtalen);
}

static inline void debug_info(uint32_t sel, uint32_t num, char *msg, int v1, int v2, int v3)
{
 801329e:	b580      	push	{r7, lr}
 80132a0:	b088      	sub	sp, #32
 80132a2:	af04      	add	r7, sp, #16
 80132a4:	60f8      	str	r0, [r7, #12]
 80132a6:	60b9      	str	r1, [r7, #8]
 80132a8:	607a      	str	r2, [r7, #4]
 80132aa:	603b      	str	r3, [r7, #0]
	trainctl_notif2(sel, num, 'D', msg, v1, v2, v3);
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	b2d8      	uxtb	r0, r3
 80132b0:	68bb      	ldr	r3, [r7, #8]
 80132b2:	b2d9      	uxtb	r1, r3
 80132b4:	69fb      	ldr	r3, [r7, #28]
 80132b6:	9302      	str	r3, [sp, #8]
 80132b8:	69bb      	ldr	r3, [r7, #24]
 80132ba:	9301      	str	r3, [sp, #4]
 80132bc:	683b      	ldr	r3, [r7, #0]
 80132be:	9300      	str	r3, [sp, #0]
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	2244      	movs	r2, #68	; 0x44
 80132c4:	f001 f8c0 	bl	8014448 <trainctl_notif2>
}
 80132c8:	bf00      	nop
 80132ca:	3710      	adds	r7, #16
 80132cc:	46bd      	mov	sp, r7
 80132ce:	bd80      	pop	{r7, pc}

080132d0 <mqf_read_to_turnout>:
LFMQUEUE_DEF_H(to_turnout, msg_64_t)
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b082      	sub	sp, #8
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
 80132d8:	6879      	ldr	r1, [r7, #4]
 80132da:	4804      	ldr	r0, [pc, #16]	; (80132ec <mqf_read_to_turnout+0x1c>)
 80132dc:	f003 faac 	bl	8016838 <mqf_read>
 80132e0:	4603      	mov	r3, r0
 80132e2:	4618      	mov	r0, r3
 80132e4:	3708      	adds	r7, #8
 80132e6:	46bd      	mov	sp, r7
 80132e8:	bd80      	pop	{r7, pc}
 80132ea:	bf00      	nop
 80132ec:	20000484 	.word	0x20000484

080132f0 <turnout_tick>:
static void process_turnout_timers(uint32_t tick, uint32_t dt);
static void process_turnout_cmd(msg_64_t *m, uint32_t tick, uint32_t dt);


void turnout_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt)
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b088      	sub	sp, #32
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	60f8      	str	r0, [r7, #12]
 80132f8:	60b9      	str	r1, [r7, #8]
 80132fa:	607a      	str	r2, [r7, #4]
	static int first=1;
	if (first) {
 80132fc:	4b18      	ldr	r3, [pc, #96]	; (8013360 <turnout_tick+0x70>)
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d004      	beq.n	801330e <turnout_tick+0x1e>
		first = 0;
 8013304:	4b16      	ldr	r3, [pc, #88]	; (8013360 <turnout_tick+0x70>)
 8013306:	2200      	movs	r2, #0
 8013308:	601a      	str	r2, [r3, #0]
		turnout_reset();
 801330a:	f000 f89f 	bl	801344c <turnout_reset>
	}
	process_turnout_timers(tick, dt);
 801330e:	6879      	ldr	r1, [r7, #4]
 8013310:	68b8      	ldr	r0, [r7, #8]
 8013312:	f000 f8f7 	bl	8013504 <process_turnout_timers>
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_turnout(&m);
 8013316:	f107 0310 	add.w	r3, r7, #16
 801331a:	4618      	mov	r0, r3
 801331c:	f7ff ffd8 	bl	80132d0 <mqf_read_to_turnout>
 8013320:	61f8      	str	r0, [r7, #28]
		if (rc) break;
 8013322:	69fb      	ldr	r3, [r7, #28]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d117      	bne.n	8013358 <turnout_tick+0x68>
		if (IS_TURNOUT(m.to)) {
 8013328:	7c3b      	ldrb	r3, [r7, #16]
 801332a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801332e:	2b00      	cmp	r3, #0
 8013330:	d107      	bne.n	8013342 <turnout_tick+0x52>
			process_turnout_cmd(&m, tick, dt);
 8013332:	f107 0310 	add.w	r3, r7, #16
 8013336:	687a      	ldr	r2, [r7, #4]
 8013338:	68b9      	ldr	r1, [r7, #8]
 801333a:	4618      	mov	r0, r3
 801333c:	f000 f812 	bl	8013364 <process_turnout_cmd>
 8013340:	e7e9      	b.n	8013316 <turnout_tick+0x26>
		} else if (IS_BROADCAST(m.to)) {
 8013342:	7c3b      	ldrb	r3, [r7, #16]
 8013344:	2bff      	cmp	r3, #255	; 0xff
 8013346:	d1e6      	bne.n	8013316 <turnout_tick+0x26>
			switch (m.cmd) {
 8013348:	7cbb      	ldrb	r3, [r7, #18]
 801334a:	3bfe      	subs	r3, #254	; 0xfe
 801334c:	2b01      	cmp	r3, #1
 801334e:	d8e2      	bhi.n	8013316 <turnout_tick+0x26>
			case CMD_RESET: // FALLTHRU
			case CMD_EMERGENCY_STOP:
				turnout_reset();
 8013350:	f000 f87c 	bl	801344c <turnout_reset>
				break;
 8013354:	bf00      	nop
	for (;;) {
 8013356:	e7de      	b.n	8013316 <turnout_tick+0x26>
			}
		} else {
			// error
		}
	}
}
 8013358:	bf00      	nop
 801335a:	3720      	adds	r7, #32
 801335c:	46bd      	mov	sp, r7
 801335e:	bd80      	pop	{r7, pc}
 8013360:	20000218 	.word	0x20000218

08013364 <process_turnout_cmd>:
		const turnout_config_t *aconf = get_turnout_cnf(_idx); \
		turnout_vars_t         *avars = &tvars[_idx];


static void process_turnout_cmd(msg_64_t *m, uint32_t tick, uint32_t dt)
{
 8013364:	b580      	push	{r7, lr}
 8013366:	b08a      	sub	sp, #40	; 0x28
 8013368:	af02      	add	r7, sp, #8
 801336a:	60f8      	str	r0, [r7, #12]
 801336c:	60b9      	str	r1, [r7, #8]
 801336e:	607a      	str	r2, [r7, #4]
	uint8_t tidx = m->to & 0x07;
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	781b      	ldrb	r3, [r3, #0]
 8013374:	f003 0307 	and.w	r3, r3, #7
 8013378:	77fb      	strb	r3, [r7, #31]
	USE_TURNOUT(tidx)
 801337a:	7ffb      	ldrb	r3, [r7, #31]
 801337c:	4618      	mov	r0, r3
 801337e:	f000 fb7d 	bl	8013a7c <get_turnout_cnf>
 8013382:	61b8      	str	r0, [r7, #24]
 8013384:	7ffb      	ldrb	r3, [r7, #31]
 8013386:	005b      	lsls	r3, r3, #1
 8013388:	4a2d      	ldr	r2, [pc, #180]	; (8013440 <process_turnout_cmd+0xdc>)
 801338a:	4413      	add	r3, r2
 801338c:	617b      	str	r3, [r7, #20]
	if (!aconf || !avars) {
 801338e:	69bb      	ldr	r3, [r7, #24]
 8013390:	2b00      	cmp	r3, #0
 8013392:	d002      	beq.n	801339a <process_turnout_cmd+0x36>
 8013394:	697b      	ldr	r3, [r7, #20]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d105      	bne.n	80133a6 <process_turnout_cmd+0x42>
		turnout_error(ERR_BAD_PARAM, "bad idx");
 801339a:	492a      	ldr	r1, [pc, #168]	; (8013444 <process_turnout_cmd+0xe0>)
 801339c:	f06f 0001 	mvn.w	r0, #1
 80133a0:	f7ff ff6e 	bl	8013280 <turnout_error>
		return;
 80133a4:	e049      	b.n	801343a <process_turnout_cmd+0xd6>
	}
	debug_info('A', 0, "CMD", tidx, m->cmd, avars->value);
 80133a6:	7ffa      	ldrb	r2, [r7, #31]
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	789b      	ldrb	r3, [r3, #2]
 80133ac:	4619      	mov	r1, r3
 80133ae:	697b      	ldr	r3, [r7, #20]
 80133b0:	f993 3000 	ldrsb.w	r3, [r3]
 80133b4:	9301      	str	r3, [sp, #4]
 80133b6:	9100      	str	r1, [sp, #0]
 80133b8:	4613      	mov	r3, r2
 80133ba:	4a23      	ldr	r2, [pc, #140]	; (8013448 <process_turnout_cmd+0xe4>)
 80133bc:	2100      	movs	r1, #0
 80133be:	2041      	movs	r0, #65	; 0x41
 80133c0:	f7ff ff6d 	bl	801329e <debug_info>
#ifndef TRAIN_SIMU
	if (!aconf->cmd_port) return;
 80133c4:	69bb      	ldr	r3, [r7, #24]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d035      	beq.n	8013438 <process_turnout_cmd+0xd4>
#endif
	switch (m->cmd) {
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	789b      	ldrb	r3, [r3, #2]
 80133d0:	2b31      	cmp	r3, #49	; 0x31
 80133d2:	d002      	beq.n	80133da <process_turnout_cmd+0x76>
 80133d4:	2b32      	cmp	r3, #50	; 0x32
 80133d6:	d017      	beq.n	8013408 <process_turnout_cmd+0xa4>
 80133d8:	e02f      	b.n	801343a <process_turnout_cmd+0xd6>
	case CMD_TURNOUT_A:
		avars->value = -1;
 80133da:	697b      	ldr	r3, [r7, #20]
 80133dc:	22ff      	movs	r2, #255	; 0xff
 80133de:	701a      	strb	r2, [r3, #0]
#ifndef TRAIN_SIMU
	    HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_RESET);
 80133e0:	69bb      	ldr	r3, [r7, #24]
 80133e2:	6818      	ldr	r0, [r3, #0]
 80133e4:	69bb      	ldr	r3, [r7, #24]
 80133e6:	889b      	ldrh	r3, [r3, #4]
 80133e8:	2200      	movs	r2, #0
 80133ea:	4619      	mov	r1, r3
 80133ec:	f7ef ff94 	bl	8003318 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_RESET);
 80133f0:	69bb      	ldr	r3, [r7, #24]
 80133f2:	6818      	ldr	r0, [r3, #0]
 80133f4:	69bb      	ldr	r3, [r7, #24]
 80133f6:	88db      	ldrh	r3, [r3, #6]
 80133f8:	2200      	movs	r2, #0
 80133fa:	4619      	mov	r1, r3
 80133fc:	f7ef ff8c 	bl	8003318 <HAL_GPIO_WritePin>
#endif
		avars->st = ST_SETA;
 8013400:	697b      	ldr	r3, [r7, #20]
 8013402:	2201      	movs	r2, #1
 8013404:	705a      	strb	r2, [r3, #1]
		break;
 8013406:	e018      	b.n	801343a <process_turnout_cmd+0xd6>
	case CMD_TURNOUT_B:
		avars->value = -1;
 8013408:	697b      	ldr	r3, [r7, #20]
 801340a:	22ff      	movs	r2, #255	; 0xff
 801340c:	701a      	strb	r2, [r3, #0]
#ifndef TRAIN_SIMU
	    HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_RESET);
 801340e:	69bb      	ldr	r3, [r7, #24]
 8013410:	6818      	ldr	r0, [r3, #0]
 8013412:	69bb      	ldr	r3, [r7, #24]
 8013414:	889b      	ldrh	r3, [r3, #4]
 8013416:	2200      	movs	r2, #0
 8013418:	4619      	mov	r1, r3
 801341a:	f7ef ff7d 	bl	8003318 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_RESET);
 801341e:	69bb      	ldr	r3, [r7, #24]
 8013420:	6818      	ldr	r0, [r3, #0]
 8013422:	69bb      	ldr	r3, [r7, #24]
 8013424:	88db      	ldrh	r3, [r3, #6]
 8013426:	2200      	movs	r2, #0
 8013428:	4619      	mov	r1, r3
 801342a:	f7ef ff75 	bl	8003318 <HAL_GPIO_WritePin>
#endif
		avars->st = ST_SETB;
 801342e:	697b      	ldr	r3, [r7, #20]
 8013430:	2203      	movs	r2, #3
 8013432:	705a      	strb	r2, [r3, #1]
		break;
 8013434:	bf00      	nop
 8013436:	e000      	b.n	801343a <process_turnout_cmd+0xd6>
	if (!aconf->cmd_port) return;
 8013438:	bf00      	nop
	}
}
 801343a:	3720      	adds	r7, #32
 801343c:	46bd      	mov	sp, r7
 801343e:	bd80      	pop	{r7, pc}
 8013440:	20005264 	.word	0x20005264
 8013444:	08016f60 	.word	0x08016f60
 8013448:	08016f68 	.word	0x08016f68

0801344c <turnout_reset>:


static void turnout_reset(void)
{
 801344c:	b580      	push	{r7, lr}
 801344e:	b086      	sub	sp, #24
 8013450:	af02      	add	r7, sp, #8
	for (int tidx=0; tidx<NUM_TURNOUT; tidx++) {
 8013452:	2300      	movs	r3, #0
 8013454:	60fb      	str	r3, [r7, #12]
 8013456:	e044      	b.n	80134e2 <turnout_reset+0x96>
		USE_TURNOUT(tidx) 	// aconf avars
 8013458:	68f8      	ldr	r0, [r7, #12]
 801345a:	f000 fb0f 	bl	8013a7c <get_turnout_cnf>
 801345e:	60b8      	str	r0, [r7, #8]
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	005b      	lsls	r3, r3, #1
 8013464:	4a23      	ldr	r2, [pc, #140]	; (80134f4 <turnout_reset+0xa8>)
 8013466:	4413      	add	r3, r2
 8013468:	607b      	str	r3, [r7, #4]
		memset(avars, 0, sizeof(*avars));
 801346a:	2202      	movs	r2, #2
 801346c:	2100      	movs	r1, #0
 801346e:	6878      	ldr	r0, [r7, #4]
 8013470:	f003 fa83 	bl	801697a <memset>
		avars->value = 0;
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	2200      	movs	r2, #0
 8013478:	701a      	strb	r2, [r3, #0]
		avars->st = ST_IDLE;
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	2200      	movs	r2, #0
 801347e:	705a      	strb	r2, [r3, #1]
		if (!aconf) {
 8013480:	68bb      	ldr	r3, [r7, #8]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d106      	bne.n	8013494 <turnout_reset+0x48>
			itm_debug1(DBG_TURNOUT, "tn skip", tidx);
 8013486:	68fa      	ldr	r2, [r7, #12]
 8013488:	491b      	ldr	r1, [pc, #108]	; (80134f8 <turnout_reset+0xac>)
 801348a:	f44f 7000 	mov.w	r0, #512	; 0x200
 801348e:	f7ff fedd 	bl	801324c <itm_debug1>
			continue;
 8013492:	e023      	b.n	80134dc <turnout_reset+0x90>
		}
#ifndef TRAIN_SIMU
		if (!aconf->cmd_port) return;
 8013494:	68bb      	ldr	r3, [r7, #8]
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d026      	beq.n	80134ea <turnout_reset+0x9e>

		HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_RESET);
 801349c:	68bb      	ldr	r3, [r7, #8]
 801349e:	6818      	ldr	r0, [r3, #0]
 80134a0:	68bb      	ldr	r3, [r7, #8]
 80134a2:	889b      	ldrh	r3, [r3, #4]
 80134a4:	2200      	movs	r2, #0
 80134a6:	4619      	mov	r1, r3
 80134a8:	f7ef ff36 	bl	8003318 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_RESET);
 80134ac:	68bb      	ldr	r3, [r7, #8]
 80134ae:	6818      	ldr	r0, [r3, #0]
 80134b0:	68bb      	ldr	r3, [r7, #8]
 80134b2:	88db      	ldrh	r3, [r3, #6]
 80134b4:	2200      	movs	r2, #0
 80134b6:	4619      	mov	r1, r3
 80134b8:	f7ef ff2e 	bl	8003318 <HAL_GPIO_WritePin>
#endif
		itm_debug1(DBG_TURNOUT, "A/RESET", tidx);
 80134bc:	68fa      	ldr	r2, [r7, #12]
 80134be:	490f      	ldr	r1, [pc, #60]	; (80134fc <turnout_reset+0xb0>)
 80134c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80134c4:	f7ff fec2 	bl	801324c <itm_debug1>
		debug_info('A', 0, "RESET", 0, 0,0);
 80134c8:	2300      	movs	r3, #0
 80134ca:	9301      	str	r3, [sp, #4]
 80134cc:	2300      	movs	r3, #0
 80134ce:	9300      	str	r3, [sp, #0]
 80134d0:	2300      	movs	r3, #0
 80134d2:	4a0b      	ldr	r2, [pc, #44]	; (8013500 <turnout_reset+0xb4>)
 80134d4:	2100      	movs	r1, #0
 80134d6:	2041      	movs	r0, #65	; 0x41
 80134d8:	f7ff fee1 	bl	801329e <debug_info>
	for (int tidx=0; tidx<NUM_TURNOUT; tidx++) {
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	3301      	adds	r3, #1
 80134e0:	60fb      	str	r3, [r7, #12]
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	2b07      	cmp	r3, #7
 80134e6:	ddb7      	ble.n	8013458 <turnout_reset+0xc>
 80134e8:	e000      	b.n	80134ec <turnout_reset+0xa0>
		if (!aconf->cmd_port) return;
 80134ea:	bf00      	nop
		(void)aconf; // unused
	}
}
 80134ec:	3710      	adds	r7, #16
 80134ee:	46bd      	mov	sp, r7
 80134f0:	bd80      	pop	{r7, pc}
 80134f2:	bf00      	nop
 80134f4:	20005264 	.word	0x20005264
 80134f8:	08016f6c 	.word	0x08016f6c
 80134fc:	08016f74 	.word	0x08016f74
 8013500:	08016f7c 	.word	0x08016f7c

08013504 <process_turnout_timers>:




static void process_turnout_timers(uint32_t tick, uint32_t dt)
{
 8013504:	b580      	push	{r7, lr}
 8013506:	b088      	sub	sp, #32
 8013508:	af02      	add	r7, sp, #8
 801350a:	6078      	str	r0, [r7, #4]
 801350c:	6039      	str	r1, [r7, #0]
	for (int i=0; i<NUM_TURNOUTS; i++) {
 801350e:	2300      	movs	r3, #0
 8013510:	617b      	str	r3, [r7, #20]
 8013512:	e0a2      	b.n	801365a <process_turnout_timers+0x156>
		USE_TURNOUT(i)		// aconf , avars
 8013514:	6978      	ldr	r0, [r7, #20]
 8013516:	f000 fab1 	bl	8013a7c <get_turnout_cnf>
 801351a:	6138      	str	r0, [r7, #16]
 801351c:	697b      	ldr	r3, [r7, #20]
 801351e:	005b      	lsls	r3, r3, #1
 8013520:	4a52      	ldr	r2, [pc, #328]	; (801366c <process_turnout_timers+0x168>)
 8013522:	4413      	add	r3, r2
 8013524:	60fb      	str	r3, [r7, #12]
#ifndef TRAIN_SIMU
        if (!aconf->cmd_port) continue;
 8013526:	693b      	ldr	r3, [r7, #16]
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	2b00      	cmp	r3, #0
 801352c:	f000 808f 	beq.w	801364e <process_turnout_timers+0x14a>
#endif
		switch (avars->st) {
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	785b      	ldrb	r3, [r3, #1]
 8013534:	2b04      	cmp	r3, #4
 8013536:	d87d      	bhi.n	8013634 <process_turnout_timers+0x130>
 8013538:	a201      	add	r2, pc, #4	; (adr r2, 8013540 <process_turnout_timers+0x3c>)
 801353a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801353e:	bf00      	nop
 8013540:	08013653 	.word	0x08013653
 8013544:	08013555 	.word	0x08013555
 8013548:	080135c5 	.word	0x080135c5
 801354c:	0801358d 	.word	0x0801358d
 8013550:	080135fd 	.word	0x080135fd
		case ST_IDLE:
			break;
		case ST_SETA:
#ifndef TRAIN_SIMU
			HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_SET);
 8013554:	693b      	ldr	r3, [r7, #16]
 8013556:	6818      	ldr	r0, [r3, #0]
 8013558:	693b      	ldr	r3, [r7, #16]
 801355a:	889b      	ldrh	r3, [r3, #4]
 801355c:	2201      	movs	r2, #1
 801355e:	4619      	mov	r1, r3
 8013560:	f7ef feda 	bl	8003318 <HAL_GPIO_WritePin>
#else
			(void)aconf; // unused in SIMU
#endif
			avars->st = ST_RESETA;
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	2202      	movs	r2, #2
 8013568:	705a      	strb	r2, [r3, #1]
			itm_debug1(DBG_TURNOUT, "A/SETA", i);
 801356a:	697a      	ldr	r2, [r7, #20]
 801356c:	4940      	ldr	r1, [pc, #256]	; (8013670 <process_turnout_timers+0x16c>)
 801356e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8013572:	f7ff fe6b 	bl	801324c <itm_debug1>
			debug_info('A', 0, "A0/SETA", 0, 0,0);
 8013576:	2300      	movs	r3, #0
 8013578:	9301      	str	r3, [sp, #4]
 801357a:	2300      	movs	r3, #0
 801357c:	9300      	str	r3, [sp, #0]
 801357e:	2300      	movs	r3, #0
 8013580:	4a3c      	ldr	r2, [pc, #240]	; (8013674 <process_turnout_timers+0x170>)
 8013582:	2100      	movs	r1, #0
 8013584:	2041      	movs	r0, #65	; 0x41
 8013586:	f7ff fe8a 	bl	801329e <debug_info>
			break;
 801358a:	e063      	b.n	8013654 <process_turnout_timers+0x150>
		case ST_SETB:
#ifndef TRAIN_SIMU
			HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_SET);
 801358c:	693b      	ldr	r3, [r7, #16]
 801358e:	6818      	ldr	r0, [r3, #0]
 8013590:	693b      	ldr	r3, [r7, #16]
 8013592:	88db      	ldrh	r3, [r3, #6]
 8013594:	2201      	movs	r2, #1
 8013596:	4619      	mov	r1, r3
 8013598:	f7ef febe 	bl	8003318 <HAL_GPIO_WritePin>
#endif
			avars->st = ST_RESETB;
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	2204      	movs	r2, #4
 80135a0:	705a      	strb	r2, [r3, #1]
			itm_debug1(DBG_TURNOUT, "A/SETB", i);
 80135a2:	697a      	ldr	r2, [r7, #20]
 80135a4:	4934      	ldr	r1, [pc, #208]	; (8013678 <process_turnout_timers+0x174>)
 80135a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80135aa:	f7ff fe4f 	bl	801324c <itm_debug1>
			debug_info('A', 0, "A0/SETB", 0, 0,0);
 80135ae:	2300      	movs	r3, #0
 80135b0:	9301      	str	r3, [sp, #4]
 80135b2:	2300      	movs	r3, #0
 80135b4:	9300      	str	r3, [sp, #0]
 80135b6:	2300      	movs	r3, #0
 80135b8:	4a30      	ldr	r2, [pc, #192]	; (801367c <process_turnout_timers+0x178>)
 80135ba:	2100      	movs	r1, #0
 80135bc:	2041      	movs	r0, #65	; 0x41
 80135be:	f7ff fe6e 	bl	801329e <debug_info>
			break;
 80135c2:	e047      	b.n	8013654 <process_turnout_timers+0x150>
		case ST_RESETA:
#ifndef TRAIN_SIMU
			HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_RESET);
 80135c4:	693b      	ldr	r3, [r7, #16]
 80135c6:	6818      	ldr	r0, [r3, #0]
 80135c8:	693b      	ldr	r3, [r7, #16]
 80135ca:	889b      	ldrh	r3, [r3, #4]
 80135cc:	2200      	movs	r2, #0
 80135ce:	4619      	mov	r1, r3
 80135d0:	f7ef fea2 	bl	8003318 <HAL_GPIO_WritePin>
#endif
			avars->st = ST_IDLE;
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	2200      	movs	r2, #0
 80135d8:	705a      	strb	r2, [r3, #1]
			itm_debug1(DBG_TURNOUT, "A/RESETA", i);
 80135da:	697a      	ldr	r2, [r7, #20]
 80135dc:	4928      	ldr	r1, [pc, #160]	; (8013680 <process_turnout_timers+0x17c>)
 80135de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80135e2:	f7ff fe33 	bl	801324c <itm_debug1>
			debug_info('A', 0, "A0/RESETA", 0, 0,0);
 80135e6:	2300      	movs	r3, #0
 80135e8:	9301      	str	r3, [sp, #4]
 80135ea:	2300      	movs	r3, #0
 80135ec:	9300      	str	r3, [sp, #0]
 80135ee:	2300      	movs	r3, #0
 80135f0:	4a24      	ldr	r2, [pc, #144]	; (8013684 <process_turnout_timers+0x180>)
 80135f2:	2100      	movs	r1, #0
 80135f4:	2041      	movs	r0, #65	; 0x41
 80135f6:	f7ff fe52 	bl	801329e <debug_info>
			break;
 80135fa:	e02b      	b.n	8013654 <process_turnout_timers+0x150>
		case ST_RESETB:
#ifndef TRAIN_SIMU
			HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_RESET);
 80135fc:	693b      	ldr	r3, [r7, #16]
 80135fe:	6818      	ldr	r0, [r3, #0]
 8013600:	693b      	ldr	r3, [r7, #16]
 8013602:	88db      	ldrh	r3, [r3, #6]
 8013604:	2200      	movs	r2, #0
 8013606:	4619      	mov	r1, r3
 8013608:	f7ef fe86 	bl	8003318 <HAL_GPIO_WritePin>
#endif
			avars->st = ST_IDLE;
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	2200      	movs	r2, #0
 8013610:	705a      	strb	r2, [r3, #1]
			itm_debug1(DBG_TURNOUT, "A/RESETB", i);
 8013612:	697a      	ldr	r2, [r7, #20]
 8013614:	491c      	ldr	r1, [pc, #112]	; (8013688 <process_turnout_timers+0x184>)
 8013616:	f44f 7000 	mov.w	r0, #512	; 0x200
 801361a:	f7ff fe17 	bl	801324c <itm_debug1>
			debug_info('A', 0, "A0/RESETB", 0, 0,0);
 801361e:	2300      	movs	r3, #0
 8013620:	9301      	str	r3, [sp, #4]
 8013622:	2300      	movs	r3, #0
 8013624:	9300      	str	r3, [sp, #0]
 8013626:	2300      	movs	r3, #0
 8013628:	4a18      	ldr	r2, [pc, #96]	; (801368c <process_turnout_timers+0x188>)
 801362a:	2100      	movs	r1, #0
 801362c:	2041      	movs	r0, #65	; 0x41
 801362e:	f7ff fe36 	bl	801329e <debug_info>
			break;
 8013632:	e00f      	b.n	8013654 <process_turnout_timers+0x150>
			HAL_GPIO_TogglePin(aconf->cmd_port, aconf->pinB);
#endif
			break;
			 */
		default:
			itm_debug1(DBG_TURNOUT|DBG_ERR, "bad state", avars->st);
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	785b      	ldrb	r3, [r3, #1]
 8013638:	461a      	mov	r2, r3
 801363a:	4915      	ldr	r1, [pc, #84]	; (8013690 <process_turnout_timers+0x18c>)
 801363c:	4815      	ldr	r0, [pc, #84]	; (8013694 <process_turnout_timers+0x190>)
 801363e:	f7ff fe05 	bl	801324c <itm_debug1>
			turnout_error(ERR_BAD_STATE, "bad state");
 8013642:	4913      	ldr	r1, [pc, #76]	; (8013690 <process_turnout_timers+0x18c>)
 8013644:	f06f 0008 	mvn.w	r0, #8
 8013648:	f7ff fe1a 	bl	8013280 <turnout_error>
			break;
 801364c:	e002      	b.n	8013654 <process_turnout_timers+0x150>
        if (!aconf->cmd_port) continue;
 801364e:	bf00      	nop
 8013650:	e000      	b.n	8013654 <process_turnout_timers+0x150>
			break;
 8013652:	bf00      	nop
	for (int i=0; i<NUM_TURNOUTS; i++) {
 8013654:	697b      	ldr	r3, [r7, #20]
 8013656:	3301      	adds	r3, #1
 8013658:	617b      	str	r3, [r7, #20]
 801365a:	697b      	ldr	r3, [r7, #20]
 801365c:	2b00      	cmp	r3, #0
 801365e:	f77f af59 	ble.w	8013514 <process_turnout_timers+0x10>
		}
	}
}
 8013662:	bf00      	nop
 8013664:	3718      	adds	r7, #24
 8013666:	46bd      	mov	sp, r7
 8013668:	bd80      	pop	{r7, pc}
 801366a:	bf00      	nop
 801366c:	20005264 	.word	0x20005264
 8013670:	08016f84 	.word	0x08016f84
 8013674:	08016f8c 	.word	0x08016f8c
 8013678:	08016f94 	.word	0x08016f94
 801367c:	08016f9c 	.word	0x08016f9c
 8013680:	08016fa4 	.word	0x08016fa4
 8013684:	08016fb0 	.word	0x08016fb0
 8013688:	08016fbc 	.word	0x08016fbc
 801368c:	08016fc8 	.word	0x08016fc8
 8013690:	08016fd4 	.word	0x08016fd4
 8013694:	80000200 	.word	0x80000200

08013698 <itm_debug1>:
//void _itm_debug1(const char *msg, int v);
//void _itm_debug2(const char *msg, int v1, int v2);
void _itm_debug3(const char *msg, int v1, int v2, int v3, int n);

static inline void itm_debug1(uint32_t f, const char *msg, int v)
{
 8013698:	b580      	push	{r7, lr}
 801369a:	b086      	sub	sp, #24
 801369c:	af02      	add	r7, sp, #8
 801369e:	60f8      	str	r0, [r7, #12]
 80136a0:	60b9      	str	r1, [r7, #8]
 80136a2:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 80136a4:	4b08      	ldr	r3, [pc, #32]	; (80136c8 <itm_debug1+0x30>)
 80136a6:	681a      	ldr	r2, [r3, #0]
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	4013      	ands	r3, r2
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d007      	beq.n	80136c0 <itm_debug1+0x28>
 80136b0:	2301      	movs	r3, #1
 80136b2:	9300      	str	r3, [sp, #0]
 80136b4:	2300      	movs	r3, #0
 80136b6:	2200      	movs	r2, #0
 80136b8:	6879      	ldr	r1, [r7, #4]
 80136ba:	68b8      	ldr	r0, [r7, #8]
 80136bc:	f002 ff3c 	bl	8016538 <_itm_debug3>
}
 80136c0:	bf00      	nop
 80136c2:	3710      	adds	r7, #16
 80136c4:	46bd      	mov	sp, r7
 80136c6:	bd80      	pop	{r7, pc}
 80136c8:	20000538 	.word	0x20000538

080136cc <trainctl_error>:




int trainctl_error(char l, int code, const char *msg)
{
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b088      	sub	sp, #32
 80136d0:	af02      	add	r7, sp, #8
 80136d2:	4603      	mov	r3, r0
 80136d4:	60b9      	str	r1, [r7, #8]
 80136d6:	607a      	str	r2, [r7, #4]
 80136d8:	73fb      	strb	r3, [r7, #15]
	int16_t c = code;
 80136da:	68bb      	ldr	r3, [r7, #8]
 80136dc:	b21b      	sxth	r3, r3
 80136de:	82fb      	strh	r3, [r7, #22]
	// add debug msg or notification here
	if (c >=0) c=-1;
 80136e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	db02      	blt.n	80136ee <trainctl_error+0x22>
 80136e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80136ec:	82fb      	strh	r3, [r7, #22]
	trainctl_notif('G', 0, 'E', (void *)&c, sizeof(c));
 80136ee:	f107 0216 	add.w	r2, r7, #22
 80136f2:	2302      	movs	r3, #2
 80136f4:	9300      	str	r3, [sp, #0]
 80136f6:	4613      	mov	r3, r2
 80136f8:	2245      	movs	r2, #69	; 0x45
 80136fa:	2100      	movs	r1, #0
 80136fc:	2047      	movs	r0, #71	; 0x47
 80136fe:	f000 fe7f 	bl	8014400 <trainctl_notif>
	return code;
 8013702:	68bb      	ldr	r3, [r7, #8]
}
 8013704:	4618      	mov	r0, r3
 8013706:	3718      	adds	r7, #24
 8013708:	46bd      	mov	sp, r7
 801370a:	bd80      	pop	{r7, pc}

0801370c <long_isr>:
}



void long_isr(uint32_t dur)
{
 801370c:	b580      	push	{r7, lr}
 801370e:	b082      	sub	sp, #8
 8013710:	af00      	add	r7, sp, #0
 8013712:	6078      	str	r0, [r7, #4]
	itm_debug1(DBG_ERR, "long isr", dur);
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	461a      	mov	r2, r3
 8013718:	4904      	ldr	r1, [pc, #16]	; (801372c <long_isr+0x20>)
 801371a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801371e:	f7ff ffbb 	bl	8013698 <itm_debug1>
	//for (int i=0; i<100; i++) {
	//	itm_debug1(DBG_ERR, "micro", GetCurrentMicro());
	//}
}
 8013722:	bf00      	nop
 8013724:	3708      	adds	r7, #8
 8013726:	46bd      	mov	sp, r7
 8013728:	bd80      	pop	{r7, pc}
 801372a:	bf00      	nop
 801372c:	08016fe0 	.word	0x08016fe0

08013730 <GetCycleCount64>:
 */
volatile uint64_t last_cycle_count_64 = 0;

// Call at least every 2^32 cycles (every 59.6 seconds @ 72 MHz).
uint64_t GetCycleCount64(void)
{
 8013730:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8013734:	b085      	sub	sp, #20
 8013736:	af00      	add	r7, sp, #0
#ifdef TRAIN_SIMU
    return 0;
#else
  uint32_t primask;
  asm volatile ("mrs %0, PRIMASK" : "=r"(primask));
 8013738:	f3ef 8310 	mrs	r3, PRIMASK
 801373c:	60fb      	str	r3, [r7, #12]
  asm volatile ("cpsid i");  // Disable interrupts.
 801373e:	b672      	cpsid	i
  int64_t r = last_cycle_count_64;
 8013740:	4b12      	ldr	r3, [pc, #72]	; (801378c <GetCycleCount64+0x5c>)
 8013742:	e9d3 3400 	ldrd	r3, r4, [r3]
 8013746:	e9c7 3400 	strd	r3, r4, [r7]
  r += DWT->CYCCNT - (uint32_t)(r);
 801374a:	4b11      	ldr	r3, [pc, #68]	; (8013790 <GetCycleCount64+0x60>)
 801374c:	685a      	ldr	r2, [r3, #4]
 801374e:	683b      	ldr	r3, [r7, #0]
 8013750:	1ad3      	subs	r3, r2, r3
 8013752:	469b      	mov	fp, r3
 8013754:	f04f 0c00 	mov.w	ip, #0
 8013758:	e9d7 1200 	ldrd	r1, r2, [r7]
 801375c:	eb1b 0301 	adds.w	r3, fp, r1
 8013760:	eb4c 0402 	adc.w	r4, ip, r2
 8013764:	e9c7 3400 	strd	r3, r4, [r7]
  last_cycle_count_64 = r;
 8013768:	e9d7 3400 	ldrd	r3, r4, [r7]
 801376c:	4a07      	ldr	r2, [pc, #28]	; (801378c <GetCycleCount64+0x5c>)
 801376e:	e9c2 3400 	strd	r3, r4, [r2]
  asm volatile ("msr PRIMASK, %0" : : "r"(primask));  // Restore interrupts.
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	f383 8810 	msr	PRIMASK, r3
  return r;
 8013778:	e9d7 3400 	ldrd	r3, r4, [r7]
#endif
}
 801377c:	4618      	mov	r0, r3
 801377e:	4621      	mov	r1, r4
 8013780:	3714      	adds	r7, #20
 8013782:	46bd      	mov	sp, r7
 8013784:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8013788:	4770      	bx	lr
 801378a:	bf00      	nop
 801378c:	20005278 	.word	0x20005278
 8013790:	e0001000 	.word	0xe0001000

08013794 <startCycleCounter>:

void startCycleCounter(void)
{
 8013794:	b480      	push	{r7}
 8013796:	af00      	add	r7, sp, #0
#ifndef TRAIN_SIMU
	DWT->CYCCNT |= DWT_CTRL_CYCCNTENA_Msk;  // Set bit 0.
 8013798:	4b05      	ldr	r3, [pc, #20]	; (80137b0 <startCycleCounter+0x1c>)
 801379a:	685b      	ldr	r3, [r3, #4]
 801379c:	4a04      	ldr	r2, [pc, #16]	; (80137b0 <startCycleCounter+0x1c>)
 801379e:	f043 0301 	orr.w	r3, r3, #1
 80137a2:	6053      	str	r3, [r2, #4]
#endif
}
 80137a4:	bf00      	nop
 80137a6:	46bd      	mov	sp, r7
 80137a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ac:	4770      	bx	lr
 80137ae:	bf00      	nop
 80137b0:	e0001000 	.word	0xe0001000

080137b4 <get_param_def>:
#include <stddef.h>
#include <string.h>
#include "param.h"

static param_t *get_param_def(const param_t *rgpar, const char *n)
{
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b084      	sub	sp, #16
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
 80137bc:	6039      	str	r1, [r7, #0]
	for (param_t *p = (param_t*) rgpar; p->name; p++) {
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	60fb      	str	r3, [r7, #12]
 80137c2:	e00d      	b.n	80137e0 <get_param_def+0x2c>
		if (!strcmp(p->name, n)) return p;
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	6839      	ldr	r1, [r7, #0]
 80137ca:	4618      	mov	r0, r3
 80137cc:	f7ec fd00 	bl	80001d0 <strcmp>
 80137d0:	4603      	mov	r3, r0
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d101      	bne.n	80137da <get_param_def+0x26>
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	e007      	b.n	80137ea <get_param_def+0x36>
	for (param_t *p = (param_t*) rgpar; p->name; p++) {
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	3324      	adds	r3, #36	; 0x24
 80137de:	60fb      	str	r3, [r7, #12]
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d1ed      	bne.n	80137c4 <get_param_def+0x10>
	}
	return NULL;
 80137e8:	2300      	movs	r3, #0
}
 80137ea:	4618      	mov	r0, r3
 80137ec:	3710      	adds	r7, #16
 80137ee:	46bd      	mov	sp, r7
 80137f0:	bd80      	pop	{r7, pc}

080137f2 <param_get_value>:

int param_get_value(const param_t *params, void *ptr, const char *name, int32_t *pvalue, int32_t *pdef, int32_t *pmin, int32_t *pmax)
{
 80137f2:	b580      	push	{r7, lr}
 80137f4:	b088      	sub	sp, #32
 80137f6:	af00      	add	r7, sp, #0
 80137f8:	60f8      	str	r0, [r7, #12]
 80137fa:	60b9      	str	r1, [r7, #8]
 80137fc:	607a      	str	r2, [r7, #4]
 80137fe:	603b      	str	r3, [r7, #0]
	param_t *prm = get_param_def(params, name);
 8013800:	6879      	ldr	r1, [r7, #4]
 8013802:	68f8      	ldr	r0, [r7, #12]
 8013804:	f7ff ffd6 	bl	80137b4 <get_param_def>
 8013808:	6178      	str	r0, [r7, #20]
	if (!prm) {
 801380a:	697b      	ldr	r3, [r7, #20]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d101      	bne.n	8013814 <param_get_value+0x22>
		return 10;
 8013810:	230a      	movs	r3, #10
 8013812:	e05c      	b.n	80138ce <param_get_value+0xdc>
	}
	if (pmin) *pmin = prm->min;
 8013814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013816:	2b00      	cmp	r3, #0
 8013818:	d003      	beq.n	8013822 <param_get_value+0x30>
 801381a:	697b      	ldr	r3, [r7, #20]
 801381c:	699a      	ldr	r2, [r3, #24]
 801381e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013820:	601a      	str	r2, [r3, #0]
	if (pmax) *pmax = prm->max;
 8013822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013824:	2b00      	cmp	r3, #0
 8013826:	d003      	beq.n	8013830 <param_get_value+0x3e>
 8013828:	697b      	ldr	r3, [r7, #20]
 801382a:	69da      	ldr	r2, [r3, #28]
 801382c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801382e:	601a      	str	r2, [r3, #0]
	if (pdef) *pdef = prm->def;
 8013830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013832:	2b00      	cmp	r3, #0
 8013834:	d003      	beq.n	801383e <param_get_value+0x4c>
 8013836:	697b      	ldr	r3, [r7, #20]
 8013838:	6a1a      	ldr	r2, [r3, #32]
 801383a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801383c:	601a      	str	r2, [r3, #0]
	if (pvalue) {
 801383e:	683b      	ldr	r3, [r7, #0]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d043      	beq.n	80138cc <param_get_value+0xda>
		if (prm->getter) {
 8013844:	697b      	ldr	r3, [r7, #20]
 8013846:	68db      	ldr	r3, [r3, #12]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d007      	beq.n	801385c <param_get_value+0x6a>
			*pvalue = prm->getter(prm);
 801384c:	697b      	ldr	r3, [r7, #20]
 801384e:	68db      	ldr	r3, [r3, #12]
 8013850:	6978      	ldr	r0, [r7, #20]
 8013852:	4798      	blx	r3
 8013854:	4602      	mov	r2, r0
 8013856:	683b      	ldr	r3, [r7, #0]
 8013858:	601a      	str	r2, [r3, #0]
 801385a:	e037      	b.n	80138cc <param_get_value+0xda>
		} else {
			uint8_t *p = ptr;
 801385c:	68bb      	ldr	r3, [r7, #8]
 801385e:	61fb      	str	r3, [r7, #28]
			if (prm->ptr) p = prm->ptr;
 8013860:	697b      	ldr	r3, [r7, #20]
 8013862:	685b      	ldr	r3, [r3, #4]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d002      	beq.n	801386e <param_get_value+0x7c>
 8013868:	697b      	ldr	r3, [r7, #20]
 801386a:	685b      	ldr	r3, [r3, #4]
 801386c:	61fb      	str	r3, [r7, #28]
			p += prm->offset;
 801386e:	697b      	ldr	r3, [r7, #20]
 8013870:	689b      	ldr	r3, [r3, #8]
 8013872:	461a      	mov	r2, r3
 8013874:	69fb      	ldr	r3, [r7, #28]
 8013876:	4413      	add	r3, r2
 8013878:	61fb      	str	r3, [r7, #28]
			if (!p) return 11;
 801387a:	69fb      	ldr	r3, [r7, #28]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d101      	bne.n	8013884 <param_get_value+0x92>
 8013880:	230b      	movs	r3, #11
 8013882:	e024      	b.n	80138ce <param_get_value+0xdc>
			if ((int)p<0x100) return 12; // probably an error if low ptr
 8013884:	69fb      	ldr	r3, [r7, #28]
 8013886:	2bff      	cmp	r3, #255	; 0xff
 8013888:	dc01      	bgt.n	801388e <param_get_value+0x9c>
 801388a:	230c      	movs	r3, #12
 801388c:	e01f      	b.n	80138ce <param_get_value+0xdc>

			int8_t v8; int16_t v16; int32_t v32;
			switch (prm->size) {
 801388e:	697b      	ldr	r3, [r7, #20]
 8013890:	695b      	ldr	r3, [r3, #20]
 8013892:	2b02      	cmp	r3, #2
 8013894:	d00a      	beq.n	80138ac <param_get_value+0xba>
 8013896:	2b04      	cmp	r3, #4
 8013898:	d00f      	beq.n	80138ba <param_get_value+0xc8>
 801389a:	2b01      	cmp	r3, #1
 801389c:	d111      	bne.n	80138c2 <param_get_value+0xd0>
			case 1:
				v8 = *((int8_t *)p);
 801389e:	69fb      	ldr	r3, [r7, #28]
 80138a0:	781b      	ldrb	r3, [r3, #0]
 80138a2:	747b      	strb	r3, [r7, #17]
				v32 = (int32_t)v8;
 80138a4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80138a8:	61bb      	str	r3, [r7, #24]
				break;
 80138aa:	e00c      	b.n	80138c6 <param_get_value+0xd4>
			case 2:
				v16 = *((int16_t *)p);
 80138ac:	69fb      	ldr	r3, [r7, #28]
 80138ae:	881b      	ldrh	r3, [r3, #0]
 80138b0:	827b      	strh	r3, [r7, #18]
				v32 = (int32_t)v16;
 80138b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80138b6:	61bb      	str	r3, [r7, #24]
				break;
 80138b8:	e005      	b.n	80138c6 <param_get_value+0xd4>
			case 4:
				v32 = *((int32_t *)p);
 80138ba:	69fb      	ldr	r3, [r7, #28]
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	61bb      	str	r3, [r7, #24]
				break;
 80138c0:	e001      	b.n	80138c6 <param_get_value+0xd4>
			default:
				return 12;
 80138c2:	230c      	movs	r3, #12
 80138c4:	e003      	b.n	80138ce <param_get_value+0xdc>
			}
			*pvalue = v32;
 80138c6:	683b      	ldr	r3, [r7, #0]
 80138c8:	69ba      	ldr	r2, [r7, #24]
 80138ca:	601a      	str	r2, [r3, #0]
		}
	}
	return 0;
 80138cc:	2300      	movs	r3, #0
}
 80138ce:	4618      	mov	r0, r3
 80138d0:	3720      	adds	r7, #32
 80138d2:	46bd      	mov	sp, r7
 80138d4:	bd80      	pop	{r7, pc}

080138d6 <param_set_value>:
int param_set_value(const param_t *params, void *ptr, const char *name, int32_t value)
{
 80138d6:	b580      	push	{r7, lr}
 80138d8:	b088      	sub	sp, #32
 80138da:	af00      	add	r7, sp, #0
 80138dc:	60f8      	str	r0, [r7, #12]
 80138de:	60b9      	str	r1, [r7, #8]
 80138e0:	607a      	str	r2, [r7, #4]
 80138e2:	603b      	str	r3, [r7, #0]
	param_t *prm = get_param_def(params, name);
 80138e4:	6879      	ldr	r1, [r7, #4]
 80138e6:	68f8      	ldr	r0, [r7, #12]
 80138e8:	f7ff ff64 	bl	80137b4 <get_param_def>
 80138ec:	61b8      	str	r0, [r7, #24]
	if (!prm) {
 80138ee:	69bb      	ldr	r3, [r7, #24]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d101      	bne.n	80138f8 <param_set_value+0x22>
		return 10;
 80138f4:	230a      	movs	r3, #10
 80138f6:	e03f      	b.n	8013978 <param_set_value+0xa2>
	}
	if (prm->setter) {
 80138f8:	69bb      	ldr	r3, [r7, #24]
 80138fa:	691b      	ldr	r3, [r3, #16]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d005      	beq.n	801390c <param_set_value+0x36>
		//if ((1)) return 42;
		prm->setter(prm, value);
 8013900:	69bb      	ldr	r3, [r7, #24]
 8013902:	691b      	ldr	r3, [r3, #16]
 8013904:	6839      	ldr	r1, [r7, #0]
 8013906:	69b8      	ldr	r0, [r7, #24]
 8013908:	4798      	blx	r3
 801390a:	e034      	b.n	8013976 <param_set_value+0xa0>
	} else {
		uint8_t *p = ptr;
 801390c:	68bb      	ldr	r3, [r7, #8]
 801390e:	61fb      	str	r3, [r7, #28]
		if (prm->ptr) p = prm->ptr;
 8013910:	69bb      	ldr	r3, [r7, #24]
 8013912:	685b      	ldr	r3, [r3, #4]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d002      	beq.n	801391e <param_set_value+0x48>
 8013918:	69bb      	ldr	r3, [r7, #24]
 801391a:	685b      	ldr	r3, [r3, #4]
 801391c:	61fb      	str	r3, [r7, #28]
		p += prm->offset;
 801391e:	69bb      	ldr	r3, [r7, #24]
 8013920:	689b      	ldr	r3, [r3, #8]
 8013922:	461a      	mov	r2, r3
 8013924:	69fb      	ldr	r3, [r7, #28]
 8013926:	4413      	add	r3, r2
 8013928:	61fb      	str	r3, [r7, #28]
		if (!p) return 11;
 801392a:	69fb      	ldr	r3, [r7, #28]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d101      	bne.n	8013934 <param_set_value+0x5e>
 8013930:	230b      	movs	r3, #11
 8013932:	e021      	b.n	8013978 <param_set_value+0xa2>
		if ((int)p<0x100) return 12; // probably an error if low ptr
 8013934:	69fb      	ldr	r3, [r7, #28]
 8013936:	2bff      	cmp	r3, #255	; 0xff
 8013938:	dc01      	bgt.n	801393e <param_set_value+0x68>
 801393a:	230c      	movs	r3, #12
 801393c:	e01c      	b.n	8013978 <param_set_value+0xa2>

		int8_t v8; int16_t v16; int32_t v32;
		v32 = value;
 801393e:	683b      	ldr	r3, [r7, #0]
 8013940:	617b      	str	r3, [r7, #20]
		switch (prm->size) {
 8013942:	69bb      	ldr	r3, [r7, #24]
 8013944:	695b      	ldr	r3, [r3, #20]
 8013946:	2b02      	cmp	r3, #2
 8013948:	d009      	beq.n	801395e <param_set_value+0x88>
 801394a:	2b04      	cmp	r3, #4
 801394c:	d00d      	beq.n	801396a <param_set_value+0x94>
 801394e:	2b01      	cmp	r3, #1
 8013950:	d10f      	bne.n	8013972 <param_set_value+0x9c>
		case 1:
			v8 = (int8_t) v32;
 8013952:	697b      	ldr	r3, [r7, #20]
 8013954:	747b      	strb	r3, [r7, #17]
			*((int8_t *)p) = v8;
 8013956:	69fb      	ldr	r3, [r7, #28]
 8013958:	7c7a      	ldrb	r2, [r7, #17]
 801395a:	701a      	strb	r2, [r3, #0]
			break;
 801395c:	e00b      	b.n	8013976 <param_set_value+0xa0>
		case 2:
			v16 = (int16_t) v32;
 801395e:	697b      	ldr	r3, [r7, #20]
 8013960:	827b      	strh	r3, [r7, #18]
			*((int16_t *)p) = v16;
 8013962:	69fb      	ldr	r3, [r7, #28]
 8013964:	8a7a      	ldrh	r2, [r7, #18]
 8013966:	801a      	strh	r2, [r3, #0]
			break;
 8013968:	e005      	b.n	8013976 <param_set_value+0xa0>
		case 4:
			*((int32_t *)p) = v32;
 801396a:	69fb      	ldr	r3, [r7, #28]
 801396c:	697a      	ldr	r2, [r7, #20]
 801396e:	601a      	str	r2, [r3, #0]
			break;
 8013970:	e001      	b.n	8013976 <param_set_value+0xa0>
		default:
			return 12;
 8013972:	230c      	movs	r3, #12
 8013974:	e000      	b.n	8013978 <param_set_value+0xa2>
		}
	}
	return 0;
 8013976:	2300      	movs	r3, #0
}
 8013978:	4618      	mov	r0, r3
 801397a:	3720      	adds	r7, #32
 801397c:	46bd      	mov	sp, r7
 801397e:	bd80      	pop	{r7, pc}

08013980 <itm_debug1>:
{
 8013980:	b580      	push	{r7, lr}
 8013982:	b086      	sub	sp, #24
 8013984:	af02      	add	r7, sp, #8
 8013986:	60f8      	str	r0, [r7, #12]
 8013988:	60b9      	str	r1, [r7, #8]
 801398a:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 801398c:	4b08      	ldr	r3, [pc, #32]	; (80139b0 <itm_debug1+0x30>)
 801398e:	681a      	ldr	r2, [r3, #0]
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	4013      	ands	r3, r2
 8013994:	2b00      	cmp	r3, #0
 8013996:	d007      	beq.n	80139a8 <itm_debug1+0x28>
 8013998:	2301      	movs	r3, #1
 801399a:	9300      	str	r3, [sp, #0]
 801399c:	2300      	movs	r3, #0
 801399e:	2200      	movs	r2, #0
 80139a0:	6879      	ldr	r1, [r7, #4]
 80139a2:	68b8      	ldr	r0, [r7, #8]
 80139a4:	f002 fdc8 	bl	8016538 <_itm_debug3>
}
 80139a8:	bf00      	nop
 80139aa:	3710      	adds	r7, #16
 80139ac:	46bd      	mov	sp, r7
 80139ae:	bd80      	pop	{r7, pc}
 80139b0:	20000538 	.word	0x20000538

080139b4 <config_error>:
{
	return trainctl_error('A', code, msg);
}

static inline void *config_error(int code, const char *msg)
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b082      	sub	sp, #8
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]
 80139bc:	6039      	str	r1, [r7, #0]
	itm_debug1(DBG_CONFIG, msg, code);
 80139be:	687a      	ldr	r2, [r7, #4]
 80139c0:	6839      	ldr	r1, [r7, #0]
 80139c2:	2080      	movs	r0, #128	; 0x80
 80139c4:	f7ff ffdc 	bl	8013980 <itm_debug1>
	trainctl_error('G', code, msg);
 80139c8:	683a      	ldr	r2, [r7, #0]
 80139ca:	6879      	ldr	r1, [r7, #4]
 80139cc:	2047      	movs	r0, #71	; 0x47
 80139ce:	f7ff fe7d 	bl	80136cc <trainctl_error>
	return NULL;
 80139d2:	2300      	movs	r3, #0
}
 80139d4:	4618      	mov	r0, r3
 80139d6:	3708      	adds	r7, #8
 80139d8:	46bd      	mov	sp, r7
 80139da:	bd80      	pop	{r7, pc}

080139dc <get_canton_cnf>:
        //static turnout_vars_t TurnoutVars[NUM_TURNOUTS];

static int setup_done = 1;

const canton_config_t *get_canton_cnf(int idx)
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	b082      	sub	sp, #8
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
	if (!setup_done) return config_error(ERR_SETUP_KO, "railconfig_setup_default not called");
 80139e4:	4b0e      	ldr	r3, [pc, #56]	; (8013a20 <get_canton_cnf+0x44>)
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d106      	bne.n	80139fa <get_canton_cnf+0x1e>
 80139ec:	490d      	ldr	r1, [pc, #52]	; (8013a24 <get_canton_cnf+0x48>)
 80139ee:	f06f 0009 	mvn.w	r0, #9
 80139f2:	f7ff ffdf 	bl	80139b4 <config_error>
 80139f6:	4603      	mov	r3, r0
 80139f8:	e00e      	b.n	8013a18 <get_canton_cnf+0x3c>
	if ((idx<0) || (idx>= NUM_CANTONS)) return NULL;
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	db02      	blt.n	8013a06 <get_canton_cnf+0x2a>
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	2b07      	cmp	r3, #7
 8013a04:	dd01      	ble.n	8013a0a <get_canton_cnf+0x2e>
 8013a06:	2300      	movs	r3, #0
 8013a08:	e006      	b.n	8013a18 <get_canton_cnf+0x3c>
	return &Cantons[idx];
 8013a0a:	687a      	ldr	r2, [r7, #4]
 8013a0c:	4613      	mov	r3, r2
 8013a0e:	005b      	lsls	r3, r3, #1
 8013a10:	4413      	add	r3, r2
 8013a12:	011b      	lsls	r3, r3, #4
 8013a14:	4a04      	ldr	r2, [pc, #16]	; (8013a28 <get_canton_cnf+0x4c>)
 8013a16:	4413      	add	r3, r2
}
 8013a18:	4618      	mov	r0, r3
 8013a1a:	3708      	adds	r7, #8
 8013a1c:	46bd      	mov	sp, r7
 8013a1e:	bd80      	pop	{r7, pc}
 8013a20:	2000047c 	.word	0x2000047c
 8013a24:	08016fec 	.word	0x08016fec
 8013a28:	2000021c 	.word	0x2000021c

08013a2c <get_train_cnf>:
	if ((idx<0) || (idx>= NUM_CANTONS)) return NULL;
	return &BlockCantonsVars[idx];
}
*/
const train_config_t *get_train_cnf(int idx)
{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b082      	sub	sp, #8
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	6078      	str	r0, [r7, #4]
	if (!setup_done) return config_error(ERR_SETUP_KO, "railconfig_setup_default not called");
 8013a34:	4b0e      	ldr	r3, [pc, #56]	; (8013a70 <get_train_cnf+0x44>)
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d106      	bne.n	8013a4a <get_train_cnf+0x1e>
 8013a3c:	490d      	ldr	r1, [pc, #52]	; (8013a74 <get_train_cnf+0x48>)
 8013a3e:	f06f 0009 	mvn.w	r0, #9
 8013a42:	f7ff ffb7 	bl	80139b4 <config_error>
 8013a46:	4603      	mov	r3, r0
 8013a48:	e00e      	b.n	8013a68 <get_train_cnf+0x3c>
	if ((idx<0) || (idx>= NUM_TRAINS)) return NULL;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	db02      	blt.n	8013a56 <get_train_cnf+0x2a>
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	2b07      	cmp	r3, #7
 8013a54:	dd01      	ble.n	8013a5a <get_train_cnf+0x2e>
 8013a56:	2300      	movs	r3, #0
 8013a58:	e006      	b.n	8013a68 <get_train_cnf+0x3c>
	return &Trains[idx];
 8013a5a:	687a      	ldr	r2, [r7, #4]
 8013a5c:	4613      	mov	r3, r2
 8013a5e:	00db      	lsls	r3, r3, #3
 8013a60:	1a9b      	subs	r3, r3, r2
 8013a62:	009b      	lsls	r3, r3, #2
 8013a64:	4a04      	ldr	r2, [pc, #16]	; (8013a78 <get_train_cnf+0x4c>)
 8013a66:	4413      	add	r3, r2
}
 8013a68:	4618      	mov	r0, r3
 8013a6a:	3708      	adds	r7, #8
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	bd80      	pop	{r7, pc}
 8013a70:	2000047c 	.word	0x2000047c
 8013a74:	08016fec 	.word	0x08016fec
 8013a78:	2000039c 	.word	0x2000039c

08013a7c <get_turnout_cnf>:
	return &TrainsVars[idx];
}

*/
const turnout_config_t  *get_turnout_cnf(int idx)
{
 8013a7c:	b580      	push	{r7, lr}
 8013a7e:	b082      	sub	sp, #8
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	6078      	str	r0, [r7, #4]
	if (!setup_done) return config_error(ERR_SETUP_KO, "railconfig_setup_default not called");
 8013a84:	4b0d      	ldr	r3, [pc, #52]	; (8013abc <get_turnout_cnf+0x40>)
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d106      	bne.n	8013a9a <get_turnout_cnf+0x1e>
 8013a8c:	490c      	ldr	r1, [pc, #48]	; (8013ac0 <get_turnout_cnf+0x44>)
 8013a8e:	f06f 0009 	mvn.w	r0, #9
 8013a92:	f7ff ff8f 	bl	80139b4 <config_error>
 8013a96:	4603      	mov	r3, r0
 8013a98:	e00b      	b.n	8013ab2 <get_turnout_cnf+0x36>
	if ((idx<0) || (idx>= NUM_TURNOUTS)) return NULL;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	db02      	blt.n	8013aa6 <get_turnout_cnf+0x2a>
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	dd01      	ble.n	8013aaa <get_turnout_cnf+0x2e>
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	e003      	b.n	8013ab2 <get_turnout_cnf+0x36>
	return &Turnouts[idx];
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	00db      	lsls	r3, r3, #3
 8013aae:	4a05      	ldr	r2, [pc, #20]	; (8013ac4 <get_turnout_cnf+0x48>)
 8013ab0:	4413      	add	r3, r2
}
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	3708      	adds	r7, #8
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	bd80      	pop	{r7, pc}
 8013aba:	bf00      	nop
 8013abc:	2000047c 	.word	0x2000047c
 8013ac0:	08016fec 	.word	0x08016fec
 8013ac4:	0801885c 	.word	0x0801885c

08013ac8 <stat_val_get>:
static const int numvalcanton = sizeof(statvalcanton)/sizeof(statvalcanton[0]);



int32_t stat_val_get(int step, int *pdone)
{
 8013ac8:	b480      	push	{r7}
 8013aca:	b083      	sub	sp, #12
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
 8013ad0:	6039      	str	r1, [r7, #0]
	*pdone = 1;
 8013ad2:	683b      	ldr	r3, [r7, #0]
 8013ad4:	2201      	movs	r2, #1
 8013ad6:	601a      	str	r2, [r3, #0]
	return 0;
 8013ad8:	2300      	movs	r3, #0
		train_vars_t *vars = get_train_vars(nt);
		const stat_val_t *sv = &statvaltrain[idx];
		return _getval(vars, sv->off, sv->l);
	}
#endif
}
 8013ada:	4618      	mov	r0, r3
 8013adc:	370c      	adds	r7, #12
 8013ade:	46bd      	mov	sp, r7
 8013ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae4:	4770      	bx	lr

08013ae6 <txframe_send_notif>:
	txframe_send(m, 0);
}


static inline void txframe_send_notif(frame_msg_t *m, int len)
{
 8013ae6:	b580      	push	{r7, lr}
 8013ae8:	b082      	sub	sp, #8
 8013aea:	af00      	add	r7, sp, #0
 8013aec:	6078      	str	r0, [r7, #4]
 8013aee:	6039      	str	r1, [r7, #0]
	m->t = TXFRAME_TYPE_NOTIF;
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	2202      	movs	r2, #2
 8013af4:	701a      	strb	r2, [r3, #0]
	if (len) m->len = len;
 8013af6:	683b      	ldr	r3, [r7, #0]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d003      	beq.n	8013b04 <txframe_send_notif+0x1e>
 8013afc:	683b      	ldr	r3, [r7, #0]
 8013afe:	b2da      	uxtb	r2, r3
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	705a      	strb	r2, [r3, #1]
	txframe_send(m, 1);
 8013b04:	2101      	movs	r1, #1
 8013b06:	6878      	ldr	r0, [r7, #4]
 8013b08:	f002 fb94 	bl	8016234 <txframe_send>
}
 8013b0c:	bf00      	nop
 8013b0e:	3708      	adds	r7, #8
 8013b10:	46bd      	mov	sp, r7
 8013b12:	bd80      	pop	{r7, pc}

08013b14 <mqf_read_to_forward_usb>:
#define CMD_POSE_TRIGGERED			0x51

LFMQUEUE_DEF_H(to_forward, msg_64_t)
LFMQUEUE_DEF_H(from_forward, msg_64_t)

LFMQUEUE_DEF_H(to_forward_usb, msg_64_t)
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b082      	sub	sp, #8
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	6078      	str	r0, [r7, #4]
 8013b1c:	6879      	ldr	r1, [r7, #4]
 8013b1e:	4804      	ldr	r0, [pc, #16]	; (8013b30 <mqf_read_to_forward_usb+0x1c>)
 8013b20:	f002 fe8a 	bl	8016838 <mqf_read>
 8013b24:	4603      	mov	r3, r0
 8013b26:	4618      	mov	r0, r3
 8013b28:	3708      	adds	r7, #8
 8013b2a:	46bd      	mov	sp, r7
 8013b2c:	bd80      	pop	{r7, pc}
 8013b2e:	bf00      	nop
 8013b30:	200004e4 	.word	0x200004e4

08013b34 <mqf_write_from_forward_usb>:
LFMQUEUE_DEF_H(from_forward_usb, msg_64_t)
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b082      	sub	sp, #8
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	6078      	str	r0, [r7, #4]
 8013b3c:	6879      	ldr	r1, [r7, #4]
 8013b3e:	4804      	ldr	r0, [pc, #16]	; (8013b50 <mqf_write_from_forward_usb+0x1c>)
 8013b40:	f002 fe00 	bl	8016744 <mqf_write>
 8013b44:	4603      	mov	r3, r0
 8013b46:	4618      	mov	r0, r3
 8013b48:	3708      	adds	r7, #8
 8013b4a:	46bd      	mov	sp, r7
 8013b4c:	bd80      	pop	{r7, pc}
 8013b4e:	bf00      	nop
 8013b50:	200004f0 	.word	0x200004f0

08013b54 <_frm_escape>:

#define FRAME_DELIM '|'
#define FRAME_ESC   '\\'

static int _frm_escape(uint8_t *buf, int len, int maxlen)
{
 8013b54:	b480      	push	{r7}
 8013b56:	b089      	sub	sp, #36	; 0x24
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	60f8      	str	r0, [r7, #12]
 8013b5c:	60b9      	str	r1, [r7, #8]
 8013b5e:	607a      	str	r2, [r7, #4]
    int ne = 0;
 8013b60:	2300      	movs	r3, #0
 8013b62:	61fb      	str	r3, [r7, #28]
    for (int i=0; i<len; i++) {
 8013b64:	2300      	movs	r3, #0
 8013b66:	61bb      	str	r3, [r7, #24]
 8013b68:	e011      	b.n	8013b8e <_frm_escape+0x3a>
        if ((FRAME_ESC==buf[i]) || (FRAME_DELIM==buf[i])) {
 8013b6a:	69bb      	ldr	r3, [r7, #24]
 8013b6c:	68fa      	ldr	r2, [r7, #12]
 8013b6e:	4413      	add	r3, r2
 8013b70:	781b      	ldrb	r3, [r3, #0]
 8013b72:	2b5c      	cmp	r3, #92	; 0x5c
 8013b74:	d005      	beq.n	8013b82 <_frm_escape+0x2e>
 8013b76:	69bb      	ldr	r3, [r7, #24]
 8013b78:	68fa      	ldr	r2, [r7, #12]
 8013b7a:	4413      	add	r3, r2
 8013b7c:	781b      	ldrb	r3, [r3, #0]
 8013b7e:	2b7c      	cmp	r3, #124	; 0x7c
 8013b80:	d102      	bne.n	8013b88 <_frm_escape+0x34>
            ne++;
 8013b82:	69fb      	ldr	r3, [r7, #28]
 8013b84:	3301      	adds	r3, #1
 8013b86:	61fb      	str	r3, [r7, #28]
    for (int i=0; i<len; i++) {
 8013b88:	69bb      	ldr	r3, [r7, #24]
 8013b8a:	3301      	adds	r3, #1
 8013b8c:	61bb      	str	r3, [r7, #24]
 8013b8e:	69ba      	ldr	r2, [r7, #24]
 8013b90:	68bb      	ldr	r3, [r7, #8]
 8013b92:	429a      	cmp	r2, r3
 8013b94:	dbe9      	blt.n	8013b6a <_frm_escape+0x16>
        }
    }
    int nl = ne+len;
 8013b96:	69fa      	ldr	r2, [r7, #28]
 8013b98:	68bb      	ldr	r3, [r7, #8]
 8013b9a:	4413      	add	r3, r2
 8013b9c:	613b      	str	r3, [r7, #16]
    if (nl>maxlen) return -1;
 8013b9e:	693a      	ldr	r2, [r7, #16]
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	429a      	cmp	r2, r3
 8013ba4:	dd02      	ble.n	8013bac <_frm_escape+0x58>
 8013ba6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013baa:	e02f      	b.n	8013c0c <_frm_escape+0xb8>
    for (int i=len-1+ne; i>=0; i--) {
 8013bac:	68bb      	ldr	r3, [r7, #8]
 8013bae:	3b01      	subs	r3, #1
 8013bb0:	69fa      	ldr	r2, [r7, #28]
 8013bb2:	4413      	add	r3, r2
 8013bb4:	617b      	str	r3, [r7, #20]
 8013bb6:	e025      	b.n	8013c04 <_frm_escape+0xb0>
        buf[i] = buf[i-ne];
 8013bb8:	697a      	ldr	r2, [r7, #20]
 8013bba:	69fb      	ldr	r3, [r7, #28]
 8013bbc:	1ad3      	subs	r3, r2, r3
 8013bbe:	461a      	mov	r2, r3
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	441a      	add	r2, r3
 8013bc4:	697b      	ldr	r3, [r7, #20]
 8013bc6:	68f9      	ldr	r1, [r7, #12]
 8013bc8:	440b      	add	r3, r1
 8013bca:	7812      	ldrb	r2, [r2, #0]
 8013bcc:	701a      	strb	r2, [r3, #0]
        if ((FRAME_ESC==buf[i]) || (FRAME_DELIM==buf[i])) {
 8013bce:	697b      	ldr	r3, [r7, #20]
 8013bd0:	68fa      	ldr	r2, [r7, #12]
 8013bd2:	4413      	add	r3, r2
 8013bd4:	781b      	ldrb	r3, [r3, #0]
 8013bd6:	2b5c      	cmp	r3, #92	; 0x5c
 8013bd8:	d005      	beq.n	8013be6 <_frm_escape+0x92>
 8013bda:	697b      	ldr	r3, [r7, #20]
 8013bdc:	68fa      	ldr	r2, [r7, #12]
 8013bde:	4413      	add	r3, r2
 8013be0:	781b      	ldrb	r3, [r3, #0]
 8013be2:	2b7c      	cmp	r3, #124	; 0x7c
 8013be4:	d10b      	bne.n	8013bfe <_frm_escape+0xaa>
            buf[i-1]=FRAME_ESC;
 8013be6:	697b      	ldr	r3, [r7, #20]
 8013be8:	3b01      	subs	r3, #1
 8013bea:	68fa      	ldr	r2, [r7, #12]
 8013bec:	4413      	add	r3, r2
 8013bee:	225c      	movs	r2, #92	; 0x5c
 8013bf0:	701a      	strb	r2, [r3, #0]
            ne--;
 8013bf2:	69fb      	ldr	r3, [r7, #28]
 8013bf4:	3b01      	subs	r3, #1
 8013bf6:	61fb      	str	r3, [r7, #28]
            i--;
 8013bf8:	697b      	ldr	r3, [r7, #20]
 8013bfa:	3b01      	subs	r3, #1
 8013bfc:	617b      	str	r3, [r7, #20]
    for (int i=len-1+ne; i>=0; i--) {
 8013bfe:	697b      	ldr	r3, [r7, #20]
 8013c00:	3b01      	subs	r3, #1
 8013c02:	617b      	str	r3, [r7, #20]
 8013c04:	697b      	ldr	r3, [r7, #20]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	dad6      	bge.n	8013bb8 <_frm_escape+0x64>
        }
    }
    return nl;
 8013c0a:	693b      	ldr	r3, [r7, #16]
}
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	3724      	adds	r7, #36	; 0x24
 8013c10:	46bd      	mov	sp, r7
 8013c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c16:	4770      	bx	lr

08013c18 <_frm_escape2>:

static int _frm_escape2(uint8_t *buf,  uint8_t *org, int len, int maxlen)
{
 8013c18:	b480      	push	{r7}
 8013c1a:	b087      	sub	sp, #28
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	60f8      	str	r0, [r7, #12]
 8013c20:	60b9      	str	r1, [r7, #8]
 8013c22:	607a      	str	r2, [r7, #4]
 8013c24:	603b      	str	r3, [r7, #0]
    int ne = 0;
 8013c26:	2300      	movs	r3, #0
 8013c28:	617b      	str	r3, [r7, #20]
    for (int i=0; i<len; i++) {
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	613b      	str	r3, [r7, #16]
 8013c2e:	e02f      	b.n	8013c90 <_frm_escape2+0x78>
    	if (ne>=maxlen) return -1;
 8013c30:	697a      	ldr	r2, [r7, #20]
 8013c32:	683b      	ldr	r3, [r7, #0]
 8013c34:	429a      	cmp	r2, r3
 8013c36:	db02      	blt.n	8013c3e <_frm_escape2+0x26>
 8013c38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c3c:	e02d      	b.n	8013c9a <_frm_escape2+0x82>
        if ((FRAME_ESC==org[i]) || (FRAME_DELIM==org[i])) {
 8013c3e:	693b      	ldr	r3, [r7, #16]
 8013c40:	68ba      	ldr	r2, [r7, #8]
 8013c42:	4413      	add	r3, r2
 8013c44:	781b      	ldrb	r3, [r3, #0]
 8013c46:	2b5c      	cmp	r3, #92	; 0x5c
 8013c48:	d005      	beq.n	8013c56 <_frm_escape2+0x3e>
 8013c4a:	693b      	ldr	r3, [r7, #16]
 8013c4c:	68ba      	ldr	r2, [r7, #8]
 8013c4e:	4413      	add	r3, r2
 8013c50:	781b      	ldrb	r3, [r3, #0]
 8013c52:	2b7c      	cmp	r3, #124	; 0x7c
 8013c54:	d10e      	bne.n	8013c74 <_frm_escape2+0x5c>
        	buf[ne++] = FRAME_ESC;
 8013c56:	697b      	ldr	r3, [r7, #20]
 8013c58:	1c5a      	adds	r2, r3, #1
 8013c5a:	617a      	str	r2, [r7, #20]
 8013c5c:	461a      	mov	r2, r3
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	4413      	add	r3, r2
 8013c62:	225c      	movs	r2, #92	; 0x5c
 8013c64:	701a      	strb	r2, [r3, #0]
        	if (ne>=maxlen) return -1;
 8013c66:	697a      	ldr	r2, [r7, #20]
 8013c68:	683b      	ldr	r3, [r7, #0]
 8013c6a:	429a      	cmp	r2, r3
 8013c6c:	db02      	blt.n	8013c74 <_frm_escape2+0x5c>
 8013c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c72:	e012      	b.n	8013c9a <_frm_escape2+0x82>
        }
        buf[ne++] = org[i];
 8013c74:	693b      	ldr	r3, [r7, #16]
 8013c76:	68ba      	ldr	r2, [r7, #8]
 8013c78:	441a      	add	r2, r3
 8013c7a:	697b      	ldr	r3, [r7, #20]
 8013c7c:	1c59      	adds	r1, r3, #1
 8013c7e:	6179      	str	r1, [r7, #20]
 8013c80:	4619      	mov	r1, r3
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	440b      	add	r3, r1
 8013c86:	7812      	ldrb	r2, [r2, #0]
 8013c88:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<len; i++) {
 8013c8a:	693b      	ldr	r3, [r7, #16]
 8013c8c:	3301      	adds	r3, #1
 8013c8e:	613b      	str	r3, [r7, #16]
 8013c90:	693a      	ldr	r2, [r7, #16]
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	429a      	cmp	r2, r3
 8013c96:	dbcb      	blt.n	8013c30 <_frm_escape2+0x18>
    }
    return ne;
 8013c98:	697b      	ldr	r3, [r7, #20]
}
 8013c9a:	4618      	mov	r0, r3
 8013c9c:	371c      	adds	r7, #28
 8013c9e:	46bd      	mov	sp, r7
 8013ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca4:	4770      	bx	lr

08013ca6 <frm_escape>:
static int frm_escape(uint8_t *buf, int len, int maxlen)
{
 8013ca6:	b580      	push	{r7, lr}
 8013ca8:	b086      	sub	sp, #24
 8013caa:	af00      	add	r7, sp, #0
 8013cac:	60f8      	str	r0, [r7, #12]
 8013cae:	60b9      	str	r1, [r7, #8]
 8013cb0:	607a      	str	r2, [r7, #4]
	//configASSERT(buf[0]==FRAME_DELIM);
	//configASSERT(buf[len-1]==FRAME_DELIM);
    int l = _frm_escape(buf+1, len-2, maxlen-2);
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	1c58      	adds	r0, r3, #1
 8013cb6:	68bb      	ldr	r3, [r7, #8]
 8013cb8:	1e99      	subs	r1, r3, #2
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	3b02      	subs	r3, #2
 8013cbe:	461a      	mov	r2, r3
 8013cc0:	f7ff ff48 	bl	8013b54 <_frm_escape>
 8013cc4:	6178      	str	r0, [r7, #20]
    if (l<0) return l;
 8013cc6:	697b      	ldr	r3, [r7, #20]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	da01      	bge.n	8013cd0 <frm_escape+0x2a>
 8013ccc:	697b      	ldr	r3, [r7, #20]
 8013cce:	e007      	b.n	8013ce0 <frm_escape+0x3a>
    buf[l+1]=FRAME_DELIM;
 8013cd0:	697b      	ldr	r3, [r7, #20]
 8013cd2:	3301      	adds	r3, #1
 8013cd4:	68fa      	ldr	r2, [r7, #12]
 8013cd6:	4413      	add	r3, r2
 8013cd8:	227c      	movs	r2, #124	; 0x7c
 8013cda:	701a      	strb	r2, [r3, #0]
    return l+2;
 8013cdc:	697b      	ldr	r3, [r7, #20]
 8013cde:	3302      	adds	r3, #2
}
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	3718      	adds	r7, #24
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}

08013ce8 <usbPollQueues>:
		uint8_t *param, int plen, uint8_t *rbuf, int rbuflen, int *prlen);

static void txframe_send_msg64(msg_64_t *msg);

void usbPollQueues(void)
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b084      	sub	sp, #16
 8013cec:	af00      	add	r7, sp, #0
    for (;;) {
        msg_64_t m;
        int rc = mqf_read_to_forward_usb(&m);
 8013cee:	463b      	mov	r3, r7
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	f7ff ff0f 	bl	8013b14 <mqf_read_to_forward_usb>
 8013cf6:	60f8      	str	r0, [r7, #12]
        if (rc) break;
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d104      	bne.n	8013d08 <usbPollQueues+0x20>
        txframe_send_msg64(&m);
 8013cfe:	463b      	mov	r3, r7
 8013d00:	4618      	mov	r0, r3
 8013d02:	f000 fc8d 	bl	8014620 <txframe_send_msg64>
    for (;;) {
 8013d06:	e7f2      	b.n	8013cee <usbPollQueues+0x6>
    }
}
 8013d08:	bf00      	nop
 8013d0a:	3710      	adds	r7, #16
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	bd80      	pop	{r7, pc}

08013d10 <txrx_process_char>:

void txrx_process_char(uint8_t c, uint8_t *respbuf, int *replen)
{
 8013d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d12:	b08f      	sub	sp, #60	; 0x3c
 8013d14:	af04      	add	r7, sp, #16
 8013d16:	4603      	mov	r3, r0
 8013d18:	60b9      	str	r1, [r7, #8]
 8013d1a:	607a      	str	r2, [r7, #4]
 8013d1c:	73fb      	strb	r3, [r7, #15]
	int buflen = *replen;
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	623b      	str	r3, [r7, #32]
	*replen = 0;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	2200      	movs	r2, #0
 8013d28:	601a      	str	r2, [r3, #0]
	if ((c == FRAME_DELIM) && !frm.escape) {
 8013d2a:	7bfb      	ldrb	r3, [r7, #15]
 8013d2c:	2b7c      	cmp	r3, #124	; 0x7c
 8013d2e:	f040 8097 	bne.w	8013e60 <txrx_process_char+0x150>
 8013d32:	4b88      	ldr	r3, [pc, #544]	; (8013f54 <txrx_process_char+0x244>)
 8013d34:	781b      	ldrb	r3, [r3, #0]
 8013d36:	f003 0301 	and.w	r3, r3, #1
 8013d3a:	b2db      	uxtb	r3, r3
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	f040 808f 	bne.w	8013e60 <txrx_process_char+0x150>
		if (0 == frm.state) {
 8013d42:	4b84      	ldr	r3, [pc, #528]	; (8013f54 <txrx_process_char+0x244>)
 8013d44:	781b      	ldrb	r3, [r3, #0]
 8013d46:	f023 0301 	bic.w	r3, r3, #1
 8013d4a:	b2db      	uxtb	r3, r3
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d10b      	bne.n	8013d68 <txrx_process_char+0x58>
			memset(&frm, 0, sizeof(frm));
 8013d50:	2226      	movs	r2, #38	; 0x26
 8013d52:	2100      	movs	r1, #0
 8013d54:	487f      	ldr	r0, [pc, #508]	; (8013f54 <txrx_process_char+0x244>)
 8013d56:	f002 fe10 	bl	801697a <memset>
			frm.state = 1;
 8013d5a:	4a7e      	ldr	r2, [pc, #504]	; (8013f54 <txrx_process_char+0x244>)
 8013d5c:	7813      	ldrb	r3, [r2, #0]
 8013d5e:	2101      	movs	r1, #1
 8013d60:	f361 0347 	bfi	r3, r1, #1, #7
 8013d64:	7013      	strb	r3, [r2, #0]
			return;
 8013d66:	e0f1      	b.n	8013f4c <txrx_process_char+0x23c>
		} else if (5 == frm.state) {
 8013d68:	4b7a      	ldr	r3, [pc, #488]	; (8013f54 <txrx_process_char+0x244>)
 8013d6a:	781b      	ldrb	r3, [r3, #0]
 8013d6c:	f023 0301 	bic.w	r3, r3, #1
 8013d70:	b2db      	uxtb	r3, r3
 8013d72:	2b0a      	cmp	r3, #10
 8013d74:	d168      	bne.n	8013e48 <txrx_process_char+0x138>
			frm.state = 0;
 8013d76:	4a77      	ldr	r2, [pc, #476]	; (8013f54 <txrx_process_char+0x244>)
 8013d78:	7813      	ldrb	r3, [r2, #0]
 8013d7a:	f36f 0347 	bfc	r3, #1, #7
 8013d7e:	7013      	strb	r3, [r2, #0]
			frm.escape = 0;
 8013d80:	4a74      	ldr	r2, [pc, #464]	; (8013f54 <txrx_process_char+0x244>)
 8013d82:	7813      	ldrb	r3, [r2, #0]
 8013d84:	f36f 0300 	bfc	r3, #0, #1
 8013d88:	7013      	strb	r3, [r2, #0]
			// process frame
			int i = 0;
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	61fb      	str	r3, [r7, #28]
			respbuf[i++] = FRAME_DELIM;
 8013d8e:	69fb      	ldr	r3, [r7, #28]
 8013d90:	1c5a      	adds	r2, r3, #1
 8013d92:	61fa      	str	r2, [r7, #28]
 8013d94:	461a      	mov	r2, r3
 8013d96:	68bb      	ldr	r3, [r7, #8]
 8013d98:	4413      	add	r3, r2
 8013d9a:	227c      	movs	r2, #124	; 0x7c
 8013d9c:	701a      	strb	r2, [r3, #0]
			respbuf[i++] = frm.seqnum;
 8013d9e:	69fb      	ldr	r3, [r7, #28]
 8013da0:	1c5a      	adds	r2, r3, #1
 8013da2:	61fa      	str	r2, [r7, #28]
 8013da4:	461a      	mov	r2, r3
 8013da6:	68bb      	ldr	r3, [r7, #8]
 8013da8:	4413      	add	r3, r2
 8013daa:	4a6a      	ldr	r2, [pc, #424]	; (8013f54 <txrx_process_char+0x244>)
 8013dac:	7852      	ldrb	r2, [r2, #1]
 8013dae:	701a      	strb	r2, [r3, #0]
			respbuf[i++] = 'R';
 8013db0:	69fb      	ldr	r3, [r7, #28]
 8013db2:	1c5a      	adds	r2, r3, #1
 8013db4:	61fa      	str	r2, [r7, #28]
 8013db6:	461a      	mov	r2, r3
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	4413      	add	r3, r2
 8013dbc:	2252      	movs	r2, #82	; 0x52
 8013dbe:	701a      	strb	r2, [r3, #0]
			int plen = 0;
 8013dc0:	2300      	movs	r3, #0
 8013dc2:	617b      	str	r3, [r7, #20]
			uint8_t rc = process_frame_cmd(frm.sel, frm.num, frm.cmd, frm.param, frm.pidx, respbuf+i+1, buflen-i-1, &plen);
 8013dc4:	4b63      	ldr	r3, [pc, #396]	; (8013f54 <txrx_process_char+0x244>)
 8013dc6:	7898      	ldrb	r0, [r3, #2]
 8013dc8:	4b62      	ldr	r3, [pc, #392]	; (8013f54 <txrx_process_char+0x244>)
 8013dca:	78dc      	ldrb	r4, [r3, #3]
 8013dcc:	4b61      	ldr	r3, [pc, #388]	; (8013f54 <txrx_process_char+0x244>)
 8013dce:	791d      	ldrb	r5, [r3, #4]
 8013dd0:	4b60      	ldr	r3, [pc, #384]	; (8013f54 <txrx_process_char+0x244>)
 8013dd2:	795b      	ldrb	r3, [r3, #5]
 8013dd4:	461e      	mov	r6, r3
 8013dd6:	69fb      	ldr	r3, [r7, #28]
 8013dd8:	3301      	adds	r3, #1
 8013dda:	68ba      	ldr	r2, [r7, #8]
 8013ddc:	4413      	add	r3, r2
 8013dde:	6a39      	ldr	r1, [r7, #32]
 8013de0:	69fa      	ldr	r2, [r7, #28]
 8013de2:	1a8a      	subs	r2, r1, r2
 8013de4:	3a01      	subs	r2, #1
 8013de6:	f107 0114 	add.w	r1, r7, #20
 8013dea:	9103      	str	r1, [sp, #12]
 8013dec:	9202      	str	r2, [sp, #8]
 8013dee:	9301      	str	r3, [sp, #4]
 8013df0:	9600      	str	r6, [sp, #0]
 8013df2:	4b59      	ldr	r3, [pc, #356]	; (8013f58 <txrx_process_char+0x248>)
 8013df4:	462a      	mov	r2, r5
 8013df6:	4621      	mov	r1, r4
 8013df8:	f000 f8d2 	bl	8013fa0 <process_frame_cmd>
 8013dfc:	4603      	mov	r3, r0
 8013dfe:	76fb      	strb	r3, [r7, #27]
			respbuf[i++] = rc;
 8013e00:	69fb      	ldr	r3, [r7, #28]
 8013e02:	1c5a      	adds	r2, r3, #1
 8013e04:	61fa      	str	r2, [r7, #28]
 8013e06:	461a      	mov	r2, r3
 8013e08:	68bb      	ldr	r3, [r7, #8]
 8013e0a:	4413      	add	r3, r2
 8013e0c:	7efa      	ldrb	r2, [r7, #27]
 8013e0e:	701a      	strb	r2, [r3, #0]
			respbuf[i+plen] = FRAME_DELIM;
 8013e10:	697a      	ldr	r2, [r7, #20]
 8013e12:	69fb      	ldr	r3, [r7, #28]
 8013e14:	4413      	add	r3, r2
 8013e16:	461a      	mov	r2, r3
 8013e18:	68bb      	ldr	r3, [r7, #8]
 8013e1a:	4413      	add	r3, r2
 8013e1c:	227c      	movs	r2, #124	; 0x7c
 8013e1e:	701a      	strb	r2, [r3, #0]
			int l = frm_escape(respbuf, i+plen+1, buflen);
 8013e20:	697a      	ldr	r2, [r7, #20]
 8013e22:	69fb      	ldr	r3, [r7, #28]
 8013e24:	4413      	add	r3, r2
 8013e26:	3301      	adds	r3, #1
 8013e28:	6a3a      	ldr	r2, [r7, #32]
 8013e2a:	4619      	mov	r1, r3
 8013e2c:	68b8      	ldr	r0, [r7, #8]
 8013e2e:	f7ff ff3a 	bl	8013ca6 <frm_escape>
 8013e32:	6278      	str	r0, [r7, #36]	; 0x24
			if (l<0) {
 8013e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	da01      	bge.n	8013e3e <txrx_process_char+0x12e>
				l = 0;
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	627b      	str	r3, [r7, #36]	; 0x24
			}
			*replen = l;
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e42:	601a      	str	r2, [r3, #0]
			/*if ((0)) {
				static frame_msg_t m;
				m.len = 1+ sprintf(m.frm, "frm resp %d\r\n", *replen);
				txframe_send_debug(&m, 0);
			}*/
			return;
 8013e44:	bf00      	nop
 8013e46:	e081      	b.n	8013f4c <txrx_process_char+0x23c>
		} else {
			// short frame, ignore
			frm.state = 1;
 8013e48:	4a42      	ldr	r2, [pc, #264]	; (8013f54 <txrx_process_char+0x244>)
 8013e4a:	7813      	ldrb	r3, [r2, #0]
 8013e4c:	2101      	movs	r1, #1
 8013e4e:	f361 0347 	bfi	r3, r1, #1, #7
 8013e52:	7013      	strb	r3, [r2, #0]
			frm.escape = 0;
 8013e54:	4a3f      	ldr	r2, [pc, #252]	; (8013f54 <txrx_process_char+0x244>)
 8013e56:	7813      	ldrb	r3, [r2, #0]
 8013e58:	f36f 0300 	bfc	r3, #0, #1
 8013e5c:	7013      	strb	r3, [r2, #0]
			return;
 8013e5e:	e075      	b.n	8013f4c <txrx_process_char+0x23c>
		}
	}
	if (c==FRAME_ESC && !frm.escape) {
 8013e60:	7bfb      	ldrb	r3, [r7, #15]
 8013e62:	2b5c      	cmp	r3, #92	; 0x5c
 8013e64:	d10c      	bne.n	8013e80 <txrx_process_char+0x170>
 8013e66:	4b3b      	ldr	r3, [pc, #236]	; (8013f54 <txrx_process_char+0x244>)
 8013e68:	781b      	ldrb	r3, [r3, #0]
 8013e6a:	f003 0301 	and.w	r3, r3, #1
 8013e6e:	b2db      	uxtb	r3, r3
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d105      	bne.n	8013e80 <txrx_process_char+0x170>
		// state is >0 here
		frm.escape = 1;
 8013e74:	4a37      	ldr	r2, [pc, #220]	; (8013f54 <txrx_process_char+0x244>)
 8013e76:	7813      	ldrb	r3, [r2, #0]
 8013e78:	f043 0301 	orr.w	r3, r3, #1
 8013e7c:	7013      	strb	r3, [r2, #0]
		return;
 8013e7e:	e065      	b.n	8013f4c <txrx_process_char+0x23c>
	}

	//  |sSNCvv...|
	switch (frm.state) {
 8013e80:	4b34      	ldr	r3, [pc, #208]	; (8013f54 <txrx_process_char+0x244>)
 8013e82:	781b      	ldrb	r3, [r3, #0]
 8013e84:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8013e88:	b2db      	uxtb	r3, r3
 8013e8a:	3b01      	subs	r3, #1
 8013e8c:	2b04      	cmp	r3, #4
 8013e8e:	d80d      	bhi.n	8013eac <txrx_process_char+0x19c>
 8013e90:	a201      	add	r2, pc, #4	; (adr r2, 8013e98 <txrx_process_char+0x188>)
 8013e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e96:	bf00      	nop
 8013e98:	08013eb9 	.word	0x08013eb9
 8013e9c:	08013ecd 	.word	0x08013ecd
 8013ea0:	08013ee1 	.word	0x08013ee1
 8013ea4:	08013ef5 	.word	0x08013ef5
 8013ea8:	08013f09 	.word	0x08013f09
	default:
		frm.escape = 0;
 8013eac:	4a29      	ldr	r2, [pc, #164]	; (8013f54 <txrx_process_char+0x244>)
 8013eae:	7813      	ldrb	r3, [r2, #0]
 8013eb0:	f36f 0300 	bfc	r3, #0, #1
 8013eb4:	7013      	strb	r3, [r2, #0]
		//configAssert(0);
		break;
 8013eb6:	e044      	b.n	8013f42 <txrx_process_char+0x232>
	case 1:
		frm.seqnum = c;
 8013eb8:	4a26      	ldr	r2, [pc, #152]	; (8013f54 <txrx_process_char+0x244>)
 8013eba:	7bfb      	ldrb	r3, [r7, #15]
 8013ebc:	7053      	strb	r3, [r2, #1]
		frm.state = 2;
 8013ebe:	4a25      	ldr	r2, [pc, #148]	; (8013f54 <txrx_process_char+0x244>)
 8013ec0:	7813      	ldrb	r3, [r2, #0]
 8013ec2:	2102      	movs	r1, #2
 8013ec4:	f361 0347 	bfi	r3, r1, #1, #7
 8013ec8:	7013      	strb	r3, [r2, #0]
		break;
 8013eca:	e03a      	b.n	8013f42 <txrx_process_char+0x232>
	case 2:
		frm.sel = c;
 8013ecc:	4a21      	ldr	r2, [pc, #132]	; (8013f54 <txrx_process_char+0x244>)
 8013ece:	7bfb      	ldrb	r3, [r7, #15]
 8013ed0:	7093      	strb	r3, [r2, #2]
		frm.state = 3;
 8013ed2:	4a20      	ldr	r2, [pc, #128]	; (8013f54 <txrx_process_char+0x244>)
 8013ed4:	7813      	ldrb	r3, [r2, #0]
 8013ed6:	2103      	movs	r1, #3
 8013ed8:	f361 0347 	bfi	r3, r1, #1, #7
 8013edc:	7013      	strb	r3, [r2, #0]
		break;
 8013ede:	e030      	b.n	8013f42 <txrx_process_char+0x232>
	case 3:
		frm.num = c;
 8013ee0:	4a1c      	ldr	r2, [pc, #112]	; (8013f54 <txrx_process_char+0x244>)
 8013ee2:	7bfb      	ldrb	r3, [r7, #15]
 8013ee4:	70d3      	strb	r3, [r2, #3]
		frm.state = 4;
 8013ee6:	4a1b      	ldr	r2, [pc, #108]	; (8013f54 <txrx_process_char+0x244>)
 8013ee8:	7813      	ldrb	r3, [r2, #0]
 8013eea:	2104      	movs	r1, #4
 8013eec:	f361 0347 	bfi	r3, r1, #1, #7
 8013ef0:	7013      	strb	r3, [r2, #0]
		break;
 8013ef2:	e026      	b.n	8013f42 <txrx_process_char+0x232>
	case 4:
		frm.cmd = c;
 8013ef4:	4a17      	ldr	r2, [pc, #92]	; (8013f54 <txrx_process_char+0x244>)
 8013ef6:	7bfb      	ldrb	r3, [r7, #15]
 8013ef8:	7113      	strb	r3, [r2, #4]
		frm.state = 5;
 8013efa:	4a16      	ldr	r2, [pc, #88]	; (8013f54 <txrx_process_char+0x244>)
 8013efc:	7813      	ldrb	r3, [r2, #0]
 8013efe:	2105      	movs	r1, #5
 8013f00:	f361 0347 	bfi	r3, r1, #1, #7
 8013f04:	7013      	strb	r3, [r2, #0]
		break;
 8013f06:	e01c      	b.n	8013f42 <txrx_process_char+0x232>
	case 5:
		if (frm.pidx >= MAX_DATA_LEN) {
 8013f08:	4b12      	ldr	r3, [pc, #72]	; (8013f54 <txrx_process_char+0x244>)
 8013f0a:	795b      	ldrb	r3, [r3, #5]
 8013f0c:	2b1f      	cmp	r3, #31
 8013f0e:	d90a      	bls.n	8013f26 <txrx_process_char+0x216>
			frm.state = 0;
 8013f10:	4a10      	ldr	r2, [pc, #64]	; (8013f54 <txrx_process_char+0x244>)
 8013f12:	7813      	ldrb	r3, [r2, #0]
 8013f14:	f36f 0347 	bfc	r3, #1, #7
 8013f18:	7013      	strb	r3, [r2, #0]
			frm.escape = 0;
 8013f1a:	4a0e      	ldr	r2, [pc, #56]	; (8013f54 <txrx_process_char+0x244>)
 8013f1c:	7813      	ldrb	r3, [r2, #0]
 8013f1e:	f36f 0300 	bfc	r3, #0, #1
 8013f22:	7013      	strb	r3, [r2, #0]
			break;
 8013f24:	e00d      	b.n	8013f42 <txrx_process_char+0x232>
		}
		frm.param[frm.pidx] = c;
 8013f26:	4b0b      	ldr	r3, [pc, #44]	; (8013f54 <txrx_process_char+0x244>)
 8013f28:	795b      	ldrb	r3, [r3, #5]
 8013f2a:	461a      	mov	r2, r3
 8013f2c:	4b09      	ldr	r3, [pc, #36]	; (8013f54 <txrx_process_char+0x244>)
 8013f2e:	4413      	add	r3, r2
 8013f30:	7bfa      	ldrb	r2, [r7, #15]
 8013f32:	719a      	strb	r2, [r3, #6]
		frm.pidx ++;
 8013f34:	4b07      	ldr	r3, [pc, #28]	; (8013f54 <txrx_process_char+0x244>)
 8013f36:	795b      	ldrb	r3, [r3, #5]
 8013f38:	3301      	adds	r3, #1
 8013f3a:	b2da      	uxtb	r2, r3
 8013f3c:	4b05      	ldr	r3, [pc, #20]	; (8013f54 <txrx_process_char+0x244>)
 8013f3e:	715a      	strb	r2, [r3, #5]
		break;
 8013f40:	bf00      	nop
	}
        frm.escape = 0;
 8013f42:	4a04      	ldr	r2, [pc, #16]	; (8013f54 <txrx_process_char+0x244>)
 8013f44:	7813      	ldrb	r3, [r2, #0]
 8013f46:	f36f 0300 	bfc	r3, #0, #1
 8013f4a:	7013      	strb	r3, [r2, #0]
}
 8013f4c:	372c      	adds	r7, #44	; 0x2c
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f52:	bf00      	nop
 8013f54:	20005280 	.word	0x20005280
 8013f58:	20005286 	.word	0x20005286

08013f5c <param_set_pwm>:



// ---------------------------------------------------------------------------------
static void param_set_pwm(struct param *p, int32_t v) // XXX to be moved away
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b082      	sub	sp, #8
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
 8013f64:	6039      	str	r1, [r7, #0]
        set_pwm_freq(v);
 8013f66:	6838      	ldr	r0, [r7, #0]
 8013f68:	f001 ff1c 	bl	8015da4 <set_pwm_freq>
}
 8013f6c:	bf00      	nop
 8013f6e:	3708      	adds	r7, #8
 8013f70:	46bd      	mov	sp, r7
 8013f72:	bd80      	pop	{r7, pc}

08013f74 <param_get_numtrains>:
int32_t (*getter)(struct param *);
	void (*setter)(struct param *, int32_t);
*/

static int32_t param_get_numtrains(param_t *p)
{
 8013f74:	b480      	push	{r7}
 8013f76:	b083      	sub	sp, #12
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	6078      	str	r0, [r7, #4]
	return NUM_TRAINS;
 8013f7c:	2308      	movs	r3, #8
}
 8013f7e:	4618      	mov	r0, r3
 8013f80:	370c      	adds	r7, #12
 8013f82:	46bd      	mov	sp, r7
 8013f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f88:	4770      	bx	lr

08013f8a <param_get_numcantons>:

static int32_t param_get_numcantons(param_t *p)
{
 8013f8a:	b480      	push	{r7}
 8013f8c:	b083      	sub	sp, #12
 8013f8e:	af00      	add	r7, sp, #0
 8013f90:	6078      	str	r0, [r7, #4]
	return NUM_CANTONS;
 8013f92:	2308      	movs	r3, #8
}
 8013f94:	4618      	mov	r0, r3
 8013f96:	370c      	adds	r7, #12
 8013f98:	46bd      	mov	sp, r7
 8013f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f9e:	4770      	bx	lr

08013fa0 <process_frame_cmd>:




static uint8_t process_frame_cmd(uint8_t sel, uint8_t num,  uint8_t cmd, uint8_t *param, int plen, uint8_t *rbuf, int rbuflen, int *prlen)
{
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b094      	sub	sp, #80	; 0x50
 8013fa4:	af04      	add	r7, sp, #16
 8013fa6:	603b      	str	r3, [r7, #0]
 8013fa8:	4603      	mov	r3, r0
 8013faa:	71fb      	strb	r3, [r7, #7]
 8013fac:	460b      	mov	r3, r1
 8013fae:	71bb      	strb	r3, [r7, #6]
 8013fb0:	4613      	mov	r3, r2
 8013fb2:	717b      	strb	r3, [r7, #5]
    //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
	int16_t s;
	*prlen = 0;
 8013fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013fb6:	2200      	movs	r2, #0
 8013fb8:	601a      	str	r2, [r3, #0]
	int32_t v,d,min,max;
	int rc=-1;
 8013fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013fbe:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch(sel) {
 8013fc0:	79fb      	ldrb	r3, [r7, #7]
 8013fc2:	3b36      	subs	r3, #54	; 0x36
 8013fc4:	2b1e      	cmp	r3, #30
 8013fc6:	f200 81ff 	bhi.w	80143c8 <process_frame_cmd+0x428>
 8013fca:	a201      	add	r2, pc, #4	; (adr r2, 8013fd0 <process_frame_cmd+0x30>)
 8013fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fd0:	0801404d 	.word	0x0801404d
 8013fd4:	080143c9 	.word	0x080143c9
 8013fd8:	080143c9 	.word	0x080143c9
 8013fdc:	080143c9 	.word	0x080143c9
 8013fe0:	080143c9 	.word	0x080143c9
 8013fe4:	080143c9 	.word	0x080143c9
 8013fe8:	080143c9 	.word	0x080143c9
 8013fec:	080143c9 	.word	0x080143c9
 8013ff0:	080143c9 	.word	0x080143c9
 8013ff4:	080143c9 	.word	0x080143c9
 8013ff8:	080143c9 	.word	0x080143c9
 8013ffc:	0801406f 	.word	0x0801406f
 8014000:	080143c9 	.word	0x080143c9
 8014004:	080143c9 	.word	0x080143c9
 8014008:	080143c9 	.word	0x080143c9
 801400c:	080143c9 	.word	0x080143c9
 8014010:	080143c9 	.word	0x080143c9
 8014014:	08014085 	.word	0x08014085
 8014018:	080143c9 	.word	0x080143c9
 801401c:	080143c9 	.word	0x080143c9
 8014020:	080143c9 	.word	0x080143c9
 8014024:	080143c9 	.word	0x080143c9
 8014028:	080143c9 	.word	0x080143c9
 801402c:	080143c9 	.word	0x080143c9
 8014030:	080143c9 	.word	0x080143c9
 8014034:	080143c9 	.word	0x080143c9
 8014038:	080143c9 	.word	0x080143c9
 801403c:	080143c9 	.word	0x080143c9
 8014040:	080143c9 	.word	0x080143c9
 8014044:	080143c9 	.word	0x080143c9
 8014048:	080141e9 	.word	0x080141e9
    case '6': {
        msg_64_t m;
        m.to = num;
 801404c:	79bb      	ldrb	r3, [r7, #6]
 801404e:	743b      	strb	r3, [r7, #16]
        m.from = cmd;
 8014050:	797b      	ldrb	r3, [r7, #5]
 8014052:	747b      	strb	r3, [r7, #17]
        memcpy(m.rbytes, param, 6);
 8014054:	683a      	ldr	r2, [r7, #0]
 8014056:	f107 0312 	add.w	r3, r7, #18
 801405a:	6811      	ldr	r1, [r2, #0]
 801405c:	6019      	str	r1, [r3, #0]
 801405e:	8892      	ldrh	r2, [r2, #4]
 8014060:	809a      	strh	r2, [r3, #4]
        mqf_write_from_forward_usb(&m);
 8014062:	f107 0310 	add.w	r3, r7, #16
 8014066:	4618      	mov	r0, r3
 8014068:	f7ff fd64 	bl	8013b34 <mqf_write_from_forward_usb>
        }
        break;
 801406c:	e1bc      	b.n	80143e8 <process_frame_cmd+0x448>
	case 'A':
		switch (cmd) {
 801406e:	797b      	ldrb	r3, [r7, #5]
 8014070:	2b57      	cmp	r3, #87	; 0x57
 8014072:	d003      	beq.n	801407c <process_frame_cmd+0xdc>
 8014074:	2b73      	cmp	r3, #115	; 0x73
 8014076:	d003      	beq.n	8014080 <process_frame_cmd+0xe0>
 8014078:	2b53      	cmp	r3, #83	; 0x53
		case 'S':
			//rc = turnout_cmd(num, 1);
			break;
 801407a:	e002      	b.n	8014082 <process_frame_cmd+0xe2>
		case 's':
			//rc = turnout_cmd(num, -1);
			break;
		case 'W':
			//rc = turnout_test(num);
			break;
 801407c:	bf00      	nop
 801407e:	e1b3      	b.n	80143e8 <process_frame_cmd+0x448>
			break;
 8014080:	bf00      	nop
		}
		break;
 8014082:	e1b1      	b.n	80143e8 <process_frame_cmd+0x448>
	case 'G':
		switch (cmd) {
 8014084:	797b      	ldrb	r3, [r7, #5]
 8014086:	3b43      	subs	r3, #67	; 0x43
 8014088:	2b2d      	cmp	r3, #45	; 0x2d
 801408a:	f200 80ab 	bhi.w	80141e4 <process_frame_cmd+0x244>
 801408e:	a201      	add	r2, pc, #4	; (adr r2, 8014094 <process_frame_cmd+0xf4>)
 8014090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014094:	0801414d 	.word	0x0801414d
 8014098:	080141e5 	.word	0x080141e5
 801409c:	080141e5 	.word	0x080141e5
 80140a0:	080141e5 	.word	0x080141e5
 80140a4:	080141e5 	.word	0x080141e5
 80140a8:	080141e5 	.word	0x080141e5
 80140ac:	080141e5 	.word	0x080141e5
 80140b0:	080141e5 	.word	0x080141e5
 80140b4:	0801415b 	.word	0x0801415b
 80140b8:	080141e5 	.word	0x080141e5
 80140bc:	080141e5 	.word	0x080141e5
 80140c0:	080141e5 	.word	0x080141e5
 80140c4:	080141e5 	.word	0x080141e5
 80140c8:	080141bf 	.word	0x080141bf
 80140cc:	080141e5 	.word	0x080141e5
 80140d0:	080141e5 	.word	0x080141e5
 80140d4:	08014157 	.word	0x08014157
 80140d8:	080141e5 	.word	0x080141e5
 80140dc:	080141e5 	.word	0x080141e5
 80140e0:	080141e5 	.word	0x080141e5
 80140e4:	080141e5 	.word	0x080141e5
 80140e8:	080141e5 	.word	0x080141e5
 80140ec:	080141e5 	.word	0x080141e5
 80140f0:	080141e5 	.word	0x080141e5
 80140f4:	080141e5 	.word	0x080141e5
 80140f8:	080141e5 	.word	0x080141e5
 80140fc:	080141e5 	.word	0x080141e5
 8014100:	080141e5 	.word	0x080141e5
 8014104:	080141e5 	.word	0x080141e5
 8014108:	080141e5 	.word	0x080141e5
 801410c:	080141e5 	.word	0x080141e5
 8014110:	080141e5 	.word	0x080141e5
 8014114:	080141e5 	.word	0x080141e5
 8014118:	080141e5 	.word	0x080141e5
 801411c:	080141e5 	.word	0x080141e5
 8014120:	080141e5 	.word	0x080141e5
 8014124:	080141e5 	.word	0x080141e5
 8014128:	080141e5 	.word	0x080141e5
 801412c:	080141e5 	.word	0x080141e5
 8014130:	080141e5 	.word	0x080141e5
 8014134:	080141e5 	.word	0x080141e5
 8014138:	080141e5 	.word	0x080141e5
 801413c:	080141e5 	.word	0x080141e5
 8014140:	080141e5 	.word	0x080141e5
 8014144:	080141e5 	.word	0x080141e5
 8014148:	0801415f 	.word	0x0801415f
		case 'C':
			cli_frame_mode = 0;
 801414c:	4ba9      	ldr	r3, [pc, #676]	; (80143f4 <process_frame_cmd+0x454>)
 801414e:	2200      	movs	r2, #0
 8014150:	701a      	strb	r2, [r3, #0]
			return 0;
 8014152:	2300      	movs	r3, #0
 8014154:	e149      	b.n	80143ea <process_frame_cmd+0x44a>
			break;
		case 'S':
			// TODO train_stop_all();
			return 0;
 8014156:	2300      	movs	r3, #0
 8014158:	e147      	b.n	80143ea <process_frame_cmd+0x44a>
			break;
		case 'K':
			// TODO calibrate_bemf();
			return 0;
 801415a:	2300      	movs	r3, #0
 801415c:	e145      	b.n	80143ea <process_frame_cmd+0x44a>
			break;
		case 'p':
			rc = param_get_value(glob_params, NULL, (char *)param, &v, &d, &min, &max);
 801415e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014162:	f107 031c 	add.w	r3, r7, #28
 8014166:	9302      	str	r3, [sp, #8]
 8014168:	f107 0320 	add.w	r3, r7, #32
 801416c:	9301      	str	r3, [sp, #4]
 801416e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014172:	9300      	str	r3, [sp, #0]
 8014174:	4613      	mov	r3, r2
 8014176:	683a      	ldr	r2, [r7, #0]
 8014178:	2100      	movs	r1, #0
 801417a:	489f      	ldr	r0, [pc, #636]	; (80143f8 <process_frame_cmd+0x458>)
 801417c:	f7ff fb39 	bl	80137f2 <param_get_value>
 8014180:	63f8      	str	r0, [r7, #60]	; 0x3c
			memcpy(rbuf, &v,   sizeof(int32_t)); rbuf += sizeof(int32_t);
 8014182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014186:	601a      	str	r2, [r3, #0]
 8014188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801418a:	3304      	adds	r3, #4
 801418c:	64fb      	str	r3, [r7, #76]	; 0x4c
			memcpy(rbuf, &d,   sizeof(int32_t)); rbuf += sizeof(int32_t);
 801418e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014192:	601a      	str	r2, [r3, #0]
 8014194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014196:	3304      	adds	r3, #4
 8014198:	64fb      	str	r3, [r7, #76]	; 0x4c
			memcpy(rbuf, &min, sizeof(int32_t)); rbuf += sizeof(int32_t);
 801419a:	6a3a      	ldr	r2, [r7, #32]
 801419c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801419e:	601a      	str	r2, [r3, #0]
 80141a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141a2:	3304      	adds	r3, #4
 80141a4:	64fb      	str	r3, [r7, #76]	; 0x4c
			memcpy(rbuf, &max, sizeof(int32_t)); rbuf += sizeof(int32_t);
 80141a6:	69fa      	ldr	r2, [r7, #28]
 80141a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141aa:	601a      	str	r2, [r3, #0]
 80141ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141ae:	3304      	adds	r3, #4
 80141b0:	64fb      	str	r3, [r7, #76]	; 0x4c
			*prlen = 4*sizeof(int32_t);
 80141b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80141b4:	2210      	movs	r2, #16
 80141b6:	601a      	str	r2, [r3, #0]
			return rc;
 80141b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141ba:	b2db      	uxtb	r3, r3
 80141bc:	e115      	b.n	80143ea <process_frame_cmd+0x44a>
		case 'P': {
			if (plen < 4+1) return 1;
 80141be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80141c0:	2b04      	cmp	r3, #4
 80141c2:	dc01      	bgt.n	80141c8 <process_frame_cmd+0x228>
 80141c4:	2301      	movs	r3, #1
 80141c6:	e110      	b.n	80143ea <process_frame_cmd+0x44a>
			int32_t v;
			memcpy(&v, param, sizeof(int32_t));
 80141c8:	683b      	ldr	r3, [r7, #0]
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	60fb      	str	r3, [r7, #12]
			int rc = param_set_value(glob_params, NULL, (char *)(param+sizeof(int32_t)), v);
 80141ce:	683b      	ldr	r3, [r7, #0]
 80141d0:	1d1a      	adds	r2, r3, #4
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	2100      	movs	r1, #0
 80141d6:	4888      	ldr	r0, [pc, #544]	; (80143f8 <process_frame_cmd+0x458>)
 80141d8:	f7ff fb7d 	bl	80138d6 <param_set_value>
 80141dc:	6338      	str	r0, [r7, #48]	; 0x30
			return rc;
 80141de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141e0:	b2db      	uxtb	r3, r3
 80141e2:	e102      	b.n	80143ea <process_frame_cmd+0x44a>
		}
		default:
			return 3;
 80141e4:	2303      	movs	r3, #3
 80141e6:	e100      	b.n	80143ea <process_frame_cmd+0x44a>
		}
		break;
	case 'T':
		//if (num == '0') num=0; // XXX hook for test
		//if (num != 0) return 4; // for now
		switch (cmd) {
 80141e8:	797b      	ldrb	r3, [r7, #5]
 80141ea:	3b41      	subs	r3, #65	; 0x41
 80141ec:	2b39      	cmp	r3, #57	; 0x39
 80141ee:	f200 80e7 	bhi.w	80143c0 <process_frame_cmd+0x420>
 80141f2:	a201      	add	r2, pc, #4	; (adr r2, 80141f8 <process_frame_cmd+0x258>)
 80141f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141f8:	080143c5 	.word	0x080143c5
 80141fc:	080143c1 	.word	0x080143c1
 8014200:	080143c1 	.word	0x080143c1
 8014204:	080143c1 	.word	0x080143c1
 8014208:	080143c1 	.word	0x080143c1
 801420c:	080143c1 	.word	0x080143c1
 8014210:	080143c1 	.word	0x080143c1
 8014214:	080143c1 	.word	0x080143c1
 8014218:	080143c1 	.word	0x080143c1
 801421c:	080143c1 	.word	0x080143c1
 8014220:	080143c1 	.word	0x080143c1
 8014224:	080143c1 	.word	0x080143c1
 8014228:	080143c1 	.word	0x080143c1
 801422c:	080143c1 	.word	0x080143c1
 8014230:	080143c1 	.word	0x080143c1
 8014234:	08014385 	.word	0x08014385
 8014238:	080143c1 	.word	0x080143c1
 801423c:	080143c1 	.word	0x080143c1
 8014240:	080143c1 	.word	0x080143c1
 8014244:	080143c1 	.word	0x080143c1
 8014248:	080143c1 	.word	0x080143c1
 801424c:	080142e1 	.word	0x080142e1
 8014250:	080143c1 	.word	0x080143c1
 8014254:	080143c1 	.word	0x080143c1
 8014258:	080143c1 	.word	0x080143c1
 801425c:	080143c1 	.word	0x080143c1
 8014260:	080143c1 	.word	0x080143c1
 8014264:	080143c1 	.word	0x080143c1
 8014268:	080143c1 	.word	0x080143c1
 801426c:	080143c1 	.word	0x080143c1
 8014270:	080143c1 	.word	0x080143c1
 8014274:	080143c1 	.word	0x080143c1
 8014278:	080143c5 	.word	0x080143c5
 801427c:	080143c1 	.word	0x080143c1
 8014280:	080143c1 	.word	0x080143c1
 8014284:	080143c1 	.word	0x080143c1
 8014288:	080143c1 	.word	0x080143c1
 801428c:	080143c1 	.word	0x080143c1
 8014290:	080143c1 	.word	0x080143c1
 8014294:	080143c1 	.word	0x080143c1
 8014298:	080143c1 	.word	0x080143c1
 801429c:	080143c1 	.word	0x080143c1
 80142a0:	080143c1 	.word	0x080143c1
 80142a4:	080143c1 	.word	0x080143c1
 80142a8:	080143c1 	.word	0x080143c1
 80142ac:	080143c1 	.word	0x080143c1
 80142b0:	080143c1 	.word	0x080143c1
 80142b4:	0801430f 	.word	0x0801430f
 80142b8:	080143c1 	.word	0x080143c1
 80142bc:	080143c1 	.word	0x080143c1
 80142c0:	080143c1 	.word	0x080143c1
 80142c4:	080143c1 	.word	0x080143c1
 80142c8:	080143c1 	.word	0x080143c1
 80142cc:	080143c1 	.word	0x080143c1
 80142d0:	080143c1 	.word	0x080143c1
 80142d4:	080143c1 	.word	0x080143c1
 80142d8:	080143c1 	.word	0x080143c1
 80142dc:	08014305 	.word	0x08014305
		case 'V':
			if (plen !=2) return 1;
 80142e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142e2:	2b02      	cmp	r3, #2
 80142e4:	d001      	beq.n	80142ea <process_frame_cmd+0x34a>
 80142e6:	2301      	movs	r3, #1
 80142e8:	e07f      	b.n	80143ea <process_frame_cmd+0x44a>
			memcpy(&s, param, sizeof(s));
 80142ea:	683b      	ldr	r3, [r7, #0]
 80142ec:	881b      	ldrh	r3, [r3, #0]
 80142ee:	b29b      	uxth	r3, r3
 80142f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		    train_set_target_speed(num, s);
 80142f2:	79bb      	ldrb	r3, [r7, #6]
 80142f4:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80142f8:	4611      	mov	r1, r2
 80142fa:	4618      	mov	r0, r3
 80142fc:	f001 fc22 	bl	8015b44 <train_set_target_speed>
			return 0;
 8014300:	2300      	movs	r3, #0
 8014302:	e072      	b.n	80143ea <process_frame_cmd+0x44a>
			break;
		case 'a':
			//task_auto_stop_auto();
			break;
		case 'z':
			rc = 0; // TODO train_reset_pos_estimate(num);
 8014304:	2300      	movs	r3, #0
 8014306:	63fb      	str	r3, [r7, #60]	; 0x3c
			return rc;
 8014308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801430a:	b2db      	uxtb	r3, r3
 801430c:	e06d      	b.n	80143ea <process_frame_cmd+0x44a>
			break;
		case 'p': {
			const train_config_t *tcnf = get_train_cnf(num);
 801430e:	79bb      	ldrb	r3, [r7, #6]
 8014310:	4618      	mov	r0, r3
 8014312:	f7ff fb8b 	bl	8013a2c <get_train_cnf>
 8014316:	63b8      	str	r0, [r7, #56]	; 0x38
			if (tcnf) {
 8014318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801431a:	2b00      	cmp	r3, #0
 801431c:	d02d      	beq.n	801437a <process_frame_cmd+0x3da>
				rc = param_get_value(train_params, (void *)tcnf, (char *)param, &v, &d, &min, &max);
 801431e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014322:	f107 031c 	add.w	r3, r7, #28
 8014326:	9302      	str	r3, [sp, #8]
 8014328:	f107 0320 	add.w	r3, r7, #32
 801432c:	9301      	str	r3, [sp, #4]
 801432e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014332:	9300      	str	r3, [sp, #0]
 8014334:	4613      	mov	r3, r2
 8014336:	683a      	ldr	r2, [r7, #0]
 8014338:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801433a:	4830      	ldr	r0, [pc, #192]	; (80143fc <process_frame_cmd+0x45c>)
 801433c:	f7ff fa59 	bl	80137f2 <param_get_value>
 8014340:	63f8      	str	r0, [r7, #60]	; 0x3c
				memcpy(rbuf, &v,   sizeof(int32_t)); rbuf += sizeof(int32_t);
 8014342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014346:	601a      	str	r2, [r3, #0]
 8014348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801434a:	3304      	adds	r3, #4
 801434c:	64fb      	str	r3, [r7, #76]	; 0x4c
				memcpy(rbuf, &d,   sizeof(int32_t)); rbuf += sizeof(int32_t);
 801434e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014352:	601a      	str	r2, [r3, #0]
 8014354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014356:	3304      	adds	r3, #4
 8014358:	64fb      	str	r3, [r7, #76]	; 0x4c
				memcpy(rbuf, &min, sizeof(int32_t)); rbuf += sizeof(int32_t);
 801435a:	6a3a      	ldr	r2, [r7, #32]
 801435c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801435e:	601a      	str	r2, [r3, #0]
 8014360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014362:	3304      	adds	r3, #4
 8014364:	64fb      	str	r3, [r7, #76]	; 0x4c
				memcpy(rbuf, &max, sizeof(int32_t)); rbuf += sizeof(int32_t);
 8014366:	69fa      	ldr	r2, [r7, #28]
 8014368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801436a:	601a      	str	r2, [r3, #0]
 801436c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801436e:	3304      	adds	r3, #4
 8014370:	64fb      	str	r3, [r7, #76]	; 0x4c
				*prlen = 4*sizeof(int32_t);
 8014372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014374:	2210      	movs	r2, #16
 8014376:	601a      	str	r2, [r3, #0]
 8014378:	e001      	b.n	801437e <process_frame_cmd+0x3de>
			} else {
				rc = 3;
 801437a:	2303      	movs	r3, #3
 801437c:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			return rc;
 801437e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014380:	b2db      	uxtb	r3, r3
 8014382:	e032      	b.n	80143ea <process_frame_cmd+0x44a>
		}

		case 'P': {
			if (plen < 4+1) return 1;
 8014384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014386:	2b04      	cmp	r3, #4
 8014388:	dc01      	bgt.n	801438e <process_frame_cmd+0x3ee>
 801438a:	2301      	movs	r3, #1
 801438c:	e02d      	b.n	80143ea <process_frame_cmd+0x44a>
			const train_config_t *tcnf = get_train_cnf(num);
 801438e:	79bb      	ldrb	r3, [r7, #6]
 8014390:	4618      	mov	r0, r3
 8014392:	f7ff fb4b 	bl	8013a2c <get_train_cnf>
 8014396:	6378      	str	r0, [r7, #52]	; 0x34
			if (tcnf) {
 8014398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801439a:	2b00      	cmp	r3, #0
 801439c:	d00b      	beq.n	80143b6 <process_frame_cmd+0x416>
				int32_t v;
				memcpy(&v, param, sizeof(int32_t));
 801439e:	683b      	ldr	r3, [r7, #0]
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	60bb      	str	r3, [r7, #8]
			    rc = param_set_value(train_params, (void *)tcnf, (char *)(param+sizeof(int32_t)), v);
 80143a4:	683b      	ldr	r3, [r7, #0]
 80143a6:	1d1a      	adds	r2, r3, #4
 80143a8:	68bb      	ldr	r3, [r7, #8]
 80143aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80143ac:	4813      	ldr	r0, [pc, #76]	; (80143fc <process_frame_cmd+0x45c>)
 80143ae:	f7ff fa92 	bl	80138d6 <param_set_value>
 80143b2:	63f8      	str	r0, [r7, #60]	; 0x3c
 80143b4:	e001      	b.n	80143ba <process_frame_cmd+0x41a>
			} else {
				rc = 33;
 80143b6:	2321      	movs	r3, #33	; 0x21
 80143b8:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			return rc;
 80143ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143bc:	b2db      	uxtb	r3, r3
 80143be:	e014      	b.n	80143ea <process_frame_cmd+0x44a>
		}

		default:
			return 33;
 80143c0:	2321      	movs	r3, #33	; 0x21
 80143c2:	e012      	b.n	80143ea <process_frame_cmd+0x44a>
			break;
 80143c4:	bf00      	nop
		}
		break;
 80143c6:	e00f      	b.n	80143e8 <process_frame_cmd+0x448>
	default:
		rbuf[0]=sel;
 80143c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80143ca:	79fa      	ldrb	r2, [r7, #7]
 80143cc:	701a      	strb	r2, [r3, #0]
		rbuf[1]=num;
 80143ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80143d0:	3301      	adds	r3, #1
 80143d2:	79ba      	ldrb	r2, [r7, #6]
 80143d4:	701a      	strb	r2, [r3, #0]
		rbuf[2]=cmd;
 80143d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80143d8:	3302      	adds	r3, #2
 80143da:	797a      	ldrb	r2, [r7, #5]
 80143dc:	701a      	strb	r2, [r3, #0]
		*prlen = 3;
 80143de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80143e0:	2203      	movs	r2, #3
 80143e2:	601a      	str	r2, [r3, #0]
		return 5;
 80143e4:	2305      	movs	r3, #5
 80143e6:	e000      	b.n	80143ea <process_frame_cmd+0x44a>
		break;
	}
	return 0;
 80143e8:	2300      	movs	r3, #0
}
 80143ea:	4618      	mov	r0, r3
 80143ec:	3740      	adds	r7, #64	; 0x40
 80143ee:	46bd      	mov	sp, r7
 80143f0:	bd80      	pop	{r7, pc}
 80143f2:	bf00      	nop
 80143f4:	20000480 	.word	0x20000480
 80143f8:	08018aa4 	.word	0x08018aa4
 80143fc:	08018864 	.word	0x08018864

08014400 <trainctl_notif>:

static int num_trainctl_notif = 0;

void trainctl_notif(uint8_t sel, uint8_t num, uint8_t cmd, uint8_t *dta, int dtalen)
{
 8014400:	b580      	push	{r7, lr}
 8014402:	b084      	sub	sp, #16
 8014404:	af02      	add	r7, sp, #8
 8014406:	603b      	str	r3, [r7, #0]
 8014408:	4603      	mov	r3, r0
 801440a:	71fb      	strb	r3, [r7, #7]
 801440c:	460b      	mov	r3, r1
 801440e:	71bb      	strb	r3, [r7, #6]
 8014410:	4613      	mov	r3, r2
 8014412:	717b      	strb	r3, [r7, #5]
	num_trainctl_notif++;
 8014414:	4b0a      	ldr	r3, [pc, #40]	; (8014440 <trainctl_notif+0x40>)
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	3301      	adds	r3, #1
 801441a:	4a09      	ldr	r2, [pc, #36]	; (8014440 <trainctl_notif+0x40>)
 801441c:	6013      	str	r3, [r2, #0]
	if (cli_frame_mode) {
 801441e:	4b09      	ldr	r3, [pc, #36]	; (8014444 <trainctl_notif+0x44>)
 8014420:	781b      	ldrb	r3, [r3, #0]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d007      	beq.n	8014436 <trainctl_notif+0x36>
		frame_send_notif(sel, num, cmd, dta, dtalen);
 8014426:	797a      	ldrb	r2, [r7, #5]
 8014428:	79b9      	ldrb	r1, [r7, #6]
 801442a:	79f8      	ldrb	r0, [r7, #7]
 801442c:	693b      	ldr	r3, [r7, #16]
 801442e:	9300      	str	r3, [sp, #0]
 8014430:	683b      	ldr	r3, [r7, #0]
 8014432:	f000 f891 	bl	8014558 <frame_send_notif>
	}
}
 8014436:	bf00      	nop
 8014438:	3708      	adds	r7, #8
 801443a:	46bd      	mov	sp, r7
 801443c:	bd80      	pop	{r7, pc}
 801443e:	bf00      	nop
 8014440:	200052a8 	.word	0x200052a8
 8014444:	20000480 	.word	0x20000480

08014448 <trainctl_notif2>:

void trainctl_notif2(uint8_t sel, uint8_t num, uint8_t cmd, char *msg, int32_t v1, int32_t v2, int32_t v3)
{
 8014448:	b580      	push	{r7, lr}
 801444a:	b086      	sub	sp, #24
 801444c:	af00      	add	r7, sp, #0
 801444e:	603b      	str	r3, [r7, #0]
 8014450:	4603      	mov	r3, r0
 8014452:	71fb      	strb	r3, [r7, #7]
 8014454:	460b      	mov	r3, r1
 8014456:	71bb      	strb	r3, [r7, #6]
 8014458:	4613      	mov	r3, r2
 801445a:	717b      	strb	r3, [r7, #5]
	static frame_msg_t m;
	char *p;
	int i=0;
 801445c:	2300      	movs	r3, #0
 801445e:	617b      	str	r3, [r7, #20]
	m.frm[i++] = '|';
 8014460:	697b      	ldr	r3, [r7, #20]
 8014462:	1c5a      	adds	r2, r3, #1
 8014464:	617a      	str	r2, [r7, #20]
 8014466:	4a3a      	ldr	r2, [pc, #232]	; (8014550 <trainctl_notif2+0x108>)
 8014468:	4413      	add	r3, r2
 801446a:	227c      	movs	r2, #124	; 0x7c
 801446c:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = '_';
 801446e:	697b      	ldr	r3, [r7, #20]
 8014470:	1c5a      	adds	r2, r3, #1
 8014472:	617a      	str	r2, [r7, #20]
 8014474:	4a36      	ldr	r2, [pc, #216]	; (8014550 <trainctl_notif2+0x108>)
 8014476:	4413      	add	r3, r2
 8014478:	225f      	movs	r2, #95	; 0x5f
 801447a:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = 'N';
 801447c:	697b      	ldr	r3, [r7, #20]
 801447e:	1c5a      	adds	r2, r3, #1
 8014480:	617a      	str	r2, [r7, #20]
 8014482:	4a33      	ldr	r2, [pc, #204]	; (8014550 <trainctl_notif2+0x108>)
 8014484:	4413      	add	r3, r2
 8014486:	224e      	movs	r2, #78	; 0x4e
 8014488:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = sel;
 801448a:	697b      	ldr	r3, [r7, #20]
 801448c:	1c5a      	adds	r2, r3, #1
 801448e:	617a      	str	r2, [r7, #20]
 8014490:	4a2f      	ldr	r2, [pc, #188]	; (8014550 <trainctl_notif2+0x108>)
 8014492:	4413      	add	r3, r2
 8014494:	79fa      	ldrb	r2, [r7, #7]
 8014496:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = num;
 8014498:	697b      	ldr	r3, [r7, #20]
 801449a:	1c5a      	adds	r2, r3, #1
 801449c:	617a      	str	r2, [r7, #20]
 801449e:	4a2c      	ldr	r2, [pc, #176]	; (8014550 <trainctl_notif2+0x108>)
 80144a0:	4413      	add	r3, r2
 80144a2:	79ba      	ldrb	r2, [r7, #6]
 80144a4:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = cmd;
 80144a6:	697b      	ldr	r3, [r7, #20]
 80144a8:	1c5a      	adds	r2, r3, #1
 80144aa:	617a      	str	r2, [r7, #20]
 80144ac:	4a28      	ldr	r2, [pc, #160]	; (8014550 <trainctl_notif2+0x108>)
 80144ae:	4413      	add	r3, r2
 80144b0:	797a      	ldrb	r2, [r7, #5]
 80144b2:	709a      	strb	r2, [r3, #2]
	i += strlen(p);
	m.frm[i++]= '/';
	p = itoa(v2, (char *)m.frm+i, 10);
	i += strlen(p);
#else
	memcpy(m.frm+i, &v1, sizeof(int32_t));
 80144b4:	697b      	ldr	r3, [r7, #20]
 80144b6:	4a27      	ldr	r2, [pc, #156]	; (8014554 <trainctl_notif2+0x10c>)
 80144b8:	4413      	add	r3, r2
 80144ba:	6a3a      	ldr	r2, [r7, #32]
 80144bc:	601a      	str	r2, [r3, #0]
	i += sizeof(int32_t);
 80144be:	697b      	ldr	r3, [r7, #20]
 80144c0:	3304      	adds	r3, #4
 80144c2:	617b      	str	r3, [r7, #20]
	memcpy(m.frm+i, &v2, sizeof(int32_t));
 80144c4:	697b      	ldr	r3, [r7, #20]
 80144c6:	4a23      	ldr	r2, [pc, #140]	; (8014554 <trainctl_notif2+0x10c>)
 80144c8:	4413      	add	r3, r2
 80144ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144cc:	601a      	str	r2, [r3, #0]
	i += sizeof(int32_t);
 80144ce:	697b      	ldr	r3, [r7, #20]
 80144d0:	3304      	adds	r3, #4
 80144d2:	617b      	str	r3, [r7, #20]
	memcpy(m.frm+i, &v3, sizeof(int32_t));
 80144d4:	697b      	ldr	r3, [r7, #20]
 80144d6:	4a1f      	ldr	r2, [pc, #124]	; (8014554 <trainctl_notif2+0x10c>)
 80144d8:	4413      	add	r3, r2
 80144da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80144dc:	601a      	str	r2, [r3, #0]
	i += sizeof(int32_t);
 80144de:	697b      	ldr	r3, [r7, #20]
 80144e0:	3304      	adds	r3, #4
 80144e2:	617b      	str	r3, [r7, #20]
 	p = strncpy((char *)m.frm+i, msg, 10);
 80144e4:	697b      	ldr	r3, [r7, #20]
 80144e6:	4a1b      	ldr	r2, [pc, #108]	; (8014554 <trainctl_notif2+0x10c>)
 80144e8:	4413      	add	r3, r2
 80144ea:	220a      	movs	r2, #10
 80144ec:	6839      	ldr	r1, [r7, #0]
 80144ee:	4618      	mov	r0, r3
 80144f0:	f002 fb04 	bl	8016afc <strncpy>
 80144f4:	6138      	str	r0, [r7, #16]
	m.frm[i+10]='\0';
 80144f6:	697b      	ldr	r3, [r7, #20]
 80144f8:	330a      	adds	r3, #10
 80144fa:	4a15      	ldr	r2, [pc, #84]	; (8014550 <trainctl_notif2+0x108>)
 80144fc:	4413      	add	r3, r2
 80144fe:	2200      	movs	r2, #0
 8014500:	709a      	strb	r2, [r3, #2]
	i += strlen(p);
 8014502:	6938      	ldr	r0, [r7, #16]
 8014504:	f7eb fe6e 	bl	80001e4 <strlen>
 8014508:	4602      	mov	r2, r0
 801450a:	697b      	ldr	r3, [r7, #20]
 801450c:	4413      	add	r3, r2
 801450e:	617b      	str	r3, [r7, #20]
#endif
	m.frm[i++]= '\0';
 8014510:	697b      	ldr	r3, [r7, #20]
 8014512:	1c5a      	adds	r2, r3, #1
 8014514:	617a      	str	r2, [r7, #20]
 8014516:	4a0e      	ldr	r2, [pc, #56]	; (8014550 <trainctl_notif2+0x108>)
 8014518:	4413      	add	r3, r2
 801451a:	2200      	movs	r2, #0
 801451c:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = '|';
 801451e:	697b      	ldr	r3, [r7, #20]
 8014520:	1c5a      	adds	r2, r3, #1
 8014522:	617a      	str	r2, [r7, #20]
 8014524:	4a0a      	ldr	r2, [pc, #40]	; (8014550 <trainctl_notif2+0x108>)
 8014526:	4413      	add	r3, r2
 8014528:	227c      	movs	r2, #124	; 0x7c
 801452a:	709a      	strb	r2, [r3, #2]
	int l = frm_escape(m.frm, i, FRM_MAX_LEN);
 801452c:	221f      	movs	r2, #31
 801452e:	6979      	ldr	r1, [r7, #20]
 8014530:	4808      	ldr	r0, [pc, #32]	; (8014554 <trainctl_notif2+0x10c>)
 8014532:	f7ff fbb8 	bl	8013ca6 <frm_escape>
 8014536:	60f8      	str	r0, [r7, #12]
	if (l>0) txframe_send_notif(&m, l);
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	2b00      	cmp	r3, #0
 801453c:	dd03      	ble.n	8014546 <trainctl_notif2+0xfe>
 801453e:	68f9      	ldr	r1, [r7, #12]
 8014540:	4803      	ldr	r0, [pc, #12]	; (8014550 <trainctl_notif2+0x108>)
 8014542:	f7ff fad0 	bl	8013ae6 <txframe_send_notif>
}
 8014546:	bf00      	nop
 8014548:	3718      	adds	r7, #24
 801454a:	46bd      	mov	sp, r7
 801454c:	bd80      	pop	{r7, pc}
 801454e:	bf00      	nop
 8014550:	200052ac 	.word	0x200052ac
 8014554:	200052ae 	.word	0x200052ae

08014558 <frame_send_notif>:


void frame_send_notif(uint8_t sel, uint8_t num, uint8_t cmd, uint8_t *dta, int dtalen)
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b084      	sub	sp, #16
 801455c:	af00      	add	r7, sp, #0
 801455e:	603b      	str	r3, [r7, #0]
 8014560:	4603      	mov	r3, r0
 8014562:	71fb      	strb	r3, [r7, #7]
 8014564:	460b      	mov	r3, r1
 8014566:	71bb      	strb	r3, [r7, #6]
 8014568:	4613      	mov	r3, r2
 801456a:	717b      	strb	r3, [r7, #5]
	static frame_msg_t m;
	if (dtalen>FRM_MAX_LEN-8) dtalen=FRM_MAX_LEN-8;
 801456c:	69bb      	ldr	r3, [r7, #24]
 801456e:	2b17      	cmp	r3, #23
 8014570:	dd01      	ble.n	8014576 <frame_send_notif+0x1e>
 8014572:	2317      	movs	r3, #23
 8014574:	61bb      	str	r3, [r7, #24]
	int i=0;
 8014576:	2300      	movs	r3, #0
 8014578:	60fb      	str	r3, [r7, #12]
	m.frm[i++] = '|';
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	1c5a      	adds	r2, r3, #1
 801457e:	60fa      	str	r2, [r7, #12]
 8014580:	4a25      	ldr	r2, [pc, #148]	; (8014618 <frame_send_notif+0xc0>)
 8014582:	4413      	add	r3, r2
 8014584:	227c      	movs	r2, #124	; 0x7c
 8014586:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = '_';
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	1c5a      	adds	r2, r3, #1
 801458c:	60fa      	str	r2, [r7, #12]
 801458e:	4a22      	ldr	r2, [pc, #136]	; (8014618 <frame_send_notif+0xc0>)
 8014590:	4413      	add	r3, r2
 8014592:	225f      	movs	r2, #95	; 0x5f
 8014594:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = 'N';
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	1c5a      	adds	r2, r3, #1
 801459a:	60fa      	str	r2, [r7, #12]
 801459c:	4a1e      	ldr	r2, [pc, #120]	; (8014618 <frame_send_notif+0xc0>)
 801459e:	4413      	add	r3, r2
 80145a0:	224e      	movs	r2, #78	; 0x4e
 80145a2:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = sel;
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	1c5a      	adds	r2, r3, #1
 80145a8:	60fa      	str	r2, [r7, #12]
 80145aa:	4a1b      	ldr	r2, [pc, #108]	; (8014618 <frame_send_notif+0xc0>)
 80145ac:	4413      	add	r3, r2
 80145ae:	79fa      	ldrb	r2, [r7, #7]
 80145b0:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = num;
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	1c5a      	adds	r2, r3, #1
 80145b6:	60fa      	str	r2, [r7, #12]
 80145b8:	4a17      	ldr	r2, [pc, #92]	; (8014618 <frame_send_notif+0xc0>)
 80145ba:	4413      	add	r3, r2
 80145bc:	79ba      	ldrb	r2, [r7, #6]
 80145be:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = cmd;
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	1c5a      	adds	r2, r3, #1
 80145c4:	60fa      	str	r2, [r7, #12]
 80145c6:	4a14      	ldr	r2, [pc, #80]	; (8014618 <frame_send_notif+0xc0>)
 80145c8:	4413      	add	r3, r2
 80145ca:	797a      	ldrb	r2, [r7, #5]
 80145cc:	709a      	strb	r2, [r3, #2]
	memcpy(m.frm+i, dta, dtalen);
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	4a12      	ldr	r2, [pc, #72]	; (801461c <frame_send_notif+0xc4>)
 80145d2:	4413      	add	r3, r2
 80145d4:	69ba      	ldr	r2, [r7, #24]
 80145d6:	6839      	ldr	r1, [r7, #0]
 80145d8:	4618      	mov	r0, r3
 80145da:	f002 f9c3 	bl	8016964 <memcpy>
	i += dtalen;
 80145de:	68fa      	ldr	r2, [r7, #12]
 80145e0:	69bb      	ldr	r3, [r7, #24]
 80145e2:	4413      	add	r3, r2
 80145e4:	60fb      	str	r3, [r7, #12]
	m.frm[i++] = '|';
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	1c5a      	adds	r2, r3, #1
 80145ea:	60fa      	str	r2, [r7, #12]
 80145ec:	4a0a      	ldr	r2, [pc, #40]	; (8014618 <frame_send_notif+0xc0>)
 80145ee:	4413      	add	r3, r2
 80145f0:	227c      	movs	r2, #124	; 0x7c
 80145f2:	709a      	strb	r2, [r3, #2]
	int l = frm_escape(m.frm, i, FRM_MAX_LEN);
 80145f4:	221f      	movs	r2, #31
 80145f6:	68f9      	ldr	r1, [r7, #12]
 80145f8:	4808      	ldr	r0, [pc, #32]	; (801461c <frame_send_notif+0xc4>)
 80145fa:	f7ff fb54 	bl	8013ca6 <frm_escape>
 80145fe:	60b8      	str	r0, [r7, #8]
	if (l>0) txframe_send_notif(&m, l);
 8014600:	68bb      	ldr	r3, [r7, #8]
 8014602:	2b00      	cmp	r3, #0
 8014604:	dd03      	ble.n	801460e <frame_send_notif+0xb6>
 8014606:	68b9      	ldr	r1, [r7, #8]
 8014608:	4803      	ldr	r0, [pc, #12]	; (8014618 <frame_send_notif+0xc0>)
 801460a:	f7ff fa6c 	bl	8013ae6 <txframe_send_notif>
}
 801460e:	bf00      	nop
 8014610:	3710      	adds	r7, #16
 8014612:	46bd      	mov	sp, r7
 8014614:	bd80      	pop	{r7, pc}
 8014616:	bf00      	nop
 8014618:	200052d0 	.word	0x200052d0
 801461c:	200052d2 	.word	0x200052d2

08014620 <txframe_send_msg64>:

static void txframe_send_msg64(msg_64_t *msg)
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b084      	sub	sp, #16
 8014624:	af00      	add	r7, sp, #0
 8014626:	6078      	str	r0, [r7, #4]
    static frame_msg_t m;
    //int dtalen = 8;
    int i=0;
 8014628:	2300      	movs	r3, #0
 801462a:	60fb      	str	r3, [r7, #12]
    m.frm[i++] = '|';
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	1c5a      	adds	r2, r3, #1
 8014630:	60fa      	str	r2, [r7, #12]
 8014632:	4a39      	ldr	r2, [pc, #228]	; (8014718 <txframe_send_msg64+0xf8>)
 8014634:	4413      	add	r3, r2
 8014636:	227c      	movs	r2, #124	; 0x7c
 8014638:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = '_';
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	1c5a      	adds	r2, r3, #1
 801463e:	60fa      	str	r2, [r7, #12]
 8014640:	4a35      	ldr	r2, [pc, #212]	; (8014718 <txframe_send_msg64+0xf8>)
 8014642:	4413      	add	r3, r2
 8014644:	225f      	movs	r2, #95	; 0x5f
 8014646:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = '6';
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	1c5a      	adds	r2, r3, #1
 801464c:	60fa      	str	r2, [r7, #12]
 801464e:	4a32      	ldr	r2, [pc, #200]	; (8014718 <txframe_send_msg64+0xf8>)
 8014650:	4413      	add	r3, r2
 8014652:	2236      	movs	r2, #54	; 0x36
 8014654:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->to;
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	1c5a      	adds	r2, r3, #1
 801465a:	60fa      	str	r2, [r7, #12]
 801465c:	687a      	ldr	r2, [r7, #4]
 801465e:	7811      	ldrb	r1, [r2, #0]
 8014660:	4a2d      	ldr	r2, [pc, #180]	; (8014718 <txframe_send_msg64+0xf8>)
 8014662:	4413      	add	r3, r2
 8014664:	460a      	mov	r2, r1
 8014666:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->from;
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	1c5a      	adds	r2, r3, #1
 801466c:	60fa      	str	r2, [r7, #12]
 801466e:	687a      	ldr	r2, [r7, #4]
 8014670:	7851      	ldrb	r1, [r2, #1]
 8014672:	4a29      	ldr	r2, [pc, #164]	; (8014718 <txframe_send_msg64+0xf8>)
 8014674:	4413      	add	r3, r2
 8014676:	460a      	mov	r2, r1
 8014678:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[0];
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	1c5a      	adds	r2, r3, #1
 801467e:	60fa      	str	r2, [r7, #12]
 8014680:	687a      	ldr	r2, [r7, #4]
 8014682:	7891      	ldrb	r1, [r2, #2]
 8014684:	4a24      	ldr	r2, [pc, #144]	; (8014718 <txframe_send_msg64+0xf8>)
 8014686:	4413      	add	r3, r2
 8014688:	460a      	mov	r2, r1
 801468a:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[1];
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	1c5a      	adds	r2, r3, #1
 8014690:	60fa      	str	r2, [r7, #12]
 8014692:	687a      	ldr	r2, [r7, #4]
 8014694:	78d1      	ldrb	r1, [r2, #3]
 8014696:	4a20      	ldr	r2, [pc, #128]	; (8014718 <txframe_send_msg64+0xf8>)
 8014698:	4413      	add	r3, r2
 801469a:	460a      	mov	r2, r1
 801469c:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[2];
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	1c5a      	adds	r2, r3, #1
 80146a2:	60fa      	str	r2, [r7, #12]
 80146a4:	687a      	ldr	r2, [r7, #4]
 80146a6:	7911      	ldrb	r1, [r2, #4]
 80146a8:	4a1b      	ldr	r2, [pc, #108]	; (8014718 <txframe_send_msg64+0xf8>)
 80146aa:	4413      	add	r3, r2
 80146ac:	460a      	mov	r2, r1
 80146ae:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[3];
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	1c5a      	adds	r2, r3, #1
 80146b4:	60fa      	str	r2, [r7, #12]
 80146b6:	687a      	ldr	r2, [r7, #4]
 80146b8:	7951      	ldrb	r1, [r2, #5]
 80146ba:	4a17      	ldr	r2, [pc, #92]	; (8014718 <txframe_send_msg64+0xf8>)
 80146bc:	4413      	add	r3, r2
 80146be:	460a      	mov	r2, r1
 80146c0:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[4];
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	1c5a      	adds	r2, r3, #1
 80146c6:	60fa      	str	r2, [r7, #12]
 80146c8:	687a      	ldr	r2, [r7, #4]
 80146ca:	7991      	ldrb	r1, [r2, #6]
 80146cc:	4a12      	ldr	r2, [pc, #72]	; (8014718 <txframe_send_msg64+0xf8>)
 80146ce:	4413      	add	r3, r2
 80146d0:	460a      	mov	r2, r1
 80146d2:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[5];
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	1c5a      	adds	r2, r3, #1
 80146d8:	60fa      	str	r2, [r7, #12]
 80146da:	687a      	ldr	r2, [r7, #4]
 80146dc:	79d1      	ldrb	r1, [r2, #7]
 80146de:	4a0e      	ldr	r2, [pc, #56]	; (8014718 <txframe_send_msg64+0xf8>)
 80146e0:	4413      	add	r3, r2
 80146e2:	460a      	mov	r2, r1
 80146e4:	709a      	strb	r2, [r3, #2]
    //memcpy(m.frm+i, dta, dtalen);
    //i += dtalen;
    m.frm[i++] = '|';
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	1c5a      	adds	r2, r3, #1
 80146ea:	60fa      	str	r2, [r7, #12]
 80146ec:	4a0a      	ldr	r2, [pc, #40]	; (8014718 <txframe_send_msg64+0xf8>)
 80146ee:	4413      	add	r3, r2
 80146f0:	227c      	movs	r2, #124	; 0x7c
 80146f2:	709a      	strb	r2, [r3, #2]
    int l = frm_escape(m.frm, i, FRM_MAX_LEN);
 80146f4:	221f      	movs	r2, #31
 80146f6:	68f9      	ldr	r1, [r7, #12]
 80146f8:	4808      	ldr	r0, [pc, #32]	; (801471c <txframe_send_msg64+0xfc>)
 80146fa:	f7ff fad4 	bl	8013ca6 <frm_escape>
 80146fe:	60b8      	str	r0, [r7, #8]
    if (l>0) txframe_send_notif(&m, l);
 8014700:	68bb      	ldr	r3, [r7, #8]
 8014702:	2b00      	cmp	r3, #0
 8014704:	dd03      	ble.n	801470e <txframe_send_msg64+0xee>
 8014706:	68b9      	ldr	r1, [r7, #8]
 8014708:	4803      	ldr	r0, [pc, #12]	; (8014718 <txframe_send_msg64+0xf8>)
 801470a:	f7ff f9ec 	bl	8013ae6 <txframe_send_notif>
}
 801470e:	bf00      	nop
 8014710:	3710      	adds	r7, #16
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}
 8014716:	bf00      	nop
 8014718:	200052f4 	.word	0x200052f4
 801471c:	200052f6 	.word	0x200052f6

08014720 <frame_gather_stat>:



// buf should be long enough to store a int32_t with escape, so 8 bytes
int frame_gather_stat(int step, uint8_t *buf)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b086      	sub	sp, #24
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
 8014728:	6039      	str	r1, [r7, #0]
	// int32_t stat_val_get(int step);
	int done;
	int32_t v = stat_val_get(step, &done);
 801472a:	f107 0310 	add.w	r3, r7, #16
 801472e:	4619      	mov	r1, r3
 8014730:	6878      	ldr	r0, [r7, #4]
 8014732:	f7ff f9c9 	bl	8013ac8 <stat_val_get>
 8014736:	4603      	mov	r3, r0
 8014738:	60fb      	str	r3, [r7, #12]
	if (done) return 0;
 801473a:	693b      	ldr	r3, [r7, #16]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d001      	beq.n	8014744 <frame_gather_stat+0x24>
 8014740:	2300      	movs	r3, #0
 8014742:	e00e      	b.n	8014762 <frame_gather_stat+0x42>

	int l = _frm_escape2(buf, (void *) &v, 4, 8);
 8014744:	f107 010c 	add.w	r1, r7, #12
 8014748:	2308      	movs	r3, #8
 801474a:	2204      	movs	r2, #4
 801474c:	6838      	ldr	r0, [r7, #0]
 801474e:	f7ff fa63 	bl	8013c18 <_frm_escape2>
 8014752:	6178      	str	r0, [r7, #20]
	if (l<0) {
 8014754:	697b      	ldr	r3, [r7, #20]
 8014756:	2b00      	cmp	r3, #0
 8014758:	da02      	bge.n	8014760 <frame_gather_stat+0x40>
		return -1;
 801475a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801475e:	e000      	b.n	8014762 <frame_gather_stat+0x42>
	}
	return l;
 8014760:	697b      	ldr	r3, [r7, #20]
}
 8014762:	4618      	mov	r0, r3
 8014764:	3718      	adds	r7, #24
 8014766:	46bd      	mov	sp, r7
 8014768:	bd80      	pop	{r7, pc}

0801476a <frame_send_stat>:

void frame_send_stat(void(*cb)(uint8_t *d, int l), uint32_t tick)
{
 801476a:	b580      	push	{r7, lr}
 801476c:	b086      	sub	sp, #24
 801476e:	af00      	add	r7, sp, #0
 8014770:	6078      	str	r0, [r7, #4]
 8014772:	6039      	str	r1, [r7, #0]
    uint8_t buf[8];
    //if ((1)) tick = 0xAA55AA55;
    int l = _frm_escape2(buf, (void *) &tick, 4, 8);
 8014774:	4639      	mov	r1, r7
 8014776:	f107 0008 	add.w	r0, r7, #8
 801477a:	2308      	movs	r3, #8
 801477c:	2204      	movs	r2, #4
 801477e:	f7ff fa4b 	bl	8013c18 <_frm_escape2>
 8014782:	6138      	str	r0, [r7, #16]
    cb(buf, l);
 8014784:	f107 0208 	add.w	r2, r7, #8
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	6939      	ldr	r1, [r7, #16]
 801478c:	4610      	mov	r0, r2
 801478e:	4798      	blx	r3

	int i;
	for (i=0; ; i++) {
 8014790:	2300      	movs	r3, #0
 8014792:	617b      	str	r3, [r7, #20]
		l = frame_gather_stat(i, buf);
 8014794:	f107 0308 	add.w	r3, r7, #8
 8014798:	4619      	mov	r1, r3
 801479a:	6978      	ldr	r0, [r7, #20]
 801479c:	f7ff ffc0 	bl	8014720 <frame_gather_stat>
 80147a0:	6138      	str	r0, [r7, #16]
		if (l<=0) {
 80147a2:	693b      	ldr	r3, [r7, #16]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	dd09      	ble.n	80147bc <frame_send_stat+0x52>
			return;
		}
		cb(buf, l);
 80147a8:	f107 0208 	add.w	r2, r7, #8
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	6939      	ldr	r1, [r7, #16]
 80147b0:	4610      	mov	r0, r2
 80147b2:	4798      	blx	r3
	for (i=0; ; i++) {
 80147b4:	697b      	ldr	r3, [r7, #20]
 80147b6:	3301      	adds	r3, #1
 80147b8:	617b      	str	r3, [r7, #20]
		l = frame_gather_stat(i, buf);
 80147ba:	e7eb      	b.n	8014794 <frame_send_stat+0x2a>
			return;
 80147bc:	bf00      	nop
	}
}
 80147be:	3718      	adds	r7, #24
 80147c0:	46bd      	mov	sp, r7
 80147c2:	bd80      	pop	{r7, pc}

080147c4 <itm_debug1>:
//void _itm_debug1(const char *msg, int v);
//void _itm_debug2(const char *msg, int v1, int v2);
void _itm_debug3(const char *msg, int v1, int v2, int v3, int n);

static inline void itm_debug1(uint32_t f, const char *msg, int v)
{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b086      	sub	sp, #24
 80147c8:	af02      	add	r7, sp, #8
 80147ca:	60f8      	str	r0, [r7, #12]
 80147cc:	60b9      	str	r1, [r7, #8]
 80147ce:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 80147d0:	4b08      	ldr	r3, [pc, #32]	; (80147f4 <itm_debug1+0x30>)
 80147d2:	681a      	ldr	r2, [r3, #0]
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	4013      	ands	r3, r2
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d007      	beq.n	80147ec <itm_debug1+0x28>
 80147dc:	2301      	movs	r3, #1
 80147de:	9300      	str	r3, [sp, #0]
 80147e0:	2300      	movs	r3, #0
 80147e2:	2200      	movs	r2, #0
 80147e4:	6879      	ldr	r1, [r7, #4]
 80147e6:	68b8      	ldr	r0, [r7, #8]
 80147e8:	f001 fea6 	bl	8016538 <_itm_debug3>
}
 80147ec:	bf00      	nop
 80147ee:	3710      	adds	r7, #16
 80147f0:	46bd      	mov	sp, r7
 80147f2:	bd80      	pop	{r7, pc}
 80147f4:	20000538 	.word	0x20000538

080147f8 <itm_debug2>:
static inline void itm_debug2(uint32_t f, const char *msg, int v1, int v2)
{
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b086      	sub	sp, #24
 80147fc:	af02      	add	r7, sp, #8
 80147fe:	60f8      	str	r0, [r7, #12]
 8014800:	60b9      	str	r1, [r7, #8]
 8014802:	607a      	str	r2, [r7, #4]
 8014804:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8014806:	4b09      	ldr	r3, [pc, #36]	; (801482c <itm_debug2+0x34>)
 8014808:	681a      	ldr	r2, [r3, #0]
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	4013      	ands	r3, r2
 801480e:	2b00      	cmp	r3, #0
 8014810:	d007      	beq.n	8014822 <itm_debug2+0x2a>
 8014812:	2302      	movs	r3, #2
 8014814:	9300      	str	r3, [sp, #0]
 8014816:	2300      	movs	r3, #0
 8014818:	683a      	ldr	r2, [r7, #0]
 801481a:	6879      	ldr	r1, [r7, #4]
 801481c:	68b8      	ldr	r0, [r7, #8]
 801481e:	f001 fe8b 	bl	8016538 <_itm_debug3>
}
 8014822:	bf00      	nop
 8014824:	3710      	adds	r7, #16
 8014826:	46bd      	mov	sp, r7
 8014828:	bd80      	pop	{r7, pc}
 801482a:	bf00      	nop
 801482c:	20000538 	.word	0x20000538

08014830 <itm_debug3>:
static inline void itm_debug3(uint32_t f, const char *msg, int v1, int v2, int v3)
{
 8014830:	b580      	push	{r7, lr}
 8014832:	b086      	sub	sp, #24
 8014834:	af02      	add	r7, sp, #8
 8014836:	60f8      	str	r0, [r7, #12]
 8014838:	60b9      	str	r1, [r7, #8]
 801483a:	607a      	str	r2, [r7, #4]
 801483c:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 801483e:	4b09      	ldr	r3, [pc, #36]	; (8014864 <itm_debug3+0x34>)
 8014840:	681a      	ldr	r2, [r3, #0]
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	4013      	ands	r3, r2
 8014846:	2b00      	cmp	r3, #0
 8014848:	d007      	beq.n	801485a <itm_debug3+0x2a>
 801484a:	2303      	movs	r3, #3
 801484c:	9300      	str	r3, [sp, #0]
 801484e:	69bb      	ldr	r3, [r7, #24]
 8014850:	683a      	ldr	r2, [r7, #0]
 8014852:	6879      	ldr	r1, [r7, #4]
 8014854:	68b8      	ldr	r0, [r7, #8]
 8014856:	f001 fe6f 	bl	8016538 <_itm_debug3>
}
 801485a:	bf00      	nop
 801485c:	3710      	adds	r7, #16
 801485e:	46bd      	mov	sp, r7
 8014860:	bd80      	pop	{r7, pc}
 8014862:	bf00      	nop
 8014864:	20000538 	.word	0x20000538

08014868 <msg_error>:
		{MA_ADDR_MASK_5,						MA_ADDR_5_CTRL,			5}

};

static void msg_error(const char *msg)
{
 8014868:	b480      	push	{r7}
 801486a:	b083      	sub	sp, #12
 801486c:	af00      	add	r7, sp, #0
 801486e:	6078      	str	r0, [r7, #4]

}
 8014870:	bf00      	nop
 8014872:	370c      	adds	r7, #12
 8014874:	46bd      	mov	sp, r7
 8014876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801487a:	4770      	bx	lr

0801487c <dispatch_m64>:


static void dispatch_m64(msg_64_t *m, int f)
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b086      	sub	sp, #24
 8014880:	af00      	add	r7, sp, #0
 8014882:	6078      	str	r0, [r7, #4]
 8014884:	6039      	str	r1, [r7, #0]
    if (m->to == MA_BROADCAST) {
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	781b      	ldrb	r3, [r3, #0]
 801488a:	2bff      	cmp	r3, #255	; 0xff
 801488c:	d118      	bne.n	80148c0 <dispatch_m64+0x44>
        for (int i=0; i<NQDEF; i++) {
 801488e:	2300      	movs	r3, #0
 8014890:	617b      	str	r3, [r7, #20]
 8014892:	e011      	b.n	80148b8 <dispatch_m64+0x3c>
            if (i == f) {
 8014894:	697a      	ldr	r2, [r7, #20]
 8014896:	683b      	ldr	r3, [r7, #0]
 8014898:	429a      	cmp	r2, r3
 801489a:	d009      	beq.n	80148b0 <dispatch_m64+0x34>
                continue;
            }
            mqf_t *q = qdef[i].to;
 801489c:	4a30      	ldr	r2, [pc, #192]	; (8014960 <dispatch_m64+0xe4>)
 801489e:	697b      	ldr	r3, [r7, #20]
 80148a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80148a4:	60bb      	str	r3, [r7, #8]
            mqf_write(q, m);
 80148a6:	6879      	ldr	r1, [r7, #4]
 80148a8:	68b8      	ldr	r0, [r7, #8]
 80148aa:	f001 ff4b 	bl	8016744 <mqf_write>
 80148ae:	e000      	b.n	80148b2 <dispatch_m64+0x36>
                continue;
 80148b0:	bf00      	nop
        for (int i=0; i<NQDEF; i++) {
 80148b2:	697b      	ldr	r3, [r7, #20]
 80148b4:	3301      	adds	r3, #1
 80148b6:	617b      	str	r3, [r7, #20]
 80148b8:	697b      	ldr	r3, [r7, #20]
 80148ba:	2b06      	cmp	r3, #6
 80148bc:	ddea      	ble.n	8014894 <dispatch_m64+0x18>
        }
        return;
 80148be:	e04b      	b.n	8014958 <dispatch_m64+0xdc>
    }
	for (int i=0; i<NROUTES; i++) {
 80148c0:	2300      	movs	r3, #0
 80148c2:	613b      	str	r3, [r7, #16]
 80148c4:	e03b      	b.n	801493e <dispatch_m64+0xc2>
		if ((m->to & routes[i].mask) == routes[i].value) {
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	7819      	ldrb	r1, [r3, #0]
 80148ca:	4826      	ldr	r0, [pc, #152]	; (8014964 <dispatch_m64+0xe8>)
 80148cc:	693a      	ldr	r2, [r7, #16]
 80148ce:	4613      	mov	r3, r2
 80148d0:	005b      	lsls	r3, r3, #1
 80148d2:	4413      	add	r3, r2
 80148d4:	4403      	add	r3, r0
 80148d6:	781b      	ldrb	r3, [r3, #0]
 80148d8:	400b      	ands	r3, r1
 80148da:	b2d9      	uxtb	r1, r3
 80148dc:	4821      	ldr	r0, [pc, #132]	; (8014964 <dispatch_m64+0xe8>)
 80148de:	693a      	ldr	r2, [r7, #16]
 80148e0:	4613      	mov	r3, r2
 80148e2:	005b      	lsls	r3, r3, #1
 80148e4:	4413      	add	r3, r2
 80148e6:	4403      	add	r3, r0
 80148e8:	3301      	adds	r3, #1
 80148ea:	781b      	ldrb	r3, [r3, #0]
 80148ec:	4299      	cmp	r1, r3
 80148ee:	d123      	bne.n	8014938 <dispatch_m64+0xbc>
			if (f==routes[i].destq) {
 80148f0:	491c      	ldr	r1, [pc, #112]	; (8014964 <dispatch_m64+0xe8>)
 80148f2:	693a      	ldr	r2, [r7, #16]
 80148f4:	4613      	mov	r3, r2
 80148f6:	005b      	lsls	r3, r3, #1
 80148f8:	4413      	add	r3, r2
 80148fa:	440b      	add	r3, r1
 80148fc:	3302      	adds	r3, #2
 80148fe:	781b      	ldrb	r3, [r3, #0]
 8014900:	461a      	mov	r2, r3
 8014902:	683b      	ldr	r3, [r7, #0]
 8014904:	4293      	cmp	r3, r2
 8014906:	d105      	bne.n	8014914 <dispatch_m64+0x98>
				// loop
				itm_debug1(DBG_ERR|DBG_MSG, "loop", f);
 8014908:	683a      	ldr	r2, [r7, #0]
 801490a:	4917      	ldr	r1, [pc, #92]	; (8014968 <dispatch_m64+0xec>)
 801490c:	4817      	ldr	r0, [pc, #92]	; (801496c <dispatch_m64+0xf0>)
 801490e:	f7ff ff59 	bl	80147c4 <itm_debug1>
				return;
 8014912:	e021      	b.n	8014958 <dispatch_m64+0xdc>
			}
			mqf_t *q = qdef[routes[i].destq].to;
 8014914:	4913      	ldr	r1, [pc, #76]	; (8014964 <dispatch_m64+0xe8>)
 8014916:	693a      	ldr	r2, [r7, #16]
 8014918:	4613      	mov	r3, r2
 801491a:	005b      	lsls	r3, r3, #1
 801491c:	4413      	add	r3, r2
 801491e:	440b      	add	r3, r1
 8014920:	3302      	adds	r3, #2
 8014922:	781b      	ldrb	r3, [r3, #0]
 8014924:	461a      	mov	r2, r3
 8014926:	4b0e      	ldr	r3, [pc, #56]	; (8014960 <dispatch_m64+0xe4>)
 8014928:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 801492c:	60fb      	str	r3, [r7, #12]
			mqf_write(q, m);
 801492e:	6879      	ldr	r1, [r7, #4]
 8014930:	68f8      	ldr	r0, [r7, #12]
 8014932:	f001 ff07 	bl	8016744 <mqf_write>
			return;
 8014936:	e00f      	b.n	8014958 <dispatch_m64+0xdc>
	for (int i=0; i<NROUTES; i++) {
 8014938:	693b      	ldr	r3, [r7, #16]
 801493a:	3301      	adds	r3, #1
 801493c:	613b      	str	r3, [r7, #16]
 801493e:	693b      	ldr	r3, [r7, #16]
 8014940:	2b07      	cmp	r3, #7
 8014942:	ddc0      	ble.n	80148c6 <dispatch_m64+0x4a>
		}
	}
	itm_debug1(DBG_ERR|DBG_MSG, "no route", m->to);
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	781b      	ldrb	r3, [r3, #0]
 8014948:	461a      	mov	r2, r3
 801494a:	4909      	ldr	r1, [pc, #36]	; (8014970 <dispatch_m64+0xf4>)
 801494c:	4807      	ldr	r0, [pc, #28]	; (801496c <dispatch_m64+0xf0>)
 801494e:	f7ff ff39 	bl	80147c4 <itm_debug1>
	msg_error("no route");
 8014952:	4807      	ldr	r0, [pc, #28]	; (8014970 <dispatch_m64+0xf4>)
 8014954:	f7ff ff88 	bl	8014868 <msg_error>
}
 8014958:	3718      	adds	r7, #24
 801495a:	46bd      	mov	sp, r7
 801495c:	bd80      	pop	{r7, pc}
 801495e:	bf00      	nop
 8014960:	08018b34 	.word	0x08018b34
 8014964:	08018b6c 	.word	0x08018b6c
 8014968:	080170b0 	.word	0x080170b0
 801496c:	80000002 	.word	0x80000002
 8014970:	080170b8 	.word	0x080170b8

08014974 <dump_qusage>:


static void dump_qusage(int i, int d, mqf_t *q)
{
 8014974:	b5b0      	push	{r4, r5, r7, lr}
 8014976:	b086      	sub	sp, #24
 8014978:	af02      	add	r7, sp, #8
 801497a:	60f8      	str	r0, [r7, #12]
 801497c:	60b9      	str	r1, [r7, #8]
 801497e:	607a      	str	r2, [r7, #4]
	itm_debug3(DBG_ERR, "qu", d*100+i, q->maxuse, mqf_len(q));
 8014980:	68bb      	ldr	r3, [r7, #8]
 8014982:	2264      	movs	r2, #100	; 0x64
 8014984:	fb02 f203 	mul.w	r2, r2, r3
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	18d4      	adds	r4, r2, r3
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	799b      	ldrb	r3, [r3, #6]
 8014990:	461d      	mov	r5, r3
 8014992:	6878      	ldr	r0, [r7, #4]
 8014994:	f001 fe7a 	bl	801668c <mqf_len>
 8014998:	4603      	mov	r3, r0
 801499a:	9300      	str	r3, [sp, #0]
 801499c:	462b      	mov	r3, r5
 801499e:	4622      	mov	r2, r4
 80149a0:	4905      	ldr	r1, [pc, #20]	; (80149b8 <dump_qusage+0x44>)
 80149a2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80149a6:	f7ff ff43 	bl	8014830 <itm_debug3>
	q->maxuse = 0;
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	2200      	movs	r2, #0
 80149ae:	719a      	strb	r2, [r3, #6]
}
 80149b0:	bf00      	nop
 80149b2:	3710      	adds	r7, #16
 80149b4:	46bd      	mov	sp, r7
 80149b6:	bdb0      	pop	{r4, r5, r7, pc}
 80149b8:	080170c4 	.word	0x080170c4

080149bc <msgsrv_tick>:

void msgsrv_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt)
{
 80149bc:	b580      	push	{r7, lr}
 80149be:	b08c      	sub	sp, #48	; 0x30
 80149c0:	af02      	add	r7, sp, #8
 80149c2:	60f8      	str	r0, [r7, #12]
 80149c4:	60b9      	str	r1, [r7, #8]
 80149c6:	607a      	str	r2, [r7, #4]
        	itm_debug1(DBG_ERR|DBG_MSG, "bad size", sizeof(msg_64_t));
        	for (;;);
#endif
        }
    }
	for (int i=0; i<NQDEF; i++) {
 80149c8:	2300      	movs	r3, #0
 80149ca:	627b      	str	r3, [r7, #36]	; 0x24
 80149cc:	e051      	b.n	8014a72 <msgsrv_tick+0xb6>
		mqf_t *q = qdef[i].from;
 80149ce:	4a40      	ldr	r2, [pc, #256]	; (8014ad0 <msgsrv_tick+0x114>)
 80149d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149d2:	00db      	lsls	r3, r3, #3
 80149d4:	4413      	add	r3, r2
 80149d6:	685b      	ldr	r3, [r3, #4]
 80149d8:	61fb      	str	r3, [r7, #28]

		itm_debug2(DBG_MSG, "mlen1",i, mqf_len(q));
 80149da:	69f8      	ldr	r0, [r7, #28]
 80149dc:	f001 fe56 	bl	801668c <mqf_len>
 80149e0:	4603      	mov	r3, r0
 80149e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80149e4:	493b      	ldr	r1, [pc, #236]	; (8014ad4 <msgsrv_tick+0x118>)
 80149e6:	2002      	movs	r0, #2
 80149e8:	f7ff ff06 	bl	80147f8 <itm_debug2>
		itm_debug3(DBG_MSG, "mth1 ", i, q->head, q->tail);
 80149ec:	69fb      	ldr	r3, [r7, #28]
 80149ee:	881b      	ldrh	r3, [r3, #0]
 80149f0:	b29b      	uxth	r3, r3
 80149f2:	461a      	mov	r2, r3
 80149f4:	69fb      	ldr	r3, [r7, #28]
 80149f6:	885b      	ldrh	r3, [r3, #2]
 80149f8:	b29b      	uxth	r3, r3
 80149fa:	9300      	str	r3, [sp, #0]
 80149fc:	4613      	mov	r3, r2
 80149fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a00:	4935      	ldr	r1, [pc, #212]	; (8014ad8 <msgsrv_tick+0x11c>)
 8014a02:	2002      	movs	r0, #2
 8014a04:	f7ff ff14 	bl	8014830 <itm_debug3>
		for (;;) {
				msg_64_t m;
				int rc = mqf_read(q, &m);
 8014a08:	f107 0310 	add.w	r3, r7, #16
 8014a0c:	4619      	mov	r1, r3
 8014a0e:	69f8      	ldr	r0, [r7, #28]
 8014a10:	f001 ff12 	bl	8016838 <mqf_read>
 8014a14:	61b8      	str	r0, [r7, #24]
				if (rc) break;
 8014a16:	69bb      	ldr	r3, [r7, #24]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d01a      	beq.n	8014a52 <msgsrv_tick+0x96>
				if (i==5) {
					itm_debug1(DBG_MSG, "from ctrl", m.cmd);
				}
				dispatch_m64(&m, i);
			}
		itm_debug2(DBG_MSG, "mlen2",i, mqf_len(q));
 8014a1c:	69f8      	ldr	r0, [r7, #28]
 8014a1e:	f001 fe35 	bl	801668c <mqf_len>
 8014a22:	4603      	mov	r3, r0
 8014a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a26:	492d      	ldr	r1, [pc, #180]	; (8014adc <msgsrv_tick+0x120>)
 8014a28:	2002      	movs	r0, #2
 8014a2a:	f7ff fee5 	bl	80147f8 <itm_debug2>
		itm_debug3(DBG_MSG, "mth2 ", i, q->head, q->tail);
 8014a2e:	69fb      	ldr	r3, [r7, #28]
 8014a30:	881b      	ldrh	r3, [r3, #0]
 8014a32:	b29b      	uxth	r3, r3
 8014a34:	461a      	mov	r2, r3
 8014a36:	69fb      	ldr	r3, [r7, #28]
 8014a38:	885b      	ldrh	r3, [r3, #2]
 8014a3a:	b29b      	uxth	r3, r3
 8014a3c:	9300      	str	r3, [sp, #0]
 8014a3e:	4613      	mov	r3, r2
 8014a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a42:	4927      	ldr	r1, [pc, #156]	; (8014ae0 <msgsrv_tick+0x124>)
 8014a44:	2002      	movs	r0, #2
 8014a46:	f7ff fef3 	bl	8014830 <itm_debug3>
	for (int i=0; i<NQDEF; i++) {
 8014a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a4c:	3301      	adds	r3, #1
 8014a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8014a50:	e00f      	b.n	8014a72 <msgsrv_tick+0xb6>
				if (i==5) {
 8014a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a54:	2b05      	cmp	r3, #5
 8014a56:	d105      	bne.n	8014a64 <msgsrv_tick+0xa8>
					itm_debug1(DBG_MSG, "from ctrl", m.cmd);
 8014a58:	7cbb      	ldrb	r3, [r7, #18]
 8014a5a:	461a      	mov	r2, r3
 8014a5c:	4921      	ldr	r1, [pc, #132]	; (8014ae4 <msgsrv_tick+0x128>)
 8014a5e:	2002      	movs	r0, #2
 8014a60:	f7ff feb0 	bl	80147c4 <itm_debug1>
				dispatch_m64(&m, i);
 8014a64:	f107 0310 	add.w	r3, r7, #16
 8014a68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	f7ff ff06 	bl	801487c <dispatch_m64>
		for (;;) {
 8014a70:	e7ca      	b.n	8014a08 <msgsrv_tick+0x4c>
	for (int i=0; i<NQDEF; i++) {
 8014a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a74:	2b06      	cmp	r3, #6
 8014a76:	ddaa      	ble.n	80149ce <msgsrv_tick+0x12>
	}
	if ((1)) {
		static uint32_t last=0;
		if (tick>=last+10000) {
 8014a78:	4b1b      	ldr	r3, [pc, #108]	; (8014ae8 <msgsrv_tick+0x12c>)
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8014a80:	3310      	adds	r3, #16
 8014a82:	68ba      	ldr	r2, [r7, #8]
 8014a84:	429a      	cmp	r2, r3
 8014a86:	d31e      	bcc.n	8014ac6 <msgsrv_tick+0x10a>
			for (int i=0; i<NQDEF; i++) {
 8014a88:	2300      	movs	r3, #0
 8014a8a:	623b      	str	r3, [r7, #32]
 8014a8c:	e015      	b.n	8014aba <msgsrv_tick+0xfe>
				dump_qusage(i, 0, qdef[i].from);
 8014a8e:	4a10      	ldr	r2, [pc, #64]	; (8014ad0 <msgsrv_tick+0x114>)
 8014a90:	6a3b      	ldr	r3, [r7, #32]
 8014a92:	00db      	lsls	r3, r3, #3
 8014a94:	4413      	add	r3, r2
 8014a96:	685b      	ldr	r3, [r3, #4]
 8014a98:	461a      	mov	r2, r3
 8014a9a:	2100      	movs	r1, #0
 8014a9c:	6a38      	ldr	r0, [r7, #32]
 8014a9e:	f7ff ff69 	bl	8014974 <dump_qusage>
				dump_qusage(i, 1, qdef[i].to);
 8014aa2:	4a0b      	ldr	r2, [pc, #44]	; (8014ad0 <msgsrv_tick+0x114>)
 8014aa4:	6a3b      	ldr	r3, [r7, #32]
 8014aa6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014aaa:	461a      	mov	r2, r3
 8014aac:	2101      	movs	r1, #1
 8014aae:	6a38      	ldr	r0, [r7, #32]
 8014ab0:	f7ff ff60 	bl	8014974 <dump_qusage>
			for (int i=0; i<NQDEF; i++) {
 8014ab4:	6a3b      	ldr	r3, [r7, #32]
 8014ab6:	3301      	adds	r3, #1
 8014ab8:	623b      	str	r3, [r7, #32]
 8014aba:	6a3b      	ldr	r3, [r7, #32]
 8014abc:	2b06      	cmp	r3, #6
 8014abe:	dde6      	ble.n	8014a8e <msgsrv_tick+0xd2>
			}
			last = tick;
 8014ac0:	4a09      	ldr	r2, [pc, #36]	; (8014ae8 <msgsrv_tick+0x12c>)
 8014ac2:	68bb      	ldr	r3, [r7, #8]
 8014ac4:	6013      	str	r3, [r2, #0]
		}
	}
}
 8014ac6:	bf00      	nop
 8014ac8:	3728      	adds	r7, #40	; 0x28
 8014aca:	46bd      	mov	sp, r7
 8014acc:	bd80      	pop	{r7, pc}
 8014ace:	bf00      	nop
 8014ad0:	08018b34 	.word	0x08018b34
 8014ad4:	080170c8 	.word	0x080170c8
 8014ad8:	080170d0 	.word	0x080170d0
 8014adc:	080170d8 	.word	0x080170d8
 8014ae0:	080170e0 	.word	0x080170e0
 8014ae4:	080170e8 	.word	0x080170e8
 8014ae8:	20005318 	.word	0x20005318

08014aec <dump_msg>:


void dump_msg(mqf_t *mq, int n)
{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b086      	sub	sp, #24
 8014af0:	af02      	add	r7, sp, #8
 8014af2:	6078      	str	r0, [r7, #4]
 8014af4:	6039      	str	r1, [r7, #0]
	int i = ( n + mq->tail ) % mq->num;
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	885b      	ldrh	r3, [r3, #2]
 8014afa:	b29b      	uxth	r3, r3
 8014afc:	461a      	mov	r2, r3
 8014afe:	683b      	ldr	r3, [r7, #0]
 8014b00:	4413      	add	r3, r2
 8014b02:	687a      	ldr	r2, [r7, #4]
 8014b04:	7952      	ldrb	r2, [r2, #5]
 8014b06:	fb93 f1f2 	sdiv	r1, r3, r2
 8014b0a:	fb02 f201 	mul.w	r2, r2, r1
 8014b0e:	1a9b      	subs	r3, r3, r2
 8014b10:	60fb      	str	r3, [r7, #12]
	msg_64_t *msg = (msg_64_t *) &(mq->msgbuf[i*mq->msgsiz]);
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	689b      	ldr	r3, [r3, #8]
 8014b16:	687a      	ldr	r2, [r7, #4]
 8014b18:	7912      	ldrb	r2, [r2, #4]
 8014b1a:	4611      	mov	r1, r2
 8014b1c:	68fa      	ldr	r2, [r7, #12]
 8014b1e:	fb02 f201 	mul.w	r2, r2, r1
 8014b22:	4413      	add	r3, r2
 8014b24:	60bb      	str	r3, [r7, #8]
	itm_debug3(DBG_ERR, "q", i, msg->cmd, msg->from);
 8014b26:	68bb      	ldr	r3, [r7, #8]
 8014b28:	789b      	ldrb	r3, [r3, #2]
 8014b2a:	461a      	mov	r2, r3
 8014b2c:	68bb      	ldr	r3, [r7, #8]
 8014b2e:	785b      	ldrb	r3, [r3, #1]
 8014b30:	9300      	str	r3, [sp, #0]
 8014b32:	4613      	mov	r3, r2
 8014b34:	68fa      	ldr	r2, [r7, #12]
 8014b36:	4904      	ldr	r1, [pc, #16]	; (8014b48 <dump_msg+0x5c>)
 8014b38:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8014b3c:	f7ff fe78 	bl	8014830 <itm_debug3>
}
 8014b40:	bf00      	nop
 8014b42:	3710      	adds	r7, #16
 8014b44:	46bd      	mov	sp, r7
 8014b46:	bd80      	pop	{r7, pc}
 8014b48:	080170f4 	.word	0x080170f4

08014b4c <inertia_value>:
{
	vars->target = v;
}

int16_t inertia_value(const inertia_config_t *config, inertia_vars_t *vars, uint16_t elapsed_ticks, int *pchanged)
{
 8014b4c:	b480      	push	{r7}
 8014b4e:	b08b      	sub	sp, #44	; 0x2c
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	60f8      	str	r0, [r7, #12]
 8014b54:	60b9      	str	r1, [r7, #8]
 8014b56:	603b      	str	r3, [r7, #0]
 8014b58:	4613      	mov	r3, r2
 8014b5a:	80fb      	strh	r3, [r7, #6]
	int st =  SIGNOF(vars->target);
 8014b5c:	68bb      	ldr	r3, [r7, #8]
 8014b5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	da02      	bge.n	8014b6c <inertia_value+0x20>
 8014b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014b6a:	e000      	b.n	8014b6e <inertia_value+0x22>
 8014b6c:	2301      	movs	r3, #1
 8014b6e:	623b      	str	r3, [r7, #32]
	int sc =  SIGNOF(vars->cur);
 8014b70:	68bb      	ldr	r3, [r7, #8]
 8014b72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	da02      	bge.n	8014b80 <inertia_value+0x34>
 8014b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014b7e:	e000      	b.n	8014b82 <inertia_value+0x36>
 8014b80:	2301      	movs	r3, #1
 8014b82:	61fb      	str	r3, [r7, #28]
	int inc;

    if (pchanged) *pchanged = 0;
 8014b84:	683b      	ldr	r3, [r7, #0]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d002      	beq.n	8014b90 <inertia_value+0x44>
 8014b8a:	683b      	ldr	r3, [r7, #0]
 8014b8c:	2200      	movs	r2, #0
 8014b8e:	601a      	str	r2, [r3, #0]
    if (vars->target == vars->cur/10) return vars->target;
 8014b90:	68bb      	ldr	r3, [r7, #8]
 8014b92:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014b96:	68bb      	ldr	r3, [r7, #8]
 8014b98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014b9c:	496f      	ldr	r1, [pc, #444]	; (8014d5c <inertia_value+0x210>)
 8014b9e:	fb81 0103 	smull	r0, r1, r1, r3
 8014ba2:	1089      	asrs	r1, r1, #2
 8014ba4:	17db      	asrs	r3, r3, #31
 8014ba6:	1acb      	subs	r3, r1, r3
 8014ba8:	b21b      	sxth	r3, r3
 8014baa:	429a      	cmp	r2, r3
 8014bac:	d103      	bne.n	8014bb6 <inertia_value+0x6a>
 8014bae:	68bb      	ldr	r3, [r7, #8]
 8014bb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014bb4:	e0cb      	b.n	8014d4e <inertia_value+0x202>
    //debug_info(0, "INER", vars->target, vars->cur);


	if (st*sc >= 0) {
 8014bb6:	6a3b      	ldr	r3, [r7, #32]
 8014bb8:	69fa      	ldr	r2, [r7, #28]
 8014bba:	fb02 f303 	mul.w	r3, r2, r3
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	db6c      	blt.n	8014c9c <inertia_value+0x150>
		// same direction
		if (abs(vars->target*10)>abs(vars->cur)) {
 8014bc2:	68bb      	ldr	r3, [r7, #8]
 8014bc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014bc8:	461a      	mov	r2, r3
 8014bca:	4613      	mov	r3, r2
 8014bcc:	009b      	lsls	r3, r3, #2
 8014bce:	4413      	add	r3, r2
 8014bd0:	005b      	lsls	r3, r3, #1
 8014bd2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8014bd6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8014bda:	68bb      	ldr	r3, [r7, #8]
 8014bdc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	bfb8      	it	lt
 8014be4:	425b      	neglt	r3, r3
 8014be6:	429a      	cmp	r2, r3
 8014be8:	dd2b      	ble.n	8014c42 <inertia_value+0xf6>
			// acceleration
			inc = config->acc * elapsed_ticks / 1000;
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014bf0:	461a      	mov	r2, r3
 8014bf2:	88fb      	ldrh	r3, [r7, #6]
 8014bf4:	fb03 f302 	mul.w	r3, r3, r2
 8014bf8:	4a59      	ldr	r2, [pc, #356]	; (8014d60 <inertia_value+0x214>)
 8014bfa:	fb82 1203 	smull	r1, r2, r2, r3
 8014bfe:	1192      	asrs	r2, r2, #6
 8014c00:	17db      	asrs	r3, r3, #31
 8014c02:	1ad3      	subs	r3, r2, r3
 8014c04:	627b      	str	r3, [r7, #36]	; 0x24
			inc = MIN(inc, abs(vars->target*10)-abs(vars->cur));
 8014c06:	68bb      	ldr	r3, [r7, #8]
 8014c08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014c0c:	461a      	mov	r2, r3
 8014c0e:	4613      	mov	r3, r2
 8014c10:	009b      	lsls	r3, r3, #2
 8014c12:	4413      	add	r3, r2
 8014c14:	005b      	lsls	r3, r3, #1
 8014c16:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8014c1a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8014c1e:	68bb      	ldr	r3, [r7, #8]
 8014c20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	bfb8      	it	lt
 8014c28:	425b      	neglt	r3, r3
 8014c2a:	1ad3      	subs	r3, r2, r3
 8014c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c2e:	4293      	cmp	r3, r2
 8014c30:	bfa8      	it	ge
 8014c32:	4613      	movge	r3, r2
 8014c34:	627b      	str	r3, [r7, #36]	; 0x24
			inc = sc * inc;
 8014c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c38:	69fa      	ldr	r2, [r7, #28]
 8014c3a:	fb02 f303 	mul.w	r3, r2, r3
 8014c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8014c40:	e055      	b.n	8014cee <inertia_value+0x1a2>
		} else {
			// deceleration
			inc = config->dec * elapsed_ticks / 1000;
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014c48:	461a      	mov	r2, r3
 8014c4a:	88fb      	ldrh	r3, [r7, #6]
 8014c4c:	fb03 f302 	mul.w	r3, r3, r2
 8014c50:	4a43      	ldr	r2, [pc, #268]	; (8014d60 <inertia_value+0x214>)
 8014c52:	fb82 1203 	smull	r1, r2, r2, r3
 8014c56:	1192      	asrs	r2, r2, #6
 8014c58:	17db      	asrs	r3, r3, #31
 8014c5a:	1ad3      	subs	r3, r2, r3
 8014c5c:	627b      	str	r3, [r7, #36]	; 0x24
			inc = MIN(inc, -abs(vars->target*10)+abs(vars->cur));
 8014c5e:	68bb      	ldr	r3, [r7, #8]
 8014c60:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014c64:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8014c68:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8014c6c:	68bb      	ldr	r3, [r7, #8]
 8014c6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014c72:	4619      	mov	r1, r3
 8014c74:	460b      	mov	r3, r1
 8014c76:	009b      	lsls	r3, r3, #2
 8014c78:	440b      	add	r3, r1
 8014c7a:	005b      	lsls	r3, r3, #1
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	bfb8      	it	lt
 8014c80:	425b      	neglt	r3, r3
 8014c82:	1ad3      	subs	r3, r2, r3
 8014c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c86:	4293      	cmp	r3, r2
 8014c88:	bfa8      	it	ge
 8014c8a:	4613      	movge	r3, r2
 8014c8c:	627b      	str	r3, [r7, #36]	; 0x24
			inc = -sc * inc;
 8014c8e:	69fb      	ldr	r3, [r7, #28]
 8014c90:	425a      	negs	r2, r3
 8014c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c94:	fb02 f303 	mul.w	r3, r2, r3
 8014c98:	627b      	str	r3, [r7, #36]	; 0x24
 8014c9a:	e028      	b.n	8014cee <inertia_value+0x1a2>
		}
	} else {
		// dir change
		inc = config->dec * elapsed_ticks / 1000;
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014ca2:	461a      	mov	r2, r3
 8014ca4:	88fb      	ldrh	r3, [r7, #6]
 8014ca6:	fb03 f302 	mul.w	r3, r3, r2
 8014caa:	4a2d      	ldr	r2, [pc, #180]	; (8014d60 <inertia_value+0x214>)
 8014cac:	fb82 1203 	smull	r1, r2, r2, r3
 8014cb0:	1192      	asrs	r2, r2, #6
 8014cb2:	17db      	asrs	r3, r3, #31
 8014cb4:	1ad3      	subs	r3, r2, r3
 8014cb6:	627b      	str	r3, [r7, #36]	; 0x24
        inc = MIN(inc, abs(vars->target*10-vars->cur));
 8014cb8:	68bb      	ldr	r3, [r7, #8]
 8014cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014cbe:	461a      	mov	r2, r3
 8014cc0:	4613      	mov	r3, r2
 8014cc2:	009b      	lsls	r3, r3, #2
 8014cc4:	4413      	add	r3, r2
 8014cc6:	005b      	lsls	r3, r3, #1
 8014cc8:	461a      	mov	r2, r3
 8014cca:	68bb      	ldr	r3, [r7, #8]
 8014ccc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014cd0:	1ad3      	subs	r3, r2, r3
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	bfb8      	it	lt
 8014cd6:	425b      	neglt	r3, r3
 8014cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014cda:	4293      	cmp	r3, r2
 8014cdc:	bfa8      	it	ge
 8014cde:	4613      	movge	r3, r2
 8014ce0:	627b      	str	r3, [r7, #36]	; 0x24
        inc = -1 * sc * inc;
 8014ce2:	69fb      	ldr	r3, [r7, #28]
 8014ce4:	425a      	negs	r2, r3
 8014ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ce8:	fb02 f303 	mul.w	r3, r2, r3
 8014cec:	627b      	str	r3, [r7, #36]	; 0x24
	}
	int vold = vars->cur/10;
 8014cee:	68bb      	ldr	r3, [r7, #8]
 8014cf0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014cf4:	4a19      	ldr	r2, [pc, #100]	; (8014d5c <inertia_value+0x210>)
 8014cf6:	fb82 1203 	smull	r1, r2, r2, r3
 8014cfa:	1092      	asrs	r2, r2, #2
 8014cfc:	17db      	asrs	r3, r3, #31
 8014cfe:	1ad3      	subs	r3, r2, r3
 8014d00:	b21b      	sxth	r3, r3
 8014d02:	61bb      	str	r3, [r7, #24]
	vars->cur += inc;
 8014d04:	68bb      	ldr	r3, [r7, #8]
 8014d06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014d0a:	b29a      	uxth	r2, r3
 8014d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d0e:	b29b      	uxth	r3, r3
 8014d10:	4413      	add	r3, r2
 8014d12:	b29b      	uxth	r3, r3
 8014d14:	b21a      	sxth	r2, r3
 8014d16:	68bb      	ldr	r3, [r7, #8]
 8014d18:	805a      	strh	r2, [r3, #2]
	int vnew = vars->cur/10;
 8014d1a:	68bb      	ldr	r3, [r7, #8]
 8014d1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8014d20:	4a0e      	ldr	r2, [pc, #56]	; (8014d5c <inertia_value+0x210>)
 8014d22:	fb82 1203 	smull	r1, r2, r2, r3
 8014d26:	1092      	asrs	r2, r2, #2
 8014d28:	17db      	asrs	r3, r3, #31
 8014d2a:	1ad3      	subs	r3, r2, r3
 8014d2c:	b21b      	sxth	r3, r3
 8014d2e:	617b      	str	r3, [r7, #20]
    if (pchanged) *pchanged = (vnew==vold) ? 0 : 1;
 8014d30:	683b      	ldr	r3, [r7, #0]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d009      	beq.n	8014d4a <inertia_value+0x1fe>
 8014d36:	697a      	ldr	r2, [r7, #20]
 8014d38:	69bb      	ldr	r3, [r7, #24]
 8014d3a:	429a      	cmp	r2, r3
 8014d3c:	bf14      	ite	ne
 8014d3e:	2301      	movne	r3, #1
 8014d40:	2300      	moveq	r3, #0
 8014d42:	b2db      	uxtb	r3, r3
 8014d44:	461a      	mov	r2, r3
 8014d46:	683b      	ldr	r3, [r7, #0]
 8014d48:	601a      	str	r2, [r3, #0]
    //debug_info(0, "INC/c", inc, vars->cur);
	return vnew;
 8014d4a:	697b      	ldr	r3, [r7, #20]
 8014d4c:	b21b      	sxth	r3, r3
}
 8014d4e:	4618      	mov	r0, r3
 8014d50:	372c      	adds	r7, #44	; 0x2c
 8014d52:	46bd      	mov	sp, r7
 8014d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d58:	4770      	bx	lr
 8014d5a:	bf00      	nop
 8014d5c:	66666667 	.word	0x66666667
 8014d60:	10624dd3 	.word	0x10624dd3

08014d64 <itm_debug1>:
{
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b086      	sub	sp, #24
 8014d68:	af02      	add	r7, sp, #8
 8014d6a:	60f8      	str	r0, [r7, #12]
 8014d6c:	60b9      	str	r1, [r7, #8]
 8014d6e:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8014d70:	4b08      	ldr	r3, [pc, #32]	; (8014d94 <itm_debug1+0x30>)
 8014d72:	681a      	ldr	r2, [r3, #0]
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	4013      	ands	r3, r2
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d007      	beq.n	8014d8c <itm_debug1+0x28>
 8014d7c:	2301      	movs	r3, #1
 8014d7e:	9300      	str	r3, [sp, #0]
 8014d80:	2300      	movs	r3, #0
 8014d82:	2200      	movs	r2, #0
 8014d84:	6879      	ldr	r1, [r7, #4]
 8014d86:	68b8      	ldr	r0, [r7, #8]
 8014d88:	f001 fbd6 	bl	8016538 <_itm_debug3>
}
 8014d8c:	bf00      	nop
 8014d8e:	3710      	adds	r7, #16
 8014d90:	46bd      	mov	sp, r7
 8014d92:	bd80      	pop	{r7, pc}
 8014d94:	20000538 	.word	0x20000538

08014d98 <itm_debug2>:
{
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	b086      	sub	sp, #24
 8014d9c:	af02      	add	r7, sp, #8
 8014d9e:	60f8      	str	r0, [r7, #12]
 8014da0:	60b9      	str	r1, [r7, #8]
 8014da2:	607a      	str	r2, [r7, #4]
 8014da4:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8014da6:	4b09      	ldr	r3, [pc, #36]	; (8014dcc <itm_debug2+0x34>)
 8014da8:	681a      	ldr	r2, [r3, #0]
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	4013      	ands	r3, r2
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d007      	beq.n	8014dc2 <itm_debug2+0x2a>
 8014db2:	2302      	movs	r3, #2
 8014db4:	9300      	str	r3, [sp, #0]
 8014db6:	2300      	movs	r3, #0
 8014db8:	683a      	ldr	r2, [r7, #0]
 8014dba:	6879      	ldr	r1, [r7, #4]
 8014dbc:	68b8      	ldr	r0, [r7, #8]
 8014dbe:	f001 fbbb 	bl	8016538 <_itm_debug3>
}
 8014dc2:	bf00      	nop
 8014dc4:	3710      	adds	r7, #16
 8014dc6:	46bd      	mov	sp, r7
 8014dc8:	bd80      	pop	{r7, pc}
 8014dca:	bf00      	nop
 8014dcc:	20000538 	.word	0x20000538

08014dd0 <itm_debug3>:
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b086      	sub	sp, #24
 8014dd4:	af02      	add	r7, sp, #8
 8014dd6:	60f8      	str	r0, [r7, #12]
 8014dd8:	60b9      	str	r1, [r7, #8]
 8014dda:	607a      	str	r2, [r7, #4]
 8014ddc:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 8014dde:	4b09      	ldr	r3, [pc, #36]	; (8014e04 <itm_debug3+0x34>)
 8014de0:	681a      	ldr	r2, [r3, #0]
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	4013      	ands	r3, r2
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d007      	beq.n	8014dfa <itm_debug3+0x2a>
 8014dea:	2303      	movs	r3, #3
 8014dec:	9300      	str	r3, [sp, #0]
 8014dee:	69bb      	ldr	r3, [r7, #24]
 8014df0:	683a      	ldr	r2, [r7, #0]
 8014df2:	6879      	ldr	r1, [r7, #4]
 8014df4:	68b8      	ldr	r0, [r7, #8]
 8014df6:	f001 fb9f 	bl	8016538 <_itm_debug3>
}
 8014dfa:	bf00      	nop
 8014dfc:	3710      	adds	r7, #16
 8014dfe:	46bd      	mov	sp, r7
 8014e00:	bd80      	pop	{r7, pc}
 8014e02:	bf00      	nop
 8014e04:	20000538 	.word	0x20000538

08014e08 <pidctl_reset>:
#include <memory.h>
#include "pidctl.h"
#include "misc.h"

void pidctl_reset(const pidctl_config_t *c, pidctl_vars_t *v)
{
 8014e08:	b480      	push	{r7}
 8014e0a:	b083      	sub	sp, #12
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	6078      	str	r0, [r7, #4]
 8014e10:	6039      	str	r1, [r7, #0]
    v->has_last = 0;
 8014e12:	683a      	ldr	r2, [r7, #0]
 8014e14:	7b13      	ldrb	r3, [r2, #12]
 8014e16:	f36f 0300 	bfc	r3, #0, #1
 8014e1a:	7313      	strb	r3, [r2, #12]
	v->last_err = 0;
 8014e1c:	683b      	ldr	r3, [r7, #0]
 8014e1e:	2200      	movs	r2, #0
 8014e20:	601a      	str	r2, [r3, #0]
	v->sume     = 0;
 8014e22:	683b      	ldr	r3, [r7, #0]
 8014e24:	2200      	movs	r2, #0
 8014e26:	605a      	str	r2, [r3, #4]
	v->target_v = 0;
 8014e28:	683b      	ldr	r3, [r7, #0]
 8014e2a:	2200      	movs	r2, #0
 8014e2c:	609a      	str	r2, [r3, #8]
	v->stopped = 1;
 8014e2e:	683a      	ldr	r2, [r7, #0]
 8014e30:	7b13      	ldrb	r3, [r2, #12]
 8014e32:	f043 0302 	orr.w	r3, r3, #2
 8014e36:	7313      	strb	r3, [r2, #12]
	v->has_last = 0;
 8014e38:	683a      	ldr	r2, [r7, #0]
 8014e3a:	7b13      	ldrb	r3, [r2, #12]
 8014e3c:	f36f 0300 	bfc	r3, #0, #1
 8014e40:	7313      	strb	r3, [r2, #12]
}
 8014e42:	bf00      	nop
 8014e44:	370c      	adds	r7, #12
 8014e46:	46bd      	mov	sp, r7
 8014e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e4c:	4770      	bx	lr
	...

08014e50 <pidctl_set_target>:

void pidctl_set_target(const pidctl_config_t *c, pidctl_vars_t *v, int32_t val)
{
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b084      	sub	sp, #16
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	60f8      	str	r0, [r7, #12]
 8014e58:	60b9      	str	r1, [r7, #8]
 8014e5a:	607a      	str	r2, [r7, #4]
	if ((0)) pidctl_reset(c,v);
    if ((0)) v->sume = val;
    itm_debug1(DBG_PID, "pid trg", val);
 8014e5c:	687a      	ldr	r2, [r7, #4]
 8014e5e:	4905      	ldr	r1, [pc, #20]	; (8014e74 <pidctl_set_target+0x24>)
 8014e60:	2004      	movs	r0, #4
 8014e62:	f7ff ff7f 	bl	8014d64 <itm_debug1>
	v->target_v = val;
 8014e66:	68bb      	ldr	r3, [r7, #8]
 8014e68:	687a      	ldr	r2, [r7, #4]
 8014e6a:	609a      	str	r2, [r3, #8]
}
 8014e6c:	bf00      	nop
 8014e6e:	3710      	adds	r7, #16
 8014e70:	46bd      	mov	sp, r7
 8014e72:	bd80      	pop	{r7, pc}
 8014e74:	080170f8 	.word	0x080170f8

08014e78 <pidctl_value>:

#define MAX_I (25000)

int32_t pidctl_value(const pidctl_config_t *c, pidctl_vars_t *v, int32_t cur_v, uint32_t dt)
{
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	b08a      	sub	sp, #40	; 0x28
 8014e7c:	af02      	add	r7, sp, #8
 8014e7e:	60f8      	str	r0, [r7, #12]
 8014e80:	60b9      	str	r1, [r7, #8]
 8014e82:	607a      	str	r2, [r7, #4]
 8014e84:	603b      	str	r3, [r7, #0]
	// cuv in native BEMF value
    if (!dt) dt = 1;
 8014e86:	683b      	ldr	r3, [r7, #0]
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d101      	bne.n	8014e90 <pidctl_value+0x18>
 8014e8c:	2301      	movs	r3, #1
 8014e8e:	603b      	str	r3, [r7, #0]
    if (dt>100) dt=100;
 8014e90:	683b      	ldr	r3, [r7, #0]
 8014e92:	2b64      	cmp	r3, #100	; 0x64
 8014e94:	d901      	bls.n	8014e9a <pidctl_value+0x22>
 8014e96:	2364      	movs	r3, #100	; 0x64
 8014e98:	603b      	str	r3, [r7, #0]
	int32_t err = v->target_v - cur_v;
 8014e9a:	68bb      	ldr	r3, [r7, #8]
 8014e9c:	689a      	ldr	r2, [r3, #8]
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	1ad3      	subs	r3, r2, r3
 8014ea2:	61fb      	str	r3, [r7, #28]
    if (err> 2*MAX_PID_VALUE) err =  2*MAX_PID_VALUE;
 8014ea4:	69fb      	ldr	r3, [r7, #28]
 8014ea6:	f5b3 7f0c 	cmp.w	r3, #560	; 0x230
 8014eaa:	dd02      	ble.n	8014eb2 <pidctl_value+0x3a>
 8014eac:	f44f 730c 	mov.w	r3, #560	; 0x230
 8014eb0:	61fb      	str	r3, [r7, #28]
    if (err<-2*MAX_PID_VALUE) err = -2*MAX_PID_VALUE;
 8014eb2:	69fb      	ldr	r3, [r7, #28]
 8014eb4:	f513 7f0c 	cmn.w	r3, #560	; 0x230
 8014eb8:	da01      	bge.n	8014ebe <pidctl_value+0x46>
 8014eba:	4b3c      	ldr	r3, [pc, #240]	; (8014fac <pidctl_value+0x134>)
 8014ebc:	61fb      	str	r3, [r7, #28]

    int32_t dv = (v->has_last) ? 1000*(err - v->last_err)/((int32_t)dt) : 0; //XXX
 8014ebe:	68bb      	ldr	r3, [r7, #8]
 8014ec0:	7b1b      	ldrb	r3, [r3, #12]
 8014ec2:	f003 0301 	and.w	r3, r3, #1
 8014ec6:	b2db      	uxtb	r3, r3
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d00b      	beq.n	8014ee4 <pidctl_value+0x6c>
 8014ecc:	68bb      	ldr	r3, [r7, #8]
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	69fa      	ldr	r2, [r7, #28]
 8014ed2:	1ad3      	subs	r3, r2, r3
 8014ed4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014ed8:	fb02 f203 	mul.w	r2, r2, r3
 8014edc:	683b      	ldr	r3, [r7, #0]
 8014ede:	fb92 f3f3 	sdiv	r3, r2, r3
 8014ee2:	e000      	b.n	8014ee6 <pidctl_value+0x6e>
 8014ee4:	2300      	movs	r3, #0
 8014ee6:	61bb      	str	r3, [r7, #24]
	v->last_err = err;
 8014ee8:	68bb      	ldr	r3, [r7, #8]
 8014eea:	69fa      	ldr	r2, [r7, #28]
 8014eec:	601a      	str	r2, [r3, #0]
    v->has_last = 1;
 8014eee:	68ba      	ldr	r2, [r7, #8]
 8014ef0:	7b13      	ldrb	r3, [r2, #12]
 8014ef2:	f043 0301 	orr.w	r3, r3, #1
 8014ef6:	7313      	strb	r3, [r2, #12]
	if ((1)) v->sume += err*dt;
 8014ef8:	68bb      	ldr	r3, [r7, #8]
 8014efa:	685b      	ldr	r3, [r3, #4]
 8014efc:	4619      	mov	r1, r3
 8014efe:	69fb      	ldr	r3, [r7, #28]
 8014f00:	683a      	ldr	r2, [r7, #0]
 8014f02:	fb02 f303 	mul.w	r3, r2, r3
 8014f06:	440b      	add	r3, r1
 8014f08:	461a      	mov	r2, r3
 8014f0a:	68bb      	ldr	r3, [r7, #8]
 8014f0c:	605a      	str	r2, [r3, #4]
    else     v->sume = v->sume*.99 + err*dt;
    if (v->sume>MAX_I) v->sume = MAX_I;
 8014f0e:	68bb      	ldr	r3, [r7, #8]
 8014f10:	685b      	ldr	r3, [r3, #4]
 8014f12:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8014f16:	4293      	cmp	r3, r2
 8014f18:	dd04      	ble.n	8014f24 <pidctl_value+0xac>
 8014f1a:	68bb      	ldr	r3, [r7, #8]
 8014f1c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8014f20:	605a      	str	r2, [r3, #4]
 8014f22:	e007      	b.n	8014f34 <pidctl_value+0xbc>
    else if (v->sume<-MAX_I) v->sume = -MAX_I;
 8014f24:	68bb      	ldr	r3, [r7, #8]
 8014f26:	685b      	ldr	r3, [r3, #4]
 8014f28:	4a21      	ldr	r2, [pc, #132]	; (8014fb0 <pidctl_value+0x138>)
 8014f2a:	4293      	cmp	r3, r2
 8014f2c:	da02      	bge.n	8014f34 <pidctl_value+0xbc>
 8014f2e:	68bb      	ldr	r3, [r7, #8]
 8014f30:	4a1f      	ldr	r2, [pc, #124]	; (8014fb0 <pidctl_value+0x138>)
 8014f32:	605a      	str	r2, [r3, #4]
	int32_t iv = v->sume / 100;
 8014f34:	68bb      	ldr	r3, [r7, #8]
 8014f36:	685b      	ldr	r3, [r3, #4]
 8014f38:	4a1e      	ldr	r2, [pc, #120]	; (8014fb4 <pidctl_value+0x13c>)
 8014f3a:	fb82 1203 	smull	r1, r2, r2, r3
 8014f3e:	1152      	asrs	r2, r2, #5
 8014f40:	17db      	asrs	r3, r3, #31
 8014f42:	1ad3      	subs	r3, r2, r3
 8014f44:	617b      	str	r3, [r7, #20]

	//debug_info('T', 0, "PID  ", err, iv, dv);
	itm_debug2(DBG_PID, "pid tc", v->target_v, cur_v);
 8014f46:	68bb      	ldr	r3, [r7, #8]
 8014f48:	689a      	ldr	r2, [r3, #8]
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	491a      	ldr	r1, [pc, #104]	; (8014fb8 <pidctl_value+0x140>)
 8014f4e:	2004      	movs	r0, #4
 8014f50:	f7ff ff22 	bl	8014d98 <itm_debug2>
    itm_debug3(DBG_PID, "pid edi", err, dv, v->sume);
 8014f54:	68bb      	ldr	r3, [r7, #8]
 8014f56:	685b      	ldr	r3, [r3, #4]
 8014f58:	9300      	str	r3, [sp, #0]
 8014f5a:	69bb      	ldr	r3, [r7, #24]
 8014f5c:	69fa      	ldr	r2, [r7, #28]
 8014f5e:	4917      	ldr	r1, [pc, #92]	; (8014fbc <pidctl_value+0x144>)
 8014f60:	2004      	movs	r0, #4
 8014f62:	f7ff ff35 	bl	8014dd0 <itm_debug3>

	int32_t r = c->kP * err + (c->kD * dv)/1000 + c->kI * iv;
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	69fa      	ldr	r2, [r7, #28]
 8014f6c:	fb02 f203 	mul.w	r2, r2, r3
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	689b      	ldr	r3, [r3, #8]
 8014f74:	69b9      	ldr	r1, [r7, #24]
 8014f76:	fb01 f303 	mul.w	r3, r1, r3
 8014f7a:	4911      	ldr	r1, [pc, #68]	; (8014fc0 <pidctl_value+0x148>)
 8014f7c:	fb81 0103 	smull	r0, r1, r1, r3
 8014f80:	1189      	asrs	r1, r1, #6
 8014f82:	17db      	asrs	r3, r3, #31
 8014f84:	1acb      	subs	r3, r1, r3
 8014f86:	441a      	add	r2, r3
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	685b      	ldr	r3, [r3, #4]
 8014f8c:	6979      	ldr	r1, [r7, #20]
 8014f8e:	fb01 f303 	mul.w	r3, r1, r3
 8014f92:	4413      	add	r3, r2
 8014f94:	613b      	str	r3, [r7, #16]
	//debug_info('T', 0, "PID*k",  c->kP * err, c->kI * iv, (c->kD * dv)/1000);

	return r/1000;
 8014f96:	693b      	ldr	r3, [r7, #16]
 8014f98:	4a09      	ldr	r2, [pc, #36]	; (8014fc0 <pidctl_value+0x148>)
 8014f9a:	fb82 1203 	smull	r1, r2, r2, r3
 8014f9e:	1192      	asrs	r2, r2, #6
 8014fa0:	17db      	asrs	r3, r3, #31
 8014fa2:	1ad3      	subs	r3, r2, r3
}
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	3720      	adds	r7, #32
 8014fa8:	46bd      	mov	sp, r7
 8014faa:	bd80      	pop	{r7, pc}
 8014fac:	fffffdd0 	.word	0xfffffdd0
 8014fb0:	ffff9e58 	.word	0xffff9e58
 8014fb4:	51eb851f 	.word	0x51eb851f
 8014fb8:	08017100 	.word	0x08017100
 8014fbc:	08017108 	.word	0x08017108
 8014fc0:	10624dd3 	.word	0x10624dd3

08014fc4 <itm_debug1>:
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b086      	sub	sp, #24
 8014fc8:	af02      	add	r7, sp, #8
 8014fca:	60f8      	str	r0, [r7, #12]
 8014fcc:	60b9      	str	r1, [r7, #8]
 8014fce:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8014fd0:	4b08      	ldr	r3, [pc, #32]	; (8014ff4 <itm_debug1+0x30>)
 8014fd2:	681a      	ldr	r2, [r3, #0]
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	4013      	ands	r3, r2
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d007      	beq.n	8014fec <itm_debug1+0x28>
 8014fdc:	2301      	movs	r3, #1
 8014fde:	9300      	str	r3, [sp, #0]
 8014fe0:	2300      	movs	r3, #0
 8014fe2:	2200      	movs	r2, #0
 8014fe4:	6879      	ldr	r1, [r7, #4]
 8014fe6:	68b8      	ldr	r0, [r7, #8]
 8014fe8:	f001 faa6 	bl	8016538 <_itm_debug3>
}
 8014fec:	bf00      	nop
 8014fee:	3710      	adds	r7, #16
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	bd80      	pop	{r7, pc}
 8014ff4:	20000538 	.word	0x20000538

08014ff8 <itm_debug2>:
{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	b086      	sub	sp, #24
 8014ffc:	af02      	add	r7, sp, #8
 8014ffe:	60f8      	str	r0, [r7, #12]
 8015000:	60b9      	str	r1, [r7, #8]
 8015002:	607a      	str	r2, [r7, #4]
 8015004:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8015006:	4b09      	ldr	r3, [pc, #36]	; (801502c <itm_debug2+0x34>)
 8015008:	681a      	ldr	r2, [r3, #0]
 801500a:	68fb      	ldr	r3, [r7, #12]
 801500c:	4013      	ands	r3, r2
 801500e:	2b00      	cmp	r3, #0
 8015010:	d007      	beq.n	8015022 <itm_debug2+0x2a>
 8015012:	2302      	movs	r3, #2
 8015014:	9300      	str	r3, [sp, #0]
 8015016:	2300      	movs	r3, #0
 8015018:	683a      	ldr	r2, [r7, #0]
 801501a:	6879      	ldr	r1, [r7, #4]
 801501c:	68b8      	ldr	r0, [r7, #8]
 801501e:	f001 fa8b 	bl	8016538 <_itm_debug3>
}
 8015022:	bf00      	nop
 8015024:	3710      	adds	r7, #16
 8015026:	46bd      	mov	sp, r7
 8015028:	bd80      	pop	{r7, pc}
 801502a:	bf00      	nop
 801502c:	20000538 	.word	0x20000538

08015030 <itm_debug3>:
{
 8015030:	b580      	push	{r7, lr}
 8015032:	b086      	sub	sp, #24
 8015034:	af02      	add	r7, sp, #8
 8015036:	60f8      	str	r0, [r7, #12]
 8015038:	60b9      	str	r1, [r7, #8]
 801503a:	607a      	str	r2, [r7, #4]
 801503c:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 801503e:	4b09      	ldr	r3, [pc, #36]	; (8015064 <itm_debug3+0x34>)
 8015040:	681a      	ldr	r2, [r3, #0]
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	4013      	ands	r3, r2
 8015046:	2b00      	cmp	r3, #0
 8015048:	d007      	beq.n	801505a <itm_debug3+0x2a>
 801504a:	2303      	movs	r3, #3
 801504c:	9300      	str	r3, [sp, #0]
 801504e:	69bb      	ldr	r3, [r7, #24]
 8015050:	683a      	ldr	r2, [r7, #0]
 8015052:	6879      	ldr	r1, [r7, #4]
 8015054:	68b8      	ldr	r0, [r7, #8]
 8015056:	f001 fa6f 	bl	8016538 <_itm_debug3>
}
 801505a:	bf00      	nop
 801505c:	3710      	adds	r7, #16
 801505e:	46bd      	mov	sp, r7
 8015060:	bd80      	pop	{r7, pc}
 8015062:	bf00      	nop
 8015064:	20000538 	.word	0x20000538

08015068 <train_error>:
{
 8015068:	b580      	push	{r7, lr}
 801506a:	b082      	sub	sp, #8
 801506c:	af00      	add	r7, sp, #0
 801506e:	6078      	str	r0, [r7, #4]
 8015070:	6039      	str	r1, [r7, #0]
	return trainctl_error('T', code, msg);
 8015072:	683a      	ldr	r2, [r7, #0]
 8015074:	6879      	ldr	r1, [r7, #4]
 8015076:	2054      	movs	r0, #84	; 0x54
 8015078:	f7fe fb28 	bl	80136cc <trainctl_error>
 801507c:	4603      	mov	r3, r0
}
 801507e:	4618      	mov	r0, r3
 8015080:	3708      	adds	r7, #8
 8015082:	46bd      	mov	sp, r7
 8015084:	bd80      	pop	{r7, pc}

08015086 <train_notif>:
{
 8015086:	b580      	push	{r7, lr}
 8015088:	b086      	sub	sp, #24
 801508a:	af02      	add	r7, sp, #8
 801508c:	60ba      	str	r2, [r7, #8]
 801508e:	607b      	str	r3, [r7, #4]
 8015090:	4603      	mov	r3, r0
 8015092:	73fb      	strb	r3, [r7, #15]
 8015094:	460b      	mov	r3, r1
 8015096:	73bb      	strb	r3, [r7, #14]
	trainctl_notif('T', train_idx, cmd, dta, dtalen);
 8015098:	7bba      	ldrb	r2, [r7, #14]
 801509a:	7bf9      	ldrb	r1, [r7, #15]
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	9300      	str	r3, [sp, #0]
 80150a0:	68bb      	ldr	r3, [r7, #8]
 80150a2:	2054      	movs	r0, #84	; 0x54
 80150a4:	f7ff f9ac 	bl	8014400 <trainctl_notif>
}
 80150a8:	bf00      	nop
 80150aa:	3710      	adds	r7, #16
 80150ac:	46bd      	mov	sp, r7
 80150ae:	bd80      	pop	{r7, pc}

080150b0 <debug_info>:
{
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b088      	sub	sp, #32
 80150b4:	af04      	add	r7, sp, #16
 80150b6:	60f8      	str	r0, [r7, #12]
 80150b8:	60b9      	str	r1, [r7, #8]
 80150ba:	607a      	str	r2, [r7, #4]
 80150bc:	603b      	str	r3, [r7, #0]
	trainctl_notif2(sel, num, 'D', msg, v1, v2, v3);
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	b2d8      	uxtb	r0, r3
 80150c2:	68bb      	ldr	r3, [r7, #8]
 80150c4:	b2d9      	uxtb	r1, r3
 80150c6:	69fb      	ldr	r3, [r7, #28]
 80150c8:	9302      	str	r3, [sp, #8]
 80150ca:	69bb      	ldr	r3, [r7, #24]
 80150cc:	9301      	str	r3, [sp, #4]
 80150ce:	683b      	ldr	r3, [r7, #0]
 80150d0:	9300      	str	r3, [sp, #0]
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	2244      	movs	r2, #68	; 0x44
 80150d6:	f7ff f9b7 	bl	8014448 <trainctl_notif2>
}
 80150da:	bf00      	nop
 80150dc:	3710      	adds	r7, #16
 80150de:	46bd      	mov	sp, r7
 80150e0:	bd80      	pop	{r7, pc}
	...

080150e4 <mqf_read_to_spdctl>:
#define CMD_BEMF_OFF		0x41

#define CMD_SETVPWM			0x01
#define CMD_STOP			0x02

LFMQUEUE_DEF_H(to_spdctl, msg_64_t)
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b082      	sub	sp, #8
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	6078      	str	r0, [r7, #4]
 80150ec:	6879      	ldr	r1, [r7, #4]
 80150ee:	4804      	ldr	r0, [pc, #16]	; (8015100 <mqf_read_to_spdctl+0x1c>)
 80150f0:	f001 fba2 	bl	8016838 <mqf_read>
 80150f4:	4603      	mov	r3, r0
 80150f6:	4618      	mov	r0, r3
 80150f8:	3708      	adds	r7, #8
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bd80      	pop	{r7, pc}
 80150fe:	bf00      	nop
 8015100:	200004b4 	.word	0x200004b4

08015104 <mqf_write_from_spdctl>:
LFMQUEUE_DEF_H(from_spdctl, msg_64_t)
 8015104:	b580      	push	{r7, lr}
 8015106:	b082      	sub	sp, #8
 8015108:	af00      	add	r7, sp, #0
 801510a:	6078      	str	r0, [r7, #4]
 801510c:	6879      	ldr	r1, [r7, #4]
 801510e:	4804      	ldr	r0, [pc, #16]	; (8015120 <mqf_write_from_spdctl+0x1c>)
 8015110:	f001 fb18 	bl	8016744 <mqf_write>
 8015114:	4603      	mov	r3, r0
 8015116:	4618      	mov	r0, r3
 8015118:	3708      	adds	r7, #8
 801511a:	46bd      	mov	sp, r7
 801511c:	bd80      	pop	{r7, pc}
 801511e:	bf00      	nop
 8015120:	200004c0 	.word	0x200004c0

08015124 <spdctl_reset>:

static void pose_check_trig(int numtrain, train_vars_t *tvars);


static void spdctl_reset(void)
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b082      	sub	sp, #8
 8015128:	af00      	add	r7, sp, #0
	memset(trspc_vars, 0, sizeof(trspc_vars));
 801512a:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 801512e:	2100      	movs	r1, #0
 8015130:	4811      	ldr	r0, [pc, #68]	; (8015178 <spdctl_reset+0x54>)
 8015132:	f001 fc22 	bl	801697a <memset>
	for (int  i = 0; i<NUM_TRAINS; i++) {
 8015136:	2300      	movs	r3, #0
 8015138:	607b      	str	r3, [r7, #4]
 801513a:	e016      	b.n	801516a <spdctl_reset+0x46>
		trspc_vars[i].C1 = 0xFF;
 801513c:	490e      	ldr	r1, [pc, #56]	; (8015178 <spdctl_reset+0x54>)
 801513e:	687a      	ldr	r2, [r7, #4]
 8015140:	4613      	mov	r3, r2
 8015142:	00db      	lsls	r3, r3, #3
 8015144:	1a9b      	subs	r3, r3, r2
 8015146:	00db      	lsls	r3, r3, #3
 8015148:	440b      	add	r3, r1
 801514a:	331c      	adds	r3, #28
 801514c:	22ff      	movs	r2, #255	; 0xff
 801514e:	701a      	strb	r2, [r3, #0]
		trspc_vars[i].C2 = 0xFF;
 8015150:	4909      	ldr	r1, [pc, #36]	; (8015178 <spdctl_reset+0x54>)
 8015152:	687a      	ldr	r2, [r7, #4]
 8015154:	4613      	mov	r3, r2
 8015156:	00db      	lsls	r3, r3, #3
 8015158:	1a9b      	subs	r3, r3, r2
 801515a:	00db      	lsls	r3, r3, #3
 801515c:	440b      	add	r3, r1
 801515e:	331d      	adds	r3, #29
 8015160:	22ff      	movs	r2, #255	; 0xff
 8015162:	701a      	strb	r2, [r3, #0]
	for (int  i = 0; i<NUM_TRAINS; i++) {
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	3301      	adds	r3, #1
 8015168:	607b      	str	r3, [r7, #4]
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	2b07      	cmp	r3, #7
 801516e:	dde5      	ble.n	801513c <spdctl_reset+0x18>
	}
}
 8015170:	bf00      	nop
 8015172:	3708      	adds	r7, #8
 8015174:	46bd      	mov	sp, r7
 8015176:	bd80      	pop	{r7, pc}
 8015178:	2000532c 	.word	0x2000532c

0801517c <spdctl_run_tick>:

static uint8_t test_mode = 0;
static uint8_t testerAddr;

void spdctl_run_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt)
{
 801517c:	b580      	push	{r7, lr}
 801517e:	b090      	sub	sp, #64	; 0x40
 8015180:	af02      	add	r7, sp, #8
 8015182:	60f8      	str	r0, [r7, #12]
 8015184:	60b9      	str	r1, [r7, #8]
 8015186:	607a      	str	r2, [r7, #4]
	train_tick_last_dt = dt;
 8015188:	4a92      	ldr	r2, [pc, #584]	; (80153d4 <spdctl_run_tick+0x258>)
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	6013      	str	r3, [r2, #0]
	train_ntick++;
 801518e:	4b92      	ldr	r3, [pc, #584]	; (80153d8 <spdctl_run_tick+0x25c>)
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	3301      	adds	r3, #1
 8015194:	4a90      	ldr	r2, [pc, #576]	; (80153d8 <spdctl_run_tick+0x25c>)
 8015196:	6013      	str	r3, [r2, #0]

	itm_debug1(DBG_SPDCTL ,"------- tk", notif_flags);
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	461a      	mov	r2, r3
 801519c:	498f      	ldr	r1, [pc, #572]	; (80153dc <spdctl_run_tick+0x260>)
 801519e:	2010      	movs	r0, #16
 80151a0:	f7ff ff10 	bl	8014fc4 <itm_debug1>
	static int first=1;
	if (first) {
 80151a4:	4b8e      	ldr	r3, [pc, #568]	; (80153e0 <spdctl_run_tick+0x264>)
 80151a6:	681b      	ldr	r3, [r3, #0]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d004      	beq.n	80151b6 <spdctl_run_tick+0x3a>
		first = 0;
 80151ac:	4b8c      	ldr	r3, [pc, #560]	; (80153e0 <spdctl_run_tick+0x264>)
 80151ae:	2200      	movs	r2, #0
 80151b0:	601a      	str	r2, [r3, #0]
		spdctl_reset();
 80151b2:	f7ff ffb7 	bl	8015124 <spdctl_reset>
       
	}
	/* process messages */
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_spdctl(&m);
 80151b6:	f107 0318 	add.w	r3, r7, #24
 80151ba:	4618      	mov	r0, r3
 80151bc:	f7ff ff92 	bl	80150e4 <mqf_read_to_spdctl>
 80151c0:	6338      	str	r0, [r7, #48]	; 0x30
		if (rc) break;
 80151c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d005      	beq.n	80151d4 <spdctl_run_tick+0x58>
                default:
                    break;
            }
        }
	}
	if (test_mode) return;
 80151c8:	4b86      	ldr	r3, [pc, #536]	; (80153e4 <spdctl_run_tick+0x268>)
 80151ca:	781b      	ldrb	r3, [r3, #0]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	f040 80fd 	bne.w	80153cc <spdctl_run_tick+0x250>
 80151d2:	e0ec      	b.n	80153ae <spdctl_run_tick+0x232>
        switch (m.cmd) {
 80151d4:	7ebb      	ldrb	r3, [r7, #26]
 80151d6:	2bfe      	cmp	r3, #254	; 0xfe
 80151d8:	d007      	beq.n	80151ea <spdctl_run_tick+0x6e>
 80151da:	2bff      	cmp	r3, #255	; 0xff
 80151dc:	d002      	beq.n	80151e4 <spdctl_run_tick+0x68>
 80151de:	2bfc      	cmp	r3, #252	; 0xfc
 80151e0:	d006      	beq.n	80151f0 <spdctl_run_tick+0x74>
 80151e2:	e00d      	b.n	8015200 <spdctl_run_tick+0x84>
            test_mode = 0; // FALLTHRU
 80151e4:	4b7f      	ldr	r3, [pc, #508]	; (80153e4 <spdctl_run_tick+0x268>)
 80151e6:	2200      	movs	r2, #0
 80151e8:	701a      	strb	r2, [r3, #0]
            spdctl_reset();
 80151ea:	f7ff ff9b 	bl	8015124 <spdctl_reset>
            break;
 80151ee:	e007      	b.n	8015200 <spdctl_run_tick+0x84>
            test_mode = m.v1u;
 80151f0:	8bbb      	ldrh	r3, [r7, #28]
 80151f2:	b2da      	uxtb	r2, r3
 80151f4:	4b7b      	ldr	r3, [pc, #492]	; (80153e4 <spdctl_run_tick+0x268>)
 80151f6:	701a      	strb	r2, [r3, #0]
            testerAddr = m.from;
 80151f8:	7e7a      	ldrb	r2, [r7, #25]
 80151fa:	4b7b      	ldr	r3, [pc, #492]	; (80153e8 <spdctl_run_tick+0x26c>)
 80151fc:	701a      	strb	r2, [r3, #0]
            break;
 80151fe:	bf00      	nop
        if (test_mode & (m.from != testerAddr)) {
 8015200:	4b78      	ldr	r3, [pc, #480]	; (80153e4 <spdctl_run_tick+0x268>)
 8015202:	781b      	ldrb	r3, [r3, #0]
 8015204:	4619      	mov	r1, r3
 8015206:	7e7a      	ldrb	r2, [r7, #25]
 8015208:	4b77      	ldr	r3, [pc, #476]	; (80153e8 <spdctl_run_tick+0x26c>)
 801520a:	781b      	ldrb	r3, [r3, #0]
 801520c:	429a      	cmp	r2, r3
 801520e:	bf14      	ite	ne
 8015210:	2301      	movne	r3, #1
 8015212:	2300      	moveq	r3, #0
 8015214:	b2db      	uxtb	r3, r3
 8015216:	400b      	ands	r3, r1
 8015218:	2b00      	cmp	r3, #0
 801521a:	f040 80c2 	bne.w	80153a2 <spdctl_run_tick+0x226>
        if (IS_TRAIN_SC(m.to)) {
 801521e:	7e3b      	ldrb	r3, [r7, #24]
 8015220:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8015224:	2bc8      	cmp	r3, #200	; 0xc8
 8015226:	f040 80be 	bne.w	80153a6 <spdctl_run_tick+0x22a>
            int tidx = m.to & 0x7;
 801522a:	7e3b      	ldrb	r3, [r7, #24]
 801522c:	f003 0307 	and.w	r3, r3, #7
 8015230:	62fb      	str	r3, [r7, #44]	; 0x2c
            USE_TRAIN(tidx)
 8015232:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015234:	f7fe fbfa 	bl	8013a2c <get_train_cnf>
 8015238:	62b8      	str	r0, [r7, #40]	; 0x28
 801523a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801523c:	4613      	mov	r3, r2
 801523e:	00db      	lsls	r3, r3, #3
 8015240:	1a9b      	subs	r3, r3, r2
 8015242:	00db      	lsls	r3, r3, #3
 8015244:	4a69      	ldr	r2, [pc, #420]	; (80153ec <spdctl_run_tick+0x270>)
 8015246:	4413      	add	r3, r2
 8015248:	627b      	str	r3, [r7, #36]	; 0x24
            switch (m.cmd) {
 801524a:	7ebb      	ldrb	r3, [r7, #26]
 801524c:	2b10      	cmp	r3, #16
 801524e:	d074      	beq.n	801533a <spdctl_run_tick+0x1be>
 8015250:	2b10      	cmp	r3, #16
 8015252:	dc02      	bgt.n	801525a <spdctl_run_tick+0xde>
 8015254:	2b03      	cmp	r3, #3
 8015256:	d006      	beq.n	8015266 <spdctl_run_tick+0xea>
                    break;
 8015258:	e0a8      	b.n	80153ac <spdctl_run_tick+0x230>
            switch (m.cmd) {
 801525a:	2b11      	cmp	r3, #17
 801525c:	d078      	beq.n	8015350 <spdctl_run_tick+0x1d4>
 801525e:	2b50      	cmp	r3, #80	; 0x50
 8015260:	f000 8090 	beq.w	8015384 <spdctl_run_tick+0x208>
                    break;
 8015264:	e0a2      	b.n	80153ac <spdctl_run_tick+0x230>
                    if (m.from == tvars->C1) {
 8015266:	7e7a      	ldrb	r2, [r7, #25]
 8015268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801526a:	7f1b      	ldrb	r3, [r3, #28]
 801526c:	429a      	cmp	r2, r3
 801526e:	d110      	bne.n	8015292 <spdctl_run_tick+0x116>
                        itm_debug3(DBG_PID, "st bemf", tidx, m.v1, m.from);
 8015270:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8015274:	461a      	mov	r2, r3
 8015276:	7e7b      	ldrb	r3, [r7, #25]
 8015278:	9300      	str	r3, [sp, #0]
 801527a:	4613      	mov	r3, r2
 801527c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801527e:	495c      	ldr	r1, [pc, #368]	; (80153f0 <spdctl_run_tick+0x274>)
 8015280:	2004      	movs	r0, #4
 8015282:	f7ff fed5 	bl	8015030 <itm_debug3>
                        tvars->bemf_cv = m.v1;
 8015286:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801528a:	461a      	mov	r2, r3
 801528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801528e:	605a      	str	r2, [r3, #4]
                        break;
 8015290:	e08c      	b.n	80153ac <spdctl_run_tick+0x230>
                    } else if (m.from == tvars->C2) {
 8015292:	7e7a      	ldrb	r2, [r7, #25]
 8015294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015296:	7f5b      	ldrb	r3, [r3, #29]
 8015298:	429a      	cmp	r2, r3
 801529a:	d145      	bne.n	8015328 <spdctl_run_tick+0x1ac>
                        itm_debug3(DBG_PID, "c2 bemf", tidx, m.v1, m.from);
 801529c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80152a0:	461a      	mov	r2, r3
 80152a2:	7e7b      	ldrb	r3, [r7, #25]
 80152a4:	9300      	str	r3, [sp, #0]
 80152a6:	4613      	mov	r3, r2
 80152a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80152aa:	4952      	ldr	r1, [pc, #328]	; (80153f4 <spdctl_run_tick+0x278>)
 80152ac:	2004      	movs	r0, #4
 80152ae:	f7ff febf 	bl	8015030 <itm_debug3>
                        if (abs(m.v1) > abs(tvars->bemf_cv)+50) {
 80152b2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80152b6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80152ba:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80152be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152c0:	685b      	ldr	r3, [r3, #4]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	bfb8      	it	lt
 80152c6:	425b      	neglt	r3, r3
 80152c8:	3332      	adds	r3, #50	; 0x32
 80152ca:	429a      	cmp	r2, r3
 80152cc:	dd6d      	ble.n	80153aa <spdctl_run_tick+0x22e>
                        	itm_debug3(DBG_SPDCTL|DBG_CTRL, "c2_hi", tidx, m.v1, tvars->bemf_cv);
 80152ce:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80152d2:	461a      	mov	r2, r3
 80152d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152d6:	685b      	ldr	r3, [r3, #4]
 80152d8:	9300      	str	r3, [sp, #0]
 80152da:	4613      	mov	r3, r2
 80152dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80152de:	4946      	ldr	r1, [pc, #280]	; (80153f8 <spdctl_run_tick+0x27c>)
 80152e0:	f44f 6082 	mov.w	r0, #1040	; 0x410
 80152e4:	f7ff fea4 	bl	8015030 <itm_debug3>
                        	m.from = MA_TRAIN_SC(tidx);
 80152e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152ea:	b25b      	sxtb	r3, r3
 80152ec:	f003 0307 	and.w	r3, r3, #7
 80152f0:	b25b      	sxtb	r3, r3
 80152f2:	f063 0337 	orn	r3, r3, #55	; 0x37
 80152f6:	b25b      	sxtb	r3, r3
 80152f8:	b2db      	uxtb	r3, r3
 80152fa:	747b      	strb	r3, [r7, #17]
                        	m.to = MA_CONTROL_T(tidx);
 80152fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152fe:	b25b      	sxtb	r3, r3
 8015300:	f003 0307 	and.w	r3, r3, #7
 8015304:	b25b      	sxtb	r3, r3
 8015306:	f063 032f 	orn	r3, r3, #47	; 0x2f
 801530a:	b25b      	sxtb	r3, r3
 801530c:	b2db      	uxtb	r3, r3
 801530e:	743b      	strb	r3, [r7, #16]
                        	m.cmd = CMD_BEMF_DETECT_ON_C2;
 8015310:	2313      	movs	r3, #19
 8015312:	74bb      	strb	r3, [r7, #18]
                        	m.v1u = tvars->C2;
 8015314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015316:	7f5b      	ldrb	r3, [r3, #29]
 8015318:	b29b      	uxth	r3, r3
 801531a:	82bb      	strh	r3, [r7, #20]
                            mqf_write_from_spdctl(&m);
 801531c:	f107 0310 	add.w	r3, r7, #16
 8015320:	4618      	mov	r0, r3
 8015322:	f7ff feef 	bl	8015104 <mqf_write_from_spdctl>
                    break;
 8015326:	e040      	b.n	80153aa <spdctl_run_tick+0x22e>
                        itm_debug2(DBG_ERR|DBG_PID, "unk bemf", m.v1, m.from);
 8015328:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801532c:	461a      	mov	r2, r3
 801532e:	7e7b      	ldrb	r3, [r7, #25]
 8015330:	4932      	ldr	r1, [pc, #200]	; (80153fc <spdctl_run_tick+0x280>)
 8015332:	4833      	ldr	r0, [pc, #204]	; (8015400 <spdctl_run_tick+0x284>)
 8015334:	f7ff fe60 	bl	8014ff8 <itm_debug2>
                    break;
 8015338:	e037      	b.n	80153aa <spdctl_run_tick+0x22e>
                    itm_debug1(DBG_SPDCTL, "set_t_spd", m.v1u);
 801533a:	8bbb      	ldrh	r3, [r7, #28]
 801533c:	461a      	mov	r2, r3
 801533e:	4931      	ldr	r1, [pc, #196]	; (8015404 <spdctl_run_tick+0x288>)
 8015340:	2010      	movs	r0, #16
 8015342:	f7ff fe3f 	bl	8014fc4 <itm_debug1>
                    tvars->target_speed = m.v1u;
 8015346:	8bbb      	ldrh	r3, [r7, #28]
 8015348:	b21a      	sxth	r2, r3
 801534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801534c:	801a      	strh	r2, [r3, #0]
                    break;
 801534e:	e02d      	b.n	80153ac <spdctl_run_tick+0x230>
                    itm_debug3(DBG_SPDCTL|DBG_CTRL, "set_c1_c2", tidx, m.vbytes[0], m.vbytes[2]);
 8015350:	7f3b      	ldrb	r3, [r7, #28]
 8015352:	461a      	mov	r2, r3
 8015354:	7fbb      	ldrb	r3, [r7, #30]
 8015356:	9300      	str	r3, [sp, #0]
 8015358:	4613      	mov	r3, r2
 801535a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801535c:	492a      	ldr	r1, [pc, #168]	; (8015408 <spdctl_run_tick+0x28c>)
 801535e:	f44f 6082 	mov.w	r0, #1040	; 0x410
 8015362:	f7ff fe65 	bl	8015030 <itm_debug3>
                    set_c1_c2(tidx, tvars, m.vbytes[0], m.vbytes[1], m.vbytes[2], m.vbytes[3]);
 8015366:	7f39      	ldrb	r1, [r7, #28]
 8015368:	7f7b      	ldrb	r3, [r7, #29]
 801536a:	b258      	sxtb	r0, r3
 801536c:	7fbb      	ldrb	r3, [r7, #30]
 801536e:	7ffa      	ldrb	r2, [r7, #31]
 8015370:	b252      	sxtb	r2, r2
 8015372:	9201      	str	r2, [sp, #4]
 8015374:	9300      	str	r3, [sp, #0]
 8015376:	4603      	mov	r3, r0
 8015378:	460a      	mov	r2, r1
 801537a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801537c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801537e:	f000 fa87 	bl	8015890 <set_c1_c2>
                    break;
 8015382:	e013      	b.n	80153ac <spdctl_run_tick+0x230>
                	itm_debug2(DBG_POSE, "POSE set", tidx, m.v32);
 8015384:	69fb      	ldr	r3, [r7, #28]
 8015386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015388:	4920      	ldr	r1, [pc, #128]	; (801540c <spdctl_run_tick+0x290>)
 801538a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801538e:	f7ff fe33 	bl	8014ff8 <itm_debug2>
                	tvars->pose_trig = m.v32;
 8015392:	69fa      	ldr	r2, [r7, #28]
 8015394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015396:	62da      	str	r2, [r3, #44]	; 0x2c
                	pose_check_trig(tidx, tvars);
 8015398:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801539a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801539c:	f000 fbfc 	bl	8015b98 <pose_check_trig>
                	break;
 80153a0:	e004      	b.n	80153ac <spdctl_run_tick+0x230>
            continue;
 80153a2:	bf00      	nop
 80153a4:	e707      	b.n	80151b6 <spdctl_run_tick+0x3a>
        }
 80153a6:	bf00      	nop
 80153a8:	e705      	b.n	80151b6 <spdctl_run_tick+0x3a>
                    break;
 80153aa:	bf00      	nop
	for (;;) {
 80153ac:	e703      	b.n	80151b6 <spdctl_run_tick+0x3a>
	/* process trains */
	for (int i=0; i<7; i++) {
 80153ae:	2300      	movs	r3, #0
 80153b0:	637b      	str	r3, [r7, #52]	; 0x34
 80153b2:	e007      	b.n	80153c4 <spdctl_run_tick+0x248>
		//itm_debug1(DBG_SPDCTL, "------ pc", i);
		train_periodic_control(i, dt);
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	4619      	mov	r1, r3
 80153b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80153ba:	f000 f829 	bl	8015410 <train_periodic_control>
	for (int i=0; i<7; i++) {
 80153be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153c0:	3301      	adds	r3, #1
 80153c2:	637b      	str	r3, [r7, #52]	; 0x34
 80153c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153c6:	2b06      	cmp	r3, #6
 80153c8:	ddf4      	ble.n	80153b4 <spdctl_run_tick+0x238>
 80153ca:	e000      	b.n	80153ce <spdctl_run_tick+0x252>
	if (test_mode) return;
 80153cc:	bf00      	nop
	}
}
 80153ce:	3738      	adds	r7, #56	; 0x38
 80153d0:	46bd      	mov	sp, r7
 80153d2:	bd80      	pop	{r7, pc}
 80153d4:	20005324 	.word	0x20005324
 80153d8:	20005328 	.word	0x20005328
 80153dc:	08017110 	.word	0x08017110
 80153e0:	2000052c 	.word	0x2000052c
 80153e4:	200054ec 	.word	0x200054ec
 80153e8:	200054ed 	.word	0x200054ed
 80153ec:	2000532c 	.word	0x2000532c
 80153f0:	0801711c 	.word	0x0801711c
 80153f4:	08017124 	.word	0x08017124
 80153f8:	0801712c 	.word	0x0801712c
 80153fc:	08017134 	.word	0x08017134
 8015400:	80000004 	.word	0x80000004
 8015404:	08017140 	.word	0x08017140
 8015408:	0801714c 	.word	0x0801714c
 801540c:	08017158 	.word	0x08017158

08015410 <train_periodic_control>:
    


static void train_periodic_control(int numtrain, int32_t dt)
{
 8015410:	b580      	push	{r7, lr}
 8015412:	b096      	sub	sp, #88	; 0x58
 8015414:	af02      	add	r7, sp, #8
 8015416:	6078      	str	r0, [r7, #4]
 8015418:	6039      	str	r1, [r7, #0]
	if (stop_all) return;
 801541a:	4b7b      	ldr	r3, [pc, #492]	; (8015608 <train_periodic_control+0x1f8>)
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	2b00      	cmp	r3, #0
 8015420:	f040 8221 	bne.w	8015866 <train_periodic_control+0x456>

	//num_train_periodic_control++;

	USE_TRAIN(numtrain)	// tconf tvars
 8015424:	6878      	ldr	r0, [r7, #4]
 8015426:	f7fe fb01 	bl	8013a2c <get_train_cnf>
 801542a:	6438      	str	r0, [r7, #64]	; 0x40
 801542c:	687a      	ldr	r2, [r7, #4]
 801542e:	4613      	mov	r3, r2
 8015430:	00db      	lsls	r3, r3, #3
 8015432:	1a9b      	subs	r3, r3, r2
 8015434:	00db      	lsls	r3, r3, #3
 8015436:	4a75      	ldr	r2, [pc, #468]	; (801560c <train_periodic_control+0x1fc>)
 8015438:	4413      	add	r3, r2
 801543a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (!tconf) {
 801543c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801543e:	2b00      	cmp	r3, #0
 8015440:	f000 8213 	beq.w	801586a <train_periodic_control+0x45a>
        if ((0)) itm_debug1(DBG_SPDCTL, "unconf tr", numtrain);
        return;
    }
	if (!tconf->enabled) {
 8015444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015446:	7c9b      	ldrb	r3, [r3, #18]
 8015448:	2b00      	cmp	r3, #0
 801544a:	f000 8210 	beq.w	801586e <train_periodic_control+0x45e>
		//itm_debug1(DBG_SPDCTL, "disabled", numtrain);
		return;
	}
	int16_t v = tvars->target_speed;
 801544e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015450:	881b      	ldrh	r3, [r3, #0]
 8015452:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	//int16_t v = tvars->target_speed * tvars->C1_dir;

	itm_debug2(DBG_SPDCTL, "target", numtrain, v);
 8015456:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801545a:	687a      	ldr	r2, [r7, #4]
 801545c:	496c      	ldr	r1, [pc, #432]	; (8015610 <train_periodic_control+0x200>)
 801545e:	2010      	movs	r0, #16
 8015460:	f7ff fdca 	bl	8014ff8 <itm_debug2>
			lastspeed = v;
		}
        return;
	}*/
    // inertia before PID
	if (1==tconf->enable_inertia) {
 8015464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015466:	7c5b      	ldrb	r3, [r3, #17]
 8015468:	2b01      	cmp	r3, #1
 801546a:	d120      	bne.n	80154ae <train_periodic_control+0x9e>
		int changed;
		tvars->inertiavars.target = tvars->target_speed;
 801546c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801546e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015474:	831a      	strh	r2, [r3, #24]
		v = inertia_value(&tconf->inertiacnf, &tvars->inertiavars, dt, &changed);
 8015476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015478:	f103 000c 	add.w	r0, r3, #12
 801547c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801547e:	f103 0118 	add.w	r1, r3, #24
 8015482:	683b      	ldr	r3, [r7, #0]
 8015484:	b29a      	uxth	r2, r3
 8015486:	f107 031c 	add.w	r3, r7, #28
 801548a:	f7ff fb5f 	bl	8014b4c <inertia_value>
 801548e:	4603      	mov	r3, r0
 8015490:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		itm_debug3(DBG_INERTIA, "inertia", numtrain, tvars->target_speed, v);
 8015494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015496:	f9b3 3000 	ldrsh.w	r3, [r3]
 801549a:	461a      	mov	r2, r3
 801549c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80154a0:	9300      	str	r3, [sp, #0]
 80154a2:	4613      	mov	r3, r2
 80154a4:	687a      	ldr	r2, [r7, #4]
 80154a6:	495b      	ldr	r1, [pc, #364]	; (8015614 <train_periodic_control+0x204>)
 80154a8:	2008      	movs	r0, #8
 80154aa:	f7ff fdc1 	bl	8015030 <itm_debug3>
	}
    
	if ((1)) {
		static int16_t lastspeed = 9999;
		if (v != lastspeed) debug_info('T', 0, "trg.v= ", v,0,0);
 80154ae:	4b5a      	ldr	r3, [pc, #360]	; (8015618 <train_periodic_control+0x208>)
 80154b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80154b4:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80154b8:	429a      	cmp	r2, r3
 80154ba:	d00b      	beq.n	80154d4 <train_periodic_control+0xc4>
 80154bc:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80154c0:	2300      	movs	r3, #0
 80154c2:	9301      	str	r3, [sp, #4]
 80154c4:	2300      	movs	r3, #0
 80154c6:	9300      	str	r3, [sp, #0]
 80154c8:	4613      	mov	r3, r2
 80154ca:	4a54      	ldr	r2, [pc, #336]	; (801561c <train_periodic_control+0x20c>)
 80154cc:	2100      	movs	r1, #0
 80154ce:	2054      	movs	r0, #84	; 0x54
 80154d0:	f7ff fdee 	bl	80150b0 <debug_info>
		lastspeed = v;
 80154d4:	4a50      	ldr	r2, [pc, #320]	; (8015618 <train_periodic_control+0x208>)
 80154d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80154da:	8013      	strh	r3, [r2, #0]
	}
    if (tconf->enable_pid) {
 80154dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80154de:	7cdb      	ldrb	r3, [r3, #19]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d01d      	beq.n	8015520 <train_periodic_control+0x110>
        // corresponding BEMF target
        // 100% = 1.5V
        int32_t tbemf = 150*v/10 * tvars->C1_dir;
 80154e4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80154e8:	2296      	movs	r2, #150	; 0x96
 80154ea:	fb02 f303 	mul.w	r3, r2, r3
 80154ee:	4a4c      	ldr	r2, [pc, #304]	; (8015620 <train_periodic_control+0x210>)
 80154f0:	fb82 1203 	smull	r1, r2, r2, r3
 80154f4:	1092      	asrs	r2, r2, #2
 80154f6:	17db      	asrs	r3, r3, #31
 80154f8:	1ad3      	subs	r3, r2, r3
 80154fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80154fc:	f992 201e 	ldrsb.w	r2, [r2, #30]
 8015500:	fb02 f303 	mul.w	r3, r2, r3
 8015504:	63bb      	str	r3, [r7, #56]	; 0x38
        tbemf = tbemf / 8; //XXX why ?? new cables (more capacitance ?)
 8015506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015508:	2b00      	cmp	r3, #0
 801550a:	da00      	bge.n	801550e <train_periodic_control+0xfe>
 801550c:	3307      	adds	r3, #7
 801550e:	10db      	asrs	r3, r3, #3
 8015510:	63bb      	str	r3, [r7, #56]	; 0x38
        // TODO make this divisor a parameter
        pidctl_set_target(&tconf->pidcnf, &tvars->pidvars, tbemf);
 8015512:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8015514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015516:	3308      	adds	r3, #8
 8015518:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801551a:	4619      	mov	r1, r3
 801551c:	f7ff fc98 	bl	8014e50 <pidctl_set_target>
    }
    /*
    canton_vars_t *cv = get_canton_vars(tvars->current_canton);
    int32_t bemf = cv->bemf_centivolt;
    */
    int32_t bemf = tvars->bemf_cv;
 8015520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015522:	685b      	ldr	r3, [r3, #4]
 8015524:	64bb      	str	r3, [r7, #72]	; 0x48
    if (tconf->bemfIIR) {
 8015526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015528:	7d9b      	ldrb	r3, [r3, #22]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d017      	beq.n	801555e <train_periodic_control+0x14e>
    	tvars->bemfiir = (80*tvars->bemfiir + 20*bemf)/100;
 801552e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015532:	4613      	mov	r3, r2
 8015534:	009b      	lsls	r3, r3, #2
 8015536:	4413      	add	r3, r2
 8015538:	011b      	lsls	r3, r3, #4
 801553a:	4619      	mov	r1, r3
 801553c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801553e:	4613      	mov	r3, r2
 8015540:	009b      	lsls	r3, r3, #2
 8015542:	4413      	add	r3, r2
 8015544:	009b      	lsls	r3, r3, #2
 8015546:	440b      	add	r3, r1
 8015548:	4a36      	ldr	r2, [pc, #216]	; (8015624 <train_periodic_control+0x214>)
 801554a:	fb82 1203 	smull	r1, r2, r2, r3
 801554e:	1152      	asrs	r2, r2, #5
 8015550:	17db      	asrs	r3, r3, #31
 8015552:	1ad2      	subs	r2, r2, r3
 8015554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015556:	631a      	str	r2, [r3, #48]	; 0x30
    	bemf = tvars->bemfiir;
 8015558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801555a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801555c:	64bb      	str	r3, [r7, #72]	; 0x48
    }
    if (tconf->enable_pid) {
 801555e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015560:	7cdb      	ldrb	r3, [r3, #19]
 8015562:	2b00      	cmp	r3, #0
 8015564:	f000 80a0 	beq.w	80156a8 <train_periodic_control+0x298>
    	if (tvars->target_speed) {
 8015568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801556a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801556e:	2b00      	cmp	r3, #0
 8015570:	d004      	beq.n	801557c <train_periodic_control+0x16c>
    		tvars->pidvars.stopped = 0;
 8015572:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015574:	7d13      	ldrb	r3, [r2, #20]
 8015576:	f36f 0341 	bfc	r3, #1, #1
 801557a:	7513      	strb	r3, [r2, #20]
    	}
        if (!tvars->pidvars.stopped && (tvars->target_speed == 0) && (abs(tvars->bemf_cv)<10)) {
 801557c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801557e:	7d1b      	ldrb	r3, [r3, #20]
 8015580:	f003 0302 	and.w	r3, r3, #2
 8015584:	b2db      	uxtb	r3, r3
 8015586:	2b00      	cmp	r3, #0
 8015588:	d12c      	bne.n	80155e4 <train_periodic_control+0x1d4>
 801558a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801558c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015590:	2b00      	cmp	r3, #0
 8015592:	d127      	bne.n	80155e4 <train_periodic_control+0x1d4>
 8015594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015596:	685b      	ldr	r3, [r3, #4]
 8015598:	f113 0f09 	cmn.w	r3, #9
 801559c:	db22      	blt.n	80155e4 <train_periodic_control+0x1d4>
 801559e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80155a0:	685b      	ldr	r3, [r3, #4]
 80155a2:	2b09      	cmp	r3, #9
 80155a4:	dc1e      	bgt.n	80155e4 <train_periodic_control+0x1d4>
    		itm_debug1(DBG_PID, "stop", 0);
 80155a6:	2200      	movs	r2, #0
 80155a8:	491f      	ldr	r1, [pc, #124]	; (8015628 <train_periodic_control+0x218>)
 80155aa:	2004      	movs	r0, #4
 80155ac:	f7ff fd0a 	bl	8014fc4 <itm_debug1>
        	//debug_info('T', 0, "ZERO", cv->bemf_centivolt,0, 0);
			pidctl_reset(&tconf->pidcnf, &tvars->pidvars);
 80155b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80155b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80155b4:	3308      	adds	r3, #8
 80155b6:	4619      	mov	r1, r3
 80155b8:	4610      	mov	r0, r2
 80155ba:	f7ff fc25 	bl	8014e08 <pidctl_reset>
			debug_info('T', numtrain, "STOP_PID", 0,0, 0);
 80155be:	6879      	ldr	r1, [r7, #4]
 80155c0:	2300      	movs	r3, #0
 80155c2:	9301      	str	r3, [sp, #4]
 80155c4:	2300      	movs	r3, #0
 80155c6:	9300      	str	r3, [sp, #0]
 80155c8:	2300      	movs	r3, #0
 80155ca:	4a18      	ldr	r2, [pc, #96]	; (801562c <train_periodic_control+0x21c>)
 80155cc:	2054      	movs	r0, #84	; 0x54
 80155ce:	f7ff fd6f 	bl	80150b0 <debug_info>
			tvars->pidvars.stopped = 1;
 80155d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80155d4:	7d13      	ldrb	r3, [r2, #20]
 80155d6:	f043 0302 	orr.w	r3, r3, #2
 80155da:	7513      	strb	r3, [r2, #20]
        	v = 0;
 80155dc:	2300      	movs	r3, #0
 80155de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80155e2:	e061      	b.n	80156a8 <train_periodic_control+0x298>
        } else if (tvars->pidvars.stopped) {
 80155e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80155e6:	7d1b      	ldrb	r3, [r3, #20]
 80155e8:	f003 0302 	and.w	r3, r3, #2
 80155ec:	b2db      	uxtb	r3, r3
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d020      	beq.n	8015634 <train_periodic_control+0x224>
    		itm_debug1(DBG_PID, "stopped", v);
 80155f2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80155f6:	461a      	mov	r2, r3
 80155f8:	490d      	ldr	r1, [pc, #52]	; (8015630 <train_periodic_control+0x220>)
 80155fa:	2004      	movs	r0, #4
 80155fc:	f7ff fce2 	bl	8014fc4 <itm_debug1>
        	v = 0;
 8015600:	2300      	movs	r3, #0
 8015602:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8015606:	e04f      	b.n	80156a8 <train_periodic_control+0x298>
 8015608:	2000531c 	.word	0x2000531c
 801560c:	2000532c 	.word	0x2000532c
 8015610:	08017164 	.word	0x08017164
 8015614:	0801716c 	.word	0x0801716c
 8015618:	20000530 	.word	0x20000530
 801561c:	08017174 	.word	0x08017174
 8015620:	66666667 	.word	0x66666667
 8015624:	51eb851f 	.word	0x51eb851f
 8015628:	0801717c 	.word	0x0801717c
 801562c:	08017184 	.word	0x08017184
 8015630:	08017190 	.word	0x08017190
        } else {
        	itm_debug2(DBG_PID, "pid", bemf, v);
 8015634:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015638:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801563a:	498f      	ldr	r1, [pc, #572]	; (8015878 <train_periodic_control+0x468>)
 801563c:	2004      	movs	r0, #4
 801563e:	f7ff fcdb 	bl	8014ff8 <itm_debug2>
        	//const canton_config_t *cc = get_canton_cnf(vars->current_canton);
        	if (bemf>MAX_PID_VALUE)  bemf=MAX_PID_VALUE; // XXX
 8015642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015644:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8015648:	dd02      	ble.n	8015650 <train_periodic_control+0x240>
 801564a:	f44f 738c 	mov.w	r3, #280	; 0x118
 801564e:	64bb      	str	r3, [r7, #72]	; 0x48
        	if (bemf<-MAX_PID_VALUE) bemf=-MAX_PID_VALUE;
 8015650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015652:	f513 7f8c 	cmn.w	r3, #280	; 0x118
 8015656:	da01      	bge.n	801565c <train_periodic_control+0x24c>
 8015658:	4b88      	ldr	r3, [pc, #544]	; (801587c <train_periodic_control+0x46c>)
 801565a:	64bb      	str	r3, [r7, #72]	; 0x48

        	int32_t v2 = pidctl_value(&tconf->pidcnf, &tvars->pidvars, bemf, dt);
 801565c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801565e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015660:	f103 0108 	add.w	r1, r3, #8
 8015664:	683b      	ldr	r3, [r7, #0]
 8015666:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015668:	f7ff fc06 	bl	8014e78 <pidctl_value>
 801566c:	6378      	str	r0, [r7, #52]	; 0x34
        	int32_t v3;
        	v3 = (v2>100) ? 100 : v2;
 801566e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015670:	2b64      	cmp	r3, #100	; 0x64
 8015672:	bfa8      	it	ge
 8015674:	2364      	movge	r3, #100	; 0x64
 8015676:	633b      	str	r3, [r7, #48]	; 0x30
        	v3 = (v3<-100) ? -100: v3;
 8015678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801567a:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801567e:	4293      	cmp	r3, r2
 8015680:	bfb8      	it	lt
 8015682:	4613      	movlt	r3, r2
 8015684:	633b      	str	r3, [r7, #48]	; 0x30
        	itm_debug2(DBG_PID, "pid/r", v3, v2);
 8015686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801568a:	497d      	ldr	r1, [pc, #500]	; (8015880 <train_periodic_control+0x470>)
 801568c:	2004      	movs	r0, #4
 801568e:	f7ff fcb3 	bl	8014ff8 <itm_debug2>
        	v = (int16_t)v3 * tvars->C1_dir; // because it will be multiplied again when setting pwm
 8015692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015694:	b29a      	uxth	r2, r3
 8015696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015698:	f993 301e 	ldrsb.w	r3, [r3, #30]
 801569c:	b29b      	uxth	r3, r3
 801569e:	fb12 f303 	smulbb	r3, r2, r3
 80156a2:	b29b      	uxth	r3, r3
 80156a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        }
    }
    if (tconf->postIIR) {
 80156a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80156aa:	7ddb      	ldrb	r3, [r3, #23]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d01c      	beq.n	80156ea <train_periodic_control+0x2da>
        tvars->v_iir = (80*tvars->v_iir+20*v)/100;
 80156b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80156b2:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80156b6:	461a      	mov	r2, r3
 80156b8:	4613      	mov	r3, r2
 80156ba:	009b      	lsls	r3, r3, #2
 80156bc:	4413      	add	r3, r2
 80156be:	011b      	lsls	r3, r3, #4
 80156c0:	4619      	mov	r1, r3
 80156c2:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 80156c6:	4613      	mov	r3, r2
 80156c8:	009b      	lsls	r3, r3, #2
 80156ca:	4413      	add	r3, r2
 80156cc:	009b      	lsls	r3, r3, #2
 80156ce:	440b      	add	r3, r1
 80156d0:	4a6c      	ldr	r2, [pc, #432]	; (8015884 <train_periodic_control+0x474>)
 80156d2:	fb82 1203 	smull	r1, r2, r2, r3
 80156d6:	1152      	asrs	r2, r2, #5
 80156d8:	17db      	asrs	r3, r3, #31
 80156da:	1ad3      	subs	r3, r2, r3
 80156dc:	b21a      	sxth	r2, r3
 80156de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80156e0:	869a      	strh	r2, [r3, #52]	; 0x34
        v = tvars->v_iir;
 80156e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80156e4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80156e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }
    // or inertia after PID
    if (2==tconf->enable_inertia) {
 80156ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80156ec:	7c5b      	ldrb	r3, [r3, #17]
 80156ee:	2b02      	cmp	r3, #2
 80156f0:	d111      	bne.n	8015716 <train_periodic_control+0x306>
        tvars->inertiavars.target = v;
 80156f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80156f4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80156f8:	831a      	strh	r2, [r3, #24]
        v = inertia_value(&tconf->inertiacnf, &tvars->inertiavars, dt, NULL);
 80156fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80156fc:	f103 000c 	add.w	r0, r3, #12
 8015700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015702:	f103 0118 	add.w	r1, r3, #24
 8015706:	683b      	ldr	r3, [r7, #0]
 8015708:	b29a      	uxth	r2, r3
 801570a:	2300      	movs	r3, #0
 801570c:	f7ff fa1e 	bl	8014b4c <inertia_value>
 8015710:	4603      	mov	r3, r0
 8015712:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }

    if (tconf->en_spd2pow) {
 8015716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015718:	7e5b      	ldrb	r3, [r3, #25]
 801571a:	2b00      	cmp	r3, #0
 801571c:	d02d      	beq.n	801577a <train_periodic_control+0x36a>
    	// [0-100] -> [min_pwm .. MAX_PWM]
    	int s = SIGNOF(v);
 801571e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015722:	2b00      	cmp	r3, #0
 8015724:	da02      	bge.n	801572c <train_periodic_control+0x31c>
 8015726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801572a:	e000      	b.n	801572e <train_periodic_control+0x31e>
 801572c:	2301      	movs	r3, #1
 801572e:	62fb      	str	r3, [r7, #44]	; 0x2c
    	int a = abs(v);
 8015730:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015734:	2b00      	cmp	r3, #0
 8015736:	bfb8      	it	lt
 8015738:	425b      	neglt	r3, r3
 801573a:	62bb      	str	r3, [r7, #40]	; 0x28
    	int v2 = (a>1) ? a * (MAX_PWM-tconf->min_power)/100 + tconf->min_power : 0;
 801573c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801573e:	2b01      	cmp	r3, #1
 8015740:	dd10      	ble.n	8015764 <train_periodic_control+0x354>
 8015742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015744:	7e9b      	ldrb	r3, [r3, #26]
 8015746:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 801574a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801574c:	fb02 f303 	mul.w	r3, r2, r3
 8015750:	4a4c      	ldr	r2, [pc, #304]	; (8015884 <train_periodic_control+0x474>)
 8015752:	fb82 1203 	smull	r1, r2, r2, r3
 8015756:	1152      	asrs	r2, r2, #5
 8015758:	17db      	asrs	r3, r3, #31
 801575a:	1ad3      	subs	r3, r2, r3
 801575c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801575e:	7e92      	ldrb	r2, [r2, #26]
 8015760:	4413      	add	r3, r2
 8015762:	e000      	b.n	8015766 <train_periodic_control+0x356>
 8015764:	2300      	movs	r3, #0
 8015766:	627b      	str	r3, [r7, #36]	; 0x24
    	v = s * v2;
 8015768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801576a:	b29a      	uxth	r2, r3
 801576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801576e:	b29b      	uxth	r3, r3
 8015770:	fb12 f303 	smulbb	r3, r2, r3
 8015774:	b29b      	uxth	r3, r3
 8015776:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }

    int changed = (tvars->last_speed != v);
 801577a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801577c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8015780:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8015784:	429a      	cmp	r2, r3
 8015786:	bf14      	ite	ne
 8015788:	2301      	movne	r3, #1
 801578a:	2300      	moveq	r3, #0
 801578c:	b2db      	uxtb	r3, r3
 801578e:	623b      	str	r3, [r7, #32]
    tvars->last_speed = v;
 8015790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015792:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015796:	841a      	strh	r2, [r3, #32]

    itm_debug2(DBG_PID|DBG_SPDCTL, "spd", v, changed);
 8015798:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 801579c:	6a3b      	ldr	r3, [r7, #32]
 801579e:	493a      	ldr	r1, [pc, #232]	; (8015888 <train_periodic_control+0x478>)
 80157a0:	2014      	movs	r0, #20
 80157a2:	f7ff fc29 	bl	8014ff8 <itm_debug2>

    if (changed) {
 80157a6:	6a3b      	ldr	r3, [r7, #32]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d01a      	beq.n	80157e2 <train_periodic_control+0x3d2>
    	_set_speed(numtrain, tconf, tvars);
 80157ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80157ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80157b0:	6878      	ldr	r0, [r7, #4]
 80157b2:	f000 f915 	bl	80159e0 <_set_speed>
        if ((1)) { // TODO remove
            msg_64_t m;
            m.from = MA_TRAIN_SC(numtrain);
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	b25b      	sxtb	r3, r3
 80157ba:	f003 0307 	and.w	r3, r3, #7
 80157be:	b25b      	sxtb	r3, r3
 80157c0:	f063 0337 	orn	r3, r3, #55	; 0x37
 80157c4:	b25b      	sxtb	r3, r3
 80157c6:	b2db      	uxtb	r3, r3
 80157c8:	747b      	strb	r3, [r7, #17]
            m.to = MA_UI(0);
 80157ca:	2380      	movs	r3, #128	; 0x80
 80157cc:	743b      	strb	r3, [r7, #16]
            m.cmd = CMD_NOTIF_SPEED;
 80157ce:	23a0      	movs	r3, #160	; 0xa0
 80157d0:	74bb      	strb	r3, [r7, #18]
            m.v1 = v;
 80157d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80157d6:	82bb      	strh	r3, [r7, #20]
            mqf_write_from_spdctl(&m);
 80157d8:	f107 0310 	add.w	r3, r7, #16
 80157dc:	4618      	mov	r0, r3
 80157de:	f7ff fc91 	bl	8015104 <mqf_write_from_spdctl>
        }
    }
    if (tconf->notify_speed) {
 80157e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80157e4:	7d1b      	ldrb	r3, [r3, #20]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d011      	beq.n	801580e <train_periodic_control+0x3fe>
    	struct spd_notif n;
    	n.sv100 = v;
 80157ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80157ee:	813b      	strh	r3, [r7, #8]
    	n.pid_target = tvars->pidvars.target_v;
 80157f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157f2:	691b      	ldr	r3, [r3, #16]
 80157f4:	b21b      	sxth	r3, r3
 80157f6:	817b      	strh	r3, [r7, #10]
    	//canton_vars_t *cv1 = get_canton_vars(tvars->current_canton);
    	n.bemf_centivolt = tvars->bemf_cv; //cv1->bemf_centivolt;
 80157f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157fa:	685b      	ldr	r3, [r3, #4]
 80157fc:	60fb      	str	r3, [r7, #12]
    	train_notif(numtrain, 'V', (void *)&n, sizeof(n));
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	b2d8      	uxtb	r0, r3
 8015802:	f107 0208 	add.w	r2, r7, #8
 8015806:	2308      	movs	r3, #8
 8015808:	2156      	movs	r1, #86	; 0x56
 801580a:	f7ff fc3c 	bl	8015086 <train_notif>
    }

    /* estimate speed/position with bemf */
    if ((1)) {
    	//canton_vars_t *cv = get_canton_vars(tvars->current_canton);
        int32_t b = tvars->bemf_cv; //cv->bemf_centivolt;
 801580e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015810:	685b      	ldr	r3, [r3, #4]
 8015812:	647b      	str	r3, [r7, #68]	; 0x44
        if (abs(b)<25) b = 0;
 8015814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015816:	f113 0f18 	cmn.w	r3, #24
 801581a:	db04      	blt.n	8015826 <train_periodic_control+0x416>
 801581c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801581e:	2b18      	cmp	r3, #24
 8015820:	dc01      	bgt.n	8015826 <train_periodic_control+0x416>
 8015822:	2300      	movs	r3, #0
 8015824:	647b      	str	r3, [r7, #68]	; 0x44
        // TODO: BEMF to speed. currently part of it is done in convert_to_centivolt
        //       but we assume speed is really proportional to BEMF
        tvars->position_estimate += b;
 8015826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801582a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801582c:	441a      	add	r2, r3
 801582e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015830:	629a      	str	r2, [r3, #40]	; 0x28
        itm_debug2(DBG_POSE, "pose", tvars->position_estimate, b);
 8015832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015834:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015838:	4914      	ldr	r1, [pc, #80]	; (801588c <train_periodic_control+0x47c>)
 801583a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801583e:	f7ff fbdb 	bl	8014ff8 <itm_debug2>
        pose_check_trig(numtrain, tvars);
 8015842:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015844:	6878      	ldr	r0, [r7, #4]
 8015846:	f000 f9a7 	bl	8015b98 <pose_check_trig>
        if (tconf->notify_pose) {
 801584a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801584c:	7d5b      	ldrb	r3, [r3, #21]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d00e      	beq.n	8015870 <train_periodic_control+0x460>
    		train_notif(numtrain, 'i', (void *)&tvars->position_estimate, sizeof(int32_t));
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	b2d8      	uxtb	r0, r3
 8015856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015858:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801585c:	2304      	movs	r3, #4
 801585e:	2169      	movs	r1, #105	; 0x69
 8015860:	f7ff fc11 	bl	8015086 <train_notif>
 8015864:	e004      	b.n	8015870 <train_periodic_control+0x460>
	if (stop_all) return;
 8015866:	bf00      	nop
 8015868:	e002      	b.n	8015870 <train_periodic_control+0x460>
        return;
 801586a:	bf00      	nop
 801586c:	e000      	b.n	8015870 <train_periodic_control+0x460>
		return;
 801586e:	bf00      	nop
        }
    }
}
 8015870:	3750      	adds	r7, #80	; 0x50
 8015872:	46bd      	mov	sp, r7
 8015874:	bd80      	pop	{r7, pc}
 8015876:	bf00      	nop
 8015878:	08017198 	.word	0x08017198
 801587c:	fffffee8 	.word	0xfffffee8
 8015880:	0801719c 	.word	0x0801719c
 8015884:	51eb851f 	.word	0x51eb851f
 8015888:	080171a4 	.word	0x080171a4
 801588c:	080171a8 	.word	0x080171a8

08015890 <set_c1_c2>:


static void set_c1_c2(int tidx, train_vars_t *tvars, uint8_t c1, int8_t dir1, uint8_t c2, int8_t dir2)
{
 8015890:	b580      	push	{r7, lr}
 8015892:	b086      	sub	sp, #24
 8015894:	af00      	add	r7, sp, #0
 8015896:	60f8      	str	r0, [r7, #12]
 8015898:	60b9      	str	r1, [r7, #8]
 801589a:	4611      	mov	r1, r2
 801589c:	461a      	mov	r2, r3
 801589e:	460b      	mov	r3, r1
 80158a0:	71fb      	strb	r3, [r7, #7]
 80158a2:	4613      	mov	r3, r2
 80158a4:	71bb      	strb	r3, [r7, #6]
	msg_64_t m;
	m.from = MA_TRAIN_SC(tidx);
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	b25b      	sxtb	r3, r3
 80158aa:	f003 0307 	and.w	r3, r3, #7
 80158ae:	b25b      	sxtb	r3, r3
 80158b0:	f063 0337 	orn	r3, r3, #55	; 0x37
 80158b4:	b25b      	sxtb	r3, r3
 80158b6:	b2db      	uxtb	r3, r3
 80158b8:	747b      	strb	r3, [r7, #17]

	if ((tvars->C1 != 0xFF) && (tvars->C1 != c1)  && (tvars->C1 != c2)) {
 80158ba:	68bb      	ldr	r3, [r7, #8]
 80158bc:	7f1b      	ldrb	r3, [r3, #28]
 80158be:	2bff      	cmp	r3, #255	; 0xff
 80158c0:	d01b      	beq.n	80158fa <set_c1_c2+0x6a>
 80158c2:	68bb      	ldr	r3, [r7, #8]
 80158c4:	7f1b      	ldrb	r3, [r3, #28]
 80158c6:	79fa      	ldrb	r2, [r7, #7]
 80158c8:	429a      	cmp	r2, r3
 80158ca:	d016      	beq.n	80158fa <set_c1_c2+0x6a>
 80158cc:	68bb      	ldr	r3, [r7, #8]
 80158ce:	7f1b      	ldrb	r3, [r3, #28]
 80158d0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80158d4:	429a      	cmp	r2, r3
 80158d6:	d010      	beq.n	80158fa <set_c1_c2+0x6a>
		m.to = tvars->C1;
 80158d8:	68bb      	ldr	r3, [r7, #8]
 80158da:	7f1b      	ldrb	r3, [r3, #28]
 80158dc:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_STOP;
 80158de:	2302      	movs	r3, #2
 80158e0:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 80158e2:	f107 0310 	add.w	r3, r7, #16
 80158e6:	4618      	mov	r0, r3
 80158e8:	f7ff fc0c 	bl	8015104 <mqf_write_from_spdctl>
		m.cmd = CMD_BEMF_OFF;
 80158ec:	2341      	movs	r3, #65	; 0x41
 80158ee:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 80158f0:	f107 0310 	add.w	r3, r7, #16
 80158f4:	4618      	mov	r0, r3
 80158f6:	f7ff fc05 	bl	8015104 <mqf_write_from_spdctl>
	}
	if ((tvars->C2 != 0xFF) && (tvars->C2 != c1)  && (tvars->C2 != c2)) {
 80158fa:	68bb      	ldr	r3, [r7, #8]
 80158fc:	7f5b      	ldrb	r3, [r3, #29]
 80158fe:	2bff      	cmp	r3, #255	; 0xff
 8015900:	d01b      	beq.n	801593a <set_c1_c2+0xaa>
 8015902:	68bb      	ldr	r3, [r7, #8]
 8015904:	7f5b      	ldrb	r3, [r3, #29]
 8015906:	79fa      	ldrb	r2, [r7, #7]
 8015908:	429a      	cmp	r2, r3
 801590a:	d016      	beq.n	801593a <set_c1_c2+0xaa>
 801590c:	68bb      	ldr	r3, [r7, #8]
 801590e:	7f5b      	ldrb	r3, [r3, #29]
 8015910:	f897 2020 	ldrb.w	r2, [r7, #32]
 8015914:	429a      	cmp	r2, r3
 8015916:	d010      	beq.n	801593a <set_c1_c2+0xaa>
		m.to = tvars->C2;
 8015918:	68bb      	ldr	r3, [r7, #8]
 801591a:	7f5b      	ldrb	r3, [r3, #29]
 801591c:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_STOP;
 801591e:	2302      	movs	r3, #2
 8015920:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8015922:	f107 0310 	add.w	r3, r7, #16
 8015926:	4618      	mov	r0, r3
 8015928:	f7ff fbec 	bl	8015104 <mqf_write_from_spdctl>
		m.cmd = CMD_BEMF_OFF;
 801592c:	2341      	movs	r3, #65	; 0x41
 801592e:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8015930:	f107 0310 	add.w	r3, r7, #16
 8015934:	4618      	mov	r0, r3
 8015936:	f7ff fbe5 	bl	8015104 <mqf_write_from_spdctl>
	}
	if ((c1 != 0xFF) && (c1 != tvars->C1) && (c1 != tvars->C2)) {
 801593a:	79fb      	ldrb	r3, [r7, #7]
 801593c:	2bff      	cmp	r3, #255	; 0xff
 801593e:	d012      	beq.n	8015966 <set_c1_c2+0xd6>
 8015940:	68bb      	ldr	r3, [r7, #8]
 8015942:	7f1b      	ldrb	r3, [r3, #28]
 8015944:	79fa      	ldrb	r2, [r7, #7]
 8015946:	429a      	cmp	r2, r3
 8015948:	d00d      	beq.n	8015966 <set_c1_c2+0xd6>
 801594a:	68bb      	ldr	r3, [r7, #8]
 801594c:	7f5b      	ldrb	r3, [r3, #29]
 801594e:	79fa      	ldrb	r2, [r7, #7]
 8015950:	429a      	cmp	r2, r3
 8015952:	d008      	beq.n	8015966 <set_c1_c2+0xd6>
		m.to = c1;
 8015954:	79fb      	ldrb	r3, [r7, #7]
 8015956:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_BEMF_ON;
 8015958:	2340      	movs	r3, #64	; 0x40
 801595a:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 801595c:	f107 0310 	add.w	r3, r7, #16
 8015960:	4618      	mov	r0, r3
 8015962:	f7ff fbcf 	bl	8015104 <mqf_write_from_spdctl>
	}
	if ((c2 != 0xFF) && (c2 != tvars->C1) && (c2 != tvars->C2)) {
 8015966:	f897 3020 	ldrb.w	r3, [r7, #32]
 801596a:	2bff      	cmp	r3, #255	; 0xff
 801596c:	d015      	beq.n	801599a <set_c1_c2+0x10a>
 801596e:	68bb      	ldr	r3, [r7, #8]
 8015970:	7f1b      	ldrb	r3, [r3, #28]
 8015972:	f897 2020 	ldrb.w	r2, [r7, #32]
 8015976:	429a      	cmp	r2, r3
 8015978:	d00f      	beq.n	801599a <set_c1_c2+0x10a>
 801597a:	68bb      	ldr	r3, [r7, #8]
 801597c:	7f5b      	ldrb	r3, [r3, #29]
 801597e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8015982:	429a      	cmp	r2, r3
 8015984:	d009      	beq.n	801599a <set_c1_c2+0x10a>
		m.to = c2;
 8015986:	f897 3020 	ldrb.w	r3, [r7, #32]
 801598a:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_BEMF_ON;
 801598c:	2340      	movs	r3, #64	; 0x40
 801598e:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8015990:	f107 0310 	add.w	r3, r7, #16
 8015994:	4618      	mov	r0, r3
 8015996:	f7ff fbb5 	bl	8015104 <mqf_write_from_spdctl>
	}
	tvars->C1 = c1;
 801599a:	68bb      	ldr	r3, [r7, #8]
 801599c:	79fa      	ldrb	r2, [r7, #7]
 801599e:	771a      	strb	r2, [r3, #28]
	tvars->C1_dir = dir1;
 80159a0:	68bb      	ldr	r3, [r7, #8]
 80159a2:	79ba      	ldrb	r2, [r7, #6]
 80159a4:	779a      	strb	r2, [r3, #30]
	tvars->C2 = c2;
 80159a6:	68bb      	ldr	r3, [r7, #8]
 80159a8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80159ac:	775a      	strb	r2, [r3, #29]
	tvars->C2_dir = dir2;
 80159ae:	68bb      	ldr	r3, [r7, #8]
 80159b0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80159b4:	77da      	strb	r2, [r3, #31]
	tvars->last_speed = 9000; // make sure cmd is sent
 80159b6:	68bb      	ldr	r3, [r7, #8]
 80159b8:	f242 3228 	movw	r2, #9000	; 0x2328
 80159bc:	841a      	strh	r2, [r3, #32]
	itm_debug1(DBG_POSE, "POS reset", tvars->position_estimate);
 80159be:	68bb      	ldr	r3, [r7, #8]
 80159c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80159c2:	461a      	mov	r2, r3
 80159c4:	4905      	ldr	r1, [pc, #20]	; (80159dc <set_c1_c2+0x14c>)
 80159c6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80159ca:	f7ff fafb 	bl	8014fc4 <itm_debug1>
	tvars->position_estimate = 0; // reset POSE
 80159ce:	68bb      	ldr	r3, [r7, #8]
 80159d0:	2200      	movs	r2, #0
 80159d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80159d4:	bf00      	nop
 80159d6:	3718      	adds	r7, #24
 80159d8:	46bd      	mov	sp, r7
 80159da:	bd80      	pop	{r7, pc}
 80159dc:	080171b0 	.word	0x080171b0

080159e0 <_set_speed>:
}
#endif


static void _set_speed(int tidx, const train_config_t *cnf, train_vars_t *vars)
{
 80159e0:	b580      	push	{r7, lr}
 80159e2:	b092      	sub	sp, #72	; 0x48
 80159e4:	af02      	add	r7, sp, #8
 80159e6:	60f8      	str	r0, [r7, #12]
 80159e8:	60b9      	str	r1, [r7, #8]
 80159ea:	607a      	str	r2, [r7, #4]
    const canton_config_t *c1;
    const canton_config_t *c2;


	int16_t sv100 = vars->last_speed;
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	8c1b      	ldrh	r3, [r3, #32]
 80159f0:	87fb      	strh	r3, [r7, #62]	; 0x3e

    //num_set_speed++;


    c1 =  get_canton_cnf(vars->C1);
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	7f1b      	ldrb	r3, [r3, #28]
 80159f6:	4618      	mov	r0, r3
 80159f8:	f7fd fff0 	bl	80139dc <get_canton_cnf>
 80159fc:	63b8      	str	r0, [r7, #56]	; 0x38
    c2 =  get_canton_cnf(vars->C2);
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	7f5b      	ldrb	r3, [r3, #29]
 8015a02:	4618      	mov	r0, r3
 8015a04:	f7fd ffea 	bl	80139dc <get_canton_cnf>
 8015a08:	6378      	str	r0, [r7, #52]	; 0x34
    
    if (!c1) {
 8015a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d10c      	bne.n	8015a2a <_set_speed+0x4a>
    	itm_debug1(DBG_ERR|DBG_SPDCTL, "no canton", sv100);
 8015a10:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8015a14:	461a      	mov	r2, r3
 8015a16:	4947      	ldr	r1, [pc, #284]	; (8015b34 <_set_speed+0x154>)
 8015a18:	4847      	ldr	r0, [pc, #284]	; (8015b38 <_set_speed+0x158>)
 8015a1a:	f7ff fad3 	bl	8014fc4 <itm_debug1>
        train_error(ERR_CANTON_NONE, "no canton");
 8015a1e:	4945      	ldr	r1, [pc, #276]	; (8015b34 <_set_speed+0x154>)
 8015a20:	f06f 0064 	mvn.w	r0, #100	; 0x64
 8015a24:	f7ff fb20 	bl	8015068 <train_error>
 8015a28:	e080      	b.n	8015b2c <_set_speed+0x14c>
        return;
    }

    int pvi1, pvi2;
    int sig = SIGNOF(sv100);
 8015a2a:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	da02      	bge.n	8015a38 <_set_speed+0x58>
 8015a32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a36:	e000      	b.n	8015a3a <_set_speed+0x5a>
 8015a38:	2301      	movs	r3, #1
 8015a3a:	633b      	str	r3, [r7, #48]	; 0x30
    uint16_t v = abs(sv100);
 8015a3c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	bfb8      	it	lt
 8015a44:	425b      	neglt	r3, r3
 8015a46:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t pwm_duty = volt_index(v*10 /* mili*/,
 8015a48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015a4a:	461a      	mov	r2, r3
 8015a4c:	0092      	lsls	r2, r2, #2
 8015a4e:	4413      	add	r3, r2
 8015a50:	005b      	lsls	r3, r3, #1
 8015a52:	b298      	uxth	r0, r3
 8015a54:	68bb      	ldr	r3, [r7, #8]
 8015a56:	7c1b      	ldrb	r3, [r3, #16]
 8015a58:	f107 0220 	add.w	r2, r7, #32
 8015a5c:	9301      	str	r3, [sp, #4]
 8015a5e:	f107 031c 	add.w	r3, r7, #28
 8015a62:	9300      	str	r3, [sp, #0]
 8015a64:	4613      	mov	r3, r2
 8015a66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015a68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015a6a:	f7fd f95b 	bl	8012d24 <volt_index>
 8015a6e:	4603      	mov	r3, r0
 8015a70:	85bb      	strh	r3, [r7, #44]	; 0x2c
                                   c1, c2,
                                   &pvi1, &pvi2, cnf->volt_policy);

	int dir1 = sig * vars->C1_dir;
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8015a78:	461a      	mov	r2, r3
 8015a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a7c:	fb02 f303 	mul.w	r3, r2, r3
 8015a80:	62bb      	str	r3, [r7, #40]	; 0x28
	int dir2 = sig * vars->C2_dir;
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	f993 301f 	ldrsb.w	r3, [r3, #31]
 8015a88:	461a      	mov	r2, r3
 8015a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a8c:	fb02 f303 	mul.w	r3, r2, r3
 8015a90:	627b      	str	r3, [r7, #36]	; 0x24


    msg_64_t m;
    m.from = MA_TRAIN_SC(tidx);
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	b25b      	sxtb	r3, r3
 8015a96:	f003 0307 	and.w	r3, r3, #7
 8015a9a:	b25b      	sxtb	r3, r3
 8015a9c:	f063 0337 	orn	r3, r3, #55	; 0x37
 8015aa0:	b25b      	sxtb	r3, r3
 8015aa2:	b2db      	uxtb	r3, r3
 8015aa4:	747b      	strb	r3, [r7, #17]
    m.cmd = CMD_SETVPWM;
 8015aa6:	2301      	movs	r3, #1
 8015aa8:	74bb      	strb	r3, [r7, #18]
    m.v1u = pvi1;
 8015aaa:	6a3b      	ldr	r3, [r7, #32]
 8015aac:	b29b      	uxth	r3, r3
 8015aae:	82bb      	strh	r3, [r7, #20]
    m.v2 = dir1*pwm_duty;
 8015ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ab2:	b29b      	uxth	r3, r3
 8015ab4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8015ab6:	fb12 f303 	smulbb	r3, r2, r3
 8015aba:	b29b      	uxth	r3, r3
 8015abc:	b21b      	sxth	r3, r3
 8015abe:	82fb      	strh	r3, [r7, #22]
    m.to = vars->C1;
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	7f1b      	ldrb	r3, [r3, #28]
 8015ac4:	743b      	strb	r3, [r7, #16]
	itm_debug3(DBG_SPDCTL, "setvpwm", m.v1u, m.v2, m.to);
 8015ac6:	8abb      	ldrh	r3, [r7, #20]
 8015ac8:	461a      	mov	r2, r3
 8015aca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015ace:	4619      	mov	r1, r3
 8015ad0:	7c3b      	ldrb	r3, [r7, #16]
 8015ad2:	9300      	str	r3, [sp, #0]
 8015ad4:	460b      	mov	r3, r1
 8015ad6:	4919      	ldr	r1, [pc, #100]	; (8015b3c <_set_speed+0x15c>)
 8015ad8:	2010      	movs	r0, #16
 8015ada:	f7ff faa9 	bl	8015030 <itm_debug3>
    mqf_write_from_spdctl(&m);
 8015ade:	f107 0310 	add.w	r3, r7, #16
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	f7ff fb0e 	bl	8015104 <mqf_write_from_spdctl>

    if (c2) {
 8015ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d01e      	beq.n	8015b2c <_set_speed+0x14c>
    	itm_debug3(DBG_SPDCTL, "setvpwm/c2", m.v1u, m.v2, m.to);
 8015aee:	8abb      	ldrh	r3, [r7, #20]
 8015af0:	461a      	mov	r2, r3
 8015af2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015af6:	4619      	mov	r1, r3
 8015af8:	7c3b      	ldrb	r3, [r7, #16]
 8015afa:	9300      	str	r3, [sp, #0]
 8015afc:	460b      	mov	r3, r1
 8015afe:	4910      	ldr	r1, [pc, #64]	; (8015b40 <_set_speed+0x160>)
 8015b00:	2010      	movs	r0, #16
 8015b02:	f7ff fa95 	bl	8015030 <itm_debug3>
    	m.v1u = pvi2;
 8015b06:	69fb      	ldr	r3, [r7, #28]
 8015b08:	b29b      	uxth	r3, r3
 8015b0a:	82bb      	strh	r3, [r7, #20]
    	m.v2 = dir2*pwm_duty;
 8015b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b0e:	b29b      	uxth	r3, r3
 8015b10:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8015b12:	fb12 f303 	smulbb	r3, r2, r3
 8015b16:	b29b      	uxth	r3, r3
 8015b18:	b21b      	sxth	r3, r3
 8015b1a:	82fb      	strh	r3, [r7, #22]
    	m.to = vars->C2;
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	7f5b      	ldrb	r3, [r3, #29]
 8015b20:	743b      	strb	r3, [r7, #16]
    	mqf_write_from_spdctl(&m);
 8015b22:	f107 0310 	add.w	r3, r7, #16
 8015b26:	4618      	mov	r0, r3
 8015b28:	f7ff faec 	bl	8015104 <mqf_write_from_spdctl>
    }
}
 8015b2c:	3740      	adds	r7, #64	; 0x40
 8015b2e:	46bd      	mov	sp, r7
 8015b30:	bd80      	pop	{r7, pc}
 8015b32:	bf00      	nop
 8015b34:	080171bc 	.word	0x080171bc
 8015b38:	80000010 	.word	0x80000010
 8015b3c:	080171c8 	.word	0x080171c8
 8015b40:	080171d0 	.word	0x080171d0

08015b44 <train_set_target_speed>:

/* =========================================================================== */


int train_set_target_speed(int numtrain, int16_t target)
{
 8015b44:	b580      	push	{r7, lr}
 8015b46:	b084      	sub	sp, #16
 8015b48:	af00      	add	r7, sp, #0
 8015b4a:	6078      	str	r0, [r7, #4]
 8015b4c:	460b      	mov	r3, r1
 8015b4e:	807b      	strh	r3, [r7, #2]
	if (calibrating) return 1;
 8015b50:	4b0f      	ldr	r3, [pc, #60]	; (8015b90 <train_set_target_speed+0x4c>)
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d001      	beq.n	8015b5c <train_set_target_speed+0x18>
 8015b58:	2301      	movs	r3, #1
 8015b5a:	e015      	b.n	8015b88 <train_set_target_speed+0x44>
	USE_TRAIN(numtrain) // tconf tvars
 8015b5c:	6878      	ldr	r0, [r7, #4]
 8015b5e:	f7fd ff65 	bl	8013a2c <get_train_cnf>
 8015b62:	60f8      	str	r0, [r7, #12]
 8015b64:	687a      	ldr	r2, [r7, #4]
 8015b66:	4613      	mov	r3, r2
 8015b68:	00db      	lsls	r3, r3, #3
 8015b6a:	1a9b      	subs	r3, r3, r2
 8015b6c:	00db      	lsls	r3, r3, #3
 8015b6e:	4a09      	ldr	r2, [pc, #36]	; (8015b94 <train_set_target_speed+0x50>)
 8015b70:	4413      	add	r3, r2
 8015b72:	60bb      	str	r3, [r7, #8]
	(void)tconf; // unused
	if (!tvars) return -1;
 8015b74:	68bb      	ldr	r3, [r7, #8]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d102      	bne.n	8015b80 <train_set_target_speed+0x3c>
 8015b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b7e:	e003      	b.n	8015b88 <train_set_target_speed+0x44>
	tvars->target_speed = target;
 8015b80:	68bb      	ldr	r3, [r7, #8]
 8015b82:	887a      	ldrh	r2, [r7, #2]
 8015b84:	801a      	strh	r2, [r3, #0]
		if (c->enable_pid) {
			pidctl_reset(&c->pidcnf, &vars->pidvars);
		}
	}*/

	return 0;
 8015b86:	2300      	movs	r3, #0
}
 8015b88:	4618      	mov	r0, r3
 8015b8a:	3710      	adds	r7, #16
 8015b8c:	46bd      	mov	sp, r7
 8015b8e:	bd80      	pop	{r7, pc}
 8015b90:	20005320 	.word	0x20005320
 8015b94:	2000532c 	.word	0x2000532c

08015b98 <pose_check_trig>:


static void pose_check_trig(int numtrain, train_vars_t *tvars)
{
 8015b98:	b580      	push	{r7, lr}
 8015b9a:	b088      	sub	sp, #32
 8015b9c:	af02      	add	r7, sp, #8
 8015b9e:	6078      	str	r0, [r7, #4]
 8015ba0:	6039      	str	r1, [r7, #0]
	if (!tvars->pose_trig) return;
 8015ba2:	683b      	ldr	r3, [r7, #0]
 8015ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d04c      	beq.n	8015c44 <pose_check_trig+0xac>
	int tr = 0;
 8015baa:	2300      	movs	r3, #0
 8015bac:	617b      	str	r3, [r7, #20]
	if (tvars->pose_trig > 0) {
 8015bae:	683b      	ldr	r3, [r7, #0]
 8015bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	dd08      	ble.n	8015bc8 <pose_check_trig+0x30>
		if (tvars->position_estimate >= tvars->pose_trig) {
 8015bb6:	683b      	ldr	r3, [r7, #0]
 8015bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015bba:	683b      	ldr	r3, [r7, #0]
 8015bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bbe:	429a      	cmp	r2, r3
 8015bc0:	db0a      	blt.n	8015bd8 <pose_check_trig+0x40>
			tr = 1;
 8015bc2:	2301      	movs	r3, #1
 8015bc4:	617b      	str	r3, [r7, #20]
 8015bc6:	e007      	b.n	8015bd8 <pose_check_trig+0x40>
		}
	} else { // pose_trig < 0
		if (tvars->position_estimate <= tvars->pose_trig) {
 8015bc8:	683b      	ldr	r3, [r7, #0]
 8015bca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015bcc:	683b      	ldr	r3, [r7, #0]
 8015bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bd0:	429a      	cmp	r2, r3
 8015bd2:	dc01      	bgt.n	8015bd8 <pose_check_trig+0x40>
			tr = 1;
 8015bd4:	2301      	movs	r3, #1
 8015bd6:	617b      	str	r3, [r7, #20]
		}
	}
	if (!tr) return;
 8015bd8:	697b      	ldr	r3, [r7, #20]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d034      	beq.n	8015c48 <pose_check_trig+0xb0>
	itm_debug3(DBG_POSE, "POSE trig", numtrain, tvars->position_estimate, tvars->pose_trig);
 8015bde:	683b      	ldr	r3, [r7, #0]
 8015be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015be2:	683b      	ldr	r3, [r7, #0]
 8015be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015be6:	9300      	str	r3, [sp, #0]
 8015be8:	4613      	mov	r3, r2
 8015bea:	687a      	ldr	r2, [r7, #4]
 8015bec:	4918      	ldr	r1, [pc, #96]	; (8015c50 <pose_check_trig+0xb8>)
 8015bee:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8015bf2:	f7ff fa1d 	bl	8015030 <itm_debug3>
	msg_64_t m;
	m.from = MA_TRAIN_SC(numtrain);
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	b25b      	sxtb	r3, r3
 8015bfa:	f003 0307 	and.w	r3, r3, #7
 8015bfe:	b25b      	sxtb	r3, r3
 8015c00:	f063 0337 	orn	r3, r3, #55	; 0x37
 8015c04:	b25b      	sxtb	r3, r3
 8015c06:	b2db      	uxtb	r3, r3
 8015c08:	727b      	strb	r3, [r7, #9]
	m.to = MA_CONTROL_T(numtrain);
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	b25b      	sxtb	r3, r3
 8015c0e:	f003 0307 	and.w	r3, r3, #7
 8015c12:	b25b      	sxtb	r3, r3
 8015c14:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8015c18:	b25b      	sxtb	r3, r3
 8015c1a:	b2db      	uxtb	r3, r3
 8015c1c:	723b      	strb	r3, [r7, #8]
	m.cmd = CMD_POSE_TRIGGERED;
 8015c1e:	2351      	movs	r3, #81	; 0x51
 8015c20:	72bb      	strb	r3, [r7, #10]
	m.v1u = tvars->C1;
 8015c22:	683b      	ldr	r3, [r7, #0]
 8015c24:	7f1b      	ldrb	r3, [r3, #28]
 8015c26:	b29b      	uxth	r3, r3
 8015c28:	81bb      	strh	r3, [r7, #12]
	m.v2 = tvars->position_estimate;
 8015c2a:	683b      	ldr	r3, [r7, #0]
 8015c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c2e:	b21b      	sxth	r3, r3
 8015c30:	81fb      	strh	r3, [r7, #14]
	mqf_write_from_spdctl(&m);
 8015c32:	f107 0308 	add.w	r3, r7, #8
 8015c36:	4618      	mov	r0, r3
 8015c38:	f7ff fa64 	bl	8015104 <mqf_write_from_spdctl>

	// trig only once
	tvars->pose_trig = 0;
 8015c3c:	683b      	ldr	r3, [r7, #0]
 8015c3e:	2200      	movs	r2, #0
 8015c40:	62da      	str	r2, [r3, #44]	; 0x2c
 8015c42:	e002      	b.n	8015c4a <pose_check_trig+0xb2>
	if (!tvars->pose_trig) return;
 8015c44:	bf00      	nop
 8015c46:	e000      	b.n	8015c4a <pose_check_trig+0xb2>
	if (!tr) return;
 8015c48:	bf00      	nop
}
 8015c4a:	3718      	adds	r7, #24
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	bd80      	pop	{r7, pc}
 8015c50:	080171dc 	.word	0x080171dc

08015c54 <itm_debug1>:
{
 8015c54:	b580      	push	{r7, lr}
 8015c56:	b086      	sub	sp, #24
 8015c58:	af02      	add	r7, sp, #8
 8015c5a:	60f8      	str	r0, [r7, #12]
 8015c5c:	60b9      	str	r1, [r7, #8]
 8015c5e:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8015c60:	4b08      	ldr	r3, [pc, #32]	; (8015c84 <itm_debug1+0x30>)
 8015c62:	681a      	ldr	r2, [r3, #0]
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	4013      	ands	r3, r2
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d007      	beq.n	8015c7c <itm_debug1+0x28>
 8015c6c:	2301      	movs	r3, #1
 8015c6e:	9300      	str	r3, [sp, #0]
 8015c70:	2300      	movs	r3, #0
 8015c72:	2200      	movs	r2, #0
 8015c74:	6879      	ldr	r1, [r7, #4]
 8015c76:	68b8      	ldr	r0, [r7, #8]
 8015c78:	f000 fc5e 	bl	8016538 <_itm_debug3>
}
 8015c7c:	bf00      	nop
 8015c7e:	3710      	adds	r7, #16
 8015c80:	46bd      	mov	sp, r7
 8015c82:	bd80      	pop	{r7, pc}
 8015c84:	20000538 	.word	0x20000538

08015c88 <itm_debug2>:
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	b086      	sub	sp, #24
 8015c8c:	af02      	add	r7, sp, #8
 8015c8e:	60f8      	str	r0, [r7, #12]
 8015c90:	60b9      	str	r1, [r7, #8]
 8015c92:	607a      	str	r2, [r7, #4]
 8015c94:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8015c96:	4b09      	ldr	r3, [pc, #36]	; (8015cbc <itm_debug2+0x34>)
 8015c98:	681a      	ldr	r2, [r3, #0]
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	4013      	ands	r3, r2
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d007      	beq.n	8015cb2 <itm_debug2+0x2a>
 8015ca2:	2302      	movs	r3, #2
 8015ca4:	9300      	str	r3, [sp, #0]
 8015ca6:	2300      	movs	r3, #0
 8015ca8:	683a      	ldr	r2, [r7, #0]
 8015caa:	6879      	ldr	r1, [r7, #4]
 8015cac:	68b8      	ldr	r0, [r7, #8]
 8015cae:	f000 fc43 	bl	8016538 <_itm_debug3>
}
 8015cb2:	bf00      	nop
 8015cb4:	3710      	adds	r7, #16
 8015cb6:	46bd      	mov	sp, r7
 8015cb8:	bd80      	pop	{r7, pc}
 8015cba:	bf00      	nop
 8015cbc:	20000538 	.word	0x20000538

08015cc0 <StartCtrlTask>:
static void run_task_ctrl(void);
extern DMA_HandleTypeDef hdma_i2c3_rx;
extern DMA_HandleTypeDef hdma_i2c3_tx;

void StartCtrlTask(void *argument)
{
 8015cc0:	b580      	push	{r7, lr}
 8015cc2:	b084      	sub	sp, #16
 8015cc4:	af00      	add	r7, sp, #0
 8015cc6:	6078      	str	r0, [r7, #4]
	int nsmpl = sizeof(train_adc_buf)/sizeof(uint16_t);
 8015cc8:	2328      	movs	r3, #40	; 0x28
 8015cca:	60fb      	str	r3, [r7, #12]

	if (sizeof(train_adc_buf) != sizeof(uint16_t)*NUM_LOCAL_CANTONS_HW*8) Error_Handler();
	if (nsmpl != 5*2*4) Error_Handler();
 8015ccc:	68fb      	ldr	r3, [r7, #12]
 8015cce:	2b28      	cmp	r3, #40	; 0x28
 8015cd0:	d001      	beq.n	8015cd6 <StartCtrlTask+0x16>
 8015cd2:	f7eb fbef 	bl	80014b4 <Error_Handler>
	//__HAL_DMA_ENABLE_IT(&hdma_i2c3_tx, DMA_IT_TC);

	//if (NUM_VAL_PER_CANTON != 4) Error_Handler();
	//if (ADC_HALF_BUFFER != 10*2) Error_Handler();

	if ((1)) set_pwm_freq(200);
 8015cd6:	20c8      	movs	r0, #200	; 0xc8
 8015cd8:	f000 f864 	bl	8015da4 <set_pwm_freq>
	CantonTimerHandles[1]=&htim1;
 8015cdc:	4b2a      	ldr	r3, [pc, #168]	; (8015d88 <StartCtrlTask+0xc8>)
 8015cde:	4a2b      	ldr	r2, [pc, #172]	; (8015d8c <StartCtrlTask+0xcc>)
 8015ce0:	605a      	str	r2, [r3, #4]
	CantonTimerHandles[2]=&htim2;
 8015ce2:	4b29      	ldr	r3, [pc, #164]	; (8015d88 <StartCtrlTask+0xc8>)
 8015ce4:	4a2a      	ldr	r2, [pc, #168]	; (8015d90 <StartCtrlTask+0xd0>)
 8015ce6:	609a      	str	r2, [r3, #8]
	CantonTimerHandles[3]=&htim3;
 8015ce8:	4b27      	ldr	r3, [pc, #156]	; (8015d88 <StartCtrlTask+0xc8>)
 8015cea:	4a2a      	ldr	r2, [pc, #168]	; (8015d94 <StartCtrlTask+0xd4>)
 8015cec:	60da      	str	r2, [r3, #12]
	CantonTimerHandles[4]=&htim12;
 8015cee:	4b26      	ldr	r3, [pc, #152]	; (8015d88 <StartCtrlTask+0xc8>)
 8015cf0:	4a29      	ldr	r2, [pc, #164]	; (8015d98 <StartCtrlTask+0xd8>)
 8015cf2:	611a      	str	r2, [r3, #16]



	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8015cf4:	2100      	movs	r1, #0
 8015cf6:	4825      	ldr	r0, [pc, #148]	; (8015d8c <StartCtrlTask+0xcc>)
 8015cf8:	f7f1 fe02 	bl	8007900 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8015cfc:	2104      	movs	r1, #4
 8015cfe:	4823      	ldr	r0, [pc, #140]	; (8015d8c <StartCtrlTask+0xcc>)
 8015d00:	f7f1 fdfe 	bl	8007900 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8015d04:	2108      	movs	r1, #8
 8015d06:	4821      	ldr	r0, [pc, #132]	; (8015d8c <StartCtrlTask+0xcc>)
 8015d08:	f7f1 fdfa 	bl	8007900 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8015d0c:	210c      	movs	r1, #12
 8015d0e:	481f      	ldr	r0, [pc, #124]	; (8015d8c <StartCtrlTask+0xcc>)
 8015d10:	f7f1 fdf6 	bl	8007900 <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8015d14:	2108      	movs	r1, #8
 8015d16:	481e      	ldr	r0, [pc, #120]	; (8015d90 <StartCtrlTask+0xd0>)
 8015d18:	f7f1 fdf2 	bl	8007900 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8015d1c:	210c      	movs	r1, #12
 8015d1e:	481c      	ldr	r0, [pc, #112]	; (8015d90 <StartCtrlTask+0xd0>)
 8015d20:	f7f1 fdee 	bl	8007900 <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8015d24:	2100      	movs	r1, #0
 8015d26:	481b      	ldr	r0, [pc, #108]	; (8015d94 <StartCtrlTask+0xd4>)
 8015d28:	f7f1 fdea 	bl	8007900 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8015d2c:	2104      	movs	r1, #4
 8015d2e:	4819      	ldr	r0, [pc, #100]	; (8015d94 <StartCtrlTask+0xd4>)
 8015d30:	f7f1 fde6 	bl	8007900 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8015d34:	2108      	movs	r1, #8
 8015d36:	4817      	ldr	r0, [pc, #92]	; (8015d94 <StartCtrlTask+0xd4>)
 8015d38:	f7f1 fde2 	bl	8007900 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8015d3c:	210c      	movs	r1, #12
 8015d3e:	4815      	ldr	r0, [pc, #84]	; (8015d94 <StartCtrlTask+0xd4>)
 8015d40:	f7f1 fdde 	bl	8007900 <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 8015d44:	2100      	movs	r1, #0
 8015d46:	4814      	ldr	r0, [pc, #80]	; (8015d98 <StartCtrlTask+0xd8>)
 8015d48:	f7f1 fdda 	bl	8007900 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_2);
 8015d4c:	2104      	movs	r1, #4
 8015d4e:	4812      	ldr	r0, [pc, #72]	; (8015d98 <StartCtrlTask+0xd8>)
 8015d50:	f7f1 fdd6 	bl	8007900 <HAL_TIM_PWM_Stop>

	//HAL_TIM_Base_Start_IT(&htim8);
	HAL_TIM_Base_Start_IT(&htim1);
 8015d54:	480d      	ldr	r0, [pc, #52]	; (8015d8c <StartCtrlTask+0xcc>)
 8015d56:	f7f1 fd3b 	bl	80077d0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim2);
 8015d5a:	480d      	ldr	r0, [pc, #52]	; (8015d90 <StartCtrlTask+0xd0>)
 8015d5c:	f7f1 fd14 	bl	8007788 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 8015d60:	480c      	ldr	r0, [pc, #48]	; (8015d94 <StartCtrlTask+0xd4>)
 8015d62:	f7f1 fd11 	bl	8007788 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim12);
 8015d66:	480c      	ldr	r0, [pc, #48]	; (8015d98 <StartCtrlTask+0xd8>)
 8015d68:	f7f1 fd0e 	bl	8007788 <HAL_TIM_Base_Start>

	HAL_ADC_Start_DMA(&hadc1,(uint32_t *)train_adc_buf, nsmpl);
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	461a      	mov	r2, r3
 8015d70:	490a      	ldr	r1, [pc, #40]	; (8015d9c <StartCtrlTask+0xdc>)
 8015d72:	480b      	ldr	r0, [pc, #44]	; (8015da0 <StartCtrlTask+0xe0>)
 8015d74:	f7ec f924 	bl	8001fc0 <HAL_ADC_Start_DMA>
	//HAL_ADC_Start_DMA(&hadc1,(uint32_t *)train_adc_buffer, NUM_ADC_SAMPLES);

	startCycleCounter();
 8015d78:	f7fd fd0c 	bl	8013794 <startCycleCounter>
		p = t;
		//itm_debug1(DBG_ERR, "cycl", d);
	}
	itm_debug1(DBG_ERR, "tcycl", GetCycleCount64()-k);
	*/
	run_task_ctrl();
 8015d7c:	f000 f846 	bl	8015e0c <run_task_ctrl>
}
 8015d80:	bf00      	nop
 8015d82:	3710      	adds	r7, #16
 8015d84:	46bd      	mov	sp, r7
 8015d86:	bd80      	pop	{r7, pc}
 8015d88:	20005200 	.word	0x20005200
 8015d8c:	200066f0 	.word	0x200066f0
 8015d90:	20006c3c 	.word	0x20006c3c
 8015d94:	200061e4 	.word	0x200061e4
 8015d98:	20006c80 	.word	0x20006c80
 8015d9c:	2000881c 	.word	0x2000881c
 8015da0:	20006228 	.word	0x20006228

08015da4 <set_pwm_freq>:
int cur_freqhz = 350;
extern TIM_HandleTypeDef htim1;

// #define __HAL_TIM_SET_PRESCALER(__HANDLE__, __PRESC__)       ((__HANDLE__)->Instance->PSC = (__PRESC__))
void set_pwm_freq(int freqhz)
{
 8015da4:	b480      	push	{r7}
 8015da6:	b085      	sub	sp, #20
 8015da8:	af00      	add	r7, sp, #0
 8015daa:	6078      	str	r0, [r7, #4]
	// 12MHz / 200 -> 60000
	// 50Hz = 1200
	int ps = (60000/freqhz)-1;
 8015dac:	f64e 2260 	movw	r2, #60000	; 0xea60
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	fb92 f3f3 	sdiv	r3, r2, r3
 8015db6:	3b01      	subs	r3, #1
 8015db8:	60fb      	str	r3, [r7, #12]
	if ((ps<1) || (ps>0xFFFF)) ps = 1200;
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	dd03      	ble.n	8015dc8 <set_pwm_freq+0x24>
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015dc6:	db02      	blt.n	8015dce <set_pwm_freq+0x2a>
 8015dc8:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8015dcc:	60fb      	str	r3, [r7, #12]
	ps = ps-1;
 8015dce:	68fb      	ldr	r3, [r7, #12]
 8015dd0:	3b01      	subs	r3, #1
 8015dd2:	60fb      	str	r3, [r7, #12]
	cur_freqhz = 60000/(ps+1);
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	3301      	adds	r3, #1
 8015dd8:	f64e 2260 	movw	r2, #60000	; 0xea60
 8015ddc:	fb92 f3f3 	sdiv	r3, r2, r3
 8015de0:	4a07      	ldr	r2, [pc, #28]	; (8015e00 <set_pwm_freq+0x5c>)
 8015de2:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_PRESCALER(&htim1, ps);
 8015de4:	4b07      	ldr	r3, [pc, #28]	; (8015e04 <set_pwm_freq+0x60>)
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	68fa      	ldr	r2, [r7, #12]
 8015dea:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_PRESCALER(&htim8, ps);
 8015dec:	4b06      	ldr	r3, [pc, #24]	; (8015e08 <set_pwm_freq+0x64>)
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	68fa      	ldr	r2, [r7, #12]
 8015df2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8015df4:	bf00      	nop
 8015df6:	3714      	adds	r7, #20
 8015df8:	46bd      	mov	sp, r7
 8015dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dfe:	4770      	bx	lr
 8015e00:	20000534 	.word	0x20000534
 8015e04:	200066f0 	.word	0x200066f0
 8015e08:	20005bf0 	.word	0x20005bf0

08015e0c <run_task_ctrl>:

#define USE_NOTIF_TIM 0

volatile uint32_t t0ctrl;
static void run_task_ctrl(void)
{
 8015e0c:	b580      	push	{r7, lr}
 8015e0e:	b088      	sub	sp, #32
 8015e10:	af00      	add	r7, sp, #0
	int cnt = 0;
 8015e12:	2300      	movs	r3, #0
 8015e14:	61fb      	str	r3, [r7, #28]
	//if ((0))   calibrate_bemf(); //XXXX
	for (;;) {
		uint32_t notif;
		xTaskNotifyWait(0, 0xFFFFFFFF, &notif, portMAX_DELAY);
 8015e16:	1d3a      	adds	r2, r7, #4
 8015e18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015e20:	2000      	movs	r0, #0
 8015e22:	f7f8 fcfb 	bl	800e81c <xTaskNotifyWait>
		if ((1)) {
			int n = 0;
 8015e26:	2300      	movs	r3, #0
 8015e28:	61bb      	str	r3, [r7, #24]
			if (notif & NOTIF_NEW_ADC_1)  n = 1;
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	f003 0301 	and.w	r3, r3, #1
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d001      	beq.n	8015e38 <run_task_ctrl+0x2c>
 8015e34:	2301      	movs	r3, #1
 8015e36:	61bb      	str	r3, [r7, #24]
			if (notif & NOTIF_NEW_ADC_2)  n |= 2;
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	f003 0302 	and.w	r3, r3, #2
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d003      	beq.n	8015e4a <run_task_ctrl+0x3e>
 8015e42:	69bb      	ldr	r3, [r7, #24]
 8015e44:	f043 0302 	orr.w	r3, r3, #2
 8015e48:	61bb      	str	r3, [r7, #24]
			itm_debug2(DBG_LOWCTRL, "-----", 0 /*(notif & NOTIF_TIM8) ? 1 : 0*/, n);
 8015e4a:	69bb      	ldr	r3, [r7, #24]
 8015e4c:	2200      	movs	r2, #0
 8015e4e:	4950      	ldr	r1, [pc, #320]	; (8015f90 <run_task_ctrl+0x184>)
 8015e50:	f44f 7080 	mov.w	r0, #256	; 0x100
 8015e54:	f7ff ff18 	bl	8015c88 <itm_debug2>
			if (n==3) {
 8015e58:	69bb      	ldr	r3, [r7, #24]
 8015e5a:	2b03      	cmp	r3, #3
 8015e5c:	d105      	bne.n	8015e6a <run_task_ctrl+0x5e>
				itm_debug1(DBG_LOWCTRL|DBG_ERR, "both", n);
 8015e5e:	69ba      	ldr	r2, [r7, #24]
 8015e60:	494c      	ldr	r1, [pc, #304]	; (8015f94 <run_task_ctrl+0x188>)
 8015e62:	484d      	ldr	r0, [pc, #308]	; (8015f98 <run_task_ctrl+0x18c>)
 8015e64:	f7ff fef6 	bl	8015c54 <itm_debug1>
 8015e68:	e7d5      	b.n	8015e16 <run_task_ctrl+0xa>
				if ((1)) continue; // skip this tick
			}
		}
		cnt++;
 8015e6a:	69fb      	ldr	r3, [r7, #28]
 8015e6c:	3301      	adds	r3, #1
 8015e6e:	61fb      	str	r3, [r7, #28]
		t0ctrl = HAL_GetTick();
 8015e70:	f7ec f834 	bl	8001edc <HAL_GetTick>
 8015e74:	4602      	mov	r2, r0
 8015e76:	4b49      	ldr	r3, [pc, #292]	; (8015f9c <run_task_ctrl+0x190>)
 8015e78:	601a      	str	r2, [r3, #0]
		if (0==(notif & (NOTIF_NEW_ADC_1|NOTIF_NEW_ADC_2))) continue;
#endif
		//debug_info('G', 0, "HOP", 0, 0, 0);
		static uint32_t oldt = 0;
		static uint32_t t0 = 0;
		uint32_t t = HAL_GetTick();
 8015e7a:	f7ec f82f 	bl	8001edc <HAL_GetTick>
 8015e7e:	6178      	str	r0, [r7, #20]
		// XXX we should have a global t0
		if (!t0) t0 = t;
 8015e80:	4b47      	ldr	r3, [pc, #284]	; (8015fa0 <run_task_ctrl+0x194>)
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d102      	bne.n	8015e8e <run_task_ctrl+0x82>
 8015e88:	4a45      	ldr	r2, [pc, #276]	; (8015fa0 <run_task_ctrl+0x194>)
 8015e8a:	697b      	ldr	r3, [r7, #20]
 8015e8c:	6013      	str	r3, [r2, #0]
		int32_t dt = (oldt) ? (t-oldt) : 1;
 8015e8e:	4b45      	ldr	r3, [pc, #276]	; (8015fa4 <run_task_ctrl+0x198>)
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d004      	beq.n	8015ea0 <run_task_ctrl+0x94>
 8015e96:	4b43      	ldr	r3, [pc, #268]	; (8015fa4 <run_task_ctrl+0x198>)
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	697a      	ldr	r2, [r7, #20]
 8015e9c:	1ad3      	subs	r3, r2, r3
 8015e9e:	e000      	b.n	8015ea2 <run_task_ctrl+0x96>
 8015ea0:	2301      	movs	r3, #1
 8015ea2:	613b      	str	r3, [r7, #16]
		oldt = t;
 8015ea4:	4a3f      	ldr	r2, [pc, #252]	; (8015fa4 <run_task_ctrl+0x198>)
 8015ea6:	697b      	ldr	r3, [r7, #20]
 8015ea8:	6013      	str	r3, [r2, #0]
		ina3221
		void spdctl_run_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt);
		void msgsrv_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt);
		*/

		bemf_tick(notif, t, dt);
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	693a      	ldr	r2, [r7, #16]
 8015eae:	6979      	ldr	r1, [r7, #20]
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	f7fd f88f 	bl	8012fd4 <bemf_tick>
		itm_debug1(DBG_LOWCTRL, "--msg", dt);
 8015eb6:	693a      	ldr	r2, [r7, #16]
 8015eb8:	493b      	ldr	r1, [pc, #236]	; (8015fa8 <run_task_ctrl+0x19c>)
 8015eba:	f44f 7080 	mov.w	r0, #256	; 0x100
 8015ebe:	f7ff fec9 	bl	8015c54 <itm_debug1>
		msgsrv_tick(notif, t, dt);
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	693a      	ldr	r2, [r7, #16]
 8015ec6:	6979      	ldr	r1, [r7, #20]
 8015ec8:	4618      	mov	r0, r3
 8015eca:	f7fe fd77 	bl	80149bc <msgsrv_tick>
		itm_debug1(DBG_LOWCTRL, "--spdctl", dt);
 8015ece:	693a      	ldr	r2, [r7, #16]
 8015ed0:	4936      	ldr	r1, [pc, #216]	; (8015fac <run_task_ctrl+0x1a0>)
 8015ed2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8015ed6:	f7ff febd 	bl	8015c54 <itm_debug1>
		spdctl_run_tick(notif, t, dt);
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	693a      	ldr	r2, [r7, #16]
 8015ede:	6979      	ldr	r1, [r7, #20]
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	f7ff f94b 	bl	801517c <spdctl_run_tick>
		itm_debug1(DBG_LOWCTRL, "--canton", dt);
 8015ee6:	693a      	ldr	r2, [r7, #16]
 8015ee8:	4931      	ldr	r1, [pc, #196]	; (8015fb0 <run_task_ctrl+0x1a4>)
 8015eea:	f44f 7080 	mov.w	r0, #256	; 0x100
 8015eee:	f7ff feb1 	bl	8015c54 <itm_debug1>
		canton_tick(notif, t, dt);
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	693a      	ldr	r2, [r7, #16]
 8015ef6:	6979      	ldr	r1, [r7, #20]
 8015ef8:	4618      	mov	r0, r3
 8015efa:	f7fc fcd3 	bl	80128a4 <canton_tick>
		itm_debug1(DBG_LOWCTRL, "--trnout", dt);
 8015efe:	693a      	ldr	r2, [r7, #16]
 8015f00:	492c      	ldr	r1, [pc, #176]	; (8015fb4 <run_task_ctrl+0x1a8>)
 8015f02:	f44f 7080 	mov.w	r0, #256	; 0x100
 8015f06:	f7ff fea5 	bl	8015c54 <itm_debug1>
		turnout_tick(notif, t, dt);
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	693a      	ldr	r2, [r7, #16]
 8015f0e:	6979      	ldr	r1, [r7, #20]
 8015f10:	4618      	mov	r0, r3
 8015f12:	f7fd f9ed 	bl	80132f0 <turnout_tick>
		itm_debug1(DBG_LOWCTRL, "--ctrl", dt);
 8015f16:	693a      	ldr	r2, [r7, #16]
 8015f18:	4927      	ldr	r1, [pc, #156]	; (8015fb8 <run_task_ctrl+0x1ac>)
 8015f1a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8015f1e:	f7ff fe99 	bl	8015c54 <itm_debug1>
		ctrl_run_tick(notif, t, dt);
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	693a      	ldr	r2, [r7, #16]
 8015f26:	6979      	ldr	r1, [r7, #20]
 8015f28:	4618      	mov	r0, r3
 8015f2a:	f7fc f8df 	bl	80120ec <ctrl_run_tick>
		uint32_t e1 = HAL_GetTick() - t;
 8015f2e:	f7eb ffd5 	bl	8001edc <HAL_GetTick>
 8015f32:	4602      	mov	r2, r0
 8015f34:	697b      	ldr	r3, [r7, #20]
 8015f36:	1ad3      	subs	r3, r2, r3
 8015f38:	60fb      	str	r3, [r7, #12]
#if USE_NOTIF_TIM
#else
		//if (cnt>20) {
		itm_debug1(DBG_LOWCTRL, "--pres", dt);
 8015f3a:	693a      	ldr	r2, [r7, #16]
 8015f3c:	491f      	ldr	r1, [pc, #124]	; (8015fbc <run_task_ctrl+0x1b0>)
 8015f3e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8015f42:	f7ff fe87 	bl	8015c54 <itm_debug1>
		presdect_tick(notif, t, dt);
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	693a      	ldr	r2, [r7, #16]
 8015f4a:	6979      	ldr	r1, [r7, #20]
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	f7fd f971 	bl	8013234 <presdect_tick>
		//}
#endif
		itm_debug1(DBG_LOWCTRL, "--done", dt);
 8015f52:	693a      	ldr	r2, [r7, #16]
 8015f54:	491a      	ldr	r1, [pc, #104]	; (8015fc0 <run_task_ctrl+0x1b4>)
 8015f56:	f44f 7080 	mov.w	r0, #256	; 0x100
 8015f5a:	f7ff fe7b 	bl	8015c54 <itm_debug1>
		uint32_t et = HAL_GetTick() - t;
 8015f5e:	f7eb ffbd 	bl	8001edc <HAL_GetTick>
 8015f62:	4602      	mov	r2, r0
 8015f64:	697b      	ldr	r3, [r7, #20]
 8015f66:	1ad3      	subs	r3, r2, r3
 8015f68:	60bb      	str	r3, [r7, #8]
		if ((1)) {
			itm_debug2(DBG_ERR, "ctrl tick", e1, et);
 8015f6a:	68fa      	ldr	r2, [r7, #12]
 8015f6c:	68bb      	ldr	r3, [r7, #8]
 8015f6e:	4915      	ldr	r1, [pc, #84]	; (8015fc4 <run_task_ctrl+0x1b8>)
 8015f70:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8015f74:	f7ff fe88 	bl	8015c88 <itm_debug2>
			if (et>9) {
 8015f78:	68bb      	ldr	r3, [r7, #8]
 8015f7a:	2b09      	cmp	r3, #9
 8015f7c:	f67f af4b 	bls.w	8015e16 <run_task_ctrl+0xa>
				itm_debug1(DBG_ERR, "long proc", et);
 8015f80:	68bb      	ldr	r3, [r7, #8]
 8015f82:	461a      	mov	r2, r3
 8015f84:	4910      	ldr	r1, [pc, #64]	; (8015fc8 <run_task_ctrl+0x1bc>)
 8015f86:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8015f8a:	f7ff fe63 	bl	8015c54 <itm_debug1>
	for (;;) {
 8015f8e:	e742      	b.n	8015e16 <run_task_ctrl+0xa>
 8015f90:	080171e8 	.word	0x080171e8
 8015f94:	080171f0 	.word	0x080171f0
 8015f98:	80000100 	.word	0x80000100
 8015f9c:	20008dd8 	.word	0x20008dd8
 8015fa0:	200054f8 	.word	0x200054f8
 8015fa4:	200054fc 	.word	0x200054fc
 8015fa8:	080171f8 	.word	0x080171f8
 8015fac:	08017200 	.word	0x08017200
 8015fb0:	0801720c 	.word	0x0801720c
 8015fb4:	08017218 	.word	0x08017218
 8015fb8:	08017224 	.word	0x08017224
 8015fbc:	0801722c 	.word	0x0801722c
 8015fc0:	08017234 	.word	0x08017234
 8015fc4:	0801723c 	.word	0x0801723c
 8015fc8:	08017248 	.word	0x08017248

08015fcc <HAL_ADC_ConvCpltCallback>:
static int nhalf=0;
static int nfull=0;


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* AdcHandle)
{
 8015fcc:	b580      	push	{r7, lr}
 8015fce:	b086      	sub	sp, #24
 8015fd0:	af02      	add	r7, sp, #8
 8015fd2:	6078      	str	r0, [r7, #4]
	nfull++;
 8015fd4:	4b0f      	ldr	r3, [pc, #60]	; (8016014 <HAL_ADC_ConvCpltCallback+0x48>)
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	3301      	adds	r3, #1
 8015fda:	4a0e      	ldr	r2, [pc, #56]	; (8016014 <HAL_ADC_ConvCpltCallback+0x48>)
 8015fdc:	6013      	str	r3, [r2, #0]
	BaseType_t higher=0;
 8015fde:	2300      	movs	r3, #0
 8015fe0:	60fb      	str	r3, [r7, #12]
	if ((0)) itm_debug1(DBG_TIM, "conv/f", HAL_GetTick());
	xTaskNotifyFromISR(ctrlTaskHandle, NOTIF_NEW_ADC_2, eSetBits, &higher);
 8015fe2:	4b0d      	ldr	r3, [pc, #52]	; (8016018 <HAL_ADC_ConvCpltCallback+0x4c>)
 8015fe4:	6818      	ldr	r0, [r3, #0]
 8015fe6:	f107 030c 	add.w	r3, r7, #12
 8015fea:	9300      	str	r3, [sp, #0]
 8015fec:	2300      	movs	r3, #0
 8015fee:	2201      	movs	r2, #1
 8015ff0:	2102      	movs	r1, #2
 8015ff2:	f7f8 fc6d 	bl	800e8d0 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d007      	beq.n	801600c <HAL_ADC_ConvCpltCallback+0x40>
 8015ffc:	4b07      	ldr	r3, [pc, #28]	; (801601c <HAL_ADC_ConvCpltCallback+0x50>)
 8015ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016002:	601a      	str	r2, [r3, #0]
 8016004:	f3bf 8f4f 	dsb	sy
 8016008:	f3bf 8f6f 	isb	sy
}
 801600c:	bf00      	nop
 801600e:	3710      	adds	r7, #16
 8016010:	46bd      	mov	sp, r7
 8016012:	bd80      	pop	{r7, pc}
 8016014:	200054f4 	.word	0x200054f4
 8016018:	20006224 	.word	0x20006224
 801601c:	e000ed04 	.word	0xe000ed04

08016020 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8016020:	b580      	push	{r7, lr}
 8016022:	b086      	sub	sp, #24
 8016024:	af02      	add	r7, sp, #8
 8016026:	6078      	str	r0, [r7, #4]
	nhalf++;
 8016028:	4b0f      	ldr	r3, [pc, #60]	; (8016068 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	3301      	adds	r3, #1
 801602e:	4a0e      	ldr	r2, [pc, #56]	; (8016068 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8016030:	6013      	str	r3, [r2, #0]
	BaseType_t higher=0;
 8016032:	2300      	movs	r3, #0
 8016034:	60fb      	str	r3, [r7, #12]
	if ((0)) itm_debug1(DBG_TIM, "conv/h", HAL_GetTick());
	xTaskNotifyFromISR(ctrlTaskHandle, NOTIF_NEW_ADC_1, eSetBits, &higher);
 8016036:	4b0d      	ldr	r3, [pc, #52]	; (801606c <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 8016038:	6818      	ldr	r0, [r3, #0]
 801603a:	f107 030c 	add.w	r3, r7, #12
 801603e:	9300      	str	r3, [sp, #0]
 8016040:	2300      	movs	r3, #0
 8016042:	2201      	movs	r2, #1
 8016044:	2101      	movs	r1, #1
 8016046:	f7f8 fc43 	bl	800e8d0 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	2b00      	cmp	r3, #0
 801604e:	d007      	beq.n	8016060 <HAL_ADC_ConvHalfCpltCallback+0x40>
 8016050:	4b07      	ldr	r3, [pc, #28]	; (8016070 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 8016052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016056:	601a      	str	r2, [r3, #0]
 8016058:	f3bf 8f4f 	dsb	sy
 801605c:	f3bf 8f6f 	isb	sy
}
 8016060:	bf00      	nop
 8016062:	3710      	adds	r7, #16
 8016064:	46bd      	mov	sp, r7
 8016066:	bd80      	pop	{r7, pc}
 8016068:	200054f0 	.word	0x200054f0
 801606c:	20006224 	.word	0x20006224
 8016070:	e000ed04 	.word	0xe000ed04

08016074 <HAL_ADC_ErrorCallback>:
void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
	itm_debug1(DBG_ERR|DBG_TIM, "ADC ERR", 1);
}
void  HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8016074:	b580      	push	{r7, lr}
 8016076:	b082      	sub	sp, #8
 8016078:	af00      	add	r7, sp, #0
 801607a:	6078      	str	r0, [r7, #4]
	itm_debug1(DBG_ERR|DBG_TIM, "ADC ERR", 0);
 801607c:	2200      	movs	r2, #0
 801607e:	4904      	ldr	r1, [pc, #16]	; (8016090 <HAL_ADC_ErrorCallback+0x1c>)
 8016080:	4804      	ldr	r0, [pc, #16]	; (8016094 <HAL_ADC_ErrorCallback+0x20>)
 8016082:	f7ff fde7 	bl	8015c54 <itm_debug1>
}
 8016086:	bf00      	nop
 8016088:	3708      	adds	r7, #8
 801608a:	46bd      	mov	sp, r7
 801608c:	bd80      	pop	{r7, pc}
 801608e:	bf00      	nop
 8016090:	08017254 	.word	0x08017254
 8016094:	80000001 	.word	0x80000001

08016098 <i2c_ready>:

#endif
/// ----------------------------------

static void i2c_ready(int a)
{
 8016098:	b480      	push	{r7}
 801609a:	b083      	sub	sp, #12
 801609c:	af00      	add	r7, sp, #0
 801609e:	6078      	str	r0, [r7, #4]

}
 80160a0:	bf00      	nop
 80160a2:	370c      	adds	r7, #12
 80160a4:	46bd      	mov	sp, r7
 80160a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160aa:	4770      	bx	lr

080160ac <I2C_Scan>:
static void I2C_Scan(void)
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	b082      	sub	sp, #8
 80160b0:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 80160b2:	2300      	movs	r3, #0
 80160b4:	80fb      	strh	r3, [r7, #6]
 80160b6:	e013      	b.n	80160e0 <I2C_Scan+0x34>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 80160b8:	88fb      	ldrh	r3, [r7, #6]
 80160ba:	005b      	lsls	r3, r3, #1
 80160bc:	b299      	uxth	r1, r3
 80160be:	230a      	movs	r3, #10
 80160c0:	2201      	movs	r2, #1
 80160c2:	480b      	ldr	r0, [pc, #44]	; (80160f0 <I2C_Scan+0x44>)
 80160c4:	f7ed fb74 	bl	80037b0 <HAL_I2C_IsDeviceReady>
 80160c8:	4603      	mov	r3, r0
 80160ca:	717b      	strb	r3, [r7, #5]
        if(res == HAL_OK) {
 80160cc:	797b      	ldrb	r3, [r7, #5]
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d103      	bne.n	80160da <I2C_Scan+0x2e>
        	i2c_ready(i);
 80160d2:	88fb      	ldrh	r3, [r7, #6]
 80160d4:	4618      	mov	r0, r3
 80160d6:	f7ff ffdf 	bl	8016098 <i2c_ready>
    for(uint16_t i = 0; i < 128; i++) {
 80160da:	88fb      	ldrh	r3, [r7, #6]
 80160dc:	3301      	adds	r3, #1
 80160de:	80fb      	strh	r3, [r7, #6]
 80160e0:	88fb      	ldrh	r3, [r7, #6]
 80160e2:	2b7f      	cmp	r3, #127	; 0x7f
 80160e4:	d9e8      	bls.n	80160b8 <I2C_Scan+0xc>
        } else {
        }
    }
}
 80160e6:	bf00      	nop
 80160e8:	3708      	adds	r7, #8
 80160ea:	46bd      	mov	sp, r7
 80160ec:	bd80      	pop	{r7, pc}
 80160ee:	bf00      	nop
 80160f0:	20005cd8 	.word	0x20005cd8

080160f4 <StartUiTask>:
static int test_mode = 0;

*/

void StartUiTask(void *argument)
{
 80160f4:	b580      	push	{r7, lr}
 80160f6:	b084      	sub	sp, #16
 80160f8:	af00      	add	r7, sp, #0
 80160fa:	6078      	str	r0, [r7, #4]
	// init
	extern TIM_HandleTypeDef htim4;

	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80160fc:	213c      	movs	r1, #60	; 0x3c
 80160fe:	480b      	ldr	r0, [pc, #44]	; (801612c <StartUiTask+0x38>)
 8016100:	f7f1 fce8 	bl	8007ad4 <HAL_TIM_Encoder_Start>

	//display_addr[0] = 0; //XXX
	//needsrefresh_mask = 0;
	for (int i=0; i<MAX_DISP; i++) {
 8016104:	2300      	movs	r3, #0
 8016106:	60fb      	str	r3, [r7, #12]
 8016108:	e006      	b.n	8016118 <StartUiTask+0x24>
		I2C_Scan();
 801610a:	f7ff ffcf 	bl	80160ac <I2C_Scan>
		ssd1306_Init();
 801610e:	f7fa f999 	bl	8010444 <ssd1306_Init>
	for (int i=0; i<MAX_DISP; i++) {
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	3301      	adds	r3, #1
 8016116:	60fb      	str	r3, [r7, #12]
 8016118:	68fb      	ldr	r3, [r7, #12]
 801611a:	2b00      	cmp	r3, #0
 801611c:	ddf5      	ble.n	801610a <StartUiTask+0x16>
			itm_debug1(DBG_ERR|DBG_UI, "notif?", notif);
		}
		if (!(notif & NOTIF_TICKUI)) continue;
#else
		static TickType_t lasttick = 0;
		vTaskDelayUntil(&lasttick, 100);
 801611e:	2164      	movs	r1, #100	; 0x64
 8016120:	4803      	ldr	r0, [pc, #12]	; (8016130 <StartUiTask+0x3c>)
 8016122:	f7f7 fdef 	bl	800dd04 <vTaskDelayUntil>
		//lasttick = HAL_GetTick();

#endif
		ihm_runtick();
 8016126:	f7fb fb43 	bl	80117b0 <ihm_runtick>
	for (;;) {
 801612a:	e7f8      	b.n	801611e <StartUiTask+0x2a>
 801612c:	20005c94 	.word	0x20005c94
 8016130:	20005500 	.word	0x20005500

08016134 <StartTxRxFrameTask>:

static void handleRxChars(frame_msg_t *m);
static void _send_bytes(uint8_t *b, int len);

void StartTxRxFrameTask(void *argument)
{
 8016134:	b580      	push	{r7, lr}
 8016136:	b090      	sub	sp, #64	; 0x40
 8016138:	af00      	add	r7, sp, #0
 801613a:	6078      	str	r0, [r7, #4]
	  MX_USB_DEVICE_Init();
 801613c:	f7f9 fc4e 	bl	800f9dc <MX_USB_DEVICE_Init>
		if ((0)) {
			osDelay(10000);
			continue;
		}
		uint8_t msg_prio;
		osStatus_t rc = osMessageQueueGet(frameQueueHandle, &m, &msg_prio, portMAX_DELAY);
 8016140:	4b27      	ldr	r3, [pc, #156]	; (80161e0 <StartTxRxFrameTask+0xac>)
 8016142:	6818      	ldr	r0, [r3, #0]
 8016144:	f107 0237 	add.w	r2, r7, #55	; 0x37
 8016148:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801614c:	4925      	ldr	r1, [pc, #148]	; (80161e4 <StartTxRxFrameTask+0xb0>)
 801614e:	f7f6 fcdf 	bl	800cb10 <osMessageQueueGet>
 8016152:	63f8      	str	r0, [r7, #60]	; 0x3c
		num_msg_get++;
 8016154:	4b24      	ldr	r3, [pc, #144]	; (80161e8 <StartTxRxFrameTask+0xb4>)
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	3301      	adds	r3, #1
 801615a:	4a23      	ldr	r2, [pc, #140]	; (80161e8 <StartTxRxFrameTask+0xb4>)
 801615c:	6013      	str	r3, [r2, #0]
		if ((0)) flash_led();
        usbPollQueues();
 801615e:	f7fd fdc3 	bl	8013ce8 <usbPollQueues>
        if (rc == osErrorTimeout) continue;
 8016162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016164:	f113 0f02 	cmn.w	r3, #2
 8016168:	d038      	beq.n	80161dc <StartTxRxFrameTask+0xa8>
		if (rc != osOK) {
 801616a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801616c:	2b00      	cmp	r3, #0
 801616e:	d005      	beq.n	801617c <StartTxRxFrameTask+0x48>
			num_msg_get_err++;
 8016170:	4b1e      	ldr	r3, [pc, #120]	; (80161ec <StartTxRxFrameTask+0xb8>)
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	3301      	adds	r3, #1
 8016176:	4a1d      	ldr	r2, [pc, #116]	; (80161ec <StartTxRxFrameTask+0xb8>)
 8016178:	6013      	str	r3, [r2, #0]
			continue;
 801617a:	e030      	b.n	80161de <StartTxRxFrameTask+0xaa>
		}
		if (m.t == RXFRAME_CHARS) {
 801617c:	4b19      	ldr	r3, [pc, #100]	; (80161e4 <StartTxRxFrameTask+0xb0>)
 801617e:	781b      	ldrb	r3, [r3, #0]
 8016180:	2bff      	cmp	r3, #255	; 0xff
 8016182:	d103      	bne.n	801618c <StartTxRxFrameTask+0x58>
			//debug_info('G', 0, "RXFRM", m.len,0, 0);
			handleRxChars(&m);
 8016184:	4817      	ldr	r0, [pc, #92]	; (80161e4 <StartTxRxFrameTask+0xb0>)
 8016186:	f000 f89f 	bl	80162c8 <handleRxChars>
			continue;
 801618a:	e028      	b.n	80161de <StartTxRxFrameTask+0xaa>
		}
		if (m.t == TXFRAME_TYPE_STAT) {
 801618c:	4b15      	ldr	r3, [pc, #84]	; (80161e4 <StartTxRxFrameTask+0xb0>)
 801618e:	781b      	ldrb	r3, [r3, #0]
 8016190:	2b04      	cmp	r3, #4
 8016192:	d11c      	bne.n	80161ce <StartTxRxFrameTask+0x9a>
			uint32_t t = HAL_GetTick();   // XXX t0
 8016194:	f7eb fea2 	bl	8001edc <HAL_GetTick>
 8016198:	63b8      	str	r0, [r7, #56]	; 0x38
			uint8_t b[]="|_NG\000X";
 801619a:	4a15      	ldr	r2, [pc, #84]	; (80161f0 <StartTxRxFrameTask+0xbc>)
 801619c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80161a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80161a4:	6018      	str	r0, [r3, #0]
 80161a6:	3304      	adds	r3, #4
 80161a8:	8019      	strh	r1, [r3, #0]
 80161aa:	3302      	adds	r3, #2
 80161ac:	0c0a      	lsrs	r2, r1, #16
 80161ae:	701a      	strb	r2, [r3, #0]
			//memcpy(b+6, &t, 4);
			_send_bytes(b, 6);
 80161b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80161b4:	2106      	movs	r1, #6
 80161b6:	4618      	mov	r0, r3
 80161b8:	f000 f822 	bl	8016200 <_send_bytes>
			frame_send_stat(_send_bytes, t);
 80161bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80161be:	480d      	ldr	r0, [pc, #52]	; (80161f4 <StartTxRxFrameTask+0xc0>)
 80161c0:	f7fe fad3 	bl	801476a <frame_send_stat>
			_send_bytes((uint8_t *)"|", 1);
 80161c4:	2101      	movs	r1, #1
 80161c6:	480c      	ldr	r0, [pc, #48]	; (80161f8 <StartTxRxFrameTask+0xc4>)
 80161c8:	f000 f81a 	bl	8016200 <_send_bytes>
 80161cc:	e7b8      	b.n	8016140 <StartTxRxFrameTask+0xc>
			continue;
		}
		_send_bytes(m.frm, m.len);
 80161ce:	4b05      	ldr	r3, [pc, #20]	; (80161e4 <StartTxRxFrameTask+0xb0>)
 80161d0:	785b      	ldrb	r3, [r3, #1]
 80161d2:	4619      	mov	r1, r3
 80161d4:	4809      	ldr	r0, [pc, #36]	; (80161fc <StartTxRxFrameTask+0xc8>)
 80161d6:	f000 f813 	bl	8016200 <_send_bytes>
 80161da:	e7b1      	b.n	8016140 <StartTxRxFrameTask+0xc>
        if (rc == osErrorTimeout) continue;
 80161dc:	bf00      	nop
	for (;;) {
 80161de:	e7af      	b.n	8016140 <StartTxRxFrameTask+0xc>
 80161e0:	20005cd4 	.word	0x20005cd4
 80161e4:	20005514 	.word	0x20005514
 80161e8:	20005504 	.word	0x20005504
 80161ec:	2000550c 	.word	0x2000550c
 80161f0:	08017260 	.word	0x08017260
 80161f4:	08016201 	.word	0x08016201
 80161f8:	0801725c 	.word	0x0801725c
 80161fc:	20005516 	.word	0x20005516

08016200 <_send_bytes>:
	}
}
//void frame_send_stat(void(*cb)(uint8_t *d, int l));

static void _send_bytes(uint8_t *b, int len)
{
 8016200:	b580      	push	{r7, lr}
 8016202:	b084      	sub	sp, #16
 8016204:	af00      	add	r7, sp, #0
 8016206:	6078      	str	r0, [r7, #4]
 8016208:	6039      	str	r1, [r7, #0]
	for (;;) {
		uint8_t rc = CDC_Transmit_FS(b, len);
 801620a:	683b      	ldr	r3, [r7, #0]
 801620c:	b29b      	uxth	r3, r3
 801620e:	4619      	mov	r1, r3
 8016210:	6878      	ldr	r0, [r7, #4]
 8016212:	f7f9 fc9b 	bl	800fb4c <CDC_Transmit_FS>
 8016216:	4603      	mov	r3, r0
 8016218:	73fb      	strb	r3, [r7, #15]
		if (rc != USBD_BUSY) break;
 801621a:	7bfb      	ldrb	r3, [r7, #15]
 801621c:	2b01      	cmp	r3, #1
 801621e:	d103      	bne.n	8016228 <_send_bytes+0x28>
		osDelay(1);
 8016220:	2001      	movs	r0, #1
 8016222:	f7f6 fb4d 	bl	800c8c0 <osDelay>
	for (;;) {
 8016226:	e7f0      	b.n	801620a <_send_bytes+0xa>
		if (rc != USBD_BUSY) break;
 8016228:	bf00      	nop
	}
}
 801622a:	bf00      	nop
 801622c:	3710      	adds	r7, #16
 801622e:	46bd      	mov	sp, r7
 8016230:	bd80      	pop	{r7, pc}
	...

08016234 <txframe_send>:

int txframe_queue_full = 0;

void txframe_send(frame_msg_t *m, int discardable)
{
 8016234:	b580      	push	{r7, lr}
 8016236:	b084      	sub	sp, #16
 8016238:	af00      	add	r7, sp, #0
 801623a:	6078      	str	r0, [r7, #4]
 801623c:	6039      	str	r1, [r7, #0]
	int s = osMessageQueueGetSpace(frameQueueHandle);
 801623e:	4b1f      	ldr	r3, [pc, #124]	; (80162bc <txframe_send+0x88>)
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	4618      	mov	r0, r3
 8016244:	f7f6 fcd6 	bl	800cbf4 <osMessageQueueGetSpace>
 8016248:	4603      	mov	r3, r0
 801624a:	60fb      	str	r3, [r7, #12]
	if (s<=0) {
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	2b00      	cmp	r3, #0
 8016250:	dc07      	bgt.n	8016262 <txframe_send+0x2e>
		txframe_queue_full++;
 8016252:	4b1b      	ldr	r3, [pc, #108]	; (80162c0 <txframe_send+0x8c>)
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	3301      	adds	r3, #1
 8016258:	4a19      	ldr	r2, [pc, #100]	; (80162c0 <txframe_send+0x8c>)
 801625a:	6013      	str	r3, [r2, #0]
		if (discardable) return;
 801625c:	683b      	ldr	r3, [r7, #0]
 801625e:	2b00      	cmp	r3, #0
 8016260:	d127      	bne.n	80162b2 <txframe_send+0x7e>
	}
	if ((s<=20) && discardable) {
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	2b14      	cmp	r3, #20
 8016266:	dc08      	bgt.n	801627a <txframe_send+0x46>
 8016268:	683b      	ldr	r3, [r7, #0]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d005      	beq.n	801627a <txframe_send+0x46>
		// we use a single queue, and no priority available with freertos
		// so we just keep some space for non discardable frames
		txframe_queue_full++;
 801626e:	4b14      	ldr	r3, [pc, #80]	; (80162c0 <txframe_send+0x8c>)
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	3301      	adds	r3, #1
 8016274:	4a12      	ldr	r2, [pc, #72]	; (80162c0 <txframe_send+0x8c>)
 8016276:	6013      	str	r3, [r2, #0]
		return;
 8016278:	e01c      	b.n	80162b4 <txframe_send+0x80>
	}
	uint32_t t = discardable ? 0 : portMAX_DELAY;
 801627a:	683b      	ldr	r3, [r7, #0]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d001      	beq.n	8016284 <txframe_send+0x50>
 8016280:	2300      	movs	r3, #0
 8016282:	e001      	b.n	8016288 <txframe_send+0x54>
 8016284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016288:	60bb      	str	r3, [r7, #8]
	if (m->len>FRM_MAX_LEN) m->len=FRM_MAX_LEN;
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	785b      	ldrb	r3, [r3, #1]
 801628e:	2b1f      	cmp	r3, #31
 8016290:	d902      	bls.n	8016298 <txframe_send+0x64>
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	221f      	movs	r2, #31
 8016296:	705a      	strb	r2, [r3, #1]
	num_msg_put++;
 8016298:	4b0a      	ldr	r3, [pc, #40]	; (80162c4 <txframe_send+0x90>)
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	3301      	adds	r3, #1
 801629e:	4a09      	ldr	r2, [pc, #36]	; (80162c4 <txframe_send+0x90>)
 80162a0:	6013      	str	r3, [r2, #0]
	osMessageQueuePut(frameQueueHandle, m, 0, t);
 80162a2:	4b06      	ldr	r3, [pc, #24]	; (80162bc <txframe_send+0x88>)
 80162a4:	6818      	ldr	r0, [r3, #0]
 80162a6:	68bb      	ldr	r3, [r7, #8]
 80162a8:	2200      	movs	r2, #0
 80162aa:	6879      	ldr	r1, [r7, #4]
 80162ac:	f7f6 fbbc 	bl	800ca28 <osMessageQueuePut>
 80162b0:	e000      	b.n	80162b4 <txframe_send+0x80>
		if (discardable) return;
 80162b2:	bf00      	nop
}
 80162b4:	3710      	adds	r7, #16
 80162b6:	46bd      	mov	sp, r7
 80162b8:	bd80      	pop	{r7, pc}
 80162ba:	bf00      	nop
 80162bc:	20005cd4 	.word	0x20005cd4
 80162c0:	20005510 	.word	0x20005510
 80162c4:	20005508 	.word	0x20005508

080162c8 <handleRxChars>:

/* ------ RX ----- */

static void handleRxChars(frame_msg_t *m)
{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	b08e      	sub	sp, #56	; 0x38
 80162cc:	af00      	add	r7, sp, #0
 80162ce:	6078      	str	r0, [r7, #4]
    frame_msg_t frresp;
	frresp.t = TXFRAME_TYPE_RESP;
 80162d0:	2301      	movs	r3, #1
 80162d2:	743b      	strb	r3, [r7, #16]
	/*
	 * int rlen = FRM_MAX_LEN;
	    	frame_process(cRxedChar,m.frm, &rlen);
	 */
	for (int i=0; i<m->len; i++) {
 80162d4:	2300      	movs	r3, #0
 80162d6:	637b      	str	r3, [r7, #52]	; 0x34
 80162d8:	e01c      	b.n	8016314 <handleRxChars+0x4c>
		int rlen = FRM_MAX_LEN;
 80162da:	231f      	movs	r3, #31
 80162dc:	60fb      	str	r3, [r7, #12]
		txrx_process_char(m->frm[i], frresp.frm, &rlen);
 80162de:	687a      	ldr	r2, [r7, #4]
 80162e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162e2:	4413      	add	r3, r2
 80162e4:	3302      	adds	r3, #2
 80162e6:	7818      	ldrb	r0, [r3, #0]
 80162e8:	f107 020c 	add.w	r2, r7, #12
 80162ec:	f107 0310 	add.w	r3, r7, #16
 80162f0:	3302      	adds	r3, #2
 80162f2:	4619      	mov	r1, r3
 80162f4:	f7fd fd0c 	bl	8013d10 <txrx_process_char>
		if (rlen>0) {
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	dd07      	ble.n	801630e <handleRxChars+0x46>
			//debug_info('G', 0, "RESP", rlen,0, 0);
			// would deadlock if we send (non discardable) through the queue
			//txframe_send_response(&frresp, rlen);
			_send_bytes(frresp.frm, rlen);
 80162fe:	68fa      	ldr	r2, [r7, #12]
 8016300:	f107 0310 	add.w	r3, r7, #16
 8016304:	3302      	adds	r3, #2
 8016306:	4611      	mov	r1, r2
 8016308:	4618      	mov	r0, r3
 801630a:	f7ff ff79 	bl	8016200 <_send_bytes>
	for (int i=0; i<m->len; i++) {
 801630e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016310:	3301      	adds	r3, #1
 8016312:	637b      	str	r3, [r7, #52]	; 0x34
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	785b      	ldrb	r3, [r3, #1]
 8016318:	461a      	mov	r2, r3
 801631a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801631c:	4293      	cmp	r3, r2
 801631e:	dbdc      	blt.n	80162da <handleRxChars+0x12>
			//frresp.len = rlen;
			//_send_frm(&frresp);
		}
	}
}
 8016320:	bf00      	nop
 8016322:	3738      	adds	r7, #56	; 0x38
 8016324:	46bd      	mov	sp, r7
 8016326:	bd80      	pop	{r7, pc}

08016328 <impl_CDC_Receive_FS>:

extern USBD_HandleTypeDef hUsbDeviceFS;


int8_t impl_CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016328:	b580      	push	{r7, lr}
 801632a:	b086      	sub	sp, #24
 801632c:	af00      	add	r7, sp, #0
 801632e:	6078      	str	r0, [r7, #4]
 8016330:	6039      	str	r1, [r7, #0]
	if ((0)) {
		sprintf(str, "[B%d]\r\n", *Len);
		CDC_Transmit_FS(str, strlen(str));
	}
	*/
	uint8_t *p = Buf;
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	617b      	str	r3, [r7, #20]
	int32_t rlen = *Len;
 8016336:	683b      	ldr	r3, [r7, #0]
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	613b      	str	r3, [r7, #16]
	for (;;) {
		//BaseType_t xHigherPriorityTaskWoken = pdFALSE;
		frrx.t = RXFRAME_CHARS;
 801633c:	4b18      	ldr	r3, [pc, #96]	; (80163a0 <impl_CDC_Receive_FS+0x78>)
 801633e:	22ff      	movs	r2, #255	; 0xff
 8016340:	701a      	strb	r2, [r3, #0]
		int l = MIN(rlen, RXFRAME_CHARS);
 8016342:	693b      	ldr	r3, [r7, #16]
 8016344:	2bff      	cmp	r3, #255	; 0xff
 8016346:	bfa8      	it	ge
 8016348:	23ff      	movge	r3, #255	; 0xff
 801634a:	60fb      	str	r3, [r7, #12]
		memcpy(frrx.frm, p, l);
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	461a      	mov	r2, r3
 8016350:	6979      	ldr	r1, [r7, #20]
 8016352:	4814      	ldr	r0, [pc, #80]	; (80163a4 <impl_CDC_Receive_FS+0x7c>)
 8016354:	f000 fb06 	bl	8016964 <memcpy>
		rlen -= l;
 8016358:	693a      	ldr	r2, [r7, #16]
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	1ad3      	subs	r3, r2, r3
 801635e:	613b      	str	r3, [r7, #16]
		p += l;
 8016360:	68fb      	ldr	r3, [r7, #12]
 8016362:	697a      	ldr	r2, [r7, #20]
 8016364:	4413      	add	r3, r2
 8016366:	617b      	str	r3, [r7, #20]
		frrx.len = l;
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	b2da      	uxtb	r2, r3
 801636c:	4b0c      	ldr	r3, [pc, #48]	; (80163a0 <impl_CDC_Receive_FS+0x78>)
 801636e:	705a      	strb	r2, [r3, #1]
		osMessageQueuePut(frameQueueHandle, &frrx, 0, 0);
 8016370:	4b0d      	ldr	r3, [pc, #52]	; (80163a8 <impl_CDC_Receive_FS+0x80>)
 8016372:	6818      	ldr	r0, [r3, #0]
 8016374:	2300      	movs	r3, #0
 8016376:	2200      	movs	r2, #0
 8016378:	4909      	ldr	r1, [pc, #36]	; (80163a0 <impl_CDC_Receive_FS+0x78>)
 801637a:	f7f6 fb55 	bl	800ca28 <osMessageQueuePut>
		if (rlen <= 0) break;
 801637e:	693b      	ldr	r3, [r7, #16]
 8016380:	2b00      	cmp	r3, #0
 8016382:	dd00      	ble.n	8016386 <impl_CDC_Receive_FS+0x5e>
	for (;;) {
 8016384:	e7da      	b.n	801633c <impl_CDC_Receive_FS+0x14>
		if (rlen <= 0) break;
 8016386:	bf00      	nop
	}

	//CDC_Transmit_FS(Buf, *Len); // ADD THIS LINE to echo back all incoming data

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8016388:	6879      	ldr	r1, [r7, #4]
 801638a:	4808      	ldr	r0, [pc, #32]	; (80163ac <impl_CDC_Receive_FS+0x84>)
 801638c:	f7f5 f80e 	bl	800b3ac <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016390:	4806      	ldr	r0, [pc, #24]	; (80163ac <impl_CDC_Receive_FS+0x84>)
 8016392:	f7f5 f84f 	bl	800b434 <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 8016396:	2300      	movs	r3, #0
}
 8016398:	4618      	mov	r0, r3
 801639a:	3718      	adds	r7, #24
 801639c:	46bd      	mov	sp, r7
 801639e:	bd80      	pop	{r7, pc}
 80163a0:	20005538 	.word	0x20005538
 80163a4:	2000553a 	.word	0x2000553a
 80163a8:	20005cd4 	.word	0x20005cd4
 80163ac:	20006f44 	.word	0x20006f44

080163b0 <_blk_num_for_sub_num>:
#include <stddef.h>
#include "topology.h"


int _blk_num_for_sub_num(int subnum)
{
 80163b0:	b480      	push	{r7}
 80163b2:	b083      	sub	sp, #12
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	6078      	str	r0, [r7, #4]
	if (subnum == 2) return 0;
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	2b02      	cmp	r3, #2
 80163bc:	d101      	bne.n	80163c2 <_blk_num_for_sub_num+0x12>
 80163be:	2300      	movs	r3, #0
 80163c0:	e00b      	b.n	80163da <_blk_num_for_sub_num+0x2a>
	if (subnum == 1) return 1;
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	2b01      	cmp	r3, #1
 80163c6:	d101      	bne.n	80163cc <_blk_num_for_sub_num+0x1c>
 80163c8:	2301      	movs	r3, #1
 80163ca:	e006      	b.n	80163da <_blk_num_for_sub_num+0x2a>
	if (subnum == 0) return 2;
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d101      	bne.n	80163d6 <_blk_num_for_sub_num+0x26>
 80163d2:	2302      	movs	r3, #2
 80163d4:	e001      	b.n	80163da <_blk_num_for_sub_num+0x2a>
	return -1;
 80163d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80163da:	4618      	mov	r0, r3
 80163dc:	370c      	adds	r7, #12
 80163de:	46bd      	mov	sp, r7
 80163e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e4:	4770      	bx	lr
	...

080163e8 <_next_block_num>:

static int sw1 = 0;

int _next_block_num(int blknum, uint8_t left)
{
 80163e8:	b480      	push	{r7}
 80163ea:	b083      	sub	sp, #12
 80163ec:	af00      	add	r7, sp, #0
 80163ee:	6078      	str	r0, [r7, #4]
 80163f0:	460b      	mov	r3, r1
 80163f2:	70fb      	strb	r3, [r7, #3]
	if ((0)) return -1; // XXX
	switch (blknum) {
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	2b01      	cmp	r3, #1
 80163f8:	d00b      	beq.n	8016412 <_next_block_num+0x2a>
 80163fa:	2b02      	cmp	r3, #2
 80163fc:	d017      	beq.n	801642e <_next_block_num+0x46>
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d11d      	bne.n	801643e <_next_block_num+0x56>
	case 0:
		return left ? 	-1 : 1;
 8016402:	78fb      	ldrb	r3, [r7, #3]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d002      	beq.n	801640e <_next_block_num+0x26>
 8016408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801640c:	e019      	b.n	8016442 <_next_block_num+0x5a>
 801640e:	2301      	movs	r3, #1
 8016410:	e017      	b.n	8016442 <_next_block_num+0x5a>
	case 1:
		return left ?	(sw1 ? 2 : 0)  : -1;
 8016412:	78fb      	ldrb	r3, [r7, #3]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d007      	beq.n	8016428 <_next_block_num+0x40>
 8016418:	4b0d      	ldr	r3, [pc, #52]	; (8016450 <_next_block_num+0x68>)
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	2b00      	cmp	r3, #0
 801641e:	d001      	beq.n	8016424 <_next_block_num+0x3c>
 8016420:	2302      	movs	r3, #2
 8016422:	e00e      	b.n	8016442 <_next_block_num+0x5a>
 8016424:	2300      	movs	r3, #0
 8016426:	e00c      	b.n	8016442 <_next_block_num+0x5a>
 8016428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801642c:	e009      	b.n	8016442 <_next_block_num+0x5a>
	case 2:
		return left ?   -1 : 1;
 801642e:	78fb      	ldrb	r3, [r7, #3]
 8016430:	2b00      	cmp	r3, #0
 8016432:	d002      	beq.n	801643a <_next_block_num+0x52>
 8016434:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016438:	e003      	b.n	8016442 <_next_block_num+0x5a>
 801643a:	2301      	movs	r3, #1
 801643c:	e001      	b.n	8016442 <_next_block_num+0x5a>
	default:
		return -1;
 801643e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8016442:	4618      	mov	r0, r3
 8016444:	370c      	adds	r7, #12
 8016446:	46bd      	mov	sp, r7
 8016448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801644c:	4770      	bx	lr
 801644e:	bf00      	nop
 8016450:	2000555c 	.word	0x2000555c

08016454 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8016454:	b480      	push	{r7}
 8016456:	b083      	sub	sp, #12
 8016458:	af00      	add	r7, sp, #0
 801645a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 801645c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8016460:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8016464:	f003 0301 	and.w	r3, r3, #1
 8016468:	2b00      	cmp	r3, #0
 801646a:	d013      	beq.n	8016494 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 801646c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8016470:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8016474:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8016478:	2b00      	cmp	r3, #0
 801647a:	d00b      	beq.n	8016494 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 801647c:	e000      	b.n	8016480 <ITM_SendChar+0x2c>
    {
      __NOP();
 801647e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8016480:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	2b00      	cmp	r3, #0
 8016488:	d0f9      	beq.n	801647e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 801648a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801648e:	687a      	ldr	r2, [r7, #4]
 8016490:	b2d2      	uxtb	r2, r2
 8016492:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8016494:	687b      	ldr	r3, [r7, #4]
}
 8016496:	4618      	mov	r0, r3
 8016498:	370c      	adds	r7, #12
 801649a:	46bd      	mov	sp, r7
 801649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a0:	4770      	bx	lr
	...

080164a4 <write_num>:




static void write_num(uint8_t *buf, uint32_t v, int ndigit)
{
 80164a4:	b480      	push	{r7}
 80164a6:	b085      	sub	sp, #20
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	60f8      	str	r0, [r7, #12]
 80164ac:	60b9      	str	r1, [r7, #8]
 80164ae:	607a      	str	r2, [r7, #4]
	for (;ndigit>0; ndigit--) {
 80164b0:	e01a      	b.n	80164e8 <write_num+0x44>
		buf[ndigit-1] = '0'+ (v % 10);
 80164b2:	68b9      	ldr	r1, [r7, #8]
 80164b4:	4b11      	ldr	r3, [pc, #68]	; (80164fc <write_num+0x58>)
 80164b6:	fba3 2301 	umull	r2, r3, r3, r1
 80164ba:	08da      	lsrs	r2, r3, #3
 80164bc:	4613      	mov	r3, r2
 80164be:	009b      	lsls	r3, r3, #2
 80164c0:	4413      	add	r3, r2
 80164c2:	005b      	lsls	r3, r3, #1
 80164c4:	1aca      	subs	r2, r1, r3
 80164c6:	b2d2      	uxtb	r2, r2
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	3b01      	subs	r3, #1
 80164cc:	68f9      	ldr	r1, [r7, #12]
 80164ce:	440b      	add	r3, r1
 80164d0:	3230      	adds	r2, #48	; 0x30
 80164d2:	b2d2      	uxtb	r2, r2
 80164d4:	701a      	strb	r2, [r3, #0]
		v = v/10;
 80164d6:	68bb      	ldr	r3, [r7, #8]
 80164d8:	4a08      	ldr	r2, [pc, #32]	; (80164fc <write_num+0x58>)
 80164da:	fba2 2303 	umull	r2, r3, r2, r3
 80164de:	08db      	lsrs	r3, r3, #3
 80164e0:	60bb      	str	r3, [r7, #8]
	for (;ndigit>0; ndigit--) {
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	3b01      	subs	r3, #1
 80164e6:	607b      	str	r3, [r7, #4]
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	dce1      	bgt.n	80164b2 <write_num+0xe>
	}
}
 80164ee:	bf00      	nop
 80164f0:	3714      	adds	r7, #20
 80164f2:	46bd      	mov	sp, r7
 80164f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164f8:	4770      	bx	lr
 80164fa:	bf00      	nop
 80164fc:	cccccccd 	.word	0xcccccccd

08016500 <_write>:

#ifndef TRAIN_SIMU
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8016500:	b580      	push	{r7, lr}
 8016502:	b086      	sub	sp, #24
 8016504:	af00      	add	r7, sp, #0
 8016506:	60f8      	str	r0, [r7, #12]
 8016508:	60b9      	str	r1, [r7, #8]
 801650a:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 801650c:	2300      	movs	r3, #0
 801650e:	617b      	str	r3, [r7, #20]
 8016510:	e009      	b.n	8016526 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8016512:	68bb      	ldr	r3, [r7, #8]
 8016514:	1c5a      	adds	r2, r3, #1
 8016516:	60ba      	str	r2, [r7, #8]
 8016518:	781b      	ldrb	r3, [r3, #0]
 801651a:	4618      	mov	r0, r3
 801651c:	f7ff ff9a 	bl	8016454 <ITM_SendChar>
	for (int i = 0; i < len; i++)
 8016520:	697b      	ldr	r3, [r7, #20]
 8016522:	3301      	adds	r3, #1
 8016524:	617b      	str	r3, [r7, #20]
 8016526:	697a      	ldr	r2, [r7, #20]
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	429a      	cmp	r2, r3
 801652c:	dbf1      	blt.n	8016512 <_write+0x12>
	}
	return len;
 801652e:	687b      	ldr	r3, [r7, #4]
}
 8016530:	4618      	mov	r0, r3
 8016532:	3718      	adds	r7, #24
 8016534:	46bd      	mov	sp, r7
 8016536:	bd80      	pop	{r7, pc}

08016538 <_itm_debug3>:
#endif


void _itm_debug3(const char *msg, int v1, int v2, int v3, int n)
{
 8016538:	b580      	push	{r7, lr}
 801653a:	b096      	sub	sp, #88	; 0x58
 801653c:	af00      	add	r7, sp, #0
 801653e:	60f8      	str	r0, [r7, #12]
 8016540:	60b9      	str	r1, [r7, #8]
 8016542:	607a      	str	r2, [r7, #4]
 8016544:	603b      	str	r3, [r7, #0]
	uint8_t buf[64];
	memset(buf, 0, sizeof(buf));
 8016546:	f107 0314 	add.w	r3, r7, #20
 801654a:	2240      	movs	r2, #64	; 0x40
 801654c:	2100      	movs	r1, #0
 801654e:	4618      	mov	r0, r3
 8016550:	f000 fa13 	bl	801697a <memset>
	write_num(buf, HAL_GetTick(), 7);
 8016554:	f7eb fcc2 	bl	8001edc <HAL_GetTick>
 8016558:	4601      	mov	r1, r0
 801655a:	f107 0314 	add.w	r3, r7, #20
 801655e:	2207      	movs	r2, #7
 8016560:	4618      	mov	r0, r3
 8016562:	f7ff ff9f 	bl	80164a4 <write_num>
	buf[7]=':';
 8016566:	233a      	movs	r3, #58	; 0x3a
 8016568:	76fb      	strb	r3, [r7, #27]
	strncpy((char *)buf+8, msg, 12);
 801656a:	f107 0314 	add.w	r3, r7, #20
 801656e:	3308      	adds	r3, #8
 8016570:	220c      	movs	r2, #12
 8016572:	68f9      	ldr	r1, [r7, #12]
 8016574:	4618      	mov	r0, r3
 8016576:	f000 fac1 	bl	8016afc <strncpy>
	uint8_t *p = buf+strlen((char *)buf);
 801657a:	f107 0314 	add.w	r3, r7, #20
 801657e:	4618      	mov	r0, r3
 8016580:	f7e9 fe30 	bl	80001e4 <strlen>
 8016584:	4602      	mov	r2, r0
 8016586:	f107 0314 	add.w	r3, r7, #20
 801658a:	4413      	add	r3, r2
 801658c:	657b      	str	r3, [r7, #84]	; 0x54
	if (!n--) goto done;
 801658e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016590:	1e5a      	subs	r2, r3, #1
 8016592:	663a      	str	r2, [r7, #96]	; 0x60
 8016594:	2b00      	cmp	r3, #0
 8016596:	d03c      	beq.n	8016612 <_itm_debug3+0xda>
	*p = '/';
 8016598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801659a:	222f      	movs	r2, #47	; 0x2f
 801659c:	701a      	strb	r2, [r3, #0]
	itoa(v1, (char *)p+1, 10);
 801659e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80165a0:	3301      	adds	r3, #1
 80165a2:	220a      	movs	r2, #10
 80165a4:	4619      	mov	r1, r3
 80165a6:	68b8      	ldr	r0, [r7, #8]
 80165a8:	f000 f9ca 	bl	8016940 <itoa>
	p = buf+strlen((char *)buf);
 80165ac:	f107 0314 	add.w	r3, r7, #20
 80165b0:	4618      	mov	r0, r3
 80165b2:	f7e9 fe17 	bl	80001e4 <strlen>
 80165b6:	4602      	mov	r2, r0
 80165b8:	f107 0314 	add.w	r3, r7, #20
 80165bc:	4413      	add	r3, r2
 80165be:	657b      	str	r3, [r7, #84]	; 0x54
	if (!n--) goto done;
 80165c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80165c2:	1e5a      	subs	r2, r3, #1
 80165c4:	663a      	str	r2, [r7, #96]	; 0x60
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d025      	beq.n	8016616 <_itm_debug3+0xde>
	*p = '/';
 80165ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80165cc:	222f      	movs	r2, #47	; 0x2f
 80165ce:	701a      	strb	r2, [r3, #0]
	itoa(v2, (char *)p+1, 10);
 80165d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80165d2:	3301      	adds	r3, #1
 80165d4:	220a      	movs	r2, #10
 80165d6:	4619      	mov	r1, r3
 80165d8:	6878      	ldr	r0, [r7, #4]
 80165da:	f000 f9b1 	bl	8016940 <itoa>
	p = buf+strlen((char *)buf);
 80165de:	f107 0314 	add.w	r3, r7, #20
 80165e2:	4618      	mov	r0, r3
 80165e4:	f7e9 fdfe 	bl	80001e4 <strlen>
 80165e8:	4602      	mov	r2, r0
 80165ea:	f107 0314 	add.w	r3, r7, #20
 80165ee:	4413      	add	r3, r2
 80165f0:	657b      	str	r3, [r7, #84]	; 0x54
	if (!n--) goto done;
 80165f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80165f4:	1e5a      	subs	r2, r3, #1
 80165f6:	663a      	str	r2, [r7, #96]	; 0x60
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d00e      	beq.n	801661a <_itm_debug3+0xe2>
	*p = '/';
 80165fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80165fe:	222f      	movs	r2, #47	; 0x2f
 8016600:	701a      	strb	r2, [r3, #0]
	itoa(v3, (char *)p+1, 10);
 8016602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016604:	3301      	adds	r3, #1
 8016606:	220a      	movs	r2, #10
 8016608:	4619      	mov	r1, r3
 801660a:	6838      	ldr	r0, [r7, #0]
 801660c:	f000 f998 	bl	8016940 <itoa>
 8016610:	e004      	b.n	801661c <_itm_debug3+0xe4>
	if (!n--) goto done;
 8016612:	bf00      	nop
 8016614:	e002      	b.n	801661c <_itm_debug3+0xe4>
	if (!n--) goto done;
 8016616:	bf00      	nop
 8016618:	e000      	b.n	801661c <_itm_debug3+0xe4>
	if (!n--) goto done;
 801661a:	bf00      	nop
done:
	p = buf+strlen((char *)buf);
 801661c:	f107 0314 	add.w	r3, r7, #20
 8016620:	4618      	mov	r0, r3
 8016622:	f7e9 fddf 	bl	80001e4 <strlen>
 8016626:	4602      	mov	r2, r0
 8016628:	f107 0314 	add.w	r3, r7, #20
 801662c:	4413      	add	r3, r2
 801662e:	657b      	str	r3, [r7, #84]	; 0x54
	*p = '\n';
 8016630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016632:	220a      	movs	r2, #10
 8016634:	701a      	strb	r2, [r3, #0]
#ifndef TRAIN_SIMU
	_write(0, buf, strlen((char *)buf));
 8016636:	f107 0314 	add.w	r3, r7, #20
 801663a:	4618      	mov	r0, r3
 801663c:	f7e9 fdd2 	bl	80001e4 <strlen>
 8016640:	4603      	mov	r3, r0
 8016642:	461a      	mov	r2, r3
 8016644:	f107 0314 	add.w	r3, r7, #20
 8016648:	4619      	mov	r1, r3
 801664a:	2000      	movs	r0, #0
 801664c:	f7ff ff58 	bl	8016500 <_write>
#else
    puts((char*)buf);
    //write(0, buf, strlen((char *)buf));
#endif
}
 8016650:	bf00      	nop
 8016652:	3758      	adds	r7, #88	; 0x58
 8016654:	46bd      	mov	sp, r7
 8016656:	bd80      	pop	{r7, pc}

08016658 <itm_debug1>:
{
 8016658:	b580      	push	{r7, lr}
 801665a:	b086      	sub	sp, #24
 801665c:	af02      	add	r7, sp, #8
 801665e:	60f8      	str	r0, [r7, #12]
 8016660:	60b9      	str	r1, [r7, #8]
 8016662:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8016664:	4b08      	ldr	r3, [pc, #32]	; (8016688 <itm_debug1+0x30>)
 8016666:	681a      	ldr	r2, [r3, #0]
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	4013      	ands	r3, r2
 801666c:	2b00      	cmp	r3, #0
 801666e:	d007      	beq.n	8016680 <itm_debug1+0x28>
 8016670:	2301      	movs	r3, #1
 8016672:	9300      	str	r3, [sp, #0]
 8016674:	2300      	movs	r3, #0
 8016676:	2200      	movs	r2, #0
 8016678:	6879      	ldr	r1, [r7, #4]
 801667a:	68b8      	ldr	r0, [r7, #8]
 801667c:	f7ff ff5c 	bl	8016538 <_itm_debug3>
}
 8016680:	bf00      	nop
 8016682:	3710      	adds	r7, #16
 8016684:	46bd      	mov	sp, r7
 8016686:	bd80      	pop	{r7, pc}
 8016688:	20000538 	.word	0x20000538

0801668c <mqf_len>:
	m->tail = 0;
	m->maxuse = 0;
}

int mqf_len(mqf_t *m)
{
 801668c:	b580      	push	{r7, lr}
 801668e:	b084      	sub	sp, #16
 8016690:	af00      	add	r7, sp, #0
 8016692:	6078      	str	r0, [r7, #4]
	int l;
	if (m->head >= m->tail) {
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	881b      	ldrh	r3, [r3, #0]
 8016698:	b29a      	uxth	r2, r3
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	885b      	ldrh	r3, [r3, #2]
 801669e:	b29b      	uxth	r3, r3
 80166a0:	429a      	cmp	r2, r3
 80166a2:	d309      	bcc.n	80166b8 <mqf_len+0x2c>
		l = (m->head - m->tail);
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	881b      	ldrh	r3, [r3, #0]
 80166a8:	b29b      	uxth	r3, r3
 80166aa:	461a      	mov	r2, r3
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	885b      	ldrh	r3, [r3, #2]
 80166b0:	b29b      	uxth	r3, r3
 80166b2:	1ad3      	subs	r3, r2, r3
 80166b4:	60fb      	str	r3, [r7, #12]
 80166b6:	e00b      	b.n	80166d0 <mqf_len+0x44>
	} else   {
		l = m->num + m->head - m->tail;
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	795b      	ldrb	r3, [r3, #5]
 80166bc:	461a      	mov	r2, r3
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	881b      	ldrh	r3, [r3, #0]
 80166c2:	b29b      	uxth	r3, r3
 80166c4:	4413      	add	r3, r2
 80166c6:	687a      	ldr	r2, [r7, #4]
 80166c8:	8852      	ldrh	r2, [r2, #2]
 80166ca:	b292      	uxth	r2, r2
 80166cc:	1a9b      	subs	r3, r3, r2
 80166ce:	60fb      	str	r3, [r7, #12]
	}
	if (l<0) {
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	da05      	bge.n	80166e2 <mqf_len+0x56>
		itm_debug1(DBG_MSG, "big pb", 1);
 80166d6:	2201      	movs	r2, #1
 80166d8:	4904      	ldr	r1, [pc, #16]	; (80166ec <mqf_len+0x60>)
 80166da:	2002      	movs	r0, #2
 80166dc:	f7ff ffbc 	bl	8016658 <itm_debug1>
		for (;;);
 80166e0:	e7fe      	b.n	80166e0 <mqf_len+0x54>
	}
	return l;
 80166e2:	68fb      	ldr	r3, [r7, #12]
}
 80166e4:	4618      	mov	r0, r3
 80166e6:	3710      	adds	r7, #16
 80166e8:	46bd      	mov	sp, r7
 80166ea:	bd80      	pop	{r7, pc}
 80166ec:	08017268 	.word	0x08017268

080166f0 <mqf_qfull>:

void dump_msg(mqf_t *mq, int n);

void mqf_qfull(mqf_t *m, int t)
{
 80166f0:	b580      	push	{r7, lr}
 80166f2:	b084      	sub	sp, #16
 80166f4:	af00      	add	r7, sp, #0
 80166f6:	6078      	str	r0, [r7, #4]
 80166f8:	6039      	str	r1, [r7, #0]
	itm_debug1(DBG_ERR|DBG_MSG, "w/full", 0);
 80166fa:	2200      	movs	r2, #0
 80166fc:	490e      	ldr	r1, [pc, #56]	; (8016738 <mqf_qfull+0x48>)
 80166fe:	480f      	ldr	r0, [pc, #60]	; (801673c <mqf_qfull+0x4c>)
 8016700:	f7ff ffaa 	bl	8016658 <itm_debug1>
	for (;;) {
		static uint8_t dmp = 0;
		if (dmp) {
 8016704:	4b0e      	ldr	r3, [pc, #56]	; (8016740 <mqf_qfull+0x50>)
 8016706:	781b      	ldrb	r3, [r3, #0]
 8016708:	2b00      	cmp	r3, #0
 801670a:	d0fb      	beq.n	8016704 <mqf_qfull+0x14>
			dmp = 0;
 801670c:	4b0c      	ldr	r3, [pc, #48]	; (8016740 <mqf_qfull+0x50>)
 801670e:	2200      	movs	r2, #0
 8016710:	701a      	strb	r2, [r3, #0]
			for (int i=0; i<mqf_len(m); i++) {
 8016712:	2300      	movs	r3, #0
 8016714:	60fb      	str	r3, [r7, #12]
 8016716:	e006      	b.n	8016726 <mqf_qfull+0x36>
				dump_msg(m, i);
 8016718:	68f9      	ldr	r1, [r7, #12]
 801671a:	6878      	ldr	r0, [r7, #4]
 801671c:	f7fe f9e6 	bl	8014aec <dump_msg>
			for (int i=0; i<mqf_len(m); i++) {
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	3301      	adds	r3, #1
 8016724:	60fb      	str	r3, [r7, #12]
 8016726:	6878      	ldr	r0, [r7, #4]
 8016728:	f7ff ffb0 	bl	801668c <mqf_len>
 801672c:	4602      	mov	r2, r0
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	4293      	cmp	r3, r2
 8016732:	dbf1      	blt.n	8016718 <mqf_qfull+0x28>
	for (;;) {
 8016734:	e7e6      	b.n	8016704 <mqf_qfull+0x14>
 8016736:	bf00      	nop
 8016738:	08017270 	.word	0x08017270
 801673c:	80000002 	.word	0x80000002
 8016740:	20005560 	.word	0x20005560

08016744 <mqf_write>:
			}
		}
	}
}
int mqf_write(mqf_t *m, void *ptr)
{
 8016744:	b580      	push	{r7, lr}
 8016746:	b084      	sub	sp, #16
 8016748:	af00      	add	r7, sp, #0
 801674a:	6078      	str	r0, [r7, #4]
 801674c:	6039      	str	r1, [r7, #0]
	int l = mqf_len(m);
 801674e:	6878      	ldr	r0, [r7, #4]
 8016750:	f7ff ff9c 	bl	801668c <mqf_len>
 8016754:	60f8      	str	r0, [r7, #12]
	void Error_Handler(void);
	if (l<0) Error_Handler();
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	2b00      	cmp	r3, #0
 801675a:	da01      	bge.n	8016760 <mqf_write+0x1c>
 801675c:	f7ea feaa 	bl	80014b4 <Error_Handler>
	if (l > m->maxuse) m->maxuse = l;
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	799b      	ldrb	r3, [r3, #6]
 8016764:	461a      	mov	r2, r3
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	4293      	cmp	r3, r2
 801676a:	dd03      	ble.n	8016774 <mqf_write+0x30>
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	b2da      	uxtb	r2, r3
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	719a      	strb	r2, [r3, #6]

    if (m->num == l) {
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	795b      	ldrb	r3, [r3, #5]
 8016778:	461a      	mov	r2, r3
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	4293      	cmp	r3, r2
 801677e:	d10b      	bne.n	8016798 <mqf_write+0x54>
		itm_debug1(DBG_ERR|DBG_MSG, "w/full", 0);
 8016780:	2200      	movs	r2, #0
 8016782:	492a      	ldr	r1, [pc, #168]	; (801682c <mqf_write+0xe8>)
 8016784:	482a      	ldr	r0, [pc, #168]	; (8016830 <mqf_write+0xec>)
 8016786:	f7ff ff67 	bl	8016658 <itm_debug1>
		mqf_qfull(m,0);
 801678a:	2100      	movs	r1, #0
 801678c:	6878      	ldr	r0, [r7, #4]
 801678e:	f7ff ffaf 	bl	80166f0 <mqf_qfull>
        return -1;
 8016792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016796:	e045      	b.n	8016824 <mqf_write+0xe0>
    }
    if (m->num-1 == l) {
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	795b      	ldrb	r3, [r3, #5]
 801679c:	3b01      	subs	r3, #1
 801679e:	68fa      	ldr	r2, [r7, #12]
 80167a0:	429a      	cmp	r2, r3
 80167a2:	d111      	bne.n	80167c8 <mqf_write+0x84>
    	itm_debug1(DBG_MSG, "w/full1", m->silentdrop);
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	79db      	ldrb	r3, [r3, #7]
 80167a8:	461a      	mov	r2, r3
 80167aa:	4922      	ldr	r1, [pc, #136]	; (8016834 <mqf_write+0xf0>)
 80167ac:	2002      	movs	r0, #2
 80167ae:	f7ff ff53 	bl	8016658 <itm_debug1>
    	if (!m->silentdrop) mqf_qfull(m,1);
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	79db      	ldrb	r3, [r3, #7]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d103      	bne.n	80167c2 <mqf_write+0x7e>
 80167ba:	2101      	movs	r1, #1
 80167bc:	6878      	ldr	r0, [r7, #4]
 80167be:	f7ff ff97 	bl	80166f0 <mqf_qfull>
        return -1;
 80167c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80167c6:	e02d      	b.n	8016824 <mqf_write+0xe0>
    }
	void *p = &(m->msgbuf[m->head*m->msgsiz]);
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	689b      	ldr	r3, [r3, #8]
 80167cc:	687a      	ldr	r2, [r7, #4]
 80167ce:	8812      	ldrh	r2, [r2, #0]
 80167d0:	b292      	uxth	r2, r2
 80167d2:	4611      	mov	r1, r2
 80167d4:	687a      	ldr	r2, [r7, #4]
 80167d6:	7912      	ldrb	r2, [r2, #4]
 80167d8:	fb02 f201 	mul.w	r2, r2, r1
 80167dc:	4413      	add	r3, r2
 80167de:	60bb      	str	r3, [r7, #8]
	memcpy(p, ptr, m->msgsiz);
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	791b      	ldrb	r3, [r3, #4]
 80167e4:	461a      	mov	r2, r3
 80167e6:	6839      	ldr	r1, [r7, #0]
 80167e8:	68b8      	ldr	r0, [r7, #8]
 80167ea:	f000 f8bb 	bl	8016964 <memcpy>
	//__barrier();
    if (m->head == m->num-1) {
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	881b      	ldrh	r3, [r3, #0]
 80167f2:	b29b      	uxth	r3, r3
 80167f4:	461a      	mov	r2, r3
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	795b      	ldrb	r3, [r3, #5]
 80167fa:	3b01      	subs	r3, #1
 80167fc:	429a      	cmp	r2, r3
 80167fe:	d103      	bne.n	8016808 <mqf_write+0xc4>
        m->head = 0;
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	2200      	movs	r2, #0
 8016804:	801a      	strh	r2, [r3, #0]
 8016806:	e00c      	b.n	8016822 <mqf_write+0xde>
    } else {
        __sync_fetch_and_add(&(m->head), 1);
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	f3bf 8f5b 	dmb	ish
 801680e:	e8d3 2f5f 	ldrexh	r2, [r3]
 8016812:	f102 0201 	add.w	r2, r2, #1
 8016816:	e8c3 2f51 	strexh	r1, r2, [r3]
 801681a:	2900      	cmp	r1, #0
 801681c:	d1f7      	bne.n	801680e <mqf_write+0xca>
 801681e:	f3bf 8f5b 	dmb	ish
    }
	//AtomicInc(p->head);
	return 0;
 8016822:	2300      	movs	r3, #0
}
 8016824:	4618      	mov	r0, r3
 8016826:	3710      	adds	r7, #16
 8016828:	46bd      	mov	sp, r7
 801682a:	bd80      	pop	{r7, pc}
 801682c:	08017270 	.word	0x08017270
 8016830:	80000002 	.word	0x80000002
 8016834:	08017278 	.word	0x08017278

08016838 <mqf_read>:

int mqf_read(mqf_t *m, void *ptr)
{
 8016838:	b580      	push	{r7, lr}
 801683a:	b084      	sub	sp, #16
 801683c:	af00      	add	r7, sp, #0
 801683e:	6078      	str	r0, [r7, #4]
 8016840:	6039      	str	r1, [r7, #0]
	if (!mqf_len(m)) return -1;
 8016842:	6878      	ldr	r0, [r7, #4]
 8016844:	f7ff ff22 	bl	801668c <mqf_len>
 8016848:	4603      	mov	r3, r0
 801684a:	2b00      	cmp	r3, #0
 801684c:	d102      	bne.n	8016854 <mqf_read+0x1c>
 801684e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016852:	e02e      	b.n	80168b2 <mqf_read+0x7a>
    void *p = &(m->msgbuf[m->tail*m->msgsiz]);
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	689b      	ldr	r3, [r3, #8]
 8016858:	687a      	ldr	r2, [r7, #4]
 801685a:	8852      	ldrh	r2, [r2, #2]
 801685c:	b292      	uxth	r2, r2
 801685e:	4611      	mov	r1, r2
 8016860:	687a      	ldr	r2, [r7, #4]
 8016862:	7912      	ldrb	r2, [r2, #4]
 8016864:	fb02 f201 	mul.w	r2, r2, r1
 8016868:	4413      	add	r3, r2
 801686a:	60fb      	str	r3, [r7, #12]
    memcpy(ptr, p, m->msgsiz);
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	791b      	ldrb	r3, [r3, #4]
 8016870:	461a      	mov	r2, r3
 8016872:	68f9      	ldr	r1, [r7, #12]
 8016874:	6838      	ldr	r0, [r7, #0]
 8016876:	f000 f875 	bl	8016964 <memcpy>
    //__barrier();
    if (m->tail == m->num-1) {
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	885b      	ldrh	r3, [r3, #2]
 801687e:	b29b      	uxth	r3, r3
 8016880:	461a      	mov	r2, r3
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	795b      	ldrb	r3, [r3, #5]
 8016886:	3b01      	subs	r3, #1
 8016888:	429a      	cmp	r2, r3
 801688a:	d103      	bne.n	8016894 <mqf_read+0x5c>
        m->tail = 0;
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	2200      	movs	r2, #0
 8016890:	805a      	strh	r2, [r3, #2]
 8016892:	e00d      	b.n	80168b0 <mqf_read+0x78>
    } else {
        __sync_fetch_and_add(&(m->tail), 1);
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	3302      	adds	r3, #2
 8016898:	f3bf 8f5b 	dmb	ish
 801689c:	e8d3 2f5f 	ldrexh	r2, [r3]
 80168a0:	f102 0201 	add.w	r2, r2, #1
 80168a4:	e8c3 2f51 	strexh	r1, r2, [r3]
 80168a8:	2900      	cmp	r1, #0
 80168aa:	d1f7      	bne.n	801689c <mqf_read+0x64>
 80168ac:	f3bf 8f5b 	dmb	ish
    }
    return 0;
 80168b0:	2300      	movs	r3, #0
}
 80168b2:	4618      	mov	r0, r3
 80168b4:	3710      	adds	r7, #16
 80168b6:	46bd      	mov	sp, r7
 80168b8:	bd80      	pop	{r7, pc}
	...

080168bc <__errno>:
 80168bc:	4b01      	ldr	r3, [pc, #4]	; (80168c4 <__errno+0x8>)
 80168be:	6818      	ldr	r0, [r3, #0]
 80168c0:	4770      	bx	lr
 80168c2:	bf00      	nop
 80168c4:	2000053c 	.word	0x2000053c

080168c8 <__libc_init_array>:
 80168c8:	b570      	push	{r4, r5, r6, lr}
 80168ca:	4e0d      	ldr	r6, [pc, #52]	; (8016900 <__libc_init_array+0x38>)
 80168cc:	4c0d      	ldr	r4, [pc, #52]	; (8016904 <__libc_init_array+0x3c>)
 80168ce:	1ba4      	subs	r4, r4, r6
 80168d0:	10a4      	asrs	r4, r4, #2
 80168d2:	2500      	movs	r5, #0
 80168d4:	42a5      	cmp	r5, r4
 80168d6:	d109      	bne.n	80168ec <__libc_init_array+0x24>
 80168d8:	4e0b      	ldr	r6, [pc, #44]	; (8016908 <__libc_init_array+0x40>)
 80168da:	4c0c      	ldr	r4, [pc, #48]	; (801690c <__libc_init_array+0x44>)
 80168dc:	f000 f964 	bl	8016ba8 <_init>
 80168e0:	1ba4      	subs	r4, r4, r6
 80168e2:	10a4      	asrs	r4, r4, #2
 80168e4:	2500      	movs	r5, #0
 80168e6:	42a5      	cmp	r5, r4
 80168e8:	d105      	bne.n	80168f6 <__libc_init_array+0x2e>
 80168ea:	bd70      	pop	{r4, r5, r6, pc}
 80168ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80168f0:	4798      	blx	r3
 80168f2:	3501      	adds	r5, #1
 80168f4:	e7ee      	b.n	80168d4 <__libc_init_array+0xc>
 80168f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80168fa:	4798      	blx	r3
 80168fc:	3501      	adds	r5, #1
 80168fe:	e7f2      	b.n	80168e6 <__libc_init_array+0x1e>
 8016900:	08018c14 	.word	0x08018c14
 8016904:	08018c14 	.word	0x08018c14
 8016908:	08018c14 	.word	0x08018c14
 801690c:	08018c18 	.word	0x08018c18

08016910 <__itoa>:
 8016910:	1e93      	subs	r3, r2, #2
 8016912:	2b22      	cmp	r3, #34	; 0x22
 8016914:	b510      	push	{r4, lr}
 8016916:	460c      	mov	r4, r1
 8016918:	d904      	bls.n	8016924 <__itoa+0x14>
 801691a:	2300      	movs	r3, #0
 801691c:	700b      	strb	r3, [r1, #0]
 801691e:	461c      	mov	r4, r3
 8016920:	4620      	mov	r0, r4
 8016922:	bd10      	pop	{r4, pc}
 8016924:	2a0a      	cmp	r2, #10
 8016926:	d109      	bne.n	801693c <__itoa+0x2c>
 8016928:	2800      	cmp	r0, #0
 801692a:	da07      	bge.n	801693c <__itoa+0x2c>
 801692c:	232d      	movs	r3, #45	; 0x2d
 801692e:	700b      	strb	r3, [r1, #0]
 8016930:	4240      	negs	r0, r0
 8016932:	2101      	movs	r1, #1
 8016934:	4421      	add	r1, r4
 8016936:	f000 f8f7 	bl	8016b28 <__utoa>
 801693a:	e7f1      	b.n	8016920 <__itoa+0x10>
 801693c:	2100      	movs	r1, #0
 801693e:	e7f9      	b.n	8016934 <__itoa+0x24>

08016940 <itoa>:
 8016940:	f7ff bfe6 	b.w	8016910 <__itoa>

08016944 <malloc>:
 8016944:	4b02      	ldr	r3, [pc, #8]	; (8016950 <malloc+0xc>)
 8016946:	4601      	mov	r1, r0
 8016948:	6818      	ldr	r0, [r3, #0]
 801694a:	f000 b86d 	b.w	8016a28 <_malloc_r>
 801694e:	bf00      	nop
 8016950:	2000053c 	.word	0x2000053c

08016954 <free>:
 8016954:	4b02      	ldr	r3, [pc, #8]	; (8016960 <free+0xc>)
 8016956:	4601      	mov	r1, r0
 8016958:	6818      	ldr	r0, [r3, #0]
 801695a:	f000 b817 	b.w	801698c <_free_r>
 801695e:	bf00      	nop
 8016960:	2000053c 	.word	0x2000053c

08016964 <memcpy>:
 8016964:	b510      	push	{r4, lr}
 8016966:	1e43      	subs	r3, r0, #1
 8016968:	440a      	add	r2, r1
 801696a:	4291      	cmp	r1, r2
 801696c:	d100      	bne.n	8016970 <memcpy+0xc>
 801696e:	bd10      	pop	{r4, pc}
 8016970:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016974:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016978:	e7f7      	b.n	801696a <memcpy+0x6>

0801697a <memset>:
 801697a:	4402      	add	r2, r0
 801697c:	4603      	mov	r3, r0
 801697e:	4293      	cmp	r3, r2
 8016980:	d100      	bne.n	8016984 <memset+0xa>
 8016982:	4770      	bx	lr
 8016984:	f803 1b01 	strb.w	r1, [r3], #1
 8016988:	e7f9      	b.n	801697e <memset+0x4>
	...

0801698c <_free_r>:
 801698c:	b538      	push	{r3, r4, r5, lr}
 801698e:	4605      	mov	r5, r0
 8016990:	2900      	cmp	r1, #0
 8016992:	d045      	beq.n	8016a20 <_free_r+0x94>
 8016994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016998:	1f0c      	subs	r4, r1, #4
 801699a:	2b00      	cmp	r3, #0
 801699c:	bfb8      	it	lt
 801699e:	18e4      	addlt	r4, r4, r3
 80169a0:	f000 f900 	bl	8016ba4 <__malloc_lock>
 80169a4:	4a1f      	ldr	r2, [pc, #124]	; (8016a24 <_free_r+0x98>)
 80169a6:	6813      	ldr	r3, [r2, #0]
 80169a8:	4610      	mov	r0, r2
 80169aa:	b933      	cbnz	r3, 80169ba <_free_r+0x2e>
 80169ac:	6063      	str	r3, [r4, #4]
 80169ae:	6014      	str	r4, [r2, #0]
 80169b0:	4628      	mov	r0, r5
 80169b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80169b6:	f000 b8f6 	b.w	8016ba6 <__malloc_unlock>
 80169ba:	42a3      	cmp	r3, r4
 80169bc:	d90c      	bls.n	80169d8 <_free_r+0x4c>
 80169be:	6821      	ldr	r1, [r4, #0]
 80169c0:	1862      	adds	r2, r4, r1
 80169c2:	4293      	cmp	r3, r2
 80169c4:	bf04      	itt	eq
 80169c6:	681a      	ldreq	r2, [r3, #0]
 80169c8:	685b      	ldreq	r3, [r3, #4]
 80169ca:	6063      	str	r3, [r4, #4]
 80169cc:	bf04      	itt	eq
 80169ce:	1852      	addeq	r2, r2, r1
 80169d0:	6022      	streq	r2, [r4, #0]
 80169d2:	6004      	str	r4, [r0, #0]
 80169d4:	e7ec      	b.n	80169b0 <_free_r+0x24>
 80169d6:	4613      	mov	r3, r2
 80169d8:	685a      	ldr	r2, [r3, #4]
 80169da:	b10a      	cbz	r2, 80169e0 <_free_r+0x54>
 80169dc:	42a2      	cmp	r2, r4
 80169de:	d9fa      	bls.n	80169d6 <_free_r+0x4a>
 80169e0:	6819      	ldr	r1, [r3, #0]
 80169e2:	1858      	adds	r0, r3, r1
 80169e4:	42a0      	cmp	r0, r4
 80169e6:	d10b      	bne.n	8016a00 <_free_r+0x74>
 80169e8:	6820      	ldr	r0, [r4, #0]
 80169ea:	4401      	add	r1, r0
 80169ec:	1858      	adds	r0, r3, r1
 80169ee:	4282      	cmp	r2, r0
 80169f0:	6019      	str	r1, [r3, #0]
 80169f2:	d1dd      	bne.n	80169b0 <_free_r+0x24>
 80169f4:	6810      	ldr	r0, [r2, #0]
 80169f6:	6852      	ldr	r2, [r2, #4]
 80169f8:	605a      	str	r2, [r3, #4]
 80169fa:	4401      	add	r1, r0
 80169fc:	6019      	str	r1, [r3, #0]
 80169fe:	e7d7      	b.n	80169b0 <_free_r+0x24>
 8016a00:	d902      	bls.n	8016a08 <_free_r+0x7c>
 8016a02:	230c      	movs	r3, #12
 8016a04:	602b      	str	r3, [r5, #0]
 8016a06:	e7d3      	b.n	80169b0 <_free_r+0x24>
 8016a08:	6820      	ldr	r0, [r4, #0]
 8016a0a:	1821      	adds	r1, r4, r0
 8016a0c:	428a      	cmp	r2, r1
 8016a0e:	bf04      	itt	eq
 8016a10:	6811      	ldreq	r1, [r2, #0]
 8016a12:	6852      	ldreq	r2, [r2, #4]
 8016a14:	6062      	str	r2, [r4, #4]
 8016a16:	bf04      	itt	eq
 8016a18:	1809      	addeq	r1, r1, r0
 8016a1a:	6021      	streq	r1, [r4, #0]
 8016a1c:	605c      	str	r4, [r3, #4]
 8016a1e:	e7c7      	b.n	80169b0 <_free_r+0x24>
 8016a20:	bd38      	pop	{r3, r4, r5, pc}
 8016a22:	bf00      	nop
 8016a24:	20005564 	.word	0x20005564

08016a28 <_malloc_r>:
 8016a28:	b570      	push	{r4, r5, r6, lr}
 8016a2a:	1ccd      	adds	r5, r1, #3
 8016a2c:	f025 0503 	bic.w	r5, r5, #3
 8016a30:	3508      	adds	r5, #8
 8016a32:	2d0c      	cmp	r5, #12
 8016a34:	bf38      	it	cc
 8016a36:	250c      	movcc	r5, #12
 8016a38:	2d00      	cmp	r5, #0
 8016a3a:	4606      	mov	r6, r0
 8016a3c:	db01      	blt.n	8016a42 <_malloc_r+0x1a>
 8016a3e:	42a9      	cmp	r1, r5
 8016a40:	d903      	bls.n	8016a4a <_malloc_r+0x22>
 8016a42:	230c      	movs	r3, #12
 8016a44:	6033      	str	r3, [r6, #0]
 8016a46:	2000      	movs	r0, #0
 8016a48:	bd70      	pop	{r4, r5, r6, pc}
 8016a4a:	f000 f8ab 	bl	8016ba4 <__malloc_lock>
 8016a4e:	4a21      	ldr	r2, [pc, #132]	; (8016ad4 <_malloc_r+0xac>)
 8016a50:	6814      	ldr	r4, [r2, #0]
 8016a52:	4621      	mov	r1, r4
 8016a54:	b991      	cbnz	r1, 8016a7c <_malloc_r+0x54>
 8016a56:	4c20      	ldr	r4, [pc, #128]	; (8016ad8 <_malloc_r+0xb0>)
 8016a58:	6823      	ldr	r3, [r4, #0]
 8016a5a:	b91b      	cbnz	r3, 8016a64 <_malloc_r+0x3c>
 8016a5c:	4630      	mov	r0, r6
 8016a5e:	f000 f83d 	bl	8016adc <_sbrk_r>
 8016a62:	6020      	str	r0, [r4, #0]
 8016a64:	4629      	mov	r1, r5
 8016a66:	4630      	mov	r0, r6
 8016a68:	f000 f838 	bl	8016adc <_sbrk_r>
 8016a6c:	1c43      	adds	r3, r0, #1
 8016a6e:	d124      	bne.n	8016aba <_malloc_r+0x92>
 8016a70:	230c      	movs	r3, #12
 8016a72:	6033      	str	r3, [r6, #0]
 8016a74:	4630      	mov	r0, r6
 8016a76:	f000 f896 	bl	8016ba6 <__malloc_unlock>
 8016a7a:	e7e4      	b.n	8016a46 <_malloc_r+0x1e>
 8016a7c:	680b      	ldr	r3, [r1, #0]
 8016a7e:	1b5b      	subs	r3, r3, r5
 8016a80:	d418      	bmi.n	8016ab4 <_malloc_r+0x8c>
 8016a82:	2b0b      	cmp	r3, #11
 8016a84:	d90f      	bls.n	8016aa6 <_malloc_r+0x7e>
 8016a86:	600b      	str	r3, [r1, #0]
 8016a88:	50cd      	str	r5, [r1, r3]
 8016a8a:	18cc      	adds	r4, r1, r3
 8016a8c:	4630      	mov	r0, r6
 8016a8e:	f000 f88a 	bl	8016ba6 <__malloc_unlock>
 8016a92:	f104 000b 	add.w	r0, r4, #11
 8016a96:	1d23      	adds	r3, r4, #4
 8016a98:	f020 0007 	bic.w	r0, r0, #7
 8016a9c:	1ac3      	subs	r3, r0, r3
 8016a9e:	d0d3      	beq.n	8016a48 <_malloc_r+0x20>
 8016aa0:	425a      	negs	r2, r3
 8016aa2:	50e2      	str	r2, [r4, r3]
 8016aa4:	e7d0      	b.n	8016a48 <_malloc_r+0x20>
 8016aa6:	428c      	cmp	r4, r1
 8016aa8:	684b      	ldr	r3, [r1, #4]
 8016aaa:	bf16      	itet	ne
 8016aac:	6063      	strne	r3, [r4, #4]
 8016aae:	6013      	streq	r3, [r2, #0]
 8016ab0:	460c      	movne	r4, r1
 8016ab2:	e7eb      	b.n	8016a8c <_malloc_r+0x64>
 8016ab4:	460c      	mov	r4, r1
 8016ab6:	6849      	ldr	r1, [r1, #4]
 8016ab8:	e7cc      	b.n	8016a54 <_malloc_r+0x2c>
 8016aba:	1cc4      	adds	r4, r0, #3
 8016abc:	f024 0403 	bic.w	r4, r4, #3
 8016ac0:	42a0      	cmp	r0, r4
 8016ac2:	d005      	beq.n	8016ad0 <_malloc_r+0xa8>
 8016ac4:	1a21      	subs	r1, r4, r0
 8016ac6:	4630      	mov	r0, r6
 8016ac8:	f000 f808 	bl	8016adc <_sbrk_r>
 8016acc:	3001      	adds	r0, #1
 8016ace:	d0cf      	beq.n	8016a70 <_malloc_r+0x48>
 8016ad0:	6025      	str	r5, [r4, #0]
 8016ad2:	e7db      	b.n	8016a8c <_malloc_r+0x64>
 8016ad4:	20005564 	.word	0x20005564
 8016ad8:	20005568 	.word	0x20005568

08016adc <_sbrk_r>:
 8016adc:	b538      	push	{r3, r4, r5, lr}
 8016ade:	4c06      	ldr	r4, [pc, #24]	; (8016af8 <_sbrk_r+0x1c>)
 8016ae0:	2300      	movs	r3, #0
 8016ae2:	4605      	mov	r5, r0
 8016ae4:	4608      	mov	r0, r1
 8016ae6:	6023      	str	r3, [r4, #0]
 8016ae8:	f7eb f94c 	bl	8001d84 <_sbrk>
 8016aec:	1c43      	adds	r3, r0, #1
 8016aee:	d102      	bne.n	8016af6 <_sbrk_r+0x1a>
 8016af0:	6823      	ldr	r3, [r4, #0]
 8016af2:	b103      	cbz	r3, 8016af6 <_sbrk_r+0x1a>
 8016af4:	602b      	str	r3, [r5, #0]
 8016af6:	bd38      	pop	{r3, r4, r5, pc}
 8016af8:	20008ddc 	.word	0x20008ddc

08016afc <strncpy>:
 8016afc:	b570      	push	{r4, r5, r6, lr}
 8016afe:	3901      	subs	r1, #1
 8016b00:	4604      	mov	r4, r0
 8016b02:	b902      	cbnz	r2, 8016b06 <strncpy+0xa>
 8016b04:	bd70      	pop	{r4, r5, r6, pc}
 8016b06:	4623      	mov	r3, r4
 8016b08:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8016b0c:	f803 5b01 	strb.w	r5, [r3], #1
 8016b10:	1e56      	subs	r6, r2, #1
 8016b12:	b92d      	cbnz	r5, 8016b20 <strncpy+0x24>
 8016b14:	4414      	add	r4, r2
 8016b16:	42a3      	cmp	r3, r4
 8016b18:	d0f4      	beq.n	8016b04 <strncpy+0x8>
 8016b1a:	f803 5b01 	strb.w	r5, [r3], #1
 8016b1e:	e7fa      	b.n	8016b16 <strncpy+0x1a>
 8016b20:	461c      	mov	r4, r3
 8016b22:	4632      	mov	r2, r6
 8016b24:	e7ed      	b.n	8016b02 <strncpy+0x6>
	...

08016b28 <__utoa>:
 8016b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b2a:	4b1d      	ldr	r3, [pc, #116]	; (8016ba0 <__utoa+0x78>)
 8016b2c:	b08b      	sub	sp, #44	; 0x2c
 8016b2e:	4605      	mov	r5, r0
 8016b30:	460c      	mov	r4, r1
 8016b32:	466e      	mov	r6, sp
 8016b34:	f103 0c20 	add.w	ip, r3, #32
 8016b38:	6818      	ldr	r0, [r3, #0]
 8016b3a:	6859      	ldr	r1, [r3, #4]
 8016b3c:	4637      	mov	r7, r6
 8016b3e:	c703      	stmia	r7!, {r0, r1}
 8016b40:	3308      	adds	r3, #8
 8016b42:	4563      	cmp	r3, ip
 8016b44:	463e      	mov	r6, r7
 8016b46:	d1f7      	bne.n	8016b38 <__utoa+0x10>
 8016b48:	6818      	ldr	r0, [r3, #0]
 8016b4a:	791b      	ldrb	r3, [r3, #4]
 8016b4c:	713b      	strb	r3, [r7, #4]
 8016b4e:	1e93      	subs	r3, r2, #2
 8016b50:	2b22      	cmp	r3, #34	; 0x22
 8016b52:	6038      	str	r0, [r7, #0]
 8016b54:	f04f 0300 	mov.w	r3, #0
 8016b58:	d904      	bls.n	8016b64 <__utoa+0x3c>
 8016b5a:	7023      	strb	r3, [r4, #0]
 8016b5c:	461c      	mov	r4, r3
 8016b5e:	4620      	mov	r0, r4
 8016b60:	b00b      	add	sp, #44	; 0x2c
 8016b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b64:	1e66      	subs	r6, r4, #1
 8016b66:	fbb5 f0f2 	udiv	r0, r5, r2
 8016b6a:	af0a      	add	r7, sp, #40	; 0x28
 8016b6c:	fb02 5510 	mls	r5, r2, r0, r5
 8016b70:	443d      	add	r5, r7
 8016b72:	1c59      	adds	r1, r3, #1
 8016b74:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8016b78:	f806 5f01 	strb.w	r5, [r6, #1]!
 8016b7c:	4605      	mov	r5, r0
 8016b7e:	b968      	cbnz	r0, 8016b9c <__utoa+0x74>
 8016b80:	5460      	strb	r0, [r4, r1]
 8016b82:	4423      	add	r3, r4
 8016b84:	4622      	mov	r2, r4
 8016b86:	1b19      	subs	r1, r3, r4
 8016b88:	1b10      	subs	r0, r2, r4
 8016b8a:	4281      	cmp	r1, r0
 8016b8c:	dde7      	ble.n	8016b5e <__utoa+0x36>
 8016b8e:	7811      	ldrb	r1, [r2, #0]
 8016b90:	7818      	ldrb	r0, [r3, #0]
 8016b92:	f802 0b01 	strb.w	r0, [r2], #1
 8016b96:	f803 1901 	strb.w	r1, [r3], #-1
 8016b9a:	e7f4      	b.n	8016b86 <__utoa+0x5e>
 8016b9c:	460b      	mov	r3, r1
 8016b9e:	e7e2      	b.n	8016b66 <__utoa+0x3e>
 8016ba0:	08018b84 	.word	0x08018b84

08016ba4 <__malloc_lock>:
 8016ba4:	4770      	bx	lr

08016ba6 <__malloc_unlock>:
 8016ba6:	4770      	bx	lr

08016ba8 <_init>:
 8016ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016baa:	bf00      	nop
 8016bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016bae:	bc08      	pop	{r3}
 8016bb0:	469e      	mov	lr, r3
 8016bb2:	4770      	bx	lr

08016bb4 <_fini>:
 8016bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bb6:	bf00      	nop
 8016bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016bba:	bc08      	pop	{r3}
 8016bbc:	469e      	mov	lr, r3
 8016bbe:	4770      	bx	lr
