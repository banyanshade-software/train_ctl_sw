
stm32f407VETx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019360  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002934  080194f0  080194f0  000294f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801be24  0801be24  0003060c  2**0
                  CONTENTS
  4 .ARM          00000008  0801be24  0801be24  0002be24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801be2c  0801be2c  0003060c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801be2c  0801be2c  0002be2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801be30  0801be30  0002be30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000060c  20000000  0801be34  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008b40  20000610  0801c440  00030610  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20009150  0801c440  00039150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003060c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004c502  00000000  00000000  0003063c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009475  00000000  00000000  0007cb3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002a90  00000000  00000000  00085fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000028e0  00000000  00000000  00088a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003067c  00000000  00000000  0008b328  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00032e70  00000000  00000000  000bb9a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ea3f3  00000000  00000000  000ee814  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d8c07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b00c  00000000  00000000  001d8c84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000610 	.word	0x20000610
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080194d8 	.word	0x080194d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000614 	.word	0x20000614
 80001cc:	080194d8 	.word	0x080194d8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000204:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000208:	f000 b972 	b.w	80004f0 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9e08      	ldr	r6, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	4688      	mov	r8, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	d14b      	bne.n	80002ca <__udivmoddi4+0xa6>
 8000232:	428a      	cmp	r2, r1
 8000234:	4615      	mov	r5, r2
 8000236:	d967      	bls.n	8000308 <__udivmoddi4+0xe4>
 8000238:	fab2 f282 	clz	r2, r2
 800023c:	b14a      	cbz	r2, 8000252 <__udivmoddi4+0x2e>
 800023e:	f1c2 0720 	rsb	r7, r2, #32
 8000242:	fa01 f302 	lsl.w	r3, r1, r2
 8000246:	fa20 f707 	lsr.w	r7, r0, r7
 800024a:	4095      	lsls	r5, r2
 800024c:	ea47 0803 	orr.w	r8, r7, r3
 8000250:	4094      	lsls	r4, r2
 8000252:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000256:	0c23      	lsrs	r3, r4, #16
 8000258:	fbb8 f7fe 	udiv	r7, r8, lr
 800025c:	fa1f fc85 	uxth.w	ip, r5
 8000260:	fb0e 8817 	mls	r8, lr, r7, r8
 8000264:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000268:	fb07 f10c 	mul.w	r1, r7, ip
 800026c:	4299      	cmp	r1, r3
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x60>
 8000270:	18eb      	adds	r3, r5, r3
 8000272:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000276:	f080 811b 	bcs.w	80004b0 <__udivmoddi4+0x28c>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 8118 	bls.w	80004b0 <__udivmoddi4+0x28c>
 8000280:	3f02      	subs	r7, #2
 8000282:	442b      	add	r3, r5
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0fe 	udiv	r0, r3, lr
 800028c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 fc0c 	mul.w	ip, r0, ip
 8000298:	45a4      	cmp	ip, r4
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x8c>
 800029c:	192c      	adds	r4, r5, r4
 800029e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x290>
 80002a6:	45a4      	cmp	ip, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x290>
 80002ac:	3802      	subs	r0, #2
 80002ae:	442c      	add	r4, r5
 80002b0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b4:	eba4 040c 	sub.w	r4, r4, ip
 80002b8:	2700      	movs	r7, #0
 80002ba:	b11e      	cbz	r6, 80002c4 <__udivmoddi4+0xa0>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c6 4300 	strd	r4, r3, [r6]
 80002c4:	4639      	mov	r1, r7
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xbe>
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	f000 80eb 	beq.w	80004aa <__udivmoddi4+0x286>
 80002d4:	2700      	movs	r7, #0
 80002d6:	e9c6 0100 	strd	r0, r1, [r6]
 80002da:	4638      	mov	r0, r7
 80002dc:	4639      	mov	r1, r7
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f783 	clz	r7, r3
 80002e6:	2f00      	cmp	r7, #0
 80002e8:	d147      	bne.n	800037a <__udivmoddi4+0x156>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd0>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80fa 	bhi.w	80004e8 <__udivmoddi4+0x2c4>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4698      	mov	r8, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa0>
 8000302:	e9c6 4800 	strd	r4, r8, [r6]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa0>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xe8>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 808f 	bne.w	8000434 <__udivmoddi4+0x210>
 8000316:	1b49      	subs	r1, r1, r5
 8000318:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800031c:	fa1f f885 	uxth.w	r8, r5
 8000320:	2701      	movs	r7, #1
 8000322:	fbb1 fcfe 	udiv	ip, r1, lr
 8000326:	0c23      	lsrs	r3, r4, #16
 8000328:	fb0e 111c 	mls	r1, lr, ip, r1
 800032c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000330:	fb08 f10c 	mul.w	r1, r8, ip
 8000334:	4299      	cmp	r1, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x124>
 8000338:	18eb      	adds	r3, r5, r3
 800033a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x122>
 8000340:	4299      	cmp	r1, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2bc>
 8000346:	4684      	mov	ip, r0
 8000348:	1a59      	subs	r1, r3, r1
 800034a:	b2a3      	uxth	r3, r4
 800034c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000350:	fb0e 1410 	mls	r4, lr, r0, r1
 8000354:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000358:	fb08 f800 	mul.w	r8, r8, r0
 800035c:	45a0      	cmp	r8, r4
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x14c>
 8000360:	192c      	adds	r4, r5, r4
 8000362:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x14a>
 8000368:	45a0      	cmp	r8, r4
 800036a:	f200 80b6 	bhi.w	80004da <__udivmoddi4+0x2b6>
 800036e:	4618      	mov	r0, r3
 8000370:	eba4 0408 	sub.w	r4, r4, r8
 8000374:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000378:	e79f      	b.n	80002ba <__udivmoddi4+0x96>
 800037a:	f1c7 0c20 	rsb	ip, r7, #32
 800037e:	40bb      	lsls	r3, r7
 8000380:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000384:	ea4e 0e03 	orr.w	lr, lr, r3
 8000388:	fa01 f407 	lsl.w	r4, r1, r7
 800038c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000390:	fa21 f30c 	lsr.w	r3, r1, ip
 8000394:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000398:	4325      	orrs	r5, r4
 800039a:	fbb3 f9f8 	udiv	r9, r3, r8
 800039e:	0c2c      	lsrs	r4, r5, #16
 80003a0:	fb08 3319 	mls	r3, r8, r9, r3
 80003a4:	fa1f fa8e 	uxth.w	sl, lr
 80003a8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003ac:	fb09 f40a 	mul.w	r4, r9, sl
 80003b0:	429c      	cmp	r4, r3
 80003b2:	fa02 f207 	lsl.w	r2, r2, r7
 80003b6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b0>
 80003bc:	eb1e 0303 	adds.w	r3, lr, r3
 80003c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003c4:	f080 8087 	bcs.w	80004d6 <__udivmoddi4+0x2b2>
 80003c8:	429c      	cmp	r4, r3
 80003ca:	f240 8084 	bls.w	80004d6 <__udivmoddi4+0x2b2>
 80003ce:	f1a9 0902 	sub.w	r9, r9, #2
 80003d2:	4473      	add	r3, lr
 80003d4:	1b1b      	subs	r3, r3, r4
 80003d6:	b2ad      	uxth	r5, r5
 80003d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003dc:	fb08 3310 	mls	r3, r8, r0, r3
 80003e0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e8:	45a2      	cmp	sl, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1da>
 80003ec:	eb1e 0404 	adds.w	r4, lr, r4
 80003f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f4:	d26b      	bcs.n	80004ce <__udivmoddi4+0x2aa>
 80003f6:	45a2      	cmp	sl, r4
 80003f8:	d969      	bls.n	80004ce <__udivmoddi4+0x2aa>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4474      	add	r4, lr
 80003fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000402:	fba0 8902 	umull	r8, r9, r0, r2
 8000406:	eba4 040a 	sub.w	r4, r4, sl
 800040a:	454c      	cmp	r4, r9
 800040c:	46c2      	mov	sl, r8
 800040e:	464b      	mov	r3, r9
 8000410:	d354      	bcc.n	80004bc <__udivmoddi4+0x298>
 8000412:	d051      	beq.n	80004b8 <__udivmoddi4+0x294>
 8000414:	2e00      	cmp	r6, #0
 8000416:	d069      	beq.n	80004ec <__udivmoddi4+0x2c8>
 8000418:	ebb1 050a 	subs.w	r5, r1, sl
 800041c:	eb64 0403 	sbc.w	r4, r4, r3
 8000420:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000424:	40fd      	lsrs	r5, r7
 8000426:	40fc      	lsrs	r4, r7
 8000428:	ea4c 0505 	orr.w	r5, ip, r5
 800042c:	e9c6 5400 	strd	r5, r4, [r6]
 8000430:	2700      	movs	r7, #0
 8000432:	e747      	b.n	80002c4 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f703 	lsr.w	r7, r0, r3
 800043c:	4095      	lsls	r5, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	fa21 f303 	lsr.w	r3, r1, r3
 8000446:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800044a:	4338      	orrs	r0, r7
 800044c:	0c01      	lsrs	r1, r0, #16
 800044e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000452:	fa1f f885 	uxth.w	r8, r5
 8000456:	fb0e 3317 	mls	r3, lr, r7, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb07 f308 	mul.w	r3, r7, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x256>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000470:	d22f      	bcs.n	80004d2 <__udivmoddi4+0x2ae>
 8000472:	428b      	cmp	r3, r1
 8000474:	d92d      	bls.n	80004d2 <__udivmoddi4+0x2ae>
 8000476:	3f02      	subs	r7, #2
 8000478:	4429      	add	r1, r5
 800047a:	1acb      	subs	r3, r1, r3
 800047c:	b281      	uxth	r1, r0
 800047e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000482:	fb0e 3310 	mls	r3, lr, r0, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb00 f308 	mul.w	r3, r0, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x27e>
 8000492:	1869      	adds	r1, r5, r1
 8000494:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000498:	d217      	bcs.n	80004ca <__udivmoddi4+0x2a6>
 800049a:	428b      	cmp	r3, r1
 800049c:	d915      	bls.n	80004ca <__udivmoddi4+0x2a6>
 800049e:	3802      	subs	r0, #2
 80004a0:	4429      	add	r1, r5
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a8:	e73b      	b.n	8000322 <__udivmoddi4+0xfe>
 80004aa:	4637      	mov	r7, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e709      	b.n	80002c4 <__udivmoddi4+0xa0>
 80004b0:	4607      	mov	r7, r0
 80004b2:	e6e7      	b.n	8000284 <__udivmoddi4+0x60>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x8c>
 80004b8:	4541      	cmp	r1, r8
 80004ba:	d2ab      	bcs.n	8000414 <__udivmoddi4+0x1f0>
 80004bc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c0:	eb69 020e 	sbc.w	r2, r9, lr
 80004c4:	3801      	subs	r0, #1
 80004c6:	4613      	mov	r3, r2
 80004c8:	e7a4      	b.n	8000414 <__udivmoddi4+0x1f0>
 80004ca:	4660      	mov	r0, ip
 80004cc:	e7e9      	b.n	80004a2 <__udivmoddi4+0x27e>
 80004ce:	4618      	mov	r0, r3
 80004d0:	e795      	b.n	80003fe <__udivmoddi4+0x1da>
 80004d2:	4667      	mov	r7, ip
 80004d4:	e7d1      	b.n	800047a <__udivmoddi4+0x256>
 80004d6:	4681      	mov	r9, r0
 80004d8:	e77c      	b.n	80003d4 <__udivmoddi4+0x1b0>
 80004da:	3802      	subs	r0, #2
 80004dc:	442c      	add	r4, r5
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0x14c>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	442b      	add	r3, r5
 80004e6:	e72f      	b.n	8000348 <__udivmoddi4+0x124>
 80004e8:	4638      	mov	r0, r7
 80004ea:	e708      	b.n	80002fe <__udivmoddi4+0xda>
 80004ec:	4637      	mov	r7, r6
 80004ee:	e6e9      	b.n	80002c4 <__udivmoddi4+0xa0>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0

}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0
return 0;
 8000506:	2300      	movs	r3, #0
}
 8000508:	4618      	mov	r0, r3
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
	...

08000514 <itm_debug1>:
//void _itm_debug1(const char *msg, int v);
//void _itm_debug2(const char *msg, int v1, int v2);
void _itm_debug3(const char *msg, int v1, int v2, int v3, int n);

static inline void itm_debug1(uint32_t f, const char *msg, int v)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af02      	add	r7, sp, #8
 800051a:	60f8      	str	r0, [r7, #12]
 800051c:	60b9      	str	r1, [r7, #8]
 800051e:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <itm_debug1+0x30>)
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	4013      	ands	r3, r2
 8000528:	2b00      	cmp	r3, #0
 800052a:	d007      	beq.n	800053c <itm_debug1+0x28>
 800052c:	2301      	movs	r3, #1
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	2300      	movs	r3, #0
 8000532:	2200      	movs	r2, #0
 8000534:	6879      	ldr	r1, [r7, #4]
 8000536:	68b8      	ldr	r0, [r7, #8]
 8000538:	f018 fc96 	bl	8018e68 <_itm_debug3>
}
 800053c:	bf00      	nop
 800053e:	3710      	adds	r7, #16
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	200005a4 	.word	0x200005a4

08000548 <itm_debug2>:
static inline void itm_debug2(uint32_t f, const char *msg, int v1, int v2)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af02      	add	r7, sp, #8
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
 8000554:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <itm_debug2+0x34>)
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	4013      	ands	r3, r2
 800055e:	2b00      	cmp	r3, #0
 8000560:	d007      	beq.n	8000572 <itm_debug2+0x2a>
 8000562:	2302      	movs	r3, #2
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	2300      	movs	r3, #0
 8000568:	683a      	ldr	r2, [r7, #0]
 800056a:	6879      	ldr	r1, [r7, #4]
 800056c:	68b8      	ldr	r0, [r7, #8]
 800056e:	f018 fc7b 	bl	8018e68 <_itm_debug3>
}
 8000572:	bf00      	nop
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	200005a4 	.word	0x200005a4

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f001 fc00 	bl	8001d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f864 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 fdc8 	bl	8001120 <MX_GPIO_Init>
  MX_DMA_Init();
 8000590:	f000 fda6 	bl	80010e0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000594:	f000 f8e0 	bl	8000758 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000598:	f000 f9b4 	bl	8000904 <MX_I2C1_Init>
  MX_TIM1_Init();
 800059c:	f000 fa40 	bl	8000a20 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005a0:	f000 fb02 	bl	8000ba8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005a4:	f000 fb98 	bl	8000cd8 <MX_TIM3_Init>
  MX_RTC_Init();
 80005a8:	f000 fa0a 	bl	80009c0 <MX_RTC_Init>
  MX_UART4_Init();
 80005ac:	f000 fd6e 	bl	800108c <MX_UART4_Init>
  MX_TIM4_Init();
 80005b0:	f000 fc40 	bl	8000e34 <MX_TIM4_Init>
  MX_TIM8_Init();
 80005b4:	f000 fc92 	bl	8000edc <MX_TIM8_Init>
  MX_I2C3_Init();
 80005b8:	f000 f9d2 	bl	8000960 <MX_I2C3_Init>
  MX_TIM12_Init();
 80005bc:	f000 fcf6 	bl	8000fac <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005c0:	f00c fb26 	bl	800cc10 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of frameQueue */
  frameQueueHandle = osMessageQueueNew (48, sizeof(frame_msg_t), &frameQueue_attributes);
 80005c4:	4a15      	ldr	r2, [pc, #84]	; (800061c <main+0x9c>)
 80005c6:	2121      	movs	r1, #33	; 0x21
 80005c8:	2030      	movs	r0, #48	; 0x30
 80005ca:	f00c fc5f 	bl	800ce8c <osMessageQueueNew>
 80005ce:	4602      	mov	r2, r0
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <main+0xa0>)
 80005d2:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of uiTask */
  uiTaskHandle = osThreadNew(StartUiTask, NULL, &uiTask_attributes);
 80005d4:	4a13      	ldr	r2, [pc, #76]	; (8000624 <main+0xa4>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	4813      	ldr	r0, [pc, #76]	; (8000628 <main+0xa8>)
 80005da:	f00c fb83 	bl	800cce4 <osThreadNew>
 80005de:	4602      	mov	r2, r0
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <main+0xac>)
 80005e2:	601a      	str	r2, [r3, #0]

  /* creation of ctrlTask */
  ctrlTaskHandle = osThreadNew(StartCtrlTask, NULL, &ctrlTask_attributes);
 80005e4:	4a12      	ldr	r2, [pc, #72]	; (8000630 <main+0xb0>)
 80005e6:	2100      	movs	r1, #0
 80005e8:	4812      	ldr	r0, [pc, #72]	; (8000634 <main+0xb4>)
 80005ea:	f00c fb7b 	bl	800cce4 <osThreadNew>
 80005ee:	4602      	mov	r2, r0
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <main+0xb8>)
 80005f2:	601a      	str	r2, [r3, #0]

  /* creation of txrxFrameTask */
  txrxFrameTaskHandle = osThreadNew(StartTxRxFrameTask, NULL, &txrxFrameTask_attributes);
 80005f4:	4a11      	ldr	r2, [pc, #68]	; (800063c <main+0xbc>)
 80005f6:	2100      	movs	r1, #0
 80005f8:	4811      	ldr	r0, [pc, #68]	; (8000640 <main+0xc0>)
 80005fa:	f00c fb73 	bl	800cce4 <osThreadNew>
 80005fe:	4602      	mov	r2, r0
 8000600:	4b10      	ldr	r3, [pc, #64]	; (8000644 <main+0xc4>)
 8000602:	601a      	str	r2, [r3, #0]

  /* creation of ina3221_task */
  ina3221_taskHandle = osThreadNew(ina3221_task_start, NULL, &ina3221_task_attributes);
 8000604:	4a10      	ldr	r2, [pc, #64]	; (8000648 <main+0xc8>)
 8000606:	2100      	movs	r1, #0
 8000608:	4810      	ldr	r0, [pc, #64]	; (800064c <main+0xcc>)
 800060a:	f00c fb6b 	bl	800cce4 <osThreadNew>
 800060e:	4602      	mov	r2, r0
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <main+0xd0>)
 8000612:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000614:	f00c fb30 	bl	800cc78 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	e7fe      	b.n	8000618 <main+0x98>
 800061a:	bf00      	nop
 800061c:	08019f14 	.word	0x08019f14
 8000620:	20005d94 	.word	0x20005d94
 8000624:	08019e84 	.word	0x08019e84
 8000628:	080188d1 	.word	0x080188d1
 800062c:	200062a0 	.word	0x200062a0
 8000630:	08019ea8 	.word	0x08019ea8
 8000634:	08018471 	.word	0x08018471
 8000638:	200062e4 	.word	0x200062e4
 800063c:	08019ecc 	.word	0x08019ecc
 8000640:	08018911 	.word	0x08018911
 8000644:	20006bf0 	.word	0x20006bf0
 8000648:	08019ef0 	.word	0x08019ef0
 800064c:	08011d27 	.word	0x08011d27
 8000650:	20006d3c 	.word	0x20006d3c

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b098      	sub	sp, #96	; 0x60
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800065e:	2230      	movs	r2, #48	; 0x30
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f018 fe21 	bl	80192aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	4b31      	ldr	r3, [pc, #196]	; (8000750 <SystemClock_Config+0xfc>)
 800068c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068e:	4a30      	ldr	r2, [pc, #192]	; (8000750 <SystemClock_Config+0xfc>)
 8000690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000694:	6413      	str	r3, [r2, #64]	; 0x40
 8000696:	4b2e      	ldr	r3, [pc, #184]	; (8000750 <SystemClock_Config+0xfc>)
 8000698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <SystemClock_Config+0x100>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a2a      	ldr	r2, [pc, #168]	; (8000754 <SystemClock_Config+0x100>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6013      	str	r3, [r2, #0]
 80006b2:	4b28      	ldr	r3, [pc, #160]	; (8000754 <SystemClock_Config+0x100>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80006be:	2305      	movs	r3, #5
 80006c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d6:	2304      	movs	r3, #4
 80006d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006da:	2360      	movs	r3, #96	; 0x60
 80006dc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006de:	2302      	movs	r3, #2
 80006e0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e2:	2304      	movs	r3, #4
 80006e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006ea:	4618      	mov	r0, r3
 80006ec:	f006 fd82 	bl	80071f4 <HAL_RCC_OscConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006f6:	f000 fe69 	bl	80013cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	230f      	movs	r3, #15
 80006fc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fe:	2302      	movs	r3, #2
 8000700:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000706:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 800070c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	2103      	movs	r1, #3
 8000718:	4618      	mov	r0, r3
 800071a:	f006 ffdb 	bl	80076d4 <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000724:	f000 fe52 	bl	80013cc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000728:	2302      	movs	r3, #2
 800072a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800072c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000730:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	4618      	mov	r0, r3
 8000738:	f007 f9f0 	bl	8007b1c <HAL_RCCEx_PeriphCLKConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000742:	f000 fe43 	bl	80013cc <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3760      	adds	r7, #96	; 0x60
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800075e:	463b      	mov	r3, r7
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800076a:	4b64      	ldr	r3, [pc, #400]	; (80008fc <MX_ADC1_Init+0x1a4>)
 800076c:	4a64      	ldr	r2, [pc, #400]	; (8000900 <MX_ADC1_Init+0x1a8>)
 800076e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000770:	4b62      	ldr	r3, [pc, #392]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000776:	4b61      	ldr	r3, [pc, #388]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800077c:	4b5f      	ldr	r3, [pc, #380]	; (80008fc <MX_ADC1_Init+0x1a4>)
 800077e:	2201      	movs	r2, #1
 8000780:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000782:	4b5e      	ldr	r3, [pc, #376]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000784:	2200      	movs	r2, #0
 8000786:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000788:	4b5c      	ldr	r3, [pc, #368]	; (80008fc <MX_ADC1_Init+0x1a4>)
 800078a:	2200      	movs	r2, #0
 800078c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000790:	4b5a      	ldr	r3, [pc, #360]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000796:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000798:	4b58      	ldr	r3, [pc, #352]	; (80008fc <MX_ADC1_Init+0x1a4>)
 800079a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800079e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a0:	4b56      	ldr	r3, [pc, #344]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 80007a6:	4b55      	ldr	r3, [pc, #340]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80007a8:	220a      	movs	r2, #10
 80007aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007ac:	4b53      	ldr	r3, [pc, #332]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80007b4:	4b51      	ldr	r3, [pc, #324]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ba:	4850      	ldr	r0, [pc, #320]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80007bc:	f001 fb48 	bl	8001e50 <HAL_ADC_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80007c6:	f000 fe01 	bl	80013cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80007d2:	2302      	movs	r3, #2
 80007d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4848      	ldr	r0, [pc, #288]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80007dc:	f001 fc6e 	bl	80020bc <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007e6:	f000 fdf1 	bl	80013cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007ea:	2301      	movs	r3, #1
 80007ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f2:	463b      	mov	r3, r7
 80007f4:	4619      	mov	r1, r3
 80007f6:	4841      	ldr	r0, [pc, #260]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80007f8:	f001 fc60 	bl	80020bc <HAL_ADC_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000802:	f000 fde3 	bl	80013cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000806:	2302      	movs	r3, #2
 8000808:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800080a:	2303      	movs	r3, #3
 800080c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080e:	463b      	mov	r3, r7
 8000810:	4619      	mov	r1, r3
 8000812:	483a      	ldr	r0, [pc, #232]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000814:	f001 fc52 	bl	80020bc <HAL_ADC_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800081e:	f000 fdd5 	bl	80013cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000822:	2303      	movs	r3, #3
 8000824:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000826:	2304      	movs	r3, #4
 8000828:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082a:	463b      	mov	r3, r7
 800082c:	4619      	mov	r1, r3
 800082e:	4833      	ldr	r0, [pc, #204]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000830:	f001 fc44 	bl	80020bc <HAL_ADC_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800083a:	f000 fdc7 	bl	80013cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800083e:	2304      	movs	r3, #4
 8000840:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000842:	2305      	movs	r3, #5
 8000844:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000846:	463b      	mov	r3, r7
 8000848:	4619      	mov	r1, r3
 800084a:	482c      	ldr	r0, [pc, #176]	; (80008fc <MX_ADC1_Init+0x1a4>)
 800084c:	f001 fc36 	bl	80020bc <HAL_ADC_ConfigChannel>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8000856:	f000 fdb9 	bl	80013cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800085a:	2305      	movs	r3, #5
 800085c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800085e:	2306      	movs	r3, #6
 8000860:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000862:	463b      	mov	r3, r7
 8000864:	4619      	mov	r1, r3
 8000866:	4825      	ldr	r0, [pc, #148]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000868:	f001 fc28 	bl	80020bc <HAL_ADC_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0x11e>
  {
    Error_Handler();
 8000872:	f000 fdab 	bl	80013cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000876:	230c      	movs	r3, #12
 8000878:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800087a:	2307      	movs	r3, #7
 800087c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087e:	463b      	mov	r3, r7
 8000880:	4619      	mov	r1, r3
 8000882:	481e      	ldr	r0, [pc, #120]	; (80008fc <MX_ADC1_Init+0x1a4>)
 8000884:	f001 fc1a 	bl	80020bc <HAL_ADC_ConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_ADC1_Init+0x13a>
  {
    Error_Handler();
 800088e:	f000 fd9d 	bl	80013cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000892:	2308      	movs	r3, #8
 8000894:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000896:	2308      	movs	r3, #8
 8000898:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800089a:	463b      	mov	r3, r7
 800089c:	4619      	mov	r1, r3
 800089e:	4817      	ldr	r0, [pc, #92]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80008a0:	f001 fc0c 	bl	80020bc <HAL_ADC_ConfigChannel>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_ADC1_Init+0x156>
  {
    Error_Handler();
 80008aa:	f000 fd8f 	bl	80013cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008ae:	230a      	movs	r3, #10
 80008b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80008b2:	2309      	movs	r3, #9
 80008b4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b6:	463b      	mov	r3, r7
 80008b8:	4619      	mov	r1, r3
 80008ba:	4810      	ldr	r0, [pc, #64]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80008bc:	f001 fbfe 	bl	80020bc <HAL_ADC_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 80008c6:	f000 fd81 	bl	80013cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008ca:	230b      	movs	r3, #11
 80008cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80008ce:	230a      	movs	r3, #10
 80008d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d2:	463b      	mov	r3, r7
 80008d4:	4619      	mov	r1, r3
 80008d6:	4809      	ldr	r0, [pc, #36]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80008d8:	f001 fbf0 	bl	80020bc <HAL_ADC_ConfigChannel>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80008e2:	f000 fd73 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  if (hadc1.Init.NbrOfConversion != NUM_LOCAL_CANTONS_HW*2) {
 80008e6:	4b05      	ldr	r3, [pc, #20]	; (80008fc <MX_ADC1_Init+0x1a4>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	2b0a      	cmp	r3, #10
 80008ec:	d001      	beq.n	80008f2 <MX_ADC1_Init+0x19a>
	    Error_Handler();
 80008ee:	f000 fd6d 	bl	80013cc <Error_Handler>
  }
  /* USER CODE END ADC1_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200062e8 	.word	0x200062e8
 8000900:	40012000 	.word	0x40012000

08000904 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_I2C1_Init+0x50>)
 800090a:	4a13      	ldr	r2, [pc, #76]	; (8000958 <MX_I2C1_Init+0x54>)
 800090c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_I2C1_Init+0x50>)
 8000910:	4a12      	ldr	r2, [pc, #72]	; (800095c <MX_I2C1_Init+0x58>)
 8000912:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_I2C1_Init+0x50>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_I2C1_Init+0x50>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_I2C1_Init+0x50>)
 8000922:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000926:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <MX_I2C1_Init+0x50>)
 800092a:	2200      	movs	r2, #0
 800092c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_I2C1_Init+0x50>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000934:	4b07      	ldr	r3, [pc, #28]	; (8000954 <MX_I2C1_Init+0x50>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_I2C1_Init+0x50>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <MX_I2C1_Init+0x50>)
 8000942:	f002 fc8f 	bl	8003264 <HAL_I2C_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800094c:	f000 fd3e 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20005d98 	.word	0x20005d98
 8000958:	40005400 	.word	0x40005400
 800095c:	00061a80 	.word	0x00061a80

08000960 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000964:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_I2C3_Init+0x54>)
 8000966:	4a14      	ldr	r2, [pc, #80]	; (80009b8 <MX_I2C3_Init+0x58>)
 8000968:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_I2C3_Init+0x54>)
 800096c:	4a13      	ldr	r2, [pc, #76]	; (80009bc <MX_I2C3_Init+0x5c>)
 800096e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000970:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_I2C3_Init+0x54>)
 8000972:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000976:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000978:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_I2C3_Init+0x54>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <MX_I2C3_Init+0x54>)
 8000980:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000984:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_I2C3_Init+0x54>)
 8000988:	2200      	movs	r2, #0
 800098a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_I2C3_Init+0x54>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_I2C3_Init+0x54>)
 8000994:	2200      	movs	r2, #0
 8000996:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_I2C3_Init+0x54>)
 800099a:	2200      	movs	r2, #0
 800099c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_I2C3_Init+0x54>)
 80009a0:	f002 fc60 	bl	8003264 <HAL_I2C_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_I2C3_Init+0x4e>
  {
    Error_Handler();
 80009aa:	f000 fd0f 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	2000562c 	.word	0x2000562c
 80009b8:	40005c00 	.word	0x40005c00
 80009bc:	00061a80 	.word	0x00061a80

080009c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80009d4:	2300      	movs	r3, #0
 80009d6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_RTC_Init+0x58>)
 80009da:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <MX_RTC_Init+0x5c>)
 80009dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_RTC_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_RTC_Init+0x58>)
 80009e6:	227f      	movs	r2, #127	; 0x7f
 80009e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <MX_RTC_Init+0x58>)
 80009ec:	22ff      	movs	r2, #255	; 0xff
 80009ee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_RTC_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <MX_RTC_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_RTC_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_RTC_Init+0x58>)
 8000a04:	f007 f96c 	bl	8007ce0 <HAL_RTC_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000a0e:	f000 fcdd 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20006390 	.word	0x20006390
 8000a1c:	40002800 	.word	0x40002800

08000a20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b096      	sub	sp, #88	; 0x58
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]
 8000a4e:	615a      	str	r2, [r3, #20]
 8000a50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2220      	movs	r2, #32
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f018 fc26 	bl	80192aa <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a5e:	4b50      	ldr	r3, [pc, #320]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a60:	4a50      	ldr	r2, [pc, #320]	; (8000ba4 <MX_TIM1_Init+0x184>)
 8000a62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1199;
 8000a64:	4b4e      	ldr	r3, [pc, #312]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a66:	f240 42af 	movw	r2, #1199	; 0x4af
 8000a6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000a6c:	4b4c      	ldr	r3, [pc, #304]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a6e:	2260      	movs	r2, #96	; 0x60
 8000a70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200;
 8000a72:	4b4b      	ldr	r3, [pc, #300]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a74:	22c8      	movs	r2, #200	; 0xc8
 8000a76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a78:	4b49      	ldr	r3, [pc, #292]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a7e:	4b48      	ldr	r3, [pc, #288]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a84:	4b46      	ldr	r3, [pc, #280]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a86:	2280      	movs	r2, #128	; 0x80
 8000a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a8a:	4845      	ldr	r0, [pc, #276]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000a8c:	f007 fa0d 	bl	8007eaa <HAL_TIM_Base_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000a96:	f000 fc99 	bl	80013cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aa0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	483e      	ldr	r0, [pc, #248]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000aa8:	f007 fdd6 	bl	8008658 <HAL_TIM_ConfigClockSource>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ab2:	f000 fc8b 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ab6:	483a      	ldr	r0, [pc, #232]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000ab8:	f007 fa6a 	bl	8007f90 <HAL_TIM_PWM_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000ac2:	f000 fc83 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ac6:	2320      	movs	r3, #32
 8000ac8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000aca:	2380      	movs	r3, #128	; 0x80
 8000acc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ace:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4832      	ldr	r0, [pc, #200]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000ad6:	f008 fa77 	bl	8008fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000ae0:	f000 fc74 	bl	80013cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae4:	2360      	movs	r3, #96	; 0x60
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000af0:	2300      	movs	r3, #0
 8000af2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000af8:	2300      	movs	r3, #0
 8000afa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000afc:	2300      	movs	r3, #0
 8000afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b04:	2200      	movs	r2, #0
 8000b06:	4619      	mov	r1, r3
 8000b08:	4825      	ldr	r0, [pc, #148]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000b0a:	f007 fcdf 	bl	80084cc <HAL_TIM_PWM_ConfigChannel>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000b14:	f000 fc5a 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1c:	2204      	movs	r2, #4
 8000b1e:	4619      	mov	r1, r3
 8000b20:	481f      	ldr	r0, [pc, #124]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000b22:	f007 fcd3 	bl	80084cc <HAL_TIM_PWM_ConfigChannel>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000b2c:	f000 fc4e 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b34:	2208      	movs	r2, #8
 8000b36:	4619      	mov	r1, r3
 8000b38:	4819      	ldr	r0, [pc, #100]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000b3a:	f007 fcc7 	bl	80084cc <HAL_TIM_PWM_ConfigChannel>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000b44:	f000 fc42 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4c:	220c      	movs	r2, #12
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4813      	ldr	r0, [pc, #76]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000b52:	f007 fcbb 	bl	80084cc <HAL_TIM_PWM_ConfigChannel>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000b5c:	f000 fc36 	bl	80013cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b78:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	4619      	mov	r1, r3
 8000b82:	4807      	ldr	r0, [pc, #28]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000b84:	f008 fa9c 	bl	80090c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000b8e:	f000 fc1d 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b92:	4803      	ldr	r0, [pc, #12]	; (8000ba0 <MX_TIM1_Init+0x180>)
 8000b94:	f000 fe94 	bl	80018c0 <HAL_TIM_MspPostInit>

}
 8000b98:	bf00      	nop
 8000b9a:	3758      	adds	r7, #88	; 0x58
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200067b0 	.word	0x200067b0
 8000ba4:	40010000 	.word	0x40010000

08000ba8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b092      	sub	sp, #72	; 0x48
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
 8000be4:	615a      	str	r2, [r3, #20]
 8000be6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000be8:	4b3a      	ldr	r3, [pc, #232]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000bea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1199;
 8000bf0:	4b38      	ldr	r3, [pc, #224]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000bf2:	f240 42af 	movw	r2, #1199	; 0x4af
 8000bf6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8000bf8:	4b36      	ldr	r3, [pc, #216]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000bfa:	2260      	movs	r2, #96	; 0x60
 8000bfc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 200;
 8000bfe:	4b35      	ldr	r3, [pc, #212]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c00:	22c8      	movs	r2, #200	; 0xc8
 8000c02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c04:	4b33      	ldr	r3, [pc, #204]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c0a:	4b32      	ldr	r3, [pc, #200]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c0c:	2280      	movs	r2, #128	; 0x80
 8000c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c10:	4830      	ldr	r0, [pc, #192]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c12:	f007 f94a 	bl	8007eaa <HAL_TIM_Base_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000c1c:	f000 fbd6 	bl	80013cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c24:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4829      	ldr	r0, [pc, #164]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c2e:	f007 fd13 	bl	8008658 <HAL_TIM_ConfigClockSource>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c38:	f000 fbc8 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c3c:	4825      	ldr	r0, [pc, #148]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c3e:	f007 f9a7 	bl	8007f90 <HAL_TIM_PWM_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000c48:	f000 fbc0 	bl	80013cc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000c4c:	2306      	movs	r3, #6
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	481e      	ldr	r0, [pc, #120]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c5c:	f007 fdb3 	bl	80087c6 <HAL_TIM_SlaveConfigSynchro>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 8000c66:	f000 fbb1 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	4816      	ldr	r0, [pc, #88]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000c7a:	f008 f9a5 	bl	8008fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000c84:	f000 fba2 	bl	80013cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c88:	2360      	movs	r3, #96	; 0x60
 8000c8a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c98:	463b      	mov	r3, r7
 8000c9a:	2208      	movs	r2, #8
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000ca0:	f007 fc14 	bl	80084cc <HAL_TIM_PWM_ConfigChannel>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000caa:	f000 fb8f 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cae:	463b      	mov	r3, r7
 8000cb0:	220c      	movs	r2, #12
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000cb6:	f007 fc09 	bl	80084cc <HAL_TIM_PWM_ConfigChannel>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000cc0:	f000 fb84 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cc4:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <MX_TIM2_Init+0x12c>)
 8000cc6:	f000 fdfb 	bl	80018c0 <HAL_TIM_MspPostInit>

}
 8000cca:	bf00      	nop
 8000ccc:	3748      	adds	r7, #72	; 0x48
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20006cfc 	.word	0x20006cfc

08000cd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b092      	sub	sp, #72	; 0x48
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d06:	463b      	mov	r3, r7
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
 8000d14:	615a      	str	r2, [r3, #20]
 8000d16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d18:	4b44      	ldr	r3, [pc, #272]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d1a:	4a45      	ldr	r2, [pc, #276]	; (8000e30 <MX_TIM3_Init+0x158>)
 8000d1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d1e:	4b43      	ldr	r3, [pc, #268]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d24:	4b41      	ldr	r3, [pc, #260]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d2a:	4b40      	ldr	r3, [pc, #256]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d32:	4b3e      	ldr	r3, [pc, #248]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d38:	4b3c      	ldr	r3, [pc, #240]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d3e:	483b      	ldr	r0, [pc, #236]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d40:	f007 f8b3 	bl	8007eaa <HAL_TIM_Base_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000d4a:	f000 fb3f 	bl	80013cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d52:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4834      	ldr	r0, [pc, #208]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d5c:	f007 fc7c 	bl	8008658 <HAL_TIM_ConfigClockSource>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d66:	f000 fb31 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d6a:	4830      	ldr	r0, [pc, #192]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d6c:	f007 f910 	bl	8007f90 <HAL_TIM_PWM_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8000d76:	f000 fb29 	bl	80013cc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000d7a:	2306      	movs	r3, #6
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d86:	4619      	mov	r1, r3
 8000d88:	4828      	ldr	r0, [pc, #160]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000d8a:	f007 fd1c 	bl	80087c6 <HAL_TIM_SlaveConfigSynchro>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8000d94:	f000 fb1a 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	4821      	ldr	r0, [pc, #132]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000da8:	f008 f90e 	bl	8008fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000db2:	f000 fb0b 	bl	80013cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000db6:	2360      	movs	r3, #96	; 0x60
 8000db8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	2200      	movs	r2, #0
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4817      	ldr	r0, [pc, #92]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000dce:	f007 fb7d 	bl	80084cc <HAL_TIM_PWM_ConfigChannel>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000dd8:	f000 faf8 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ddc:	463b      	mov	r3, r7
 8000dde:	2204      	movs	r2, #4
 8000de0:	4619      	mov	r1, r3
 8000de2:	4812      	ldr	r0, [pc, #72]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000de4:	f007 fb72 	bl	80084cc <HAL_TIM_PWM_ConfigChannel>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8000dee:	f000 faed 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000df2:	463b      	mov	r3, r7
 8000df4:	2208      	movs	r2, #8
 8000df6:	4619      	mov	r1, r3
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000dfa:	f007 fb67 	bl	80084cc <HAL_TIM_PWM_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM3_Init+0x130>
  {
    Error_Handler();
 8000e04:	f000 fae2 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e08:	463b      	mov	r3, r7
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4807      	ldr	r0, [pc, #28]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000e10:	f007 fb5c 	bl	80084cc <HAL_TIM_PWM_ConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM3_Init+0x146>
  {
    Error_Handler();
 8000e1a:	f000 fad7 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e1e:	4803      	ldr	r0, [pc, #12]	; (8000e2c <MX_TIM3_Init+0x154>)
 8000e20:	f000 fd4e 	bl	80018c0 <HAL_TIM_MspPostInit>

}
 8000e24:	bf00      	nop
 8000e26:	3748      	adds	r7, #72	; 0x48
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200062a4 	.word	0x200062a4
 8000e30:	40000400 	.word	0x40000400

08000e34 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	; 0x30
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	2224      	movs	r2, #36	; 0x24
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f018 fa31 	bl	80192aa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e50:	4b20      	ldr	r3, [pc, #128]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000e52:	4a21      	ldr	r2, [pc, #132]	; (8000ed8 <MX_TIM4_Init+0xa4>)
 8000e54:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e56:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff;
 8000e62:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000e64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e68:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e70:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000e72:	2280      	movs	r2, #128	; 0x80
 8000e74:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000e86:	230a      	movs	r3, #10
 8000e88:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e92:	2300      	movs	r3, #0
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000e96:	230a      	movs	r3, #10
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000e9a:	f107 030c 	add.w	r3, r7, #12
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000ea2:	f007 f941 	bl	8008128 <HAL_TIM_Encoder_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000eac:	f000 fa8e 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4805      	ldr	r0, [pc, #20]	; (8000ed4 <MX_TIM4_Init+0xa0>)
 8000ebe:	f008 f883 	bl	8008fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000ec8:	f000 fa80 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	3730      	adds	r7, #48	; 0x30
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20005d54 	.word	0x20005d54
 8000ed8:	40000800 	.word	0x40000800

08000edc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08c      	sub	sp, #48	; 0x30
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee2:	f107 0320 	add.w	r3, r7, #32
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f08:	4b26      	ldr	r3, [pc, #152]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f0a:	4a27      	ldr	r2, [pc, #156]	; (8000fa8 <MX_TIM8_Init+0xcc>)
 8000f0c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1199;
 8000f0e:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f10:	f240 42af 	movw	r2, #1199	; 0x4af
 8000f14:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f16:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 210;
 8000f1c:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f1e:	22d2      	movs	r2, #210	; 0xd2
 8000f20:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f28:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f30:	2280      	movs	r2, #128	; 0x80
 8000f32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000f34:	481b      	ldr	r0, [pc, #108]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f36:	f006 ffb8 	bl	8007eaa <HAL_TIM_Base_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8000f40:	f000 fa44 	bl	80013cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f48:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000f4a:	f107 0320 	add.w	r3, r7, #32
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4814      	ldr	r0, [pc, #80]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f52:	f007 fb81 	bl	8008658 <HAL_TIM_ConfigClockSource>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000f5c:	f000 fa36 	bl	80013cc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000f60:	2304      	movs	r3, #4
 8000f62:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f70:	f007 fc29 	bl	80087c6 <HAL_TIM_SlaveConfigSynchro>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 8000f7a:	f000 fa27 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f7e:	2320      	movs	r3, #32
 8000f80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <MX_TIM8_Init+0xc8>)
 8000f8c:	f008 f81c 	bl	8008fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8000f96:	f000 fa19 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	3730      	adds	r7, #48	; 0x30
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20005cb0 	.word	0x20005cb0
 8000fa8:	40010400 	.word	0x40010400

08000fac <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08c      	sub	sp, #48	; 0x30
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]
 8000fbc:	609a      	str	r2, [r3, #8]
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	611a      	str	r2, [r3, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
 8000fd0:	615a      	str	r2, [r3, #20]
 8000fd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000fd4:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <MX_TIM12_Init+0xd8>)
 8000fd6:	4a2c      	ldr	r2, [pc, #176]	; (8001088 <MX_TIM12_Init+0xdc>)
 8000fd8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000fda:	4b2a      	ldr	r3, [pc, #168]	; (8001084 <MX_TIM12_Init+0xd8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe0:	4b28      	ldr	r3, [pc, #160]	; (8001084 <MX_TIM12_Init+0xd8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000fe6:	4b27      	ldr	r3, [pc, #156]	; (8001084 <MX_TIM12_Init+0xd8>)
 8000fe8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fec:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fee:	4b25      	ldr	r3, [pc, #148]	; (8001084 <MX_TIM12_Init+0xd8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff4:	4b23      	ldr	r3, [pc, #140]	; (8001084 <MX_TIM12_Init+0xd8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000ffa:	4822      	ldr	r0, [pc, #136]	; (8001084 <MX_TIM12_Init+0xd8>)
 8000ffc:	f006 ff55 	bl	8007eaa <HAL_TIM_Base_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM12_Init+0x5e>
  {
    Error_Handler();
 8001006:	f000 f9e1 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800100a:	481e      	ldr	r0, [pc, #120]	; (8001084 <MX_TIM12_Init+0xd8>)
 800100c:	f006 ffc0 	bl	8007f90 <HAL_TIM_PWM_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM12_Init+0x6e>
  {
    Error_Handler();
 8001016:	f000 f9d9 	bl	80013cc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_SlaveConfigSynchro(&htim12, &sSlaveConfig) != HAL_OK)
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	4619      	mov	r1, r3
 8001028:	4816      	ldr	r0, [pc, #88]	; (8001084 <MX_TIM12_Init+0xd8>)
 800102a:	f007 fbcc 	bl	80087c6 <HAL_TIM_SlaveConfigSynchro>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM12_Init+0x8c>
  {
    Error_Handler();
 8001034:	f000 f9ca 	bl	80013cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001038:	2360      	movs	r3, #96	; 0x60
 800103a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001048:	463b      	mov	r3, r7
 800104a:	2200      	movs	r2, #0
 800104c:	4619      	mov	r1, r3
 800104e:	480d      	ldr	r0, [pc, #52]	; (8001084 <MX_TIM12_Init+0xd8>)
 8001050:	f007 fa3c 	bl	80084cc <HAL_TIM_PWM_ConfigChannel>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM12_Init+0xb2>
  {
    Error_Handler();
 800105a:	f000 f9b7 	bl	80013cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800105e:	463b      	mov	r3, r7
 8001060:	2204      	movs	r2, #4
 8001062:	4619      	mov	r1, r3
 8001064:	4807      	ldr	r0, [pc, #28]	; (8001084 <MX_TIM12_Init+0xd8>)
 8001066:	f007 fa31 	bl	80084cc <HAL_TIM_PWM_ConfigChannel>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM12_Init+0xc8>
  {
    Error_Handler();
 8001070:	f000 f9ac 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001074:	4803      	ldr	r0, [pc, #12]	; (8001084 <MX_TIM12_Init+0xd8>)
 8001076:	f000 fc23 	bl	80018c0 <HAL_TIM_MspPostInit>

}
 800107a:	bf00      	nop
 800107c:	3730      	adds	r7, #48	; 0x30
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20006d40 	.word	0x20006d40
 8001088:	40001800 	.word	0x40001800

0800108c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_UART4_Init+0x4c>)
 8001092:	4a12      	ldr	r2, [pc, #72]	; (80010dc <MX_UART4_Init+0x50>)
 8001094:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <MX_UART4_Init+0x4c>)
 8001098:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800109c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_UART4_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_UART4_Init+0x4c>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <MX_UART4_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_UART4_Init+0x4c>)
 80010b2:	220c      	movs	r2, #12
 80010b4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <MX_UART4_Init+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_UART4_Init+0x4c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_UART4_Init+0x4c>)
 80010c4:	f008 f862 	bl	800918c <HAL_UART_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80010ce:	f000 f97d 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20006c58 	.word	0x20006c58
 80010dc:	40004c00 	.word	0x40004c00

080010e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_DMA_Init+0x3c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <MX_DMA_Init+0x3c>)
 80010f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_DMA_Init+0x3c>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 7, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2107      	movs	r1, #7
 8001106:	2038      	movs	r0, #56	; 0x38
 8001108:	f001 fb30 	bl	800276c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800110c:	2038      	movs	r0, #56	; 0x38
 800110e:	f001 fb49 	bl	80027a4 <HAL_NVIC_EnableIRQ>

}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800

08001120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08c      	sub	sp, #48	; 0x30
 8001124:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
 800113a:	4b65      	ldr	r3, [pc, #404]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a64      	ldr	r2, [pc, #400]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001140:	f043 0310 	orr.w	r3, r3, #16
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b62      	ldr	r3, [pc, #392]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0310 	and.w	r3, r3, #16
 800114e:	61bb      	str	r3, [r7, #24]
 8001150:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	4b5e      	ldr	r3, [pc, #376]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a5d      	ldr	r2, [pc, #372]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b5b      	ldr	r3, [pc, #364]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	4b57      	ldr	r3, [pc, #348]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a56      	ldr	r2, [pc, #344]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b54      	ldr	r3, [pc, #336]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b50      	ldr	r3, [pc, #320]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a4f      	ldr	r2, [pc, #316]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b4d      	ldr	r3, [pc, #308]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	4b49      	ldr	r3, [pc, #292]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a48      	ldr	r2, [pc, #288]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b46      	ldr	r3, [pc, #280]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b42      	ldr	r3, [pc, #264]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a41      	ldr	r2, [pc, #260]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 80011cc:	f043 0308 	orr.w	r3, r3, #8
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b3f      	ldr	r3, [pc, #252]	; (80012d0 <MX_GPIO_Init+0x1b0>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, VOLT_4_SEL0_Pin|VOLT_4_SEL1_Pin|VOLT_4_SEL2_Pin|TURN3A_Pin
 80011de:	2200      	movs	r2, #0
 80011e0:	f249 116f 	movw	r1, #37231	; 0x916f
 80011e4:	483b      	ldr	r0, [pc, #236]	; (80012d4 <MX_GPIO_Init+0x1b4>)
 80011e6:	f002 f823 	bl	8003230 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_15|TURN2A_Pin
                          |TURN2B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TURN3B_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80011f0:	4839      	ldr	r0, [pc, #228]	; (80012d8 <MX_GPIO_Init+0x1b8>)
 80011f2:	f002 f81d 	bl	8003230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f248 6140 	movw	r1, #34368	; 0x8640
 80011fc:	4837      	ldr	r0, [pc, #220]	; (80012dc <MX_GPIO_Init+0x1bc>)
 80011fe:	f002 f817 	bl	8003230 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|VOLT_3_SEL0_Pin|GPIO_PIN_13|GPIO_PIN_4
 8001202:	2200      	movs	r2, #0
 8001204:	f243 3134 	movw	r1, #13108	; 0x3334
 8001208:	4835      	ldr	r0, [pc, #212]	; (80012e0 <MX_GPIO_Init+0x1c0>)
 800120a:	f002 f811 	bl	8003230 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|TURN1A_Pin|TURN1B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, VOLT_2_SEL2_Pin|VOLT_3_SEL0D9_Pin|VOLT_3_SEL1_Pin|VOLT_3_SEL2_Pin
 800120e:	2200      	movs	r2, #0
 8001210:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001214:	4833      	ldr	r0, [pc, #204]	; (80012e4 <MX_GPIO_Init+0x1c4>)
 8001216:	f002 f80b 	bl	8003230 <HAL_GPIO_WritePin>
                          |VOLT_1_SEL1_Pin|VOLT_1_SEL2_Pin|VOLT_2_SEL0_Pin|VOLT_2_SEL1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : VOLT_4_SEL0_Pin VOLT_4_SEL1_Pin VOLT_4_SEL2_Pin TURN3A_Pin
                           PE8 PE12 PE15 TURN2A_Pin
                           TURN2B_Pin */
  GPIO_InitStruct.Pin = VOLT_4_SEL0_Pin|VOLT_4_SEL1_Pin|VOLT_4_SEL2_Pin|TURN3A_Pin
 800121a:	f249 136f 	movw	r3, #37231	; 0x916f
 800121e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_15|TURN2A_Pin
                          |TURN2B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001220:	2301      	movs	r3, #1
 8001222:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800122c:	f107 031c 	add.w	r3, r7, #28
 8001230:	4619      	mov	r1, r3
 8001232:	4828      	ldr	r0, [pc, #160]	; (80012d4 <MX_GPIO_Init+0x1b4>)
 8001234:	f001 fe62 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8001238:	2310      	movs	r3, #16
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001240:	2301      	movs	r3, #1
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4619      	mov	r1, r3
 800124a:	4822      	ldr	r0, [pc, #136]	; (80012d4 <MX_GPIO_Init+0x1b4>)
 800124c:	f001 fe56 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : TURN3B_Pin PC12 */
  GPIO_InitStruct.Pin = TURN3B_Pin|GPIO_PIN_12;
 8001250:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001256:	2301      	movs	r3, #1
 8001258:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4619      	mov	r1, r3
 8001268:	481b      	ldr	r0, [pc, #108]	; (80012d8 <MX_GPIO_Init+0x1b8>)
 800126a:	f001 fe47 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = LED1_Pin|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
 800126e:	f248 6340 	movw	r3, #34368	; 0x8640
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	4619      	mov	r1, r3
 8001286:	4815      	ldr	r0, [pc, #84]	; (80012dc <MX_GPIO_Init+0x1bc>)
 8001288:	f001 fe38 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 VOLT_3_SEL0_Pin PB13 PB4
                           PB5 TURN1A_Pin TURN1B_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|VOLT_3_SEL0_Pin|GPIO_PIN_13|GPIO_PIN_4
 800128c:	f243 3334 	movw	r3, #13108	; 0x3334
 8001290:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|TURN1A_Pin|TURN1B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001292:	2301      	movs	r3, #1
 8001294:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	4619      	mov	r1, r3
 80012a4:	480e      	ldr	r0, [pc, #56]	; (80012e0 <MX_GPIO_Init+0x1c0>)
 80012a6:	f001 fe29 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : VOLT_2_SEL2_Pin VOLT_3_SEL0D9_Pin VOLT_3_SEL1_Pin VOLT_3_SEL2_Pin
                           VOLT_0_SEL0_Pin VOLT_0_SEL1_Pin VOLT_0_SEL2_Pin VOLT_1_SEL0_Pin
                           VOLT_1_SEL1_Pin VOLT_1_SEL2_Pin VOLT_2_SEL0_Pin VOLT_2_SEL1_Pin */
  GPIO_InitStruct.Pin = VOLT_2_SEL2_Pin|VOLT_3_SEL0D9_Pin|VOLT_3_SEL1_Pin|VOLT_3_SEL2_Pin
 80012aa:	f640 73ff 	movw	r3, #4095	; 0xfff
 80012ae:	61fb      	str	r3, [r7, #28]
                          |VOLT_0_SEL0_Pin|VOLT_0_SEL1_Pin|VOLT_0_SEL2_Pin|VOLT_1_SEL0_Pin
                          |VOLT_1_SEL1_Pin|VOLT_1_SEL2_Pin|VOLT_2_SEL0_Pin|VOLT_2_SEL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	4619      	mov	r1, r3
 80012c2:	4808      	ldr	r0, [pc, #32]	; (80012e4 <MX_GPIO_Init+0x1c4>)
 80012c4:	f001 fe1a 	bl	8002efc <HAL_GPIO_Init>

}
 80012c8:	bf00      	nop
 80012ca:	3730      	adds	r7, #48	; 0x30
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40020800 	.word	0x40020800
 80012dc:	40020000 	.word	0x40020000
 80012e0:	40020400 	.word	0x40020400
 80012e4:	40020c00 	.word	0x40020c00

080012e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af02      	add	r7, sp, #8
 80012ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a2b      	ldr	r2, [pc, #172]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d101      	bne.n	80012fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012fa:	f000 fd67 	bl	8001dcc <HAL_IncTick>
		  xTaskNotifyFromISR(uiTaskHandle, NOTIF_TICKUI, eSetBits, &higher);
		  portYIELD_FROM_ISR(higher);
	  }
  }
  */
  if (htim->Instance == TIM8) {
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a29      	ldr	r2, [pc, #164]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d104      	bne.n	8001312 <HAL_TIM_PeriodElapsedCallback+0x2a>
		  ina3221_trigger_conversion();
		  //BaseType_t higher=0;
		  //xTaskNotifyFromISR(ctrlTaskHandle, NOTIF_TIM8, eSetBits, &higher);
		  //portYIELD_FROM_ISR(higher);
	  } else {
		  itm_debug1(DBG_TIM, "tim8",0);
 8001308:	2200      	movs	r2, #0
 800130a:	4928      	ldr	r1, [pc, #160]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800130c:	2001      	movs	r0, #1
 800130e:	f7ff f901 	bl	8000514 <itm_debug1>
	  }
  }
  if (htim->Instance == TIM1) {
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a26      	ldr	r2, [pc, #152]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d13e      	bne.n	800139a <HAL_TIM_PeriodElapsedCallback+0xb2>
	  static uint32_t lasttick = 0;
	  uint32_t t = HAL_GetTick();
 800131c:	f000 fd6a 	bl	8001df4 <HAL_GetTick>
 8001320:	6178      	str	r0, [r7, #20]
	  if (t >= lasttick+5) { // not faster than 20Hz, whatever the frequency is
 8001322:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	3305      	adds	r3, #5
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	429a      	cmp	r2, r3
 800132c:	d335      	bcc.n	800139a <HAL_TIM_PeriodElapsedCallback+0xb2>
		  lasttick = t;
 800132e:	4a21      	ldr	r2, [pc, #132]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	6013      	str	r3, [r2, #0]
		  uint32_t t1 = __HAL_TIM_GET_COUNTER(&htim1);
 8001334:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133a:	613b      	str	r3, [r7, #16]
		  if (0 || (t1<50)) {
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	2b31      	cmp	r3, #49	; 0x31
 8001340:	d82b      	bhi.n	800139a <HAL_TIM_PeriodElapsedCallback+0xb2>
			  static uint32_t cnt = 0;
			  itm_debug2(DBG_TIM|DBG_INA3221, "tim1",cnt, t1);
 8001342:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	491d      	ldr	r1, [pc, #116]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800134c:	2021      	movs	r0, #33	; 0x21
 800134e:	f7ff f8fb 	bl	8000548 <itm_debug2>
			  cnt++;
 8001352:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	3301      	adds	r3, #1
 8001358:	4a18      	ldr	r2, [pc, #96]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800135a:	6013      	str	r3, [r2, #0]
#if INA3221_TASK
			  BaseType_t higher=0;
 800135c:	2300      	movs	r3, #0
 800135e:	60fb      	str	r3, [r7, #12]
			  xTaskNotifyFromISR(ina3221_taskHandle, (cnt%2) ? NOTIF_INA_READ : NOTIF_INA_TRIG, eSetBits, &higher);
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001362:	6818      	ldr	r0, [r3, #0]
 8001364:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <HAL_TIM_PeriodElapsedCallback+0x8c>
 8001370:	2108      	movs	r1, #8
 8001372:	e000      	b.n	8001376 <HAL_TIM_PeriodElapsedCallback+0x8e>
 8001374:	2104      	movs	r1, #4
 8001376:	f107 030c 	add.w	r3, r7, #12
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2300      	movs	r3, #0
 800137e:	2201      	movs	r2, #1
 8001380:	f00d fd5e 	bl	800ee40 <xTaskGenericNotifyFromISR>
			  portYIELD_FROM_ISR(higher);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d007      	beq.n	800139a <HAL_TIM_PeriodElapsedCallback+0xb2>
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800138c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	f3bf 8f4f 	dsb	sy
 8001396:	f3bf 8f6f 	isb	sy
#endif
		  }
	  }
  }
  /* USER CODE END Callback 1 */
}
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40001400 	.word	0x40001400
 80013a8:	40010400 	.word	0x40010400
 80013ac:	08019530 	.word	0x08019530
 80013b0:	40010000 	.word	0x40010000
 80013b4:	2000062c 	.word	0x2000062c
 80013b8:	200067b0 	.word	0x200067b0
 80013bc:	20000630 	.word	0x20000630
 80013c0:	08019538 	.word	0x08019538
 80013c4:	20006d3c 	.word	0x20006d3c
 80013c8:	e000ed04 	.word	0xe000ed04

080013cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	for (;;) {
 80013d0:	e7fe      	b.n	80013d0 <Error_Handler+0x4>
	...

080013d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <HAL_MspInit+0x4c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <HAL_MspInit+0x4c>)
 80013e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <HAL_MspInit+0x4c>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_MspInit+0x4c>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <HAL_MspInit+0x4c>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_MspInit+0x4c>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800

08001424 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08c      	sub	sp, #48	; 0x30
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a4a      	ldr	r2, [pc, #296]	; (800156c <HAL_ADC_MspInit+0x148>)
 8001442:	4293      	cmp	r3, r2
 8001444:	f040 808d 	bne.w	8001562 <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	61bb      	str	r3, [r7, #24]
 800144c:	4b48      	ldr	r3, [pc, #288]	; (8001570 <HAL_ADC_MspInit+0x14c>)
 800144e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001450:	4a47      	ldr	r2, [pc, #284]	; (8001570 <HAL_ADC_MspInit+0x14c>)
 8001452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001456:	6453      	str	r3, [r2, #68]	; 0x44
 8001458:	4b45      	ldr	r3, [pc, #276]	; (8001570 <HAL_ADC_MspInit+0x14c>)
 800145a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001460:	61bb      	str	r3, [r7, #24]
 8001462:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	4b41      	ldr	r3, [pc, #260]	; (8001570 <HAL_ADC_MspInit+0x14c>)
 800146a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146c:	4a40      	ldr	r2, [pc, #256]	; (8001570 <HAL_ADC_MspInit+0x14c>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	6313      	str	r3, [r2, #48]	; 0x30
 8001474:	4b3e      	ldr	r3, [pc, #248]	; (8001570 <HAL_ADC_MspInit+0x14c>)
 8001476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	617b      	str	r3, [r7, #20]
 800147e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001480:	2300      	movs	r3, #0
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	4b3a      	ldr	r3, [pc, #232]	; (8001570 <HAL_ADC_MspInit+0x14c>)
 8001486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001488:	4a39      	ldr	r2, [pc, #228]	; (8001570 <HAL_ADC_MspInit+0x14c>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	6313      	str	r3, [r2, #48]	; 0x30
 8001490:	4b37      	ldr	r3, [pc, #220]	; (8001570 <HAL_ADC_MspInit+0x14c>)
 8001492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	4b33      	ldr	r3, [pc, #204]	; (8001570 <HAL_ADC_MspInit+0x14c>)
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	4a32      	ldr	r2, [pc, #200]	; (8001570 <HAL_ADC_MspInit+0x14c>)
 80014a6:	f043 0302 	orr.w	r3, r3, #2
 80014aa:	6313      	str	r3, [r2, #48]	; 0x30
 80014ac:	4b30      	ldr	r3, [pc, #192]	; (8001570 <HAL_ADC_MspInit+0x14c>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ADC_4_V0_Pin|ADC_4_V1_Pin|GPIO_PIN_2|GPIO_PIN_3
 80014b8:	231f      	movs	r3, #31
 80014ba:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014bc:	2303      	movs	r3, #3
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	4619      	mov	r1, r3
 80014ca:	482a      	ldr	r0, [pc, #168]	; (8001574 <HAL_ADC_MspInit+0x150>)
 80014cc:	f001 fd16 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|ADC_1_V0_Pin|GPIO_PIN_3
 80014d0:	233f      	movs	r3, #63	; 0x3f
 80014d2:	61fb      	str	r3, [r7, #28]
                          |ADC_2_V0_Pin|ADC_2_V1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d4:	2303      	movs	r3, #3
 80014d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	4619      	mov	r1, r3
 80014e2:	4825      	ldr	r0, [pc, #148]	; (8001578 <HAL_ADC_MspInit+0x154>)
 80014e4:	f001 fd0a 	bl	8002efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_3_V1_Pin;
 80014e8:	2301      	movs	r3, #1
 80014ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ec:	2303      	movs	r3, #3
 80014ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_3_V1_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	4820      	ldr	r0, [pc, #128]	; (800157c <HAL_ADC_MspInit+0x158>)
 80014fc:	f001 fcfe 	bl	8002efc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001500:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <HAL_ADC_MspInit+0x15c>)
 8001502:	4a20      	ldr	r2, [pc, #128]	; (8001584 <HAL_ADC_MspInit+0x160>)
 8001504:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001506:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <HAL_ADC_MspInit+0x15c>)
 8001508:	2200      	movs	r2, #0
 800150a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800150c:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <HAL_ADC_MspInit+0x15c>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001512:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <HAL_ADC_MspInit+0x15c>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <HAL_ADC_MspInit+0x15c>)
 800151a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800151e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001520:	4b17      	ldr	r3, [pc, #92]	; (8001580 <HAL_ADC_MspInit+0x15c>)
 8001522:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001526:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001528:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_ADC_MspInit+0x15c>)
 800152a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800152e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001530:	4b13      	ldr	r3, [pc, #76]	; (8001580 <HAL_ADC_MspInit+0x15c>)
 8001532:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001536:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <HAL_ADC_MspInit+0x15c>)
 800153a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800153e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <HAL_ADC_MspInit+0x15c>)
 8001542:	2200      	movs	r2, #0
 8001544:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001546:	480e      	ldr	r0, [pc, #56]	; (8001580 <HAL_ADC_MspInit+0x15c>)
 8001548:	f001 f93a 	bl	80027c0 <HAL_DMA_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 8001552:	f7ff ff3b 	bl	80013cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a09      	ldr	r2, [pc, #36]	; (8001580 <HAL_ADC_MspInit+0x15c>)
 800155a:	639a      	str	r2, [r3, #56]	; 0x38
 800155c:	4a08      	ldr	r2, [pc, #32]	; (8001580 <HAL_ADC_MspInit+0x15c>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001562:	bf00      	nop
 8001564:	3730      	adds	r7, #48	; 0x30
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40012000 	.word	0x40012000
 8001570:	40023800 	.word	0x40023800
 8001574:	40020800 	.word	0x40020800
 8001578:	40020000 	.word	0x40020000
 800157c:	40020400 	.word	0x40020400
 8001580:	20006330 	.word	0x20006330
 8001584:	40026410 	.word	0x40026410

08001588 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08c      	sub	sp, #48	; 0x30
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 031c 	add.w	r3, r7, #28
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a52      	ldr	r2, [pc, #328]	; (80016f0 <HAL_I2C_MspInit+0x168>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d13c      	bne.n	8001624 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
 80015ae:	4b51      	ldr	r3, [pc, #324]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a50      	ldr	r2, [pc, #320]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 80015b4:	f043 0302 	orr.w	r3, r3, #2
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b4e      	ldr	r3, [pc, #312]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	61bb      	str	r3, [r7, #24]
 80015c4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015c6:	23c0      	movs	r3, #192	; 0xc0
 80015c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ca:	2312      	movs	r3, #18
 80015cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d2:	2303      	movs	r3, #3
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015d6:	2304      	movs	r3, #4
 80015d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4619      	mov	r1, r3
 80015e0:	4845      	ldr	r0, [pc, #276]	; (80016f8 <HAL_I2C_MspInit+0x170>)
 80015e2:	f001 fc8b 	bl	8002efc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	4b42      	ldr	r3, [pc, #264]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	4a41      	ldr	r2, [pc, #260]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 80015f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015f4:	6413      	str	r3, [r2, #64]	; 0x40
 80015f6:	4b3f      	ldr	r3, [pc, #252]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	201f      	movs	r0, #31
 8001608:	f001 f8b0 	bl	800276c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800160c:	201f      	movs	r0, #31
 800160e:	f001 f8c9 	bl	80027a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	2020      	movs	r0, #32
 8001618:	f001 f8a8 	bl	800276c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800161c:	2020      	movs	r0, #32
 800161e:	f001 f8c1 	bl	80027a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001622:	e060      	b.n	80016e6 <HAL_I2C_MspInit+0x15e>
  else if(hi2c->Instance==I2C3)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a34      	ldr	r2, [pc, #208]	; (80016fc <HAL_I2C_MspInit+0x174>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d15b      	bne.n	80016e6 <HAL_I2C_MspInit+0x15e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a2f      	ldr	r2, [pc, #188]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b2d      	ldr	r3, [pc, #180]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0304 	and.w	r3, r3, #4
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	4b29      	ldr	r3, [pc, #164]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a28      	ldr	r2, [pc, #160]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b26      	ldr	r3, [pc, #152]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001666:	f44f 7300 	mov.w	r3, #512	; 0x200
 800166a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800166c:	2312      	movs	r3, #18
 800166e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001670:	2301      	movs	r3, #1
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001674:	2303      	movs	r3, #3
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001678:	2304      	movs	r3, #4
 800167a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	4619      	mov	r1, r3
 8001682:	481f      	ldr	r0, [pc, #124]	; (8001700 <HAL_I2C_MspInit+0x178>)
 8001684:	f001 fc3a 	bl	8002efc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800168c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800168e:	2312      	movs	r3, #18
 8001690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001692:	2301      	movs	r3, #1
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001696:	2303      	movs	r3, #3
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800169a:	2304      	movs	r3, #4
 800169c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169e:	f107 031c 	add.w	r3, r7, #28
 80016a2:	4619      	mov	r1, r3
 80016a4:	4817      	ldr	r0, [pc, #92]	; (8001704 <HAL_I2C_MspInit+0x17c>)
 80016a6:	f001 fc29 	bl	8002efc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	4a10      	ldr	r2, [pc, #64]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 80016b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016b8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <HAL_I2C_MspInit+0x16c>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2105      	movs	r1, #5
 80016ca:	2048      	movs	r0, #72	; 0x48
 80016cc:	f001 f84e 	bl	800276c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80016d0:	2048      	movs	r0, #72	; 0x48
 80016d2:	f001 f867 	bl	80027a4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2105      	movs	r1, #5
 80016da:	2049      	movs	r0, #73	; 0x49
 80016dc:	f001 f846 	bl	800276c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80016e0:	2049      	movs	r0, #73	; 0x49
 80016e2:	f001 f85f 	bl	80027a4 <HAL_NVIC_EnableIRQ>
}
 80016e6:	bf00      	nop
 80016e8:	3730      	adds	r7, #48	; 0x30
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40005400 	.word	0x40005400
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40020400 	.word	0x40020400
 80016fc:	40005c00 	.word	0x40005c00
 8001700:	40020800 	.word	0x40020800
 8001704:	40020000 	.word	0x40020000

08001708 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a05      	ldr	r2, [pc, #20]	; (800172c <HAL_RTC_MspInit+0x24>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d102      	bne.n	8001720 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800171a:	4b05      	ldr	r3, [pc, #20]	; (8001730 <HAL_RTC_MspInit+0x28>)
 800171c:	2201      	movs	r2, #1
 800171e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	40002800 	.word	0x40002800
 8001730:	42470e3c 	.word	0x42470e3c

08001734 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a36      	ldr	r2, [pc, #216]	; (800181c <HAL_TIM_Base_MspInit+0xe8>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d116      	bne.n	8001774 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
 800174a:	4b35      	ldr	r3, [pc, #212]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	4a34      	ldr	r2, [pc, #208]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6453      	str	r3, [r2, #68]	; 0x44
 8001756:	4b32      	ldr	r3, [pc, #200]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	61fb      	str	r3, [r7, #28]
 8001760:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 7, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2107      	movs	r1, #7
 8001766:	2019      	movs	r0, #25
 8001768:	f001 f800 	bl	800276c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800176c:	2019      	movs	r0, #25
 800176e:	f001 f819 	bl	80027a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001772:	e04e      	b.n	8001812 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800177c:	d10e      	bne.n	800179c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
 8001782:	4b27      	ldr	r3, [pc, #156]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	4a26      	ldr	r2, [pc, #152]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6413      	str	r3, [r2, #64]	; 0x40
 800178e:	4b24      	ldr	r3, [pc, #144]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	61bb      	str	r3, [r7, #24]
 8001798:	69bb      	ldr	r3, [r7, #24]
}
 800179a:	e03a      	b.n	8001812 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a20      	ldr	r2, [pc, #128]	; (8001824 <HAL_TIM_Base_MspInit+0xf0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d10e      	bne.n	80017c4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	4b1d      	ldr	r3, [pc, #116]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a1c      	ldr	r2, [pc, #112]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697b      	ldr	r3, [r7, #20]
}
 80017c2:	e026      	b.n	8001812 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM8)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a17      	ldr	r2, [pc, #92]	; (8001828 <HAL_TIM_Base_MspInit+0xf4>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d10e      	bne.n	80017ec <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	4b13      	ldr	r3, [pc, #76]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	4a12      	ldr	r2, [pc, #72]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	6453      	str	r3, [r2, #68]	; 0x44
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
}
 80017ea:	e012      	b.n	8001812 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM12)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0e      	ldr	r2, [pc, #56]	; (800182c <HAL_TIM_Base_MspInit+0xf8>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d10d      	bne.n	8001812 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	4a08      	ldr	r2, [pc, #32]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 8001800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001804:	6413      	str	r3, [r2, #64]	; 0x40
 8001806:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_TIM_Base_MspInit+0xec>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
}
 8001812:	bf00      	nop
 8001814:	3720      	adds	r7, #32
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40010000 	.word	0x40010000
 8001820:	40023800 	.word	0x40023800
 8001824:	40000400 	.word	0x40000400
 8001828:	40010400 	.word	0x40010400
 800182c:	40001800 	.word	0x40001800

08001830 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <HAL_TIM_Encoder_MspInit+0x84>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d12c      	bne.n	80018ac <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	4a17      	ldr	r2, [pc, #92]	; (80018b8 <HAL_TIM_Encoder_MspInit+0x88>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	6413      	str	r3, [r2, #64]	; 0x40
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a10      	ldr	r2, [pc, #64]	; (80018b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001878:	f043 0308 	orr.w	r3, r3, #8
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ROT1_Pin|ROT2_Pin;
 800188a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800188e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001894:	2301      	movs	r3, #1
 8001896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800189c:	2302      	movs	r3, #2
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	4805      	ldr	r0, [pc, #20]	; (80018bc <HAL_TIM_Encoder_MspInit+0x8c>)
 80018a8:	f001 fb28 	bl	8002efc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80018ac:	bf00      	nop
 80018ae:	3728      	adds	r7, #40	; 0x28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40000800 	.word	0x40000800
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020c00 	.word	0x40020c00

080018c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08c      	sub	sp, #48	; 0x30
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	f107 031c 	add.w	r3, r7, #28
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a59      	ldr	r2, [pc, #356]	; (8001a44 <HAL_TIM_MspPostInit+0x184>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d11f      	bne.n	8001922 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
 80018e6:	4b58      	ldr	r3, [pc, #352]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a57      	ldr	r2, [pc, #348]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 80018ec:	f043 0310 	orr.w	r3, r3, #16
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b55      	ldr	r3, [pc, #340]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0310 	and.w	r3, r3, #16
 80018fa:	61bb      	str	r3, [r7, #24]
 80018fc:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_0_1_Pin|PWM_0_1E11_Pin|PWM_1_0_Pin|PWM_1_1_Pin;
 80018fe:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8001902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800190c:	2301      	movs	r3, #1
 800190e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001910:	2301      	movs	r3, #1
 8001912:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001914:	f107 031c 	add.w	r3, r7, #28
 8001918:	4619      	mov	r1, r3
 800191a:	484c      	ldr	r0, [pc, #304]	; (8001a4c <HAL_TIM_MspPostInit+0x18c>)
 800191c:	f001 faee 	bl	8002efc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001920:	e08b      	b.n	8001a3a <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM2)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800192a:	d11f      	bne.n	800196c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	4b45      	ldr	r3, [pc, #276]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 8001932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001934:	4a44      	ldr	r2, [pc, #272]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 8001936:	f043 0302 	orr.w	r3, r3, #2
 800193a:	6313      	str	r3, [r2, #48]	; 0x30
 800193c:	4b42      	ldr	r3, [pc, #264]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	617b      	str	r3, [r7, #20]
 8001946:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_2_0_Pin|PWM_2_1_Pin;
 8001948:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800194c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001956:	2300      	movs	r3, #0
 8001958:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800195a:	2301      	movs	r3, #1
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195e:	f107 031c 	add.w	r3, r7, #28
 8001962:	4619      	mov	r1, r3
 8001964:	483a      	ldr	r0, [pc, #232]	; (8001a50 <HAL_TIM_MspPostInit+0x190>)
 8001966:	f001 fac9 	bl	8002efc <HAL_GPIO_Init>
}
 800196a:	e066      	b.n	8001a3a <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM3)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a38      	ldr	r2, [pc, #224]	; (8001a54 <HAL_TIM_MspPostInit+0x194>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d13d      	bne.n	80019f2 <HAL_TIM_MspPostInit+0x132>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	4b33      	ldr	r3, [pc, #204]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a32      	ldr	r2, [pc, #200]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 8001980:	f043 0302 	orr.w	r3, r3, #2
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b30      	ldr	r3, [pc, #192]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a2b      	ldr	r2, [pc, #172]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 800199c:	f043 0304 	orr.w	r3, r3, #4
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b29      	ldr	r3, [pc, #164]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_4_1_Pin;
 80019ae:	2302      	movs	r3, #2
 80019b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ba:	2300      	movs	r3, #0
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019be:	2302      	movs	r3, #2
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PWM_4_1_GPIO_Port, &GPIO_InitStruct);
 80019c2:	f107 031c 	add.w	r3, r7, #28
 80019c6:	4619      	mov	r1, r3
 80019c8:	4821      	ldr	r0, [pc, #132]	; (8001a50 <HAL_TIM_MspPostInit+0x190>)
 80019ca:	f001 fa97 	bl	8002efc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_3_0_Pin|PWM_3_1_Pin|PWM_4_0_Pin;
 80019ce:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80019d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019e0:	2302      	movs	r3, #2
 80019e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e4:	f107 031c 	add.w	r3, r7, #28
 80019e8:	4619      	mov	r1, r3
 80019ea:	481b      	ldr	r0, [pc, #108]	; (8001a58 <HAL_TIM_MspPostInit+0x198>)
 80019ec:	f001 fa86 	bl	8002efc <HAL_GPIO_Init>
}
 80019f0:	e023      	b.n	8001a3a <HAL_TIM_MspPostInit+0x17a>
  else if(htim->Instance==TIM12)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a19      	ldr	r2, [pc, #100]	; (8001a5c <HAL_TIM_MspPostInit+0x19c>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d11e      	bne.n	8001a3a <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fc:	2300      	movs	r3, #0
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	4a10      	ldr	r2, [pc, #64]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 8001a06:	f043 0302 	orr.w	r3, r3, #2
 8001a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <HAL_TIM_MspPostInit+0x188>)
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_5_0_Pin|PWM_5_1_Pin;
 8001a18:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001a2a:	2309      	movs	r3, #9
 8001a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	4619      	mov	r1, r3
 8001a34:	4806      	ldr	r0, [pc, #24]	; (8001a50 <HAL_TIM_MspPostInit+0x190>)
 8001a36:	f001 fa61 	bl	8002efc <HAL_GPIO_Init>
}
 8001a3a:	bf00      	nop
 8001a3c:	3730      	adds	r7, #48	; 0x30
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40010000 	.word	0x40010000
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40020400 	.word	0x40020400
 8001a54:	40000400 	.word	0x40000400
 8001a58:	40020800 	.word	0x40020800
 8001a5c:	40001800 	.word	0x40001800

08001a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	; 0x28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a1d      	ldr	r2, [pc, #116]	; (8001af4 <HAL_UART_MspInit+0x94>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d134      	bne.n	8001aec <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <HAL_UART_MspInit+0x98>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	4a1b      	ldr	r2, [pc, #108]	; (8001af8 <HAL_UART_MspInit+0x98>)
 8001a8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a90:	6413      	str	r3, [r2, #64]	; 0x40
 8001a92:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <HAL_UART_MspInit+0x98>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <HAL_UART_MspInit+0x98>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a14      	ldr	r2, [pc, #80]	; (8001af8 <HAL_UART_MspInit+0x98>)
 8001aa8:	f043 0304 	orr.w	r3, r3, #4
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_UART_MspInit+0x98>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001aba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001acc:	2308      	movs	r3, #8
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4809      	ldr	r0, [pc, #36]	; (8001afc <HAL_UART_MspInit+0x9c>)
 8001ad8:	f001 fa10 	bl	8002efc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2105      	movs	r1, #5
 8001ae0:	2034      	movs	r0, #52	; 0x34
 8001ae2:	f000 fe43 	bl	800276c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001ae6:	2034      	movs	r0, #52	; 0x34
 8001ae8:	f000 fe5c 	bl	80027a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001aec:	bf00      	nop
 8001aee:	3728      	adds	r7, #40	; 0x28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40004c00 	.word	0x40004c00
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020800 	.word	0x40020800

08001b00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08c      	sub	sp, #48	; 0x30
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8001b10:	2200      	movs	r2, #0
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	2037      	movs	r0, #55	; 0x37
 8001b16:	f000 fe29 	bl	800276c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b1a:	2037      	movs	r0, #55	; 0x37
 8001b1c:	f000 fe42 	bl	80027a4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <HAL_InitTick+0xa4>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	4a1e      	ldr	r2, [pc, #120]	; (8001ba4 <HAL_InitTick+0xa4>)
 8001b2a:	f043 0320 	orr.w	r3, r3, #32
 8001b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b30:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <HAL_InitTick+0xa4>)
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f003 0320 	and.w	r3, r3, #32
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b3c:	f107 0210 	add.w	r2, r7, #16
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4611      	mov	r1, r2
 8001b46:	4618      	mov	r0, r3
 8001b48:	f005 ffb6 	bl	8007ab8 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001b4c:	f005 ff8c 	bl	8007a68 <HAL_RCC_GetPCLK1Freq>
 8001b50:	4603      	mov	r3, r0
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b58:	4a13      	ldr	r2, [pc, #76]	; (8001ba8 <HAL_InitTick+0xa8>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	0c9b      	lsrs	r3, r3, #18
 8001b60:	3b01      	subs	r3, #1
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <HAL_InitTick+0xac>)
 8001b66:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <HAL_InitTick+0xb0>)
 8001b68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000 / 1000) - 1;
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <HAL_InitTick+0xac>)
 8001b6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b70:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001b72:	4a0e      	ldr	r2, [pc, #56]	; (8001bac <HAL_InitTick+0xac>)
 8001b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b76:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <HAL_InitTick+0xac>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_InitTick+0xac>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001b84:	4809      	ldr	r0, [pc, #36]	; (8001bac <HAL_InitTick+0xac>)
 8001b86:	f006 f990 	bl	8007eaa <HAL_TIM_Base_Init>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d104      	bne.n	8001b9a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001b90:	4806      	ldr	r0, [pc, #24]	; (8001bac <HAL_InitTick+0xac>)
 8001b92:	f006 f9d9 	bl	8007f48 <HAL_TIM_Base_Start_IT>
 8001b96:	4603      	mov	r3, r0
 8001b98:	e000      	b.n	8001b9c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3730      	adds	r7, #48	; 0x30
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	431bde83 	.word	0x431bde83
 8001bac:	20006f80 	.word	0x20006f80
 8001bb0:	40001400 	.word	0x40001400

08001bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <HardFault_Handler+0x4>

08001bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <MemManage_Handler+0x4>

08001bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd2:	e7fe      	b.n	8001bd2 <BusFault_Handler+0x4>

08001bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <UsageFault_Handler+0x4>

08001bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001bee:	f006 fb64 	bl	80082ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200067b0 	.word	0x200067b0

08001bfc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001c00:	4802      	ldr	r0, [pc, #8]	; (8001c0c <I2C1_EV_IRQHandler+0x10>)
 8001c02:	f002 f973 	bl	8003eec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20005d98 	.word	0x20005d98

08001c10 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <I2C1_ER_IRQHandler+0x10>)
 8001c16:	f002 fad6 	bl	80041c6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20005d98 	.word	0x20005d98

08001c24 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <UART4_IRQHandler+0x10>)
 8001c2a:	f007 fafd 	bl	8009228 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20006c58 	.word	0x20006c58

08001c38 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <TIM7_IRQHandler+0x10>)
 8001c3e:	f006 fb3c 	bl	80082ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20006f80 	.word	0x20006f80

08001c4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <DMA2_Stream0_IRQHandler+0x10>)
 8001c52:	f000 fedd 	bl	8002a10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20006330 	.word	0x20006330

08001c60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <OTG_FS_IRQHandler+0x10>)
 8001c66:	f004 fa91 	bl	800618c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200084d4 	.word	0x200084d4

08001c74 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <I2C3_EV_IRQHandler+0x10>)
 8001c7a:	f002 f937 	bl	8003eec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	2000562c 	.word	0x2000562c

08001c88 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <I2C3_ER_IRQHandler+0x10>)
 8001c8e:	f002 fa9a 	bl	80041c6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	2000562c 	.word	0x2000562c

08001c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ca4:	4a14      	ldr	r2, [pc, #80]	; (8001cf8 <_sbrk+0x5c>)
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <_sbrk+0x60>)
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb0:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <_sbrk+0x64>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d102      	bne.n	8001cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cb8:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <_sbrk+0x64>)
 8001cba:	4a12      	ldr	r2, [pc, #72]	; (8001d04 <_sbrk+0x68>)
 8001cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cbe:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <_sbrk+0x64>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d207      	bcs.n	8001cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ccc:	f017 fa8e 	bl	80191ec <__errno>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	230c      	movs	r3, #12
 8001cd4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cda:	e009      	b.n	8001cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cdc:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <_sbrk+0x64>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ce2:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <_sbrk+0x64>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	4a05      	ldr	r2, [pc, #20]	; (8001d00 <_sbrk+0x64>)
 8001cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cee:	68fb      	ldr	r3, [r7, #12]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20020000 	.word	0x20020000
 8001cfc:	00000400 	.word	0x00000400
 8001d00:	20000634 	.word	0x20000634
 8001d04:	20009150 	.word	0x20009150

08001d08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <SystemInit+0x28>)
 8001d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d12:	4a07      	ldr	r2, [pc, #28]	; (8001d30 <SystemInit+0x28>)
 8001d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d1c:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <SystemInit+0x28>)
 8001d1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d22:	609a      	str	r2, [r3, #8]
#endif
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d3a:	e003      	b.n	8001d44 <LoopCopyDataInit>

08001d3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d42:	3104      	adds	r1, #4

08001d44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d44:	480b      	ldr	r0, [pc, #44]	; (8001d74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d46:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d4c:	d3f6      	bcc.n	8001d3c <CopyDataInit>
  ldr  r2, =_sbss
 8001d4e:	4a0b      	ldr	r2, [pc, #44]	; (8001d7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d50:	e002      	b.n	8001d58 <LoopFillZerobss>

08001d52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d54:	f842 3b04 	str.w	r3, [r2], #4

08001d58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d58:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d5c:	d3f9      	bcc.n	8001d52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d5e:	f7ff ffd3 	bl	8001d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d62:	f017 fa49 	bl	80191f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d66:	f7fe fc0b 	bl	8000580 <main>
  bx  lr    
 8001d6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d6c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d70:	0801be34 	.word	0x0801be34
  ldr  r0, =_sdata
 8001d74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d78:	2000060c 	.word	0x2000060c
  ldr  r2, =_sbss
 8001d7c:	20000610 	.word	0x20000610
  ldr  r3, = _ebss
 8001d80:	20009150 	.word	0x20009150

08001d84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d84:	e7fe      	b.n	8001d84 <ADC_IRQHandler>
	...

08001d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <HAL_Init+0x40>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0d      	ldr	r2, [pc, #52]	; (8001dc8 <HAL_Init+0x40>)
 8001d92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_Init+0x40>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <HAL_Init+0x40>)
 8001d9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001da2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <HAL_Init+0x40>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <HAL_Init+0x40>)
 8001daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db0:	2003      	movs	r0, #3
 8001db2:	f000 fcd0 	bl	8002756 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001db6:	2000      	movs	r0, #0
 8001db8:	f7ff fea2 	bl	8001b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dbc:	f7ff fb0a 	bl	80013d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023c00 	.word	0x40023c00

08001dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_IncTick+0x20>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_IncTick+0x24>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <HAL_IncTick+0x24>)
 8001dde:	6013      	str	r3, [r2, #0]
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000008 	.word	0x20000008
 8001df0:	20006fc0 	.word	0x20006fc0

08001df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return uwTick;
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <HAL_GetTick+0x14>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	20006fc0 	.word	0x20006fc0

08001e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e14:	f7ff ffee 	bl	8001df4 <HAL_GetTick>
 8001e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e24:	d005      	beq.n	8001e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <HAL_Delay+0x40>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4413      	add	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e32:	bf00      	nop
 8001e34:	f7ff ffde 	bl	8001df4 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d8f7      	bhi.n	8001e34 <HAL_Delay+0x28>
  {
  }
}
 8001e44:	bf00      	nop
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000008 	.word	0x20000008

08001e50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e033      	b.n	8001ece <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d109      	bne.n	8001e82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff fad8 	bl	8001424 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d118      	bne.n	8001ec0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e96:	f023 0302 	bic.w	r3, r3, #2
 8001e9a:	f043 0202 	orr.w	r2, r3, #2
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 fa2c 	bl	8002300 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f023 0303 	bic.w	r3, r3, #3
 8001eb6:	f043 0201 	orr.w	r2, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	641a      	str	r2, [r3, #64]	; 0x40
 8001ebe:	e001      	b.n	8001ec4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_ADC_Start_DMA+0x1e>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e0cc      	b.n	8002090 <HAL_ADC_Start_DMA+0x1b8>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d018      	beq.n	8001f3e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f1c:	4b5e      	ldr	r3, [pc, #376]	; (8002098 <HAL_ADC_Start_DMA+0x1c0>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a5e      	ldr	r2, [pc, #376]	; (800209c <HAL_ADC_Start_DMA+0x1c4>)
 8001f22:	fba2 2303 	umull	r2, r3, r2, r3
 8001f26:	0c9a      	lsrs	r2, r3, #18
 8001f28:	4613      	mov	r3, r2
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	4413      	add	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001f30:	e002      	b.n	8001f38 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f9      	bne.n	8001f32 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	f040 80a0 	bne.w	800208e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f56:	f023 0301 	bic.w	r3, r3, #1
 8001f5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d007      	beq.n	8001f80 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f8c:	d106      	bne.n	8001f9c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	f023 0206 	bic.w	r2, r3, #6
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	645a      	str	r2, [r3, #68]	; 0x44
 8001f9a:	e002      	b.n	8001fa2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001faa:	4b3d      	ldr	r3, [pc, #244]	; (80020a0 <HAL_ADC_Start_DMA+0x1c8>)
 8001fac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb2:	4a3c      	ldr	r2, [pc, #240]	; (80020a4 <HAL_ADC_Start_DMA+0x1cc>)
 8001fb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fba:	4a3b      	ldr	r2, [pc, #236]	; (80020a8 <HAL_ADC_Start_DMA+0x1d0>)
 8001fbc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc2:	4a3a      	ldr	r2, [pc, #232]	; (80020ac <HAL_ADC_Start_DMA+0x1d4>)
 8001fc4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001fce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001fde:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	334c      	adds	r3, #76	; 0x4c
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f000 fc8c 	bl	800291c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	2b00      	cmp	r3, #0
 800200e:	d12a      	bne.n	8002066 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a26      	ldr	r2, [pc, #152]	; (80020b0 <HAL_ADC_Start_DMA+0x1d8>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d015      	beq.n	8002046 <HAL_ADC_Start_DMA+0x16e>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a25      	ldr	r2, [pc, #148]	; (80020b4 <HAL_ADC_Start_DMA+0x1dc>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d105      	bne.n	8002030 <HAL_ADC_Start_DMA+0x158>
 8002024:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <HAL_ADC_Start_DMA+0x1c8>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 031f 	and.w	r3, r3, #31
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00a      	beq.n	8002046 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a20      	ldr	r2, [pc, #128]	; (80020b8 <HAL_ADC_Start_DMA+0x1e0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d129      	bne.n	800208e <HAL_ADC_Start_DMA+0x1b6>
 800203a:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <HAL_ADC_Start_DMA+0x1c8>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 031f 	and.w	r3, r3, #31
 8002042:	2b0f      	cmp	r3, #15
 8002044:	d823      	bhi.n	800208e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d11c      	bne.n	800208e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	e013      	b.n	800208e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a11      	ldr	r2, [pc, #68]	; (80020b0 <HAL_ADC_Start_DMA+0x1d8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d10e      	bne.n	800208e <HAL_ADC_Start_DMA+0x1b6>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d107      	bne.n	800208e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800208c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000000 	.word	0x20000000
 800209c:	431bde83 	.word	0x431bde83
 80020a0:	40012300 	.word	0x40012300
 80020a4:	080024f9 	.word	0x080024f9
 80020a8:	080025b3 	.word	0x080025b3
 80020ac:	080025cf 	.word	0x080025cf
 80020b0:	40012000 	.word	0x40012000
 80020b4:	40012100 	.word	0x40012100
 80020b8:	40012200 	.word	0x40012200

080020bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x1c>
 80020d4:	2302      	movs	r3, #2
 80020d6:	e105      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x228>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b09      	cmp	r3, #9
 80020e6:	d925      	bls.n	8002134 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68d9      	ldr	r1, [r3, #12]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	461a      	mov	r2, r3
 80020f6:	4613      	mov	r3, r2
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	4413      	add	r3, r2
 80020fc:	3b1e      	subs	r3, #30
 80020fe:	2207      	movs	r2, #7
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43da      	mvns	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	400a      	ands	r2, r1
 800210c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68d9      	ldr	r1, [r3, #12]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	b29b      	uxth	r3, r3
 800211e:	4618      	mov	r0, r3
 8002120:	4603      	mov	r3, r0
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	4403      	add	r3, r0
 8002126:	3b1e      	subs	r3, #30
 8002128:	409a      	lsls	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	e022      	b.n	800217a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6919      	ldr	r1, [r3, #16]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	b29b      	uxth	r3, r3
 8002140:	461a      	mov	r2, r3
 8002142:	4613      	mov	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	2207      	movs	r2, #7
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43da      	mvns	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	400a      	ands	r2, r1
 8002156:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6919      	ldr	r1, [r3, #16]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	b29b      	uxth	r3, r3
 8002168:	4618      	mov	r0, r3
 800216a:	4603      	mov	r3, r0
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4403      	add	r3, r0
 8002170:	409a      	lsls	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b06      	cmp	r3, #6
 8002180:	d824      	bhi.n	80021cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	3b05      	subs	r3, #5
 8002194:	221f      	movs	r2, #31
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43da      	mvns	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	400a      	ands	r2, r1
 80021a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	4618      	mov	r0, r3
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	3b05      	subs	r3, #5
 80021be:	fa00 f203 	lsl.w	r2, r0, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	635a      	str	r2, [r3, #52]	; 0x34
 80021ca:	e04c      	b.n	8002266 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b0c      	cmp	r3, #12
 80021d2:	d824      	bhi.n	800221e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	3b23      	subs	r3, #35	; 0x23
 80021e6:	221f      	movs	r2, #31
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43da      	mvns	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	400a      	ands	r2, r1
 80021f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	b29b      	uxth	r3, r3
 8002202:	4618      	mov	r0, r3
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	3b23      	subs	r3, #35	; 0x23
 8002210:	fa00 f203 	lsl.w	r2, r0, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	631a      	str	r2, [r3, #48]	; 0x30
 800221c:	e023      	b.n	8002266 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	3b41      	subs	r3, #65	; 0x41
 8002230:	221f      	movs	r2, #31
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43da      	mvns	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	400a      	ands	r2, r1
 800223e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	b29b      	uxth	r3, r3
 800224c:	4618      	mov	r0, r3
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	3b41      	subs	r3, #65	; 0x41
 800225a:	fa00 f203 	lsl.w	r2, r0, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002266:	4b22      	ldr	r3, [pc, #136]	; (80022f0 <HAL_ADC_ConfigChannel+0x234>)
 8002268:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a21      	ldr	r2, [pc, #132]	; (80022f4 <HAL_ADC_ConfigChannel+0x238>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d109      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x1cc>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b12      	cmp	r3, #18
 800227a:	d105      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a19      	ldr	r2, [pc, #100]	; (80022f4 <HAL_ADC_ConfigChannel+0x238>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d123      	bne.n	80022da <HAL_ADC_ConfigChannel+0x21e>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b10      	cmp	r3, #16
 8002298:	d003      	beq.n	80022a2 <HAL_ADC_ConfigChannel+0x1e6>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b11      	cmp	r3, #17
 80022a0:	d11b      	bne.n	80022da <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b10      	cmp	r3, #16
 80022b4:	d111      	bne.n	80022da <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <HAL_ADC_ConfigChannel+0x23c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a10      	ldr	r2, [pc, #64]	; (80022fc <HAL_ADC_ConfigChannel+0x240>)
 80022bc:	fba2 2303 	umull	r2, r3, r2, r3
 80022c0:	0c9a      	lsrs	r2, r3, #18
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022cc:	e002      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	3b01      	subs	r3, #1
 80022d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f9      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	40012300 	.word	0x40012300
 80022f4:	40012000 	.word	0x40012000
 80022f8:	20000000 	.word	0x20000000
 80022fc:	431bde83 	.word	0x431bde83

08002300 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002308:	4b79      	ldr	r3, [pc, #484]	; (80024f0 <ADC_Init+0x1f0>)
 800230a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	431a      	orrs	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002334:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6859      	ldr	r1, [r3, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	021a      	lsls	r2, r3, #8
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002358:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6859      	ldr	r1, [r3, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800237a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6899      	ldr	r1, [r3, #8]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002392:	4a58      	ldr	r2, [pc, #352]	; (80024f4 <ADC_Init+0x1f4>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d022      	beq.n	80023de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6899      	ldr	r1, [r3, #8]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6899      	ldr	r1, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	e00f      	b.n	80023fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0202 	bic.w	r2, r2, #2
 800240c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6899      	ldr	r1, [r3, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7e1b      	ldrb	r3, [r3, #24]
 8002418:	005a      	lsls	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d01b      	beq.n	8002464 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800243a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800244a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6859      	ldr	r1, [r3, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	3b01      	subs	r3, #1
 8002458:	035a      	lsls	r2, r3, #13
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	e007      	b.n	8002474 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002472:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002482:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	3b01      	subs	r3, #1
 8002490:	051a      	lsls	r2, r3, #20
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6899      	ldr	r1, [r3, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024b6:	025a      	lsls	r2, r3, #9
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6899      	ldr	r1, [r3, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	029a      	lsls	r2, r3, #10
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	609a      	str	r2, [r3, #8]
}
 80024e4:	bf00      	nop
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	40012300 	.word	0x40012300
 80024f4:	0f000001 	.word	0x0f000001

080024f8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002504:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800250e:	2b00      	cmp	r3, #0
 8002510:	d13c      	bne.n	800258c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d12b      	bne.n	8002584 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002530:	2b00      	cmp	r3, #0
 8002532:	d127      	bne.n	8002584 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800253e:	2b00      	cmp	r3, #0
 8002540:	d006      	beq.n	8002550 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800254c:	2b00      	cmp	r3, #0
 800254e:	d119      	bne.n	8002584 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0220 	bic.w	r2, r2, #32
 800255e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002564:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d105      	bne.n	8002584 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	f043 0201 	orr.w	r2, r3, #1
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f016 f90f 	bl	80187a8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800258a:	e00e      	b.n	80025aa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	f003 0310 	and.w	r3, r3, #16
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f016 f959 	bl	8018850 <HAL_ADC_ErrorCallback>
}
 800259e:	e004      	b.n	80025aa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	4798      	blx	r3
}
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b084      	sub	sp, #16
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025be:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f016 f91b 	bl	80187fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025da:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2240      	movs	r2, #64	; 0x40
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f043 0204 	orr.w	r2, r3, #4
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f016 f92e 	bl	8018850 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025f4:	bf00      	nop
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <__NVIC_SetPriorityGrouping+0x44>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002618:	4013      	ands	r3, r2
 800261a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800262c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800262e:	4a04      	ldr	r2, [pc, #16]	; (8002640 <__NVIC_SetPriorityGrouping+0x44>)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	60d3      	str	r3, [r2, #12]
}
 8002634:	bf00      	nop
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <__NVIC_GetPriorityGrouping+0x18>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	0a1b      	lsrs	r3, r3, #8
 800264e:	f003 0307 	and.w	r3, r3, #7
}
 8002652:	4618      	mov	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	2b00      	cmp	r3, #0
 8002670:	db0b      	blt.n	800268a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	f003 021f 	and.w	r2, r3, #31
 8002678:	4907      	ldr	r1, [pc, #28]	; (8002698 <__NVIC_EnableIRQ+0x38>)
 800267a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	2001      	movs	r0, #1
 8002682:	fa00 f202 	lsl.w	r2, r0, r2
 8002686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	e000e100 	.word	0xe000e100

0800269c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	6039      	str	r1, [r7, #0]
 80026a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	db0a      	blt.n	80026c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	490c      	ldr	r1, [pc, #48]	; (80026e8 <__NVIC_SetPriority+0x4c>)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	0112      	lsls	r2, r2, #4
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	440b      	add	r3, r1
 80026c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026c4:	e00a      	b.n	80026dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	4908      	ldr	r1, [pc, #32]	; (80026ec <__NVIC_SetPriority+0x50>)
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	3b04      	subs	r3, #4
 80026d4:	0112      	lsls	r2, r2, #4
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	440b      	add	r3, r1
 80026da:	761a      	strb	r2, [r3, #24]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000e100 	.word	0xe000e100
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b089      	sub	sp, #36	; 0x24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f1c3 0307 	rsb	r3, r3, #7
 800270a:	2b04      	cmp	r3, #4
 800270c:	bf28      	it	cs
 800270e:	2304      	movcs	r3, #4
 8002710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3304      	adds	r3, #4
 8002716:	2b06      	cmp	r3, #6
 8002718:	d902      	bls.n	8002720 <NVIC_EncodePriority+0x30>
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3b03      	subs	r3, #3
 800271e:	e000      	b.n	8002722 <NVIC_EncodePriority+0x32>
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43da      	mvns	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	401a      	ands	r2, r3
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002738:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	fa01 f303 	lsl.w	r3, r1, r3
 8002742:	43d9      	mvns	r1, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002748:	4313      	orrs	r3, r2
         );
}
 800274a:	4618      	mov	r0, r3
 800274c:	3724      	adds	r7, #36	; 0x24
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff ff4c 	bl	80025fc <__NVIC_SetPriorityGrouping>
}
 8002764:	bf00      	nop
 8002766:	3708      	adds	r7, #8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
 8002778:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800277e:	f7ff ff61 	bl	8002644 <__NVIC_GetPriorityGrouping>
 8002782:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	68b9      	ldr	r1, [r7, #8]
 8002788:	6978      	ldr	r0, [r7, #20]
 800278a:	f7ff ffb1 	bl	80026f0 <NVIC_EncodePriority>
 800278e:	4602      	mov	r2, r0
 8002790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002794:	4611      	mov	r1, r2
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff ff80 	bl	800269c <__NVIC_SetPriority>
}
 800279c:	bf00      	nop
 800279e:	3718      	adds	r7, #24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff ff54 	bl	8002660 <__NVIC_EnableIRQ>
}
 80027b8:	bf00      	nop
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027cc:	f7ff fb12 	bl	8001df4 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e099      	b.n	8002910 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0201 	bic.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027fc:	e00f      	b.n	800281e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027fe:	f7ff faf9 	bl	8001df4 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b05      	cmp	r3, #5
 800280a:	d908      	bls.n	800281e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2220      	movs	r2, #32
 8002810:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2203      	movs	r2, #3
 8002816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e078      	b.n	8002910 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1e8      	bne.n	80027fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	4b38      	ldr	r3, [pc, #224]	; (8002918 <HAL_DMA_Init+0x158>)
 8002838:	4013      	ands	r3, r2
 800283a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800284a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002856:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002862:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	4313      	orrs	r3, r2
 800286e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	2b04      	cmp	r3, #4
 8002876:	d107      	bne.n	8002888 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	4313      	orrs	r3, r2
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	4313      	orrs	r3, r2
 8002886:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f023 0307 	bic.w	r3, r3, #7
 800289e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d117      	bne.n	80028e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00e      	beq.n	80028e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 fa9f 	bl	8002e08 <DMA_CheckFifoParam>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2240      	movs	r2, #64	; 0x40
 80028d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028de:	2301      	movs	r3, #1
 80028e0:	e016      	b.n	8002910 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 fa56 	bl	8002d9c <DMA_CalcBaseAndBitshift>
 80028f0:	4603      	mov	r3, r0
 80028f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f8:	223f      	movs	r2, #63	; 0x3f
 80028fa:	409a      	lsls	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	f010803f 	.word	0xf010803f

0800291c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_DMA_Start_IT+0x26>
 800293e:	2302      	movs	r3, #2
 8002940:	e040      	b.n	80029c4 <HAL_DMA_Start_IT+0xa8>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b01      	cmp	r3, #1
 8002954:	d12f      	bne.n	80029b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2202      	movs	r2, #2
 800295a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f9e8 	bl	8002d40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002974:	223f      	movs	r2, #63	; 0x3f
 8002976:	409a      	lsls	r2, r3
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0216 	orr.w	r2, r2, #22
 800298a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	2b00      	cmp	r3, #0
 8002992:	d007      	beq.n	80029a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0208 	orr.w	r2, r2, #8
 80029a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0201 	orr.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	e005      	b.n	80029c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029be:	2302      	movs	r3, #2
 80029c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d004      	beq.n	80029ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2280      	movs	r2, #128	; 0x80
 80029e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e00c      	b.n	8002a04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2205      	movs	r2, #5
 80029ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0201 	bic.w	r2, r2, #1
 8002a00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a1c:	4b92      	ldr	r3, [pc, #584]	; (8002c68 <HAL_DMA_IRQHandler+0x258>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a92      	ldr	r2, [pc, #584]	; (8002c6c <HAL_DMA_IRQHandler+0x25c>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	0a9b      	lsrs	r3, r3, #10
 8002a28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3a:	2208      	movs	r2, #8
 8002a3c:	409a      	lsls	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d01a      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d013      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0204 	bic.w	r2, r2, #4
 8002a62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a68:	2208      	movs	r2, #8
 8002a6a:	409a      	lsls	r2, r3
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a74:	f043 0201 	orr.w	r2, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a80:	2201      	movs	r2, #1
 8002a82:	409a      	lsls	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d012      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00b      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	409a      	lsls	r2, r3
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aaa:	f043 0202 	orr.w	r2, r3, #2
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab6:	2204      	movs	r2, #4
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d012      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00b      	beq.n	8002ae8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad4:	2204      	movs	r2, #4
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae0:	f043 0204 	orr.w	r2, r3, #4
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aec:	2210      	movs	r2, #16
 8002aee:	409a      	lsls	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d043      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d03c      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0a:	2210      	movs	r2, #16
 8002b0c:	409a      	lsls	r2, r3
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d018      	beq.n	8002b52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d108      	bne.n	8002b40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d024      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	4798      	blx	r3
 8002b3e:	e01f      	b.n	8002b80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d01b      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	4798      	blx	r3
 8002b50:	e016      	b.n	8002b80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d107      	bne.n	8002b70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0208 	bic.w	r2, r2, #8
 8002b6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b84:	2220      	movs	r2, #32
 8002b86:	409a      	lsls	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 808e 	beq.w	8002cae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 8086 	beq.w	8002cae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	409a      	lsls	r2, r3
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b05      	cmp	r3, #5
 8002bb8:	d136      	bne.n	8002c28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0216 	bic.w	r2, r2, #22
 8002bc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695a      	ldr	r2, [r3, #20]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d103      	bne.n	8002bea <HAL_DMA_IRQHandler+0x1da>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d007      	beq.n	8002bfa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0208 	bic.w	r2, r2, #8
 8002bf8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfe:	223f      	movs	r2, #63	; 0x3f
 8002c00:	409a      	lsls	r2, r3
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d07d      	beq.n	8002d1a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	4798      	blx	r3
        }
        return;
 8002c26:	e078      	b.n	8002d1a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d01c      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d108      	bne.n	8002c56 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d030      	beq.n	8002cae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	4798      	blx	r3
 8002c54:	e02b      	b.n	8002cae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d027      	beq.n	8002cae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	4798      	blx	r3
 8002c66:	e022      	b.n	8002cae <HAL_DMA_IRQHandler+0x29e>
 8002c68:	20000000 	.word	0x20000000
 8002c6c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10f      	bne.n	8002c9e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0210 	bic.w	r2, r2, #16
 8002c8c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d032      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d022      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2205      	movs	r2, #5
 8002cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0201 	bic.w	r2, r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d307      	bcc.n	8002cf6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1f2      	bne.n	8002cda <HAL_DMA_IRQHandler+0x2ca>
 8002cf4:	e000      	b.n	8002cf8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002cf6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	4798      	blx	r3
 8002d18:	e000      	b.n	8002d1c <HAL_DMA_IRQHandler+0x30c>
        return;
 8002d1a:	bf00      	nop
    }
  }
}
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop

08002d24 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d32:	b2db      	uxtb	r3, r3
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	2b40      	cmp	r3, #64	; 0x40
 8002d6c:	d108      	bne.n	8002d80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d7e:	e007      	b.n	8002d90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68ba      	ldr	r2, [r7, #8]
 8002d86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	60da      	str	r2, [r3, #12]
}
 8002d90:	bf00      	nop
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	3b10      	subs	r3, #16
 8002dac:	4a14      	ldr	r2, [pc, #80]	; (8002e00 <DMA_CalcBaseAndBitshift+0x64>)
 8002dae:	fba2 2303 	umull	r2, r3, r2, r3
 8002db2:	091b      	lsrs	r3, r3, #4
 8002db4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002db6:	4a13      	ldr	r2, [pc, #76]	; (8002e04 <DMA_CalcBaseAndBitshift+0x68>)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4413      	add	r3, r2
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d909      	bls.n	8002dde <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dd2:	f023 0303 	bic.w	r3, r3, #3
 8002dd6:	1d1a      	adds	r2, r3, #4
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	659a      	str	r2, [r3, #88]	; 0x58
 8002ddc:	e007      	b.n	8002dee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002de6:	f023 0303 	bic.w	r3, r3, #3
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	aaaaaaab 	.word	0xaaaaaaab
 8002e04:	08019f44 	.word	0x08019f44

08002e08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d11f      	bne.n	8002e62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d855      	bhi.n	8002ed4 <DMA_CheckFifoParam+0xcc>
 8002e28:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <DMA_CheckFifoParam+0x28>)
 8002e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2e:	bf00      	nop
 8002e30:	08002e41 	.word	0x08002e41
 8002e34:	08002e53 	.word	0x08002e53
 8002e38:	08002e41 	.word	0x08002e41
 8002e3c:	08002ed5 	.word	0x08002ed5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d045      	beq.n	8002ed8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e50:	e042      	b.n	8002ed8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e5a:	d13f      	bne.n	8002edc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e60:	e03c      	b.n	8002edc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e6a:	d121      	bne.n	8002eb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2b03      	cmp	r3, #3
 8002e70:	d836      	bhi.n	8002ee0 <DMA_CheckFifoParam+0xd8>
 8002e72:	a201      	add	r2, pc, #4	; (adr r2, 8002e78 <DMA_CheckFifoParam+0x70>)
 8002e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e78:	08002e89 	.word	0x08002e89
 8002e7c:	08002e8f 	.word	0x08002e8f
 8002e80:	08002e89 	.word	0x08002e89
 8002e84:	08002ea1 	.word	0x08002ea1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e8c:	e02f      	b.n	8002eee <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d024      	beq.n	8002ee4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e9e:	e021      	b.n	8002ee4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ea8:	d11e      	bne.n	8002ee8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002eae:	e01b      	b.n	8002ee8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d902      	bls.n	8002ebc <DMA_CheckFifoParam+0xb4>
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d003      	beq.n	8002ec2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002eba:	e018      	b.n	8002eee <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8002ec0:	e015      	b.n	8002eee <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00e      	beq.n	8002eec <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed2:	e00b      	b.n	8002eec <DMA_CheckFifoParam+0xe4>
      break;
 8002ed4:	bf00      	nop
 8002ed6:	e00a      	b.n	8002eee <DMA_CheckFifoParam+0xe6>
      break;
 8002ed8:	bf00      	nop
 8002eda:	e008      	b.n	8002eee <DMA_CheckFifoParam+0xe6>
      break;
 8002edc:	bf00      	nop
 8002ede:	e006      	b.n	8002eee <DMA_CheckFifoParam+0xe6>
      break;
 8002ee0:	bf00      	nop
 8002ee2:	e004      	b.n	8002eee <DMA_CheckFifoParam+0xe6>
      break;
 8002ee4:	bf00      	nop
 8002ee6:	e002      	b.n	8002eee <DMA_CheckFifoParam+0xe6>
      break;   
 8002ee8:	bf00      	nop
 8002eea:	e000      	b.n	8002eee <DMA_CheckFifoParam+0xe6>
      break;
 8002eec:	bf00      	nop
    }
  } 
  
  return status; 
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b089      	sub	sp, #36	; 0x24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
 8002f16:	e16b      	b.n	80031f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f18:	2201      	movs	r2, #1
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	f040 815a 	bne.w	80031ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d00b      	beq.n	8002f56 <HAL_GPIO_Init+0x5a>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d007      	beq.n	8002f56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f4a:	2b11      	cmp	r3, #17
 8002f4c:	d003      	beq.n	8002f56 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b12      	cmp	r3, #18
 8002f54:	d130      	bne.n	8002fb8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	2203      	movs	r2, #3
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	091b      	lsrs	r3, r3, #4
 8002fa2:	f003 0201 	and.w	r2, r3, #1
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d003      	beq.n	8002ff8 <HAL_GPIO_Init+0xfc>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b12      	cmp	r3, #18
 8002ff6:	d123      	bne.n	8003040 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	08da      	lsrs	r2, r3, #3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	3208      	adds	r2, #8
 8003000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003004:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	220f      	movs	r2, #15
 8003010:	fa02 f303 	lsl.w	r3, r2, r3
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	08da      	lsrs	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3208      	adds	r2, #8
 800303a:	69b9      	ldr	r1, [r7, #24]
 800303c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	2203      	movs	r2, #3
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0203 	and.w	r2, r3, #3
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	f000 80b4 	beq.w	80031ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	4b5f      	ldr	r3, [pc, #380]	; (8003204 <HAL_GPIO_Init+0x308>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	4a5e      	ldr	r2, [pc, #376]	; (8003204 <HAL_GPIO_Init+0x308>)
 800308c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003090:	6453      	str	r3, [r2, #68]	; 0x44
 8003092:	4b5c      	ldr	r3, [pc, #368]	; (8003204 <HAL_GPIO_Init+0x308>)
 8003094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800309e:	4a5a      	ldr	r2, [pc, #360]	; (8003208 <HAL_GPIO_Init+0x30c>)
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	089b      	lsrs	r3, r3, #2
 80030a4:	3302      	adds	r3, #2
 80030a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	220f      	movs	r2, #15
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4013      	ands	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a51      	ldr	r2, [pc, #324]	; (800320c <HAL_GPIO_Init+0x310>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d02b      	beq.n	8003122 <HAL_GPIO_Init+0x226>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a50      	ldr	r2, [pc, #320]	; (8003210 <HAL_GPIO_Init+0x314>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d025      	beq.n	800311e <HAL_GPIO_Init+0x222>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a4f      	ldr	r2, [pc, #316]	; (8003214 <HAL_GPIO_Init+0x318>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d01f      	beq.n	800311a <HAL_GPIO_Init+0x21e>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a4e      	ldr	r2, [pc, #312]	; (8003218 <HAL_GPIO_Init+0x31c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d019      	beq.n	8003116 <HAL_GPIO_Init+0x21a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a4d      	ldr	r2, [pc, #308]	; (800321c <HAL_GPIO_Init+0x320>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <HAL_GPIO_Init+0x216>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a4c      	ldr	r2, [pc, #304]	; (8003220 <HAL_GPIO_Init+0x324>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d00d      	beq.n	800310e <HAL_GPIO_Init+0x212>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a4b      	ldr	r2, [pc, #300]	; (8003224 <HAL_GPIO_Init+0x328>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d007      	beq.n	800310a <HAL_GPIO_Init+0x20e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a4a      	ldr	r2, [pc, #296]	; (8003228 <HAL_GPIO_Init+0x32c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d101      	bne.n	8003106 <HAL_GPIO_Init+0x20a>
 8003102:	2307      	movs	r3, #7
 8003104:	e00e      	b.n	8003124 <HAL_GPIO_Init+0x228>
 8003106:	2308      	movs	r3, #8
 8003108:	e00c      	b.n	8003124 <HAL_GPIO_Init+0x228>
 800310a:	2306      	movs	r3, #6
 800310c:	e00a      	b.n	8003124 <HAL_GPIO_Init+0x228>
 800310e:	2305      	movs	r3, #5
 8003110:	e008      	b.n	8003124 <HAL_GPIO_Init+0x228>
 8003112:	2304      	movs	r3, #4
 8003114:	e006      	b.n	8003124 <HAL_GPIO_Init+0x228>
 8003116:	2303      	movs	r3, #3
 8003118:	e004      	b.n	8003124 <HAL_GPIO_Init+0x228>
 800311a:	2302      	movs	r3, #2
 800311c:	e002      	b.n	8003124 <HAL_GPIO_Init+0x228>
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <HAL_GPIO_Init+0x228>
 8003122:	2300      	movs	r3, #0
 8003124:	69fa      	ldr	r2, [r7, #28]
 8003126:	f002 0203 	and.w	r2, r2, #3
 800312a:	0092      	lsls	r2, r2, #2
 800312c:	4093      	lsls	r3, r2
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003134:	4934      	ldr	r1, [pc, #208]	; (8003208 <HAL_GPIO_Init+0x30c>)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	089b      	lsrs	r3, r3, #2
 800313a:	3302      	adds	r3, #2
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003142:	4b3a      	ldr	r3, [pc, #232]	; (800322c <HAL_GPIO_Init+0x330>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	43db      	mvns	r3, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4013      	ands	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003166:	4a31      	ldr	r2, [pc, #196]	; (800322c <HAL_GPIO_Init+0x330>)
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800316c:	4b2f      	ldr	r3, [pc, #188]	; (800322c <HAL_GPIO_Init+0x330>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003190:	4a26      	ldr	r2, [pc, #152]	; (800322c <HAL_GPIO_Init+0x330>)
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003196:	4b25      	ldr	r3, [pc, #148]	; (800322c <HAL_GPIO_Init+0x330>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ba:	4a1c      	ldr	r2, [pc, #112]	; (800322c <HAL_GPIO_Init+0x330>)
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031c0:	4b1a      	ldr	r3, [pc, #104]	; (800322c <HAL_GPIO_Init+0x330>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031e4:	4a11      	ldr	r2, [pc, #68]	; (800322c <HAL_GPIO_Init+0x330>)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	3301      	adds	r3, #1
 80031ee:	61fb      	str	r3, [r7, #28]
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	2b0f      	cmp	r3, #15
 80031f4:	f67f ae90 	bls.w	8002f18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031f8:	bf00      	nop
 80031fa:	3724      	adds	r7, #36	; 0x24
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	40023800 	.word	0x40023800
 8003208:	40013800 	.word	0x40013800
 800320c:	40020000 	.word	0x40020000
 8003210:	40020400 	.word	0x40020400
 8003214:	40020800 	.word	0x40020800
 8003218:	40020c00 	.word	0x40020c00
 800321c:	40021000 	.word	0x40021000
 8003220:	40021400 	.word	0x40021400
 8003224:	40021800 	.word	0x40021800
 8003228:	40021c00 	.word	0x40021c00
 800322c:	40013c00 	.word	0x40013c00

08003230 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	807b      	strh	r3, [r7, #2]
 800323c:	4613      	mov	r3, r2
 800323e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003240:	787b      	ldrb	r3, [r7, #1]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003246:	887a      	ldrh	r2, [r7, #2]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800324c:	e003      	b.n	8003256 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800324e:	887b      	ldrh	r3, [r7, #2]
 8003250:	041a      	lsls	r2, r3, #16
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	619a      	str	r2, [r3, #24]
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e11f      	b.n	80034b6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d106      	bne.n	8003290 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7fe f97c 	bl	8001588 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2224      	movs	r2, #36	; 0x24
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0201 	bic.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032c8:	f004 fbce 	bl	8007a68 <HAL_RCC_GetPCLK1Freq>
 80032cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	4a7b      	ldr	r2, [pc, #492]	; (80034c0 <HAL_I2C_Init+0x25c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d807      	bhi.n	80032e8 <HAL_I2C_Init+0x84>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4a7a      	ldr	r2, [pc, #488]	; (80034c4 <HAL_I2C_Init+0x260>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	bf94      	ite	ls
 80032e0:	2301      	movls	r3, #1
 80032e2:	2300      	movhi	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	e006      	b.n	80032f6 <HAL_I2C_Init+0x92>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4a77      	ldr	r2, [pc, #476]	; (80034c8 <HAL_I2C_Init+0x264>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	bf94      	ite	ls
 80032f0:	2301      	movls	r3, #1
 80032f2:	2300      	movhi	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e0db      	b.n	80034b6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4a72      	ldr	r2, [pc, #456]	; (80034cc <HAL_I2C_Init+0x268>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	0c9b      	lsrs	r3, r3, #18
 8003308:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	430a      	orrs	r2, r1
 800331c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	4a64      	ldr	r2, [pc, #400]	; (80034c0 <HAL_I2C_Init+0x25c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d802      	bhi.n	8003338 <HAL_I2C_Init+0xd4>
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	3301      	adds	r3, #1
 8003336:	e009      	b.n	800334c <HAL_I2C_Init+0xe8>
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800333e:	fb02 f303 	mul.w	r3, r2, r3
 8003342:	4a63      	ldr	r2, [pc, #396]	; (80034d0 <HAL_I2C_Init+0x26c>)
 8003344:	fba2 2303 	umull	r2, r3, r2, r3
 8003348:	099b      	lsrs	r3, r3, #6
 800334a:	3301      	adds	r3, #1
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6812      	ldr	r2, [r2, #0]
 8003350:	430b      	orrs	r3, r1
 8003352:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800335e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4956      	ldr	r1, [pc, #344]	; (80034c0 <HAL_I2C_Init+0x25c>)
 8003368:	428b      	cmp	r3, r1
 800336a:	d80d      	bhi.n	8003388 <HAL_I2C_Init+0x124>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1e59      	subs	r1, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	fbb1 f3f3 	udiv	r3, r1, r3
 800337a:	3301      	adds	r3, #1
 800337c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003380:	2b04      	cmp	r3, #4
 8003382:	bf38      	it	cc
 8003384:	2304      	movcc	r3, #4
 8003386:	e04f      	b.n	8003428 <HAL_I2C_Init+0x1c4>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d111      	bne.n	80033b4 <HAL_I2C_Init+0x150>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	1e58      	subs	r0, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6859      	ldr	r1, [r3, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	440b      	add	r3, r1
 800339e:	fbb0 f3f3 	udiv	r3, r0, r3
 80033a2:	3301      	adds	r3, #1
 80033a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	bf0c      	ite	eq
 80033ac:	2301      	moveq	r3, #1
 80033ae:	2300      	movne	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	e012      	b.n	80033da <HAL_I2C_Init+0x176>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	1e58      	subs	r0, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6859      	ldr	r1, [r3, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	0099      	lsls	r1, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ca:	3301      	adds	r3, #1
 80033cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_I2C_Init+0x17e>
 80033de:	2301      	movs	r3, #1
 80033e0:	e022      	b.n	8003428 <HAL_I2C_Init+0x1c4>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10e      	bne.n	8003408 <HAL_I2C_Init+0x1a4>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1e58      	subs	r0, r3, #1
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6859      	ldr	r1, [r3, #4]
 80033f2:	460b      	mov	r3, r1
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	440b      	add	r3, r1
 80033f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80033fc:	3301      	adds	r3, #1
 80033fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003406:	e00f      	b.n	8003428 <HAL_I2C_Init+0x1c4>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	1e58      	subs	r0, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6859      	ldr	r1, [r3, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	0099      	lsls	r1, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	fbb0 f3f3 	udiv	r3, r0, r3
 800341e:	3301      	adds	r3, #1
 8003420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003424:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	6809      	ldr	r1, [r1, #0]
 800342c:	4313      	orrs	r3, r2
 800342e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69da      	ldr	r2, [r3, #28]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003456:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6911      	ldr	r1, [r2, #16]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	68d2      	ldr	r2, [r2, #12]
 8003462:	4311      	orrs	r1, r2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	430b      	orrs	r3, r1
 800346a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	000186a0 	.word	0x000186a0
 80034c4:	001e847f 	.word	0x001e847f
 80034c8:	003d08ff 	.word	0x003d08ff
 80034cc:	431bde83 	.word	0x431bde83
 80034d0:	10624dd3 	.word	0x10624dd3

080034d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af02      	add	r7, sp, #8
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	4608      	mov	r0, r1
 80034de:	4611      	mov	r1, r2
 80034e0:	461a      	mov	r2, r3
 80034e2:	4603      	mov	r3, r0
 80034e4:	817b      	strh	r3, [r7, #10]
 80034e6:	460b      	mov	r3, r1
 80034e8:	813b      	strh	r3, [r7, #8]
 80034ea:	4613      	mov	r3, r2
 80034ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034ee:	f7fe fc81 	bl	8001df4 <HAL_GetTick>
 80034f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	f040 80d9 	bne.w	80036b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	2319      	movs	r3, #25
 8003508:	2201      	movs	r2, #1
 800350a:	496d      	ldr	r1, [pc, #436]	; (80036c0 <HAL_I2C_Mem_Write+0x1ec>)
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f002 fac3 	bl	8005a98 <I2C_WaitOnFlagUntilTimeout>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003518:	2302      	movs	r3, #2
 800351a:	e0cc      	b.n	80036b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003522:	2b01      	cmp	r3, #1
 8003524:	d101      	bne.n	800352a <HAL_I2C_Mem_Write+0x56>
 8003526:	2302      	movs	r3, #2
 8003528:	e0c5      	b.n	80036b6 <HAL_I2C_Mem_Write+0x1e2>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b01      	cmp	r3, #1
 800353e:	d007      	beq.n	8003550 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800355e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2221      	movs	r2, #33	; 0x21
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2240      	movs	r2, #64	; 0x40
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a3a      	ldr	r2, [r7, #32]
 800357a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003580:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4a4d      	ldr	r2, [pc, #308]	; (80036c4 <HAL_I2C_Mem_Write+0x1f0>)
 8003590:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003592:	88f8      	ldrh	r0, [r7, #6]
 8003594:	893a      	ldrh	r2, [r7, #8]
 8003596:	8979      	ldrh	r1, [r7, #10]
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	9301      	str	r3, [sp, #4]
 800359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	4603      	mov	r3, r0
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f002 f852 	bl	800564c <I2C_RequestMemoryWrite>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d052      	beq.n	8003654 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e081      	b.n	80036b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f002 fb44 	bl	8005c44 <I2C_WaitOnTXEFlagUntilTimeout>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00d      	beq.n	80035de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d107      	bne.n	80035da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e06b      	b.n	80036b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	781a      	ldrb	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003604:	b29b      	uxth	r3, r3
 8003606:	3b01      	subs	r3, #1
 8003608:	b29a      	uxth	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b04      	cmp	r3, #4
 800361a:	d11b      	bne.n	8003654 <HAL_I2C_Mem_Write+0x180>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003620:	2b00      	cmp	r3, #0
 8003622:	d017      	beq.n	8003654 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	781a      	ldrb	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364a:	b29b      	uxth	r3, r3
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1aa      	bne.n	80035b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f002 fb30 	bl	8005cc6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00d      	beq.n	8003688 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003670:	2b04      	cmp	r3, #4
 8003672:	d107      	bne.n	8003684 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003682:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e016      	b.n	80036b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003696:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	e000      	b.n	80036b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80036b4:	2302      	movs	r3, #2
  }
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	00100002 	.word	0x00100002
 80036c4:	ffff0000 	.word	0xffff0000

080036c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08c      	sub	sp, #48	; 0x30
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	4608      	mov	r0, r1
 80036d2:	4611      	mov	r1, r2
 80036d4:	461a      	mov	r2, r3
 80036d6:	4603      	mov	r3, r0
 80036d8:	817b      	strh	r3, [r7, #10]
 80036da:	460b      	mov	r3, r1
 80036dc:	813b      	strh	r3, [r7, #8]
 80036de:	4613      	mov	r3, r2
 80036e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036e2:	f7fe fb87 	bl	8001df4 <HAL_GetTick>
 80036e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b20      	cmp	r3, #32
 80036f2:	f040 8208 	bne.w	8003b06 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	2319      	movs	r3, #25
 80036fc:	2201      	movs	r2, #1
 80036fe:	497b      	ldr	r1, [pc, #492]	; (80038ec <HAL_I2C_Mem_Read+0x224>)
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f002 f9c9 	bl	8005a98 <I2C_WaitOnFlagUntilTimeout>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800370c:	2302      	movs	r3, #2
 800370e:	e1fb      	b.n	8003b08 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003716:	2b01      	cmp	r3, #1
 8003718:	d101      	bne.n	800371e <HAL_I2C_Mem_Read+0x56>
 800371a:	2302      	movs	r3, #2
 800371c:	e1f4      	b.n	8003b08 <HAL_I2C_Mem_Read+0x440>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b01      	cmp	r3, #1
 8003732:	d007      	beq.n	8003744 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 0201 	orr.w	r2, r2, #1
 8003742:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003752:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2222      	movs	r2, #34	; 0x22
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2240      	movs	r2, #64	; 0x40
 8003760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800376e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003774:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4a5b      	ldr	r2, [pc, #364]	; (80038f0 <HAL_I2C_Mem_Read+0x228>)
 8003784:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003786:	88f8      	ldrh	r0, [r7, #6]
 8003788:	893a      	ldrh	r2, [r7, #8]
 800378a:	8979      	ldrh	r1, [r7, #10]
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	9301      	str	r3, [sp, #4]
 8003790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	4603      	mov	r3, r0
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f001 ffee 	bl	8005778 <I2C_RequestMemoryRead>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e1b0      	b.n	8003b08 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d113      	bne.n	80037d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ae:	2300      	movs	r3, #0
 80037b0:	623b      	str	r3, [r7, #32]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	623b      	str	r3, [r7, #32]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	623b      	str	r3, [r7, #32]
 80037c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	e184      	b.n	8003ae0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d11b      	bne.n	8003816 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ee:	2300      	movs	r3, #0
 80037f0:	61fb      	str	r3, [r7, #28]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	61fb      	str	r3, [r7, #28]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	61fb      	str	r3, [r7, #28]
 8003802:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	e164      	b.n	8003ae0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381a:	2b02      	cmp	r3, #2
 800381c:	d11b      	bne.n	8003856 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800382c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800383c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800383e:	2300      	movs	r3, #0
 8003840:	61bb      	str	r3, [r7, #24]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	61bb      	str	r3, [r7, #24]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	61bb      	str	r3, [r7, #24]
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	e144      	b.n	8003ae0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800386c:	e138      	b.n	8003ae0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003872:	2b03      	cmp	r3, #3
 8003874:	f200 80f1 	bhi.w	8003a5a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387c:	2b01      	cmp	r3, #1
 800387e:	d123      	bne.n	80038c8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003882:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f002 fa91 	bl	8005dac <I2C_WaitOnRXNEFlagUntilTimeout>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e139      	b.n	8003b08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038c6:	e10b      	b.n	8003ae0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d14e      	bne.n	800396e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d6:	2200      	movs	r2, #0
 80038d8:	4906      	ldr	r1, [pc, #24]	; (80038f4 <HAL_I2C_Mem_Read+0x22c>)
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f002 f8dc 	bl	8005a98 <I2C_WaitOnFlagUntilTimeout>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d008      	beq.n	80038f8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e10e      	b.n	8003b08 <HAL_I2C_Mem_Read+0x440>
 80038ea:	bf00      	nop
 80038ec:	00100002 	.word	0x00100002
 80038f0:	ffff0000 	.word	0xffff0000
 80038f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003906:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691a      	ldr	r2, [r3, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003930:	b29b      	uxth	r3, r3
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	1c5a      	adds	r2, r3, #1
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003962:	b29b      	uxth	r3, r3
 8003964:	3b01      	subs	r3, #1
 8003966:	b29a      	uxth	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800396c:	e0b8      	b.n	8003ae0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003974:	2200      	movs	r2, #0
 8003976:	4966      	ldr	r1, [pc, #408]	; (8003b10 <HAL_I2C_Mem_Read+0x448>)
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f002 f88d 	bl	8005a98 <I2C_WaitOnFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e0bf      	b.n	8003b08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003996:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	691a      	ldr	r2, [r3, #16]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d0:	2200      	movs	r2, #0
 80039d2:	494f      	ldr	r1, [pc, #316]	; (8003b10 <HAL_I2C_Mem_Read+0x448>)
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f002 f85f 	bl	8005a98 <I2C_WaitOnFlagUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e091      	b.n	8003b08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	691a      	ldr	r2, [r3, #16]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a42:	3b01      	subs	r3, #1
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a58:	e042      	b.n	8003ae0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f002 f9a4 	bl	8005dac <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e04c      	b.n	8003b08 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	b2d2      	uxtb	r2, r2
 8003a7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f003 0304 	and.w	r3, r3, #4
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d118      	bne.n	8003ae0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	691a      	ldr	r2, [r3, #16]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f47f aec2 	bne.w	800386e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2220      	movs	r2, #32
 8003aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	e000      	b.n	8003b08 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b06:	2302      	movs	r3, #2
  }
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3728      	adds	r7, #40	; 0x28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	00010004 	.word	0x00010004

08003b14 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	4608      	mov	r0, r1
 8003b1e:	4611      	mov	r1, r2
 8003b20:	461a      	mov	r2, r3
 8003b22:	4603      	mov	r3, r0
 8003b24:	817b      	strh	r3, [r7, #10]
 8003b26:	460b      	mov	r3, r1
 8003b28:	813b      	strh	r3, [r7, #8]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b20      	cmp	r3, #32
 8003b3c:	f040 809a 	bne.w	8003c74 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b40:	4b50      	ldr	r3, [pc, #320]	; (8003c84 <HAL_I2C_Mem_Read_IT+0x170>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	08db      	lsrs	r3, r3, #3
 8003b46:	4a50      	ldr	r2, [pc, #320]	; (8003c88 <HAL_I2C_Mem_Read_IT+0x174>)
 8003b48:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4c:	0a1a      	lsrs	r2, r3, #8
 8003b4e:	4613      	mov	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	009a      	lsls	r2, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d116      	bne.n	8003b94 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	f043 0220 	orr.w	r2, r3, #32
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e070      	b.n	8003c76 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d0db      	beq.n	8003b5a <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_I2C_Mem_Read_IT+0x9c>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e062      	b.n	8003c76 <HAL_I2C_Mem_Read_IT+0x162>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d007      	beq.n	8003bd6 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0201 	orr.w	r2, r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003be4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2222      	movs	r2, #34	; 0x22
 8003bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2240      	movs	r2, #64	; 0x40
 8003bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a3a      	ldr	r2, [r7, #32]
 8003c00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4a1d      	ldr	r2, [pc, #116]	; (8003c8c <HAL_I2C_Mem_Read_IT+0x178>)
 8003c16:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003c18:	897a      	ldrh	r2, [r7, #10]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003c1e:	893a      	ldrh	r2, [r7, #8]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003c24:	88fa      	ldrh	r2, [r7, #6]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c3e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c4e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d007      	beq.n	8003c70 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003c6e:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	e000      	b.n	8003c76 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8003c74:	2302      	movs	r3, #2
  }
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	371c      	adds	r7, #28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	20000000 	.word	0x20000000
 8003c88:	14f8b589 	.word	0x14f8b589
 8003c8c:	ffff0000 	.word	0xffff0000

08003c90 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08a      	sub	sp, #40	; 0x28
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	607a      	str	r2, [r7, #4]
 8003c9a:	603b      	str	r3, [r7, #0]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003ca0:	f7fe f8a8 	bl	8001df4 <HAL_GetTick>
 8003ca4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b20      	cmp	r3, #32
 8003cb4:	f040 8111 	bne.w	8003eda <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	2319      	movs	r3, #25
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	4988      	ldr	r1, [pc, #544]	; (8003ee4 <HAL_I2C_IsDeviceReady+0x254>)
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f001 fee8 	bl	8005a98 <I2C_WaitOnFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e104      	b.n	8003edc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_I2C_IsDeviceReady+0x50>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e0fd      	b.n	8003edc <HAL_I2C_IsDeviceReady+0x24c>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d007      	beq.n	8003d06 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f042 0201 	orr.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2224      	movs	r2, #36	; 0x24
 8003d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4a70      	ldr	r2, [pc, #448]	; (8003ee8 <HAL_I2C_IsDeviceReady+0x258>)
 8003d28:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d38:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f001 fea6 	bl	8005a98 <I2C_WaitOnFlagUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00d      	beq.n	8003d6e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d60:	d103      	bne.n	8003d6a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d68:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e0b6      	b.n	8003edc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d6e:	897b      	ldrh	r3, [r7, #10]
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	461a      	mov	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d7c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003d7e:	f7fe f839 	bl	8001df4 <HAL_GetTick>
 8003d82:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	bf0c      	ite	eq
 8003d92:	2301      	moveq	r3, #1
 8003d94:	2300      	movne	r3, #0
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da8:	bf0c      	ite	eq
 8003daa:	2301      	moveq	r3, #1
 8003dac:	2300      	movne	r3, #0
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003db2:	e025      	b.n	8003e00 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003db4:	f7fe f81e 	bl	8001df4 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d302      	bcc.n	8003dca <HAL_I2C_IsDeviceReady+0x13a>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d103      	bne.n	8003dd2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	22a0      	movs	r2, #160	; 0xa0
 8003dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	bf0c      	ite	eq
 8003de0:	2301      	moveq	r3, #1
 8003de2:	2300      	movne	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df6:	bf0c      	ite	eq
 8003df8:	2301      	moveq	r3, #1
 8003dfa:	2300      	movne	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2ba0      	cmp	r3, #160	; 0xa0
 8003e0a:	d005      	beq.n	8003e18 <HAL_I2C_IsDeviceReady+0x188>
 8003e0c:	7dfb      	ldrb	r3, [r7, #23]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d102      	bne.n	8003e18 <HAL_I2C_IsDeviceReady+0x188>
 8003e12:	7dbb      	ldrb	r3, [r7, #22]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0cd      	beq.n	8003db4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d129      	bne.n	8003e82 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e3c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e3e:	2300      	movs	r3, #0
 8003e40:	613b      	str	r3, [r7, #16]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	613b      	str	r3, [r7, #16]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	613b      	str	r3, [r7, #16]
 8003e52:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	2319      	movs	r3, #25
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	4921      	ldr	r1, [pc, #132]	; (8003ee4 <HAL_I2C_IsDeviceReady+0x254>)
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f001 fe1a 	bl	8005a98 <I2C_WaitOnFlagUntilTimeout>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e036      	b.n	8003edc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e02c      	b.n	8003edc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e90:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e9a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	2319      	movs	r3, #25
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	490f      	ldr	r1, [pc, #60]	; (8003ee4 <HAL_I2C_IsDeviceReady+0x254>)
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f001 fdf6 	bl	8005a98 <I2C_WaitOnFlagUntilTimeout>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e012      	b.n	8003edc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	f4ff af32 	bcc.w	8003d2a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003eda:	2302      	movs	r3, #2
  }
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3720      	adds	r7, #32
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	00100002 	.word	0x00100002
 8003ee8:	ffff0000 	.word	0xffff0000

08003eec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b088      	sub	sp, #32
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f04:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f0c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f14:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	2b10      	cmp	r3, #16
 8003f1a:	d003      	beq.n	8003f24 <HAL_I2C_EV_IRQHandler+0x38>
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
 8003f1e:	2b40      	cmp	r3, #64	; 0x40
 8003f20:	f040 80bd 	bne.w	800409e <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10d      	bne.n	8003f5a <HAL_I2C_EV_IRQHandler+0x6e>
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003f44:	d003      	beq.n	8003f4e <HAL_I2C_EV_IRQHandler+0x62>
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003f4c:	d101      	bne.n	8003f52 <HAL_I2C_EV_IRQHandler+0x66>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <HAL_I2C_EV_IRQHandler+0x68>
 8003f52:	2300      	movs	r3, #0
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	f000 812e 	beq.w	80041b6 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00c      	beq.n	8003f7e <HAL_I2C_EV_IRQHandler+0x92>
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	0a5b      	lsrs	r3, r3, #9
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d006      	beq.n	8003f7e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f001 ffa0 	bl	8005eb6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fd52 	bl	8004a20 <I2C_Master_SB>
 8003f7c:	e08e      	b.n	800409c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	08db      	lsrs	r3, r3, #3
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d009      	beq.n	8003f9e <HAL_I2C_EV_IRQHandler+0xb2>
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	0a5b      	lsrs	r3, r3, #9
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 fdc8 	bl	8004b2c <I2C_Master_ADD10>
 8003f9c:	e07e      	b.n	800409c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	085b      	lsrs	r3, r3, #1
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d009      	beq.n	8003fbe <HAL_I2C_EV_IRQHandler+0xd2>
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	0a5b      	lsrs	r3, r3, #9
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fde2 	bl	8004b80 <I2C_Master_ADDR>
 8003fbc:	e06e      	b.n	800409c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	089b      	lsrs	r3, r3, #2
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d037      	beq.n	800403a <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fd8:	f000 80ef 	beq.w	80041ba <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	09db      	lsrs	r3, r3, #7
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00f      	beq.n	8004008 <HAL_I2C_EV_IRQHandler+0x11c>
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	0a9b      	lsrs	r3, r3, #10
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d009      	beq.n	8004008 <HAL_I2C_EV_IRQHandler+0x11c>
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	089b      	lsrs	r3, r3, #2
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d103      	bne.n	8004008 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 f9df 	bl	80043c4 <I2C_MasterTransmit_TXE>
 8004006:	e049      	b.n	800409c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	089b      	lsrs	r3, r3, #2
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 80d2 	beq.w	80041ba <HAL_I2C_EV_IRQHandler+0x2ce>
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	0a5b      	lsrs	r3, r3, #9
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 80cb 	beq.w	80041ba <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004024:	7bfb      	ldrb	r3, [r7, #15]
 8004026:	2b10      	cmp	r3, #16
 8004028:	d103      	bne.n	8004032 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fa66 	bl	80044fc <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004030:	e0c3      	b.n	80041ba <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 faca 	bl	80045cc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004038:	e0bf      	b.n	80041ba <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004044:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004048:	f000 80b7 	beq.w	80041ba <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	099b      	lsrs	r3, r3, #6
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00f      	beq.n	8004078 <HAL_I2C_EV_IRQHandler+0x18c>
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	0a9b      	lsrs	r3, r3, #10
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d009      	beq.n	8004078 <HAL_I2C_EV_IRQHandler+0x18c>
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	089b      	lsrs	r3, r3, #2
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d103      	bne.n	8004078 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 fb3a 	bl	80046ea <I2C_MasterReceive_RXNE>
 8004076:	e011      	b.n	800409c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	089b      	lsrs	r3, r3, #2
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 809a 	beq.w	80041ba <HAL_I2C_EV_IRQHandler+0x2ce>
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	0a5b      	lsrs	r3, r3, #9
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 8093 	beq.w	80041ba <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fbd9 	bl	800484c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800409a:	e08e      	b.n	80041ba <HAL_I2C_EV_IRQHandler+0x2ce>
 800409c:	e08d      	b.n	80041ba <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d004      	beq.n	80040b0 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	61fb      	str	r3, [r7, #28]
 80040ae:	e007      	b.n	80040c0 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	085b      	lsrs	r3, r3, #1
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d012      	beq.n	80040f2 <HAL_I2C_EV_IRQHandler+0x206>
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	0a5b      	lsrs	r3, r3, #9
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00c      	beq.n	80040f2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80040e8:	69b9      	ldr	r1, [r7, #24]
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 ff97 	bl	800501e <I2C_Slave_ADDR>
 80040f0:	e066      	b.n	80041c0 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	091b      	lsrs	r3, r3, #4
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d009      	beq.n	8004112 <HAL_I2C_EV_IRQHandler+0x226>
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	0a5b      	lsrs	r3, r3, #9
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 ffcc 	bl	80050a8 <I2C_Slave_STOPF>
 8004110:	e056      	b.n	80041c0 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004112:	7bbb      	ldrb	r3, [r7, #14]
 8004114:	2b21      	cmp	r3, #33	; 0x21
 8004116:	d002      	beq.n	800411e <HAL_I2C_EV_IRQHandler+0x232>
 8004118:	7bbb      	ldrb	r3, [r7, #14]
 800411a:	2b29      	cmp	r3, #41	; 0x29
 800411c:	d125      	bne.n	800416a <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	09db      	lsrs	r3, r3, #7
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00f      	beq.n	800414a <HAL_I2C_EV_IRQHandler+0x25e>
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	0a9b      	lsrs	r3, r3, #10
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d009      	beq.n	800414a <HAL_I2C_EV_IRQHandler+0x25e>
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	089b      	lsrs	r3, r3, #2
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d103      	bne.n	800414a <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 fead 	bl	8004ea2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004148:	e039      	b.n	80041be <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	089b      	lsrs	r3, r3, #2
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d033      	beq.n	80041be <HAL_I2C_EV_IRQHandler+0x2d2>
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	0a5b      	lsrs	r3, r3, #9
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b00      	cmp	r3, #0
 8004160:	d02d      	beq.n	80041be <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 feda 	bl	8004f1c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004168:	e029      	b.n	80041be <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	099b      	lsrs	r3, r3, #6
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00f      	beq.n	8004196 <HAL_I2C_EV_IRQHandler+0x2aa>
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	0a9b      	lsrs	r3, r3, #10
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d009      	beq.n	8004196 <HAL_I2C_EV_IRQHandler+0x2aa>
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	089b      	lsrs	r3, r3, #2
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d103      	bne.n	8004196 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 fee5 	bl	8004f5e <I2C_SlaveReceive_RXNE>
 8004194:	e014      	b.n	80041c0 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	089b      	lsrs	r3, r3, #2
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00e      	beq.n	80041c0 <HAL_I2C_EV_IRQHandler+0x2d4>
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	0a5b      	lsrs	r3, r3, #9
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d008      	beq.n	80041c0 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 ff13 	bl	8004fda <I2C_SlaveReceive_BTF>
 80041b4:	e004      	b.n	80041c0 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80041b6:	bf00      	nop
 80041b8:	e002      	b.n	80041c0 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041ba:	bf00      	nop
 80041bc:	e000      	b.n	80041c0 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041be:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80041c0:	3720      	adds	r7, #32
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b08a      	sub	sp, #40	; 0x28
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80041de:	2300      	movs	r3, #0
 80041e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041e8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	0a1b      	lsrs	r3, r3, #8
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00e      	beq.n	8004214 <HAL_I2C_ER_IRQHandler+0x4e>
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	0a1b      	lsrs	r3, r3, #8
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d008      	beq.n	8004214 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004212:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	0a5b      	lsrs	r3, r3, #9
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00e      	beq.n	800423e <HAL_I2C_ER_IRQHandler+0x78>
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	0a1b      	lsrs	r3, r3, #8
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422e:	f043 0302 	orr.w	r3, r3, #2
 8004232:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800423c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	0a9b      	lsrs	r3, r3, #10
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d03f      	beq.n	80042ca <HAL_I2C_ER_IRQHandler+0x104>
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	0a1b      	lsrs	r3, r3, #8
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d039      	beq.n	80042ca <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004256:	7efb      	ldrb	r3, [r7, #27]
 8004258:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425e:	b29b      	uxth	r3, r3
 8004260:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004268:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004270:	7ebb      	ldrb	r3, [r7, #26]
 8004272:	2b20      	cmp	r3, #32
 8004274:	d112      	bne.n	800429c <HAL_I2C_ER_IRQHandler+0xd6>
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10f      	bne.n	800429c <HAL_I2C_ER_IRQHandler+0xd6>
 800427c:	7cfb      	ldrb	r3, [r7, #19]
 800427e:	2b21      	cmp	r3, #33	; 0x21
 8004280:	d008      	beq.n	8004294 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004282:	7cfb      	ldrb	r3, [r7, #19]
 8004284:	2b29      	cmp	r3, #41	; 0x29
 8004286:	d005      	beq.n	8004294 <HAL_I2C_ER_IRQHandler+0xce>
 8004288:	7cfb      	ldrb	r3, [r7, #19]
 800428a:	2b28      	cmp	r3, #40	; 0x28
 800428c:	d106      	bne.n	800429c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b21      	cmp	r3, #33	; 0x21
 8004292:	d103      	bne.n	800429c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f001 f837 	bl	8005308 <I2C_Slave_AF>
 800429a:	e016      	b.n	80042ca <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042a4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	f043 0304 	orr.w	r3, r3, #4
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80042ae:	7efb      	ldrb	r3, [r7, #27]
 80042b0:	2b10      	cmp	r3, #16
 80042b2:	d002      	beq.n	80042ba <HAL_I2C_ER_IRQHandler+0xf4>
 80042b4:	7efb      	ldrb	r3, [r7, #27]
 80042b6:	2b40      	cmp	r3, #64	; 0x40
 80042b8:	d107      	bne.n	80042ca <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	0adb      	lsrs	r3, r3, #11
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00e      	beq.n	80042f4 <HAL_I2C_ER_IRQHandler+0x12e>
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	0a1b      	lsrs	r3, r3, #8
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d008      	beq.n	80042f4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	f043 0308 	orr.w	r3, r3, #8
 80042e8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80042f2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d008      	beq.n	800430c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	431a      	orrs	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f001 f86e 	bl	80053e8 <I2C_ITError>
  }
}
 800430c:	bf00      	nop
 800430e:	3728      	adds	r7, #40	; 0x28
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004330:	bf00      	nop
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	460b      	mov	r3, r1
 800436e:	70fb      	strb	r3, [r7, #3]
 8004370:	4613      	mov	r3, r2
 8004372:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b6:	b2db      	uxtb	r3, r3
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043da:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d150      	bne.n	800448c <I2C_MasterTransmit_TXE+0xc8>
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
 80043ec:	2b21      	cmp	r3, #33	; 0x21
 80043ee:	d14d      	bne.n	800448c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	d01d      	beq.n	8004432 <I2C_MasterTransmit_TXE+0x6e>
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2b20      	cmp	r3, #32
 80043fa:	d01a      	beq.n	8004432 <I2C_MasterTransmit_TXE+0x6e>
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004402:	d016      	beq.n	8004432 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004412:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2211      	movs	r2, #17
 8004418:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7ff ff72 	bl	8004314 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004430:	e060      	b.n	80044f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004440:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004450:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2220      	movs	r2, #32
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b40      	cmp	r3, #64	; 0x40
 800446a:	d107      	bne.n	800447c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f00d f92d 	bl	80116d4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800447a:	e03b      	b.n	80044f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7ff ff45 	bl	8004314 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800448a:	e033      	b.n	80044f4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800448c:	7bfb      	ldrb	r3, [r7, #15]
 800448e:	2b21      	cmp	r3, #33	; 0x21
 8004490:	d005      	beq.n	800449e <I2C_MasterTransmit_TXE+0xda>
 8004492:	7bbb      	ldrb	r3, [r7, #14]
 8004494:	2b40      	cmp	r3, #64	; 0x40
 8004496:	d12d      	bne.n	80044f4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	2b22      	cmp	r3, #34	; 0x22
 800449c:	d12a      	bne.n	80044f4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d108      	bne.n	80044ba <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80044b8:	e01c      	b.n	80044f4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b40      	cmp	r3, #64	; 0x40
 80044c4:	d103      	bne.n	80044ce <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f880 	bl	80045cc <I2C_MemoryTransmit_TXE_BTF>
}
 80044cc:	e012      	b.n	80044f4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	781a      	ldrb	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	3b01      	subs	r3, #1
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80044f2:	e7ff      	b.n	80044f4 <I2C_MasterTransmit_TXE+0x130>
 80044f4:	bf00      	nop
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004508:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b21      	cmp	r3, #33	; 0x21
 8004514:	d156      	bne.n	80045c4 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d012      	beq.n	8004546 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	781a      	ldrb	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	1c5a      	adds	r2, r3, #1
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453a:	b29b      	uxth	r3, r3
 800453c:	3b01      	subs	r3, #1
 800453e:	b29a      	uxth	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004544:	e03e      	b.n	80045c4 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2b08      	cmp	r3, #8
 800454a:	d01d      	beq.n	8004588 <I2C_MasterTransmit_BTF+0x8c>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2b20      	cmp	r3, #32
 8004550:	d01a      	beq.n	8004588 <I2C_MasterTransmit_BTF+0x8c>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004558:	d016      	beq.n	8004588 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004568:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2211      	movs	r2, #17
 800456e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff fec7 	bl	8004314 <HAL_I2C_MasterTxCpltCallback>
}
 8004586:	e01d      	b.n	80045c4 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004596:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045a6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7ff fea8 	bl	8004314 <HAL_I2C_MasterTxCpltCallback>
}
 80045c4:	bf00      	nop
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d11d      	bne.n	8004620 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d10b      	bne.n	8004604 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045fc:	1c9a      	adds	r2, r3, #2
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004602:	e06e      	b.n	80046e2 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004608:	b29b      	uxth	r3, r3
 800460a:	121b      	asrs	r3, r3, #8
 800460c:	b2da      	uxtb	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004618:	1c5a      	adds	r2, r3, #1
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800461e:	e060      	b.n	80046e2 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004624:	2b01      	cmp	r3, #1
 8004626:	d10b      	bne.n	8004640 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800462c:	b2da      	uxtb	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800463e:	e050      	b.n	80046e2 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004644:	2b02      	cmp	r3, #2
 8004646:	d14c      	bne.n	80046e2 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004648:	7bfb      	ldrb	r3, [r7, #15]
 800464a:	2b22      	cmp	r3, #34	; 0x22
 800464c:	d108      	bne.n	8004660 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800465c:	601a      	str	r2, [r3, #0]
}
 800465e:	e040      	b.n	80046e2 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d015      	beq.n	8004696 <I2C_MemoryTransmit_TXE_BTF+0xca>
 800466a:	7bfb      	ldrb	r3, [r7, #15]
 800466c:	2b21      	cmp	r3, #33	; 0x21
 800466e:	d112      	bne.n	8004696 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004674:	781a      	ldrb	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004694:	e025      	b.n	80046e2 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469a:	b29b      	uxth	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	d120      	bne.n	80046e2 <I2C_MemoryTransmit_TXE_BTF+0x116>
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
 80046a2:	2b21      	cmp	r3, #33	; 0x21
 80046a4:	d11d      	bne.n	80046e2 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046b4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f00c fff9 	bl	80116d4 <HAL_I2C_MemTxCpltCallback>
}
 80046e2:	bf00      	nop
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b084      	sub	sp, #16
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b22      	cmp	r3, #34	; 0x22
 80046fc:	f040 80a2 	bne.w	8004844 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004704:	b29b      	uxth	r3, r3
 8004706:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b03      	cmp	r3, #3
 800470c:	d921      	bls.n	8004752 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472a:	b29b      	uxth	r3, r3
 800472c:	3b01      	subs	r3, #1
 800472e:	b29a      	uxth	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004738:	b29b      	uxth	r3, r3
 800473a:	2b03      	cmp	r3, #3
 800473c:	f040 8082 	bne.w	8004844 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800474e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004750:	e078      	b.n	8004844 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004756:	2b02      	cmp	r3, #2
 8004758:	d074      	beq.n	8004844 <I2C_MasterReceive_RXNE+0x15a>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d002      	beq.n	8004766 <I2C_MasterReceive_RXNE+0x7c>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d16e      	bne.n	8004844 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f001 faee 	bl	8005d48 <I2C_WaitOnSTOPRequestThroughIT>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d142      	bne.n	80047f8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004780:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004790:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	b2d2      	uxtb	r2, r2
 800479e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	3b01      	subs	r3, #1
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b40      	cmp	r3, #64	; 0x40
 80047ca:	d10a      	bne.n	80047e2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f00c ffc2 	bl	8011764 <HAL_I2C_MemRxCpltCallback>
}
 80047e0:	e030      	b.n	8004844 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2212      	movs	r2, #18
 80047ee:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7ff fd99 	bl	8004328 <HAL_I2C_MasterRxCpltCallback>
}
 80047f6:	e025      	b.n	8004844 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004806:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691a      	ldr	r2, [r3, #16]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f00c ffd8 	bl	80117f4 <HAL_I2C_ErrorCallback>
}
 8004844:	bf00      	nop
 8004846:	3710      	adds	r7, #16
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004858:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485e:	b29b      	uxth	r3, r3
 8004860:	2b04      	cmp	r3, #4
 8004862:	d11b      	bne.n	800489c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004872:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691a      	ldr	r2, [r3, #16]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004890:	b29b      	uxth	r3, r3
 8004892:	3b01      	subs	r3, #1
 8004894:	b29a      	uxth	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800489a:	e0bd      	b.n	8004a18 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d129      	bne.n	80048fa <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048b4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	d00a      	beq.n	80048d2 <I2C_MasterReceive_BTF+0x86>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d007      	beq.n	80048d2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048d0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	b2d2      	uxtb	r2, r2
 80048de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	3b01      	subs	r3, #1
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80048f8:	e08e      	b.n	8004a18 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fe:	b29b      	uxth	r3, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d176      	bne.n	80049f2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d002      	beq.n	8004910 <I2C_MasterReceive_BTF+0xc4>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b10      	cmp	r3, #16
 800490e:	d108      	bne.n	8004922 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	e019      	b.n	8004956 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2b04      	cmp	r3, #4
 8004926:	d002      	beq.n	800492e <I2C_MasterReceive_BTF+0xe2>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2b02      	cmp	r3, #2
 800492c:	d108      	bne.n	8004940 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	e00a      	b.n	8004956 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b10      	cmp	r3, #16
 8004944:	d007      	beq.n	8004956 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004954:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004972:	b29b      	uxth	r3, r3
 8004974:	3b01      	subs	r3, #1
 8004976:	b29a      	uxth	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	691a      	ldr	r2, [r3, #16]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004998:	b29b      	uxth	r3, r3
 800499a:	3b01      	subs	r3, #1
 800499c:	b29a      	uxth	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80049b0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b40      	cmp	r3, #64	; 0x40
 80049c4:	d10a      	bne.n	80049dc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f00c fec5 	bl	8011764 <HAL_I2C_MemRxCpltCallback>
}
 80049da:	e01d      	b.n	8004a18 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2212      	movs	r2, #18
 80049e8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff fc9c 	bl	8004328 <HAL_I2C_MasterRxCpltCallback>
}
 80049f0:	e012      	b.n	8004a18 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	691a      	ldr	r2, [r3, #16]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	b2d2      	uxtb	r2, r2
 80049fe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a18:	bf00      	nop
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b40      	cmp	r3, #64	; 0x40
 8004a32:	d117      	bne.n	8004a64 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d109      	bne.n	8004a50 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	461a      	mov	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a4c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004a4e:	e067      	b.n	8004b20 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	f043 0301 	orr.w	r3, r3, #1
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	611a      	str	r2, [r3, #16]
}
 8004a62:	e05d      	b.n	8004b20 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a6c:	d133      	bne.n	8004ad6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b21      	cmp	r3, #33	; 0x21
 8004a78:	d109      	bne.n	8004a8e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	461a      	mov	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a8a:	611a      	str	r2, [r3, #16]
 8004a8c:	e008      	b.n	8004aa0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	f043 0301 	orr.w	r3, r3, #1
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d004      	beq.n	8004ab2 <I2C_Master_SB+0x92>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d108      	bne.n	8004ac4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d032      	beq.n	8004b20 <I2C_Master_SB+0x100>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d02d      	beq.n	8004b20 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ad2:	605a      	str	r2, [r3, #4]
}
 8004ad4:	e024      	b.n	8004b20 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10e      	bne.n	8004afc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	11db      	asrs	r3, r3, #7
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	f003 0306 	and.w	r3, r3, #6
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	f063 030f 	orn	r3, r3, #15
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	611a      	str	r2, [r3, #16]
}
 8004afa:	e011      	b.n	8004b20 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d10d      	bne.n	8004b20 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	11db      	asrs	r3, r3, #7
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	f003 0306 	and.w	r3, r3, #6
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	f063 030e 	orn	r3, r3, #14
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	611a      	str	r2, [r3, #16]
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d103      	bne.n	8004b50 <I2C_Master_ADD10+0x24>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d011      	beq.n	8004b74 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d104      	bne.n	8004b64 <I2C_Master_ADD10+0x38>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d007      	beq.n	8004b74 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b72:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b091      	sub	sp, #68	; 0x44
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b22      	cmp	r3, #34	; 0x22
 8004ba8:	f040 8169 	bne.w	8004e7e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10f      	bne.n	8004bd4 <I2C_Master_ADDR+0x54>
 8004bb4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004bb8:	2b40      	cmp	r3, #64	; 0x40
 8004bba:	d10b      	bne.n	8004bd4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	633b      	str	r3, [r7, #48]	; 0x30
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	633b      	str	r3, [r7, #48]	; 0x30
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	633b      	str	r3, [r7, #48]	; 0x30
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd2:	e160      	b.n	8004e96 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d11d      	bne.n	8004c18 <I2C_Master_ADDR+0x98>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004be4:	d118      	bne.n	8004c18 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004be6:	2300      	movs	r3, #0
 8004be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c0a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c10:	1c5a      	adds	r2, r3, #1
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	651a      	str	r2, [r3, #80]	; 0x50
 8004c16:	e13e      	b.n	8004e96 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d113      	bne.n	8004c4a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c22:	2300      	movs	r3, #0
 8004c24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c36:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	e115      	b.n	8004e76 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	f040 808a 	bne.w	8004d6a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c5c:	d137      	bne.n	8004cce <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c6c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c7c:	d113      	bne.n	8004ca6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c8c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c8e:	2300      	movs	r3, #0
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	e0e7      	b.n	8004e76 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	623b      	str	r3, [r7, #32]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	623b      	str	r3, [r7, #32]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	623b      	str	r3, [r7, #32]
 8004cba:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	e0d3      	b.n	8004e76 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d02e      	beq.n	8004d32 <I2C_Master_ADDR+0x1b2>
 8004cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd6:	2b20      	cmp	r3, #32
 8004cd8:	d02b      	beq.n	8004d32 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cdc:	2b12      	cmp	r3, #18
 8004cde:	d102      	bne.n	8004ce6 <I2C_Master_ADDR+0x166>
 8004ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d125      	bne.n	8004d32 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce8:	2b04      	cmp	r3, #4
 8004cea:	d00e      	beq.n	8004d0a <I2C_Master_ADDR+0x18a>
 8004cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d00b      	beq.n	8004d0a <I2C_Master_ADDR+0x18a>
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf4:	2b10      	cmp	r3, #16
 8004cf6:	d008      	beq.n	8004d0a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	e007      	b.n	8004d1a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d18:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	61fb      	str	r3, [r7, #28]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	61fb      	str	r3, [r7, #28]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	61fb      	str	r3, [r7, #28]
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	e0a1      	b.n	8004e76 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d40:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d42:	2300      	movs	r3, #0
 8004d44:	61bb      	str	r3, [r7, #24]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	61bb      	str	r3, [r7, #24]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	61bb      	str	r3, [r7, #24]
 8004d56:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	e085      	b.n	8004e76 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d14d      	bne.n	8004e10 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d016      	beq.n	8004da8 <I2C_Master_ADDR+0x228>
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d013      	beq.n	8004da8 <I2C_Master_ADDR+0x228>
 8004d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d82:	2b10      	cmp	r3, #16
 8004d84:	d010      	beq.n	8004da8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d94:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	e007      	b.n	8004db8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004db6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dc6:	d117      	bne.n	8004df8 <I2C_Master_ADDR+0x278>
 8004dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004dce:	d00b      	beq.n	8004de8 <I2C_Master_ADDR+0x268>
 8004dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d008      	beq.n	8004de8 <I2C_Master_ADDR+0x268>
 8004dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d005      	beq.n	8004de8 <I2C_Master_ADDR+0x268>
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dde:	2b10      	cmp	r3, #16
 8004de0:	d002      	beq.n	8004de8 <I2C_Master_ADDR+0x268>
 8004de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de4:	2b20      	cmp	r3, #32
 8004de6:	d107      	bne.n	8004df8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004df6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004df8:	2300      	movs	r3, #0
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	e032      	b.n	8004e76 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e1e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e2e:	d117      	bne.n	8004e60 <I2C_Master_ADDR+0x2e0>
 8004e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e32:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e36:	d00b      	beq.n	8004e50 <I2C_Master_ADDR+0x2d0>
 8004e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d008      	beq.n	8004e50 <I2C_Master_ADDR+0x2d0>
 8004e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d005      	beq.n	8004e50 <I2C_Master_ADDR+0x2d0>
 8004e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e46:	2b10      	cmp	r3, #16
 8004e48:	d002      	beq.n	8004e50 <I2C_Master_ADDR+0x2d0>
 8004e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4c:	2b20      	cmp	r3, #32
 8004e4e:	d107      	bne.n	8004e60 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e5e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e60:	2300      	movs	r3, #0
 8004e62:	613b      	str	r3, [r7, #16]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	613b      	str	r3, [r7, #16]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	613b      	str	r3, [r7, #16]
 8004e74:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004e7c:	e00b      	b.n	8004e96 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e7e:	2300      	movs	r3, #0
 8004e80:	60fb      	str	r3, [r7, #12]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	68fb      	ldr	r3, [r7, #12]
}
 8004e94:	e7ff      	b.n	8004e96 <I2C_Master_ADDR+0x316>
 8004e96:	bf00      	nop
 8004e98:	3744      	adds	r7, #68	; 0x44
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b084      	sub	sp, #16
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d02b      	beq.n	8004f14 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	781a      	ldrb	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d114      	bne.n	8004f14 <I2C_SlaveTransmit_TXE+0x72>
 8004eea:	7bfb      	ldrb	r3, [r7, #15]
 8004eec:	2b29      	cmp	r3, #41	; 0x29
 8004eee:	d111      	bne.n	8004f14 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685a      	ldr	r2, [r3, #4]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004efe:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2221      	movs	r2, #33	; 0x21
 8004f04:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2228      	movs	r2, #40	; 0x28
 8004f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7ff fa14 	bl	800433c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004f14:	bf00      	nop
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d011      	beq.n	8004f52 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	781a      	ldrb	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b084      	sub	sp, #16
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f6c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d02c      	beq.n	8004fd2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	691a      	ldr	r2, [r3, #16]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f82:	b2d2      	uxtb	r2, r2
 8004f84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	1c5a      	adds	r2, r3, #1
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	3b01      	subs	r3, #1
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d114      	bne.n	8004fd2 <I2C_SlaveReceive_RXNE+0x74>
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
 8004faa:	2b2a      	cmp	r3, #42	; 0x2a
 8004fac:	d111      	bne.n	8004fd2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fbc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2222      	movs	r2, #34	; 0x22
 8004fc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2228      	movs	r2, #40	; 0x28
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff f9bf 	bl	8004350 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004fd2:	bf00      	nop
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}

08004fda <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d012      	beq.n	8005012 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691a      	ldr	r2, [r3, #16]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	b2d2      	uxtb	r2, r2
 8004ff8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005008:	b29b      	uxth	r3, r3
 800500a:	3b01      	subs	r3, #1
 800500c:	b29a      	uxth	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005012:	bf00      	nop
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b084      	sub	sp, #16
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005028:	2300      	movs	r3, #0
 800502a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005032:	b2db      	uxtb	r3, r3
 8005034:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005038:	2b28      	cmp	r3, #40	; 0x28
 800503a:	d127      	bne.n	800508c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800504a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	089b      	lsrs	r3, r3, #2
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005058:	2301      	movs	r3, #1
 800505a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	09db      	lsrs	r3, r3, #7
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d103      	bne.n	8005070 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	81bb      	strh	r3, [r7, #12]
 800506e:	e002      	b.n	8005076 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800507e:	89ba      	ldrh	r2, [r7, #12]
 8005080:	7bfb      	ldrb	r3, [r7, #15]
 8005082:	4619      	mov	r1, r3
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7ff f96d 	bl	8004364 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800508a:	e008      	b.n	800509e <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f06f 0202 	mvn.w	r2, #2
 8005094:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800509e:	bf00      	nop
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
	...

080050a8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050c6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80050c8:	2300      	movs	r3, #0
 80050ca:	60bb      	str	r3, [r7, #8]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	60bb      	str	r3, [r7, #8]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0201 	orr.w	r2, r2, #1
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005100:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005104:	d172      	bne.n	80051ec <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005106:	7bfb      	ldrb	r3, [r7, #15]
 8005108:	2b22      	cmp	r3, #34	; 0x22
 800510a:	d002      	beq.n	8005112 <I2C_Slave_STOPF+0x6a>
 800510c:	7bfb      	ldrb	r3, [r7, #15]
 800510e:	2b2a      	cmp	r3, #42	; 0x2a
 8005110:	d135      	bne.n	800517e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	b29a      	uxth	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005124:	b29b      	uxth	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d005      	beq.n	8005136 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	f043 0204 	orr.w	r2, r3, #4
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005144:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514a:	4618      	mov	r0, r3
 800514c:	f7fd fdea 	bl	8002d24 <HAL_DMA_GetState>
 8005150:	4603      	mov	r3, r0
 8005152:	2b01      	cmp	r3, #1
 8005154:	d049      	beq.n	80051ea <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	4a69      	ldr	r2, [pc, #420]	; (8005300 <I2C_Slave_STOPF+0x258>)
 800515c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005162:	4618      	mov	r0, r3
 8005164:	f7fd fc32 	bl	80029cc <HAL_DMA_Abort_IT>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d03d      	beq.n	80051ea <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005178:	4610      	mov	r0, r2
 800517a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800517c:	e035      	b.n	80051ea <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	b29a      	uxth	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d005      	beq.n	80051a2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	f043 0204 	orr.w	r2, r3, #4
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051b0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fd fdb4 	bl	8002d24 <HAL_DMA_GetState>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d014      	beq.n	80051ec <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c6:	4a4e      	ldr	r2, [pc, #312]	; (8005300 <I2C_Slave_STOPF+0x258>)
 80051c8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fd fbfc 	bl	80029cc <HAL_DMA_Abort_IT>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d008      	beq.n	80051ec <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051e4:	4610      	mov	r0, r2
 80051e6:	4798      	blx	r3
 80051e8:	e000      	b.n	80051ec <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051ea:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d03e      	beq.n	8005274 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b04      	cmp	r3, #4
 8005202:	d112      	bne.n	800522a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691a      	ldr	r2, [r3, #16]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005220:	b29b      	uxth	r3, r3
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005234:	2b40      	cmp	r3, #64	; 0x40
 8005236:	d112      	bne.n	800525e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005254:	b29b      	uxth	r3, r3
 8005256:	3b01      	subs	r3, #1
 8005258:	b29a      	uxth	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005262:	b29b      	uxth	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d005      	beq.n	8005274 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526c:	f043 0204 	orr.w	r2, r3, #4
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f8b3 	bl	80053e8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005282:	e039      	b.n	80052f8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005284:	7bfb      	ldrb	r3, [r7, #15]
 8005286:	2b2a      	cmp	r3, #42	; 0x2a
 8005288:	d109      	bne.n	800529e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2228      	movs	r2, #40	; 0x28
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f7ff f859 	bl	8004350 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b28      	cmp	r3, #40	; 0x28
 80052a8:	d111      	bne.n	80052ce <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a15      	ldr	r2, [pc, #84]	; (8005304 <I2C_Slave_STOPF+0x25c>)
 80052ae:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7ff f85a 	bl	8004380 <HAL_I2C_ListenCpltCallback>
}
 80052cc:	e014      	b.n	80052f8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d2:	2b22      	cmp	r3, #34	; 0x22
 80052d4:	d002      	beq.n	80052dc <I2C_Slave_STOPF+0x234>
 80052d6:	7bfb      	ldrb	r3, [r7, #15]
 80052d8:	2b22      	cmp	r3, #34	; 0x22
 80052da:	d10d      	bne.n	80052f8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2220      	movs	r2, #32
 80052e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7ff f82c 	bl	8004350 <HAL_I2C_SlaveRxCpltCallback>
}
 80052f8:	bf00      	nop
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	08005949 	.word	0x08005949
 8005304:	ffff0000 	.word	0xffff0000

08005308 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005316:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2b08      	cmp	r3, #8
 8005322:	d002      	beq.n	800532a <I2C_Slave_AF+0x22>
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2b20      	cmp	r3, #32
 8005328:	d129      	bne.n	800537e <I2C_Slave_AF+0x76>
 800532a:	7bfb      	ldrb	r3, [r7, #15]
 800532c:	2b28      	cmp	r3, #40	; 0x28
 800532e:	d126      	bne.n	800537e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a2c      	ldr	r2, [pc, #176]	; (80053e4 <I2C_Slave_AF+0xdc>)
 8005334:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005344:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800534e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800535e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2220      	movs	r2, #32
 800536a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7ff f802 	bl	8004380 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800537c:	e02e      	b.n	80053dc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800537e:	7bfb      	ldrb	r3, [r7, #15]
 8005380:	2b21      	cmp	r3, #33	; 0x21
 8005382:	d126      	bne.n	80053d2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a17      	ldr	r2, [pc, #92]	; (80053e4 <I2C_Slave_AF+0xdc>)
 8005388:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2221      	movs	r2, #33	; 0x21
 800538e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053ae:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053b8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053c8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7fe ffb6 	bl	800433c <HAL_I2C_SlaveTxCpltCallback>
}
 80053d0:	e004      	b.n	80053dc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053da:	615a      	str	r2, [r3, #20]
}
 80053dc:	bf00      	nop
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	ffff0000 	.word	0xffff0000

080053e8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053fe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005400:	7bbb      	ldrb	r3, [r7, #14]
 8005402:	2b10      	cmp	r3, #16
 8005404:	d002      	beq.n	800540c <I2C_ITError+0x24>
 8005406:	7bbb      	ldrb	r3, [r7, #14]
 8005408:	2b40      	cmp	r3, #64	; 0x40
 800540a:	d10a      	bne.n	8005422 <I2C_ITError+0x3a>
 800540c:	7bfb      	ldrb	r3, [r7, #15]
 800540e:	2b22      	cmp	r3, #34	; 0x22
 8005410:	d107      	bne.n	8005422 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005420:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005422:	7bfb      	ldrb	r3, [r7, #15]
 8005424:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005428:	2b28      	cmp	r3, #40	; 0x28
 800542a:	d107      	bne.n	800543c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2228      	movs	r2, #40	; 0x28
 8005436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800543a:	e015      	b.n	8005468 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800544a:	d00a      	beq.n	8005462 <I2C_ITError+0x7a>
 800544c:	7bfb      	ldrb	r3, [r7, #15]
 800544e:	2b60      	cmp	r3, #96	; 0x60
 8005450:	d007      	beq.n	8005462 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2220      	movs	r2, #32
 8005456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005476:	d162      	bne.n	800553e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005486:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800548c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b01      	cmp	r3, #1
 8005494:	d020      	beq.n	80054d8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549a:	4a6a      	ldr	r2, [pc, #424]	; (8005644 <I2C_ITError+0x25c>)
 800549c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fd fa92 	bl	80029cc <HAL_DMA_Abort_IT>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 8089 	beq.w	80055c2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0201 	bic.w	r2, r2, #1
 80054be:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2220      	movs	r2, #32
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054d2:	4610      	mov	r0, r2
 80054d4:	4798      	blx	r3
 80054d6:	e074      	b.n	80055c2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054dc:	4a59      	ldr	r2, [pc, #356]	; (8005644 <I2C_ITError+0x25c>)
 80054de:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7fd fa71 	bl	80029cc <HAL_DMA_Abort_IT>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d068      	beq.n	80055c2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fa:	2b40      	cmp	r3, #64	; 0x40
 80054fc:	d10b      	bne.n	8005516 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	691a      	ldr	r2, [r3, #16]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	b2d2      	uxtb	r2, r2
 800550a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0201 	bic.w	r2, r2, #1
 8005524:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2220      	movs	r2, #32
 800552a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005538:	4610      	mov	r0, r2
 800553a:	4798      	blx	r3
 800553c:	e041      	b.n	80055c2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b60      	cmp	r3, #96	; 0x60
 8005548:	d125      	bne.n	8005596 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2220      	movs	r2, #32
 800554e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005562:	2b40      	cmp	r3, #64	; 0x40
 8005564:	d10b      	bne.n	800557e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	b2d2      	uxtb	r2, r2
 8005572:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	1c5a      	adds	r2, r3, #1
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 0201 	bic.w	r2, r2, #1
 800558c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7fe ff00 	bl	8004394 <HAL_I2C_AbortCpltCallback>
 8005594:	e015      	b.n	80055c2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a0:	2b40      	cmp	r3, #64	; 0x40
 80055a2:	d10b      	bne.n	80055bc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	691a      	ldr	r2, [r3, #16]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f00c f919 	bl	80117f4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10e      	bne.n	80055f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d109      	bne.n	80055f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d104      	bne.n	80055f0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d007      	beq.n	8005600 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055fe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005606:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b04      	cmp	r3, #4
 8005612:	d113      	bne.n	800563c <I2C_ITError+0x254>
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	2b28      	cmp	r3, #40	; 0x28
 8005618:	d110      	bne.n	800563c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a0a      	ldr	r2, [pc, #40]	; (8005648 <I2C_ITError+0x260>)
 800561e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2220      	movs	r2, #32
 800562a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7fe fea2 	bl	8004380 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800563c:	bf00      	nop
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	08005949 	.word	0x08005949
 8005648:	ffff0000 	.word	0xffff0000

0800564c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b088      	sub	sp, #32
 8005650:	af02      	add	r7, sp, #8
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	4608      	mov	r0, r1
 8005656:	4611      	mov	r1, r2
 8005658:	461a      	mov	r2, r3
 800565a:	4603      	mov	r3, r0
 800565c:	817b      	strh	r3, [r7, #10]
 800565e:	460b      	mov	r3, r1
 8005660:	813b      	strh	r3, [r7, #8]
 8005662:	4613      	mov	r3, r2
 8005664:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005674:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	2200      	movs	r2, #0
 800567e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 fa08 	bl	8005a98 <I2C_WaitOnFlagUntilTimeout>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00d      	beq.n	80056aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005698:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800569c:	d103      	bne.n	80056a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e05f      	b.n	800576a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056aa:	897b      	ldrh	r3, [r7, #10]
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	461a      	mov	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	6a3a      	ldr	r2, [r7, #32]
 80056be:	492d      	ldr	r1, [pc, #180]	; (8005774 <I2C_RequestMemoryWrite+0x128>)
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f000 fa40 	bl	8005b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e04c      	b.n	800576a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056d0:	2300      	movs	r3, #0
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	617b      	str	r3, [r7, #20]
 80056e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056e8:	6a39      	ldr	r1, [r7, #32]
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f000 faaa 	bl	8005c44 <I2C_WaitOnTXEFlagUntilTimeout>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00d      	beq.n	8005712 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	d107      	bne.n	800570e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800570c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e02b      	b.n	800576a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005712:	88fb      	ldrh	r3, [r7, #6]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d105      	bne.n	8005724 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005718:	893b      	ldrh	r3, [r7, #8]
 800571a:	b2da      	uxtb	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	611a      	str	r2, [r3, #16]
 8005722:	e021      	b.n	8005768 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005724:	893b      	ldrh	r3, [r7, #8]
 8005726:	0a1b      	lsrs	r3, r3, #8
 8005728:	b29b      	uxth	r3, r3
 800572a:	b2da      	uxtb	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005734:	6a39      	ldr	r1, [r7, #32]
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 fa84 	bl	8005c44 <I2C_WaitOnTXEFlagUntilTimeout>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00d      	beq.n	800575e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	2b04      	cmp	r3, #4
 8005748:	d107      	bne.n	800575a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005758:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e005      	b.n	800576a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800575e:	893b      	ldrh	r3, [r7, #8]
 8005760:	b2da      	uxtb	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3718      	adds	r7, #24
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	00010002 	.word	0x00010002

08005778 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b088      	sub	sp, #32
 800577c:	af02      	add	r7, sp, #8
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	4608      	mov	r0, r1
 8005782:	4611      	mov	r1, r2
 8005784:	461a      	mov	r2, r3
 8005786:	4603      	mov	r3, r0
 8005788:	817b      	strh	r3, [r7, #10]
 800578a:	460b      	mov	r3, r1
 800578c:	813b      	strh	r3, [r7, #8]
 800578e:	4613      	mov	r3, r2
 8005790:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	6a3b      	ldr	r3, [r7, #32]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 f96a 	bl	8005a98 <I2C_WaitOnFlagUntilTimeout>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00d      	beq.n	80057e6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057d8:	d103      	bne.n	80057e2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e0aa      	b.n	800593c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057e6:	897b      	ldrh	r3, [r7, #10]
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	461a      	mov	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	6a3a      	ldr	r2, [r7, #32]
 80057fa:	4952      	ldr	r1, [pc, #328]	; (8005944 <I2C_RequestMemoryRead+0x1cc>)
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 f9a2 	bl	8005b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e097      	b.n	800593c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800580c:	2300      	movs	r3, #0
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	617b      	str	r3, [r7, #20]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005824:	6a39      	ldr	r1, [r7, #32]
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 fa0c 	bl	8005c44 <I2C_WaitOnTXEFlagUntilTimeout>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00d      	beq.n	800584e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	2b04      	cmp	r3, #4
 8005838:	d107      	bne.n	800584a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005848:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e076      	b.n	800593c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800584e:	88fb      	ldrh	r3, [r7, #6]
 8005850:	2b01      	cmp	r3, #1
 8005852:	d105      	bne.n	8005860 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005854:	893b      	ldrh	r3, [r7, #8]
 8005856:	b2da      	uxtb	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	611a      	str	r2, [r3, #16]
 800585e:	e021      	b.n	80058a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005860:	893b      	ldrh	r3, [r7, #8]
 8005862:	0a1b      	lsrs	r3, r3, #8
 8005864:	b29b      	uxth	r3, r3
 8005866:	b2da      	uxtb	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800586e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005870:	6a39      	ldr	r1, [r7, #32]
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 f9e6 	bl	8005c44 <I2C_WaitOnTXEFlagUntilTimeout>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00d      	beq.n	800589a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	2b04      	cmp	r3, #4
 8005884:	d107      	bne.n	8005896 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005894:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e050      	b.n	800593c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800589a:	893b      	ldrh	r3, [r7, #8]
 800589c:	b2da      	uxtb	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a6:	6a39      	ldr	r1, [r7, #32]
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 f9cb 	bl	8005c44 <I2C_WaitOnTXEFlagUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00d      	beq.n	80058d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	d107      	bne.n	80058cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e035      	b.n	800593c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f8d3 	bl	8005a98 <I2C_WaitOnFlagUntilTimeout>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00d      	beq.n	8005914 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005906:	d103      	bne.n	8005910 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800590e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e013      	b.n	800593c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005914:	897b      	ldrh	r3, [r7, #10]
 8005916:	b2db      	uxtb	r3, r3
 8005918:	f043 0301 	orr.w	r3, r3, #1
 800591c:	b2da      	uxtb	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	6a3a      	ldr	r2, [r7, #32]
 8005928:	4906      	ldr	r1, [pc, #24]	; (8005944 <I2C_RequestMemoryRead+0x1cc>)
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 f90b 	bl	8005b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e000      	b.n	800593c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3718      	adds	r7, #24
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	00010002 	.word	0x00010002

08005948 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005958:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005960:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005962:	4b4b      	ldr	r3, [pc, #300]	; (8005a90 <I2C_DMAAbort+0x148>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	08db      	lsrs	r3, r3, #3
 8005968:	4a4a      	ldr	r2, [pc, #296]	; (8005a94 <I2C_DMAAbort+0x14c>)
 800596a:	fba2 2303 	umull	r2, r3, r2, r3
 800596e:	0a1a      	lsrs	r2, r3, #8
 8005970:	4613      	mov	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	00da      	lsls	r2, r3, #3
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d106      	bne.n	8005990 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005986:	f043 0220 	orr.w	r2, r3, #32
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800598e:	e00a      	b.n	80059a6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	3b01      	subs	r3, #1
 8005994:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059a4:	d0ea      	beq.n	800597c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b2:	2200      	movs	r2, #0
 80059b4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c2:	2200      	movs	r2, #0
 80059c4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059d4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2200      	movs	r2, #0
 80059da:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e8:	2200      	movs	r2, #0
 80059ea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f8:	2200      	movs	r2, #0
 80059fa:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0201 	bic.w	r2, r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	2b60      	cmp	r3, #96	; 0x60
 8005a16:	d10e      	bne.n	8005a36 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a2e:	6978      	ldr	r0, [r7, #20]
 8005a30:	f7fe fcb0 	bl	8004394 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a34:	e027      	b.n	8005a86 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a36:	7cfb      	ldrb	r3, [r7, #19]
 8005a38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a3c:	2b28      	cmp	r3, #40	; 0x28
 8005a3e:	d117      	bne.n	8005a70 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0201 	orr.w	r2, r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a5e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	2200      	movs	r2, #0
 8005a64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2228      	movs	r2, #40	; 0x28
 8005a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a6e:	e007      	b.n	8005a80 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	2220      	movs	r2, #32
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005a80:	6978      	ldr	r0, [r7, #20]
 8005a82:	f00b feb7 	bl	80117f4 <HAL_I2C_ErrorCallback>
}
 8005a86:	bf00      	nop
 8005a88:	3718      	adds	r7, #24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	20000000 	.word	0x20000000
 8005a94:	14f8b589 	.word	0x14f8b589

08005a98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	603b      	str	r3, [r7, #0]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005aa8:	e025      	b.n	8005af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ab0:	d021      	beq.n	8005af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ab2:	f7fc f99f 	bl	8001df4 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d302      	bcc.n	8005ac8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d116      	bne.n	8005af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae2:	f043 0220 	orr.w	r2, r3, #32
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e023      	b.n	8005b3e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	0c1b      	lsrs	r3, r3, #16
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d10d      	bne.n	8005b1c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	43da      	mvns	r2, r3
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	bf0c      	ite	eq
 8005b12:	2301      	moveq	r3, #1
 8005b14:	2300      	movne	r3, #0
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	461a      	mov	r2, r3
 8005b1a:	e00c      	b.n	8005b36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	43da      	mvns	r2, r3
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	4013      	ands	r3, r2
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	bf0c      	ite	eq
 8005b2e:	2301      	moveq	r3, #1
 8005b30:	2300      	movne	r3, #0
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	461a      	mov	r2, r3
 8005b36:	79fb      	ldrb	r3, [r7, #7]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d0b6      	beq.n	8005aaa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b084      	sub	sp, #16
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	60f8      	str	r0, [r7, #12]
 8005b4e:	60b9      	str	r1, [r7, #8]
 8005b50:	607a      	str	r2, [r7, #4]
 8005b52:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b54:	e051      	b.n	8005bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b64:	d123      	bne.n	8005bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b74:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2220      	movs	r2, #32
 8005b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	f043 0204 	orr.w	r2, r3, #4
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e046      	b.n	8005c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bb4:	d021      	beq.n	8005bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bb6:	f7fc f91d 	bl	8001df4 <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d302      	bcc.n	8005bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d116      	bne.n	8005bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	f043 0220 	orr.w	r2, r3, #32
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e020      	b.n	8005c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	0c1b      	lsrs	r3, r3, #16
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d10c      	bne.n	8005c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	43da      	mvns	r2, r3
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	4013      	ands	r3, r2
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	bf14      	ite	ne
 8005c16:	2301      	movne	r3, #1
 8005c18:	2300      	moveq	r3, #0
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	e00b      	b.n	8005c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	43da      	mvns	r2, r3
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	4013      	ands	r3, r2
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	bf14      	ite	ne
 8005c30:	2301      	movne	r3, #1
 8005c32:	2300      	moveq	r3, #0
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d18d      	bne.n	8005b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c50:	e02d      	b.n	8005cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 f900 	bl	8005e58 <I2C_IsAcknowledgeFailed>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e02d      	b.n	8005cbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c68:	d021      	beq.n	8005cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c6a:	f7fc f8c3 	bl	8001df4 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d302      	bcc.n	8005c80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d116      	bne.n	8005cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	f043 0220 	orr.w	r2, r3, #32
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e007      	b.n	8005cbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb8:	2b80      	cmp	r3, #128	; 0x80
 8005cba:	d1ca      	bne.n	8005c52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b084      	sub	sp, #16
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	60f8      	str	r0, [r7, #12]
 8005cce:	60b9      	str	r1, [r7, #8]
 8005cd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005cd2:	e02d      	b.n	8005d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f000 f8bf 	bl	8005e58 <I2C_IsAcknowledgeFailed>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e02d      	b.n	8005d40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cea:	d021      	beq.n	8005d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cec:	f7fc f882 	bl	8001df4 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d302      	bcc.n	8005d02 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d116      	bne.n	8005d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1c:	f043 0220 	orr.w	r2, r3, #32
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e007      	b.n	8005d40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	f003 0304 	and.w	r3, r3, #4
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	d1ca      	bne.n	8005cd4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3710      	adds	r7, #16
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d54:	4b13      	ldr	r3, [pc, #76]	; (8005da4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	08db      	lsrs	r3, r3, #3
 8005d5a:	4a13      	ldr	r2, [pc, #76]	; (8005da8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d60:	0a1a      	lsrs	r2, r3, #8
 8005d62:	4613      	mov	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d107      	bne.n	8005d86 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	f043 0220 	orr.w	r2, r3, #32
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e008      	b.n	8005d98 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d94:	d0e9      	beq.n	8005d6a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	20000000 	.word	0x20000000
 8005da8:	14f8b589 	.word	0x14f8b589

08005dac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005db8:	e042      	b.n	8005e40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	f003 0310 	and.w	r3, r3, #16
 8005dc4:	2b10      	cmp	r3, #16
 8005dc6:	d119      	bne.n	8005dfc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f06f 0210 	mvn.w	r2, #16
 8005dd0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e029      	b.n	8005e50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dfc:	f7fb fffa 	bl	8001df4 <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d302      	bcc.n	8005e12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d116      	bne.n	8005e40 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2220      	movs	r2, #32
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2c:	f043 0220 	orr.w	r2, r3, #32
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e007      	b.n	8005e50 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4a:	2b40      	cmp	r3, #64	; 0x40
 8005e4c:	d1b5      	bne.n	8005dba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e6e:	d11b      	bne.n	8005ea8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e94:	f043 0204 	orr.w	r2, r3, #4
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e000      	b.n	8005eaa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b083      	sub	sp, #12
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005ec6:	d103      	bne.n	8005ed0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005ece:	e007      	b.n	8005ee0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005ed8:	d102      	bne.n	8005ee0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2208      	movs	r2, #8
 8005ede:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eee:	b08f      	sub	sp, #60	; 0x3c
 8005ef0:	af0a      	add	r7, sp, #40	; 0x28
 8005ef2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e10f      	b.n	800611e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d106      	bne.n	8005f1e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f00a fa15 	bl	8010348 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2203      	movs	r2, #3
 8005f22:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d102      	bne.n	8005f38 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f004 f844 	bl	8009fca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	603b      	str	r3, [r7, #0]
 8005f48:	687e      	ldr	r6, [r7, #4]
 8005f4a:	466d      	mov	r5, sp
 8005f4c:	f106 0410 	add.w	r4, r6, #16
 8005f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005f56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005f58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005f5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005f60:	1d33      	adds	r3, r6, #4
 8005f62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f64:	6838      	ldr	r0, [r7, #0]
 8005f66:	f003 ff1b 	bl	8009da0 <USB_CoreInit>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d005      	beq.n	8005f7c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e0d0      	b.n	800611e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2100      	movs	r1, #0
 8005f82:	4618      	mov	r0, r3
 8005f84:	f004 f832 	bl	8009fec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f88:	2300      	movs	r3, #0
 8005f8a:	73fb      	strb	r3, [r7, #15]
 8005f8c:	e04a      	b.n	8006024 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005f8e:	7bfa      	ldrb	r2, [r7, #15]
 8005f90:	6879      	ldr	r1, [r7, #4]
 8005f92:	4613      	mov	r3, r2
 8005f94:	00db      	lsls	r3, r3, #3
 8005f96:	1a9b      	subs	r3, r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	440b      	add	r3, r1
 8005f9c:	333d      	adds	r3, #61	; 0x3d
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005fa2:	7bfa      	ldrb	r2, [r7, #15]
 8005fa4:	6879      	ldr	r1, [r7, #4]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	00db      	lsls	r3, r3, #3
 8005faa:	1a9b      	subs	r3, r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	440b      	add	r3, r1
 8005fb0:	333c      	adds	r3, #60	; 0x3c
 8005fb2:	7bfa      	ldrb	r2, [r7, #15]
 8005fb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005fb6:	7bfa      	ldrb	r2, [r7, #15]
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
 8005fba:	b298      	uxth	r0, r3
 8005fbc:	6879      	ldr	r1, [r7, #4]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	1a9b      	subs	r3, r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	440b      	add	r3, r1
 8005fc8:	3342      	adds	r3, #66	; 0x42
 8005fca:	4602      	mov	r2, r0
 8005fcc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005fce:	7bfa      	ldrb	r2, [r7, #15]
 8005fd0:	6879      	ldr	r1, [r7, #4]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	00db      	lsls	r3, r3, #3
 8005fd6:	1a9b      	subs	r3, r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	440b      	add	r3, r1
 8005fdc:	333f      	adds	r3, #63	; 0x3f
 8005fde:	2200      	movs	r2, #0
 8005fe0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005fe2:	7bfa      	ldrb	r2, [r7, #15]
 8005fe4:	6879      	ldr	r1, [r7, #4]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	00db      	lsls	r3, r3, #3
 8005fea:	1a9b      	subs	r3, r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	440b      	add	r3, r1
 8005ff0:	3344      	adds	r3, #68	; 0x44
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005ff6:	7bfa      	ldrb	r2, [r7, #15]
 8005ff8:	6879      	ldr	r1, [r7, #4]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	00db      	lsls	r3, r3, #3
 8005ffe:	1a9b      	subs	r3, r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	440b      	add	r3, r1
 8006004:	3348      	adds	r3, #72	; 0x48
 8006006:	2200      	movs	r2, #0
 8006008:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800600a:	7bfa      	ldrb	r2, [r7, #15]
 800600c:	6879      	ldr	r1, [r7, #4]
 800600e:	4613      	mov	r3, r2
 8006010:	00db      	lsls	r3, r3, #3
 8006012:	1a9b      	subs	r3, r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	440b      	add	r3, r1
 8006018:	3350      	adds	r3, #80	; 0x50
 800601a:	2200      	movs	r2, #0
 800601c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800601e:	7bfb      	ldrb	r3, [r7, #15]
 8006020:	3301      	adds	r3, #1
 8006022:	73fb      	strb	r3, [r7, #15]
 8006024:	7bfa      	ldrb	r2, [r7, #15]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	429a      	cmp	r2, r3
 800602c:	d3af      	bcc.n	8005f8e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800602e:	2300      	movs	r3, #0
 8006030:	73fb      	strb	r3, [r7, #15]
 8006032:	e044      	b.n	80060be <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006034:	7bfa      	ldrb	r2, [r7, #15]
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	4613      	mov	r3, r2
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	1a9b      	subs	r3, r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	440b      	add	r3, r1
 8006042:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006046:	2200      	movs	r2, #0
 8006048:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800604a:	7bfa      	ldrb	r2, [r7, #15]
 800604c:	6879      	ldr	r1, [r7, #4]
 800604e:	4613      	mov	r3, r2
 8006050:	00db      	lsls	r3, r3, #3
 8006052:	1a9b      	subs	r3, r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	440b      	add	r3, r1
 8006058:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800605c:	7bfa      	ldrb	r2, [r7, #15]
 800605e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006060:	7bfa      	ldrb	r2, [r7, #15]
 8006062:	6879      	ldr	r1, [r7, #4]
 8006064:	4613      	mov	r3, r2
 8006066:	00db      	lsls	r3, r3, #3
 8006068:	1a9b      	subs	r3, r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	440b      	add	r3, r1
 800606e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006072:	2200      	movs	r2, #0
 8006074:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006076:	7bfa      	ldrb	r2, [r7, #15]
 8006078:	6879      	ldr	r1, [r7, #4]
 800607a:	4613      	mov	r3, r2
 800607c:	00db      	lsls	r3, r3, #3
 800607e:	1a9b      	subs	r3, r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	440b      	add	r3, r1
 8006084:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006088:	2200      	movs	r2, #0
 800608a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800608c:	7bfa      	ldrb	r2, [r7, #15]
 800608e:	6879      	ldr	r1, [r7, #4]
 8006090:	4613      	mov	r3, r2
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	1a9b      	subs	r3, r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	440b      	add	r3, r1
 800609a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800609e:	2200      	movs	r2, #0
 80060a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80060a2:	7bfa      	ldrb	r2, [r7, #15]
 80060a4:	6879      	ldr	r1, [r7, #4]
 80060a6:	4613      	mov	r3, r2
 80060a8:	00db      	lsls	r3, r3, #3
 80060aa:	1a9b      	subs	r3, r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	440b      	add	r3, r1
 80060b0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80060b4:	2200      	movs	r2, #0
 80060b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
 80060ba:	3301      	adds	r3, #1
 80060bc:	73fb      	strb	r3, [r7, #15]
 80060be:	7bfa      	ldrb	r2, [r7, #15]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d3b5      	bcc.n	8006034 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	603b      	str	r3, [r7, #0]
 80060ce:	687e      	ldr	r6, [r7, #4]
 80060d0:	466d      	mov	r5, sp
 80060d2:	f106 0410 	add.w	r4, r6, #16
 80060d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80060dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80060e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80060e6:	1d33      	adds	r3, r6, #4
 80060e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060ea:	6838      	ldr	r0, [r7, #0]
 80060ec:	f003 ffa8 	bl	800a040 <USB_DevInit>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d005      	beq.n	8006102 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2202      	movs	r2, #2
 80060fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e00d      	b.n	800611e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4618      	mov	r0, r3
 8006118:	f004 fff0 	bl	800b0fc <USB_DevDisconnect>

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006126 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b084      	sub	sp, #16
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800613a:	2b01      	cmp	r3, #1
 800613c:	d101      	bne.n	8006142 <HAL_PCD_Start+0x1c>
 800613e:	2302      	movs	r3, #2
 8006140:	e020      	b.n	8006184 <HAL_PCD_Start+0x5e>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614e:	2b01      	cmp	r3, #1
 8006150:	d109      	bne.n	8006166 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006156:	2b01      	cmp	r3, #1
 8006158:	d005      	beq.n	8006166 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4618      	mov	r0, r3
 800616c:	f003 ff1c 	bl	8009fa8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4618      	mov	r0, r3
 8006176:	f004 ffa0 	bl	800b0ba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800618c:	b590      	push	{r4, r7, lr}
 800618e:	b08d      	sub	sp, #52	; 0x34
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f005 f85e 	bl	800b264 <USB_GetMode>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	f040 839d 	bne.w	80068ea <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f004 ffc2 	bl	800b13e <USB_ReadInterrupts>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	f000 8393 	beq.w	80068e8 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f004 ffb9 	bl	800b13e <USB_ReadInterrupts>
 80061cc:	4603      	mov	r3, r0
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d107      	bne.n	80061e6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	695a      	ldr	r2, [r3, #20]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f002 0202 	and.w	r2, r2, #2
 80061e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f004 ffa7 	bl	800b13e <USB_ReadInterrupts>
 80061f0:	4603      	mov	r3, r0
 80061f2:	f003 0310 	and.w	r3, r3, #16
 80061f6:	2b10      	cmp	r3, #16
 80061f8:	d161      	bne.n	80062be <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	699a      	ldr	r2, [r3, #24]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0210 	bic.w	r2, r2, #16
 8006208:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800620a:	6a3b      	ldr	r3, [r7, #32]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	f003 020f 	and.w	r2, r3, #15
 8006216:	4613      	mov	r3, r2
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	1a9b      	subs	r3, r3, r2
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	4413      	add	r3, r2
 8006226:	3304      	adds	r3, #4
 8006228:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	0c5b      	lsrs	r3, r3, #17
 800622e:	f003 030f 	and.w	r3, r3, #15
 8006232:	2b02      	cmp	r3, #2
 8006234:	d124      	bne.n	8006280 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800623c:	4013      	ands	r3, r2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d035      	beq.n	80062ae <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	091b      	lsrs	r3, r3, #4
 800624a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800624c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006250:	b29b      	uxth	r3, r3
 8006252:	461a      	mov	r2, r3
 8006254:	6a38      	ldr	r0, [r7, #32]
 8006256:	f004 fe0d 	bl	800ae74 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	68da      	ldr	r2, [r3, #12]
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	091b      	lsrs	r3, r3, #4
 8006262:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006266:	441a      	add	r2, r3
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	699a      	ldr	r2, [r3, #24]
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	091b      	lsrs	r3, r3, #4
 8006274:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006278:	441a      	add	r2, r3
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	619a      	str	r2, [r3, #24]
 800627e:	e016      	b.n	80062ae <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	0c5b      	lsrs	r3, r3, #17
 8006284:	f003 030f 	and.w	r3, r3, #15
 8006288:	2b06      	cmp	r3, #6
 800628a:	d110      	bne.n	80062ae <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006292:	2208      	movs	r2, #8
 8006294:	4619      	mov	r1, r3
 8006296:	6a38      	ldr	r0, [r7, #32]
 8006298:	f004 fdec 	bl	800ae74 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	699a      	ldr	r2, [r3, #24]
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	091b      	lsrs	r3, r3, #4
 80062a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062a8:	441a      	add	r2, r3
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	699a      	ldr	r2, [r3, #24]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f042 0210 	orr.w	r2, r2, #16
 80062bc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4618      	mov	r0, r3
 80062c4:	f004 ff3b 	bl	800b13e <USB_ReadInterrupts>
 80062c8:	4603      	mov	r3, r0
 80062ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80062d2:	d16e      	bne.n	80063b2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80062d4:	2300      	movs	r3, #0
 80062d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4618      	mov	r0, r3
 80062de:	f004 ff41 	bl	800b164 <USB_ReadDevAllOutEpInterrupt>
 80062e2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80062e4:	e062      	b.n	80063ac <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80062e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d057      	beq.n	80063a0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	4611      	mov	r1, r2
 80062fa:	4618      	mov	r0, r3
 80062fc:	f004 ff66 	bl	800b1cc <USB_ReadDevOutEPInterrupt>
 8006300:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00c      	beq.n	8006326 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	4413      	add	r3, r2
 8006314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006318:	461a      	mov	r2, r3
 800631a:	2301      	movs	r3, #1
 800631c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800631e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fdb1 	bl	8006e88 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f003 0308 	and.w	r3, r3, #8
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00c      	beq.n	800634a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633c:	461a      	mov	r2, r3
 800633e:	2308      	movs	r3, #8
 8006340:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006342:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 feab 	bl	80070a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	f003 0310 	and.w	r3, r3, #16
 8006350:	2b00      	cmp	r3, #0
 8006352:	d008      	beq.n	8006366 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006360:	461a      	mov	r2, r3
 8006362:	2310      	movs	r3, #16
 8006364:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f003 0320 	and.w	r3, r3, #32
 800636c:	2b00      	cmp	r3, #0
 800636e:	d008      	beq.n	8006382 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637c:	461a      	mov	r2, r3
 800637e:	2320      	movs	r3, #32
 8006380:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d009      	beq.n	80063a0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	4413      	add	r3, r2
 8006394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006398:	461a      	mov	r2, r3
 800639a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800639e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80063a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a2:	3301      	adds	r3, #1
 80063a4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80063a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a8:	085b      	lsrs	r3, r3, #1
 80063aa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80063ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d199      	bne.n	80062e6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f004 fec1 	bl	800b13e <USB_ReadInterrupts>
 80063bc:	4603      	mov	r3, r0
 80063be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063c6:	f040 80c0 	bne.w	800654a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f004 fee2 	bl	800b198 <USB_ReadDevAllInEpInterrupt>
 80063d4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80063da:	e0b2      	b.n	8006542 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80063dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 80a7 	beq.w	8006536 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063ee:	b2d2      	uxtb	r2, r2
 80063f0:	4611      	mov	r1, r2
 80063f2:	4618      	mov	r0, r3
 80063f4:	f004 ff08 	bl	800b208 <USB_ReadDevInEPInterrupt>
 80063f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b00      	cmp	r3, #0
 8006402:	d057      	beq.n	80064b4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	f003 030f 	and.w	r3, r3, #15
 800640a:	2201      	movs	r2, #1
 800640c:	fa02 f303 	lsl.w	r3, r2, r3
 8006410:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	43db      	mvns	r3, r3
 800641e:	69f9      	ldr	r1, [r7, #28]
 8006420:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006424:	4013      	ands	r3, r2
 8006426:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006434:	461a      	mov	r2, r3
 8006436:	2301      	movs	r3, #1
 8006438:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d132      	bne.n	80064a8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006442:	6879      	ldr	r1, [r7, #4]
 8006444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006446:	4613      	mov	r3, r2
 8006448:	00db      	lsls	r3, r3, #3
 800644a:	1a9b      	subs	r3, r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	440b      	add	r3, r1
 8006450:	3348      	adds	r3, #72	; 0x48
 8006452:	6819      	ldr	r1, [r3, #0]
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006458:	4613      	mov	r3, r2
 800645a:	00db      	lsls	r3, r3, #3
 800645c:	1a9b      	subs	r3, r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4403      	add	r3, r0
 8006462:	3344      	adds	r3, #68	; 0x44
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4419      	add	r1, r3
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800646c:	4613      	mov	r3, r2
 800646e:	00db      	lsls	r3, r3, #3
 8006470:	1a9b      	subs	r3, r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4403      	add	r3, r0
 8006476:	3348      	adds	r3, #72	; 0x48
 8006478:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	2b00      	cmp	r3, #0
 800647e:	d113      	bne.n	80064a8 <HAL_PCD_IRQHandler+0x31c>
 8006480:	6879      	ldr	r1, [r7, #4]
 8006482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006484:	4613      	mov	r3, r2
 8006486:	00db      	lsls	r3, r3, #3
 8006488:	1a9b      	subs	r3, r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	440b      	add	r3, r1
 800648e:	3350      	adds	r3, #80	; 0x50
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d108      	bne.n	80064a8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6818      	ldr	r0, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80064a0:	461a      	mov	r2, r3
 80064a2:	2101      	movs	r1, #1
 80064a4:	f004 ff10 	bl	800b2c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	4619      	mov	r1, r3
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f009 ffcb 	bl	801044a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	f003 0308 	and.w	r3, r3, #8
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d008      	beq.n	80064d0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ca:	461a      	mov	r2, r3
 80064cc:	2308      	movs	r3, #8
 80064ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	f003 0310 	and.w	r3, r3, #16
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d008      	beq.n	80064ec <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e6:	461a      	mov	r2, r3
 80064e8:	2310      	movs	r3, #16
 80064ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d008      	beq.n	8006508 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006502:	461a      	mov	r2, r3
 8006504:	2340      	movs	r3, #64	; 0x40
 8006506:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d008      	beq.n	8006524 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651e:	461a      	mov	r2, r3
 8006520:	2302      	movs	r3, #2
 8006522:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800652a:	2b00      	cmp	r3, #0
 800652c:	d003      	beq.n	8006536 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800652e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fc1b 	bl	8006d6c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	3301      	adds	r3, #1
 800653a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653e:	085b      	lsrs	r3, r3, #1
 8006540:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006544:	2b00      	cmp	r3, #0
 8006546:	f47f af49 	bne.w	80063dc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4618      	mov	r0, r3
 8006550:	f004 fdf5 	bl	800b13e <USB_ReadInterrupts>
 8006554:	4603      	mov	r3, r0
 8006556:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800655a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800655e:	d122      	bne.n	80065a6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	69fa      	ldr	r2, [r7, #28]
 800656a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800656e:	f023 0301 	bic.w	r3, r3, #1
 8006572:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800657a:	2b01      	cmp	r3, #1
 800657c:	d108      	bne.n	8006590 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006586:	2100      	movs	r1, #0
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fe27 	bl	80071dc <HAL_PCDEx_LPM_Callback>
 800658e:	e002      	b.n	8006596 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f009 ffd1 	bl	8010538 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	695a      	ldr	r2, [r3, #20]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80065a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f004 fdc7 	bl	800b13e <USB_ReadInterrupts>
 80065b0:	4603      	mov	r3, r0
 80065b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ba:	d112      	bne.n	80065e2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d102      	bne.n	80065d2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f009 ff8d 	bl	80104ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	695a      	ldr	r2, [r3, #20]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80065e0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f004 fda9 	bl	800b13e <USB_ReadInterrupts>
 80065ec:	4603      	mov	r3, r0
 80065ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065f6:	f040 80c7 	bne.w	8006788 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	69fa      	ldr	r2, [r7, #28]
 8006604:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006608:	f023 0301 	bic.w	r3, r3, #1
 800660c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2110      	movs	r1, #16
 8006614:	4618      	mov	r0, r3
 8006616:	f003 fe77 	bl	800a308 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800661a:	2300      	movs	r3, #0
 800661c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800661e:	e056      	b.n	80066ce <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662c:	461a      	mov	r2, r3
 800662e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006632:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	4413      	add	r3, r2
 800663c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006644:	0151      	lsls	r1, r2, #5
 8006646:	69fa      	ldr	r2, [r7, #28]
 8006648:	440a      	add	r2, r1
 800664a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800664e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006652:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006656:	015a      	lsls	r2, r3, #5
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	4413      	add	r3, r2
 800665c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006664:	0151      	lsls	r1, r2, #5
 8006666:	69fa      	ldr	r2, [r7, #28]
 8006668:	440a      	add	r2, r1
 800666a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800666e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006672:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	4413      	add	r3, r2
 800667c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006680:	461a      	mov	r2, r3
 8006682:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006686:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006698:	0151      	lsls	r1, r2, #5
 800669a:	69fa      	ldr	r2, [r7, #28]
 800669c:	440a      	add	r2, r1
 800669e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80066a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066b8:	0151      	lsls	r1, r2, #5
 80066ba:	69fa      	ldr	r2, [r7, #28]
 80066bc:	440a      	add	r2, r1
 80066be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066c6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ca:	3301      	adds	r3, #1
 80066cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d3a3      	bcc.n	8006620 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	69fa      	ldr	r2, [r7, #28]
 80066e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80066e6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80066ea:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d016      	beq.n	8006722 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006704:	f043 030b 	orr.w	r3, r3, #11
 8006708:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006714:	69fa      	ldr	r2, [r7, #28]
 8006716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800671a:	f043 030b 	orr.w	r3, r3, #11
 800671e:	6453      	str	r3, [r2, #68]	; 0x44
 8006720:	e015      	b.n	800674e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	69fa      	ldr	r2, [r7, #28]
 800672c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006730:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006734:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006738:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	69fa      	ldr	r2, [r7, #28]
 8006744:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006748:	f043 030b 	orr.w	r3, r3, #11
 800674c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	69fa      	ldr	r2, [r7, #28]
 8006758:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800675c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006760:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6818      	ldr	r0, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006772:	461a      	mov	r2, r3
 8006774:	f004 fda8 	bl	800b2c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	695a      	ldr	r2, [r3, #20]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006786:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4618      	mov	r0, r3
 800678e:	f004 fcd6 	bl	800b13e <USB_ReadInterrupts>
 8006792:	4603      	mov	r3, r0
 8006794:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800679c:	d124      	bne.n	80067e8 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f004 fd6c 	bl	800b280 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4618      	mov	r0, r3
 80067ae:	f003 fe0c 	bl	800a3ca <USB_GetDevSpeed>
 80067b2:	4603      	mov	r3, r0
 80067b4:	461a      	mov	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681c      	ldr	r4, [r3, #0]
 80067be:	f001 f947 	bl	8007a50 <HAL_RCC_GetHCLKFreq>
 80067c2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	461a      	mov	r2, r3
 80067cc:	4620      	mov	r0, r4
 80067ce:	f003 fb49 	bl	8009e64 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f009 fe61 	bl	801049a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	695a      	ldr	r2, [r3, #20]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80067e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f004 fca6 	bl	800b13e <USB_ReadInterrupts>
 80067f2:	4603      	mov	r3, r0
 80067f4:	f003 0308 	and.w	r3, r3, #8
 80067f8:	2b08      	cmp	r3, #8
 80067fa:	d10a      	bne.n	8006812 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f009 fe3e 	bl	801047e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	695a      	ldr	r2, [r3, #20]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f002 0208 	and.w	r2, r2, #8
 8006810:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4618      	mov	r0, r3
 8006818:	f004 fc91 	bl	800b13e <USB_ReadInterrupts>
 800681c:	4603      	mov	r3, r0
 800681e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006822:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006826:	d10f      	bne.n	8006848 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006828:	2300      	movs	r3, #0
 800682a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	b2db      	uxtb	r3, r3
 8006830:	4619      	mov	r1, r3
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f009 fea0 	bl	8010578 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	695a      	ldr	r2, [r3, #20]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006846:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4618      	mov	r0, r3
 800684e:	f004 fc76 	bl	800b13e <USB_ReadInterrupts>
 8006852:	4603      	mov	r3, r0
 8006854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006858:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800685c:	d10f      	bne.n	800687e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800685e:	2300      	movs	r3, #0
 8006860:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006864:	b2db      	uxtb	r3, r3
 8006866:	4619      	mov	r1, r3
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f009 fe73 	bl	8010554 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	695a      	ldr	r2, [r3, #20]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800687c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4618      	mov	r0, r3
 8006884:	f004 fc5b 	bl	800b13e <USB_ReadInterrupts>
 8006888:	4603      	mov	r3, r0
 800688a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800688e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006892:	d10a      	bne.n	80068aa <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f009 fe81 	bl	801059c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	695a      	ldr	r2, [r3, #20]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80068a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f004 fc45 	bl	800b13e <USB_ReadInterrupts>
 80068b4:	4603      	mov	r3, r0
 80068b6:	f003 0304 	and.w	r3, r3, #4
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	d115      	bne.n	80068ea <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f009 fe71 	bl	80105b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6859      	ldr	r1, [r3, #4]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	605a      	str	r2, [r3, #4]
 80068e6:	e000      	b.n	80068ea <HAL_PCD_IRQHandler+0x75e>
      return;
 80068e8:	bf00      	nop
    }
  }
}
 80068ea:	3734      	adds	r7, #52	; 0x34
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd90      	pop	{r4, r7, pc}

080068f0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	460b      	mov	r3, r1
 80068fa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006902:	2b01      	cmp	r3, #1
 8006904:	d101      	bne.n	800690a <HAL_PCD_SetAddress+0x1a>
 8006906:	2302      	movs	r3, #2
 8006908:	e013      	b.n	8006932 <HAL_PCD_SetAddress+0x42>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	78fa      	ldrb	r2, [r7, #3]
 8006916:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	78fa      	ldrb	r2, [r7, #3]
 8006920:	4611      	mov	r1, r2
 8006922:	4618      	mov	r0, r3
 8006924:	f004 fba3 	bl	800b06e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b084      	sub	sp, #16
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	4608      	mov	r0, r1
 8006944:	4611      	mov	r1, r2
 8006946:	461a      	mov	r2, r3
 8006948:	4603      	mov	r3, r0
 800694a:	70fb      	strb	r3, [r7, #3]
 800694c:	460b      	mov	r3, r1
 800694e:	803b      	strh	r3, [r7, #0]
 8006950:	4613      	mov	r3, r2
 8006952:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006954:	2300      	movs	r3, #0
 8006956:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800695c:	2b00      	cmp	r3, #0
 800695e:	da0f      	bge.n	8006980 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	f003 020f 	and.w	r2, r3, #15
 8006966:	4613      	mov	r3, r2
 8006968:	00db      	lsls	r3, r3, #3
 800696a:	1a9b      	subs	r3, r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	3338      	adds	r3, #56	; 0x38
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	4413      	add	r3, r2
 8006974:	3304      	adds	r3, #4
 8006976:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2201      	movs	r2, #1
 800697c:	705a      	strb	r2, [r3, #1]
 800697e:	e00f      	b.n	80069a0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006980:	78fb      	ldrb	r3, [r7, #3]
 8006982:	f003 020f 	and.w	r2, r3, #15
 8006986:	4613      	mov	r3, r2
 8006988:	00db      	lsls	r3, r3, #3
 800698a:	1a9b      	subs	r3, r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	4413      	add	r3, r2
 8006996:	3304      	adds	r3, #4
 8006998:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80069a0:	78fb      	ldrb	r3, [r7, #3]
 80069a2:	f003 030f 	and.w	r3, r3, #15
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80069ac:	883a      	ldrh	r2, [r7, #0]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	78ba      	ldrb	r2, [r7, #2]
 80069b6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	785b      	ldrb	r3, [r3, #1]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d004      	beq.n	80069ca <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80069ca:	78bb      	ldrb	r3, [r7, #2]
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d102      	bne.n	80069d6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d101      	bne.n	80069e4 <HAL_PCD_EP_Open+0xaa>
 80069e0:	2302      	movs	r3, #2
 80069e2:	e00e      	b.n	8006a02 <HAL_PCD_EP_Open+0xc8>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68f9      	ldr	r1, [r7, #12]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f003 fd0e 	bl	800a414 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006a00:	7afb      	ldrb	r3, [r7, #11]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b084      	sub	sp, #16
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	460b      	mov	r3, r1
 8006a14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006a16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	da0f      	bge.n	8006a3e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a1e:	78fb      	ldrb	r3, [r7, #3]
 8006a20:	f003 020f 	and.w	r2, r3, #15
 8006a24:	4613      	mov	r3, r2
 8006a26:	00db      	lsls	r3, r3, #3
 8006a28:	1a9b      	subs	r3, r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	3338      	adds	r3, #56	; 0x38
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	4413      	add	r3, r2
 8006a32:	3304      	adds	r3, #4
 8006a34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	705a      	strb	r2, [r3, #1]
 8006a3c:	e00f      	b.n	8006a5e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a3e:	78fb      	ldrb	r3, [r7, #3]
 8006a40:	f003 020f 	and.w	r2, r3, #15
 8006a44:	4613      	mov	r3, r2
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	1a9b      	subs	r3, r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	4413      	add	r3, r2
 8006a54:	3304      	adds	r3, #4
 8006a56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006a5e:	78fb      	ldrb	r3, [r7, #3]
 8006a60:	f003 030f 	and.w	r3, r3, #15
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d101      	bne.n	8006a78 <HAL_PCD_EP_Close+0x6e>
 8006a74:	2302      	movs	r3, #2
 8006a76:	e00e      	b.n	8006a96 <HAL_PCD_EP_Close+0x8c>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68f9      	ldr	r1, [r7, #12]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f003 fd4c 	bl	800a524 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b086      	sub	sp, #24
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	60f8      	str	r0, [r7, #12]
 8006aa6:	607a      	str	r2, [r7, #4]
 8006aa8:	603b      	str	r3, [r7, #0]
 8006aaa:	460b      	mov	r3, r1
 8006aac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006aae:	7afb      	ldrb	r3, [r7, #11]
 8006ab0:	f003 020f 	and.w	r2, r3, #15
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	00db      	lsls	r3, r3, #3
 8006ab8:	1a9b      	subs	r3, r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	683a      	ldr	r2, [r7, #0]
 8006ad2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	2200      	movs	r2, #0
 8006ade:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ae0:	7afb      	ldrb	r3, [r7, #11]
 8006ae2:	f003 030f 	and.w	r3, r3, #15
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d102      	bne.n	8006afa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006afa:	7afb      	ldrb	r3, [r7, #11]
 8006afc:	f003 030f 	and.w	r3, r3, #15
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d109      	bne.n	8006b18 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6818      	ldr	r0, [r3, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	461a      	mov	r2, r3
 8006b10:	6979      	ldr	r1, [r7, #20]
 8006b12:	f004 f827 	bl	800ab64 <USB_EP0StartXfer>
 8006b16:	e008      	b.n	8006b2a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6818      	ldr	r0, [r3, #0]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	461a      	mov	r2, r3
 8006b24:	6979      	ldr	r1, [r7, #20]
 8006b26:	f003 fdd9 	bl	800a6dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3718      	adds	r7, #24
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006b40:	78fb      	ldrb	r3, [r7, #3]
 8006b42:	f003 020f 	and.w	r2, r3, #15
 8006b46:	6879      	ldr	r1, [r7, #4]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	00db      	lsls	r3, r3, #3
 8006b4c:	1a9b      	subs	r3, r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	440b      	add	r3, r1
 8006b52:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006b56:	681b      	ldr	r3, [r3, #0]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr

08006b64 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	607a      	str	r2, [r7, #4]
 8006b6e:	603b      	str	r3, [r7, #0]
 8006b70:	460b      	mov	r3, r1
 8006b72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b74:	7afb      	ldrb	r3, [r7, #11]
 8006b76:	f003 020f 	and.w	r2, r3, #15
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	00db      	lsls	r3, r3, #3
 8006b7e:	1a9b      	subs	r3, r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	3338      	adds	r3, #56	; 0x38
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	4413      	add	r3, r2
 8006b88:	3304      	adds	r3, #4
 8006b8a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	683a      	ldr	r2, [r7, #0]
 8006b96:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ba4:	7afb      	ldrb	r3, [r7, #11]
 8006ba6:	f003 030f 	and.w	r3, r3, #15
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d102      	bne.n	8006bbe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006bbe:	7afb      	ldrb	r3, [r7, #11]
 8006bc0:	f003 030f 	and.w	r3, r3, #15
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d109      	bne.n	8006bdc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6818      	ldr	r0, [r3, #0]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	6979      	ldr	r1, [r7, #20]
 8006bd6:	f003 ffc5 	bl	800ab64 <USB_EP0StartXfer>
 8006bda:	e008      	b.n	8006bee <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6818      	ldr	r0, [r3, #0]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	461a      	mov	r2, r3
 8006be8:	6979      	ldr	r1, [r7, #20]
 8006bea:	f003 fd77 	bl	800a6dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3718      	adds	r7, #24
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	460b      	mov	r3, r1
 8006c02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006c04:	78fb      	ldrb	r3, [r7, #3]
 8006c06:	f003 020f 	and.w	r2, r3, #15
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d901      	bls.n	8006c16 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e050      	b.n	8006cb8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	da0f      	bge.n	8006c3e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c1e:	78fb      	ldrb	r3, [r7, #3]
 8006c20:	f003 020f 	and.w	r2, r3, #15
 8006c24:	4613      	mov	r3, r2
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	1a9b      	subs	r3, r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	3338      	adds	r3, #56	; 0x38
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	4413      	add	r3, r2
 8006c32:	3304      	adds	r3, #4
 8006c34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	705a      	strb	r2, [r3, #1]
 8006c3c:	e00d      	b.n	8006c5a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006c3e:	78fa      	ldrb	r2, [r7, #3]
 8006c40:	4613      	mov	r3, r2
 8006c42:	00db      	lsls	r3, r3, #3
 8006c44:	1a9b      	subs	r3, r3, r2
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	4413      	add	r3, r2
 8006c50:	3304      	adds	r3, #4
 8006c52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c60:	78fb      	ldrb	r3, [r7, #3]
 8006c62:	f003 030f 	and.w	r3, r3, #15
 8006c66:	b2da      	uxtb	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d101      	bne.n	8006c7a <HAL_PCD_EP_SetStall+0x82>
 8006c76:	2302      	movs	r3, #2
 8006c78:	e01e      	b.n	8006cb8 <HAL_PCD_EP_SetStall+0xc0>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68f9      	ldr	r1, [r7, #12]
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f004 f91c 	bl	800aec6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c8e:	78fb      	ldrb	r3, [r7, #3]
 8006c90:	f003 030f 	and.w	r3, r3, #15
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10a      	bne.n	8006cae <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6818      	ldr	r0, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	b2d9      	uxtb	r1, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006ca8:	461a      	mov	r2, r3
 8006caa:	f004 fb0d 	bl	800b2c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	460b      	mov	r3, r1
 8006cca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006ccc:	78fb      	ldrb	r3, [r7, #3]
 8006cce:	f003 020f 	and.w	r2, r3, #15
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d901      	bls.n	8006cde <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e042      	b.n	8006d64 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006cde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	da0f      	bge.n	8006d06 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ce6:	78fb      	ldrb	r3, [r7, #3]
 8006ce8:	f003 020f 	and.w	r2, r3, #15
 8006cec:	4613      	mov	r3, r2
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	1a9b      	subs	r3, r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	3338      	adds	r3, #56	; 0x38
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	3304      	adds	r3, #4
 8006cfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2201      	movs	r2, #1
 8006d02:	705a      	strb	r2, [r3, #1]
 8006d04:	e00f      	b.n	8006d26 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d06:	78fb      	ldrb	r3, [r7, #3]
 8006d08:	f003 020f 	and.w	r2, r3, #15
 8006d0c:	4613      	mov	r3, r2
 8006d0e:	00db      	lsls	r3, r3, #3
 8006d10:	1a9b      	subs	r3, r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	3304      	adds	r3, #4
 8006d1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d2c:	78fb      	ldrb	r3, [r7, #3]
 8006d2e:	f003 030f 	and.w	r3, r3, #15
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d101      	bne.n	8006d46 <HAL_PCD_EP_ClrStall+0x86>
 8006d42:	2302      	movs	r3, #2
 8006d44:	e00e      	b.n	8006d64 <HAL_PCD_EP_ClrStall+0xa4>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68f9      	ldr	r1, [r7, #12]
 8006d54:	4618      	mov	r0, r3
 8006d56:	f004 f924 	bl	800afa2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08a      	sub	sp, #40	; 0x28
 8006d70:	af02      	add	r7, sp, #8
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006d80:	683a      	ldr	r2, [r7, #0]
 8006d82:	4613      	mov	r3, r2
 8006d84:	00db      	lsls	r3, r3, #3
 8006d86:	1a9b      	subs	r3, r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	3338      	adds	r3, #56	; 0x38
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	4413      	add	r3, r2
 8006d90:	3304      	adds	r3, #4
 8006d92:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	699a      	ldr	r2, [r3, #24]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d901      	bls.n	8006da4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e06c      	b.n	8006e7e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	695a      	ldr	r2, [r3, #20]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	69fa      	ldr	r2, [r7, #28]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d902      	bls.n	8006dc0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	3303      	adds	r3, #3
 8006dc4:	089b      	lsrs	r3, r3, #2
 8006dc6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006dc8:	e02b      	b.n	8006e22 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	695a      	ldr	r2, [r3, #20]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	69fa      	ldr	r2, [r7, #28]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d902      	bls.n	8006de6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	3303      	adds	r3, #3
 8006dea:	089b      	lsrs	r3, r3, #2
 8006dec:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	68d9      	ldr	r1, [r3, #12]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	4603      	mov	r3, r0
 8006e04:	6978      	ldr	r0, [r7, #20]
 8006e06:	f004 f800 	bl	800ae0a <USB_WritePacket>

    ep->xfer_buff  += len;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	441a      	add	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	699a      	ldr	r2, [r3, #24]
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	441a      	add	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	015a      	lsls	r2, r3, #5
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	69ba      	ldr	r2, [r7, #24]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d809      	bhi.n	8006e4c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	699a      	ldr	r2, [r3, #24]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d203      	bcs.n	8006e4c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1be      	bne.n	8006dca <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	695a      	ldr	r2, [r3, #20]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d811      	bhi.n	8006e7c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	f003 030f 	and.w	r3, r3, #15
 8006e5e:	2201      	movs	r2, #1
 8006e60:	fa02 f303 	lsl.w	r3, r2, r3
 8006e64:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	43db      	mvns	r3, r3
 8006e72:	6939      	ldr	r1, [r7, #16]
 8006e74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e78:	4013      	ands	r3, r2
 8006e7a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3720      	adds	r7, #32
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
	...

08006e88 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	333c      	adds	r3, #60	; 0x3c
 8006ea0:	3304      	adds	r3, #4
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	f040 80a0 	bne.w	8007000 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	f003 0308 	and.w	r3, r3, #8
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d015      	beq.n	8006ef6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	4a72      	ldr	r2, [pc, #456]	; (8007098 <PCD_EP_OutXfrComplete_int+0x210>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	f240 80dd 	bls.w	800708e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 80d7 	beq.w	800708e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eec:	461a      	mov	r2, r3
 8006eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ef2:	6093      	str	r3, [r2, #8]
 8006ef4:	e0cb      	b.n	800708e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	f003 0320 	and.w	r3, r3, #32
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d009      	beq.n	8006f14 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	2320      	movs	r3, #32
 8006f10:	6093      	str	r3, [r2, #8]
 8006f12:	e0bc      	b.n	800708e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f040 80b7 	bne.w	800708e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4a5d      	ldr	r2, [pc, #372]	; (8007098 <PCD_EP_OutXfrComplete_int+0x210>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d90f      	bls.n	8006f48 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00a      	beq.n	8006f48 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	015a      	lsls	r2, r3, #5
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	4413      	add	r3, r2
 8006f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3e:	461a      	mov	r2, r3
 8006f40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f44:	6093      	str	r3, [r2, #8]
 8006f46:	e0a2      	b.n	800708e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006f48:	6879      	ldr	r1, [r7, #4]
 8006f4a:	683a      	ldr	r2, [r7, #0]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	00db      	lsls	r3, r3, #3
 8006f50:	1a9b      	subs	r3, r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	440b      	add	r3, r1
 8006f56:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006f5a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	0159      	lsls	r1, r3, #5
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	440b      	add	r3, r1
 8006f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006f6e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	4613      	mov	r3, r2
 8006f76:	00db      	lsls	r3, r3, #3
 8006f78:	1a9b      	subs	r3, r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4403      	add	r3, r0
 8006f7e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006f82:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006f84:	6879      	ldr	r1, [r7, #4]
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	1a9b      	subs	r3, r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	440b      	add	r3, r1
 8006f92:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006f96:	6819      	ldr	r1, [r3, #0]
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	00db      	lsls	r3, r3, #3
 8006fa0:	1a9b      	subs	r3, r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4403      	add	r3, r0
 8006fa6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4419      	add	r1, r3
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	683a      	ldr	r2, [r7, #0]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	00db      	lsls	r3, r3, #3
 8006fb6:	1a9b      	subs	r3, r3, r2
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4403      	add	r3, r0
 8006fbc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006fc0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d114      	bne.n	8006ff2 <PCD_EP_OutXfrComplete_int+0x16a>
 8006fc8:	6879      	ldr	r1, [r7, #4]
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	00db      	lsls	r3, r3, #3
 8006fd0:	1a9b      	subs	r3, r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	440b      	add	r3, r1
 8006fd6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d108      	bne.n	8006ff2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6818      	ldr	r0, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006fea:	461a      	mov	r2, r3
 8006fec:	2101      	movs	r1, #1
 8006fee:	f004 f96b 	bl	800b2c8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f009 fa0b 	bl	8010414 <HAL_PCD_DataOutStageCallback>
 8006ffe:	e046      	b.n	800708e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	4a26      	ldr	r2, [pc, #152]	; (800709c <PCD_EP_OutXfrComplete_int+0x214>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d124      	bne.n	8007052 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00a      	beq.n	8007028 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	4413      	add	r3, r2
 800701a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800701e:	461a      	mov	r2, r3
 8007020:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007024:	6093      	str	r3, [r2, #8]
 8007026:	e032      	b.n	800708e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	f003 0320 	and.w	r3, r3, #32
 800702e:	2b00      	cmp	r3, #0
 8007030:	d008      	beq.n	8007044 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	4413      	add	r3, r2
 800703a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800703e:	461a      	mov	r2, r3
 8007040:	2320      	movs	r3, #32
 8007042:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	b2db      	uxtb	r3, r3
 8007048:	4619      	mov	r1, r3
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f009 f9e2 	bl	8010414 <HAL_PCD_DataOutStageCallback>
 8007050:	e01d      	b.n	800708e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d114      	bne.n	8007082 <PCD_EP_OutXfrComplete_int+0x1fa>
 8007058:	6879      	ldr	r1, [r7, #4]
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	4613      	mov	r3, r2
 800705e:	00db      	lsls	r3, r3, #3
 8007060:	1a9b      	subs	r3, r3, r2
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	440b      	add	r3, r1
 8007066:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d108      	bne.n	8007082 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6818      	ldr	r0, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800707a:	461a      	mov	r2, r3
 800707c:	2100      	movs	r1, #0
 800707e:	f004 f923 	bl	800b2c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	b2db      	uxtb	r3, r3
 8007086:	4619      	mov	r1, r3
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f009 f9c3 	bl	8010414 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3718      	adds	r7, #24
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	4f54300a 	.word	0x4f54300a
 800709c:	4f54310a 	.word	0x4f54310a

080070a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	333c      	adds	r3, #60	; 0x3c
 80070b8:	3304      	adds	r3, #4
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	015a      	lsls	r2, r3, #5
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	4413      	add	r3, r2
 80070c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	4a15      	ldr	r2, [pc, #84]	; (8007128 <PCD_EP_OutSetupPacket_int+0x88>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d90e      	bls.n	80070f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d009      	beq.n	80070f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ec:	461a      	mov	r2, r3
 80070ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f009 f97b 	bl	80103f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	4a0a      	ldr	r2, [pc, #40]	; (8007128 <PCD_EP_OutSetupPacket_int+0x88>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d90c      	bls.n	800711c <PCD_EP_OutSetupPacket_int+0x7c>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d108      	bne.n	800711c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6818      	ldr	r0, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007114:	461a      	mov	r2, r3
 8007116:	2101      	movs	r1, #1
 8007118:	f004 f8d6 	bl	800b2c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3718      	adds	r7, #24
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	4f54300a 	.word	0x4f54300a

0800712c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	460b      	mov	r3, r1
 8007136:	70fb      	strb	r3, [r7, #3]
 8007138:	4613      	mov	r3, r2
 800713a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007142:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007144:	78fb      	ldrb	r3, [r7, #3]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d107      	bne.n	800715a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800714a:	883b      	ldrh	r3, [r7, #0]
 800714c:	0419      	lsls	r1, r3, #16
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	430a      	orrs	r2, r1
 8007156:	629a      	str	r2, [r3, #40]	; 0x28
 8007158:	e028      	b.n	80071ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007160:	0c1b      	lsrs	r3, r3, #16
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	4413      	add	r3, r2
 8007166:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007168:	2300      	movs	r3, #0
 800716a:	73fb      	strb	r3, [r7, #15]
 800716c:	e00d      	b.n	800718a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	7bfb      	ldrb	r3, [r7, #15]
 8007174:	3340      	adds	r3, #64	; 0x40
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4413      	add	r3, r2
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	0c1b      	lsrs	r3, r3, #16
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	4413      	add	r3, r2
 8007182:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007184:	7bfb      	ldrb	r3, [r7, #15]
 8007186:	3301      	adds	r3, #1
 8007188:	73fb      	strb	r3, [r7, #15]
 800718a:	7bfa      	ldrb	r2, [r7, #15]
 800718c:	78fb      	ldrb	r3, [r7, #3]
 800718e:	3b01      	subs	r3, #1
 8007190:	429a      	cmp	r2, r3
 8007192:	d3ec      	bcc.n	800716e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007194:	883b      	ldrh	r3, [r7, #0]
 8007196:	0418      	lsls	r0, r3, #16
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6819      	ldr	r1, [r3, #0]
 800719c:	78fb      	ldrb	r3, [r7, #3]
 800719e:	3b01      	subs	r3, #1
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	4302      	orrs	r2, r0
 80071a4:	3340      	adds	r3, #64	; 0x40
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	440b      	add	r3, r1
 80071aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b083      	sub	sp, #12
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
 80071c2:	460b      	mov	r3, r1
 80071c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	887a      	ldrh	r2, [r7, #2]
 80071cc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	460b      	mov	r3, r1
 80071e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d101      	bne.n	8007206 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e25b      	b.n	80076be <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	2b00      	cmp	r3, #0
 8007210:	d075      	beq.n	80072fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007212:	4ba3      	ldr	r3, [pc, #652]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f003 030c 	and.w	r3, r3, #12
 800721a:	2b04      	cmp	r3, #4
 800721c:	d00c      	beq.n	8007238 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800721e:	4ba0      	ldr	r3, [pc, #640]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007226:	2b08      	cmp	r3, #8
 8007228:	d112      	bne.n	8007250 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800722a:	4b9d      	ldr	r3, [pc, #628]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007232:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007236:	d10b      	bne.n	8007250 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007238:	4b99      	ldr	r3, [pc, #612]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d05b      	beq.n	80072fc <HAL_RCC_OscConfig+0x108>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d157      	bne.n	80072fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e236      	b.n	80076be <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007258:	d106      	bne.n	8007268 <HAL_RCC_OscConfig+0x74>
 800725a:	4b91      	ldr	r3, [pc, #580]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a90      	ldr	r2, [pc, #576]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 8007260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007264:	6013      	str	r3, [r2, #0]
 8007266:	e01d      	b.n	80072a4 <HAL_RCC_OscConfig+0xb0>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007270:	d10c      	bne.n	800728c <HAL_RCC_OscConfig+0x98>
 8007272:	4b8b      	ldr	r3, [pc, #556]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a8a      	ldr	r2, [pc, #552]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 8007278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800727c:	6013      	str	r3, [r2, #0]
 800727e:	4b88      	ldr	r3, [pc, #544]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a87      	ldr	r2, [pc, #540]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 8007284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007288:	6013      	str	r3, [r2, #0]
 800728a:	e00b      	b.n	80072a4 <HAL_RCC_OscConfig+0xb0>
 800728c:	4b84      	ldr	r3, [pc, #528]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a83      	ldr	r2, [pc, #524]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 8007292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007296:	6013      	str	r3, [r2, #0]
 8007298:	4b81      	ldr	r3, [pc, #516]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a80      	ldr	r2, [pc, #512]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 800729e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d013      	beq.n	80072d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072ac:	f7fa fda2 	bl	8001df4 <HAL_GetTick>
 80072b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072b2:	e008      	b.n	80072c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072b4:	f7fa fd9e 	bl	8001df4 <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	2b64      	cmp	r3, #100	; 0x64
 80072c0:	d901      	bls.n	80072c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e1fb      	b.n	80076be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072c6:	4b76      	ldr	r3, [pc, #472]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d0f0      	beq.n	80072b4 <HAL_RCC_OscConfig+0xc0>
 80072d2:	e014      	b.n	80072fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072d4:	f7fa fd8e 	bl	8001df4 <HAL_GetTick>
 80072d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072da:	e008      	b.n	80072ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072dc:	f7fa fd8a 	bl	8001df4 <HAL_GetTick>
 80072e0:	4602      	mov	r2, r0
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	2b64      	cmp	r3, #100	; 0x64
 80072e8:	d901      	bls.n	80072ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e1e7      	b.n	80076be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072ee:	4b6c      	ldr	r3, [pc, #432]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1f0      	bne.n	80072dc <HAL_RCC_OscConfig+0xe8>
 80072fa:	e000      	b.n	80072fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0302 	and.w	r3, r3, #2
 8007306:	2b00      	cmp	r3, #0
 8007308:	d063      	beq.n	80073d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800730a:	4b65      	ldr	r3, [pc, #404]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	f003 030c 	and.w	r3, r3, #12
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00b      	beq.n	800732e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007316:	4b62      	ldr	r3, [pc, #392]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800731e:	2b08      	cmp	r3, #8
 8007320:	d11c      	bne.n	800735c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007322:	4b5f      	ldr	r3, [pc, #380]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800732a:	2b00      	cmp	r3, #0
 800732c:	d116      	bne.n	800735c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800732e:	4b5c      	ldr	r3, [pc, #368]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0302 	and.w	r3, r3, #2
 8007336:	2b00      	cmp	r3, #0
 8007338:	d005      	beq.n	8007346 <HAL_RCC_OscConfig+0x152>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	2b01      	cmp	r3, #1
 8007340:	d001      	beq.n	8007346 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e1bb      	b.n	80076be <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007346:	4b56      	ldr	r3, [pc, #344]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	00db      	lsls	r3, r3, #3
 8007354:	4952      	ldr	r1, [pc, #328]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 8007356:	4313      	orrs	r3, r2
 8007358:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800735a:	e03a      	b.n	80073d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d020      	beq.n	80073a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007364:	4b4f      	ldr	r3, [pc, #316]	; (80074a4 <HAL_RCC_OscConfig+0x2b0>)
 8007366:	2201      	movs	r2, #1
 8007368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800736a:	f7fa fd43 	bl	8001df4 <HAL_GetTick>
 800736e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007370:	e008      	b.n	8007384 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007372:	f7fa fd3f 	bl	8001df4 <HAL_GetTick>
 8007376:	4602      	mov	r2, r0
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	2b02      	cmp	r3, #2
 800737e:	d901      	bls.n	8007384 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	e19c      	b.n	80076be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007384:	4b46      	ldr	r3, [pc, #280]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0302 	and.w	r3, r3, #2
 800738c:	2b00      	cmp	r3, #0
 800738e:	d0f0      	beq.n	8007372 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007390:	4b43      	ldr	r3, [pc, #268]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	00db      	lsls	r3, r3, #3
 800739e:	4940      	ldr	r1, [pc, #256]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 80073a0:	4313      	orrs	r3, r2
 80073a2:	600b      	str	r3, [r1, #0]
 80073a4:	e015      	b.n	80073d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073a6:	4b3f      	ldr	r3, [pc, #252]	; (80074a4 <HAL_RCC_OscConfig+0x2b0>)
 80073a8:	2200      	movs	r2, #0
 80073aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ac:	f7fa fd22 	bl	8001df4 <HAL_GetTick>
 80073b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073b2:	e008      	b.n	80073c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073b4:	f7fa fd1e 	bl	8001df4 <HAL_GetTick>
 80073b8:	4602      	mov	r2, r0
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d901      	bls.n	80073c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e17b      	b.n	80076be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073c6:	4b36      	ldr	r3, [pc, #216]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0302 	and.w	r3, r3, #2
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1f0      	bne.n	80073b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0308 	and.w	r3, r3, #8
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d030      	beq.n	8007440 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d016      	beq.n	8007414 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073e6:	4b30      	ldr	r3, [pc, #192]	; (80074a8 <HAL_RCC_OscConfig+0x2b4>)
 80073e8:	2201      	movs	r2, #1
 80073ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ec:	f7fa fd02 	bl	8001df4 <HAL_GetTick>
 80073f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073f2:	e008      	b.n	8007406 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073f4:	f7fa fcfe 	bl	8001df4 <HAL_GetTick>
 80073f8:	4602      	mov	r2, r0
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d901      	bls.n	8007406 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e15b      	b.n	80076be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007406:	4b26      	ldr	r3, [pc, #152]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 8007408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800740a:	f003 0302 	and.w	r3, r3, #2
 800740e:	2b00      	cmp	r3, #0
 8007410:	d0f0      	beq.n	80073f4 <HAL_RCC_OscConfig+0x200>
 8007412:	e015      	b.n	8007440 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007414:	4b24      	ldr	r3, [pc, #144]	; (80074a8 <HAL_RCC_OscConfig+0x2b4>)
 8007416:	2200      	movs	r2, #0
 8007418:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800741a:	f7fa fceb 	bl	8001df4 <HAL_GetTick>
 800741e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007420:	e008      	b.n	8007434 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007422:	f7fa fce7 	bl	8001df4 <HAL_GetTick>
 8007426:	4602      	mov	r2, r0
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	2b02      	cmp	r3, #2
 800742e:	d901      	bls.n	8007434 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e144      	b.n	80076be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007434:	4b1a      	ldr	r3, [pc, #104]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 8007436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007438:	f003 0302 	and.w	r3, r3, #2
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1f0      	bne.n	8007422 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 0304 	and.w	r3, r3, #4
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 80a0 	beq.w	800758e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800744e:	2300      	movs	r3, #0
 8007450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007452:	4b13      	ldr	r3, [pc, #76]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 8007454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10f      	bne.n	800747e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800745e:	2300      	movs	r3, #0
 8007460:	60bb      	str	r3, [r7, #8]
 8007462:	4b0f      	ldr	r3, [pc, #60]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 8007464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007466:	4a0e      	ldr	r2, [pc, #56]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 8007468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800746c:	6413      	str	r3, [r2, #64]	; 0x40
 800746e:	4b0c      	ldr	r3, [pc, #48]	; (80074a0 <HAL_RCC_OscConfig+0x2ac>)
 8007470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007476:	60bb      	str	r3, [r7, #8]
 8007478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800747a:	2301      	movs	r3, #1
 800747c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800747e:	4b0b      	ldr	r3, [pc, #44]	; (80074ac <HAL_RCC_OscConfig+0x2b8>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007486:	2b00      	cmp	r3, #0
 8007488:	d121      	bne.n	80074ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800748a:	4b08      	ldr	r3, [pc, #32]	; (80074ac <HAL_RCC_OscConfig+0x2b8>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a07      	ldr	r2, [pc, #28]	; (80074ac <HAL_RCC_OscConfig+0x2b8>)
 8007490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007496:	f7fa fcad 	bl	8001df4 <HAL_GetTick>
 800749a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800749c:	e011      	b.n	80074c2 <HAL_RCC_OscConfig+0x2ce>
 800749e:	bf00      	nop
 80074a0:	40023800 	.word	0x40023800
 80074a4:	42470000 	.word	0x42470000
 80074a8:	42470e80 	.word	0x42470e80
 80074ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074b0:	f7fa fca0 	bl	8001df4 <HAL_GetTick>
 80074b4:	4602      	mov	r2, r0
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d901      	bls.n	80074c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e0fd      	b.n	80076be <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074c2:	4b81      	ldr	r3, [pc, #516]	; (80076c8 <HAL_RCC_OscConfig+0x4d4>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d0f0      	beq.n	80074b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d106      	bne.n	80074e4 <HAL_RCC_OscConfig+0x2f0>
 80074d6:	4b7d      	ldr	r3, [pc, #500]	; (80076cc <HAL_RCC_OscConfig+0x4d8>)
 80074d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074da:	4a7c      	ldr	r2, [pc, #496]	; (80076cc <HAL_RCC_OscConfig+0x4d8>)
 80074dc:	f043 0301 	orr.w	r3, r3, #1
 80074e0:	6713      	str	r3, [r2, #112]	; 0x70
 80074e2:	e01c      	b.n	800751e <HAL_RCC_OscConfig+0x32a>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	2b05      	cmp	r3, #5
 80074ea:	d10c      	bne.n	8007506 <HAL_RCC_OscConfig+0x312>
 80074ec:	4b77      	ldr	r3, [pc, #476]	; (80076cc <HAL_RCC_OscConfig+0x4d8>)
 80074ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f0:	4a76      	ldr	r2, [pc, #472]	; (80076cc <HAL_RCC_OscConfig+0x4d8>)
 80074f2:	f043 0304 	orr.w	r3, r3, #4
 80074f6:	6713      	str	r3, [r2, #112]	; 0x70
 80074f8:	4b74      	ldr	r3, [pc, #464]	; (80076cc <HAL_RCC_OscConfig+0x4d8>)
 80074fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074fc:	4a73      	ldr	r2, [pc, #460]	; (80076cc <HAL_RCC_OscConfig+0x4d8>)
 80074fe:	f043 0301 	orr.w	r3, r3, #1
 8007502:	6713      	str	r3, [r2, #112]	; 0x70
 8007504:	e00b      	b.n	800751e <HAL_RCC_OscConfig+0x32a>
 8007506:	4b71      	ldr	r3, [pc, #452]	; (80076cc <HAL_RCC_OscConfig+0x4d8>)
 8007508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800750a:	4a70      	ldr	r2, [pc, #448]	; (80076cc <HAL_RCC_OscConfig+0x4d8>)
 800750c:	f023 0301 	bic.w	r3, r3, #1
 8007510:	6713      	str	r3, [r2, #112]	; 0x70
 8007512:	4b6e      	ldr	r3, [pc, #440]	; (80076cc <HAL_RCC_OscConfig+0x4d8>)
 8007514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007516:	4a6d      	ldr	r2, [pc, #436]	; (80076cc <HAL_RCC_OscConfig+0x4d8>)
 8007518:	f023 0304 	bic.w	r3, r3, #4
 800751c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d015      	beq.n	8007552 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007526:	f7fa fc65 	bl	8001df4 <HAL_GetTick>
 800752a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800752c:	e00a      	b.n	8007544 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800752e:	f7fa fc61 	bl	8001df4 <HAL_GetTick>
 8007532:	4602      	mov	r2, r0
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	f241 3288 	movw	r2, #5000	; 0x1388
 800753c:	4293      	cmp	r3, r2
 800753e:	d901      	bls.n	8007544 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007540:	2303      	movs	r3, #3
 8007542:	e0bc      	b.n	80076be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007544:	4b61      	ldr	r3, [pc, #388]	; (80076cc <HAL_RCC_OscConfig+0x4d8>)
 8007546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007548:	f003 0302 	and.w	r3, r3, #2
 800754c:	2b00      	cmp	r3, #0
 800754e:	d0ee      	beq.n	800752e <HAL_RCC_OscConfig+0x33a>
 8007550:	e014      	b.n	800757c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007552:	f7fa fc4f 	bl	8001df4 <HAL_GetTick>
 8007556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007558:	e00a      	b.n	8007570 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800755a:	f7fa fc4b 	bl	8001df4 <HAL_GetTick>
 800755e:	4602      	mov	r2, r0
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	f241 3288 	movw	r2, #5000	; 0x1388
 8007568:	4293      	cmp	r3, r2
 800756a:	d901      	bls.n	8007570 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e0a6      	b.n	80076be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007570:	4b56      	ldr	r3, [pc, #344]	; (80076cc <HAL_RCC_OscConfig+0x4d8>)
 8007572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007574:	f003 0302 	and.w	r3, r3, #2
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1ee      	bne.n	800755a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800757c:	7dfb      	ldrb	r3, [r7, #23]
 800757e:	2b01      	cmp	r3, #1
 8007580:	d105      	bne.n	800758e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007582:	4b52      	ldr	r3, [pc, #328]	; (80076cc <HAL_RCC_OscConfig+0x4d8>)
 8007584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007586:	4a51      	ldr	r2, [pc, #324]	; (80076cc <HAL_RCC_OscConfig+0x4d8>)
 8007588:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800758c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	2b00      	cmp	r3, #0
 8007594:	f000 8092 	beq.w	80076bc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007598:	4b4c      	ldr	r3, [pc, #304]	; (80076cc <HAL_RCC_OscConfig+0x4d8>)
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f003 030c 	and.w	r3, r3, #12
 80075a0:	2b08      	cmp	r3, #8
 80075a2:	d05c      	beq.n	800765e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d141      	bne.n	8007630 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075ac:	4b48      	ldr	r3, [pc, #288]	; (80076d0 <HAL_RCC_OscConfig+0x4dc>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075b2:	f7fa fc1f 	bl	8001df4 <HAL_GetTick>
 80075b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075b8:	e008      	b.n	80075cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075ba:	f7fa fc1b 	bl	8001df4 <HAL_GetTick>
 80075be:	4602      	mov	r2, r0
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d901      	bls.n	80075cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e078      	b.n	80076be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075cc:	4b3f      	ldr	r3, [pc, #252]	; (80076cc <HAL_RCC_OscConfig+0x4d8>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1f0      	bne.n	80075ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	69da      	ldr	r2, [r3, #28]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a1b      	ldr	r3, [r3, #32]
 80075e0:	431a      	orrs	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e6:	019b      	lsls	r3, r3, #6
 80075e8:	431a      	orrs	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ee:	085b      	lsrs	r3, r3, #1
 80075f0:	3b01      	subs	r3, #1
 80075f2:	041b      	lsls	r3, r3, #16
 80075f4:	431a      	orrs	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fa:	061b      	lsls	r3, r3, #24
 80075fc:	4933      	ldr	r1, [pc, #204]	; (80076cc <HAL_RCC_OscConfig+0x4d8>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007602:	4b33      	ldr	r3, [pc, #204]	; (80076d0 <HAL_RCC_OscConfig+0x4dc>)
 8007604:	2201      	movs	r2, #1
 8007606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007608:	f7fa fbf4 	bl	8001df4 <HAL_GetTick>
 800760c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800760e:	e008      	b.n	8007622 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007610:	f7fa fbf0 	bl	8001df4 <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	2b02      	cmp	r3, #2
 800761c:	d901      	bls.n	8007622 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e04d      	b.n	80076be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007622:	4b2a      	ldr	r3, [pc, #168]	; (80076cc <HAL_RCC_OscConfig+0x4d8>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d0f0      	beq.n	8007610 <HAL_RCC_OscConfig+0x41c>
 800762e:	e045      	b.n	80076bc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007630:	4b27      	ldr	r3, [pc, #156]	; (80076d0 <HAL_RCC_OscConfig+0x4dc>)
 8007632:	2200      	movs	r2, #0
 8007634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007636:	f7fa fbdd 	bl	8001df4 <HAL_GetTick>
 800763a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800763c:	e008      	b.n	8007650 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800763e:	f7fa fbd9 	bl	8001df4 <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	2b02      	cmp	r3, #2
 800764a:	d901      	bls.n	8007650 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e036      	b.n	80076be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007650:	4b1e      	ldr	r3, [pc, #120]	; (80076cc <HAL_RCC_OscConfig+0x4d8>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1f0      	bne.n	800763e <HAL_RCC_OscConfig+0x44a>
 800765c:	e02e      	b.n	80076bc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d101      	bne.n	800766a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e029      	b.n	80076be <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800766a:	4b18      	ldr	r3, [pc, #96]	; (80076cc <HAL_RCC_OscConfig+0x4d8>)
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	69db      	ldr	r3, [r3, #28]
 800767a:	429a      	cmp	r2, r3
 800767c:	d11c      	bne.n	80076b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007688:	429a      	cmp	r2, r3
 800768a:	d115      	bne.n	80076b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007692:	4013      	ands	r3, r2
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007698:	4293      	cmp	r3, r2
 800769a:	d10d      	bne.n	80076b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d106      	bne.n	80076b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d001      	beq.n	80076bc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e000      	b.n	80076be <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3718      	adds	r7, #24
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	40007000 	.word	0x40007000
 80076cc:	40023800 	.word	0x40023800
 80076d0:	42470060 	.word	0x42470060

080076d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d101      	bne.n	80076e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	e0cc      	b.n	8007882 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80076e8:	4b68      	ldr	r3, [pc, #416]	; (800788c <HAL_RCC_ClockConfig+0x1b8>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 030f 	and.w	r3, r3, #15
 80076f0:	683a      	ldr	r2, [r7, #0]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d90c      	bls.n	8007710 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076f6:	4b65      	ldr	r3, [pc, #404]	; (800788c <HAL_RCC_ClockConfig+0x1b8>)
 80076f8:	683a      	ldr	r2, [r7, #0]
 80076fa:	b2d2      	uxtb	r2, r2
 80076fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076fe:	4b63      	ldr	r3, [pc, #396]	; (800788c <HAL_RCC_ClockConfig+0x1b8>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 030f 	and.w	r3, r3, #15
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	429a      	cmp	r2, r3
 800770a:	d001      	beq.n	8007710 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	e0b8      	b.n	8007882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 0302 	and.w	r3, r3, #2
 8007718:	2b00      	cmp	r3, #0
 800771a:	d020      	beq.n	800775e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 0304 	and.w	r3, r3, #4
 8007724:	2b00      	cmp	r3, #0
 8007726:	d005      	beq.n	8007734 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007728:	4b59      	ldr	r3, [pc, #356]	; (8007890 <HAL_RCC_ClockConfig+0x1bc>)
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	4a58      	ldr	r2, [pc, #352]	; (8007890 <HAL_RCC_ClockConfig+0x1bc>)
 800772e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007732:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0308 	and.w	r3, r3, #8
 800773c:	2b00      	cmp	r3, #0
 800773e:	d005      	beq.n	800774c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007740:	4b53      	ldr	r3, [pc, #332]	; (8007890 <HAL_RCC_ClockConfig+0x1bc>)
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	4a52      	ldr	r2, [pc, #328]	; (8007890 <HAL_RCC_ClockConfig+0x1bc>)
 8007746:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800774a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800774c:	4b50      	ldr	r3, [pc, #320]	; (8007890 <HAL_RCC_ClockConfig+0x1bc>)
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	494d      	ldr	r1, [pc, #308]	; (8007890 <HAL_RCC_ClockConfig+0x1bc>)
 800775a:	4313      	orrs	r3, r2
 800775c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 0301 	and.w	r3, r3, #1
 8007766:	2b00      	cmp	r3, #0
 8007768:	d044      	beq.n	80077f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d107      	bne.n	8007782 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007772:	4b47      	ldr	r3, [pc, #284]	; (8007890 <HAL_RCC_ClockConfig+0x1bc>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800777a:	2b00      	cmp	r3, #0
 800777c:	d119      	bne.n	80077b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e07f      	b.n	8007882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	2b02      	cmp	r3, #2
 8007788:	d003      	beq.n	8007792 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800778e:	2b03      	cmp	r3, #3
 8007790:	d107      	bne.n	80077a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007792:	4b3f      	ldr	r3, [pc, #252]	; (8007890 <HAL_RCC_ClockConfig+0x1bc>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d109      	bne.n	80077b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e06f      	b.n	8007882 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077a2:	4b3b      	ldr	r3, [pc, #236]	; (8007890 <HAL_RCC_ClockConfig+0x1bc>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d101      	bne.n	80077b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e067      	b.n	8007882 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80077b2:	4b37      	ldr	r3, [pc, #220]	; (8007890 <HAL_RCC_ClockConfig+0x1bc>)
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f023 0203 	bic.w	r2, r3, #3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	4934      	ldr	r1, [pc, #208]	; (8007890 <HAL_RCC_ClockConfig+0x1bc>)
 80077c0:	4313      	orrs	r3, r2
 80077c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80077c4:	f7fa fb16 	bl	8001df4 <HAL_GetTick>
 80077c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077ca:	e00a      	b.n	80077e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077cc:	f7fa fb12 	bl	8001df4 <HAL_GetTick>
 80077d0:	4602      	mov	r2, r0
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80077da:	4293      	cmp	r3, r2
 80077dc:	d901      	bls.n	80077e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e04f      	b.n	8007882 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077e2:	4b2b      	ldr	r3, [pc, #172]	; (8007890 <HAL_RCC_ClockConfig+0x1bc>)
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f003 020c 	and.w	r2, r3, #12
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d1eb      	bne.n	80077cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80077f4:	4b25      	ldr	r3, [pc, #148]	; (800788c <HAL_RCC_ClockConfig+0x1b8>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 030f 	and.w	r3, r3, #15
 80077fc:	683a      	ldr	r2, [r7, #0]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d20c      	bcs.n	800781c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007802:	4b22      	ldr	r3, [pc, #136]	; (800788c <HAL_RCC_ClockConfig+0x1b8>)
 8007804:	683a      	ldr	r2, [r7, #0]
 8007806:	b2d2      	uxtb	r2, r2
 8007808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800780a:	4b20      	ldr	r3, [pc, #128]	; (800788c <HAL_RCC_ClockConfig+0x1b8>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 030f 	and.w	r3, r3, #15
 8007812:	683a      	ldr	r2, [r7, #0]
 8007814:	429a      	cmp	r2, r3
 8007816:	d001      	beq.n	800781c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e032      	b.n	8007882 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0304 	and.w	r3, r3, #4
 8007824:	2b00      	cmp	r3, #0
 8007826:	d008      	beq.n	800783a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007828:	4b19      	ldr	r3, [pc, #100]	; (8007890 <HAL_RCC_ClockConfig+0x1bc>)
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	4916      	ldr	r1, [pc, #88]	; (8007890 <HAL_RCC_ClockConfig+0x1bc>)
 8007836:	4313      	orrs	r3, r2
 8007838:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 0308 	and.w	r3, r3, #8
 8007842:	2b00      	cmp	r3, #0
 8007844:	d009      	beq.n	800785a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007846:	4b12      	ldr	r3, [pc, #72]	; (8007890 <HAL_RCC_ClockConfig+0x1bc>)
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	00db      	lsls	r3, r3, #3
 8007854:	490e      	ldr	r1, [pc, #56]	; (8007890 <HAL_RCC_ClockConfig+0x1bc>)
 8007856:	4313      	orrs	r3, r2
 8007858:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800785a:	f000 f821 	bl	80078a0 <HAL_RCC_GetSysClockFreq>
 800785e:	4601      	mov	r1, r0
 8007860:	4b0b      	ldr	r3, [pc, #44]	; (8007890 <HAL_RCC_ClockConfig+0x1bc>)
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	091b      	lsrs	r3, r3, #4
 8007866:	f003 030f 	and.w	r3, r3, #15
 800786a:	4a0a      	ldr	r2, [pc, #40]	; (8007894 <HAL_RCC_ClockConfig+0x1c0>)
 800786c:	5cd3      	ldrb	r3, [r2, r3]
 800786e:	fa21 f303 	lsr.w	r3, r1, r3
 8007872:	4a09      	ldr	r2, [pc, #36]	; (8007898 <HAL_RCC_ClockConfig+0x1c4>)
 8007874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007876:	4b09      	ldr	r3, [pc, #36]	; (800789c <HAL_RCC_ClockConfig+0x1c8>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4618      	mov	r0, r3
 800787c:	f7fa f940 	bl	8001b00 <HAL_InitTick>

  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	40023c00 	.word	0x40023c00
 8007890:	40023800 	.word	0x40023800
 8007894:	08019f2c 	.word	0x08019f2c
 8007898:	20000000 	.word	0x20000000
 800789c:	20000004 	.word	0x20000004

080078a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80078a6:	2300      	movs	r3, #0
 80078a8:	607b      	str	r3, [r7, #4]
 80078aa:	2300      	movs	r3, #0
 80078ac:	60fb      	str	r3, [r7, #12]
 80078ae:	2300      	movs	r3, #0
 80078b0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80078b2:	2300      	movs	r3, #0
 80078b4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80078b6:	4b63      	ldr	r3, [pc, #396]	; (8007a44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f003 030c 	and.w	r3, r3, #12
 80078be:	2b04      	cmp	r3, #4
 80078c0:	d007      	beq.n	80078d2 <HAL_RCC_GetSysClockFreq+0x32>
 80078c2:	2b08      	cmp	r3, #8
 80078c4:	d008      	beq.n	80078d8 <HAL_RCC_GetSysClockFreq+0x38>
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f040 80b4 	bne.w	8007a34 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80078cc:	4b5e      	ldr	r3, [pc, #376]	; (8007a48 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80078ce:	60bb      	str	r3, [r7, #8]
       break;
 80078d0:	e0b3      	b.n	8007a3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80078d2:	4b5e      	ldr	r3, [pc, #376]	; (8007a4c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80078d4:	60bb      	str	r3, [r7, #8]
      break;
 80078d6:	e0b0      	b.n	8007a3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80078d8:	4b5a      	ldr	r3, [pc, #360]	; (8007a44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80078e2:	4b58      	ldr	r3, [pc, #352]	; (8007a44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d04a      	beq.n	8007984 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078ee:	4b55      	ldr	r3, [pc, #340]	; (8007a44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	099b      	lsrs	r3, r3, #6
 80078f4:	f04f 0400 	mov.w	r4, #0
 80078f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80078fc:	f04f 0200 	mov.w	r2, #0
 8007900:	ea03 0501 	and.w	r5, r3, r1
 8007904:	ea04 0602 	and.w	r6, r4, r2
 8007908:	4629      	mov	r1, r5
 800790a:	4632      	mov	r2, r6
 800790c:	f04f 0300 	mov.w	r3, #0
 8007910:	f04f 0400 	mov.w	r4, #0
 8007914:	0154      	lsls	r4, r2, #5
 8007916:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800791a:	014b      	lsls	r3, r1, #5
 800791c:	4619      	mov	r1, r3
 800791e:	4622      	mov	r2, r4
 8007920:	1b49      	subs	r1, r1, r5
 8007922:	eb62 0206 	sbc.w	r2, r2, r6
 8007926:	f04f 0300 	mov.w	r3, #0
 800792a:	f04f 0400 	mov.w	r4, #0
 800792e:	0194      	lsls	r4, r2, #6
 8007930:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007934:	018b      	lsls	r3, r1, #6
 8007936:	1a5b      	subs	r3, r3, r1
 8007938:	eb64 0402 	sbc.w	r4, r4, r2
 800793c:	f04f 0100 	mov.w	r1, #0
 8007940:	f04f 0200 	mov.w	r2, #0
 8007944:	00e2      	lsls	r2, r4, #3
 8007946:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800794a:	00d9      	lsls	r1, r3, #3
 800794c:	460b      	mov	r3, r1
 800794e:	4614      	mov	r4, r2
 8007950:	195b      	adds	r3, r3, r5
 8007952:	eb44 0406 	adc.w	r4, r4, r6
 8007956:	f04f 0100 	mov.w	r1, #0
 800795a:	f04f 0200 	mov.w	r2, #0
 800795e:	0262      	lsls	r2, r4, #9
 8007960:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007964:	0259      	lsls	r1, r3, #9
 8007966:	460b      	mov	r3, r1
 8007968:	4614      	mov	r4, r2
 800796a:	4618      	mov	r0, r3
 800796c:	4621      	mov	r1, r4
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f04f 0400 	mov.w	r4, #0
 8007974:	461a      	mov	r2, r3
 8007976:	4623      	mov	r3, r4
 8007978:	f7f8 fc3c 	bl	80001f4 <__aeabi_uldivmod>
 800797c:	4603      	mov	r3, r0
 800797e:	460c      	mov	r4, r1
 8007980:	60fb      	str	r3, [r7, #12]
 8007982:	e049      	b.n	8007a18 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007984:	4b2f      	ldr	r3, [pc, #188]	; (8007a44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	099b      	lsrs	r3, r3, #6
 800798a:	f04f 0400 	mov.w	r4, #0
 800798e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007992:	f04f 0200 	mov.w	r2, #0
 8007996:	ea03 0501 	and.w	r5, r3, r1
 800799a:	ea04 0602 	and.w	r6, r4, r2
 800799e:	4629      	mov	r1, r5
 80079a0:	4632      	mov	r2, r6
 80079a2:	f04f 0300 	mov.w	r3, #0
 80079a6:	f04f 0400 	mov.w	r4, #0
 80079aa:	0154      	lsls	r4, r2, #5
 80079ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80079b0:	014b      	lsls	r3, r1, #5
 80079b2:	4619      	mov	r1, r3
 80079b4:	4622      	mov	r2, r4
 80079b6:	1b49      	subs	r1, r1, r5
 80079b8:	eb62 0206 	sbc.w	r2, r2, r6
 80079bc:	f04f 0300 	mov.w	r3, #0
 80079c0:	f04f 0400 	mov.w	r4, #0
 80079c4:	0194      	lsls	r4, r2, #6
 80079c6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80079ca:	018b      	lsls	r3, r1, #6
 80079cc:	1a5b      	subs	r3, r3, r1
 80079ce:	eb64 0402 	sbc.w	r4, r4, r2
 80079d2:	f04f 0100 	mov.w	r1, #0
 80079d6:	f04f 0200 	mov.w	r2, #0
 80079da:	00e2      	lsls	r2, r4, #3
 80079dc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80079e0:	00d9      	lsls	r1, r3, #3
 80079e2:	460b      	mov	r3, r1
 80079e4:	4614      	mov	r4, r2
 80079e6:	195b      	adds	r3, r3, r5
 80079e8:	eb44 0406 	adc.w	r4, r4, r6
 80079ec:	f04f 0100 	mov.w	r1, #0
 80079f0:	f04f 0200 	mov.w	r2, #0
 80079f4:	02a2      	lsls	r2, r4, #10
 80079f6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80079fa:	0299      	lsls	r1, r3, #10
 80079fc:	460b      	mov	r3, r1
 80079fe:	4614      	mov	r4, r2
 8007a00:	4618      	mov	r0, r3
 8007a02:	4621      	mov	r1, r4
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f04f 0400 	mov.w	r4, #0
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	4623      	mov	r3, r4
 8007a0e:	f7f8 fbf1 	bl	80001f4 <__aeabi_uldivmod>
 8007a12:	4603      	mov	r3, r0
 8007a14:	460c      	mov	r4, r1
 8007a16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007a18:	4b0a      	ldr	r3, [pc, #40]	; (8007a44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	0c1b      	lsrs	r3, r3, #16
 8007a1e:	f003 0303 	and.w	r3, r3, #3
 8007a22:	3301      	adds	r3, #1
 8007a24:	005b      	lsls	r3, r3, #1
 8007a26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a30:	60bb      	str	r3, [r7, #8]
      break;
 8007a32:	e002      	b.n	8007a3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a34:	4b04      	ldr	r3, [pc, #16]	; (8007a48 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007a36:	60bb      	str	r3, [r7, #8]
      break;
 8007a38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a3a:	68bb      	ldr	r3, [r7, #8]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3714      	adds	r7, #20
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a44:	40023800 	.word	0x40023800
 8007a48:	00f42400 	.word	0x00f42400
 8007a4c:	007a1200 	.word	0x007a1200

08007a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a50:	b480      	push	{r7}
 8007a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a54:	4b03      	ldr	r3, [pc, #12]	; (8007a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a56:	681b      	ldr	r3, [r3, #0]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	20000000 	.word	0x20000000

08007a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007a6c:	f7ff fff0 	bl	8007a50 <HAL_RCC_GetHCLKFreq>
 8007a70:	4601      	mov	r1, r0
 8007a72:	4b05      	ldr	r3, [pc, #20]	; (8007a88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	0a9b      	lsrs	r3, r3, #10
 8007a78:	f003 0307 	and.w	r3, r3, #7
 8007a7c:	4a03      	ldr	r2, [pc, #12]	; (8007a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a7e:	5cd3      	ldrb	r3, [r2, r3]
 8007a80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	40023800 	.word	0x40023800
 8007a8c:	08019f3c 	.word	0x08019f3c

08007a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007a94:	f7ff ffdc 	bl	8007a50 <HAL_RCC_GetHCLKFreq>
 8007a98:	4601      	mov	r1, r0
 8007a9a:	4b05      	ldr	r3, [pc, #20]	; (8007ab0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	0b5b      	lsrs	r3, r3, #13
 8007aa0:	f003 0307 	and.w	r3, r3, #7
 8007aa4:	4a03      	ldr	r2, [pc, #12]	; (8007ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007aa6:	5cd3      	ldrb	r3, [r2, r3]
 8007aa8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	40023800 	.word	0x40023800
 8007ab4:	08019f3c 	.word	0x08019f3c

08007ab8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	220f      	movs	r2, #15
 8007ac6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007ac8:	4b12      	ldr	r3, [pc, #72]	; (8007b14 <HAL_RCC_GetClockConfig+0x5c>)
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	f003 0203 	and.w	r2, r3, #3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007ad4:	4b0f      	ldr	r3, [pc, #60]	; (8007b14 <HAL_RCC_GetClockConfig+0x5c>)
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007ae0:	4b0c      	ldr	r3, [pc, #48]	; (8007b14 <HAL_RCC_GetClockConfig+0x5c>)
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007aec:	4b09      	ldr	r3, [pc, #36]	; (8007b14 <HAL_RCC_GetClockConfig+0x5c>)
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	08db      	lsrs	r3, r3, #3
 8007af2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007afa:	4b07      	ldr	r3, [pc, #28]	; (8007b18 <HAL_RCC_GetClockConfig+0x60>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f003 020f 	and.w	r2, r3, #15
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	601a      	str	r2, [r3, #0]
}
 8007b06:	bf00      	nop
 8007b08:	370c      	adds	r7, #12
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	40023800 	.word	0x40023800
 8007b18:	40023c00 	.word	0x40023c00

08007b1c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b24:	2300      	movs	r3, #0
 8007b26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d105      	bne.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d035      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007b44:	4b62      	ldr	r3, [pc, #392]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007b46:	2200      	movs	r2, #0
 8007b48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b4a:	f7fa f953 	bl	8001df4 <HAL_GetTick>
 8007b4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b50:	e008      	b.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007b52:	f7fa f94f 	bl	8001df4 <HAL_GetTick>
 8007b56:	4602      	mov	r2, r0
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d901      	bls.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e0b0      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b64:	4b5b      	ldr	r3, [pc, #364]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1f0      	bne.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	019a      	lsls	r2, r3, #6
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	071b      	lsls	r3, r3, #28
 8007b7c:	4955      	ldr	r1, [pc, #340]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007b84:	4b52      	ldr	r3, [pc, #328]	; (8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007b86:	2201      	movs	r2, #1
 8007b88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b8a:	f7fa f933 	bl	8001df4 <HAL_GetTick>
 8007b8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b90:	e008      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007b92:	f7fa f92f 	bl	8001df4 <HAL_GetTick>
 8007b96:	4602      	mov	r2, r0
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d901      	bls.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e090      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ba4:	4b4b      	ldr	r3, [pc, #300]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d0f0      	beq.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 0302 	and.w	r3, r3, #2
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f000 8083 	beq.w	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	60fb      	str	r3, [r7, #12]
 8007bc2:	4b44      	ldr	r3, [pc, #272]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc6:	4a43      	ldr	r2, [pc, #268]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8007bce:	4b41      	ldr	r3, [pc, #260]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bd6:	60fb      	str	r3, [r7, #12]
 8007bd8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007bda:	4b3f      	ldr	r3, [pc, #252]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a3e      	ldr	r2, [pc, #248]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007be4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007be6:	f7fa f905 	bl	8001df4 <HAL_GetTick>
 8007bea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007bec:	e008      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007bee:	f7fa f901 	bl	8001df4 <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d901      	bls.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	e062      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007c00:	4b35      	ldr	r3, [pc, #212]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d0f0      	beq.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c0c:	4b31      	ldr	r3, [pc, #196]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c14:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d02f      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d028      	beq.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c2a:	4b2a      	ldr	r3, [pc, #168]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c32:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c34:	4b29      	ldr	r3, [pc, #164]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007c36:	2201      	movs	r2, #1
 8007c38:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c3a:	4b28      	ldr	r3, [pc, #160]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007c40:	4a24      	ldr	r2, [pc, #144]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007c46:	4b23      	ldr	r3, [pc, #140]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c4a:	f003 0301 	and.w	r3, r3, #1
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d114      	bne.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007c52:	f7fa f8cf 	bl	8001df4 <HAL_GetTick>
 8007c56:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c58:	e00a      	b.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c5a:	f7fa f8cb 	bl	8001df4 <HAL_GetTick>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d901      	bls.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e02a      	b.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c70:	4b18      	ldr	r3, [pc, #96]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c74:	f003 0302 	and.w	r3, r3, #2
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d0ee      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c88:	d10d      	bne.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007c8a:	4b12      	ldr	r3, [pc, #72]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c9e:	490d      	ldr	r1, [pc, #52]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	608b      	str	r3, [r1, #8]
 8007ca4:	e005      	b.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007ca6:	4b0b      	ldr	r3, [pc, #44]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	4a0a      	ldr	r2, [pc, #40]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007cac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007cb0:	6093      	str	r3, [r2, #8]
 8007cb2:	4b08      	ldr	r3, [pc, #32]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007cb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cbe:	4905      	ldr	r1, [pc, #20]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3718      	adds	r7, #24
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	42470068 	.word	0x42470068
 8007cd4:	40023800 	.word	0x40023800
 8007cd8:	40007000 	.word	0x40007000
 8007cdc:	42470e40 	.word	0x42470e40

08007ce0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d101      	bne.n	8007cf2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e083      	b.n	8007dfa <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	7f5b      	ldrb	r3, [r3, #29]
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d105      	bne.n	8007d08 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f7f9 fd00 	bl	8001708 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2202      	movs	r2, #2
 8007d0c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	22ca      	movs	r2, #202	; 0xca
 8007d14:	625a      	str	r2, [r3, #36]	; 0x24
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2253      	movs	r2, #83	; 0x53
 8007d1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f897 	bl	8007e52 <RTC_EnterInitMode>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d008      	beq.n	8007d3c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	22ff      	movs	r2, #255	; 0xff
 8007d30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2204      	movs	r2, #4
 8007d36:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e05e      	b.n	8007dfa <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	6812      	ldr	r2, [r2, #0]
 8007d46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d4e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	6899      	ldr	r1, [r3, #8]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	685a      	ldr	r2, [r3, #4]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	431a      	orrs	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	695b      	ldr	r3, [r3, #20]
 8007d64:	431a      	orrs	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	430a      	orrs	r2, r1
 8007d6c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	68d2      	ldr	r2, [r2, #12]
 8007d76:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6919      	ldr	r1, [r3, #16]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	041a      	lsls	r2, r3, #16
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	430a      	orrs	r2, r1
 8007d8a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68da      	ldr	r2, [r3, #12]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d9a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	f003 0320 	and.w	r3, r3, #32
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d10e      	bne.n	8007dc8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f829 	bl	8007e02 <HAL_RTC_WaitForSynchro>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d008      	beq.n	8007dc8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	22ff      	movs	r2, #255	; 0xff
 8007dbc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2204      	movs	r2, #4
 8007dc2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e018      	b.n	8007dfa <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007dd6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	699a      	ldr	r2, [r3, #24]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	430a      	orrs	r2, r1
 8007de8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	22ff      	movs	r2, #255	; 0xff
 8007df0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007df8:	2300      	movs	r3, #0
  }
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b084      	sub	sp, #16
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68da      	ldr	r2, [r3, #12]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007e1c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e1e:	f7f9 ffe9 	bl	8001df4 <HAL_GetTick>
 8007e22:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007e24:	e009      	b.n	8007e3a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007e26:	f7f9 ffe5 	bl	8001df4 <HAL_GetTick>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e34:	d901      	bls.n	8007e3a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007e36:	2303      	movs	r3, #3
 8007e38:	e007      	b.n	8007e4a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	f003 0320 	and.w	r3, r3, #32
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d0ee      	beq.n	8007e26 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b084      	sub	sp, #16
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d119      	bne.n	8007ea0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e74:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007e76:	f7f9 ffbd 	bl	8001df4 <HAL_GetTick>
 8007e7a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e7c:	e009      	b.n	8007e92 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007e7e:	f7f9 ffb9 	bl	8001df4 <HAL_GetTick>
 8007e82:	4602      	mov	r2, r0
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e8c:	d901      	bls.n	8007e92 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e007      	b.n	8007ea2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d0ee      	beq.n	8007e7e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b082      	sub	sp, #8
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d101      	bne.n	8007ebc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e01d      	b.n	8007ef8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d106      	bne.n	8007ed6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f7f9 fc2f 	bl	8001734 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2202      	movs	r2, #2
 8007eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	3304      	adds	r3, #4
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	4610      	mov	r0, r2
 8007eea:	f000 fcd7 	bl	800889c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3708      	adds	r7, #8
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	f003 0307 	and.w	r3, r3, #7
 8007f1a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2b06      	cmp	r3, #6
 8007f20:	d007      	beq.n	8007f32 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f042 0201 	orr.w	r2, r2, #1
 8007f30:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68da      	ldr	r2, [r3, #12]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f042 0201 	orr.w	r2, r2, #1
 8007f5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f003 0307 	and.w	r3, r3, #7
 8007f6a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2b06      	cmp	r3, #6
 8007f70:	d007      	beq.n	8007f82 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f042 0201 	orr.w	r2, r2, #1
 8007f80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3714      	adds	r7, #20
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d101      	bne.n	8007fa2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e01d      	b.n	8007fde <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d106      	bne.n	8007fbc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f815 	bl	8007fe6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	3304      	adds	r3, #4
 8007fcc:	4619      	mov	r1, r3
 8007fce:	4610      	mov	r0, r2
 8007fd0:	f000 fc64 	bl	800889c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b083      	sub	sp, #12
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007fee:	bf00      	nop
 8007ff0:	370c      	adds	r7, #12
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
	...

08007ffc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2201      	movs	r2, #1
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	4618      	mov	r0, r3
 8008010:	f000 ffb4 	bl	8008f7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a15      	ldr	r2, [pc, #84]	; (8008070 <HAL_TIM_PWM_Start+0x74>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d004      	beq.n	8008028 <HAL_TIM_PWM_Start+0x2c>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a14      	ldr	r2, [pc, #80]	; (8008074 <HAL_TIM_PWM_Start+0x78>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d101      	bne.n	800802c <HAL_TIM_PWM_Start+0x30>
 8008028:	2301      	movs	r3, #1
 800802a:	e000      	b.n	800802e <HAL_TIM_PWM_Start+0x32>
 800802c:	2300      	movs	r3, #0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d007      	beq.n	8008042 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008040:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	f003 0307 	and.w	r3, r3, #7
 800804c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2b06      	cmp	r3, #6
 8008052:	d007      	beq.n	8008064 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f042 0201 	orr.w	r2, r2, #1
 8008062:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	40010000 	.word	0x40010000
 8008074:	40010400 	.word	0x40010400

08008078 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2200      	movs	r2, #0
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	4618      	mov	r0, r3
 800808c:	f000 ff76 	bl	8008f7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a22      	ldr	r2, [pc, #136]	; (8008120 <HAL_TIM_PWM_Stop+0xa8>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d004      	beq.n	80080a4 <HAL_TIM_PWM_Stop+0x2c>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a21      	ldr	r2, [pc, #132]	; (8008124 <HAL_TIM_PWM_Stop+0xac>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d101      	bne.n	80080a8 <HAL_TIM_PWM_Stop+0x30>
 80080a4:	2301      	movs	r3, #1
 80080a6:	e000      	b.n	80080aa <HAL_TIM_PWM_Stop+0x32>
 80080a8:	2300      	movs	r3, #0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d017      	beq.n	80080de <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	6a1a      	ldr	r2, [r3, #32]
 80080b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80080b8:	4013      	ands	r3, r2
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10f      	bne.n	80080de <HAL_TIM_PWM_Stop+0x66>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	6a1a      	ldr	r2, [r3, #32]
 80080c4:	f240 4344 	movw	r3, #1092	; 0x444
 80080c8:	4013      	ands	r3, r2
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d107      	bne.n	80080de <HAL_TIM_PWM_Stop+0x66>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	6a1a      	ldr	r2, [r3, #32]
 80080e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80080e8:	4013      	ands	r3, r2
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d10f      	bne.n	800810e <HAL_TIM_PWM_Stop+0x96>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	6a1a      	ldr	r2, [r3, #32]
 80080f4:	f240 4344 	movw	r3, #1092	; 0x444
 80080f8:	4013      	ands	r3, r2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d107      	bne.n	800810e <HAL_TIM_PWM_Stop+0x96>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f022 0201 	bic.w	r2, r2, #1
 800810c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	40010000 	.word	0x40010000
 8008124:	40010400 	.word	0x40010400

08008128 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d101      	bne.n	800813c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	e083      	b.n	8008244 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008142:	b2db      	uxtb	r3, r3
 8008144:	2b00      	cmp	r3, #0
 8008146:	d106      	bne.n	8008156 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f7f9 fb6d 	bl	8001830 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2202      	movs	r2, #2
 800815a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	6812      	ldr	r2, [r2, #0]
 8008168:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800816c:	f023 0307 	bic.w	r3, r3, #7
 8008170:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	3304      	adds	r3, #4
 800817a:	4619      	mov	r1, r3
 800817c:	4610      	mov	r0, r2
 800817e:	f000 fb8d 	bl	800889c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	699b      	ldr	r3, [r3, #24]
 8008190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	6a1b      	ldr	r3, [r3, #32]
 8008198:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	697a      	ldr	r2, [r7, #20]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081aa:	f023 0303 	bic.w	r3, r3, #3
 80081ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	689a      	ldr	r2, [r3, #8]
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	021b      	lsls	r3, r3, #8
 80081ba:	4313      	orrs	r3, r2
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	4313      	orrs	r3, r2
 80081c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80081c8:	f023 030c 	bic.w	r3, r3, #12
 80081cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	68da      	ldr	r2, [r3, #12]
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	69db      	ldr	r3, [r3, #28]
 80081e2:	021b      	lsls	r3, r3, #8
 80081e4:	4313      	orrs	r3, r2
 80081e6:	693a      	ldr	r2, [r7, #16]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	011a      	lsls	r2, r3, #4
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	6a1b      	ldr	r3, [r3, #32]
 80081f6:	031b      	lsls	r3, r3, #12
 80081f8:	4313      	orrs	r3, r2
 80081fa:	693a      	ldr	r2, [r7, #16]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008206:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800820e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	685a      	ldr	r2, [r3, #4]
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	695b      	ldr	r3, [r3, #20]
 8008218:	011b      	lsls	r3, r3, #4
 800821a:	4313      	orrs	r3, r2
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	4313      	orrs	r3, r2
 8008220:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	697a      	ldr	r2, [r7, #20]
 8008228:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3718      	adds	r7, #24
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d002      	beq.n	8008262 <HAL_TIM_Encoder_Start+0x16>
 800825c:	2b04      	cmp	r3, #4
 800825e:	d008      	beq.n	8008272 <HAL_TIM_Encoder_Start+0x26>
 8008260:	e00f      	b.n	8008282 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2201      	movs	r2, #1
 8008268:	2100      	movs	r1, #0
 800826a:	4618      	mov	r0, r3
 800826c:	f000 fe86 	bl	8008f7c <TIM_CCxChannelCmd>
      break;
 8008270:	e016      	b.n	80082a0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2201      	movs	r2, #1
 8008278:	2104      	movs	r1, #4
 800827a:	4618      	mov	r0, r3
 800827c:	f000 fe7e 	bl	8008f7c <TIM_CCxChannelCmd>
      break;
 8008280:	e00e      	b.n	80082a0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2201      	movs	r2, #1
 8008288:	2100      	movs	r1, #0
 800828a:	4618      	mov	r0, r3
 800828c:	f000 fe76 	bl	8008f7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2201      	movs	r2, #1
 8008296:	2104      	movs	r1, #4
 8008298:	4618      	mov	r0, r3
 800829a:	f000 fe6f 	bl	8008f7c <TIM_CCxChannelCmd>
      break;
 800829e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f042 0201 	orr.w	r2, r2, #1
 80082ae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b082      	sub	sp, #8
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	f003 0302 	and.w	r3, r3, #2
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d122      	bne.n	8008316 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	f003 0302 	and.w	r3, r3, #2
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d11b      	bne.n	8008316 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f06f 0202 	mvn.w	r2, #2
 80082e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	699b      	ldr	r3, [r3, #24]
 80082f4:	f003 0303 	and.w	r3, r3, #3
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d003      	beq.n	8008304 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 faae 	bl	800885e <HAL_TIM_IC_CaptureCallback>
 8008302:	e005      	b.n	8008310 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 faa0 	bl	800884a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fab1 	bl	8008872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	f003 0304 	and.w	r3, r3, #4
 8008320:	2b04      	cmp	r3, #4
 8008322:	d122      	bne.n	800836a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	f003 0304 	and.w	r3, r3, #4
 800832e:	2b04      	cmp	r3, #4
 8008330:	d11b      	bne.n	800836a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f06f 0204 	mvn.w	r2, #4
 800833a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2202      	movs	r2, #2
 8008340:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800834c:	2b00      	cmp	r3, #0
 800834e:	d003      	beq.n	8008358 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 fa84 	bl	800885e <HAL_TIM_IC_CaptureCallback>
 8008356:	e005      	b.n	8008364 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 fa76 	bl	800884a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fa87 	bl	8008872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	f003 0308 	and.w	r3, r3, #8
 8008374:	2b08      	cmp	r3, #8
 8008376:	d122      	bne.n	80083be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	f003 0308 	and.w	r3, r3, #8
 8008382:	2b08      	cmp	r3, #8
 8008384:	d11b      	bne.n	80083be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f06f 0208 	mvn.w	r2, #8
 800838e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2204      	movs	r2, #4
 8008394:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	69db      	ldr	r3, [r3, #28]
 800839c:	f003 0303 	and.w	r3, r3, #3
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d003      	beq.n	80083ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fa5a 	bl	800885e <HAL_TIM_IC_CaptureCallback>
 80083aa:	e005      	b.n	80083b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fa4c 	bl	800884a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fa5d 	bl	8008872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	f003 0310 	and.w	r3, r3, #16
 80083c8:	2b10      	cmp	r3, #16
 80083ca:	d122      	bne.n	8008412 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	f003 0310 	and.w	r3, r3, #16
 80083d6:	2b10      	cmp	r3, #16
 80083d8:	d11b      	bne.n	8008412 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f06f 0210 	mvn.w	r2, #16
 80083e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2208      	movs	r2, #8
 80083e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	69db      	ldr	r3, [r3, #28]
 80083f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d003      	beq.n	8008400 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 fa30 	bl	800885e <HAL_TIM_IC_CaptureCallback>
 80083fe:	e005      	b.n	800840c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fa22 	bl	800884a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fa33 	bl	8008872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	691b      	ldr	r3, [r3, #16]
 8008418:	f003 0301 	and.w	r3, r3, #1
 800841c:	2b01      	cmp	r3, #1
 800841e:	d10e      	bne.n	800843e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	2b01      	cmp	r3, #1
 800842c:	d107      	bne.n	800843e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f06f 0201 	mvn.w	r2, #1
 8008436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f7f8 ff55 	bl	80012e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008448:	2b80      	cmp	r3, #128	; 0x80
 800844a:	d10e      	bne.n	800846a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008456:	2b80      	cmp	r3, #128	; 0x80
 8008458:	d107      	bne.n	800846a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fe87 	bl	8009178 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008474:	2b40      	cmp	r3, #64	; 0x40
 8008476:	d10e      	bne.n	8008496 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008482:	2b40      	cmp	r3, #64	; 0x40
 8008484:	d107      	bne.n	8008496 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800848e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f9f8 	bl	8008886 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	f003 0320 	and.w	r3, r3, #32
 80084a0:	2b20      	cmp	r3, #32
 80084a2:	d10e      	bne.n	80084c2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	f003 0320 	and.w	r3, r3, #32
 80084ae:	2b20      	cmp	r3, #32
 80084b0:	d107      	bne.n	80084c2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f06f 0220 	mvn.w	r2, #32
 80084ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fe51 	bl	8009164 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084c2:	bf00      	nop
 80084c4:	3708      	adds	r7, #8
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
	...

080084cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d101      	bne.n	80084e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80084e2:	2302      	movs	r3, #2
 80084e4:	e0b4      	b.n	8008650 <HAL_TIM_PWM_ConfigChannel+0x184>
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2201      	movs	r2, #1
 80084ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2202      	movs	r2, #2
 80084f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2b0c      	cmp	r3, #12
 80084fa:	f200 809f 	bhi.w	800863c <HAL_TIM_PWM_ConfigChannel+0x170>
 80084fe:	a201      	add	r2, pc, #4	; (adr r2, 8008504 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008504:	08008539 	.word	0x08008539
 8008508:	0800863d 	.word	0x0800863d
 800850c:	0800863d 	.word	0x0800863d
 8008510:	0800863d 	.word	0x0800863d
 8008514:	08008579 	.word	0x08008579
 8008518:	0800863d 	.word	0x0800863d
 800851c:	0800863d 	.word	0x0800863d
 8008520:	0800863d 	.word	0x0800863d
 8008524:	080085bb 	.word	0x080085bb
 8008528:	0800863d 	.word	0x0800863d
 800852c:	0800863d 	.word	0x0800863d
 8008530:	0800863d 	.word	0x0800863d
 8008534:	080085fb 	.word	0x080085fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68b9      	ldr	r1, [r7, #8]
 800853e:	4618      	mov	r0, r3
 8008540:	f000 fa4c 	bl	80089dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	699a      	ldr	r2, [r3, #24]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f042 0208 	orr.w	r2, r2, #8
 8008552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	699a      	ldr	r2, [r3, #24]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f022 0204 	bic.w	r2, r2, #4
 8008562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6999      	ldr	r1, [r3, #24]
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	691a      	ldr	r2, [r3, #16]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	430a      	orrs	r2, r1
 8008574:	619a      	str	r2, [r3, #24]
      break;
 8008576:	e062      	b.n	800863e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68b9      	ldr	r1, [r7, #8]
 800857e:	4618      	mov	r0, r3
 8008580:	f000 fa9c 	bl	8008abc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	699a      	ldr	r2, [r3, #24]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	699a      	ldr	r2, [r3, #24]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6999      	ldr	r1, [r3, #24]
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	021a      	lsls	r2, r3, #8
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	430a      	orrs	r2, r1
 80085b6:	619a      	str	r2, [r3, #24]
      break;
 80085b8:	e041      	b.n	800863e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68b9      	ldr	r1, [r7, #8]
 80085c0:	4618      	mov	r0, r3
 80085c2:	f000 faf1 	bl	8008ba8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	69da      	ldr	r2, [r3, #28]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f042 0208 	orr.w	r2, r2, #8
 80085d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	69da      	ldr	r2, [r3, #28]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f022 0204 	bic.w	r2, r2, #4
 80085e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	69d9      	ldr	r1, [r3, #28]
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	691a      	ldr	r2, [r3, #16]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	430a      	orrs	r2, r1
 80085f6:	61da      	str	r2, [r3, #28]
      break;
 80085f8:	e021      	b.n	800863e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68b9      	ldr	r1, [r7, #8]
 8008600:	4618      	mov	r0, r3
 8008602:	f000 fb45 	bl	8008c90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	69da      	ldr	r2, [r3, #28]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	69da      	ldr	r2, [r3, #28]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	69d9      	ldr	r1, [r3, #28]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	021a      	lsls	r2, r3, #8
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	430a      	orrs	r2, r1
 8008638:	61da      	str	r2, [r3, #28]
      break;
 800863a:	e000      	b.n	800863e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800863c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2201      	movs	r2, #1
 8008642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2200      	movs	r2, #0
 800864a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008668:	2b01      	cmp	r3, #1
 800866a:	d101      	bne.n	8008670 <HAL_TIM_ConfigClockSource+0x18>
 800866c:	2302      	movs	r3, #2
 800866e:	e0a6      	b.n	80087be <HAL_TIM_ConfigClockSource+0x166>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2202      	movs	r2, #2
 800867c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800868e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008696:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2b40      	cmp	r3, #64	; 0x40
 80086a6:	d067      	beq.n	8008778 <HAL_TIM_ConfigClockSource+0x120>
 80086a8:	2b40      	cmp	r3, #64	; 0x40
 80086aa:	d80b      	bhi.n	80086c4 <HAL_TIM_ConfigClockSource+0x6c>
 80086ac:	2b10      	cmp	r3, #16
 80086ae:	d073      	beq.n	8008798 <HAL_TIM_ConfigClockSource+0x140>
 80086b0:	2b10      	cmp	r3, #16
 80086b2:	d802      	bhi.n	80086ba <HAL_TIM_ConfigClockSource+0x62>
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d06f      	beq.n	8008798 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80086b8:	e078      	b.n	80087ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80086ba:	2b20      	cmp	r3, #32
 80086bc:	d06c      	beq.n	8008798 <HAL_TIM_ConfigClockSource+0x140>
 80086be:	2b30      	cmp	r3, #48	; 0x30
 80086c0:	d06a      	beq.n	8008798 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80086c2:	e073      	b.n	80087ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80086c4:	2b70      	cmp	r3, #112	; 0x70
 80086c6:	d00d      	beq.n	80086e4 <HAL_TIM_ConfigClockSource+0x8c>
 80086c8:	2b70      	cmp	r3, #112	; 0x70
 80086ca:	d804      	bhi.n	80086d6 <HAL_TIM_ConfigClockSource+0x7e>
 80086cc:	2b50      	cmp	r3, #80	; 0x50
 80086ce:	d033      	beq.n	8008738 <HAL_TIM_ConfigClockSource+0xe0>
 80086d0:	2b60      	cmp	r3, #96	; 0x60
 80086d2:	d041      	beq.n	8008758 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80086d4:	e06a      	b.n	80087ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80086d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086da:	d066      	beq.n	80087aa <HAL_TIM_ConfigClockSource+0x152>
 80086dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086e0:	d017      	beq.n	8008712 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80086e2:	e063      	b.n	80087ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6818      	ldr	r0, [r3, #0]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	6899      	ldr	r1, [r3, #8]
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	685a      	ldr	r2, [r3, #4]
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	f000 fc22 	bl	8008f3c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008706:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	609a      	str	r2, [r3, #8]
      break;
 8008710:	e04c      	b.n	80087ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6818      	ldr	r0, [r3, #0]
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	6899      	ldr	r1, [r3, #8]
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	685a      	ldr	r2, [r3, #4]
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	f000 fc0b 	bl	8008f3c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	689a      	ldr	r2, [r3, #8]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008734:	609a      	str	r2, [r3, #8]
      break;
 8008736:	e039      	b.n	80087ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6818      	ldr	r0, [r3, #0]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	6859      	ldr	r1, [r3, #4]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	461a      	mov	r2, r3
 8008746:	f000 fb7f 	bl	8008e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2150      	movs	r1, #80	; 0x50
 8008750:	4618      	mov	r0, r3
 8008752:	f000 fbd8 	bl	8008f06 <TIM_ITRx_SetConfig>
      break;
 8008756:	e029      	b.n	80087ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6818      	ldr	r0, [r3, #0]
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	6859      	ldr	r1, [r3, #4]
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	461a      	mov	r2, r3
 8008766:	f000 fb9e 	bl	8008ea6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2160      	movs	r1, #96	; 0x60
 8008770:	4618      	mov	r0, r3
 8008772:	f000 fbc8 	bl	8008f06 <TIM_ITRx_SetConfig>
      break;
 8008776:	e019      	b.n	80087ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6818      	ldr	r0, [r3, #0]
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	6859      	ldr	r1, [r3, #4]
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	461a      	mov	r2, r3
 8008786:	f000 fb5f 	bl	8008e48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2140      	movs	r1, #64	; 0x40
 8008790:	4618      	mov	r0, r3
 8008792:	f000 fbb8 	bl	8008f06 <TIM_ITRx_SetConfig>
      break;
 8008796:	e009      	b.n	80087ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4619      	mov	r1, r3
 80087a2:	4610      	mov	r0, r2
 80087a4:	f000 fbaf 	bl	8008f06 <TIM_ITRx_SetConfig>
      break;
 80087a8:	e000      	b.n	80087ac <HAL_TIM_ConfigClockSource+0x154>
      break;
 80087aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b082      	sub	sp, #8
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d101      	bne.n	80087de <HAL_TIM_SlaveConfigSynchro+0x18>
 80087da:	2302      	movs	r3, #2
 80087dc:	e031      	b.n	8008842 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2201      	movs	r2, #1
 80087e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2202      	movs	r2, #2
 80087ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80087ee:	6839      	ldr	r1, [r7, #0]
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 faa3 	bl	8008d3c <TIM_SlaveTimer_SetConfig>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d009      	beq.n	8008810 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	e018      	b.n	8008842 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68da      	ldr	r2, [r3, #12]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800881e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68da      	ldr	r2, [r3, #12]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800882e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800884a:	b480      	push	{r7}
 800884c:	b083      	sub	sp, #12
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008852:	bf00      	nop
 8008854:	370c      	adds	r7, #12
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr

0800885e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800885e:	b480      	push	{r7}
 8008860:	b083      	sub	sp, #12
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008866:	bf00      	nop
 8008868:	370c      	adds	r7, #12
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr

08008872 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008872:	b480      	push	{r7}
 8008874:	b083      	sub	sp, #12
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800887a:	bf00      	nop
 800887c:	370c      	adds	r7, #12
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008886:	b480      	push	{r7}
 8008888:	b083      	sub	sp, #12
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800888e:	bf00      	nop
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
	...

0800889c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a40      	ldr	r2, [pc, #256]	; (80089b0 <TIM_Base_SetConfig+0x114>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d013      	beq.n	80088dc <TIM_Base_SetConfig+0x40>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ba:	d00f      	beq.n	80088dc <TIM_Base_SetConfig+0x40>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a3d      	ldr	r2, [pc, #244]	; (80089b4 <TIM_Base_SetConfig+0x118>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d00b      	beq.n	80088dc <TIM_Base_SetConfig+0x40>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a3c      	ldr	r2, [pc, #240]	; (80089b8 <TIM_Base_SetConfig+0x11c>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d007      	beq.n	80088dc <TIM_Base_SetConfig+0x40>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a3b      	ldr	r2, [pc, #236]	; (80089bc <TIM_Base_SetConfig+0x120>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d003      	beq.n	80088dc <TIM_Base_SetConfig+0x40>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a3a      	ldr	r2, [pc, #232]	; (80089c0 <TIM_Base_SetConfig+0x124>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d108      	bne.n	80088ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4a2f      	ldr	r2, [pc, #188]	; (80089b0 <TIM_Base_SetConfig+0x114>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d02b      	beq.n	800894e <TIM_Base_SetConfig+0xb2>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088fc:	d027      	beq.n	800894e <TIM_Base_SetConfig+0xb2>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4a2c      	ldr	r2, [pc, #176]	; (80089b4 <TIM_Base_SetConfig+0x118>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d023      	beq.n	800894e <TIM_Base_SetConfig+0xb2>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4a2b      	ldr	r2, [pc, #172]	; (80089b8 <TIM_Base_SetConfig+0x11c>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d01f      	beq.n	800894e <TIM_Base_SetConfig+0xb2>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a2a      	ldr	r2, [pc, #168]	; (80089bc <TIM_Base_SetConfig+0x120>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d01b      	beq.n	800894e <TIM_Base_SetConfig+0xb2>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a29      	ldr	r2, [pc, #164]	; (80089c0 <TIM_Base_SetConfig+0x124>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d017      	beq.n	800894e <TIM_Base_SetConfig+0xb2>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4a28      	ldr	r2, [pc, #160]	; (80089c4 <TIM_Base_SetConfig+0x128>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d013      	beq.n	800894e <TIM_Base_SetConfig+0xb2>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a27      	ldr	r2, [pc, #156]	; (80089c8 <TIM_Base_SetConfig+0x12c>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d00f      	beq.n	800894e <TIM_Base_SetConfig+0xb2>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a26      	ldr	r2, [pc, #152]	; (80089cc <TIM_Base_SetConfig+0x130>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d00b      	beq.n	800894e <TIM_Base_SetConfig+0xb2>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a25      	ldr	r2, [pc, #148]	; (80089d0 <TIM_Base_SetConfig+0x134>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d007      	beq.n	800894e <TIM_Base_SetConfig+0xb2>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a24      	ldr	r2, [pc, #144]	; (80089d4 <TIM_Base_SetConfig+0x138>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d003      	beq.n	800894e <TIM_Base_SetConfig+0xb2>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a23      	ldr	r2, [pc, #140]	; (80089d8 <TIM_Base_SetConfig+0x13c>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d108      	bne.n	8008960 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	4313      	orrs	r3, r2
 800895e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	4313      	orrs	r3, r2
 800896c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	689a      	ldr	r2, [r3, #8]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a0a      	ldr	r2, [pc, #40]	; (80089b0 <TIM_Base_SetConfig+0x114>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d003      	beq.n	8008994 <TIM_Base_SetConfig+0xf8>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a0c      	ldr	r2, [pc, #48]	; (80089c0 <TIM_Base_SetConfig+0x124>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d103      	bne.n	800899c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	691a      	ldr	r2, [r3, #16]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	615a      	str	r2, [r3, #20]
}
 80089a2:	bf00      	nop
 80089a4:	3714      	adds	r7, #20
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	40010000 	.word	0x40010000
 80089b4:	40000400 	.word	0x40000400
 80089b8:	40000800 	.word	0x40000800
 80089bc:	40000c00 	.word	0x40000c00
 80089c0:	40010400 	.word	0x40010400
 80089c4:	40014000 	.word	0x40014000
 80089c8:	40014400 	.word	0x40014400
 80089cc:	40014800 	.word	0x40014800
 80089d0:	40001800 	.word	0x40001800
 80089d4:	40001c00 	.word	0x40001c00
 80089d8:	40002000 	.word	0x40002000

080089dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089dc:	b480      	push	{r7}
 80089de:	b087      	sub	sp, #28
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
 80089ea:	f023 0201 	bic.w	r2, r3, #1
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f023 0303 	bic.w	r3, r3, #3
 8008a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	f023 0302 	bic.w	r3, r3, #2
 8008a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a20      	ldr	r2, [pc, #128]	; (8008ab4 <TIM_OC1_SetConfig+0xd8>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d003      	beq.n	8008a40 <TIM_OC1_SetConfig+0x64>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a1f      	ldr	r2, [pc, #124]	; (8008ab8 <TIM_OC1_SetConfig+0xdc>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d10c      	bne.n	8008a5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	f023 0308 	bic.w	r3, r3, #8
 8008a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	697a      	ldr	r2, [r7, #20]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	f023 0304 	bic.w	r3, r3, #4
 8008a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a15      	ldr	r2, [pc, #84]	; (8008ab4 <TIM_OC1_SetConfig+0xd8>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d003      	beq.n	8008a6a <TIM_OC1_SetConfig+0x8e>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a14      	ldr	r2, [pc, #80]	; (8008ab8 <TIM_OC1_SetConfig+0xdc>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d111      	bne.n	8008a8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	695b      	ldr	r3, [r3, #20]
 8008a7e:	693a      	ldr	r2, [r7, #16]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	693a      	ldr	r2, [r7, #16]
 8008a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	685a      	ldr	r2, [r3, #4]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	697a      	ldr	r2, [r7, #20]
 8008aa6:	621a      	str	r2, [r3, #32]
}
 8008aa8:	bf00      	nop
 8008aaa:	371c      	adds	r7, #28
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr
 8008ab4:	40010000 	.word	0x40010000
 8008ab8:	40010400 	.word	0x40010400

08008abc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b087      	sub	sp, #28
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	f023 0210 	bic.w	r2, r3, #16
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a1b      	ldr	r3, [r3, #32]
 8008ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	699b      	ldr	r3, [r3, #24]
 8008ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	021b      	lsls	r3, r3, #8
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	f023 0320 	bic.w	r3, r3, #32
 8008b06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	011b      	lsls	r3, r3, #4
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4a22      	ldr	r2, [pc, #136]	; (8008ba0 <TIM_OC2_SetConfig+0xe4>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d003      	beq.n	8008b24 <TIM_OC2_SetConfig+0x68>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	4a21      	ldr	r2, [pc, #132]	; (8008ba4 <TIM_OC2_SetConfig+0xe8>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d10d      	bne.n	8008b40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	011b      	lsls	r3, r3, #4
 8008b32:	697a      	ldr	r2, [r7, #20]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a17      	ldr	r2, [pc, #92]	; (8008ba0 <TIM_OC2_SetConfig+0xe4>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d003      	beq.n	8008b50 <TIM_OC2_SetConfig+0x94>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a16      	ldr	r2, [pc, #88]	; (8008ba4 <TIM_OC2_SetConfig+0xe8>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d113      	bne.n	8008b78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	695b      	ldr	r3, [r3, #20]
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	693a      	ldr	r2, [r7, #16]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	699b      	ldr	r3, [r3, #24]
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	693a      	ldr	r2, [r7, #16]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	693a      	ldr	r2, [r7, #16]
 8008b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	685a      	ldr	r2, [r3, #4]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	697a      	ldr	r2, [r7, #20]
 8008b90:	621a      	str	r2, [r3, #32]
}
 8008b92:	bf00      	nop
 8008b94:	371c      	adds	r7, #28
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	40010000 	.word	0x40010000
 8008ba4:	40010400 	.word	0x40010400

08008ba8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b087      	sub	sp, #28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a1b      	ldr	r3, [r3, #32]
 8008bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	69db      	ldr	r3, [r3, #28]
 8008bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f023 0303 	bic.w	r3, r3, #3
 8008bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	021b      	lsls	r3, r3, #8
 8008bf8:	697a      	ldr	r2, [r7, #20]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a21      	ldr	r2, [pc, #132]	; (8008c88 <TIM_OC3_SetConfig+0xe0>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d003      	beq.n	8008c0e <TIM_OC3_SetConfig+0x66>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a20      	ldr	r2, [pc, #128]	; (8008c8c <TIM_OC3_SetConfig+0xe4>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d10d      	bne.n	8008c2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	021b      	lsls	r3, r3, #8
 8008c1c:	697a      	ldr	r2, [r7, #20]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a16      	ldr	r2, [pc, #88]	; (8008c88 <TIM_OC3_SetConfig+0xe0>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d003      	beq.n	8008c3a <TIM_OC3_SetConfig+0x92>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a15      	ldr	r2, [pc, #84]	; (8008c8c <TIM_OC3_SetConfig+0xe4>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d113      	bne.n	8008c62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	695b      	ldr	r3, [r3, #20]
 8008c4e:	011b      	lsls	r3, r3, #4
 8008c50:	693a      	ldr	r2, [r7, #16]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	011b      	lsls	r3, r3, #4
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	693a      	ldr	r2, [r7, #16]
 8008c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	621a      	str	r2, [r3, #32]
}
 8008c7c:	bf00      	nop
 8008c7e:	371c      	adds	r7, #28
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr
 8008c88:	40010000 	.word	0x40010000
 8008c8c:	40010400 	.word	0x40010400

08008c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b087      	sub	sp, #28
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	69db      	ldr	r3, [r3, #28]
 8008cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	021b      	lsls	r3, r3, #8
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	031b      	lsls	r3, r3, #12
 8008ce2:	693a      	ldr	r2, [r7, #16]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a12      	ldr	r2, [pc, #72]	; (8008d34 <TIM_OC4_SetConfig+0xa4>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d003      	beq.n	8008cf8 <TIM_OC4_SetConfig+0x68>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a11      	ldr	r2, [pc, #68]	; (8008d38 <TIM_OC4_SetConfig+0xa8>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d109      	bne.n	8008d0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	695b      	ldr	r3, [r3, #20]
 8008d04:	019b      	lsls	r3, r3, #6
 8008d06:	697a      	ldr	r2, [r7, #20]
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	621a      	str	r2, [r3, #32]
}
 8008d26:	bf00      	nop
 8008d28:	371c      	adds	r7, #28
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	40010000 	.word	0x40010000
 8008d38:	40010400 	.word	0x40010400

08008d3c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b086      	sub	sp, #24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d54:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	697a      	ldr	r2, [r7, #20]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	f023 0307 	bic.w	r3, r3, #7
 8008d66:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	697a      	ldr	r2, [r7, #20]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	697a      	ldr	r2, [r7, #20]
 8008d78:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	2b30      	cmp	r3, #48	; 0x30
 8008d80:	d05c      	beq.n	8008e3c <TIM_SlaveTimer_SetConfig+0x100>
 8008d82:	2b30      	cmp	r3, #48	; 0x30
 8008d84:	d806      	bhi.n	8008d94 <TIM_SlaveTimer_SetConfig+0x58>
 8008d86:	2b10      	cmp	r3, #16
 8008d88:	d058      	beq.n	8008e3c <TIM_SlaveTimer_SetConfig+0x100>
 8008d8a:	2b20      	cmp	r3, #32
 8008d8c:	d056      	beq.n	8008e3c <TIM_SlaveTimer_SetConfig+0x100>
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d054      	beq.n	8008e3c <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8008d92:	e054      	b.n	8008e3e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8008d94:	2b50      	cmp	r3, #80	; 0x50
 8008d96:	d03d      	beq.n	8008e14 <TIM_SlaveTimer_SetConfig+0xd8>
 8008d98:	2b50      	cmp	r3, #80	; 0x50
 8008d9a:	d802      	bhi.n	8008da2 <TIM_SlaveTimer_SetConfig+0x66>
 8008d9c:	2b40      	cmp	r3, #64	; 0x40
 8008d9e:	d010      	beq.n	8008dc2 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8008da0:	e04d      	b.n	8008e3e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8008da2:	2b60      	cmp	r3, #96	; 0x60
 8008da4:	d040      	beq.n	8008e28 <TIM_SlaveTimer_SetConfig+0xec>
 8008da6:	2b70      	cmp	r3, #112	; 0x70
 8008da8:	d000      	beq.n	8008dac <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8008daa:	e048      	b.n	8008e3e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6818      	ldr	r0, [r3, #0]
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	68d9      	ldr	r1, [r3, #12]
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	689a      	ldr	r2, [r3, #8]
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	691b      	ldr	r3, [r3, #16]
 8008dbc:	f000 f8be 	bl	8008f3c <TIM_ETR_SetConfig>
      break;
 8008dc0:	e03d      	b.n	8008e3e <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b05      	cmp	r3, #5
 8008dc8:	d101      	bne.n	8008dce <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e038      	b.n	8008e40 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	6a1b      	ldr	r3, [r3, #32]
 8008dd4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	6a1a      	ldr	r2, [r3, #32]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f022 0201 	bic.w	r2, r2, #1
 8008de4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	699b      	ldr	r3, [r3, #24]
 8008dec:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008df4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	011b      	lsls	r3, r3, #4
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	693a      	ldr	r2, [r7, #16]
 8008e10:	621a      	str	r2, [r3, #32]
      break;
 8008e12:	e014      	b.n	8008e3e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6818      	ldr	r0, [r3, #0]
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	6899      	ldr	r1, [r3, #8]
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	461a      	mov	r2, r3
 8008e22:	f000 f811 	bl	8008e48 <TIM_TI1_ConfigInputStage>
      break;
 8008e26:	e00a      	b.n	8008e3e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6818      	ldr	r0, [r3, #0]
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	6899      	ldr	r1, [r3, #8]
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	461a      	mov	r2, r3
 8008e36:	f000 f836 	bl	8008ea6 <TIM_TI2_ConfigInputStage>
      break;
 8008e3a:	e000      	b.n	8008e3e <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8008e3c:	bf00      	nop
  }
  return HAL_OK;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3718      	adds	r7, #24
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b087      	sub	sp, #28
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6a1b      	ldr	r3, [r3, #32]
 8008e58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6a1b      	ldr	r3, [r3, #32]
 8008e5e:	f023 0201 	bic.w	r2, r3, #1
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	011b      	lsls	r3, r3, #4
 8008e78:	693a      	ldr	r2, [r7, #16]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	f023 030a 	bic.w	r3, r3, #10
 8008e84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e86:	697a      	ldr	r2, [r7, #20]
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	693a      	ldr	r2, [r7, #16]
 8008e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	697a      	ldr	r2, [r7, #20]
 8008e98:	621a      	str	r2, [r3, #32]
}
 8008e9a:	bf00      	nop
 8008e9c:	371c      	adds	r7, #28
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr

08008ea6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ea6:	b480      	push	{r7}
 8008ea8:	b087      	sub	sp, #28
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	60f8      	str	r0, [r7, #12]
 8008eae:	60b9      	str	r1, [r7, #8]
 8008eb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6a1b      	ldr	r3, [r3, #32]
 8008eb6:	f023 0210 	bic.w	r2, r3, #16
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	699b      	ldr	r3, [r3, #24]
 8008ec2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6a1b      	ldr	r3, [r3, #32]
 8008ec8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ed0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	031b      	lsls	r3, r3, #12
 8008ed6:	697a      	ldr	r2, [r7, #20]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ee2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	011b      	lsls	r3, r3, #4
 8008ee8:	693a      	ldr	r2, [r7, #16]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	697a      	ldr	r2, [r7, #20]
 8008ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	693a      	ldr	r2, [r7, #16]
 8008ef8:	621a      	str	r2, [r3, #32]
}
 8008efa:	bf00      	nop
 8008efc:	371c      	adds	r7, #28
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr

08008f06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f06:	b480      	push	{r7}
 8008f08:	b085      	sub	sp, #20
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
 8008f0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f1e:	683a      	ldr	r2, [r7, #0]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	f043 0307 	orr.w	r3, r3, #7
 8008f28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	609a      	str	r2, [r3, #8]
}
 8008f30:	bf00      	nop
 8008f32:	3714      	adds	r7, #20
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b087      	sub	sp, #28
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	607a      	str	r2, [r7, #4]
 8008f48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	021a      	lsls	r2, r3, #8
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	431a      	orrs	r2, r3
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	697a      	ldr	r2, [r7, #20]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	697a      	ldr	r2, [r7, #20]
 8008f6e:	609a      	str	r2, [r3, #8]
}
 8008f70:	bf00      	nop
 8008f72:	371c      	adds	r7, #28
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b087      	sub	sp, #28
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	f003 031f 	and.w	r3, r3, #31
 8008f8e:	2201      	movs	r2, #1
 8008f90:	fa02 f303 	lsl.w	r3, r2, r3
 8008f94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6a1a      	ldr	r2, [r3, #32]
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	43db      	mvns	r3, r3
 8008f9e:	401a      	ands	r2, r3
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6a1a      	ldr	r2, [r3, #32]
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	f003 031f 	and.w	r3, r3, #31
 8008fae:	6879      	ldr	r1, [r7, #4]
 8008fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8008fb4:	431a      	orrs	r2, r3
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	621a      	str	r2, [r3, #32]
}
 8008fba:	bf00      	nop
 8008fbc:	371c      	adds	r7, #28
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr
	...

08008fc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d101      	bne.n	8008fe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008fdc:	2302      	movs	r3, #2
 8008fde:	e05a      	b.n	8009096 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2202      	movs	r2, #2
 8008fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	689b      	ldr	r3, [r3, #8]
 8008ffe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009006:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	4313      	orrs	r3, r2
 8009010:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a21      	ldr	r2, [pc, #132]	; (80090a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d022      	beq.n	800906a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800902c:	d01d      	beq.n	800906a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a1d      	ldr	r2, [pc, #116]	; (80090a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d018      	beq.n	800906a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a1b      	ldr	r2, [pc, #108]	; (80090ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d013      	beq.n	800906a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a1a      	ldr	r2, [pc, #104]	; (80090b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d00e      	beq.n	800906a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a18      	ldr	r2, [pc, #96]	; (80090b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d009      	beq.n	800906a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a17      	ldr	r2, [pc, #92]	; (80090b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d004      	beq.n	800906a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a15      	ldr	r2, [pc, #84]	; (80090bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d10c      	bne.n	8009084 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009070:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	4313      	orrs	r3, r2
 800907a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68ba      	ldr	r2, [r7, #8]
 8009082:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3714      	adds	r7, #20
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	40010000 	.word	0x40010000
 80090a8:	40000400 	.word	0x40000400
 80090ac:	40000800 	.word	0x40000800
 80090b0:	40000c00 	.word	0x40000c00
 80090b4:	40010400 	.word	0x40010400
 80090b8:	40014000 	.word	0x40014000
 80090bc:	40001800 	.word	0x40001800

080090c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b085      	sub	sp, #20
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80090ca:	2300      	movs	r3, #0
 80090cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d101      	bne.n	80090dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80090d8:	2302      	movs	r3, #2
 80090da:	e03d      	b.n	8009158 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	4313      	orrs	r3, r2
 800910c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4313      	orrs	r3, r2
 800911a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	4313      	orrs	r3, r2
 8009128:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	695b      	ldr	r3, [r3, #20]
 8009134:	4313      	orrs	r3, r2
 8009136:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	69db      	ldr	r3, [r3, #28]
 8009142:	4313      	orrs	r3, r2
 8009144:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68fa      	ldr	r2, [r7, #12]
 800914c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3714      	adds	r7, #20
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800916c:	bf00      	nop
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009180:	bf00      	nop
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d101      	bne.n	800919e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	e03f      	b.n	800921e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d106      	bne.n	80091b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f7f8 fc54 	bl	8001a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2224      	movs	r2, #36	; 0x24
 80091bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	68da      	ldr	r2, [r3, #12]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fa69 	bl	80096a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	691a      	ldr	r2, [r3, #16]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	695a      	ldr	r2, [r3, #20]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	68da      	ldr	r2, [r3, #12]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009204:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2220      	movs	r2, #32
 8009210:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2220      	movs	r2, #32
 8009218:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
	...

08009228 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b088      	sub	sp, #32
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	695b      	ldr	r3, [r3, #20]
 8009246:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8009248:	2300      	movs	r3, #0
 800924a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800924c:	2300      	movs	r3, #0
 800924e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	f003 030f 	and.w	r3, r3, #15
 8009256:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d10d      	bne.n	800927a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	f003 0320 	and.w	r3, r3, #32
 8009264:	2b00      	cmp	r3, #0
 8009266:	d008      	beq.n	800927a <HAL_UART_IRQHandler+0x52>
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	f003 0320 	and.w	r3, r3, #32
 800926e:	2b00      	cmp	r3, #0
 8009270:	d003      	beq.n	800927a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 f996 	bl	80095a4 <UART_Receive_IT>
      return;
 8009278:	e0d1      	b.n	800941e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	2b00      	cmp	r3, #0
 800927e:	f000 80b0 	beq.w	80093e2 <HAL_UART_IRQHandler+0x1ba>
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	f003 0301 	and.w	r3, r3, #1
 8009288:	2b00      	cmp	r3, #0
 800928a:	d105      	bne.n	8009298 <HAL_UART_IRQHandler+0x70>
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009292:	2b00      	cmp	r3, #0
 8009294:	f000 80a5 	beq.w	80093e2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	f003 0301 	and.w	r3, r3, #1
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00a      	beq.n	80092b8 <HAL_UART_IRQHandler+0x90>
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d005      	beq.n	80092b8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092b0:	f043 0201 	orr.w	r2, r3, #1
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	f003 0304 	and.w	r3, r3, #4
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00a      	beq.n	80092d8 <HAL_UART_IRQHandler+0xb0>
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	f003 0301 	and.w	r3, r3, #1
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d005      	beq.n	80092d8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d0:	f043 0202 	orr.w	r2, r3, #2
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	f003 0302 	and.w	r3, r3, #2
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d00a      	beq.n	80092f8 <HAL_UART_IRQHandler+0xd0>
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	f003 0301 	and.w	r3, r3, #1
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d005      	beq.n	80092f8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092f0:	f043 0204 	orr.w	r2, r3, #4
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	f003 0308 	and.w	r3, r3, #8
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00f      	beq.n	8009322 <HAL_UART_IRQHandler+0xfa>
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	f003 0320 	and.w	r3, r3, #32
 8009308:	2b00      	cmp	r3, #0
 800930a:	d104      	bne.n	8009316 <HAL_UART_IRQHandler+0xee>
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	f003 0301 	and.w	r3, r3, #1
 8009312:	2b00      	cmp	r3, #0
 8009314:	d005      	beq.n	8009322 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800931a:	f043 0208 	orr.w	r2, r3, #8
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009326:	2b00      	cmp	r3, #0
 8009328:	d078      	beq.n	800941c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	f003 0320 	and.w	r3, r3, #32
 8009330:	2b00      	cmp	r3, #0
 8009332:	d007      	beq.n	8009344 <HAL_UART_IRQHandler+0x11c>
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	f003 0320 	and.w	r3, r3, #32
 800933a:	2b00      	cmp	r3, #0
 800933c:	d002      	beq.n	8009344 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f930 	bl	80095a4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	695b      	ldr	r3, [r3, #20]
 800934a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800934e:	2b40      	cmp	r3, #64	; 0x40
 8009350:	bf0c      	ite	eq
 8009352:	2301      	moveq	r3, #1
 8009354:	2300      	movne	r3, #0
 8009356:	b2db      	uxtb	r3, r3
 8009358:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800935e:	f003 0308 	and.w	r3, r3, #8
 8009362:	2b00      	cmp	r3, #0
 8009364:	d102      	bne.n	800936c <HAL_UART_IRQHandler+0x144>
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d031      	beq.n	80093d0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 f879 	bl	8009464 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	695b      	ldr	r3, [r3, #20]
 8009378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800937c:	2b40      	cmp	r3, #64	; 0x40
 800937e:	d123      	bne.n	80093c8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	695a      	ldr	r2, [r3, #20]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800938e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009394:	2b00      	cmp	r3, #0
 8009396:	d013      	beq.n	80093c0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800939c:	4a21      	ldr	r2, [pc, #132]	; (8009424 <HAL_UART_IRQHandler+0x1fc>)
 800939e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a4:	4618      	mov	r0, r3
 80093a6:	f7f9 fb11 	bl	80029cc <HAL_DMA_Abort_IT>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d016      	beq.n	80093de <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80093ba:	4610      	mov	r0, r2
 80093bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093be:	e00e      	b.n	80093de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 f845 	bl	8009450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093c6:	e00a      	b.n	80093de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 f841 	bl	8009450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093ce:	e006      	b.n	80093de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f83d 	bl	8009450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80093dc:	e01e      	b.n	800941c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093de:	bf00      	nop
    return;
 80093e0:	e01c      	b.n	800941c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d008      	beq.n	80093fe <HAL_UART_IRQHandler+0x1d6>
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d003      	beq.n	80093fe <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f866 	bl	80094c8 <UART_Transmit_IT>
    return;
 80093fc:	e00f      	b.n	800941e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00a      	beq.n	800941e <HAL_UART_IRQHandler+0x1f6>
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800940e:	2b00      	cmp	r3, #0
 8009410:	d005      	beq.n	800941e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f8ae 	bl	8009574 <UART_EndTransmit_IT>
    return;
 8009418:	bf00      	nop
 800941a:	e000      	b.n	800941e <HAL_UART_IRQHandler+0x1f6>
    return;
 800941c:	bf00      	nop
  }
}
 800941e:	3720      	adds	r7, #32
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}
 8009424:	080094a1 	.word	0x080094a1

08009428 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009458:	bf00      	nop
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	68da      	ldr	r2, [r3, #12]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800947a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	695a      	ldr	r2, [r3, #20]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f022 0201 	bic.w	r2, r2, #1
 800948a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2220      	movs	r2, #32
 8009490:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009494:	bf00      	nop
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2200      	movs	r2, #0
 80094b2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2200      	movs	r2, #0
 80094b8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094ba:	68f8      	ldr	r0, [r7, #12]
 80094bc:	f7ff ffc8 	bl	8009450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094c0:	bf00      	nop
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	2b21      	cmp	r3, #33	; 0x21
 80094da:	d144      	bne.n	8009566 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094e4:	d11a      	bne.n	800951c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6a1b      	ldr	r3, [r3, #32]
 80094ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	881b      	ldrh	r3, [r3, #0]
 80094f0:	461a      	mov	r2, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094fa:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	691b      	ldr	r3, [r3, #16]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d105      	bne.n	8009510 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6a1b      	ldr	r3, [r3, #32]
 8009508:	1c9a      	adds	r2, r3, #2
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	621a      	str	r2, [r3, #32]
 800950e:	e00e      	b.n	800952e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6a1b      	ldr	r3, [r3, #32]
 8009514:	1c5a      	adds	r2, r3, #1
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	621a      	str	r2, [r3, #32]
 800951a:	e008      	b.n	800952e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6a1b      	ldr	r3, [r3, #32]
 8009520:	1c59      	adds	r1, r3, #1
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	6211      	str	r1, [r2, #32]
 8009526:	781a      	ldrb	r2, [r3, #0]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009532:	b29b      	uxth	r3, r3
 8009534:	3b01      	subs	r3, #1
 8009536:	b29b      	uxth	r3, r3
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	4619      	mov	r1, r3
 800953c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800953e:	2b00      	cmp	r3, #0
 8009540:	d10f      	bne.n	8009562 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	68da      	ldr	r2, [r3, #12]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009550:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	68da      	ldr	r2, [r3, #12]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009560:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009562:	2300      	movs	r3, #0
 8009564:	e000      	b.n	8009568 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009566:	2302      	movs	r3, #2
  }
}
 8009568:	4618      	mov	r0, r3
 800956a:	3714      	adds	r7, #20
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68da      	ldr	r2, [r3, #12]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800958a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2220      	movs	r2, #32
 8009590:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f7ff ff47 	bl	8009428 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	2b22      	cmp	r3, #34	; 0x22
 80095b6:	d171      	bne.n	800969c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095c0:	d123      	bne.n	800960a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	691b      	ldr	r3, [r3, #16]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10e      	bne.n	80095ee <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095dc:	b29a      	uxth	r2, r3
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e6:	1c9a      	adds	r2, r3, #2
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	629a      	str	r2, [r3, #40]	; 0x28
 80095ec:	e029      	b.n	8009642 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	b29a      	uxth	r2, r3
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009602:	1c5a      	adds	r2, r3, #1
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	629a      	str	r2, [r3, #40]	; 0x28
 8009608:	e01b      	b.n	8009642 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d10a      	bne.n	8009628 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	6858      	ldr	r0, [r3, #4]
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800961c:	1c59      	adds	r1, r3, #1
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	6291      	str	r1, [r2, #40]	; 0x28
 8009622:	b2c2      	uxtb	r2, r0
 8009624:	701a      	strb	r2, [r3, #0]
 8009626:	e00c      	b.n	8009642 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	b2da      	uxtb	r2, r3
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009634:	1c58      	adds	r0, r3, #1
 8009636:	6879      	ldr	r1, [r7, #4]
 8009638:	6288      	str	r0, [r1, #40]	; 0x28
 800963a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800963e:	b2d2      	uxtb	r2, r2
 8009640:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009646:	b29b      	uxth	r3, r3
 8009648:	3b01      	subs	r3, #1
 800964a:	b29b      	uxth	r3, r3
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	4619      	mov	r1, r3
 8009650:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009652:	2b00      	cmp	r3, #0
 8009654:	d120      	bne.n	8009698 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	68da      	ldr	r2, [r3, #12]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f022 0220 	bic.w	r2, r2, #32
 8009664:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	68da      	ldr	r2, [r3, #12]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009674:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	695a      	ldr	r2, [r3, #20]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f022 0201 	bic.w	r2, r2, #1
 8009684:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2220      	movs	r2, #32
 800968a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f7ff fed4 	bl	800943c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009694:	2300      	movs	r3, #0
 8009696:	e002      	b.n	800969e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009698:	2300      	movs	r3, #0
 800969a:	e000      	b.n	800969e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800969c:	2302      	movs	r3, #2
  }
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3710      	adds	r7, #16
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
	...

080096a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ac:	b085      	sub	sp, #20
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	68da      	ldr	r2, [r3, #12]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	430a      	orrs	r2, r1
 80096c6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	689a      	ldr	r2, [r3, #8]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	431a      	orrs	r2, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	695b      	ldr	r3, [r3, #20]
 80096d6:	431a      	orrs	r2, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	69db      	ldr	r3, [r3, #28]
 80096dc:	4313      	orrs	r3, r2
 80096de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80096ea:	f023 030c 	bic.w	r3, r3, #12
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	6812      	ldr	r2, [r2, #0]
 80096f2:	68f9      	ldr	r1, [r7, #12]
 80096f4:	430b      	orrs	r3, r1
 80096f6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	695b      	ldr	r3, [r3, #20]
 80096fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	699a      	ldr	r2, [r3, #24]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	430a      	orrs	r2, r1
 800970c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	69db      	ldr	r3, [r3, #28]
 8009712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009716:	f040 818b 	bne.w	8009a30 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4ac1      	ldr	r2, [pc, #772]	; (8009a24 <UART_SetConfig+0x37c>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d005      	beq.n	8009730 <UART_SetConfig+0x88>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4abf      	ldr	r2, [pc, #764]	; (8009a28 <UART_SetConfig+0x380>)
 800972a:	4293      	cmp	r3, r2
 800972c:	f040 80bd 	bne.w	80098aa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009730:	f7fe f9ae 	bl	8007a90 <HAL_RCC_GetPCLK2Freq>
 8009734:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	461d      	mov	r5, r3
 800973a:	f04f 0600 	mov.w	r6, #0
 800973e:	46a8      	mov	r8, r5
 8009740:	46b1      	mov	r9, r6
 8009742:	eb18 0308 	adds.w	r3, r8, r8
 8009746:	eb49 0409 	adc.w	r4, r9, r9
 800974a:	4698      	mov	r8, r3
 800974c:	46a1      	mov	r9, r4
 800974e:	eb18 0805 	adds.w	r8, r8, r5
 8009752:	eb49 0906 	adc.w	r9, r9, r6
 8009756:	f04f 0100 	mov.w	r1, #0
 800975a:	f04f 0200 	mov.w	r2, #0
 800975e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009762:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009766:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800976a:	4688      	mov	r8, r1
 800976c:	4691      	mov	r9, r2
 800976e:	eb18 0005 	adds.w	r0, r8, r5
 8009772:	eb49 0106 	adc.w	r1, r9, r6
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	461d      	mov	r5, r3
 800977c:	f04f 0600 	mov.w	r6, #0
 8009780:	196b      	adds	r3, r5, r5
 8009782:	eb46 0406 	adc.w	r4, r6, r6
 8009786:	461a      	mov	r2, r3
 8009788:	4623      	mov	r3, r4
 800978a:	f7f6 fd33 	bl	80001f4 <__aeabi_uldivmod>
 800978e:	4603      	mov	r3, r0
 8009790:	460c      	mov	r4, r1
 8009792:	461a      	mov	r2, r3
 8009794:	4ba5      	ldr	r3, [pc, #660]	; (8009a2c <UART_SetConfig+0x384>)
 8009796:	fba3 2302 	umull	r2, r3, r3, r2
 800979a:	095b      	lsrs	r3, r3, #5
 800979c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	461d      	mov	r5, r3
 80097a4:	f04f 0600 	mov.w	r6, #0
 80097a8:	46a9      	mov	r9, r5
 80097aa:	46b2      	mov	sl, r6
 80097ac:	eb19 0309 	adds.w	r3, r9, r9
 80097b0:	eb4a 040a 	adc.w	r4, sl, sl
 80097b4:	4699      	mov	r9, r3
 80097b6:	46a2      	mov	sl, r4
 80097b8:	eb19 0905 	adds.w	r9, r9, r5
 80097bc:	eb4a 0a06 	adc.w	sl, sl, r6
 80097c0:	f04f 0100 	mov.w	r1, #0
 80097c4:	f04f 0200 	mov.w	r2, #0
 80097c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80097cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80097d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80097d4:	4689      	mov	r9, r1
 80097d6:	4692      	mov	sl, r2
 80097d8:	eb19 0005 	adds.w	r0, r9, r5
 80097dc:	eb4a 0106 	adc.w	r1, sl, r6
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	461d      	mov	r5, r3
 80097e6:	f04f 0600 	mov.w	r6, #0
 80097ea:	196b      	adds	r3, r5, r5
 80097ec:	eb46 0406 	adc.w	r4, r6, r6
 80097f0:	461a      	mov	r2, r3
 80097f2:	4623      	mov	r3, r4
 80097f4:	f7f6 fcfe 	bl	80001f4 <__aeabi_uldivmod>
 80097f8:	4603      	mov	r3, r0
 80097fa:	460c      	mov	r4, r1
 80097fc:	461a      	mov	r2, r3
 80097fe:	4b8b      	ldr	r3, [pc, #556]	; (8009a2c <UART_SetConfig+0x384>)
 8009800:	fba3 1302 	umull	r1, r3, r3, r2
 8009804:	095b      	lsrs	r3, r3, #5
 8009806:	2164      	movs	r1, #100	; 0x64
 8009808:	fb01 f303 	mul.w	r3, r1, r3
 800980c:	1ad3      	subs	r3, r2, r3
 800980e:	00db      	lsls	r3, r3, #3
 8009810:	3332      	adds	r3, #50	; 0x32
 8009812:	4a86      	ldr	r2, [pc, #536]	; (8009a2c <UART_SetConfig+0x384>)
 8009814:	fba2 2303 	umull	r2, r3, r2, r3
 8009818:	095b      	lsrs	r3, r3, #5
 800981a:	005b      	lsls	r3, r3, #1
 800981c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009820:	4498      	add	r8, r3
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	461d      	mov	r5, r3
 8009826:	f04f 0600 	mov.w	r6, #0
 800982a:	46a9      	mov	r9, r5
 800982c:	46b2      	mov	sl, r6
 800982e:	eb19 0309 	adds.w	r3, r9, r9
 8009832:	eb4a 040a 	adc.w	r4, sl, sl
 8009836:	4699      	mov	r9, r3
 8009838:	46a2      	mov	sl, r4
 800983a:	eb19 0905 	adds.w	r9, r9, r5
 800983e:	eb4a 0a06 	adc.w	sl, sl, r6
 8009842:	f04f 0100 	mov.w	r1, #0
 8009846:	f04f 0200 	mov.w	r2, #0
 800984a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800984e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009852:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009856:	4689      	mov	r9, r1
 8009858:	4692      	mov	sl, r2
 800985a:	eb19 0005 	adds.w	r0, r9, r5
 800985e:	eb4a 0106 	adc.w	r1, sl, r6
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	461d      	mov	r5, r3
 8009868:	f04f 0600 	mov.w	r6, #0
 800986c:	196b      	adds	r3, r5, r5
 800986e:	eb46 0406 	adc.w	r4, r6, r6
 8009872:	461a      	mov	r2, r3
 8009874:	4623      	mov	r3, r4
 8009876:	f7f6 fcbd 	bl	80001f4 <__aeabi_uldivmod>
 800987a:	4603      	mov	r3, r0
 800987c:	460c      	mov	r4, r1
 800987e:	461a      	mov	r2, r3
 8009880:	4b6a      	ldr	r3, [pc, #424]	; (8009a2c <UART_SetConfig+0x384>)
 8009882:	fba3 1302 	umull	r1, r3, r3, r2
 8009886:	095b      	lsrs	r3, r3, #5
 8009888:	2164      	movs	r1, #100	; 0x64
 800988a:	fb01 f303 	mul.w	r3, r1, r3
 800988e:	1ad3      	subs	r3, r2, r3
 8009890:	00db      	lsls	r3, r3, #3
 8009892:	3332      	adds	r3, #50	; 0x32
 8009894:	4a65      	ldr	r2, [pc, #404]	; (8009a2c <UART_SetConfig+0x384>)
 8009896:	fba2 2303 	umull	r2, r3, r2, r3
 800989a:	095b      	lsrs	r3, r3, #5
 800989c:	f003 0207 	and.w	r2, r3, #7
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4442      	add	r2, r8
 80098a6:	609a      	str	r2, [r3, #8]
 80098a8:	e26f      	b.n	8009d8a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80098aa:	f7fe f8dd 	bl	8007a68 <HAL_RCC_GetPCLK1Freq>
 80098ae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	461d      	mov	r5, r3
 80098b4:	f04f 0600 	mov.w	r6, #0
 80098b8:	46a8      	mov	r8, r5
 80098ba:	46b1      	mov	r9, r6
 80098bc:	eb18 0308 	adds.w	r3, r8, r8
 80098c0:	eb49 0409 	adc.w	r4, r9, r9
 80098c4:	4698      	mov	r8, r3
 80098c6:	46a1      	mov	r9, r4
 80098c8:	eb18 0805 	adds.w	r8, r8, r5
 80098cc:	eb49 0906 	adc.w	r9, r9, r6
 80098d0:	f04f 0100 	mov.w	r1, #0
 80098d4:	f04f 0200 	mov.w	r2, #0
 80098d8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80098dc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80098e0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80098e4:	4688      	mov	r8, r1
 80098e6:	4691      	mov	r9, r2
 80098e8:	eb18 0005 	adds.w	r0, r8, r5
 80098ec:	eb49 0106 	adc.w	r1, r9, r6
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	461d      	mov	r5, r3
 80098f6:	f04f 0600 	mov.w	r6, #0
 80098fa:	196b      	adds	r3, r5, r5
 80098fc:	eb46 0406 	adc.w	r4, r6, r6
 8009900:	461a      	mov	r2, r3
 8009902:	4623      	mov	r3, r4
 8009904:	f7f6 fc76 	bl	80001f4 <__aeabi_uldivmod>
 8009908:	4603      	mov	r3, r0
 800990a:	460c      	mov	r4, r1
 800990c:	461a      	mov	r2, r3
 800990e:	4b47      	ldr	r3, [pc, #284]	; (8009a2c <UART_SetConfig+0x384>)
 8009910:	fba3 2302 	umull	r2, r3, r3, r2
 8009914:	095b      	lsrs	r3, r3, #5
 8009916:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	461d      	mov	r5, r3
 800991e:	f04f 0600 	mov.w	r6, #0
 8009922:	46a9      	mov	r9, r5
 8009924:	46b2      	mov	sl, r6
 8009926:	eb19 0309 	adds.w	r3, r9, r9
 800992a:	eb4a 040a 	adc.w	r4, sl, sl
 800992e:	4699      	mov	r9, r3
 8009930:	46a2      	mov	sl, r4
 8009932:	eb19 0905 	adds.w	r9, r9, r5
 8009936:	eb4a 0a06 	adc.w	sl, sl, r6
 800993a:	f04f 0100 	mov.w	r1, #0
 800993e:	f04f 0200 	mov.w	r2, #0
 8009942:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009946:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800994a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800994e:	4689      	mov	r9, r1
 8009950:	4692      	mov	sl, r2
 8009952:	eb19 0005 	adds.w	r0, r9, r5
 8009956:	eb4a 0106 	adc.w	r1, sl, r6
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	461d      	mov	r5, r3
 8009960:	f04f 0600 	mov.w	r6, #0
 8009964:	196b      	adds	r3, r5, r5
 8009966:	eb46 0406 	adc.w	r4, r6, r6
 800996a:	461a      	mov	r2, r3
 800996c:	4623      	mov	r3, r4
 800996e:	f7f6 fc41 	bl	80001f4 <__aeabi_uldivmod>
 8009972:	4603      	mov	r3, r0
 8009974:	460c      	mov	r4, r1
 8009976:	461a      	mov	r2, r3
 8009978:	4b2c      	ldr	r3, [pc, #176]	; (8009a2c <UART_SetConfig+0x384>)
 800997a:	fba3 1302 	umull	r1, r3, r3, r2
 800997e:	095b      	lsrs	r3, r3, #5
 8009980:	2164      	movs	r1, #100	; 0x64
 8009982:	fb01 f303 	mul.w	r3, r1, r3
 8009986:	1ad3      	subs	r3, r2, r3
 8009988:	00db      	lsls	r3, r3, #3
 800998a:	3332      	adds	r3, #50	; 0x32
 800998c:	4a27      	ldr	r2, [pc, #156]	; (8009a2c <UART_SetConfig+0x384>)
 800998e:	fba2 2303 	umull	r2, r3, r2, r3
 8009992:	095b      	lsrs	r3, r3, #5
 8009994:	005b      	lsls	r3, r3, #1
 8009996:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800999a:	4498      	add	r8, r3
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	461d      	mov	r5, r3
 80099a0:	f04f 0600 	mov.w	r6, #0
 80099a4:	46a9      	mov	r9, r5
 80099a6:	46b2      	mov	sl, r6
 80099a8:	eb19 0309 	adds.w	r3, r9, r9
 80099ac:	eb4a 040a 	adc.w	r4, sl, sl
 80099b0:	4699      	mov	r9, r3
 80099b2:	46a2      	mov	sl, r4
 80099b4:	eb19 0905 	adds.w	r9, r9, r5
 80099b8:	eb4a 0a06 	adc.w	sl, sl, r6
 80099bc:	f04f 0100 	mov.w	r1, #0
 80099c0:	f04f 0200 	mov.w	r2, #0
 80099c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80099c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80099cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80099d0:	4689      	mov	r9, r1
 80099d2:	4692      	mov	sl, r2
 80099d4:	eb19 0005 	adds.w	r0, r9, r5
 80099d8:	eb4a 0106 	adc.w	r1, sl, r6
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	461d      	mov	r5, r3
 80099e2:	f04f 0600 	mov.w	r6, #0
 80099e6:	196b      	adds	r3, r5, r5
 80099e8:	eb46 0406 	adc.w	r4, r6, r6
 80099ec:	461a      	mov	r2, r3
 80099ee:	4623      	mov	r3, r4
 80099f0:	f7f6 fc00 	bl	80001f4 <__aeabi_uldivmod>
 80099f4:	4603      	mov	r3, r0
 80099f6:	460c      	mov	r4, r1
 80099f8:	461a      	mov	r2, r3
 80099fa:	4b0c      	ldr	r3, [pc, #48]	; (8009a2c <UART_SetConfig+0x384>)
 80099fc:	fba3 1302 	umull	r1, r3, r3, r2
 8009a00:	095b      	lsrs	r3, r3, #5
 8009a02:	2164      	movs	r1, #100	; 0x64
 8009a04:	fb01 f303 	mul.w	r3, r1, r3
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	00db      	lsls	r3, r3, #3
 8009a0c:	3332      	adds	r3, #50	; 0x32
 8009a0e:	4a07      	ldr	r2, [pc, #28]	; (8009a2c <UART_SetConfig+0x384>)
 8009a10:	fba2 2303 	umull	r2, r3, r2, r3
 8009a14:	095b      	lsrs	r3, r3, #5
 8009a16:	f003 0207 	and.w	r2, r3, #7
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4442      	add	r2, r8
 8009a20:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009a22:	e1b2      	b.n	8009d8a <UART_SetConfig+0x6e2>
 8009a24:	40011000 	.word	0x40011000
 8009a28:	40011400 	.word	0x40011400
 8009a2c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4ad7      	ldr	r2, [pc, #860]	; (8009d94 <UART_SetConfig+0x6ec>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d005      	beq.n	8009a46 <UART_SetConfig+0x39e>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4ad6      	ldr	r2, [pc, #856]	; (8009d98 <UART_SetConfig+0x6f0>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	f040 80d1 	bne.w	8009be8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a46:	f7fe f823 	bl	8007a90 <HAL_RCC_GetPCLK2Freq>
 8009a4a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	469a      	mov	sl, r3
 8009a50:	f04f 0b00 	mov.w	fp, #0
 8009a54:	46d0      	mov	r8, sl
 8009a56:	46d9      	mov	r9, fp
 8009a58:	eb18 0308 	adds.w	r3, r8, r8
 8009a5c:	eb49 0409 	adc.w	r4, r9, r9
 8009a60:	4698      	mov	r8, r3
 8009a62:	46a1      	mov	r9, r4
 8009a64:	eb18 080a 	adds.w	r8, r8, sl
 8009a68:	eb49 090b 	adc.w	r9, r9, fp
 8009a6c:	f04f 0100 	mov.w	r1, #0
 8009a70:	f04f 0200 	mov.w	r2, #0
 8009a74:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009a78:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009a7c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009a80:	4688      	mov	r8, r1
 8009a82:	4691      	mov	r9, r2
 8009a84:	eb1a 0508 	adds.w	r5, sl, r8
 8009a88:	eb4b 0609 	adc.w	r6, fp, r9
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	4619      	mov	r1, r3
 8009a92:	f04f 0200 	mov.w	r2, #0
 8009a96:	f04f 0300 	mov.w	r3, #0
 8009a9a:	f04f 0400 	mov.w	r4, #0
 8009a9e:	0094      	lsls	r4, r2, #2
 8009aa0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009aa4:	008b      	lsls	r3, r1, #2
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	4623      	mov	r3, r4
 8009aaa:	4628      	mov	r0, r5
 8009aac:	4631      	mov	r1, r6
 8009aae:	f7f6 fba1 	bl	80001f4 <__aeabi_uldivmod>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	460c      	mov	r4, r1
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	4bb8      	ldr	r3, [pc, #736]	; (8009d9c <UART_SetConfig+0x6f4>)
 8009aba:	fba3 2302 	umull	r2, r3, r3, r2
 8009abe:	095b      	lsrs	r3, r3, #5
 8009ac0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	469b      	mov	fp, r3
 8009ac8:	f04f 0c00 	mov.w	ip, #0
 8009acc:	46d9      	mov	r9, fp
 8009ace:	46e2      	mov	sl, ip
 8009ad0:	eb19 0309 	adds.w	r3, r9, r9
 8009ad4:	eb4a 040a 	adc.w	r4, sl, sl
 8009ad8:	4699      	mov	r9, r3
 8009ada:	46a2      	mov	sl, r4
 8009adc:	eb19 090b 	adds.w	r9, r9, fp
 8009ae0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009ae4:	f04f 0100 	mov.w	r1, #0
 8009ae8:	f04f 0200 	mov.w	r2, #0
 8009aec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009af0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009af4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009af8:	4689      	mov	r9, r1
 8009afa:	4692      	mov	sl, r2
 8009afc:	eb1b 0509 	adds.w	r5, fp, r9
 8009b00:	eb4c 060a 	adc.w	r6, ip, sl
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	4619      	mov	r1, r3
 8009b0a:	f04f 0200 	mov.w	r2, #0
 8009b0e:	f04f 0300 	mov.w	r3, #0
 8009b12:	f04f 0400 	mov.w	r4, #0
 8009b16:	0094      	lsls	r4, r2, #2
 8009b18:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009b1c:	008b      	lsls	r3, r1, #2
 8009b1e:	461a      	mov	r2, r3
 8009b20:	4623      	mov	r3, r4
 8009b22:	4628      	mov	r0, r5
 8009b24:	4631      	mov	r1, r6
 8009b26:	f7f6 fb65 	bl	80001f4 <__aeabi_uldivmod>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	460c      	mov	r4, r1
 8009b2e:	461a      	mov	r2, r3
 8009b30:	4b9a      	ldr	r3, [pc, #616]	; (8009d9c <UART_SetConfig+0x6f4>)
 8009b32:	fba3 1302 	umull	r1, r3, r3, r2
 8009b36:	095b      	lsrs	r3, r3, #5
 8009b38:	2164      	movs	r1, #100	; 0x64
 8009b3a:	fb01 f303 	mul.w	r3, r1, r3
 8009b3e:	1ad3      	subs	r3, r2, r3
 8009b40:	011b      	lsls	r3, r3, #4
 8009b42:	3332      	adds	r3, #50	; 0x32
 8009b44:	4a95      	ldr	r2, [pc, #596]	; (8009d9c <UART_SetConfig+0x6f4>)
 8009b46:	fba2 2303 	umull	r2, r3, r2, r3
 8009b4a:	095b      	lsrs	r3, r3, #5
 8009b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b50:	4498      	add	r8, r3
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	469b      	mov	fp, r3
 8009b56:	f04f 0c00 	mov.w	ip, #0
 8009b5a:	46d9      	mov	r9, fp
 8009b5c:	46e2      	mov	sl, ip
 8009b5e:	eb19 0309 	adds.w	r3, r9, r9
 8009b62:	eb4a 040a 	adc.w	r4, sl, sl
 8009b66:	4699      	mov	r9, r3
 8009b68:	46a2      	mov	sl, r4
 8009b6a:	eb19 090b 	adds.w	r9, r9, fp
 8009b6e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009b72:	f04f 0100 	mov.w	r1, #0
 8009b76:	f04f 0200 	mov.w	r2, #0
 8009b7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009b82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009b86:	4689      	mov	r9, r1
 8009b88:	4692      	mov	sl, r2
 8009b8a:	eb1b 0509 	adds.w	r5, fp, r9
 8009b8e:	eb4c 060a 	adc.w	r6, ip, sl
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	4619      	mov	r1, r3
 8009b98:	f04f 0200 	mov.w	r2, #0
 8009b9c:	f04f 0300 	mov.w	r3, #0
 8009ba0:	f04f 0400 	mov.w	r4, #0
 8009ba4:	0094      	lsls	r4, r2, #2
 8009ba6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009baa:	008b      	lsls	r3, r1, #2
 8009bac:	461a      	mov	r2, r3
 8009bae:	4623      	mov	r3, r4
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	4631      	mov	r1, r6
 8009bb4:	f7f6 fb1e 	bl	80001f4 <__aeabi_uldivmod>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	460c      	mov	r4, r1
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	4b77      	ldr	r3, [pc, #476]	; (8009d9c <UART_SetConfig+0x6f4>)
 8009bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8009bc4:	095b      	lsrs	r3, r3, #5
 8009bc6:	2164      	movs	r1, #100	; 0x64
 8009bc8:	fb01 f303 	mul.w	r3, r1, r3
 8009bcc:	1ad3      	subs	r3, r2, r3
 8009bce:	011b      	lsls	r3, r3, #4
 8009bd0:	3332      	adds	r3, #50	; 0x32
 8009bd2:	4a72      	ldr	r2, [pc, #456]	; (8009d9c <UART_SetConfig+0x6f4>)
 8009bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8009bd8:	095b      	lsrs	r3, r3, #5
 8009bda:	f003 020f 	and.w	r2, r3, #15
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4442      	add	r2, r8
 8009be4:	609a      	str	r2, [r3, #8]
 8009be6:	e0d0      	b.n	8009d8a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009be8:	f7fd ff3e 	bl	8007a68 <HAL_RCC_GetPCLK1Freq>
 8009bec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	469a      	mov	sl, r3
 8009bf2:	f04f 0b00 	mov.w	fp, #0
 8009bf6:	46d0      	mov	r8, sl
 8009bf8:	46d9      	mov	r9, fp
 8009bfa:	eb18 0308 	adds.w	r3, r8, r8
 8009bfe:	eb49 0409 	adc.w	r4, r9, r9
 8009c02:	4698      	mov	r8, r3
 8009c04:	46a1      	mov	r9, r4
 8009c06:	eb18 080a 	adds.w	r8, r8, sl
 8009c0a:	eb49 090b 	adc.w	r9, r9, fp
 8009c0e:	f04f 0100 	mov.w	r1, #0
 8009c12:	f04f 0200 	mov.w	r2, #0
 8009c16:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009c1a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009c1e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009c22:	4688      	mov	r8, r1
 8009c24:	4691      	mov	r9, r2
 8009c26:	eb1a 0508 	adds.w	r5, sl, r8
 8009c2a:	eb4b 0609 	adc.w	r6, fp, r9
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	4619      	mov	r1, r3
 8009c34:	f04f 0200 	mov.w	r2, #0
 8009c38:	f04f 0300 	mov.w	r3, #0
 8009c3c:	f04f 0400 	mov.w	r4, #0
 8009c40:	0094      	lsls	r4, r2, #2
 8009c42:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009c46:	008b      	lsls	r3, r1, #2
 8009c48:	461a      	mov	r2, r3
 8009c4a:	4623      	mov	r3, r4
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	4631      	mov	r1, r6
 8009c50:	f7f6 fad0 	bl	80001f4 <__aeabi_uldivmod>
 8009c54:	4603      	mov	r3, r0
 8009c56:	460c      	mov	r4, r1
 8009c58:	461a      	mov	r2, r3
 8009c5a:	4b50      	ldr	r3, [pc, #320]	; (8009d9c <UART_SetConfig+0x6f4>)
 8009c5c:	fba3 2302 	umull	r2, r3, r3, r2
 8009c60:	095b      	lsrs	r3, r3, #5
 8009c62:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	469b      	mov	fp, r3
 8009c6a:	f04f 0c00 	mov.w	ip, #0
 8009c6e:	46d9      	mov	r9, fp
 8009c70:	46e2      	mov	sl, ip
 8009c72:	eb19 0309 	adds.w	r3, r9, r9
 8009c76:	eb4a 040a 	adc.w	r4, sl, sl
 8009c7a:	4699      	mov	r9, r3
 8009c7c:	46a2      	mov	sl, r4
 8009c7e:	eb19 090b 	adds.w	r9, r9, fp
 8009c82:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009c86:	f04f 0100 	mov.w	r1, #0
 8009c8a:	f04f 0200 	mov.w	r2, #0
 8009c8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009c96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009c9a:	4689      	mov	r9, r1
 8009c9c:	4692      	mov	sl, r2
 8009c9e:	eb1b 0509 	adds.w	r5, fp, r9
 8009ca2:	eb4c 060a 	adc.w	r6, ip, sl
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	4619      	mov	r1, r3
 8009cac:	f04f 0200 	mov.w	r2, #0
 8009cb0:	f04f 0300 	mov.w	r3, #0
 8009cb4:	f04f 0400 	mov.w	r4, #0
 8009cb8:	0094      	lsls	r4, r2, #2
 8009cba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009cbe:	008b      	lsls	r3, r1, #2
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	4623      	mov	r3, r4
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	4631      	mov	r1, r6
 8009cc8:	f7f6 fa94 	bl	80001f4 <__aeabi_uldivmod>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	460c      	mov	r4, r1
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	4b32      	ldr	r3, [pc, #200]	; (8009d9c <UART_SetConfig+0x6f4>)
 8009cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8009cd8:	095b      	lsrs	r3, r3, #5
 8009cda:	2164      	movs	r1, #100	; 0x64
 8009cdc:	fb01 f303 	mul.w	r3, r1, r3
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	011b      	lsls	r3, r3, #4
 8009ce4:	3332      	adds	r3, #50	; 0x32
 8009ce6:	4a2d      	ldr	r2, [pc, #180]	; (8009d9c <UART_SetConfig+0x6f4>)
 8009ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8009cec:	095b      	lsrs	r3, r3, #5
 8009cee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009cf2:	4498      	add	r8, r3
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	469b      	mov	fp, r3
 8009cf8:	f04f 0c00 	mov.w	ip, #0
 8009cfc:	46d9      	mov	r9, fp
 8009cfe:	46e2      	mov	sl, ip
 8009d00:	eb19 0309 	adds.w	r3, r9, r9
 8009d04:	eb4a 040a 	adc.w	r4, sl, sl
 8009d08:	4699      	mov	r9, r3
 8009d0a:	46a2      	mov	sl, r4
 8009d0c:	eb19 090b 	adds.w	r9, r9, fp
 8009d10:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009d14:	f04f 0100 	mov.w	r1, #0
 8009d18:	f04f 0200 	mov.w	r2, #0
 8009d1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d20:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009d24:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009d28:	4689      	mov	r9, r1
 8009d2a:	4692      	mov	sl, r2
 8009d2c:	eb1b 0509 	adds.w	r5, fp, r9
 8009d30:	eb4c 060a 	adc.w	r6, ip, sl
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	4619      	mov	r1, r3
 8009d3a:	f04f 0200 	mov.w	r2, #0
 8009d3e:	f04f 0300 	mov.w	r3, #0
 8009d42:	f04f 0400 	mov.w	r4, #0
 8009d46:	0094      	lsls	r4, r2, #2
 8009d48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009d4c:	008b      	lsls	r3, r1, #2
 8009d4e:	461a      	mov	r2, r3
 8009d50:	4623      	mov	r3, r4
 8009d52:	4628      	mov	r0, r5
 8009d54:	4631      	mov	r1, r6
 8009d56:	f7f6 fa4d 	bl	80001f4 <__aeabi_uldivmod>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	460c      	mov	r4, r1
 8009d5e:	461a      	mov	r2, r3
 8009d60:	4b0e      	ldr	r3, [pc, #56]	; (8009d9c <UART_SetConfig+0x6f4>)
 8009d62:	fba3 1302 	umull	r1, r3, r3, r2
 8009d66:	095b      	lsrs	r3, r3, #5
 8009d68:	2164      	movs	r1, #100	; 0x64
 8009d6a:	fb01 f303 	mul.w	r3, r1, r3
 8009d6e:	1ad3      	subs	r3, r2, r3
 8009d70:	011b      	lsls	r3, r3, #4
 8009d72:	3332      	adds	r3, #50	; 0x32
 8009d74:	4a09      	ldr	r2, [pc, #36]	; (8009d9c <UART_SetConfig+0x6f4>)
 8009d76:	fba2 2303 	umull	r2, r3, r2, r3
 8009d7a:	095b      	lsrs	r3, r3, #5
 8009d7c:	f003 020f 	and.w	r2, r3, #15
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4442      	add	r2, r8
 8009d86:	609a      	str	r2, [r3, #8]
}
 8009d88:	e7ff      	b.n	8009d8a <UART_SetConfig+0x6e2>
 8009d8a:	bf00      	nop
 8009d8c:	3714      	adds	r7, #20
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d94:	40011000 	.word	0x40011000
 8009d98:	40011400 	.word	0x40011400
 8009d9c:	51eb851f 	.word	0x51eb851f

08009da0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009da0:	b084      	sub	sp, #16
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b084      	sub	sp, #16
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
 8009daa:	f107 001c 	add.w	r0, r7, #28
 8009dae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d122      	bne.n	8009dfe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009de0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d105      	bne.n	8009df2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f001 fac6 	bl	800b384 <USB_CoreReset>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	73fb      	strb	r3, [r7, #15]
 8009dfc:	e01a      	b.n	8009e34 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f001 faba 	bl	800b384 <USB_CoreReset>
 8009e10:	4603      	mov	r3, r0
 8009e12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d106      	bne.n	8009e28 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	639a      	str	r2, [r3, #56]	; 0x38
 8009e26:	e005      	b.n	8009e34 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d10b      	bne.n	8009e52 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	f043 0206 	orr.w	r2, r3, #6
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	689b      	ldr	r3, [r3, #8]
 8009e4a:	f043 0220 	orr.w	r2, r3, #32
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3710      	adds	r7, #16
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e5e:	b004      	add	sp, #16
 8009e60:	4770      	bx	lr
	...

08009e64 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b087      	sub	sp, #28
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	4613      	mov	r3, r2
 8009e70:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009e72:	79fb      	ldrb	r3, [r7, #7]
 8009e74:	2b02      	cmp	r3, #2
 8009e76:	d165      	bne.n	8009f44 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	4a41      	ldr	r2, [pc, #260]	; (8009f80 <USB_SetTurnaroundTime+0x11c>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d906      	bls.n	8009e8e <USB_SetTurnaroundTime+0x2a>
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	4a40      	ldr	r2, [pc, #256]	; (8009f84 <USB_SetTurnaroundTime+0x120>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d802      	bhi.n	8009e8e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009e88:	230f      	movs	r3, #15
 8009e8a:	617b      	str	r3, [r7, #20]
 8009e8c:	e062      	b.n	8009f54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	4a3c      	ldr	r2, [pc, #240]	; (8009f84 <USB_SetTurnaroundTime+0x120>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d906      	bls.n	8009ea4 <USB_SetTurnaroundTime+0x40>
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	4a3b      	ldr	r2, [pc, #236]	; (8009f88 <USB_SetTurnaroundTime+0x124>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d802      	bhi.n	8009ea4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009e9e:	230e      	movs	r3, #14
 8009ea0:	617b      	str	r3, [r7, #20]
 8009ea2:	e057      	b.n	8009f54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	4a38      	ldr	r2, [pc, #224]	; (8009f88 <USB_SetTurnaroundTime+0x124>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d906      	bls.n	8009eba <USB_SetTurnaroundTime+0x56>
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	4a37      	ldr	r2, [pc, #220]	; (8009f8c <USB_SetTurnaroundTime+0x128>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d802      	bhi.n	8009eba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009eb4:	230d      	movs	r3, #13
 8009eb6:	617b      	str	r3, [r7, #20]
 8009eb8:	e04c      	b.n	8009f54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	4a33      	ldr	r2, [pc, #204]	; (8009f8c <USB_SetTurnaroundTime+0x128>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d906      	bls.n	8009ed0 <USB_SetTurnaroundTime+0x6c>
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	4a32      	ldr	r2, [pc, #200]	; (8009f90 <USB_SetTurnaroundTime+0x12c>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d802      	bhi.n	8009ed0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009eca:	230c      	movs	r3, #12
 8009ecc:	617b      	str	r3, [r7, #20]
 8009ece:	e041      	b.n	8009f54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	4a2f      	ldr	r2, [pc, #188]	; (8009f90 <USB_SetTurnaroundTime+0x12c>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d906      	bls.n	8009ee6 <USB_SetTurnaroundTime+0x82>
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	4a2e      	ldr	r2, [pc, #184]	; (8009f94 <USB_SetTurnaroundTime+0x130>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d802      	bhi.n	8009ee6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009ee0:	230b      	movs	r3, #11
 8009ee2:	617b      	str	r3, [r7, #20]
 8009ee4:	e036      	b.n	8009f54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	4a2a      	ldr	r2, [pc, #168]	; (8009f94 <USB_SetTurnaroundTime+0x130>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d906      	bls.n	8009efc <USB_SetTurnaroundTime+0x98>
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	4a29      	ldr	r2, [pc, #164]	; (8009f98 <USB_SetTurnaroundTime+0x134>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d802      	bhi.n	8009efc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009ef6:	230a      	movs	r3, #10
 8009ef8:	617b      	str	r3, [r7, #20]
 8009efa:	e02b      	b.n	8009f54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	4a26      	ldr	r2, [pc, #152]	; (8009f98 <USB_SetTurnaroundTime+0x134>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d906      	bls.n	8009f12 <USB_SetTurnaroundTime+0xae>
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	4a25      	ldr	r2, [pc, #148]	; (8009f9c <USB_SetTurnaroundTime+0x138>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d802      	bhi.n	8009f12 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009f0c:	2309      	movs	r3, #9
 8009f0e:	617b      	str	r3, [r7, #20]
 8009f10:	e020      	b.n	8009f54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	4a21      	ldr	r2, [pc, #132]	; (8009f9c <USB_SetTurnaroundTime+0x138>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d906      	bls.n	8009f28 <USB_SetTurnaroundTime+0xc4>
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	4a20      	ldr	r2, [pc, #128]	; (8009fa0 <USB_SetTurnaroundTime+0x13c>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d802      	bhi.n	8009f28 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009f22:	2308      	movs	r3, #8
 8009f24:	617b      	str	r3, [r7, #20]
 8009f26:	e015      	b.n	8009f54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	4a1d      	ldr	r2, [pc, #116]	; (8009fa0 <USB_SetTurnaroundTime+0x13c>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d906      	bls.n	8009f3e <USB_SetTurnaroundTime+0xda>
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	4a1c      	ldr	r2, [pc, #112]	; (8009fa4 <USB_SetTurnaroundTime+0x140>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d802      	bhi.n	8009f3e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009f38:	2307      	movs	r3, #7
 8009f3a:	617b      	str	r3, [r7, #20]
 8009f3c:	e00a      	b.n	8009f54 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009f3e:	2306      	movs	r3, #6
 8009f40:	617b      	str	r3, [r7, #20]
 8009f42:	e007      	b.n	8009f54 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009f44:	79fb      	ldrb	r3, [r7, #7]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d102      	bne.n	8009f50 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009f4a:	2309      	movs	r3, #9
 8009f4c:	617b      	str	r3, [r7, #20]
 8009f4e:	e001      	b.n	8009f54 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009f50:	2309      	movs	r3, #9
 8009f52:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	68da      	ldr	r2, [r3, #12]
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	029b      	lsls	r3, r3, #10
 8009f68:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009f6c:	431a      	orrs	r2, r3
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009f72:	2300      	movs	r3, #0
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	371c      	adds	r7, #28
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr
 8009f80:	00d8acbf 	.word	0x00d8acbf
 8009f84:	00e4e1bf 	.word	0x00e4e1bf
 8009f88:	00f423ff 	.word	0x00f423ff
 8009f8c:	0106737f 	.word	0x0106737f
 8009f90:	011a499f 	.word	0x011a499f
 8009f94:	01312cff 	.word	0x01312cff
 8009f98:	014ca43f 	.word	0x014ca43f
 8009f9c:	016e35ff 	.word	0x016e35ff
 8009fa0:	01a6ab1f 	.word	0x01a6ab1f
 8009fa4:	01e847ff 	.word	0x01e847ff

08009fa8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	f043 0201 	orr.w	r2, r3, #1
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009fbc:	2300      	movs	r3, #0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	370c      	adds	r7, #12
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr

08009fca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009fca:	b480      	push	{r7}
 8009fcc:	b083      	sub	sp, #12
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	f023 0201 	bic.w	r2, r3, #1
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a004:	78fb      	ldrb	r3, [r7, #3]
 800a006:	2b01      	cmp	r3, #1
 800a008:	d106      	bne.n	800a018 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	68db      	ldr	r3, [r3, #12]
 800a00e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	60da      	str	r2, [r3, #12]
 800a016:	e00b      	b.n	800a030 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a018:	78fb      	ldrb	r3, [r7, #3]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d106      	bne.n	800a02c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	60da      	str	r2, [r3, #12]
 800a02a:	e001      	b.n	800a030 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a02c:	2301      	movs	r3, #1
 800a02e:	e003      	b.n	800a038 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a030:	2032      	movs	r0, #50	; 0x32
 800a032:	f7f7 feeb 	bl	8001e0c <HAL_Delay>

  return HAL_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3708      	adds	r7, #8
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a040:	b084      	sub	sp, #16
 800a042:	b580      	push	{r7, lr}
 800a044:	b086      	sub	sp, #24
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
 800a04a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a04e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a052:	2300      	movs	r3, #0
 800a054:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a05a:	2300      	movs	r3, #0
 800a05c:	613b      	str	r3, [r7, #16]
 800a05e:	e009      	b.n	800a074 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	3340      	adds	r3, #64	; 0x40
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	4413      	add	r3, r2
 800a06a:	2200      	movs	r2, #0
 800a06c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	3301      	adds	r3, #1
 800a072:	613b      	str	r3, [r7, #16]
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	2b0e      	cmp	r3, #14
 800a078:	d9f2      	bls.n	800a060 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a07a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d11c      	bne.n	800a0ba <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a08e:	f043 0302 	orr.w	r3, r3, #2
 800a092:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a098:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	639a      	str	r2, [r3, #56]	; 0x38
 800a0b8:	e00b      	b.n	800a0d2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0be:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a0d8:	461a      	mov	r2, r3
 800a0da:	2300      	movs	r3, #0
 800a0dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	680b      	ldr	r3, [r1, #0]
 800a0f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d10c      	bne.n	800a112 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d104      	bne.n	800a108 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a0fe:	2100      	movs	r1, #0
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 f949 	bl	800a398 <USB_SetDevSpeed>
 800a106:	e008      	b.n	800a11a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a108:	2101      	movs	r1, #1
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 f944 	bl	800a398 <USB_SetDevSpeed>
 800a110:	e003      	b.n	800a11a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a112:	2103      	movs	r1, #3
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 f93f 	bl	800a398 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a11a:	2110      	movs	r1, #16
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 f8f3 	bl	800a308 <USB_FlushTxFifo>
 800a122:	4603      	mov	r3, r0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d001      	beq.n	800a12c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a128:	2301      	movs	r3, #1
 800a12a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 f911 	bl	800a354 <USB_FlushRxFifo>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d001      	beq.n	800a13c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a142:	461a      	mov	r2, r3
 800a144:	2300      	movs	r3, #0
 800a146:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a14e:	461a      	mov	r2, r3
 800a150:	2300      	movs	r3, #0
 800a152:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a15a:	461a      	mov	r2, r3
 800a15c:	2300      	movs	r3, #0
 800a15e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a160:	2300      	movs	r3, #0
 800a162:	613b      	str	r3, [r7, #16]
 800a164:	e043      	b.n	800a1ee <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	015a      	lsls	r2, r3, #5
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	4413      	add	r3, r2
 800a16e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a178:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a17c:	d118      	bne.n	800a1b0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d10a      	bne.n	800a19a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	015a      	lsls	r2, r3, #5
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	4413      	add	r3, r2
 800a18c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a190:	461a      	mov	r2, r3
 800a192:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a196:	6013      	str	r3, [r2, #0]
 800a198:	e013      	b.n	800a1c2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	015a      	lsls	r2, r3, #5
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	4413      	add	r3, r2
 800a1a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a1ac:	6013      	str	r3, [r2, #0]
 800a1ae:	e008      	b.n	800a1c2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	015a      	lsls	r2, r3, #5
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1bc:	461a      	mov	r2, r3
 800a1be:	2300      	movs	r3, #0
 800a1c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	015a      	lsls	r2, r3, #5
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	015a      	lsls	r2, r3, #5
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	4413      	add	r3, r2
 800a1dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a1e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	613b      	str	r3, [r7, #16]
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d3b7      	bcc.n	800a166 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	613b      	str	r3, [r7, #16]
 800a1fa:	e043      	b.n	800a284 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	015a      	lsls	r2, r3, #5
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	4413      	add	r3, r2
 800a204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a20e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a212:	d118      	bne.n	800a246 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d10a      	bne.n	800a230 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	015a      	lsls	r2, r3, #5
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	4413      	add	r3, r2
 800a222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a226:	461a      	mov	r2, r3
 800a228:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a22c:	6013      	str	r3, [r2, #0]
 800a22e:	e013      	b.n	800a258 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	015a      	lsls	r2, r3, #5
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	4413      	add	r3, r2
 800a238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a23c:	461a      	mov	r2, r3
 800a23e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a242:	6013      	str	r3, [r2, #0]
 800a244:	e008      	b.n	800a258 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	015a      	lsls	r2, r3, #5
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	4413      	add	r3, r2
 800a24e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a252:	461a      	mov	r2, r3
 800a254:	2300      	movs	r3, #0
 800a256:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	015a      	lsls	r2, r3, #5
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	4413      	add	r3, r2
 800a260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a264:	461a      	mov	r2, r3
 800a266:	2300      	movs	r3, #0
 800a268:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	015a      	lsls	r2, r3, #5
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	4413      	add	r3, r2
 800a272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a276:	461a      	mov	r2, r3
 800a278:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a27c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	3301      	adds	r3, #1
 800a282:	613b      	str	r3, [r7, #16]
 800a284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a286:	693a      	ldr	r2, [r7, #16]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d3b7      	bcc.n	800a1fc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a29a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a29e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a2ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d105      	bne.n	800a2c0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	699b      	ldr	r3, [r3, #24]
 800a2b8:	f043 0210 	orr.w	r2, r3, #16
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	699a      	ldr	r2, [r3, #24]
 800a2c4:	4b0f      	ldr	r3, [pc, #60]	; (800a304 <USB_DevInit+0x2c4>)
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a2cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d005      	beq.n	800a2de <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	699b      	ldr	r3, [r3, #24]
 800a2d6:	f043 0208 	orr.w	r2, r3, #8
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a2de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d107      	bne.n	800a2f4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	699b      	ldr	r3, [r3, #24]
 800a2e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a2ec:	f043 0304 	orr.w	r3, r3, #4
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a2f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3718      	adds	r7, #24
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a300:	b004      	add	sp, #16
 800a302:	4770      	bx	lr
 800a304:	803c3800 	.word	0x803c3800

0800a308 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a308:	b480      	push	{r7}
 800a30a:	b085      	sub	sp, #20
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a312:	2300      	movs	r3, #0
 800a314:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	019b      	lsls	r3, r3, #6
 800a31a:	f043 0220 	orr.w	r2, r3, #32
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	3301      	adds	r3, #1
 800a326:	60fb      	str	r3, [r7, #12]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	4a09      	ldr	r2, [pc, #36]	; (800a350 <USB_FlushTxFifo+0x48>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d901      	bls.n	800a334 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a330:	2303      	movs	r3, #3
 800a332:	e006      	b.n	800a342 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	f003 0320 	and.w	r3, r3, #32
 800a33c:	2b20      	cmp	r3, #32
 800a33e:	d0f0      	beq.n	800a322 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	3714      	adds	r7, #20
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr
 800a34e:	bf00      	nop
 800a350:	00030d40 	.word	0x00030d40

0800a354 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a35c:	2300      	movs	r3, #0
 800a35e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2210      	movs	r2, #16
 800a364:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	3301      	adds	r3, #1
 800a36a:	60fb      	str	r3, [r7, #12]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	4a09      	ldr	r2, [pc, #36]	; (800a394 <USB_FlushRxFifo+0x40>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d901      	bls.n	800a378 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a374:	2303      	movs	r3, #3
 800a376:	e006      	b.n	800a386 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	691b      	ldr	r3, [r3, #16]
 800a37c:	f003 0310 	and.w	r3, r3, #16
 800a380:	2b10      	cmp	r3, #16
 800a382:	d0f0      	beq.n	800a366 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a384:	2300      	movs	r3, #0
}
 800a386:	4618      	mov	r0, r3
 800a388:	3714      	adds	r7, #20
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr
 800a392:	bf00      	nop
 800a394:	00030d40 	.word	0x00030d40

0800a398 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3ae:	681a      	ldr	r2, [r3, #0]
 800a3b0:	78fb      	ldrb	r3, [r7, #3]
 800a3b2:	68f9      	ldr	r1, [r7, #12]
 800a3b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3714      	adds	r7, #20
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr

0800a3ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a3ca:	b480      	push	{r7}
 800a3cc:	b087      	sub	sp, #28
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	f003 0306 	and.w	r3, r3, #6
 800a3e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d102      	bne.n	800a3f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	75fb      	strb	r3, [r7, #23]
 800a3ee:	e00a      	b.n	800a406 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2b02      	cmp	r3, #2
 800a3f4:	d002      	beq.n	800a3fc <USB_GetDevSpeed+0x32>
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2b06      	cmp	r3, #6
 800a3fa:	d102      	bne.n	800a402 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a3fc:	2302      	movs	r3, #2
 800a3fe:	75fb      	strb	r3, [r7, #23]
 800a400:	e001      	b.n	800a406 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a402:	230f      	movs	r3, #15
 800a404:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a406:	7dfb      	ldrb	r3, [r7, #23]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	371c      	adds	r7, #28
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a414:	b480      	push	{r7}
 800a416:	b085      	sub	sp, #20
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	785b      	ldrb	r3, [r3, #1]
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d13a      	bne.n	800a4a6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a436:	69da      	ldr	r2, [r3, #28]
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	f003 030f 	and.w	r3, r3, #15
 800a440:	2101      	movs	r1, #1
 800a442:	fa01 f303 	lsl.w	r3, r1, r3
 800a446:	b29b      	uxth	r3, r3
 800a448:	68f9      	ldr	r1, [r7, #12]
 800a44a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a44e:	4313      	orrs	r3, r2
 800a450:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	015a      	lsls	r2, r3, #5
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	4413      	add	r3, r2
 800a45a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a464:	2b00      	cmp	r3, #0
 800a466:	d155      	bne.n	800a514 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	015a      	lsls	r2, r3, #5
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	4413      	add	r3, r2
 800a470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	78db      	ldrb	r3, [r3, #3]
 800a482:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a484:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	059b      	lsls	r3, r3, #22
 800a48a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a48c:	4313      	orrs	r3, r2
 800a48e:	68ba      	ldr	r2, [r7, #8]
 800a490:	0151      	lsls	r1, r2, #5
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	440a      	add	r2, r1
 800a496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a49a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a49e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4a2:	6013      	str	r3, [r2, #0]
 800a4a4:	e036      	b.n	800a514 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4ac:	69da      	ldr	r2, [r3, #28]
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	f003 030f 	and.w	r3, r3, #15
 800a4b6:	2101      	movs	r1, #1
 800a4b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a4bc:	041b      	lsls	r3, r3, #16
 800a4be:	68f9      	ldr	r1, [r7, #12]
 800a4c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	015a      	lsls	r2, r3, #5
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	4413      	add	r3, r2
 800a4d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d11a      	bne.n	800a514 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	015a      	lsls	r2, r3, #5
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	78db      	ldrb	r3, [r3, #3]
 800a4f8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a4fa:	430b      	orrs	r3, r1
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	68ba      	ldr	r2, [r7, #8]
 800a500:	0151      	lsls	r1, r2, #5
 800a502:	68fa      	ldr	r2, [r7, #12]
 800a504:	440a      	add	r2, r1
 800a506:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a50a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a50e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a512:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	3714      	adds	r7, #20
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr
	...

0800a524 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a524:	b480      	push	{r7}
 800a526:	b085      	sub	sp, #20
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	785b      	ldrb	r3, [r3, #1]
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d161      	bne.n	800a604 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	015a      	lsls	r2, r3, #5
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	4413      	add	r3, r2
 800a548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a552:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a556:	d11f      	bne.n	800a598 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	015a      	lsls	r2, r3, #5
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	4413      	add	r3, r2
 800a560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	0151      	lsls	r1, r2, #5
 800a56a:	68fa      	ldr	r2, [r7, #12]
 800a56c:	440a      	add	r2, r1
 800a56e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a572:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a576:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	015a      	lsls	r2, r3, #5
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	4413      	add	r3, r2
 800a580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	68ba      	ldr	r2, [r7, #8]
 800a588:	0151      	lsls	r1, r2, #5
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	440a      	add	r2, r1
 800a58e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a592:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a596:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a59e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	f003 030f 	and.w	r3, r3, #15
 800a5a8:	2101      	movs	r1, #1
 800a5aa:	fa01 f303 	lsl.w	r3, r1, r3
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	43db      	mvns	r3, r3
 800a5b2:	68f9      	ldr	r1, [r7, #12]
 800a5b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a5b8:	4013      	ands	r3, r2
 800a5ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5c2:	69da      	ldr	r2, [r3, #28]
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	f003 030f 	and.w	r3, r3, #15
 800a5cc:	2101      	movs	r1, #1
 800a5ce:	fa01 f303 	lsl.w	r3, r1, r3
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	43db      	mvns	r3, r3
 800a5d6:	68f9      	ldr	r1, [r7, #12]
 800a5d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a5dc:	4013      	ands	r3, r2
 800a5de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	015a      	lsls	r2, r3, #5
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	0159      	lsls	r1, r3, #5
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	440b      	add	r3, r1
 800a5f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	4b35      	ldr	r3, [pc, #212]	; (800a6d4 <USB_DeactivateEndpoint+0x1b0>)
 800a5fe:	4013      	ands	r3, r2
 800a600:	600b      	str	r3, [r1, #0]
 800a602:	e060      	b.n	800a6c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	015a      	lsls	r2, r3, #5
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	4413      	add	r3, r2
 800a60c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a616:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a61a:	d11f      	bne.n	800a65c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	015a      	lsls	r2, r3, #5
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	4413      	add	r3, r2
 800a624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	68ba      	ldr	r2, [r7, #8]
 800a62c:	0151      	lsls	r1, r2, #5
 800a62e:	68fa      	ldr	r2, [r7, #12]
 800a630:	440a      	add	r2, r1
 800a632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a636:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a63a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	015a      	lsls	r2, r3, #5
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	4413      	add	r3, r2
 800a644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	68ba      	ldr	r2, [r7, #8]
 800a64c:	0151      	lsls	r1, r2, #5
 800a64e:	68fa      	ldr	r2, [r7, #12]
 800a650:	440a      	add	r2, r1
 800a652:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a656:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a65a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a662:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	f003 030f 	and.w	r3, r3, #15
 800a66c:	2101      	movs	r1, #1
 800a66e:	fa01 f303 	lsl.w	r3, r1, r3
 800a672:	041b      	lsls	r3, r3, #16
 800a674:	43db      	mvns	r3, r3
 800a676:	68f9      	ldr	r1, [r7, #12]
 800a678:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a67c:	4013      	ands	r3, r2
 800a67e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a686:	69da      	ldr	r2, [r3, #28]
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	781b      	ldrb	r3, [r3, #0]
 800a68c:	f003 030f 	and.w	r3, r3, #15
 800a690:	2101      	movs	r1, #1
 800a692:	fa01 f303 	lsl.w	r3, r1, r3
 800a696:	041b      	lsls	r3, r3, #16
 800a698:	43db      	mvns	r3, r3
 800a69a:	68f9      	ldr	r1, [r7, #12]
 800a69c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6a0:	4013      	ands	r3, r2
 800a6a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	015a      	lsls	r2, r3, #5
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6b0:	681a      	ldr	r2, [r3, #0]
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	0159      	lsls	r1, r3, #5
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	440b      	add	r3, r1
 800a6ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6be:	4619      	mov	r1, r3
 800a6c0:	4b05      	ldr	r3, [pc, #20]	; (800a6d8 <USB_DeactivateEndpoint+0x1b4>)
 800a6c2:	4013      	ands	r3, r2
 800a6c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3714      	adds	r7, #20
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr
 800a6d4:	ec337800 	.word	0xec337800
 800a6d8:	eff37800 	.word	0xeff37800

0800a6dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b08a      	sub	sp, #40	; 0x28
 800a6e0:	af02      	add	r7, sp, #8
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	785b      	ldrb	r3, [r3, #1]
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	f040 815c 	bne.w	800a9b6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	695b      	ldr	r3, [r3, #20]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d132      	bne.n	800a76c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	015a      	lsls	r2, r3, #5
 800a70a:	69fb      	ldr	r3, [r7, #28]
 800a70c:	4413      	add	r3, r2
 800a70e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a712:	691b      	ldr	r3, [r3, #16]
 800a714:	69ba      	ldr	r2, [r7, #24]
 800a716:	0151      	lsls	r1, r2, #5
 800a718:	69fa      	ldr	r2, [r7, #28]
 800a71a:	440a      	add	r2, r1
 800a71c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a720:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a724:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a728:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	015a      	lsls	r2, r3, #5
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	4413      	add	r3, r2
 800a732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a736:	691b      	ldr	r3, [r3, #16]
 800a738:	69ba      	ldr	r2, [r7, #24]
 800a73a:	0151      	lsls	r1, r2, #5
 800a73c:	69fa      	ldr	r2, [r7, #28]
 800a73e:	440a      	add	r2, r1
 800a740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a744:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a748:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a74a:	69bb      	ldr	r3, [r7, #24]
 800a74c:	015a      	lsls	r2, r3, #5
 800a74e:	69fb      	ldr	r3, [r7, #28]
 800a750:	4413      	add	r3, r2
 800a752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a756:	691b      	ldr	r3, [r3, #16]
 800a758:	69ba      	ldr	r2, [r7, #24]
 800a75a:	0151      	lsls	r1, r2, #5
 800a75c:	69fa      	ldr	r2, [r7, #28]
 800a75e:	440a      	add	r2, r1
 800a760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a764:	0cdb      	lsrs	r3, r3, #19
 800a766:	04db      	lsls	r3, r3, #19
 800a768:	6113      	str	r3, [r2, #16]
 800a76a:	e074      	b.n	800a856 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a76c:	69bb      	ldr	r3, [r7, #24]
 800a76e:	015a      	lsls	r2, r3, #5
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	4413      	add	r3, r2
 800a774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a778:	691b      	ldr	r3, [r3, #16]
 800a77a:	69ba      	ldr	r2, [r7, #24]
 800a77c:	0151      	lsls	r1, r2, #5
 800a77e:	69fa      	ldr	r2, [r7, #28]
 800a780:	440a      	add	r2, r1
 800a782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a786:	0cdb      	lsrs	r3, r3, #19
 800a788:	04db      	lsls	r3, r3, #19
 800a78a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a78c:	69bb      	ldr	r3, [r7, #24]
 800a78e:	015a      	lsls	r2, r3, #5
 800a790:	69fb      	ldr	r3, [r7, #28]
 800a792:	4413      	add	r3, r2
 800a794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a798:	691b      	ldr	r3, [r3, #16]
 800a79a:	69ba      	ldr	r2, [r7, #24]
 800a79c:	0151      	lsls	r1, r2, #5
 800a79e:	69fa      	ldr	r2, [r7, #28]
 800a7a0:	440a      	add	r2, r1
 800a7a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a7aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a7ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	015a      	lsls	r2, r3, #5
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7bc:	691a      	ldr	r2, [r3, #16]
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	6959      	ldr	r1, [r3, #20]
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	440b      	add	r3, r1
 800a7c8:	1e59      	subs	r1, r3, #1
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	689b      	ldr	r3, [r3, #8]
 800a7ce:	fbb1 f3f3 	udiv	r3, r1, r3
 800a7d2:	04d9      	lsls	r1, r3, #19
 800a7d4:	4b9d      	ldr	r3, [pc, #628]	; (800aa4c <USB_EPStartXfer+0x370>)
 800a7d6:	400b      	ands	r3, r1
 800a7d8:	69b9      	ldr	r1, [r7, #24]
 800a7da:	0148      	lsls	r0, r1, #5
 800a7dc:	69f9      	ldr	r1, [r7, #28]
 800a7de:	4401      	add	r1, r0
 800a7e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	015a      	lsls	r2, r3, #5
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7f4:	691a      	ldr	r2, [r3, #16]
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	695b      	ldr	r3, [r3, #20]
 800a7fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7fe:	69b9      	ldr	r1, [r7, #24]
 800a800:	0148      	lsls	r0, r1, #5
 800a802:	69f9      	ldr	r1, [r7, #28]
 800a804:	4401      	add	r1, r0
 800a806:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a80a:	4313      	orrs	r3, r2
 800a80c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	78db      	ldrb	r3, [r3, #3]
 800a812:	2b01      	cmp	r3, #1
 800a814:	d11f      	bne.n	800a856 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	015a      	lsls	r2, r3, #5
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	4413      	add	r3, r2
 800a81e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a822:	691b      	ldr	r3, [r3, #16]
 800a824:	69ba      	ldr	r2, [r7, #24]
 800a826:	0151      	lsls	r1, r2, #5
 800a828:	69fa      	ldr	r2, [r7, #28]
 800a82a:	440a      	add	r2, r1
 800a82c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a830:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a834:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	015a      	lsls	r2, r3, #5
 800a83a:	69fb      	ldr	r3, [r7, #28]
 800a83c:	4413      	add	r3, r2
 800a83e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a842:	691b      	ldr	r3, [r3, #16]
 800a844:	69ba      	ldr	r2, [r7, #24]
 800a846:	0151      	lsls	r1, r2, #5
 800a848:	69fa      	ldr	r2, [r7, #28]
 800a84a:	440a      	add	r2, r1
 800a84c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a850:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a854:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a856:	79fb      	ldrb	r3, [r7, #7]
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d14b      	bne.n	800a8f4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	691b      	ldr	r3, [r3, #16]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d009      	beq.n	800a878 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a864:	69bb      	ldr	r3, [r7, #24]
 800a866:	015a      	lsls	r2, r3, #5
 800a868:	69fb      	ldr	r3, [r7, #28]
 800a86a:	4413      	add	r3, r2
 800a86c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a870:	461a      	mov	r2, r3
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	78db      	ldrb	r3, [r3, #3]
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d128      	bne.n	800a8d2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a880:	69fb      	ldr	r3, [r7, #28]
 800a882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d110      	bne.n	800a8b2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a890:	69bb      	ldr	r3, [r7, #24]
 800a892:	015a      	lsls	r2, r3, #5
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	4413      	add	r3, r2
 800a898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	69ba      	ldr	r2, [r7, #24]
 800a8a0:	0151      	lsls	r1, r2, #5
 800a8a2:	69fa      	ldr	r2, [r7, #28]
 800a8a4:	440a      	add	r2, r1
 800a8a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a8ae:	6013      	str	r3, [r2, #0]
 800a8b0:	e00f      	b.n	800a8d2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a8b2:	69bb      	ldr	r3, [r7, #24]
 800a8b4:	015a      	lsls	r2, r3, #5
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	4413      	add	r3, r2
 800a8ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	69ba      	ldr	r2, [r7, #24]
 800a8c2:	0151      	lsls	r1, r2, #5
 800a8c4:	69fa      	ldr	r2, [r7, #28]
 800a8c6:	440a      	add	r2, r1
 800a8c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	015a      	lsls	r2, r3, #5
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	4413      	add	r3, r2
 800a8da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	69ba      	ldr	r2, [r7, #24]
 800a8e2:	0151      	lsls	r1, r2, #5
 800a8e4:	69fa      	ldr	r2, [r7, #28]
 800a8e6:	440a      	add	r2, r1
 800a8e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a8f0:	6013      	str	r3, [r2, #0]
 800a8f2:	e12f      	b.n	800ab54 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a8f4:	69bb      	ldr	r3, [r7, #24]
 800a8f6:	015a      	lsls	r2, r3, #5
 800a8f8:	69fb      	ldr	r3, [r7, #28]
 800a8fa:	4413      	add	r3, r2
 800a8fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	69ba      	ldr	r2, [r7, #24]
 800a904:	0151      	lsls	r1, r2, #5
 800a906:	69fa      	ldr	r2, [r7, #28]
 800a908:	440a      	add	r2, r1
 800a90a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a90e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a912:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	78db      	ldrb	r3, [r3, #3]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d015      	beq.n	800a948 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	695b      	ldr	r3, [r3, #20]
 800a920:	2b00      	cmp	r3, #0
 800a922:	f000 8117 	beq.w	800ab54 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a926:	69fb      	ldr	r3, [r7, #28]
 800a928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a92c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	f003 030f 	and.w	r3, r3, #15
 800a936:	2101      	movs	r1, #1
 800a938:	fa01 f303 	lsl.w	r3, r1, r3
 800a93c:	69f9      	ldr	r1, [r7, #28]
 800a93e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a942:	4313      	orrs	r3, r2
 800a944:	634b      	str	r3, [r1, #52]	; 0x34
 800a946:	e105      	b.n	800ab54 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a948:	69fb      	ldr	r3, [r7, #28]
 800a94a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a954:	2b00      	cmp	r3, #0
 800a956:	d110      	bne.n	800a97a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a958:	69bb      	ldr	r3, [r7, #24]
 800a95a:	015a      	lsls	r2, r3, #5
 800a95c:	69fb      	ldr	r3, [r7, #28]
 800a95e:	4413      	add	r3, r2
 800a960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	69ba      	ldr	r2, [r7, #24]
 800a968:	0151      	lsls	r1, r2, #5
 800a96a:	69fa      	ldr	r2, [r7, #28]
 800a96c:	440a      	add	r2, r1
 800a96e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a972:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a976:	6013      	str	r3, [r2, #0]
 800a978:	e00f      	b.n	800a99a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	015a      	lsls	r2, r3, #5
 800a97e:	69fb      	ldr	r3, [r7, #28]
 800a980:	4413      	add	r3, r2
 800a982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	69ba      	ldr	r2, [r7, #24]
 800a98a:	0151      	lsls	r1, r2, #5
 800a98c:	69fa      	ldr	r2, [r7, #28]
 800a98e:	440a      	add	r2, r1
 800a990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a998:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	68d9      	ldr	r1, [r3, #12]
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	781a      	ldrb	r2, [r3, #0]
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	695b      	ldr	r3, [r3, #20]
 800a9a6:	b298      	uxth	r0, r3
 800a9a8:	79fb      	ldrb	r3, [r7, #7]
 800a9aa:	9300      	str	r3, [sp, #0]
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	68f8      	ldr	r0, [r7, #12]
 800a9b0:	f000 fa2b 	bl	800ae0a <USB_WritePacket>
 800a9b4:	e0ce      	b.n	800ab54 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a9b6:	69bb      	ldr	r3, [r7, #24]
 800a9b8:	015a      	lsls	r2, r3, #5
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	4413      	add	r3, r2
 800a9be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9c2:	691b      	ldr	r3, [r3, #16]
 800a9c4:	69ba      	ldr	r2, [r7, #24]
 800a9c6:	0151      	lsls	r1, r2, #5
 800a9c8:	69fa      	ldr	r2, [r7, #28]
 800a9ca:	440a      	add	r2, r1
 800a9cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9d0:	0cdb      	lsrs	r3, r3, #19
 800a9d2:	04db      	lsls	r3, r3, #19
 800a9d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	015a      	lsls	r2, r3, #5
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	4413      	add	r3, r2
 800a9de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9e2:	691b      	ldr	r3, [r3, #16]
 800a9e4:	69ba      	ldr	r2, [r7, #24]
 800a9e6:	0151      	lsls	r1, r2, #5
 800a9e8:	69fa      	ldr	r2, [r7, #28]
 800a9ea:	440a      	add	r2, r1
 800a9ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a9f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a9f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	695b      	ldr	r3, [r3, #20]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d126      	bne.n	800aa50 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800aa02:	69bb      	ldr	r3, [r7, #24]
 800aa04:	015a      	lsls	r2, r3, #5
 800aa06:	69fb      	ldr	r3, [r7, #28]
 800aa08:	4413      	add	r3, r2
 800aa0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa0e:	691a      	ldr	r2, [r3, #16]
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa18:	69b9      	ldr	r1, [r7, #24]
 800aa1a:	0148      	lsls	r0, r1, #5
 800aa1c:	69f9      	ldr	r1, [r7, #28]
 800aa1e:	4401      	add	r1, r0
 800aa20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aa24:	4313      	orrs	r3, r2
 800aa26:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	015a      	lsls	r2, r3, #5
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	4413      	add	r3, r2
 800aa30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa34:	691b      	ldr	r3, [r3, #16]
 800aa36:	69ba      	ldr	r2, [r7, #24]
 800aa38:	0151      	lsls	r1, r2, #5
 800aa3a:	69fa      	ldr	r2, [r7, #28]
 800aa3c:	440a      	add	r2, r1
 800aa3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa46:	6113      	str	r3, [r2, #16]
 800aa48:	e036      	b.n	800aab8 <USB_EPStartXfer+0x3dc>
 800aa4a:	bf00      	nop
 800aa4c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	695a      	ldr	r2, [r3, #20]
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	689b      	ldr	r3, [r3, #8]
 800aa58:	4413      	add	r3, r2
 800aa5a:	1e5a      	subs	r2, r3, #1
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	689b      	ldr	r3, [r3, #8]
 800aa60:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa64:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	015a      	lsls	r2, r3, #5
 800aa6a:	69fb      	ldr	r3, [r7, #28]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa72:	691a      	ldr	r2, [r3, #16]
 800aa74:	8afb      	ldrh	r3, [r7, #22]
 800aa76:	04d9      	lsls	r1, r3, #19
 800aa78:	4b39      	ldr	r3, [pc, #228]	; (800ab60 <USB_EPStartXfer+0x484>)
 800aa7a:	400b      	ands	r3, r1
 800aa7c:	69b9      	ldr	r1, [r7, #24]
 800aa7e:	0148      	lsls	r0, r1, #5
 800aa80:	69f9      	ldr	r1, [r7, #28]
 800aa82:	4401      	add	r1, r0
 800aa84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800aa8c:	69bb      	ldr	r3, [r7, #24]
 800aa8e:	015a      	lsls	r2, r3, #5
 800aa90:	69fb      	ldr	r3, [r7, #28]
 800aa92:	4413      	add	r3, r2
 800aa94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa98:	691a      	ldr	r2, [r3, #16]
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	689b      	ldr	r3, [r3, #8]
 800aa9e:	8af9      	ldrh	r1, [r7, #22]
 800aaa0:	fb01 f303 	mul.w	r3, r1, r3
 800aaa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aaa8:	69b9      	ldr	r1, [r7, #24]
 800aaaa:	0148      	lsls	r0, r1, #5
 800aaac:	69f9      	ldr	r1, [r7, #28]
 800aaae:	4401      	add	r1, r0
 800aab0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aab4:	4313      	orrs	r3, r2
 800aab6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800aab8:	79fb      	ldrb	r3, [r7, #7]
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d10d      	bne.n	800aada <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d009      	beq.n	800aada <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	68d9      	ldr	r1, [r3, #12]
 800aaca:	69bb      	ldr	r3, [r7, #24]
 800aacc:	015a      	lsls	r2, r3, #5
 800aace:	69fb      	ldr	r3, [r7, #28]
 800aad0:	4413      	add	r3, r2
 800aad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aad6:	460a      	mov	r2, r1
 800aad8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	78db      	ldrb	r3, [r3, #3]
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d128      	bne.n	800ab34 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aae2:	69fb      	ldr	r3, [r7, #28]
 800aae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d110      	bne.n	800ab14 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	015a      	lsls	r2, r3, #5
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	4413      	add	r3, r2
 800aafa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	69ba      	ldr	r2, [r7, #24]
 800ab02:	0151      	lsls	r1, r2, #5
 800ab04:	69fa      	ldr	r2, [r7, #28]
 800ab06:	440a      	add	r2, r1
 800ab08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ab10:	6013      	str	r3, [r2, #0]
 800ab12:	e00f      	b.n	800ab34 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ab14:	69bb      	ldr	r3, [r7, #24]
 800ab16:	015a      	lsls	r2, r3, #5
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	69ba      	ldr	r2, [r7, #24]
 800ab24:	0151      	lsls	r1, r2, #5
 800ab26:	69fa      	ldr	r2, [r7, #28]
 800ab28:	440a      	add	r2, r1
 800ab2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab32:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	015a      	lsls	r2, r3, #5
 800ab38:	69fb      	ldr	r3, [r7, #28]
 800ab3a:	4413      	add	r3, r2
 800ab3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	69ba      	ldr	r2, [r7, #24]
 800ab44:	0151      	lsls	r1, r2, #5
 800ab46:	69fa      	ldr	r2, [r7, #28]
 800ab48:	440a      	add	r2, r1
 800ab4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3720      	adds	r7, #32
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	1ff80000 	.word	0x1ff80000

0800ab64 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b087      	sub	sp, #28
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	60b9      	str	r1, [r7, #8]
 800ab6e:	4613      	mov	r3, r2
 800ab70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	785b      	ldrb	r3, [r3, #1]
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	f040 80cd 	bne.w	800ad20 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	695b      	ldr	r3, [r3, #20]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d132      	bne.n	800abf4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	015a      	lsls	r2, r3, #5
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	4413      	add	r3, r2
 800ab96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	693a      	ldr	r2, [r7, #16]
 800ab9e:	0151      	lsls	r1, r2, #5
 800aba0:	697a      	ldr	r2, [r7, #20]
 800aba2:	440a      	add	r2, r1
 800aba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aba8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800abac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800abb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	015a      	lsls	r2, r3, #5
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	4413      	add	r3, r2
 800abba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abbe:	691b      	ldr	r3, [r3, #16]
 800abc0:	693a      	ldr	r2, [r7, #16]
 800abc2:	0151      	lsls	r1, r2, #5
 800abc4:	697a      	ldr	r2, [r7, #20]
 800abc6:	440a      	add	r2, r1
 800abc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800abd0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	015a      	lsls	r2, r3, #5
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	4413      	add	r3, r2
 800abda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abde:	691b      	ldr	r3, [r3, #16]
 800abe0:	693a      	ldr	r2, [r7, #16]
 800abe2:	0151      	lsls	r1, r2, #5
 800abe4:	697a      	ldr	r2, [r7, #20]
 800abe6:	440a      	add	r2, r1
 800abe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abec:	0cdb      	lsrs	r3, r3, #19
 800abee:	04db      	lsls	r3, r3, #19
 800abf0:	6113      	str	r3, [r2, #16]
 800abf2:	e04e      	b.n	800ac92 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	015a      	lsls	r2, r3, #5
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	4413      	add	r3, r2
 800abfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac00:	691b      	ldr	r3, [r3, #16]
 800ac02:	693a      	ldr	r2, [r7, #16]
 800ac04:	0151      	lsls	r1, r2, #5
 800ac06:	697a      	ldr	r2, [r7, #20]
 800ac08:	440a      	add	r2, r1
 800ac0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac0e:	0cdb      	lsrs	r3, r3, #19
 800ac10:	04db      	lsls	r3, r3, #19
 800ac12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	015a      	lsls	r2, r3, #5
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	4413      	add	r3, r2
 800ac1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	693a      	ldr	r2, [r7, #16]
 800ac24:	0151      	lsls	r1, r2, #5
 800ac26:	697a      	ldr	r2, [r7, #20]
 800ac28:	440a      	add	r2, r1
 800ac2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ac32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ac36:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	695a      	ldr	r2, [r3, #20]
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d903      	bls.n	800ac4c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	689a      	ldr	r2, [r3, #8]
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	015a      	lsls	r2, r3, #5
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	4413      	add	r3, r2
 800ac54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac58:	691b      	ldr	r3, [r3, #16]
 800ac5a:	693a      	ldr	r2, [r7, #16]
 800ac5c:	0151      	lsls	r1, r2, #5
 800ac5e:	697a      	ldr	r2, [r7, #20]
 800ac60:	440a      	add	r2, r1
 800ac62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	015a      	lsls	r2, r3, #5
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	4413      	add	r3, r2
 800ac74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac78:	691a      	ldr	r2, [r3, #16]
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	695b      	ldr	r3, [r3, #20]
 800ac7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac82:	6939      	ldr	r1, [r7, #16]
 800ac84:	0148      	lsls	r0, r1, #5
 800ac86:	6979      	ldr	r1, [r7, #20]
 800ac88:	4401      	add	r1, r0
 800ac8a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ac92:	79fb      	ldrb	r3, [r7, #7]
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d11e      	bne.n	800acd6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	691b      	ldr	r3, [r3, #16]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d009      	beq.n	800acb4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	015a      	lsls	r2, r3, #5
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	4413      	add	r3, r2
 800aca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acac:	461a      	mov	r2, r3
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	691b      	ldr	r3, [r3, #16]
 800acb2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	015a      	lsls	r2, r3, #5
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	4413      	add	r3, r2
 800acbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	693a      	ldr	r2, [r7, #16]
 800acc4:	0151      	lsls	r1, r2, #5
 800acc6:	697a      	ldr	r2, [r7, #20]
 800acc8:	440a      	add	r2, r1
 800acca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800acd2:	6013      	str	r3, [r2, #0]
 800acd4:	e092      	b.n	800adfc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	015a      	lsls	r2, r3, #5
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	4413      	add	r3, r2
 800acde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	693a      	ldr	r2, [r7, #16]
 800ace6:	0151      	lsls	r1, r2, #5
 800ace8:	697a      	ldr	r2, [r7, #20]
 800acea:	440a      	add	r2, r1
 800acec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acf0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800acf4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	695b      	ldr	r3, [r3, #20]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d07e      	beq.n	800adfc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	f003 030f 	and.w	r3, r3, #15
 800ad0e:	2101      	movs	r1, #1
 800ad10:	fa01 f303 	lsl.w	r3, r1, r3
 800ad14:	6979      	ldr	r1, [r7, #20]
 800ad16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	634b      	str	r3, [r1, #52]	; 0x34
 800ad1e:	e06d      	b.n	800adfc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	015a      	lsls	r2, r3, #5
 800ad24:	697b      	ldr	r3, [r7, #20]
 800ad26:	4413      	add	r3, r2
 800ad28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad2c:	691b      	ldr	r3, [r3, #16]
 800ad2e:	693a      	ldr	r2, [r7, #16]
 800ad30:	0151      	lsls	r1, r2, #5
 800ad32:	697a      	ldr	r2, [r7, #20]
 800ad34:	440a      	add	r2, r1
 800ad36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad3a:	0cdb      	lsrs	r3, r3, #19
 800ad3c:	04db      	lsls	r3, r3, #19
 800ad3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	015a      	lsls	r2, r3, #5
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	4413      	add	r3, r2
 800ad48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	693a      	ldr	r2, [r7, #16]
 800ad50:	0151      	lsls	r1, r2, #5
 800ad52:	697a      	ldr	r2, [r7, #20]
 800ad54:	440a      	add	r2, r1
 800ad56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ad5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ad62:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	695b      	ldr	r3, [r3, #20]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d003      	beq.n	800ad74 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	689a      	ldr	r2, [r3, #8]
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	015a      	lsls	r2, r3, #5
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	4413      	add	r3, r2
 800ad7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad80:	691b      	ldr	r3, [r3, #16]
 800ad82:	693a      	ldr	r2, [r7, #16]
 800ad84:	0151      	lsls	r1, r2, #5
 800ad86:	697a      	ldr	r2, [r7, #20]
 800ad88:	440a      	add	r2, r1
 800ad8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	015a      	lsls	r2, r3, #5
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ada0:	691a      	ldr	r2, [r3, #16]
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800adaa:	6939      	ldr	r1, [r7, #16]
 800adac:	0148      	lsls	r0, r1, #5
 800adae:	6979      	ldr	r1, [r7, #20]
 800adb0:	4401      	add	r1, r0
 800adb2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800adb6:	4313      	orrs	r3, r2
 800adb8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800adba:	79fb      	ldrb	r3, [r7, #7]
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d10d      	bne.n	800addc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d009      	beq.n	800addc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	68d9      	ldr	r1, [r3, #12]
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	015a      	lsls	r2, r3, #5
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	4413      	add	r3, r2
 800add4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800add8:	460a      	mov	r2, r1
 800adda:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	015a      	lsls	r2, r3, #5
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	4413      	add	r3, r2
 800ade4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	693a      	ldr	r2, [r7, #16]
 800adec:	0151      	lsls	r1, r2, #5
 800adee:	697a      	ldr	r2, [r7, #20]
 800adf0:	440a      	add	r2, r1
 800adf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adf6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800adfa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800adfc:	2300      	movs	r3, #0
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	371c      	adds	r7, #28
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr

0800ae0a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ae0a:	b480      	push	{r7}
 800ae0c:	b089      	sub	sp, #36	; 0x24
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	60f8      	str	r0, [r7, #12]
 800ae12:	60b9      	str	r1, [r7, #8]
 800ae14:	4611      	mov	r1, r2
 800ae16:	461a      	mov	r2, r3
 800ae18:	460b      	mov	r3, r1
 800ae1a:	71fb      	strb	r3, [r7, #7]
 800ae1c:	4613      	mov	r3, r2
 800ae1e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800ae28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d11a      	bne.n	800ae66 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ae30:	88bb      	ldrh	r3, [r7, #4]
 800ae32:	3303      	adds	r3, #3
 800ae34:	089b      	lsrs	r3, r3, #2
 800ae36:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ae38:	2300      	movs	r3, #0
 800ae3a:	61bb      	str	r3, [r7, #24]
 800ae3c:	e00f      	b.n	800ae5e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ae3e:	79fb      	ldrb	r3, [r7, #7]
 800ae40:	031a      	lsls	r2, r3, #12
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	4413      	add	r3, r2
 800ae46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ae52:	69fb      	ldr	r3, [r7, #28]
 800ae54:	3304      	adds	r3, #4
 800ae56:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ae58:	69bb      	ldr	r3, [r7, #24]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	61bb      	str	r3, [r7, #24]
 800ae5e:	69ba      	ldr	r2, [r7, #24]
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d3eb      	bcc.n	800ae3e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ae66:	2300      	movs	r3, #0
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3724      	adds	r7, #36	; 0x24
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr

0800ae74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b089      	sub	sp, #36	; 0x24
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	4613      	mov	r3, r2
 800ae80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ae8a:	88fb      	ldrh	r3, [r7, #6]
 800ae8c:	3303      	adds	r3, #3
 800ae8e:	089b      	lsrs	r3, r3, #2
 800ae90:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ae92:	2300      	movs	r3, #0
 800ae94:	61bb      	str	r3, [r7, #24]
 800ae96:	e00b      	b.n	800aeb0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	69fb      	ldr	r3, [r7, #28]
 800aea2:	601a      	str	r2, [r3, #0]
    pDest++;
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	3304      	adds	r3, #4
 800aea8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	3301      	adds	r3, #1
 800aeae:	61bb      	str	r3, [r7, #24]
 800aeb0:	69ba      	ldr	r2, [r7, #24]
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d3ef      	bcc.n	800ae98 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800aeb8:	69fb      	ldr	r3, [r7, #28]
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3724      	adds	r7, #36	; 0x24
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr

0800aec6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aec6:	b480      	push	{r7}
 800aec8:	b085      	sub	sp, #20
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
 800aece:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	785b      	ldrb	r3, [r3, #1]
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d12c      	bne.n	800af3c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	015a      	lsls	r2, r3, #5
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	4413      	add	r3, r2
 800aeea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	db12      	blt.n	800af1a <USB_EPSetStall+0x54>
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d00f      	beq.n	800af1a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	015a      	lsls	r2, r3, #5
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	4413      	add	r3, r2
 800af02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	68ba      	ldr	r2, [r7, #8]
 800af0a:	0151      	lsls	r1, r2, #5
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	440a      	add	r2, r1
 800af10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800af18:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	015a      	lsls	r2, r3, #5
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	4413      	add	r3, r2
 800af22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	68ba      	ldr	r2, [r7, #8]
 800af2a:	0151      	lsls	r1, r2, #5
 800af2c:	68fa      	ldr	r2, [r7, #12]
 800af2e:	440a      	add	r2, r1
 800af30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800af38:	6013      	str	r3, [r2, #0]
 800af3a:	e02b      	b.n	800af94 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	015a      	lsls	r2, r3, #5
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	4413      	add	r3, r2
 800af44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	db12      	blt.n	800af74 <USB_EPSetStall+0xae>
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d00f      	beq.n	800af74 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	015a      	lsls	r2, r3, #5
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	4413      	add	r3, r2
 800af5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	68ba      	ldr	r2, [r7, #8]
 800af64:	0151      	lsls	r1, r2, #5
 800af66:	68fa      	ldr	r2, [r7, #12]
 800af68:	440a      	add	r2, r1
 800af6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800af72:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	015a      	lsls	r2, r3, #5
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	4413      	add	r3, r2
 800af7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	68ba      	ldr	r2, [r7, #8]
 800af84:	0151      	lsls	r1, r2, #5
 800af86:	68fa      	ldr	r2, [r7, #12]
 800af88:	440a      	add	r2, r1
 800af8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800af92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af94:	2300      	movs	r3, #0
}
 800af96:	4618      	mov	r0, r3
 800af98:	3714      	adds	r7, #20
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr

0800afa2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800afa2:	b480      	push	{r7}
 800afa4:	b085      	sub	sp, #20
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
 800afaa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	785b      	ldrb	r3, [r3, #1]
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d128      	bne.n	800b010 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	015a      	lsls	r2, r3, #5
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	4413      	add	r3, r2
 800afc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	68ba      	ldr	r2, [r7, #8]
 800afce:	0151      	lsls	r1, r2, #5
 800afd0:	68fa      	ldr	r2, [r7, #12]
 800afd2:	440a      	add	r2, r1
 800afd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afd8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800afdc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	78db      	ldrb	r3, [r3, #3]
 800afe2:	2b03      	cmp	r3, #3
 800afe4:	d003      	beq.n	800afee <USB_EPClearStall+0x4c>
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	78db      	ldrb	r3, [r3, #3]
 800afea:	2b02      	cmp	r3, #2
 800afec:	d138      	bne.n	800b060 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	015a      	lsls	r2, r3, #5
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	4413      	add	r3, r2
 800aff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	68ba      	ldr	r2, [r7, #8]
 800affe:	0151      	lsls	r1, r2, #5
 800b000:	68fa      	ldr	r2, [r7, #12]
 800b002:	440a      	add	r2, r1
 800b004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b00c:	6013      	str	r3, [r2, #0]
 800b00e:	e027      	b.n	800b060 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	015a      	lsls	r2, r3, #5
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	4413      	add	r3, r2
 800b018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	68ba      	ldr	r2, [r7, #8]
 800b020:	0151      	lsls	r1, r2, #5
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	440a      	add	r2, r1
 800b026:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b02a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b02e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	78db      	ldrb	r3, [r3, #3]
 800b034:	2b03      	cmp	r3, #3
 800b036:	d003      	beq.n	800b040 <USB_EPClearStall+0x9e>
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	78db      	ldrb	r3, [r3, #3]
 800b03c:	2b02      	cmp	r3, #2
 800b03e:	d10f      	bne.n	800b060 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	015a      	lsls	r2, r3, #5
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	4413      	add	r3, r2
 800b048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	68ba      	ldr	r2, [r7, #8]
 800b050:	0151      	lsls	r1, r2, #5
 800b052:	68fa      	ldr	r2, [r7, #12]
 800b054:	440a      	add	r2, r1
 800b056:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b05a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b05e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b060:	2300      	movs	r3, #0
}
 800b062:	4618      	mov	r0, r3
 800b064:	3714      	adds	r7, #20
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr

0800b06e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b06e:	b480      	push	{r7}
 800b070:	b085      	sub	sp, #20
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
 800b076:	460b      	mov	r3, r1
 800b078:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	68fa      	ldr	r2, [r7, #12]
 800b088:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b08c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b090:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	78fb      	ldrb	r3, [r7, #3]
 800b09c:	011b      	lsls	r3, r3, #4
 800b09e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b0a2:	68f9      	ldr	r1, [r7, #12]
 800b0a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b0ac:	2300      	movs	r3, #0
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3714      	adds	r7, #20
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr

0800b0ba <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b0ba:	b480      	push	{r7}
 800b0bc:	b085      	sub	sp, #20
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	68fa      	ldr	r2, [r7, #12]
 800b0d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b0d4:	f023 0303 	bic.w	r3, r3, #3
 800b0d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	68fa      	ldr	r2, [r7, #12]
 800b0e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b0e8:	f023 0302 	bic.w	r3, r3, #2
 800b0ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b0ee:	2300      	movs	r3, #0
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3714      	adds	r7, #20
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b085      	sub	sp, #20
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b116:	f023 0303 	bic.w	r3, r3, #3
 800b11a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	68fa      	ldr	r2, [r7, #12]
 800b126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b12a:	f043 0302 	orr.w	r3, r3, #2
 800b12e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b130:	2300      	movs	r3, #0
}
 800b132:	4618      	mov	r0, r3
 800b134:	3714      	adds	r7, #20
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr

0800b13e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b13e:	b480      	push	{r7}
 800b140:	b085      	sub	sp, #20
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	695b      	ldr	r3, [r3, #20]
 800b14a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	699b      	ldr	r3, [r3, #24]
 800b150:	68fa      	ldr	r2, [r7, #12]
 800b152:	4013      	ands	r3, r2
 800b154:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b156:	68fb      	ldr	r3, [r7, #12]
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3714      	adds	r7, #20
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b164:	b480      	push	{r7}
 800b166:	b085      	sub	sp, #20
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b176:	699b      	ldr	r3, [r3, #24]
 800b178:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b180:	69db      	ldr	r3, [r3, #28]
 800b182:	68ba      	ldr	r2, [r7, #8]
 800b184:	4013      	ands	r3, r2
 800b186:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	0c1b      	lsrs	r3, r3, #16
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3714      	adds	r7, #20
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b198:	b480      	push	{r7}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1aa:	699b      	ldr	r3, [r3, #24]
 800b1ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1b4:	69db      	ldr	r3, [r3, #28]
 800b1b6:	68ba      	ldr	r2, [r7, #8]
 800b1b8:	4013      	ands	r3, r2
 800b1ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	b29b      	uxth	r3, r3
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3714      	adds	r7, #20
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b085      	sub	sp, #20
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b1dc:	78fb      	ldrb	r3, [r7, #3]
 800b1de:	015a      	lsls	r2, r3, #5
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	4413      	add	r3, r2
 800b1e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1e8:	689b      	ldr	r3, [r3, #8]
 800b1ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1f2:	695b      	ldr	r3, [r3, #20]
 800b1f4:	68ba      	ldr	r2, [r7, #8]
 800b1f6:	4013      	ands	r3, r2
 800b1f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b1fa:	68bb      	ldr	r3, [r7, #8]
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3714      	adds	r7, #20
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b208:	b480      	push	{r7}
 800b20a:	b087      	sub	sp, #28
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	460b      	mov	r3, r1
 800b212:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b21e:	691b      	ldr	r3, [r3, #16]
 800b220:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b22a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b22c:	78fb      	ldrb	r3, [r7, #3]
 800b22e:	f003 030f 	and.w	r3, r3, #15
 800b232:	68fa      	ldr	r2, [r7, #12]
 800b234:	fa22 f303 	lsr.w	r3, r2, r3
 800b238:	01db      	lsls	r3, r3, #7
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	693a      	ldr	r2, [r7, #16]
 800b23e:	4313      	orrs	r3, r2
 800b240:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b242:	78fb      	ldrb	r3, [r7, #3]
 800b244:	015a      	lsls	r2, r3, #5
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	4413      	add	r3, r2
 800b24a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	693a      	ldr	r2, [r7, #16]
 800b252:	4013      	ands	r3, r2
 800b254:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b256:	68bb      	ldr	r3, [r7, #8]
}
 800b258:	4618      	mov	r0, r3
 800b25a:	371c      	adds	r7, #28
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr

0800b264 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b264:	b480      	push	{r7}
 800b266:	b083      	sub	sp, #12
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	695b      	ldr	r3, [r3, #20]
 800b270:	f003 0301 	and.w	r3, r3, #1
}
 800b274:	4618      	mov	r0, r3
 800b276:	370c      	adds	r7, #12
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b280:	b480      	push	{r7}
 800b282:	b085      	sub	sp, #20
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b29a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b29e:	f023 0307 	bic.w	r3, r3, #7
 800b2a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	68fa      	ldr	r2, [r7, #12]
 800b2ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b2b8:	2300      	movs	r3, #0
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3714      	adds	r7, #20
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr
	...

0800b2c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b087      	sub	sp, #28
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	607a      	str	r2, [r7, #4]
 800b2d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	333c      	adds	r3, #60	; 0x3c
 800b2de:	3304      	adds	r3, #4
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	4a26      	ldr	r2, [pc, #152]	; (800b380 <USB_EP0_OutStart+0xb8>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d90a      	bls.n	800b302 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b2f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b2fc:	d101      	bne.n	800b302 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b2fe:	2300      	movs	r3, #0
 800b300:	e037      	b.n	800b372 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b308:	461a      	mov	r2, r3
 800b30a:	2300      	movs	r3, #0
 800b30c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b314:	691b      	ldr	r3, [r3, #16]
 800b316:	697a      	ldr	r2, [r7, #20]
 800b318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b31c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b320:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b328:	691b      	ldr	r3, [r3, #16]
 800b32a:	697a      	ldr	r2, [r7, #20]
 800b32c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b330:	f043 0318 	orr.w	r3, r3, #24
 800b334:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	697a      	ldr	r2, [r7, #20]
 800b340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b344:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b348:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b34a:	7afb      	ldrb	r3, [r7, #11]
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d10f      	bne.n	800b370 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b356:	461a      	mov	r2, r3
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	697a      	ldr	r2, [r7, #20]
 800b366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b36a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b36e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b370:	2300      	movs	r3, #0
}
 800b372:	4618      	mov	r0, r3
 800b374:	371c      	adds	r7, #28
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop
 800b380:	4f54300a 	.word	0x4f54300a

0800b384 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b384:	b480      	push	{r7}
 800b386:	b085      	sub	sp, #20
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b38c:	2300      	movs	r3, #0
 800b38e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	3301      	adds	r3, #1
 800b394:	60fb      	str	r3, [r7, #12]
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	4a13      	ldr	r2, [pc, #76]	; (800b3e8 <USB_CoreReset+0x64>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d901      	bls.n	800b3a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b39e:	2303      	movs	r3, #3
 800b3a0:	e01b      	b.n	800b3da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	691b      	ldr	r3, [r3, #16]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	daf2      	bge.n	800b390 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	691b      	ldr	r3, [r3, #16]
 800b3b2:	f043 0201 	orr.w	r2, r3, #1
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	60fb      	str	r3, [r7, #12]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	4a09      	ldr	r2, [pc, #36]	; (800b3e8 <USB_CoreReset+0x64>)
 800b3c4:	4293      	cmp	r3, r2
 800b3c6:	d901      	bls.n	800b3cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b3c8:	2303      	movs	r3, #3
 800b3ca:	e006      	b.n	800b3da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	691b      	ldr	r3, [r3, #16]
 800b3d0:	f003 0301 	and.w	r3, r3, #1
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d0f0      	beq.n	800b3ba <USB_CoreReset+0x36>

  return HAL_OK;
 800b3d8:	2300      	movs	r3, #0
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3714      	adds	r7, #20
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr
 800b3e6:	bf00      	nop
 800b3e8:	00030d40 	.word	0x00030d40

0800b3ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b3f8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b3fc:	f00d ff3a 	bl	8019274 <malloc>
 800b400:	4603      	mov	r3, r0
 800b402:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d105      	bne.n	800b416 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b412:	2302      	movs	r3, #2
 800b414:	e066      	b.n	800b4e4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	68fa      	ldr	r2, [r7, #12]
 800b41a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	7c1b      	ldrb	r3, [r3, #16]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d119      	bne.n	800b45a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b426:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b42a:	2202      	movs	r2, #2
 800b42c:	2181      	movs	r1, #129	; 0x81
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f005 f937 	bl	80106a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2201      	movs	r2, #1
 800b438:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b43a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b43e:	2202      	movs	r2, #2
 800b440:	2101      	movs	r1, #1
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f005 f92d 	bl	80106a2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2201      	movs	r2, #1
 800b44c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2210      	movs	r2, #16
 800b454:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b458:	e016      	b.n	800b488 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b45a:	2340      	movs	r3, #64	; 0x40
 800b45c:	2202      	movs	r2, #2
 800b45e:	2181      	movs	r1, #129	; 0x81
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f005 f91e 	bl	80106a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2201      	movs	r2, #1
 800b46a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b46c:	2340      	movs	r3, #64	; 0x40
 800b46e:	2202      	movs	r2, #2
 800b470:	2101      	movs	r1, #1
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f005 f915 	bl	80106a2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2201      	movs	r2, #1
 800b47c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2210      	movs	r2, #16
 800b484:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b488:	2308      	movs	r3, #8
 800b48a:	2203      	movs	r2, #3
 800b48c:	2182      	movs	r1, #130	; 0x82
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f005 f907 	bl	80106a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2201      	movs	r2, #1
 800b498:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	7c1b      	ldrb	r3, [r3, #16]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d109      	bne.n	800b4d2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b4c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4c8:	2101      	movs	r1, #1
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f005 f9d8 	bl	8010880 <USBD_LL_PrepareReceive>
 800b4d0:	e007      	b.n	800b4e2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b4d8:	2340      	movs	r3, #64	; 0x40
 800b4da:	2101      	movs	r1, #1
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f005 f9cf 	bl	8010880 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b4e2:	2300      	movs	r3, #0
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3710      	adds	r7, #16
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b4fc:	2181      	movs	r1, #129	; 0x81
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f005 f8f5 	bl	80106ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2200      	movs	r2, #0
 800b508:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b50a:	2101      	movs	r1, #1
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f005 f8ee 	bl	80106ee <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b51a:	2182      	movs	r1, #130	; 0x82
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f005 f8e6 	bl	80106ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2200      	movs	r2, #0
 800b526:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2200      	movs	r2, #0
 800b52e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d00e      	beq.n	800b55a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b54c:	4618      	mov	r0, r3
 800b54e:	f00d fe99 	bl	8019284 <free>
    pdev->pClassData = NULL;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2200      	movs	r2, #0
 800b556:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800b55a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3710      	adds	r7, #16
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b086      	sub	sp, #24
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b574:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b576:	2300      	movs	r3, #0
 800b578:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b57a:	2300      	movs	r3, #0
 800b57c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800b57e:	2300      	movs	r3, #0
 800b580:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d03a      	beq.n	800b604 <USBD_CDC_Setup+0xa0>
 800b58e:	2b20      	cmp	r3, #32
 800b590:	f040 8097 	bne.w	800b6c2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	88db      	ldrh	r3, [r3, #6]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d029      	beq.n	800b5f0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	b25b      	sxtb	r3, r3
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	da11      	bge.n	800b5ca <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	683a      	ldr	r2, [r7, #0]
 800b5b0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800b5b2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b5b4:	683a      	ldr	r2, [r7, #0]
 800b5b6:	88d2      	ldrh	r2, [r2, #6]
 800b5b8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b5ba:	6939      	ldr	r1, [r7, #16]
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	88db      	ldrh	r3, [r3, #6]
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f001 fa9d 	bl	800cb02 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800b5c8:	e082      	b.n	800b6d0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	785a      	ldrb	r2, [r3, #1]
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	88db      	ldrh	r3, [r3, #6]
 800b5d8:	b2da      	uxtb	r2, r3
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b5e0:	6939      	ldr	r1, [r7, #16]
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	88db      	ldrh	r3, [r3, #6]
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f001 fab6 	bl	800cb5a <USBD_CtlPrepareRx>
    break;
 800b5ee:	e06f      	b.n	800b6d0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5f6:	689b      	ldr	r3, [r3, #8]
 800b5f8:	683a      	ldr	r2, [r7, #0]
 800b5fa:	7850      	ldrb	r0, [r2, #1]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	6839      	ldr	r1, [r7, #0]
 800b600:	4798      	blx	r3
    break;
 800b602:	e065      	b.n	800b6d0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	785b      	ldrb	r3, [r3, #1]
 800b608:	2b0b      	cmp	r3, #11
 800b60a:	d84f      	bhi.n	800b6ac <USBD_CDC_Setup+0x148>
 800b60c:	a201      	add	r2, pc, #4	; (adr r2, 800b614 <USBD_CDC_Setup+0xb0>)
 800b60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b612:	bf00      	nop
 800b614:	0800b645 	.word	0x0800b645
 800b618:	0800b6bb 	.word	0x0800b6bb
 800b61c:	0800b6ad 	.word	0x0800b6ad
 800b620:	0800b6ad 	.word	0x0800b6ad
 800b624:	0800b6ad 	.word	0x0800b6ad
 800b628:	0800b6ad 	.word	0x0800b6ad
 800b62c:	0800b6ad 	.word	0x0800b6ad
 800b630:	0800b6ad 	.word	0x0800b6ad
 800b634:	0800b6ad 	.word	0x0800b6ad
 800b638:	0800b6ad 	.word	0x0800b6ad
 800b63c:	0800b66d 	.word	0x0800b66d
 800b640:	0800b695 	.word	0x0800b695
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b64a:	2b03      	cmp	r3, #3
 800b64c:	d107      	bne.n	800b65e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b64e:	f107 030c 	add.w	r3, r7, #12
 800b652:	2202      	movs	r2, #2
 800b654:	4619      	mov	r1, r3
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f001 fa53 	bl	800cb02 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b65c:	e030      	b.n	800b6c0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b65e:	6839      	ldr	r1, [r7, #0]
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f001 f9dd 	bl	800ca20 <USBD_CtlError>
        ret = USBD_FAIL;
 800b666:	2303      	movs	r3, #3
 800b668:	75fb      	strb	r3, [r7, #23]
      break;
 800b66a:	e029      	b.n	800b6c0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b672:	2b03      	cmp	r3, #3
 800b674:	d107      	bne.n	800b686 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b676:	f107 030f 	add.w	r3, r7, #15
 800b67a:	2201      	movs	r2, #1
 800b67c:	4619      	mov	r1, r3
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f001 fa3f 	bl	800cb02 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b684:	e01c      	b.n	800b6c0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b686:	6839      	ldr	r1, [r7, #0]
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f001 f9c9 	bl	800ca20 <USBD_CtlError>
        ret = USBD_FAIL;
 800b68e:	2303      	movs	r3, #3
 800b690:	75fb      	strb	r3, [r7, #23]
      break;
 800b692:	e015      	b.n	800b6c0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b69a:	2b03      	cmp	r3, #3
 800b69c:	d00f      	beq.n	800b6be <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800b69e:	6839      	ldr	r1, [r7, #0]
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f001 f9bd 	bl	800ca20 <USBD_CtlError>
        ret = USBD_FAIL;
 800b6a6:	2303      	movs	r3, #3
 800b6a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b6aa:	e008      	b.n	800b6be <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800b6ac:	6839      	ldr	r1, [r7, #0]
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f001 f9b6 	bl	800ca20 <USBD_CtlError>
      ret = USBD_FAIL;
 800b6b4:	2303      	movs	r3, #3
 800b6b6:	75fb      	strb	r3, [r7, #23]
      break;
 800b6b8:	e002      	b.n	800b6c0 <USBD_CDC_Setup+0x15c>
      break;
 800b6ba:	bf00      	nop
 800b6bc:	e008      	b.n	800b6d0 <USBD_CDC_Setup+0x16c>
      break;
 800b6be:	bf00      	nop
    }
    break;
 800b6c0:	e006      	b.n	800b6d0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800b6c2:	6839      	ldr	r1, [r7, #0]
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f001 f9ab 	bl	800ca20 <USBD_CtlError>
    ret = USBD_FAIL;
 800b6ca:	2303      	movs	r3, #3
 800b6cc:	75fb      	strb	r3, [r7, #23]
    break;
 800b6ce:	bf00      	nop
  }

  return (uint8_t)ret;
 800b6d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3718      	adds	r7, #24
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}
 800b6da:	bf00      	nop

0800b6dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b6ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d101      	bne.n	800b6fe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b6fa:	2303      	movs	r3, #3
 800b6fc:	e049      	b.n	800b792 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b704:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b706:	78fa      	ldrb	r2, [r7, #3]
 800b708:	6879      	ldr	r1, [r7, #4]
 800b70a:	4613      	mov	r3, r2
 800b70c:	009b      	lsls	r3, r3, #2
 800b70e:	4413      	add	r3, r2
 800b710:	009b      	lsls	r3, r3, #2
 800b712:	440b      	add	r3, r1
 800b714:	3318      	adds	r3, #24
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d029      	beq.n	800b770 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b71c:	78fa      	ldrb	r2, [r7, #3]
 800b71e:	6879      	ldr	r1, [r7, #4]
 800b720:	4613      	mov	r3, r2
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	4413      	add	r3, r2
 800b726:	009b      	lsls	r3, r3, #2
 800b728:	440b      	add	r3, r1
 800b72a:	3318      	adds	r3, #24
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	78f9      	ldrb	r1, [r7, #3]
 800b730:	68f8      	ldr	r0, [r7, #12]
 800b732:	460b      	mov	r3, r1
 800b734:	00db      	lsls	r3, r3, #3
 800b736:	1a5b      	subs	r3, r3, r1
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	4403      	add	r3, r0
 800b73c:	3344      	adds	r3, #68	; 0x44
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	fbb2 f1f3 	udiv	r1, r2, r3
 800b744:	fb03 f301 	mul.w	r3, r3, r1
 800b748:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d110      	bne.n	800b770 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b74e:	78fa      	ldrb	r2, [r7, #3]
 800b750:	6879      	ldr	r1, [r7, #4]
 800b752:	4613      	mov	r3, r2
 800b754:	009b      	lsls	r3, r3, #2
 800b756:	4413      	add	r3, r2
 800b758:	009b      	lsls	r3, r3, #2
 800b75a:	440b      	add	r3, r1
 800b75c:	3318      	adds	r3, #24
 800b75e:	2200      	movs	r2, #0
 800b760:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b762:	78f9      	ldrb	r1, [r7, #3]
 800b764:	2300      	movs	r3, #0
 800b766:	2200      	movs	r2, #0
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f005 f868 	bl	801083e <USBD_LL_Transmit>
 800b76e:	e00f      	b.n	800b790 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	2200      	movs	r2, #0
 800b774:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b77e:	691b      	ldr	r3, [r3, #16]
 800b780:	68ba      	ldr	r2, [r7, #8]
 800b782:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b786:	68ba      	ldr	r2, [r7, #8]
 800b788:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b78c:	78fa      	ldrb	r2, [r7, #3]
 800b78e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800b790:	2300      	movs	r3, #0
}
 800b792:	4618      	mov	r0, r3
 800b794:	3710      	adds	r7, #16
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b084      	sub	sp, #16
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d101      	bne.n	800b7bc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b7b8:	2303      	movs	r3, #3
 800b7ba:	e015      	b.n	800b7e8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b7bc:	78fb      	ldrb	r3, [r7, #3]
 800b7be:	4619      	mov	r1, r3
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f005 f87e 	bl	80108c2 <USBD_LL_GetRxDataSize>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7d4:	68db      	ldr	r3, [r3, #12]
 800b7d6:	68fa      	ldr	r2, [r7, #12]
 800b7d8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b7dc:	68fa      	ldr	r2, [r7, #12]
 800b7de:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b7e2:	4611      	mov	r1, r2
 800b7e4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b7e6:	2300      	movs	r3, #0
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3710      	adds	r7, #16
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7fe:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b806:	2b00      	cmp	r3, #0
 800b808:	d015      	beq.n	800b836 <USBD_CDC_EP0_RxReady+0x46>
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b810:	2bff      	cmp	r3, #255	; 0xff
 800b812:	d010      	beq.n	800b836 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b822:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b824:	68fa      	ldr	r2, [r7, #12]
 800b826:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b82a:	b292      	uxth	r2, r2
 800b82c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	22ff      	movs	r2, #255	; 0xff
 800b832:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800b836:	2300      	movs	r3, #0
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3710      	adds	r7, #16
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b840:	b480      	push	{r7}
 800b842:	b083      	sub	sp, #12
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2243      	movs	r2, #67	; 0x43
 800b84c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b84e:	4b03      	ldr	r3, [pc, #12]	; (800b85c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b850:	4618      	mov	r0, r3
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr
 800b85c:	20000094 	.word	0x20000094

0800b860 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b860:	b480      	push	{r7}
 800b862:	b083      	sub	sp, #12
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2243      	movs	r2, #67	; 0x43
 800b86c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b86e:	4b03      	ldr	r3, [pc, #12]	; (800b87c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b870:	4618      	mov	r0, r3
 800b872:	370c      	adds	r7, #12
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr
 800b87c:	20000050 	.word	0x20000050

0800b880 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2243      	movs	r2, #67	; 0x43
 800b88c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b88e:	4b03      	ldr	r3, [pc, #12]	; (800b89c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b890:	4618      	mov	r0, r3
 800b892:	370c      	adds	r7, #12
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr
 800b89c:	200000d8 	.word	0x200000d8

0800b8a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b083      	sub	sp, #12
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	220a      	movs	r2, #10
 800b8ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b8ae:	4b03      	ldr	r3, [pc, #12]	; (800b8bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	370c      	adds	r7, #12
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ba:	4770      	bx	lr
 800b8bc:	2000000c 	.word	0x2000000c

0800b8c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d101      	bne.n	800b8d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b8d0:	2303      	movs	r3, #3
 800b8d2:	e004      	b.n	800b8de <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	683a      	ldr	r2, [r7, #0]
 800b8d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b8dc:	2300      	movs	r3, #0
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	370c      	adds	r7, #12
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr

0800b8ea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b8ea:	b480      	push	{r7}
 800b8ec:	b087      	sub	sp, #28
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	60f8      	str	r0, [r7, #12]
 800b8f2:	60b9      	str	r1, [r7, #8]
 800b8f4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8fc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	68ba      	ldr	r2, [r7, #8]
 800b902:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b90e:	2300      	movs	r3, #0
}
 800b910:	4618      	mov	r0, r3
 800b912:	371c      	adds	r7, #28
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr

0800b91c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b085      	sub	sp, #20
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b92c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	683a      	ldr	r2, [r7, #0]
 800b932:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b936:	2300      	movs	r3, #0
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3714      	adds	r7, #20
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr

0800b944 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b084      	sub	sp, #16
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b952:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b954:	2301      	movs	r3, #1
 800b956:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d101      	bne.n	800b966 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b962:	2303      	movs	r3, #3
 800b964:	e01a      	b.n	800b99c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d114      	bne.n	800b99a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	2201      	movs	r2, #1
 800b974:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b98e:	2181      	movs	r1, #129	; 0x81
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f004 ff54 	bl	801083e <USBD_LL_Transmit>

    ret = USBD_OK;
 800b996:	2300      	movs	r3, #0
 800b998:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b99a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3710      	adds	r7, #16
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d101      	bne.n	800b9c2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b9be:	2303      	movs	r3, #3
 800b9c0:	e016      	b.n	800b9f0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	7c1b      	ldrb	r3, [r3, #16]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d109      	bne.n	800b9de <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9d4:	2101      	movs	r1, #1
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f004 ff52 	bl	8010880 <USBD_LL_PrepareReceive>
 800b9dc:	e007      	b.n	800b9ee <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b9e4:	2340      	movs	r3, #64	; 0x40
 800b9e6:	2101      	movs	r1, #1
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f004 ff49 	bl	8010880 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b9ee:	2300      	movs	r3, #0
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3710      	adds	r7, #16
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	4613      	mov	r3, r2
 800ba04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d101      	bne.n	800ba10 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ba0c:	2303      	movs	r3, #3
 800ba0e:	e025      	b.n	800ba5c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d003      	beq.n	800ba22 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d003      	beq.n	800ba34 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d003      	beq.n	800ba42 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	68ba      	ldr	r2, [r7, #8]
 800ba3e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2201      	movs	r2, #1
 800ba46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	79fa      	ldrb	r2, [r7, #7]
 800ba4e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ba50:	68f8      	ldr	r0, [r7, #12]
 800ba52:	f004 fdbf 	bl	80105d4 <USBD_LL_Init>
 800ba56:	4603      	mov	r3, r0
 800ba58:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ba5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3718      	adds	r7, #24
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d101      	bne.n	800ba7c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ba78:	2303      	movs	r3, #3
 800ba7a:	e010      	b.n	800ba9e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	683a      	ldr	r2, [r7, #0]
 800ba80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba8c:	f107 020e 	add.w	r2, r7, #14
 800ba90:	4610      	mov	r0, r2
 800ba92:	4798      	blx	r3
 800ba94:	4602      	mov	r2, r0
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800ba9c:	2300      	movs	r3, #0
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}

0800baa6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800baa6:	b580      	push	{r7, lr}
 800baa8:	b082      	sub	sp, #8
 800baaa:	af00      	add	r7, sp, #0
 800baac:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f004 fddc 	bl	801066c <USBD_LL_Start>
 800bab4:	4603      	mov	r3, r0
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3708      	adds	r7, #8
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800babe:	b480      	push	{r7}
 800bac0:	b083      	sub	sp, #12
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bac6:	2300      	movs	r3, #0
}
 800bac8:	4618      	mov	r0, r3
 800baca:	370c      	adds	r7, #12
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr

0800bad4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	460b      	mov	r3, r1
 800bade:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bae0:	2303      	movs	r3, #3
 800bae2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baea:	2b00      	cmp	r3, #0
 800baec:	d009      	beq.n	800bb02 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	78fa      	ldrb	r2, [r7, #3]
 800baf8:	4611      	mov	r1, r2
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	4798      	blx	r3
 800bafe:	4603      	mov	r3, r0
 800bb00:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bb02:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3710      	adds	r7, #16
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	460b      	mov	r3, r1
 800bb16:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d007      	beq.n	800bb32 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	78fa      	ldrb	r2, [r7, #3]
 800bb2c:	4611      	mov	r1, r2
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	4798      	blx	r3
  }

  return USBD_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3708      	adds	r7, #8
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb4c:	6839      	ldr	r1, [r7, #0]
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f000 ff2c 	bl	800c9ac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2201      	movs	r2, #1
 800bb58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bb62:	461a      	mov	r2, r3
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bb70:	f003 031f 	and.w	r3, r3, #31
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d00e      	beq.n	800bb96 <USBD_LL_SetupStage+0x5a>
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	d302      	bcc.n	800bb82 <USBD_LL_SetupStage+0x46>
 800bb7c:	2b02      	cmp	r3, #2
 800bb7e:	d014      	beq.n	800bbaa <USBD_LL_SetupStage+0x6e>
 800bb80:	e01d      	b.n	800bbbe <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb88:	4619      	mov	r1, r3
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 fa18 	bl	800bfc0 <USBD_StdDevReq>
 800bb90:	4603      	mov	r3, r0
 800bb92:	73fb      	strb	r3, [r7, #15]
      break;
 800bb94:	e020      	b.n	800bbd8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 fa7c 	bl	800c09c <USBD_StdItfReq>
 800bba4:	4603      	mov	r3, r0
 800bba6:	73fb      	strb	r3, [r7, #15]
      break;
 800bba8:	e016      	b.n	800bbd8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 fab8 	bl	800c128 <USBD_StdEPReq>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	73fb      	strb	r3, [r7, #15]
      break;
 800bbbc:	e00c      	b.n	800bbd8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bbc4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bbc8:	b2db      	uxtb	r3, r3
 800bbca:	4619      	mov	r1, r3
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f004 fdad 	bl	801072c <USBD_LL_StallEP>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	73fb      	strb	r3, [r7, #15]
      break;
 800bbd6:	bf00      	nop
  }

  return ret;
 800bbd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3710      	adds	r7, #16
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b086      	sub	sp, #24
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	60f8      	str	r0, [r7, #12]
 800bbea:	460b      	mov	r3, r1
 800bbec:	607a      	str	r2, [r7, #4]
 800bbee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bbf0:	7afb      	ldrb	r3, [r7, #11]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d137      	bne.n	800bc66 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bbfc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bc04:	2b03      	cmp	r3, #3
 800bc06:	d14a      	bne.n	800bc9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	689a      	ldr	r2, [r3, #8]
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	68db      	ldr	r3, [r3, #12]
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d913      	bls.n	800bc3c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	689a      	ldr	r2, [r3, #8]
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	68db      	ldr	r3, [r3, #12]
 800bc1c:	1ad2      	subs	r2, r2, r3
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	68da      	ldr	r2, [r3, #12]
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	689b      	ldr	r3, [r3, #8]
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	bf28      	it	cs
 800bc2e:	4613      	movcs	r3, r2
 800bc30:	461a      	mov	r2, r3
 800bc32:	6879      	ldr	r1, [r7, #4]
 800bc34:	68f8      	ldr	r0, [r7, #12]
 800bc36:	f000 ffad 	bl	800cb94 <USBD_CtlContinueRx>
 800bc3a:	e030      	b.n	800bc9e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc42:	691b      	ldr	r3, [r3, #16]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d00a      	beq.n	800bc5e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bc4e:	2b03      	cmp	r3, #3
 800bc50:	d105      	bne.n	800bc5e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc58:	691b      	ldr	r3, [r3, #16]
 800bc5a:	68f8      	ldr	r0, [r7, #12]
 800bc5c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800bc5e:	68f8      	ldr	r0, [r7, #12]
 800bc60:	f000 ffa9 	bl	800cbb6 <USBD_CtlSendStatus>
 800bc64:	e01b      	b.n	800bc9e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc6c:	699b      	ldr	r3, [r3, #24]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d013      	beq.n	800bc9a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bc78:	2b03      	cmp	r3, #3
 800bc7a:	d10e      	bne.n	800bc9a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc82:	699b      	ldr	r3, [r3, #24]
 800bc84:	7afa      	ldrb	r2, [r7, #11]
 800bc86:	4611      	mov	r1, r2
 800bc88:	68f8      	ldr	r0, [r7, #12]
 800bc8a:	4798      	blx	r3
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800bc90:	7dfb      	ldrb	r3, [r7, #23]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d003      	beq.n	800bc9e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800bc96:	7dfb      	ldrb	r3, [r7, #23]
 800bc98:	e002      	b.n	800bca0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bc9a:	2303      	movs	r3, #3
 800bc9c:	e000      	b.n	800bca0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800bc9e:	2300      	movs	r3, #0
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3718      	adds	r7, #24
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b086      	sub	sp, #24
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	60f8      	str	r0, [r7, #12]
 800bcb0:	460b      	mov	r3, r1
 800bcb2:	607a      	str	r2, [r7, #4]
 800bcb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bcb6:	7afb      	ldrb	r3, [r7, #11]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d16a      	bne.n	800bd92 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	3314      	adds	r3, #20
 800bcc0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bcc8:	2b02      	cmp	r3, #2
 800bcca:	d155      	bne.n	800bd78 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800bccc:	693b      	ldr	r3, [r7, #16]
 800bcce:	689a      	ldr	r2, [r3, #8]
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d914      	bls.n	800bd02 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	689a      	ldr	r2, [r3, #8]
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	1ad2      	subs	r2, r2, r3
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	689b      	ldr	r3, [r3, #8]
 800bcea:	461a      	mov	r2, r3
 800bcec:	6879      	ldr	r1, [r7, #4]
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	f000 ff22 	bl	800cb38 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	2100      	movs	r1, #0
 800bcfa:	68f8      	ldr	r0, [r7, #12]
 800bcfc:	f004 fdc0 	bl	8010880 <USBD_LL_PrepareReceive>
 800bd00:	e03a      	b.n	800bd78 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	68da      	ldr	r2, [r3, #12]
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	689b      	ldr	r3, [r3, #8]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d11c      	bne.n	800bd48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	685a      	ldr	r2, [r3, #4]
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d316      	bcc.n	800bd48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	685a      	ldr	r2, [r3, #4]
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d20f      	bcs.n	800bd48 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bd28:	2200      	movs	r2, #0
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f000 ff03 	bl	800cb38 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2200      	movs	r2, #0
 800bd36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	2100      	movs	r1, #0
 800bd40:	68f8      	ldr	r0, [r7, #12]
 800bd42:	f004 fd9d 	bl	8010880 <USBD_LL_PrepareReceive>
 800bd46:	e017      	b.n	800bd78 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd4e:	68db      	ldr	r3, [r3, #12]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d00a      	beq.n	800bd6a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bd5a:	2b03      	cmp	r3, #3
 800bd5c:	d105      	bne.n	800bd6a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd64:	68db      	ldr	r3, [r3, #12]
 800bd66:	68f8      	ldr	r0, [r7, #12]
 800bd68:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd6a:	2180      	movs	r1, #128	; 0x80
 800bd6c:	68f8      	ldr	r0, [r7, #12]
 800bd6e:	f004 fcdd 	bl	801072c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bd72:	68f8      	ldr	r0, [r7, #12]
 800bd74:	f000 ff32 	bl	800cbdc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	d123      	bne.n	800bdca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bd82:	68f8      	ldr	r0, [r7, #12]
 800bd84:	f7ff fe9b 	bl	800babe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bd90:	e01b      	b.n	800bdca <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd98:	695b      	ldr	r3, [r3, #20]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d013      	beq.n	800bdc6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bda4:	2b03      	cmp	r3, #3
 800bda6:	d10e      	bne.n	800bdc6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdae:	695b      	ldr	r3, [r3, #20]
 800bdb0:	7afa      	ldrb	r2, [r7, #11]
 800bdb2:	4611      	mov	r1, r2
 800bdb4:	68f8      	ldr	r0, [r7, #12]
 800bdb6:	4798      	blx	r3
 800bdb8:	4603      	mov	r3, r0
 800bdba:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800bdbc:	7dfb      	ldrb	r3, [r7, #23]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d003      	beq.n	800bdca <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800bdc2:	7dfb      	ldrb	r3, [r7, #23]
 800bdc4:	e002      	b.n	800bdcc <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bdc6:	2303      	movs	r3, #3
 800bdc8:	e000      	b.n	800bdcc <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800bdca:	2300      	movs	r3, #0
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3718      	adds	r7, #24
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b082      	sub	sp, #8
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2201      	movs	r2, #1
 800bde0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2200      	movs	r2, #0
 800bde8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800be00:	2b00      	cmp	r3, #0
 800be02:	d009      	beq.n	800be18 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	6852      	ldr	r2, [r2, #4]
 800be10:	b2d2      	uxtb	r2, r2
 800be12:	4611      	mov	r1, r2
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be18:	2340      	movs	r3, #64	; 0x40
 800be1a:	2200      	movs	r2, #0
 800be1c:	2100      	movs	r1, #0
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f004 fc3f 	bl	80106a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2201      	movs	r2, #1
 800be28:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2240      	movs	r2, #64	; 0x40
 800be30:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800be34:	2340      	movs	r3, #64	; 0x40
 800be36:	2200      	movs	r2, #0
 800be38:	2180      	movs	r1, #128	; 0x80
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f004 fc31 	bl	80106a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2201      	movs	r2, #1
 800be44:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2240      	movs	r2, #64	; 0x40
 800be4a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800be4c:	2300      	movs	r3, #0
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3708      	adds	r7, #8
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}

0800be56 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800be56:	b480      	push	{r7}
 800be58:	b083      	sub	sp, #12
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
 800be5e:	460b      	mov	r3, r1
 800be60:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	78fa      	ldrb	r2, [r7, #3]
 800be66:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800be68:	2300      	movs	r3, #0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	370c      	adds	r7, #12
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr

0800be76 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800be76:	b480      	push	{r7}
 800be78:	b083      	sub	sp, #12
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2204      	movs	r2, #4
 800be8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800be92:	2300      	movs	r3, #0
}
 800be94:	4618      	mov	r0, r3
 800be96:	370c      	adds	r7, #12
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr

0800bea0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b083      	sub	sp, #12
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800beae:	2b04      	cmp	r3, #4
 800beb0:	d105      	bne.n	800bebe <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bebe:	2300      	movs	r3, #0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	370c      	adds	r7, #12
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr

0800becc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800beda:	2b03      	cmp	r3, #3
 800bedc:	d10b      	bne.n	800bef6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bee4:	69db      	ldr	r3, [r3, #28]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d005      	beq.n	800bef6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bef0:	69db      	ldr	r3, [r3, #28]
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bef6:	2300      	movs	r3, #0
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3708      	adds	r7, #8
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b083      	sub	sp, #12
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	460b      	mov	r3, r1
 800bf0a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bf0c:	2300      	movs	r3, #0
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	370c      	adds	r7, #12
 800bf12:	46bd      	mov	sp, r7
 800bf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf18:	4770      	bx	lr

0800bf1a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bf1a:	b480      	push	{r7}
 800bf1c:	b083      	sub	sp, #12
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
 800bf22:	460b      	mov	r3, r1
 800bf24:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bf26:	2300      	movs	r3, #0
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	370c      	adds	r7, #12
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr

0800bf34 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b083      	sub	sp, #12
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bf3c:	2300      	movs	r3, #0
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	370c      	adds	r7, #12
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr

0800bf4a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bf4a:	b580      	push	{r7, lr}
 800bf4c:	b082      	sub	sp, #8
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2201      	movs	r2, #1
 800bf56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d009      	beq.n	800bf78 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	6852      	ldr	r2, [r2, #4]
 800bf70:	b2d2      	uxtb	r2, r2
 800bf72:	4611      	mov	r1, r2
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	4798      	blx	r3
  }

  return USBD_OK;
 800bf78:	2300      	movs	r3, #0
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3708      	adds	r7, #8
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bf82:	b480      	push	{r7}
 800bf84:	b087      	sub	sp, #28
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	3301      	adds	r3, #1
 800bf98:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bfa0:	8a3b      	ldrh	r3, [r7, #16]
 800bfa2:	021b      	lsls	r3, r3, #8
 800bfa4:	b21a      	sxth	r2, r3
 800bfa6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	b21b      	sxth	r3, r3
 800bfae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bfb0:	89fb      	ldrh	r3, [r7, #14]
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	371c      	adds	r7, #28
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr
	...

0800bfc0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfd6:	2b20      	cmp	r3, #32
 800bfd8:	d004      	beq.n	800bfe4 <USBD_StdDevReq+0x24>
 800bfda:	2b40      	cmp	r3, #64	; 0x40
 800bfdc:	d002      	beq.n	800bfe4 <USBD_StdDevReq+0x24>
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d00a      	beq.n	800bff8 <USBD_StdDevReq+0x38>
 800bfe2:	e050      	b.n	800c086 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfea:	689b      	ldr	r3, [r3, #8]
 800bfec:	6839      	ldr	r1, [r7, #0]
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	4798      	blx	r3
 800bff2:	4603      	mov	r3, r0
 800bff4:	73fb      	strb	r3, [r7, #15]
    break;
 800bff6:	e04b      	b.n	800c090 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	785b      	ldrb	r3, [r3, #1]
 800bffc:	2b09      	cmp	r3, #9
 800bffe:	d83c      	bhi.n	800c07a <USBD_StdDevReq+0xba>
 800c000:	a201      	add	r2, pc, #4	; (adr r2, 800c008 <USBD_StdDevReq+0x48>)
 800c002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c006:	bf00      	nop
 800c008:	0800c05d 	.word	0x0800c05d
 800c00c:	0800c071 	.word	0x0800c071
 800c010:	0800c07b 	.word	0x0800c07b
 800c014:	0800c067 	.word	0x0800c067
 800c018:	0800c07b 	.word	0x0800c07b
 800c01c:	0800c03b 	.word	0x0800c03b
 800c020:	0800c031 	.word	0x0800c031
 800c024:	0800c07b 	.word	0x0800c07b
 800c028:	0800c053 	.word	0x0800c053
 800c02c:	0800c045 	.word	0x0800c045
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800c030:	6839      	ldr	r1, [r7, #0]
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f000 f9ce 	bl	800c3d4 <USBD_GetDescriptor>
      break;
 800c038:	e024      	b.n	800c084 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800c03a:	6839      	ldr	r1, [r7, #0]
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f000 fb33 	bl	800c6a8 <USBD_SetAddress>
      break;
 800c042:	e01f      	b.n	800c084 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800c044:	6839      	ldr	r1, [r7, #0]
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 fb70 	bl	800c72c <USBD_SetConfig>
 800c04c:	4603      	mov	r3, r0
 800c04e:	73fb      	strb	r3, [r7, #15]
      break;
 800c050:	e018      	b.n	800c084 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800c052:	6839      	ldr	r1, [r7, #0]
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 fc0d 	bl	800c874 <USBD_GetConfig>
      break;
 800c05a:	e013      	b.n	800c084 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800c05c:	6839      	ldr	r1, [r7, #0]
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f000 fc3c 	bl	800c8dc <USBD_GetStatus>
      break;
 800c064:	e00e      	b.n	800c084 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800c066:	6839      	ldr	r1, [r7, #0]
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f000 fc6a 	bl	800c942 <USBD_SetFeature>
      break;
 800c06e:	e009      	b.n	800c084 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800c070:	6839      	ldr	r1, [r7, #0]
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 fc79 	bl	800c96a <USBD_ClrFeature>
      break;
 800c078:	e004      	b.n	800c084 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800c07a:	6839      	ldr	r1, [r7, #0]
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f000 fccf 	bl	800ca20 <USBD_CtlError>
      break;
 800c082:	bf00      	nop
    }
    break;
 800c084:	e004      	b.n	800c090 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800c086:	6839      	ldr	r1, [r7, #0]
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 fcc9 	bl	800ca20 <USBD_CtlError>
    break;
 800c08e:	bf00      	nop
  }

  return ret;
 800c090:	7bfb      	ldrb	r3, [r7, #15]
}
 800c092:	4618      	mov	r0, r3
 800c094:	3710      	adds	r7, #16
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
 800c09a:	bf00      	nop

0800c09c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b084      	sub	sp, #16
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c0b2:	2b20      	cmp	r3, #32
 800c0b4:	d003      	beq.n	800c0be <USBD_StdItfReq+0x22>
 800c0b6:	2b40      	cmp	r3, #64	; 0x40
 800c0b8:	d001      	beq.n	800c0be <USBD_StdItfReq+0x22>
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d12a      	bne.n	800c114 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0c4:	3b01      	subs	r3, #1
 800c0c6:	2b02      	cmp	r3, #2
 800c0c8:	d81d      	bhi.n	800c106 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	889b      	ldrh	r3, [r3, #4]
 800c0ce:	b2db      	uxtb	r3, r3
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	d813      	bhi.n	800c0fc <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0da:	689b      	ldr	r3, [r3, #8]
 800c0dc:	6839      	ldr	r1, [r7, #0]
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	4798      	blx	r3
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	88db      	ldrh	r3, [r3, #6]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d110      	bne.n	800c110 <USBD_StdItfReq+0x74>
 800c0ee:	7bfb      	ldrb	r3, [r7, #15]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d10d      	bne.n	800c110 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 fd5e 	bl	800cbb6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c0fa:	e009      	b.n	800c110 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c0fc:	6839      	ldr	r1, [r7, #0]
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 fc8e 	bl	800ca20 <USBD_CtlError>
      break;
 800c104:	e004      	b.n	800c110 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c106:	6839      	ldr	r1, [r7, #0]
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f000 fc89 	bl	800ca20 <USBD_CtlError>
      break;
 800c10e:	e000      	b.n	800c112 <USBD_StdItfReq+0x76>
      break;
 800c110:	bf00      	nop
    }
    break;
 800c112:	e004      	b.n	800c11e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c114:	6839      	ldr	r1, [r7, #0]
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f000 fc82 	bl	800ca20 <USBD_CtlError>
    break;
 800c11c:	bf00      	nop
  }

  return ret;
 800c11e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c120:	4618      	mov	r0, r3
 800c122:	3710      	adds	r7, #16
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}

0800c128 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c132:	2300      	movs	r3, #0
 800c134:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	889b      	ldrh	r3, [r3, #4]
 800c13a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	781b      	ldrb	r3, [r3, #0]
 800c140:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c144:	2b20      	cmp	r3, #32
 800c146:	d004      	beq.n	800c152 <USBD_StdEPReq+0x2a>
 800c148:	2b40      	cmp	r3, #64	; 0x40
 800c14a:	d002      	beq.n	800c152 <USBD_StdEPReq+0x2a>
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d00a      	beq.n	800c166 <USBD_StdEPReq+0x3e>
 800c150:	e135      	b.n	800c3be <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	6839      	ldr	r1, [r7, #0]
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	4798      	blx	r3
 800c160:	4603      	mov	r3, r0
 800c162:	73fb      	strb	r3, [r7, #15]
    break;
 800c164:	e130      	b.n	800c3c8 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	785b      	ldrb	r3, [r3, #1]
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d03e      	beq.n	800c1ec <USBD_StdEPReq+0xc4>
 800c16e:	2b03      	cmp	r3, #3
 800c170:	d002      	beq.n	800c178 <USBD_StdEPReq+0x50>
 800c172:	2b00      	cmp	r3, #0
 800c174:	d077      	beq.n	800c266 <USBD_StdEPReq+0x13e>
 800c176:	e11c      	b.n	800c3b2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c17e:	2b02      	cmp	r3, #2
 800c180:	d002      	beq.n	800c188 <USBD_StdEPReq+0x60>
 800c182:	2b03      	cmp	r3, #3
 800c184:	d015      	beq.n	800c1b2 <USBD_StdEPReq+0x8a>
 800c186:	e02b      	b.n	800c1e0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c188:	7bbb      	ldrb	r3, [r7, #14]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d00c      	beq.n	800c1a8 <USBD_StdEPReq+0x80>
 800c18e:	7bbb      	ldrb	r3, [r7, #14]
 800c190:	2b80      	cmp	r3, #128	; 0x80
 800c192:	d009      	beq.n	800c1a8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c194:	7bbb      	ldrb	r3, [r7, #14]
 800c196:	4619      	mov	r1, r3
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f004 fac7 	bl	801072c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c19e:	2180      	movs	r1, #128	; 0x80
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f004 fac3 	bl	801072c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c1a6:	e020      	b.n	800c1ea <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800c1a8:	6839      	ldr	r1, [r7, #0]
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f000 fc38 	bl	800ca20 <USBD_CtlError>
        break;
 800c1b0:	e01b      	b.n	800c1ea <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	885b      	ldrh	r3, [r3, #2]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d10e      	bne.n	800c1d8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c1ba:	7bbb      	ldrb	r3, [r7, #14]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d00b      	beq.n	800c1d8 <USBD_StdEPReq+0xb0>
 800c1c0:	7bbb      	ldrb	r3, [r7, #14]
 800c1c2:	2b80      	cmp	r3, #128	; 0x80
 800c1c4:	d008      	beq.n	800c1d8 <USBD_StdEPReq+0xb0>
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	88db      	ldrh	r3, [r3, #6]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d104      	bne.n	800c1d8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800c1ce:	7bbb      	ldrb	r3, [r7, #14]
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f004 faaa 	bl	801072c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 fcec 	bl	800cbb6 <USBD_CtlSendStatus>

        break;
 800c1de:	e004      	b.n	800c1ea <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800c1e0:	6839      	ldr	r1, [r7, #0]
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 fc1c 	bl	800ca20 <USBD_CtlError>
        break;
 800c1e8:	bf00      	nop
      }
      break;
 800c1ea:	e0e7      	b.n	800c3bc <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1f2:	2b02      	cmp	r3, #2
 800c1f4:	d002      	beq.n	800c1fc <USBD_StdEPReq+0xd4>
 800c1f6:	2b03      	cmp	r3, #3
 800c1f8:	d015      	beq.n	800c226 <USBD_StdEPReq+0xfe>
 800c1fa:	e02d      	b.n	800c258 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1fc:	7bbb      	ldrb	r3, [r7, #14]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d00c      	beq.n	800c21c <USBD_StdEPReq+0xf4>
 800c202:	7bbb      	ldrb	r3, [r7, #14]
 800c204:	2b80      	cmp	r3, #128	; 0x80
 800c206:	d009      	beq.n	800c21c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c208:	7bbb      	ldrb	r3, [r7, #14]
 800c20a:	4619      	mov	r1, r3
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f004 fa8d 	bl	801072c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c212:	2180      	movs	r1, #128	; 0x80
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f004 fa89 	bl	801072c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c21a:	e023      	b.n	800c264 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800c21c:	6839      	ldr	r1, [r7, #0]
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 fbfe 	bl	800ca20 <USBD_CtlError>
        break;
 800c224:	e01e      	b.n	800c264 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	885b      	ldrh	r3, [r3, #2]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d119      	bne.n	800c262 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c22e:	7bbb      	ldrb	r3, [r7, #14]
 800c230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c234:	2b00      	cmp	r3, #0
 800c236:	d004      	beq.n	800c242 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c238:	7bbb      	ldrb	r3, [r7, #14]
 800c23a:	4619      	mov	r1, r3
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f004 fa94 	bl	801076a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f000 fcb7 	bl	800cbb6 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c24e:	689b      	ldr	r3, [r3, #8]
 800c250:	6839      	ldr	r1, [r7, #0]
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	4798      	blx	r3
        }
        break;
 800c256:	e004      	b.n	800c262 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800c258:	6839      	ldr	r1, [r7, #0]
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f000 fbe0 	bl	800ca20 <USBD_CtlError>
        break;
 800c260:	e000      	b.n	800c264 <USBD_StdEPReq+0x13c>
        break;
 800c262:	bf00      	nop
      }
      break;
 800c264:	e0aa      	b.n	800c3bc <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c26c:	2b02      	cmp	r3, #2
 800c26e:	d002      	beq.n	800c276 <USBD_StdEPReq+0x14e>
 800c270:	2b03      	cmp	r3, #3
 800c272:	d032      	beq.n	800c2da <USBD_StdEPReq+0x1b2>
 800c274:	e097      	b.n	800c3a6 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c276:	7bbb      	ldrb	r3, [r7, #14]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d007      	beq.n	800c28c <USBD_StdEPReq+0x164>
 800c27c:	7bbb      	ldrb	r3, [r7, #14]
 800c27e:	2b80      	cmp	r3, #128	; 0x80
 800c280:	d004      	beq.n	800c28c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800c282:	6839      	ldr	r1, [r7, #0]
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f000 fbcb 	bl	800ca20 <USBD_CtlError>
          break;
 800c28a:	e091      	b.n	800c3b0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c28c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c290:	2b00      	cmp	r3, #0
 800c292:	da0b      	bge.n	800c2ac <USBD_StdEPReq+0x184>
 800c294:	7bbb      	ldrb	r3, [r7, #14]
 800c296:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c29a:	4613      	mov	r3, r2
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	4413      	add	r3, r2
 800c2a0:	009b      	lsls	r3, r3, #2
 800c2a2:	3310      	adds	r3, #16
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	4413      	add	r3, r2
 800c2a8:	3304      	adds	r3, #4
 800c2aa:	e00b      	b.n	800c2c4 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c2ac:	7bbb      	ldrb	r3, [r7, #14]
 800c2ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	009b      	lsls	r3, r3, #2
 800c2b6:	4413      	add	r3, r2
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c2be:	687a      	ldr	r2, [r7, #4]
 800c2c0:	4413      	add	r3, r2
 800c2c2:	3304      	adds	r3, #4
 800c2c4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	2202      	movs	r2, #2
 800c2d0:	4619      	mov	r1, r3
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f000 fc15 	bl	800cb02 <USBD_CtlSendData>
        break;
 800c2d8:	e06a      	b.n	800c3b0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800c2da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	da11      	bge.n	800c306 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c2e2:	7bbb      	ldrb	r3, [r7, #14]
 800c2e4:	f003 020f 	and.w	r2, r3, #15
 800c2e8:	6879      	ldr	r1, [r7, #4]
 800c2ea:	4613      	mov	r3, r2
 800c2ec:	009b      	lsls	r3, r3, #2
 800c2ee:	4413      	add	r3, r2
 800c2f0:	009b      	lsls	r3, r3, #2
 800c2f2:	440b      	add	r3, r1
 800c2f4:	3324      	adds	r3, #36	; 0x24
 800c2f6:	881b      	ldrh	r3, [r3, #0]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d117      	bne.n	800c32c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c2fc:	6839      	ldr	r1, [r7, #0]
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 fb8e 	bl	800ca20 <USBD_CtlError>
            break;
 800c304:	e054      	b.n	800c3b0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c306:	7bbb      	ldrb	r3, [r7, #14]
 800c308:	f003 020f 	and.w	r2, r3, #15
 800c30c:	6879      	ldr	r1, [r7, #4]
 800c30e:	4613      	mov	r3, r2
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	4413      	add	r3, r2
 800c314:	009b      	lsls	r3, r3, #2
 800c316:	440b      	add	r3, r1
 800c318:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c31c:	881b      	ldrh	r3, [r3, #0]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d104      	bne.n	800c32c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c322:	6839      	ldr	r1, [r7, #0]
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f000 fb7b 	bl	800ca20 <USBD_CtlError>
            break;
 800c32a:	e041      	b.n	800c3b0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c32c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c330:	2b00      	cmp	r3, #0
 800c332:	da0b      	bge.n	800c34c <USBD_StdEPReq+0x224>
 800c334:	7bbb      	ldrb	r3, [r7, #14]
 800c336:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c33a:	4613      	mov	r3, r2
 800c33c:	009b      	lsls	r3, r3, #2
 800c33e:	4413      	add	r3, r2
 800c340:	009b      	lsls	r3, r3, #2
 800c342:	3310      	adds	r3, #16
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	4413      	add	r3, r2
 800c348:	3304      	adds	r3, #4
 800c34a:	e00b      	b.n	800c364 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c34c:	7bbb      	ldrb	r3, [r7, #14]
 800c34e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c352:	4613      	mov	r3, r2
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	4413      	add	r3, r2
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	4413      	add	r3, r2
 800c362:	3304      	adds	r3, #4
 800c364:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c366:	7bbb      	ldrb	r3, [r7, #14]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d002      	beq.n	800c372 <USBD_StdEPReq+0x24a>
 800c36c:	7bbb      	ldrb	r3, [r7, #14]
 800c36e:	2b80      	cmp	r3, #128	; 0x80
 800c370:	d103      	bne.n	800c37a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	2200      	movs	r2, #0
 800c376:	601a      	str	r2, [r3, #0]
 800c378:	e00e      	b.n	800c398 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c37a:	7bbb      	ldrb	r3, [r7, #14]
 800c37c:	4619      	mov	r1, r3
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f004 fa12 	bl	80107a8 <USBD_LL_IsStallEP>
 800c384:	4603      	mov	r3, r0
 800c386:	2b00      	cmp	r3, #0
 800c388:	d003      	beq.n	800c392 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	2201      	movs	r2, #1
 800c38e:	601a      	str	r2, [r3, #0]
 800c390:	e002      	b.n	800c398 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	2200      	movs	r2, #0
 800c396:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	2202      	movs	r2, #2
 800c39c:	4619      	mov	r1, r3
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 fbaf 	bl	800cb02 <USBD_CtlSendData>
          break;
 800c3a4:	e004      	b.n	800c3b0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800c3a6:	6839      	ldr	r1, [r7, #0]
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f000 fb39 	bl	800ca20 <USBD_CtlError>
        break;
 800c3ae:	bf00      	nop
      }
      break;
 800c3b0:	e004      	b.n	800c3bc <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800c3b2:	6839      	ldr	r1, [r7, #0]
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 fb33 	bl	800ca20 <USBD_CtlError>
      break;
 800c3ba:	bf00      	nop
    }
    break;
 800c3bc:	e004      	b.n	800c3c8 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800c3be:	6839      	ldr	r1, [r7, #0]
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f000 fb2d 	bl	800ca20 <USBD_CtlError>
    break;
 800c3c6:	bf00      	nop
  }

  return ret;
 800c3c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3710      	adds	r7, #16
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
	...

0800c3d4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	885b      	ldrh	r3, [r3, #2]
 800c3ee:	0a1b      	lsrs	r3, r3, #8
 800c3f0:	b29b      	uxth	r3, r3
 800c3f2:	3b01      	subs	r3, #1
 800c3f4:	2b06      	cmp	r3, #6
 800c3f6:	f200 8128 	bhi.w	800c64a <USBD_GetDescriptor+0x276>
 800c3fa:	a201      	add	r2, pc, #4	; (adr r2, 800c400 <USBD_GetDescriptor+0x2c>)
 800c3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c400:	0800c41d 	.word	0x0800c41d
 800c404:	0800c435 	.word	0x0800c435
 800c408:	0800c475 	.word	0x0800c475
 800c40c:	0800c64b 	.word	0x0800c64b
 800c410:	0800c64b 	.word	0x0800c64b
 800c414:	0800c5eb 	.word	0x0800c5eb
 800c418:	0800c617 	.word	0x0800c617
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	7c12      	ldrb	r2, [r2, #16]
 800c428:	f107 0108 	add.w	r1, r7, #8
 800c42c:	4610      	mov	r0, r2
 800c42e:	4798      	blx	r3
 800c430:	60f8      	str	r0, [r7, #12]
    break;
 800c432:	e112      	b.n	800c65a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	7c1b      	ldrb	r3, [r3, #16]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d10d      	bne.n	800c458 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c444:	f107 0208 	add.w	r2, r7, #8
 800c448:	4610      	mov	r0, r2
 800c44a:	4798      	blx	r3
 800c44c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	3301      	adds	r3, #1
 800c452:	2202      	movs	r2, #2
 800c454:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c456:	e100      	b.n	800c65a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c460:	f107 0208 	add.w	r2, r7, #8
 800c464:	4610      	mov	r0, r2
 800c466:	4798      	blx	r3
 800c468:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	3301      	adds	r3, #1
 800c46e:	2202      	movs	r2, #2
 800c470:	701a      	strb	r2, [r3, #0]
    break;
 800c472:	e0f2      	b.n	800c65a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	885b      	ldrh	r3, [r3, #2]
 800c478:	b2db      	uxtb	r3, r3
 800c47a:	2b05      	cmp	r3, #5
 800c47c:	f200 80ac 	bhi.w	800c5d8 <USBD_GetDescriptor+0x204>
 800c480:	a201      	add	r2, pc, #4	; (adr r2, 800c488 <USBD_GetDescriptor+0xb4>)
 800c482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c486:	bf00      	nop
 800c488:	0800c4a1 	.word	0x0800c4a1
 800c48c:	0800c4d5 	.word	0x0800c4d5
 800c490:	0800c509 	.word	0x0800c509
 800c494:	0800c53d 	.word	0x0800c53d
 800c498:	0800c571 	.word	0x0800c571
 800c49c:	0800c5a5 	.word	0x0800c5a5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d00b      	beq.n	800c4c4 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	7c12      	ldrb	r2, [r2, #16]
 800c4b8:	f107 0108 	add.w	r1, r7, #8
 800c4bc:	4610      	mov	r0, r2
 800c4be:	4798      	blx	r3
 800c4c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4c2:	e091      	b.n	800c5e8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c4c4:	6839      	ldr	r1, [r7, #0]
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f000 faaa 	bl	800ca20 <USBD_CtlError>
        err++;
 800c4cc:	7afb      	ldrb	r3, [r7, #11]
 800c4ce:	3301      	adds	r3, #1
 800c4d0:	72fb      	strb	r3, [r7, #11]
      break;
 800c4d2:	e089      	b.n	800c5e8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4da:	689b      	ldr	r3, [r3, #8]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d00b      	beq.n	800c4f8 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4e6:	689b      	ldr	r3, [r3, #8]
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	7c12      	ldrb	r2, [r2, #16]
 800c4ec:	f107 0108 	add.w	r1, r7, #8
 800c4f0:	4610      	mov	r0, r2
 800c4f2:	4798      	blx	r3
 800c4f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4f6:	e077      	b.n	800c5e8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c4f8:	6839      	ldr	r1, [r7, #0]
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 fa90 	bl	800ca20 <USBD_CtlError>
        err++;
 800c500:	7afb      	ldrb	r3, [r7, #11]
 800c502:	3301      	adds	r3, #1
 800c504:	72fb      	strb	r3, [r7, #11]
      break;
 800c506:	e06f      	b.n	800c5e8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c50e:	68db      	ldr	r3, [r3, #12]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d00b      	beq.n	800c52c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c51a:	68db      	ldr	r3, [r3, #12]
 800c51c:	687a      	ldr	r2, [r7, #4]
 800c51e:	7c12      	ldrb	r2, [r2, #16]
 800c520:	f107 0108 	add.w	r1, r7, #8
 800c524:	4610      	mov	r0, r2
 800c526:	4798      	blx	r3
 800c528:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c52a:	e05d      	b.n	800c5e8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c52c:	6839      	ldr	r1, [r7, #0]
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 fa76 	bl	800ca20 <USBD_CtlError>
        err++;
 800c534:	7afb      	ldrb	r3, [r7, #11]
 800c536:	3301      	adds	r3, #1
 800c538:	72fb      	strb	r3, [r7, #11]
      break;
 800c53a:	e055      	b.n	800c5e8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c542:	691b      	ldr	r3, [r3, #16]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d00b      	beq.n	800c560 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c54e:	691b      	ldr	r3, [r3, #16]
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	7c12      	ldrb	r2, [r2, #16]
 800c554:	f107 0108 	add.w	r1, r7, #8
 800c558:	4610      	mov	r0, r2
 800c55a:	4798      	blx	r3
 800c55c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c55e:	e043      	b.n	800c5e8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c560:	6839      	ldr	r1, [r7, #0]
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f000 fa5c 	bl	800ca20 <USBD_CtlError>
        err++;
 800c568:	7afb      	ldrb	r3, [r7, #11]
 800c56a:	3301      	adds	r3, #1
 800c56c:	72fb      	strb	r3, [r7, #11]
      break;
 800c56e:	e03b      	b.n	800c5e8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c576:	695b      	ldr	r3, [r3, #20]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d00b      	beq.n	800c594 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c582:	695b      	ldr	r3, [r3, #20]
 800c584:	687a      	ldr	r2, [r7, #4]
 800c586:	7c12      	ldrb	r2, [r2, #16]
 800c588:	f107 0108 	add.w	r1, r7, #8
 800c58c:	4610      	mov	r0, r2
 800c58e:	4798      	blx	r3
 800c590:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c592:	e029      	b.n	800c5e8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c594:	6839      	ldr	r1, [r7, #0]
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 fa42 	bl	800ca20 <USBD_CtlError>
        err++;
 800c59c:	7afb      	ldrb	r3, [r7, #11]
 800c59e:	3301      	adds	r3, #1
 800c5a0:	72fb      	strb	r3, [r7, #11]
      break;
 800c5a2:	e021      	b.n	800c5e8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5aa:	699b      	ldr	r3, [r3, #24]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d00b      	beq.n	800c5c8 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5b6:	699b      	ldr	r3, [r3, #24]
 800c5b8:	687a      	ldr	r2, [r7, #4]
 800c5ba:	7c12      	ldrb	r2, [r2, #16]
 800c5bc:	f107 0108 	add.w	r1, r7, #8
 800c5c0:	4610      	mov	r0, r2
 800c5c2:	4798      	blx	r3
 800c5c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c5c6:	e00f      	b.n	800c5e8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800c5c8:	6839      	ldr	r1, [r7, #0]
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f000 fa28 	bl	800ca20 <USBD_CtlError>
        err++;
 800c5d0:	7afb      	ldrb	r3, [r7, #11]
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	72fb      	strb	r3, [r7, #11]
      break;
 800c5d6:	e007      	b.n	800c5e8 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800c5d8:	6839      	ldr	r1, [r7, #0]
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f000 fa20 	bl	800ca20 <USBD_CtlError>
      err++;
 800c5e0:	7afb      	ldrb	r3, [r7, #11]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800c5e6:	bf00      	nop
    }
    break;
 800c5e8:	e037      	b.n	800c65a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	7c1b      	ldrb	r3, [r3, #16]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d109      	bne.n	800c606 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5fa:	f107 0208 	add.w	r2, r7, #8
 800c5fe:	4610      	mov	r0, r2
 800c600:	4798      	blx	r3
 800c602:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c604:	e029      	b.n	800c65a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800c606:	6839      	ldr	r1, [r7, #0]
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 fa09 	bl	800ca20 <USBD_CtlError>
      err++;
 800c60e:	7afb      	ldrb	r3, [r7, #11]
 800c610:	3301      	adds	r3, #1
 800c612:	72fb      	strb	r3, [r7, #11]
    break;
 800c614:	e021      	b.n	800c65a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	7c1b      	ldrb	r3, [r3, #16]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d10d      	bne.n	800c63a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c626:	f107 0208 	add.w	r2, r7, #8
 800c62a:	4610      	mov	r0, r2
 800c62c:	4798      	blx	r3
 800c62e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	3301      	adds	r3, #1
 800c634:	2207      	movs	r2, #7
 800c636:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c638:	e00f      	b.n	800c65a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800c63a:	6839      	ldr	r1, [r7, #0]
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f000 f9ef 	bl	800ca20 <USBD_CtlError>
      err++;
 800c642:	7afb      	ldrb	r3, [r7, #11]
 800c644:	3301      	adds	r3, #1
 800c646:	72fb      	strb	r3, [r7, #11]
    break;
 800c648:	e007      	b.n	800c65a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800c64a:	6839      	ldr	r1, [r7, #0]
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f000 f9e7 	bl	800ca20 <USBD_CtlError>
    err++;
 800c652:	7afb      	ldrb	r3, [r7, #11]
 800c654:	3301      	adds	r3, #1
 800c656:	72fb      	strb	r3, [r7, #11]
    break;
 800c658:	bf00      	nop
  }

  if (err != 0U)
 800c65a:	7afb      	ldrb	r3, [r7, #11]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d11e      	bne.n	800c69e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	88db      	ldrh	r3, [r3, #6]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d016      	beq.n	800c696 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800c668:	893b      	ldrh	r3, [r7, #8]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d00e      	beq.n	800c68c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	88da      	ldrh	r2, [r3, #6]
 800c672:	893b      	ldrh	r3, [r7, #8]
 800c674:	4293      	cmp	r3, r2
 800c676:	bf28      	it	cs
 800c678:	4613      	movcs	r3, r2
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800c67e:	893b      	ldrh	r3, [r7, #8]
 800c680:	461a      	mov	r2, r3
 800c682:	68f9      	ldr	r1, [r7, #12]
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f000 fa3c 	bl	800cb02 <USBD_CtlSendData>
 800c68a:	e009      	b.n	800c6a0 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800c68c:	6839      	ldr	r1, [r7, #0]
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 f9c6 	bl	800ca20 <USBD_CtlError>
 800c694:	e004      	b.n	800c6a0 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 fa8d 	bl	800cbb6 <USBD_CtlSendStatus>
 800c69c:	e000      	b.n	800c6a0 <USBD_GetDescriptor+0x2cc>
    return;
 800c69e:	bf00      	nop
    }
  }
}
 800c6a0:	3710      	adds	r7, #16
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop

0800c6a8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b084      	sub	sp, #16
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	889b      	ldrh	r3, [r3, #4]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d130      	bne.n	800c71c <USBD_SetAddress+0x74>
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	88db      	ldrh	r3, [r3, #6]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d12c      	bne.n	800c71c <USBD_SetAddress+0x74>
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	885b      	ldrh	r3, [r3, #2]
 800c6c6:	2b7f      	cmp	r3, #127	; 0x7f
 800c6c8:	d828      	bhi.n	800c71c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	885b      	ldrh	r3, [r3, #2]
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6dc:	2b03      	cmp	r3, #3
 800c6de:	d104      	bne.n	800c6ea <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c6e0:	6839      	ldr	r1, [r7, #0]
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 f99c 	bl	800ca20 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6e8:	e01c      	b.n	800c724 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	7bfa      	ldrb	r2, [r7, #15]
 800c6ee:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c6f2:	7bfb      	ldrb	r3, [r7, #15]
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f004 f882 	bl	8010800 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 fa5a 	bl	800cbb6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c702:	7bfb      	ldrb	r3, [r7, #15]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d004      	beq.n	800c712 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2202      	movs	r2, #2
 800c70c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c710:	e008      	b.n	800c724 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2201      	movs	r2, #1
 800c716:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c71a:	e003      	b.n	800c724 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c71c:	6839      	ldr	r1, [r7, #0]
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 f97e 	bl	800ca20 <USBD_CtlError>
  }
}
 800c724:	bf00      	nop
 800c726:	3710      	adds	r7, #16
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b084      	sub	sp, #16
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c736:	2300      	movs	r3, #0
 800c738:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	885b      	ldrh	r3, [r3, #2]
 800c73e:	b2da      	uxtb	r2, r3
 800c740:	4b4b      	ldr	r3, [pc, #300]	; (800c870 <USBD_SetConfig+0x144>)
 800c742:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c744:	4b4a      	ldr	r3, [pc, #296]	; (800c870 <USBD_SetConfig+0x144>)
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	2b01      	cmp	r3, #1
 800c74a:	d905      	bls.n	800c758 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c74c:	6839      	ldr	r1, [r7, #0]
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f000 f966 	bl	800ca20 <USBD_CtlError>
    return USBD_FAIL;
 800c754:	2303      	movs	r3, #3
 800c756:	e087      	b.n	800c868 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c75e:	2b02      	cmp	r3, #2
 800c760:	d002      	beq.n	800c768 <USBD_SetConfig+0x3c>
 800c762:	2b03      	cmp	r3, #3
 800c764:	d025      	beq.n	800c7b2 <USBD_SetConfig+0x86>
 800c766:	e071      	b.n	800c84c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800c768:	4b41      	ldr	r3, [pc, #260]	; (800c870 <USBD_SetConfig+0x144>)
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d01c      	beq.n	800c7aa <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800c770:	4b3f      	ldr	r3, [pc, #252]	; (800c870 <USBD_SetConfig+0x144>)
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	461a      	mov	r2, r3
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c77a:	4b3d      	ldr	r3, [pc, #244]	; (800c870 <USBD_SetConfig+0x144>)
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	4619      	mov	r1, r3
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f7ff f9a7 	bl	800bad4 <USBD_SetClassConfig>
 800c786:	4603      	mov	r3, r0
 800c788:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800c78a:	7bfb      	ldrb	r3, [r7, #15]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d004      	beq.n	800c79a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800c790:	6839      	ldr	r1, [r7, #0]
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 f944 	bl	800ca20 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c798:	e065      	b.n	800c866 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 fa0b 	bl	800cbb6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2203      	movs	r2, #3
 800c7a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c7a8:	e05d      	b.n	800c866 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 fa03 	bl	800cbb6 <USBD_CtlSendStatus>
    break;
 800c7b0:	e059      	b.n	800c866 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800c7b2:	4b2f      	ldr	r3, [pc, #188]	; (800c870 <USBD_SetConfig+0x144>)
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d112      	bne.n	800c7e0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2202      	movs	r2, #2
 800c7be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800c7c2:	4b2b      	ldr	r3, [pc, #172]	; (800c870 <USBD_SetConfig+0x144>)
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c7cc:	4b28      	ldr	r3, [pc, #160]	; (800c870 <USBD_SetConfig+0x144>)
 800c7ce:	781b      	ldrb	r3, [r3, #0]
 800c7d0:	4619      	mov	r1, r3
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f7ff f99a 	bl	800bb0c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f000 f9ec 	bl	800cbb6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c7de:	e042      	b.n	800c866 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800c7e0:	4b23      	ldr	r3, [pc, #140]	; (800c870 <USBD_SetConfig+0x144>)
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d02a      	beq.n	800c844 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	b2db      	uxtb	r3, r3
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f7ff f988 	bl	800bb0c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800c7fc:	4b1c      	ldr	r3, [pc, #112]	; (800c870 <USBD_SetConfig+0x144>)
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	461a      	mov	r2, r3
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c806:	4b1a      	ldr	r3, [pc, #104]	; (800c870 <USBD_SetConfig+0x144>)
 800c808:	781b      	ldrb	r3, [r3, #0]
 800c80a:	4619      	mov	r1, r3
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f7ff f961 	bl	800bad4 <USBD_SetClassConfig>
 800c812:	4603      	mov	r3, r0
 800c814:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800c816:	7bfb      	ldrb	r3, [r7, #15]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d00f      	beq.n	800c83c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800c81c:	6839      	ldr	r1, [r7, #0]
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 f8fe 	bl	800ca20 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	b2db      	uxtb	r3, r3
 800c82a:	4619      	mov	r1, r3
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f7ff f96d 	bl	800bb0c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2202      	movs	r2, #2
 800c836:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c83a:	e014      	b.n	800c866 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f000 f9ba 	bl	800cbb6 <USBD_CtlSendStatus>
    break;
 800c842:	e010      	b.n	800c866 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f000 f9b6 	bl	800cbb6 <USBD_CtlSendStatus>
    break;
 800c84a:	e00c      	b.n	800c866 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800c84c:	6839      	ldr	r1, [r7, #0]
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 f8e6 	bl	800ca20 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c854:	4b06      	ldr	r3, [pc, #24]	; (800c870 <USBD_SetConfig+0x144>)
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	4619      	mov	r1, r3
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f7ff f956 	bl	800bb0c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800c860:	2303      	movs	r3, #3
 800c862:	73fb      	strb	r3, [r7, #15]
    break;
 800c864:	bf00      	nop
  }

  return ret;
 800c866:	7bfb      	ldrb	r3, [r7, #15]
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3710      	adds	r7, #16
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}
 800c870:	20000638 	.word	0x20000638

0800c874 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b082      	sub	sp, #8
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	88db      	ldrh	r3, [r3, #6]
 800c882:	2b01      	cmp	r3, #1
 800c884:	d004      	beq.n	800c890 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c886:	6839      	ldr	r1, [r7, #0]
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f000 f8c9 	bl	800ca20 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800c88e:	e021      	b.n	800c8d4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c896:	2b01      	cmp	r3, #1
 800c898:	db17      	blt.n	800c8ca <USBD_GetConfig+0x56>
 800c89a:	2b02      	cmp	r3, #2
 800c89c:	dd02      	ble.n	800c8a4 <USBD_GetConfig+0x30>
 800c89e:	2b03      	cmp	r3, #3
 800c8a0:	d00b      	beq.n	800c8ba <USBD_GetConfig+0x46>
 800c8a2:	e012      	b.n	800c8ca <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	3308      	adds	r3, #8
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f000 f925 	bl	800cb02 <USBD_CtlSendData>
      break;
 800c8b8:	e00c      	b.n	800c8d4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	3304      	adds	r3, #4
 800c8be:	2201      	movs	r2, #1
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 f91d 	bl	800cb02 <USBD_CtlSendData>
      break;
 800c8c8:	e004      	b.n	800c8d4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800c8ca:	6839      	ldr	r1, [r7, #0]
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f000 f8a7 	bl	800ca20 <USBD_CtlError>
      break;
 800c8d2:	bf00      	nop
}
 800c8d4:	bf00      	nop
 800c8d6:	3708      	adds	r7, #8
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b082      	sub	sp, #8
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8ec:	3b01      	subs	r3, #1
 800c8ee:	2b02      	cmp	r3, #2
 800c8f0:	d81e      	bhi.n	800c930 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	88db      	ldrh	r3, [r3, #6]
 800c8f6:	2b02      	cmp	r3, #2
 800c8f8:	d004      	beq.n	800c904 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800c8fa:	6839      	ldr	r1, [r7, #0]
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 f88f 	bl	800ca20 <USBD_CtlError>
      break;
 800c902:	e01a      	b.n	800c93a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2201      	movs	r2, #1
 800c908:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c910:	2b00      	cmp	r3, #0
 800c912:	d005      	beq.n	800c920 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	68db      	ldr	r3, [r3, #12]
 800c918:	f043 0202 	orr.w	r2, r3, #2
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	330c      	adds	r3, #12
 800c924:	2202      	movs	r2, #2
 800c926:	4619      	mov	r1, r3
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f000 f8ea 	bl	800cb02 <USBD_CtlSendData>
    break;
 800c92e:	e004      	b.n	800c93a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800c930:	6839      	ldr	r1, [r7, #0]
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 f874 	bl	800ca20 <USBD_CtlError>
    break;
 800c938:	bf00      	nop
  }
}
 800c93a:	bf00      	nop
 800c93c:	3708      	adds	r7, #8
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}

0800c942 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c942:	b580      	push	{r7, lr}
 800c944:	b082      	sub	sp, #8
 800c946:	af00      	add	r7, sp, #0
 800c948:	6078      	str	r0, [r7, #4]
 800c94a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	885b      	ldrh	r3, [r3, #2]
 800c950:	2b01      	cmp	r3, #1
 800c952:	d106      	bne.n	800c962 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2201      	movs	r2, #1
 800c958:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f000 f92a 	bl	800cbb6 <USBD_CtlSendStatus>
  }
}
 800c962:	bf00      	nop
 800c964:	3708      	adds	r7, #8
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}

0800c96a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b082      	sub	sp, #8
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6078      	str	r0, [r7, #4]
 800c972:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c97a:	3b01      	subs	r3, #1
 800c97c:	2b02      	cmp	r3, #2
 800c97e:	d80b      	bhi.n	800c998 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	885b      	ldrh	r3, [r3, #2]
 800c984:	2b01      	cmp	r3, #1
 800c986:	d10c      	bne.n	800c9a2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2200      	movs	r2, #0
 800c98c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f000 f910 	bl	800cbb6 <USBD_CtlSendStatus>
      }
      break;
 800c996:	e004      	b.n	800c9a2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c998:	6839      	ldr	r1, [r7, #0]
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 f840 	bl	800ca20 <USBD_CtlError>
      break;
 800c9a0:	e000      	b.n	800c9a4 <USBD_ClrFeature+0x3a>
      break;
 800c9a2:	bf00      	nop
  }
}
 800c9a4:	bf00      	nop
 800c9a6:	3708      	adds	r7, #8
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}

0800c9ac <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b084      	sub	sp, #16
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
 800c9b4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	781a      	ldrb	r2, [r3, #0]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	781a      	ldrb	r2, [r3, #0]
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c9d6:	68f8      	ldr	r0, [r7, #12]
 800c9d8:	f7ff fad3 	bl	800bf82 <SWAPBYTE>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	461a      	mov	r2, r3
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c9f0:	68f8      	ldr	r0, [r7, #12]
 800c9f2:	f7ff fac6 	bl	800bf82 <SWAPBYTE>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	3301      	adds	r3, #1
 800ca02:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	3301      	adds	r3, #1
 800ca08:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ca0a:	68f8      	ldr	r0, [r7, #12]
 800ca0c:	f7ff fab9 	bl	800bf82 <SWAPBYTE>
 800ca10:	4603      	mov	r3, r0
 800ca12:	461a      	mov	r2, r3
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	80da      	strh	r2, [r3, #6]
}
 800ca18:	bf00      	nop
 800ca1a:	3710      	adds	r7, #16
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca2a:	2180      	movs	r1, #128	; 0x80
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f003 fe7d 	bl	801072c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ca32:	2100      	movs	r1, #0
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f003 fe79 	bl	801072c <USBD_LL_StallEP>
}
 800ca3a:	bf00      	nop
 800ca3c:	3708      	adds	r7, #8
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}

0800ca42 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ca42:	b580      	push	{r7, lr}
 800ca44:	b086      	sub	sp, #24
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	60f8      	str	r0, [r7, #12]
 800ca4a:	60b9      	str	r1, [r7, #8]
 800ca4c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d036      	beq.n	800cac6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ca5c:	6938      	ldr	r0, [r7, #16]
 800ca5e:	f000 f836 	bl	800cace <USBD_GetLen>
 800ca62:	4603      	mov	r3, r0
 800ca64:	3301      	adds	r3, #1
 800ca66:	b29b      	uxth	r3, r3
 800ca68:	005b      	lsls	r3, r3, #1
 800ca6a:	b29a      	uxth	r2, r3
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ca70:	7dfb      	ldrb	r3, [r7, #23]
 800ca72:	68ba      	ldr	r2, [r7, #8]
 800ca74:	4413      	add	r3, r2
 800ca76:	687a      	ldr	r2, [r7, #4]
 800ca78:	7812      	ldrb	r2, [r2, #0]
 800ca7a:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca7c:	7dfb      	ldrb	r3, [r7, #23]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ca82:	7dfb      	ldrb	r3, [r7, #23]
 800ca84:	68ba      	ldr	r2, [r7, #8]
 800ca86:	4413      	add	r3, r2
 800ca88:	2203      	movs	r2, #3
 800ca8a:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca8c:	7dfb      	ldrb	r3, [r7, #23]
 800ca8e:	3301      	adds	r3, #1
 800ca90:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ca92:	e013      	b.n	800cabc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ca94:	7dfb      	ldrb	r3, [r7, #23]
 800ca96:	68ba      	ldr	r2, [r7, #8]
 800ca98:	4413      	add	r3, r2
 800ca9a:	693a      	ldr	r2, [r7, #16]
 800ca9c:	7812      	ldrb	r2, [r2, #0]
 800ca9e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	3301      	adds	r3, #1
 800caa4:	613b      	str	r3, [r7, #16]
    idx++;
 800caa6:	7dfb      	ldrb	r3, [r7, #23]
 800caa8:	3301      	adds	r3, #1
 800caaa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800caac:	7dfb      	ldrb	r3, [r7, #23]
 800caae:	68ba      	ldr	r2, [r7, #8]
 800cab0:	4413      	add	r3, r2
 800cab2:	2200      	movs	r2, #0
 800cab4:	701a      	strb	r2, [r3, #0]
    idx++;
 800cab6:	7dfb      	ldrb	r3, [r7, #23]
 800cab8:	3301      	adds	r3, #1
 800caba:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d1e7      	bne.n	800ca94 <USBD_GetString+0x52>
 800cac4:	e000      	b.n	800cac8 <USBD_GetString+0x86>
    return;
 800cac6:	bf00      	nop
  }
}
 800cac8:	3718      	adds	r7, #24
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}

0800cace <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cace:	b480      	push	{r7}
 800cad0:	b085      	sub	sp, #20
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cad6:	2300      	movs	r3, #0
 800cad8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cade:	e005      	b.n	800caec <USBD_GetLen+0x1e>
  {
    len++;
 800cae0:	7bfb      	ldrb	r3, [r7, #15]
 800cae2:	3301      	adds	r3, #1
 800cae4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	3301      	adds	r3, #1
 800caea:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	781b      	ldrb	r3, [r3, #0]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d1f5      	bne.n	800cae0 <USBD_GetLen+0x12>
  }

  return len;
 800caf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3714      	adds	r7, #20
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr

0800cb02 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b084      	sub	sp, #16
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	60f8      	str	r0, [r7, #12]
 800cb0a:	60b9      	str	r1, [r7, #8]
 800cb0c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	2202      	movs	r2, #2
 800cb12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	687a      	ldr	r2, [r7, #4]
 800cb20:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	68ba      	ldr	r2, [r7, #8]
 800cb26:	2100      	movs	r1, #0
 800cb28:	68f8      	ldr	r0, [r7, #12]
 800cb2a:	f003 fe88 	bl	801083e <USBD_LL_Transmit>

  return USBD_OK;
 800cb2e:	2300      	movs	r3, #0
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3710      	adds	r7, #16
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	68ba      	ldr	r2, [r7, #8]
 800cb48:	2100      	movs	r1, #0
 800cb4a:	68f8      	ldr	r0, [r7, #12]
 800cb4c:	f003 fe77 	bl	801083e <USBD_LL_Transmit>

  return USBD_OK;
 800cb50:	2300      	movs	r3, #0
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3710      	adds	r7, #16
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}

0800cb5a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cb5a:	b580      	push	{r7, lr}
 800cb5c:	b084      	sub	sp, #16
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	60f8      	str	r0, [r7, #12]
 800cb62:	60b9      	str	r1, [r7, #8]
 800cb64:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	2203      	movs	r2, #3
 800cb6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	687a      	ldr	r2, [r7, #4]
 800cb72:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	687a      	ldr	r2, [r7, #4]
 800cb7a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	68ba      	ldr	r2, [r7, #8]
 800cb82:	2100      	movs	r1, #0
 800cb84:	68f8      	ldr	r0, [r7, #12]
 800cb86:	f003 fe7b 	bl	8010880 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb8a:	2300      	movs	r3, #0
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3710      	adds	r7, #16
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}

0800cb94 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b084      	sub	sp, #16
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	60f8      	str	r0, [r7, #12]
 800cb9c:	60b9      	str	r1, [r7, #8]
 800cb9e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	68ba      	ldr	r2, [r7, #8]
 800cba4:	2100      	movs	r1, #0
 800cba6:	68f8      	ldr	r0, [r7, #12]
 800cba8:	f003 fe6a 	bl	8010880 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cbac:	2300      	movs	r3, #0
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3710      	adds	r7, #16
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}

0800cbb6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cbb6:	b580      	push	{r7, lr}
 800cbb8:	b082      	sub	sp, #8
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2204      	movs	r2, #4
 800cbc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	2200      	movs	r2, #0
 800cbca:	2100      	movs	r1, #0
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f003 fe36 	bl	801083e <USBD_LL_Transmit>

  return USBD_OK;
 800cbd2:	2300      	movs	r3, #0
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3708      	adds	r7, #8
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2205      	movs	r2, #5
 800cbe8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cbec:	2300      	movs	r3, #0
 800cbee:	2200      	movs	r2, #0
 800cbf0:	2100      	movs	r1, #0
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f003 fe44 	bl	8010880 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cbf8:	2300      	movs	r3, #0
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3708      	adds	r7, #8
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}

0800cc02 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cc02:	b480      	push	{r7}
 800cc04:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800cc06:	bf00      	nop
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr

0800cc10 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cc10:	b480      	push	{r7}
 800cc12:	b085      	sub	sp, #20
 800cc14:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc16:	f3ef 8305 	mrs	r3, IPSR
 800cc1a:	60bb      	str	r3, [r7, #8]
  return(result);
 800cc1c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d10f      	bne.n	800cc42 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc22:	f3ef 8310 	mrs	r3, PRIMASK
 800cc26:	607b      	str	r3, [r7, #4]
  return(result);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d105      	bne.n	800cc3a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cc2e:	f3ef 8311 	mrs	r3, BASEPRI
 800cc32:	603b      	str	r3, [r7, #0]
  return(result);
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d007      	beq.n	800cc4a <osKernelInitialize+0x3a>
 800cc3a:	4b0e      	ldr	r3, [pc, #56]	; (800cc74 <osKernelInitialize+0x64>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	2b02      	cmp	r3, #2
 800cc40:	d103      	bne.n	800cc4a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800cc42:	f06f 0305 	mvn.w	r3, #5
 800cc46:	60fb      	str	r3, [r7, #12]
 800cc48:	e00c      	b.n	800cc64 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cc4a:	4b0a      	ldr	r3, [pc, #40]	; (800cc74 <osKernelInitialize+0x64>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d105      	bne.n	800cc5e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cc52:	4b08      	ldr	r3, [pc, #32]	; (800cc74 <osKernelInitialize+0x64>)
 800cc54:	2201      	movs	r2, #1
 800cc56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	60fb      	str	r3, [r7, #12]
 800cc5c:	e002      	b.n	800cc64 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800cc5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cc64:	68fb      	ldr	r3, [r7, #12]
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3714      	adds	r7, #20
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc70:	4770      	bx	lr
 800cc72:	bf00      	nop
 800cc74:	2000063c 	.word	0x2000063c

0800cc78 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc7e:	f3ef 8305 	mrs	r3, IPSR
 800cc82:	60bb      	str	r3, [r7, #8]
  return(result);
 800cc84:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d10f      	bne.n	800ccaa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc8a:	f3ef 8310 	mrs	r3, PRIMASK
 800cc8e:	607b      	str	r3, [r7, #4]
  return(result);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d105      	bne.n	800cca2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cc96:	f3ef 8311 	mrs	r3, BASEPRI
 800cc9a:	603b      	str	r3, [r7, #0]
  return(result);
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d007      	beq.n	800ccb2 <osKernelStart+0x3a>
 800cca2:	4b0f      	ldr	r3, [pc, #60]	; (800cce0 <osKernelStart+0x68>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	2b02      	cmp	r3, #2
 800cca8:	d103      	bne.n	800ccb2 <osKernelStart+0x3a>
    stat = osErrorISR;
 800ccaa:	f06f 0305 	mvn.w	r3, #5
 800ccae:	60fb      	str	r3, [r7, #12]
 800ccb0:	e010      	b.n	800ccd4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ccb2:	4b0b      	ldr	r3, [pc, #44]	; (800cce0 <osKernelStart+0x68>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d109      	bne.n	800ccce <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ccba:	f7ff ffa2 	bl	800cc02 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ccbe:	4b08      	ldr	r3, [pc, #32]	; (800cce0 <osKernelStart+0x68>)
 800ccc0:	2202      	movs	r2, #2
 800ccc2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ccc4:	f001 fb84 	bl	800e3d0 <vTaskStartScheduler>
      stat = osOK;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	60fb      	str	r3, [r7, #12]
 800cccc:	e002      	b.n	800ccd4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800ccce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ccd2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3710      	adds	r7, #16
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	2000063c 	.word	0x2000063c

0800cce4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b090      	sub	sp, #64	; 0x40
 800cce8:	af04      	add	r7, sp, #16
 800ccea:	60f8      	str	r0, [r7, #12]
 800ccec:	60b9      	str	r1, [r7, #8]
 800ccee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccf4:	f3ef 8305 	mrs	r3, IPSR
 800ccf8:	61fb      	str	r3, [r7, #28]
  return(result);
 800ccfa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	f040 808f 	bne.w	800ce20 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd02:	f3ef 8310 	mrs	r3, PRIMASK
 800cd06:	61bb      	str	r3, [r7, #24]
  return(result);
 800cd08:	69bb      	ldr	r3, [r7, #24]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d105      	bne.n	800cd1a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cd0e:	f3ef 8311 	mrs	r3, BASEPRI
 800cd12:	617b      	str	r3, [r7, #20]
  return(result);
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d003      	beq.n	800cd22 <osThreadNew+0x3e>
 800cd1a:	4b44      	ldr	r3, [pc, #272]	; (800ce2c <osThreadNew+0x148>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	2b02      	cmp	r3, #2
 800cd20:	d07e      	beq.n	800ce20 <osThreadNew+0x13c>
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d07b      	beq.n	800ce20 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800cd28:	2380      	movs	r3, #128	; 0x80
 800cd2a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800cd2c:	2318      	movs	r3, #24
 800cd2e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800cd30:	2300      	movs	r3, #0
 800cd32:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800cd34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd38:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d045      	beq.n	800cdcc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d002      	beq.n	800cd4e <osThreadNew+0x6a>
        name = attr->name;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	699b      	ldr	r3, [r3, #24]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d002      	beq.n	800cd5c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	699b      	ldr	r3, [r3, #24]
 800cd5a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d008      	beq.n	800cd74 <osThreadNew+0x90>
 800cd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd64:	2b38      	cmp	r3, #56	; 0x38
 800cd66:	d805      	bhi.n	800cd74 <osThreadNew+0x90>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	f003 0301 	and.w	r3, r3, #1
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d001      	beq.n	800cd78 <osThreadNew+0x94>
        return (NULL);
 800cd74:	2300      	movs	r3, #0
 800cd76:	e054      	b.n	800ce22 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	695b      	ldr	r3, [r3, #20]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d003      	beq.n	800cd88 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	695b      	ldr	r3, [r3, #20]
 800cd84:	089b      	lsrs	r3, r3, #2
 800cd86:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	689b      	ldr	r3, [r3, #8]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d00e      	beq.n	800cdae <osThreadNew+0xca>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	68db      	ldr	r3, [r3, #12]
 800cd94:	2b63      	cmp	r3, #99	; 0x63
 800cd96:	d90a      	bls.n	800cdae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d006      	beq.n	800cdae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	695b      	ldr	r3, [r3, #20]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d002      	beq.n	800cdae <osThreadNew+0xca>
        mem = 1;
 800cda8:	2301      	movs	r3, #1
 800cdaa:	623b      	str	r3, [r7, #32]
 800cdac:	e010      	b.n	800cdd0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	689b      	ldr	r3, [r3, #8]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d10c      	bne.n	800cdd0 <osThreadNew+0xec>
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	68db      	ldr	r3, [r3, #12]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d108      	bne.n	800cdd0 <osThreadNew+0xec>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	691b      	ldr	r3, [r3, #16]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d104      	bne.n	800cdd0 <osThreadNew+0xec>
          mem = 0;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	623b      	str	r3, [r7, #32]
 800cdca:	e001      	b.n	800cdd0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800cdd0:	6a3b      	ldr	r3, [r7, #32]
 800cdd2:	2b01      	cmp	r3, #1
 800cdd4:	d110      	bne.n	800cdf8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800cdda:	687a      	ldr	r2, [r7, #4]
 800cddc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cdde:	9202      	str	r2, [sp, #8]
 800cde0:	9301      	str	r3, [sp, #4]
 800cde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde4:	9300      	str	r3, [sp, #0]
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cdec:	68f8      	ldr	r0, [r7, #12]
 800cdee:	f001 f89d 	bl	800df2c <xTaskCreateStatic>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	613b      	str	r3, [r7, #16]
 800cdf6:	e013      	b.n	800ce20 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800cdf8:	6a3b      	ldr	r3, [r7, #32]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d110      	bne.n	800ce20 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cdfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce00:	b29a      	uxth	r2, r3
 800ce02:	f107 0310 	add.w	r3, r7, #16
 800ce06:	9301      	str	r3, [sp, #4]
 800ce08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce0a:	9300      	str	r3, [sp, #0]
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce10:	68f8      	ldr	r0, [r7, #12]
 800ce12:	f001 f8e5 	bl	800dfe0 <xTaskCreate>
 800ce16:	4603      	mov	r3, r0
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	d001      	beq.n	800ce20 <osThreadNew+0x13c>
          hTask = NULL;
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ce20:	693b      	ldr	r3, [r7, #16]
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3730      	adds	r7, #48	; 0x30
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
 800ce2a:	bf00      	nop
 800ce2c:	2000063c 	.word	0x2000063c

0800ce30 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b086      	sub	sp, #24
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce38:	f3ef 8305 	mrs	r3, IPSR
 800ce3c:	613b      	str	r3, [r7, #16]
  return(result);
 800ce3e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d10f      	bne.n	800ce64 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce44:	f3ef 8310 	mrs	r3, PRIMASK
 800ce48:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d105      	bne.n	800ce5c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce50:	f3ef 8311 	mrs	r3, BASEPRI
 800ce54:	60bb      	str	r3, [r7, #8]
  return(result);
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d007      	beq.n	800ce6c <osDelay+0x3c>
 800ce5c:	4b0a      	ldr	r3, [pc, #40]	; (800ce88 <osDelay+0x58>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	2b02      	cmp	r3, #2
 800ce62:	d103      	bne.n	800ce6c <osDelay+0x3c>
    stat = osErrorISR;
 800ce64:	f06f 0305 	mvn.w	r3, #5
 800ce68:	617b      	str	r3, [r7, #20]
 800ce6a:	e007      	b.n	800ce7c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d002      	beq.n	800ce7c <osDelay+0x4c>
      vTaskDelay(ticks);
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f001 fa76 	bl	800e368 <vTaskDelay>
    }
  }

  return (stat);
 800ce7c:	697b      	ldr	r3, [r7, #20]
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3718      	adds	r7, #24
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop
 800ce88:	2000063c 	.word	0x2000063c

0800ce8c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b08c      	sub	sp, #48	; 0x30
 800ce90:	af02      	add	r7, sp, #8
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce9c:	f3ef 8305 	mrs	r3, IPSR
 800cea0:	61bb      	str	r3, [r7, #24]
  return(result);
 800cea2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d170      	bne.n	800cf8a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cea8:	f3ef 8310 	mrs	r3, PRIMASK
 800ceac:	617b      	str	r3, [r7, #20]
  return(result);
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d105      	bne.n	800cec0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ceb4:	f3ef 8311 	mrs	r3, BASEPRI
 800ceb8:	613b      	str	r3, [r7, #16]
  return(result);
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d003      	beq.n	800cec8 <osMessageQueueNew+0x3c>
 800cec0:	4b34      	ldr	r3, [pc, #208]	; (800cf94 <osMessageQueueNew+0x108>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	2b02      	cmp	r3, #2
 800cec6:	d060      	beq.n	800cf8a <osMessageQueueNew+0xfe>
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d05d      	beq.n	800cf8a <osMessageQueueNew+0xfe>
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d05a      	beq.n	800cf8a <osMessageQueueNew+0xfe>
    mem = -1;
 800ced4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ced8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d029      	beq.n	800cf34 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	689b      	ldr	r3, [r3, #8]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d012      	beq.n	800cf0e <osMessageQueueNew+0x82>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	68db      	ldr	r3, [r3, #12]
 800ceec:	2b4f      	cmp	r3, #79	; 0x4f
 800ceee:	d90e      	bls.n	800cf0e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d00a      	beq.n	800cf0e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	695a      	ldr	r2, [r3, #20]
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	68b9      	ldr	r1, [r7, #8]
 800cf00:	fb01 f303 	mul.w	r3, r1, r3
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d302      	bcc.n	800cf0e <osMessageQueueNew+0x82>
        mem = 1;
 800cf08:	2301      	movs	r3, #1
 800cf0a:	623b      	str	r3, [r7, #32]
 800cf0c:	e014      	b.n	800cf38 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	689b      	ldr	r3, [r3, #8]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d110      	bne.n	800cf38 <osMessageQueueNew+0xac>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	68db      	ldr	r3, [r3, #12]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d10c      	bne.n	800cf38 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d108      	bne.n	800cf38 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	695b      	ldr	r3, [r3, #20]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d104      	bne.n	800cf38 <osMessageQueueNew+0xac>
          mem = 0;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	623b      	str	r3, [r7, #32]
 800cf32:	e001      	b.n	800cf38 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800cf34:	2300      	movs	r3, #0
 800cf36:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800cf38:	6a3b      	ldr	r3, [r7, #32]
 800cf3a:	2b01      	cmp	r3, #1
 800cf3c:	d10c      	bne.n	800cf58 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	691a      	ldr	r2, [r3, #16]
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6899      	ldr	r1, [r3, #8]
 800cf46:	2300      	movs	r3, #0
 800cf48:	9300      	str	r3, [sp, #0]
 800cf4a:	460b      	mov	r3, r1
 800cf4c:	68b9      	ldr	r1, [r7, #8]
 800cf4e:	68f8      	ldr	r0, [r7, #12]
 800cf50:	f000 faa0 	bl	800d494 <xQueueGenericCreateStatic>
 800cf54:	6278      	str	r0, [r7, #36]	; 0x24
 800cf56:	e008      	b.n	800cf6a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800cf58:	6a3b      	ldr	r3, [r7, #32]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d105      	bne.n	800cf6a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800cf5e:	2200      	movs	r2, #0
 800cf60:	68b9      	ldr	r1, [r7, #8]
 800cf62:	68f8      	ldr	r0, [r7, #12]
 800cf64:	f000 fb09 	bl	800d57a <xQueueGenericCreate>
 800cf68:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800cf6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d00c      	beq.n	800cf8a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d003      	beq.n	800cf7e <osMessageQueueNew+0xf2>
        name = attr->name;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	61fb      	str	r3, [r7, #28]
 800cf7c:	e001      	b.n	800cf82 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800cf82:	69f9      	ldr	r1, [r7, #28]
 800cf84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf86:	f000 ff75 	bl	800de74 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800cf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3728      	adds	r7, #40	; 0x28
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}
 800cf94:	2000063c 	.word	0x2000063c

0800cf98 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b08a      	sub	sp, #40	; 0x28
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	60f8      	str	r0, [r7, #12]
 800cfa0:	60b9      	str	r1, [r7, #8]
 800cfa2:	603b      	str	r3, [r7, #0]
 800cfa4:	4613      	mov	r3, r2
 800cfa6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cfac:	2300      	movs	r3, #0
 800cfae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cfb0:	f3ef 8305 	mrs	r3, IPSR
 800cfb4:	61fb      	str	r3, [r7, #28]
  return(result);
 800cfb6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d10f      	bne.n	800cfdc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfbc:	f3ef 8310 	mrs	r3, PRIMASK
 800cfc0:	61bb      	str	r3, [r7, #24]
  return(result);
 800cfc2:	69bb      	ldr	r3, [r7, #24]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d105      	bne.n	800cfd4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cfc8:	f3ef 8311 	mrs	r3, BASEPRI
 800cfcc:	617b      	str	r3, [r7, #20]
  return(result);
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d02c      	beq.n	800d02e <osMessageQueuePut+0x96>
 800cfd4:	4b28      	ldr	r3, [pc, #160]	; (800d078 <osMessageQueuePut+0xe0>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	2b02      	cmp	r3, #2
 800cfda:	d128      	bne.n	800d02e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cfdc:	6a3b      	ldr	r3, [r7, #32]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d005      	beq.n	800cfee <osMessageQueuePut+0x56>
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d002      	beq.n	800cfee <osMessageQueuePut+0x56>
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d003      	beq.n	800cff6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800cfee:	f06f 0303 	mvn.w	r3, #3
 800cff2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cff4:	e039      	b.n	800d06a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800cff6:	2300      	movs	r3, #0
 800cff8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cffa:	f107 0210 	add.w	r2, r7, #16
 800cffe:	2300      	movs	r3, #0
 800d000:	68b9      	ldr	r1, [r7, #8]
 800d002:	6a38      	ldr	r0, [r7, #32]
 800d004:	f000 fc16 	bl	800d834 <xQueueGenericSendFromISR>
 800d008:	4603      	mov	r3, r0
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	d003      	beq.n	800d016 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800d00e:	f06f 0302 	mvn.w	r3, #2
 800d012:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d014:	e029      	b.n	800d06a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d026      	beq.n	800d06a <osMessageQueuePut+0xd2>
 800d01c:	4b17      	ldr	r3, [pc, #92]	; (800d07c <osMessageQueuePut+0xe4>)
 800d01e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d022:	601a      	str	r2, [r3, #0]
 800d024:	f3bf 8f4f 	dsb	sy
 800d028:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d02c:	e01d      	b.n	800d06a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d02e:	6a3b      	ldr	r3, [r7, #32]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d002      	beq.n	800d03a <osMessageQueuePut+0xa2>
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d103      	bne.n	800d042 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800d03a:	f06f 0303 	mvn.w	r3, #3
 800d03e:	627b      	str	r3, [r7, #36]	; 0x24
 800d040:	e014      	b.n	800d06c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d042:	2300      	movs	r3, #0
 800d044:	683a      	ldr	r2, [r7, #0]
 800d046:	68b9      	ldr	r1, [r7, #8]
 800d048:	6a38      	ldr	r0, [r7, #32]
 800d04a:	f000 faf9 	bl	800d640 <xQueueGenericSend>
 800d04e:	4603      	mov	r3, r0
 800d050:	2b01      	cmp	r3, #1
 800d052:	d00b      	beq.n	800d06c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d003      	beq.n	800d062 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800d05a:	f06f 0301 	mvn.w	r3, #1
 800d05e:	627b      	str	r3, [r7, #36]	; 0x24
 800d060:	e004      	b.n	800d06c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800d062:	f06f 0302 	mvn.w	r3, #2
 800d066:	627b      	str	r3, [r7, #36]	; 0x24
 800d068:	e000      	b.n	800d06c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d06a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3728      	adds	r7, #40	; 0x28
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	2000063c 	.word	0x2000063c
 800d07c:	e000ed04 	.word	0xe000ed04

0800d080 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d080:	b580      	push	{r7, lr}
 800d082:	b08a      	sub	sp, #40	; 0x28
 800d084:	af00      	add	r7, sp, #0
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	60b9      	str	r1, [r7, #8]
 800d08a:	607a      	str	r2, [r7, #4]
 800d08c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d092:	2300      	movs	r3, #0
 800d094:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d096:	f3ef 8305 	mrs	r3, IPSR
 800d09a:	61fb      	str	r3, [r7, #28]
  return(result);
 800d09c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d10f      	bne.n	800d0c2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0a2:	f3ef 8310 	mrs	r3, PRIMASK
 800d0a6:	61bb      	str	r3, [r7, #24]
  return(result);
 800d0a8:	69bb      	ldr	r3, [r7, #24]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d105      	bne.n	800d0ba <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d0ae:	f3ef 8311 	mrs	r3, BASEPRI
 800d0b2:	617b      	str	r3, [r7, #20]
  return(result);
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d02c      	beq.n	800d114 <osMessageQueueGet+0x94>
 800d0ba:	4b28      	ldr	r3, [pc, #160]	; (800d15c <osMessageQueueGet+0xdc>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	2b02      	cmp	r3, #2
 800d0c0:	d128      	bne.n	800d114 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d0c2:	6a3b      	ldr	r3, [r7, #32]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d005      	beq.n	800d0d4 <osMessageQueueGet+0x54>
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d002      	beq.n	800d0d4 <osMessageQueueGet+0x54>
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d003      	beq.n	800d0dc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800d0d4:	f06f 0303 	mvn.w	r3, #3
 800d0d8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d0da:	e038      	b.n	800d14e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d0e0:	f107 0310 	add.w	r3, r7, #16
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	68b9      	ldr	r1, [r7, #8]
 800d0e8:	6a38      	ldr	r0, [r7, #32]
 800d0ea:	f000 fd13 	bl	800db14 <xQueueReceiveFromISR>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	2b01      	cmp	r3, #1
 800d0f2:	d003      	beq.n	800d0fc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800d0f4:	f06f 0302 	mvn.w	r3, #2
 800d0f8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d0fa:	e028      	b.n	800d14e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d025      	beq.n	800d14e <osMessageQueueGet+0xce>
 800d102:	4b17      	ldr	r3, [pc, #92]	; (800d160 <osMessageQueueGet+0xe0>)
 800d104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d108:	601a      	str	r2, [r3, #0]
 800d10a:	f3bf 8f4f 	dsb	sy
 800d10e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d112:	e01c      	b.n	800d14e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d114:	6a3b      	ldr	r3, [r7, #32]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d002      	beq.n	800d120 <osMessageQueueGet+0xa0>
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d103      	bne.n	800d128 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800d120:	f06f 0303 	mvn.w	r3, #3
 800d124:	627b      	str	r3, [r7, #36]	; 0x24
 800d126:	e013      	b.n	800d150 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d128:	683a      	ldr	r2, [r7, #0]
 800d12a:	68b9      	ldr	r1, [r7, #8]
 800d12c:	6a38      	ldr	r0, [r7, #32]
 800d12e:	f000 fc15 	bl	800d95c <xQueueReceive>
 800d132:	4603      	mov	r3, r0
 800d134:	2b01      	cmp	r3, #1
 800d136:	d00b      	beq.n	800d150 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d003      	beq.n	800d146 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800d13e:	f06f 0301 	mvn.w	r3, #1
 800d142:	627b      	str	r3, [r7, #36]	; 0x24
 800d144:	e004      	b.n	800d150 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800d146:	f06f 0302 	mvn.w	r3, #2
 800d14a:	627b      	str	r3, [r7, #36]	; 0x24
 800d14c:	e000      	b.n	800d150 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d14e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d152:	4618      	mov	r0, r3
 800d154:	3728      	adds	r7, #40	; 0x28
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	2000063c 	.word	0x2000063c
 800d160:	e000ed04 	.word	0xe000ed04

0800d164 <osMessageQueueGetSpace>:
  }

  return ((uint32_t)count);
}

uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800d164:	b580      	push	{r7, lr}
 800d166:	b08c      	sub	sp, #48	; 0x30
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800d170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d172:	2b00      	cmp	r3, #0
 800d174:	d102      	bne.n	800d17c <osMessageQueueGetSpace+0x18>
    space = 0U;
 800d176:	2300      	movs	r3, #0
 800d178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d17a:	e033      	b.n	800d1e4 <osMessageQueueGetSpace+0x80>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d17c:	f3ef 8305 	mrs	r3, IPSR
 800d180:	623b      	str	r3, [r7, #32]
  return(result);
 800d182:	6a3b      	ldr	r3, [r7, #32]
  }
  else if (IS_IRQ()) {
 800d184:	2b00      	cmp	r3, #0
 800d186:	d10f      	bne.n	800d1a8 <osMessageQueueGetSpace+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d188:	f3ef 8310 	mrs	r3, PRIMASK
 800d18c:	61fb      	str	r3, [r7, #28]
  return(result);
 800d18e:	69fb      	ldr	r3, [r7, #28]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d105      	bne.n	800d1a0 <osMessageQueueGetSpace+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d194:	f3ef 8311 	mrs	r3, BASEPRI
 800d198:	61bb      	str	r3, [r7, #24]
  return(result);
 800d19a:	69bb      	ldr	r3, [r7, #24]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d01d      	beq.n	800d1dc <osMessageQueueGetSpace+0x78>
 800d1a0:	4b13      	ldr	r3, [pc, #76]	; (800d1f0 <osMessageQueueGetSpace+0x8c>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	2b02      	cmp	r3, #2
 800d1a6:	d119      	bne.n	800d1dc <osMessageQueueGetSpace+0x78>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d1a8:	f3ef 8211 	mrs	r2, BASEPRI
 800d1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1b0:	f383 8811 	msr	BASEPRI, r3
 800d1b4:	f3bf 8f6f 	isb	sy
 800d1b8:	f3bf 8f4f 	dsb	sy
 800d1bc:	613a      	str	r2, [r7, #16]
 800d1be:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d1c0:	693b      	ldr	r3, [r7, #16]
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800d1c2:	627b      	str	r3, [r7, #36]	; 0x24

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800d1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1cc:	1ad3      	subs	r3, r2, r3
 800d1ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	f383 8811 	msr	BASEPRI, r3

    taskEXIT_CRITICAL_FROM_ISR(isrm);
 800d1da:	e003      	b.n	800d1e4 <osMessageQueueGetSpace+0x80>
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800d1dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1de:	f000 fd16 	bl	800dc0e <uxQueueSpacesAvailable>
 800d1e2:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return (space);
 800d1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3730      	adds	r7, #48	; 0x30
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}
 800d1ee:	bf00      	nop
 800d1f0:	2000063c 	.word	0x2000063c

0800d1f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d1f4:	b480      	push	{r7}
 800d1f6:	b085      	sub	sp, #20
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	60b9      	str	r1, [r7, #8]
 800d1fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	4a07      	ldr	r2, [pc, #28]	; (800d220 <vApplicationGetIdleTaskMemory+0x2c>)
 800d204:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	4a06      	ldr	r2, [pc, #24]	; (800d224 <vApplicationGetIdleTaskMemory+0x30>)
 800d20a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2280      	movs	r2, #128	; 0x80
 800d210:	601a      	str	r2, [r3, #0]
}
 800d212:	bf00      	nop
 800d214:	3714      	adds	r7, #20
 800d216:	46bd      	mov	sp, r7
 800d218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21c:	4770      	bx	lr
 800d21e:	bf00      	nop
 800d220:	20000640 	.word	0x20000640
 800d224:	200006a4 	.word	0x200006a4

0800d228 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d228:	b480      	push	{r7}
 800d22a:	b085      	sub	sp, #20
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	60f8      	str	r0, [r7, #12]
 800d230:	60b9      	str	r1, [r7, #8]
 800d232:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	4a07      	ldr	r2, [pc, #28]	; (800d254 <vApplicationGetTimerTaskMemory+0x2c>)
 800d238:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	4a06      	ldr	r2, [pc, #24]	; (800d258 <vApplicationGetTimerTaskMemory+0x30>)
 800d23e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d246:	601a      	str	r2, [r3, #0]
}
 800d248:	bf00      	nop
 800d24a:	3714      	adds	r7, #20
 800d24c:	46bd      	mov	sp, r7
 800d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d252:	4770      	bx	lr
 800d254:	200008a4 	.word	0x200008a4
 800d258:	20000908 	.word	0x20000908

0800d25c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d25c:	b480      	push	{r7}
 800d25e:	b083      	sub	sp, #12
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f103 0208 	add.w	r2, r3, #8
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d274:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f103 0208 	add.w	r2, r3, #8
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f103 0208 	add.w	r2, r3, #8
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2200      	movs	r2, #0
 800d28e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d290:	bf00      	nop
 800d292:	370c      	adds	r7, #12
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr

0800d29c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d29c:	b480      	push	{r7}
 800d29e:	b083      	sub	sp, #12
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d2aa:	bf00      	nop
 800d2ac:	370c      	adds	r7, #12
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b4:	4770      	bx	lr

0800d2b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d2b6:	b480      	push	{r7}
 800d2b8:	b085      	sub	sp, #20
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	6078      	str	r0, [r7, #4]
 800d2be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	685b      	ldr	r3, [r3, #4]
 800d2c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	68fa      	ldr	r2, [r7, #12]
 800d2ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	689a      	ldr	r2, [r3, #8]
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	689b      	ldr	r3, [r3, #8]
 800d2d8:	683a      	ldr	r2, [r7, #0]
 800d2da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	683a      	ldr	r2, [r7, #0]
 800d2e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	687a      	ldr	r2, [r7, #4]
 800d2e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	1c5a      	adds	r2, r3, #1
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	601a      	str	r2, [r3, #0]
}
 800d2f2:	bf00      	nop
 800d2f4:	3714      	adds	r7, #20
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fc:	4770      	bx	lr

0800d2fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d2fe:	b480      	push	{r7}
 800d300:	b085      	sub	sp, #20
 800d302:	af00      	add	r7, sp, #0
 800d304:	6078      	str	r0, [r7, #4]
 800d306:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d314:	d103      	bne.n	800d31e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	691b      	ldr	r3, [r3, #16]
 800d31a:	60fb      	str	r3, [r7, #12]
 800d31c:	e00c      	b.n	800d338 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	3308      	adds	r3, #8
 800d322:	60fb      	str	r3, [r7, #12]
 800d324:	e002      	b.n	800d32c <vListInsert+0x2e>
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	685b      	ldr	r3, [r3, #4]
 800d32a:	60fb      	str	r3, [r7, #12]
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	685b      	ldr	r3, [r3, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	68ba      	ldr	r2, [r7, #8]
 800d334:	429a      	cmp	r2, r3
 800d336:	d2f6      	bcs.n	800d326 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	685a      	ldr	r2, [r3, #4]
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	683a      	ldr	r2, [r7, #0]
 800d346:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	68fa      	ldr	r2, [r7, #12]
 800d34c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	683a      	ldr	r2, [r7, #0]
 800d352:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	687a      	ldr	r2, [r7, #4]
 800d358:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	1c5a      	adds	r2, r3, #1
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	601a      	str	r2, [r3, #0]
}
 800d364:	bf00      	nop
 800d366:	3714      	adds	r7, #20
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr

0800d370 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d370:	b480      	push	{r7}
 800d372:	b085      	sub	sp, #20
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	691b      	ldr	r3, [r3, #16]
 800d37c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	685b      	ldr	r3, [r3, #4]
 800d382:	687a      	ldr	r2, [r7, #4]
 800d384:	6892      	ldr	r2, [r2, #8]
 800d386:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	689b      	ldr	r3, [r3, #8]
 800d38c:	687a      	ldr	r2, [r7, #4]
 800d38e:	6852      	ldr	r2, [r2, #4]
 800d390:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	687a      	ldr	r2, [r7, #4]
 800d398:	429a      	cmp	r2, r3
 800d39a:	d103      	bne.n	800d3a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	689a      	ldr	r2, [r3, #8]
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	1e5a      	subs	r2, r3, #1
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	681b      	ldr	r3, [r3, #0]
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3714      	adds	r7, #20
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr

0800d3c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b084      	sub	sp, #16
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
 800d3cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d109      	bne.n	800d3ec <xQueueGenericReset+0x28>
	__asm volatile
 800d3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3dc:	f383 8811 	msr	BASEPRI, r3
 800d3e0:	f3bf 8f6f 	isb	sy
 800d3e4:	f3bf 8f4f 	dsb	sy
 800d3e8:	60bb      	str	r3, [r7, #8]
 800d3ea:	e7fe      	b.n	800d3ea <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800d3ec:	f002 fabe 	bl	800f96c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681a      	ldr	r2, [r3, #0]
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3f8:	68f9      	ldr	r1, [r7, #12]
 800d3fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d3fc:	fb01 f303 	mul.w	r3, r1, r3
 800d400:	441a      	add	r2, r3
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2200      	movs	r2, #0
 800d40a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681a      	ldr	r2, [r3, #0]
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d41c:	3b01      	subs	r3, #1
 800d41e:	68f9      	ldr	r1, [r7, #12]
 800d420:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d422:	fb01 f303 	mul.w	r3, r1, r3
 800d426:	441a      	add	r2, r3
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	22ff      	movs	r2, #255	; 0xff
 800d430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	22ff      	movs	r2, #255	; 0xff
 800d438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d114      	bne.n	800d46c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	691b      	ldr	r3, [r3, #16]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d01a      	beq.n	800d480 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	3310      	adds	r3, #16
 800d44e:	4618      	mov	r0, r3
 800d450:	f001 fa5c 	bl	800e90c <xTaskRemoveFromEventList>
 800d454:	4603      	mov	r3, r0
 800d456:	2b00      	cmp	r3, #0
 800d458:	d012      	beq.n	800d480 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d45a:	4b0d      	ldr	r3, [pc, #52]	; (800d490 <xQueueGenericReset+0xcc>)
 800d45c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d460:	601a      	str	r2, [r3, #0]
 800d462:	f3bf 8f4f 	dsb	sy
 800d466:	f3bf 8f6f 	isb	sy
 800d46a:	e009      	b.n	800d480 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	3310      	adds	r3, #16
 800d470:	4618      	mov	r0, r3
 800d472:	f7ff fef3 	bl	800d25c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	3324      	adds	r3, #36	; 0x24
 800d47a:	4618      	mov	r0, r3
 800d47c:	f7ff feee 	bl	800d25c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d480:	f002 faa2 	bl	800f9c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d484:	2301      	movs	r3, #1
}
 800d486:	4618      	mov	r0, r3
 800d488:	3710      	adds	r7, #16
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}
 800d48e:	bf00      	nop
 800d490:	e000ed04 	.word	0xe000ed04

0800d494 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d494:	b580      	push	{r7, lr}
 800d496:	b08e      	sub	sp, #56	; 0x38
 800d498:	af02      	add	r7, sp, #8
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	607a      	str	r2, [r7, #4]
 800d4a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d109      	bne.n	800d4bc <xQueueGenericCreateStatic+0x28>
 800d4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ac:	f383 8811 	msr	BASEPRI, r3
 800d4b0:	f3bf 8f6f 	isb	sy
 800d4b4:	f3bf 8f4f 	dsb	sy
 800d4b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800d4ba:	e7fe      	b.n	800d4ba <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d109      	bne.n	800d4d6 <xQueueGenericCreateStatic+0x42>
 800d4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c6:	f383 8811 	msr	BASEPRI, r3
 800d4ca:	f3bf 8f6f 	isb	sy
 800d4ce:	f3bf 8f4f 	dsb	sy
 800d4d2:	627b      	str	r3, [r7, #36]	; 0x24
 800d4d4:	e7fe      	b.n	800d4d4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d002      	beq.n	800d4e2 <xQueueGenericCreateStatic+0x4e>
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d001      	beq.n	800d4e6 <xQueueGenericCreateStatic+0x52>
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	e000      	b.n	800d4e8 <xQueueGenericCreateStatic+0x54>
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d109      	bne.n	800d500 <xQueueGenericCreateStatic+0x6c>
 800d4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f0:	f383 8811 	msr	BASEPRI, r3
 800d4f4:	f3bf 8f6f 	isb	sy
 800d4f8:	f3bf 8f4f 	dsb	sy
 800d4fc:	623b      	str	r3, [r7, #32]
 800d4fe:	e7fe      	b.n	800d4fe <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d102      	bne.n	800d50c <xQueueGenericCreateStatic+0x78>
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d101      	bne.n	800d510 <xQueueGenericCreateStatic+0x7c>
 800d50c:	2301      	movs	r3, #1
 800d50e:	e000      	b.n	800d512 <xQueueGenericCreateStatic+0x7e>
 800d510:	2300      	movs	r3, #0
 800d512:	2b00      	cmp	r3, #0
 800d514:	d109      	bne.n	800d52a <xQueueGenericCreateStatic+0x96>
 800d516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d51a:	f383 8811 	msr	BASEPRI, r3
 800d51e:	f3bf 8f6f 	isb	sy
 800d522:	f3bf 8f4f 	dsb	sy
 800d526:	61fb      	str	r3, [r7, #28]
 800d528:	e7fe      	b.n	800d528 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d52a:	2350      	movs	r3, #80	; 0x50
 800d52c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	2b50      	cmp	r3, #80	; 0x50
 800d532:	d009      	beq.n	800d548 <xQueueGenericCreateStatic+0xb4>
 800d534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d538:	f383 8811 	msr	BASEPRI, r3
 800d53c:	f3bf 8f6f 	isb	sy
 800d540:	f3bf 8f4f 	dsb	sy
 800d544:	61bb      	str	r3, [r7, #24]
 800d546:	e7fe      	b.n	800d546 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d548:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d550:	2b00      	cmp	r3, #0
 800d552:	d00d      	beq.n	800d570 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d556:	2201      	movs	r2, #1
 800d558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d55c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d562:	9300      	str	r3, [sp, #0]
 800d564:	4613      	mov	r3, r2
 800d566:	687a      	ldr	r2, [r7, #4]
 800d568:	68b9      	ldr	r1, [r7, #8]
 800d56a:	68f8      	ldr	r0, [r7, #12]
 800d56c:	f000 f844 	bl	800d5f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d572:	4618      	mov	r0, r3
 800d574:	3730      	adds	r7, #48	; 0x30
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}

0800d57a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d57a:	b580      	push	{r7, lr}
 800d57c:	b08a      	sub	sp, #40	; 0x28
 800d57e:	af02      	add	r7, sp, #8
 800d580:	60f8      	str	r0, [r7, #12]
 800d582:	60b9      	str	r1, [r7, #8]
 800d584:	4613      	mov	r3, r2
 800d586:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d109      	bne.n	800d5a2 <xQueueGenericCreate+0x28>
 800d58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d592:	f383 8811 	msr	BASEPRI, r3
 800d596:	f3bf 8f6f 	isb	sy
 800d59a:	f3bf 8f4f 	dsb	sy
 800d59e:	613b      	str	r3, [r7, #16]
 800d5a0:	e7fe      	b.n	800d5a0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d102      	bne.n	800d5ae <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	61fb      	str	r3, [r7, #28]
 800d5ac:	e004      	b.n	800d5b8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	68ba      	ldr	r2, [r7, #8]
 800d5b2:	fb02 f303 	mul.w	r3, r2, r3
 800d5b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d5b8:	69fb      	ldr	r3, [r7, #28]
 800d5ba:	3350      	adds	r3, #80	; 0x50
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f002 faef 	bl	800fba0 <pvPortMalloc>
 800d5c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d5c4:	69bb      	ldr	r3, [r7, #24]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d011      	beq.n	800d5ee <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d5ca:	69bb      	ldr	r3, [r7, #24]
 800d5cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	3350      	adds	r3, #80	; 0x50
 800d5d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d5d4:	69bb      	ldr	r3, [r7, #24]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d5dc:	79fa      	ldrb	r2, [r7, #7]
 800d5de:	69bb      	ldr	r3, [r7, #24]
 800d5e0:	9300      	str	r3, [sp, #0]
 800d5e2:	4613      	mov	r3, r2
 800d5e4:	697a      	ldr	r2, [r7, #20]
 800d5e6:	68b9      	ldr	r1, [r7, #8]
 800d5e8:	68f8      	ldr	r0, [r7, #12]
 800d5ea:	f000 f805 	bl	800d5f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d5ee:	69bb      	ldr	r3, [r7, #24]
	}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3720      	adds	r7, #32
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	60f8      	str	r0, [r7, #12]
 800d600:	60b9      	str	r1, [r7, #8]
 800d602:	607a      	str	r2, [r7, #4]
 800d604:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d103      	bne.n	800d614 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d60c:	69bb      	ldr	r3, [r7, #24]
 800d60e:	69ba      	ldr	r2, [r7, #24]
 800d610:	601a      	str	r2, [r3, #0]
 800d612:	e002      	b.n	800d61a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d614:	69bb      	ldr	r3, [r7, #24]
 800d616:	687a      	ldr	r2, [r7, #4]
 800d618:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d61a:	69bb      	ldr	r3, [r7, #24]
 800d61c:	68fa      	ldr	r2, [r7, #12]
 800d61e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d620:	69bb      	ldr	r3, [r7, #24]
 800d622:	68ba      	ldr	r2, [r7, #8]
 800d624:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d626:	2101      	movs	r1, #1
 800d628:	69b8      	ldr	r0, [r7, #24]
 800d62a:	f7ff fecb 	bl	800d3c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d62e:	69bb      	ldr	r3, [r7, #24]
 800d630:	78fa      	ldrb	r2, [r7, #3]
 800d632:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d636:	bf00      	nop
 800d638:	3710      	adds	r7, #16
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
	...

0800d640 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b08e      	sub	sp, #56	; 0x38
 800d644:	af00      	add	r7, sp, #0
 800d646:	60f8      	str	r0, [r7, #12]
 800d648:	60b9      	str	r1, [r7, #8]
 800d64a:	607a      	str	r2, [r7, #4]
 800d64c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d64e:	2300      	movs	r3, #0
 800d650:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d109      	bne.n	800d670 <xQueueGenericSend+0x30>
 800d65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d660:	f383 8811 	msr	BASEPRI, r3
 800d664:	f3bf 8f6f 	isb	sy
 800d668:	f3bf 8f4f 	dsb	sy
 800d66c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d66e:	e7fe      	b.n	800d66e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d103      	bne.n	800d67e <xQueueGenericSend+0x3e>
 800d676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d101      	bne.n	800d682 <xQueueGenericSend+0x42>
 800d67e:	2301      	movs	r3, #1
 800d680:	e000      	b.n	800d684 <xQueueGenericSend+0x44>
 800d682:	2300      	movs	r3, #0
 800d684:	2b00      	cmp	r3, #0
 800d686:	d109      	bne.n	800d69c <xQueueGenericSend+0x5c>
 800d688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d68c:	f383 8811 	msr	BASEPRI, r3
 800d690:	f3bf 8f6f 	isb	sy
 800d694:	f3bf 8f4f 	dsb	sy
 800d698:	627b      	str	r3, [r7, #36]	; 0x24
 800d69a:	e7fe      	b.n	800d69a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	2b02      	cmp	r3, #2
 800d6a0:	d103      	bne.n	800d6aa <xQueueGenericSend+0x6a>
 800d6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6a6:	2b01      	cmp	r3, #1
 800d6a8:	d101      	bne.n	800d6ae <xQueueGenericSend+0x6e>
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	e000      	b.n	800d6b0 <xQueueGenericSend+0x70>
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d109      	bne.n	800d6c8 <xQueueGenericSend+0x88>
 800d6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b8:	f383 8811 	msr	BASEPRI, r3
 800d6bc:	f3bf 8f6f 	isb	sy
 800d6c0:	f3bf 8f4f 	dsb	sy
 800d6c4:	623b      	str	r3, [r7, #32]
 800d6c6:	e7fe      	b.n	800d6c6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d6c8:	f001 fad6 	bl	800ec78 <xTaskGetSchedulerState>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d102      	bne.n	800d6d8 <xQueueGenericSend+0x98>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d101      	bne.n	800d6dc <xQueueGenericSend+0x9c>
 800d6d8:	2301      	movs	r3, #1
 800d6da:	e000      	b.n	800d6de <xQueueGenericSend+0x9e>
 800d6dc:	2300      	movs	r3, #0
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d109      	bne.n	800d6f6 <xQueueGenericSend+0xb6>
 800d6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e6:	f383 8811 	msr	BASEPRI, r3
 800d6ea:	f3bf 8f6f 	isb	sy
 800d6ee:	f3bf 8f4f 	dsb	sy
 800d6f2:	61fb      	str	r3, [r7, #28]
 800d6f4:	e7fe      	b.n	800d6f4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d6f6:	f002 f939 	bl	800f96c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d702:	429a      	cmp	r2, r3
 800d704:	d302      	bcc.n	800d70c <xQueueGenericSend+0xcc>
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	2b02      	cmp	r3, #2
 800d70a:	d129      	bne.n	800d760 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d70c:	683a      	ldr	r2, [r7, #0]
 800d70e:	68b9      	ldr	r1, [r7, #8]
 800d710:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d712:	f000 fa9e 	bl	800dc52 <prvCopyDataToQueue>
 800d716:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d010      	beq.n	800d742 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d722:	3324      	adds	r3, #36	; 0x24
 800d724:	4618      	mov	r0, r3
 800d726:	f001 f8f1 	bl	800e90c <xTaskRemoveFromEventList>
 800d72a:	4603      	mov	r3, r0
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d013      	beq.n	800d758 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d730:	4b3f      	ldr	r3, [pc, #252]	; (800d830 <xQueueGenericSend+0x1f0>)
 800d732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d736:	601a      	str	r2, [r3, #0]
 800d738:	f3bf 8f4f 	dsb	sy
 800d73c:	f3bf 8f6f 	isb	sy
 800d740:	e00a      	b.n	800d758 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d744:	2b00      	cmp	r3, #0
 800d746:	d007      	beq.n	800d758 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d748:	4b39      	ldr	r3, [pc, #228]	; (800d830 <xQueueGenericSend+0x1f0>)
 800d74a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d74e:	601a      	str	r2, [r3, #0]
 800d750:	f3bf 8f4f 	dsb	sy
 800d754:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d758:	f002 f936 	bl	800f9c8 <vPortExitCritical>
				return pdPASS;
 800d75c:	2301      	movs	r3, #1
 800d75e:	e063      	b.n	800d828 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d103      	bne.n	800d76e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d766:	f002 f92f 	bl	800f9c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d76a:	2300      	movs	r3, #0
 800d76c:	e05c      	b.n	800d828 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d76e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d770:	2b00      	cmp	r3, #0
 800d772:	d106      	bne.n	800d782 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d774:	f107 0314 	add.w	r3, r7, #20
 800d778:	4618      	mov	r0, r3
 800d77a:	f001 f929 	bl	800e9d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d77e:	2301      	movs	r3, #1
 800d780:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d782:	f002 f921 	bl	800f9c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d786:	f000 fe89 	bl	800e49c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d78a:	f002 f8ef 	bl	800f96c <vPortEnterCritical>
 800d78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d790:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d794:	b25b      	sxtb	r3, r3
 800d796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d79a:	d103      	bne.n	800d7a4 <xQueueGenericSend+0x164>
 800d79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d79e:	2200      	movs	r2, #0
 800d7a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d7aa:	b25b      	sxtb	r3, r3
 800d7ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d7b0:	d103      	bne.n	800d7ba <xQueueGenericSend+0x17a>
 800d7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d7ba:	f002 f905 	bl	800f9c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d7be:	1d3a      	adds	r2, r7, #4
 800d7c0:	f107 0314 	add.w	r3, r7, #20
 800d7c4:	4611      	mov	r1, r2
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f001 f918 	bl	800e9fc <xTaskCheckForTimeOut>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d124      	bne.n	800d81c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d7d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7d4:	f000 fb35 	bl	800de42 <prvIsQueueFull>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d018      	beq.n	800d810 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e0:	3310      	adds	r3, #16
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	4611      	mov	r1, r2
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f001 f842 	bl	800e870 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d7ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7ee:	f000 fac0 	bl	800dd72 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d7f2:	f000 fe61 	bl	800e4b8 <xTaskResumeAll>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	f47f af7c 	bne.w	800d6f6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800d7fe:	4b0c      	ldr	r3, [pc, #48]	; (800d830 <xQueueGenericSend+0x1f0>)
 800d800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d804:	601a      	str	r2, [r3, #0]
 800d806:	f3bf 8f4f 	dsb	sy
 800d80a:	f3bf 8f6f 	isb	sy
 800d80e:	e772      	b.n	800d6f6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d810:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d812:	f000 faae 	bl	800dd72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d816:	f000 fe4f 	bl	800e4b8 <xTaskResumeAll>
 800d81a:	e76c      	b.n	800d6f6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d81c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d81e:	f000 faa8 	bl	800dd72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d822:	f000 fe49 	bl	800e4b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d826:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3738      	adds	r7, #56	; 0x38
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	e000ed04 	.word	0xe000ed04

0800d834 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b08e      	sub	sp, #56	; 0x38
 800d838:	af00      	add	r7, sp, #0
 800d83a:	60f8      	str	r0, [r7, #12]
 800d83c:	60b9      	str	r1, [r7, #8]
 800d83e:	607a      	str	r2, [r7, #4]
 800d840:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d109      	bne.n	800d860 <xQueueGenericSendFromISR+0x2c>
 800d84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d850:	f383 8811 	msr	BASEPRI, r3
 800d854:	f3bf 8f6f 	isb	sy
 800d858:	f3bf 8f4f 	dsb	sy
 800d85c:	627b      	str	r3, [r7, #36]	; 0x24
 800d85e:	e7fe      	b.n	800d85e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d860:	68bb      	ldr	r3, [r7, #8]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d103      	bne.n	800d86e <xQueueGenericSendFromISR+0x3a>
 800d866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d101      	bne.n	800d872 <xQueueGenericSendFromISR+0x3e>
 800d86e:	2301      	movs	r3, #1
 800d870:	e000      	b.n	800d874 <xQueueGenericSendFromISR+0x40>
 800d872:	2300      	movs	r3, #0
 800d874:	2b00      	cmp	r3, #0
 800d876:	d109      	bne.n	800d88c <xQueueGenericSendFromISR+0x58>
 800d878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d87c:	f383 8811 	msr	BASEPRI, r3
 800d880:	f3bf 8f6f 	isb	sy
 800d884:	f3bf 8f4f 	dsb	sy
 800d888:	623b      	str	r3, [r7, #32]
 800d88a:	e7fe      	b.n	800d88a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	2b02      	cmp	r3, #2
 800d890:	d103      	bne.n	800d89a <xQueueGenericSendFromISR+0x66>
 800d892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d896:	2b01      	cmp	r3, #1
 800d898:	d101      	bne.n	800d89e <xQueueGenericSendFromISR+0x6a>
 800d89a:	2301      	movs	r3, #1
 800d89c:	e000      	b.n	800d8a0 <xQueueGenericSendFromISR+0x6c>
 800d89e:	2300      	movs	r3, #0
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d109      	bne.n	800d8b8 <xQueueGenericSendFromISR+0x84>
 800d8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a8:	f383 8811 	msr	BASEPRI, r3
 800d8ac:	f3bf 8f6f 	isb	sy
 800d8b0:	f3bf 8f4f 	dsb	sy
 800d8b4:	61fb      	str	r3, [r7, #28]
 800d8b6:	e7fe      	b.n	800d8b6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d8b8:	f002 f934 	bl	800fb24 <vPortValidateInterruptPriority>
	__asm volatile
 800d8bc:	f3ef 8211 	mrs	r2, BASEPRI
 800d8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c4:	f383 8811 	msr	BASEPRI, r3
 800d8c8:	f3bf 8f6f 	isb	sy
 800d8cc:	f3bf 8f4f 	dsb	sy
 800d8d0:	61ba      	str	r2, [r7, #24]
 800d8d2:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d8d4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d8d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d302      	bcc.n	800d8ea <xQueueGenericSendFromISR+0xb6>
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	2b02      	cmp	r3, #2
 800d8e8:	d12c      	bne.n	800d944 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d8f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d8f4:	683a      	ldr	r2, [r7, #0]
 800d8f6:	68b9      	ldr	r1, [r7, #8]
 800d8f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8fa:	f000 f9aa 	bl	800dc52 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d8fe:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d902:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d906:	d112      	bne.n	800d92e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d016      	beq.n	800d93e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d912:	3324      	adds	r3, #36	; 0x24
 800d914:	4618      	mov	r0, r3
 800d916:	f000 fff9 	bl	800e90c <xTaskRemoveFromEventList>
 800d91a:	4603      	mov	r3, r0
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d00e      	beq.n	800d93e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d00b      	beq.n	800d93e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2201      	movs	r2, #1
 800d92a:	601a      	str	r2, [r3, #0]
 800d92c:	e007      	b.n	800d93e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d92e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d932:	3301      	adds	r3, #1
 800d934:	b2db      	uxtb	r3, r3
 800d936:	b25a      	sxtb	r2, r3
 800d938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d93a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d93e:	2301      	movs	r3, #1
 800d940:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d942:	e001      	b.n	800d948 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d944:	2300      	movs	r3, #0
 800d946:	637b      	str	r3, [r7, #52]	; 0x34
 800d948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d94a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d94c:	693b      	ldr	r3, [r7, #16]
 800d94e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d954:	4618      	mov	r0, r3
 800d956:	3738      	adds	r7, #56	; 0x38
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}

0800d95c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b08c      	sub	sp, #48	; 0x30
 800d960:	af00      	add	r7, sp, #0
 800d962:	60f8      	str	r0, [r7, #12]
 800d964:	60b9      	str	r1, [r7, #8]
 800d966:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d968:	2300      	movs	r3, #0
 800d96a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d972:	2b00      	cmp	r3, #0
 800d974:	d109      	bne.n	800d98a <xQueueReceive+0x2e>
	__asm volatile
 800d976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d97a:	f383 8811 	msr	BASEPRI, r3
 800d97e:	f3bf 8f6f 	isb	sy
 800d982:	f3bf 8f4f 	dsb	sy
 800d986:	623b      	str	r3, [r7, #32]
 800d988:	e7fe      	b.n	800d988 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d103      	bne.n	800d998 <xQueueReceive+0x3c>
 800d990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d994:	2b00      	cmp	r3, #0
 800d996:	d101      	bne.n	800d99c <xQueueReceive+0x40>
 800d998:	2301      	movs	r3, #1
 800d99a:	e000      	b.n	800d99e <xQueueReceive+0x42>
 800d99c:	2300      	movs	r3, #0
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d109      	bne.n	800d9b6 <xQueueReceive+0x5a>
 800d9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9a6:	f383 8811 	msr	BASEPRI, r3
 800d9aa:	f3bf 8f6f 	isb	sy
 800d9ae:	f3bf 8f4f 	dsb	sy
 800d9b2:	61fb      	str	r3, [r7, #28]
 800d9b4:	e7fe      	b.n	800d9b4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d9b6:	f001 f95f 	bl	800ec78 <xTaskGetSchedulerState>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d102      	bne.n	800d9c6 <xQueueReceive+0x6a>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d101      	bne.n	800d9ca <xQueueReceive+0x6e>
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	e000      	b.n	800d9cc <xQueueReceive+0x70>
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d109      	bne.n	800d9e4 <xQueueReceive+0x88>
 800d9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d4:	f383 8811 	msr	BASEPRI, r3
 800d9d8:	f3bf 8f6f 	isb	sy
 800d9dc:	f3bf 8f4f 	dsb	sy
 800d9e0:	61bb      	str	r3, [r7, #24]
 800d9e2:	e7fe      	b.n	800d9e2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d9e4:	f001 ffc2 	bl	800f96c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ec:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d01f      	beq.n	800da34 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d9f4:	68b9      	ldr	r1, [r7, #8]
 800d9f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d9f8:	f000 f995 	bl	800dd26 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9fe:	1e5a      	subs	r2, r3, #1
 800da00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da02:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da06:	691b      	ldr	r3, [r3, #16]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d00f      	beq.n	800da2c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800da0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da0e:	3310      	adds	r3, #16
 800da10:	4618      	mov	r0, r3
 800da12:	f000 ff7b 	bl	800e90c <xTaskRemoveFromEventList>
 800da16:	4603      	mov	r3, r0
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d007      	beq.n	800da2c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800da1c:	4b3c      	ldr	r3, [pc, #240]	; (800db10 <xQueueReceive+0x1b4>)
 800da1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da22:	601a      	str	r2, [r3, #0]
 800da24:	f3bf 8f4f 	dsb	sy
 800da28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800da2c:	f001 ffcc 	bl	800f9c8 <vPortExitCritical>
				return pdPASS;
 800da30:	2301      	movs	r3, #1
 800da32:	e069      	b.n	800db08 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d103      	bne.n	800da42 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800da3a:	f001 ffc5 	bl	800f9c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800da3e:	2300      	movs	r3, #0
 800da40:	e062      	b.n	800db08 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800da42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da44:	2b00      	cmp	r3, #0
 800da46:	d106      	bne.n	800da56 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da48:	f107 0310 	add.w	r3, r7, #16
 800da4c:	4618      	mov	r0, r3
 800da4e:	f000 ffbf 	bl	800e9d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800da52:	2301      	movs	r3, #1
 800da54:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800da56:	f001 ffb7 	bl	800f9c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800da5a:	f000 fd1f 	bl	800e49c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da5e:	f001 ff85 	bl	800f96c <vPortEnterCritical>
 800da62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da68:	b25b      	sxtb	r3, r3
 800da6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da6e:	d103      	bne.n	800da78 <xQueueReceive+0x11c>
 800da70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da72:	2200      	movs	r2, #0
 800da74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da7e:	b25b      	sxtb	r3, r3
 800da80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da84:	d103      	bne.n	800da8e <xQueueReceive+0x132>
 800da86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da88:	2200      	movs	r2, #0
 800da8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da8e:	f001 ff9b 	bl	800f9c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da92:	1d3a      	adds	r2, r7, #4
 800da94:	f107 0310 	add.w	r3, r7, #16
 800da98:	4611      	mov	r1, r2
 800da9a:	4618      	mov	r0, r3
 800da9c:	f000 ffae 	bl	800e9fc <xTaskCheckForTimeOut>
 800daa0:	4603      	mov	r3, r0
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d123      	bne.n	800daee <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800daa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800daa8:	f000 f9b5 	bl	800de16 <prvIsQueueEmpty>
 800daac:	4603      	mov	r3, r0
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d017      	beq.n	800dae2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab4:	3324      	adds	r3, #36	; 0x24
 800dab6:	687a      	ldr	r2, [r7, #4]
 800dab8:	4611      	mov	r1, r2
 800daba:	4618      	mov	r0, r3
 800dabc:	f000 fed8 	bl	800e870 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dac0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dac2:	f000 f956 	bl	800dd72 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dac6:	f000 fcf7 	bl	800e4b8 <xTaskResumeAll>
 800daca:	4603      	mov	r3, r0
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d189      	bne.n	800d9e4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800dad0:	4b0f      	ldr	r3, [pc, #60]	; (800db10 <xQueueReceive+0x1b4>)
 800dad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dad6:	601a      	str	r2, [r3, #0]
 800dad8:	f3bf 8f4f 	dsb	sy
 800dadc:	f3bf 8f6f 	isb	sy
 800dae0:	e780      	b.n	800d9e4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dae2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dae4:	f000 f945 	bl	800dd72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dae8:	f000 fce6 	bl	800e4b8 <xTaskResumeAll>
 800daec:	e77a      	b.n	800d9e4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800daee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800daf0:	f000 f93f 	bl	800dd72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800daf4:	f000 fce0 	bl	800e4b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800daf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dafa:	f000 f98c 	bl	800de16 <prvIsQueueEmpty>
 800dafe:	4603      	mov	r3, r0
 800db00:	2b00      	cmp	r3, #0
 800db02:	f43f af6f 	beq.w	800d9e4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800db06:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800db08:	4618      	mov	r0, r3
 800db0a:	3730      	adds	r7, #48	; 0x30
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}
 800db10:	e000ed04 	.word	0xe000ed04

0800db14 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b08e      	sub	sp, #56	; 0x38
 800db18:	af00      	add	r7, sp, #0
 800db1a:	60f8      	str	r0, [r7, #12]
 800db1c:	60b9      	str	r1, [r7, #8]
 800db1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800db24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db26:	2b00      	cmp	r3, #0
 800db28:	d109      	bne.n	800db3e <xQueueReceiveFromISR+0x2a>
 800db2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db2e:	f383 8811 	msr	BASEPRI, r3
 800db32:	f3bf 8f6f 	isb	sy
 800db36:	f3bf 8f4f 	dsb	sy
 800db3a:	623b      	str	r3, [r7, #32]
 800db3c:	e7fe      	b.n	800db3c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d103      	bne.n	800db4c <xQueueReceiveFromISR+0x38>
 800db44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d101      	bne.n	800db50 <xQueueReceiveFromISR+0x3c>
 800db4c:	2301      	movs	r3, #1
 800db4e:	e000      	b.n	800db52 <xQueueReceiveFromISR+0x3e>
 800db50:	2300      	movs	r3, #0
 800db52:	2b00      	cmp	r3, #0
 800db54:	d109      	bne.n	800db6a <xQueueReceiveFromISR+0x56>
 800db56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db5a:	f383 8811 	msr	BASEPRI, r3
 800db5e:	f3bf 8f6f 	isb	sy
 800db62:	f3bf 8f4f 	dsb	sy
 800db66:	61fb      	str	r3, [r7, #28]
 800db68:	e7fe      	b.n	800db68 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db6a:	f001 ffdb 	bl	800fb24 <vPortValidateInterruptPriority>
	__asm volatile
 800db6e:	f3ef 8211 	mrs	r2, BASEPRI
 800db72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db76:	f383 8811 	msr	BASEPRI, r3
 800db7a:	f3bf 8f6f 	isb	sy
 800db7e:	f3bf 8f4f 	dsb	sy
 800db82:	61ba      	str	r2, [r7, #24]
 800db84:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800db86:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db8e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db92:	2b00      	cmp	r3, #0
 800db94:	d02f      	beq.n	800dbf6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800db96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dba0:	68b9      	ldr	r1, [r7, #8]
 800dba2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dba4:	f000 f8bf 	bl	800dd26 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbaa:	1e5a      	subs	r2, r3, #1
 800dbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800dbb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dbb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dbb8:	d112      	bne.n	800dbe0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbbc:	691b      	ldr	r3, [r3, #16]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d016      	beq.n	800dbf0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc4:	3310      	adds	r3, #16
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f000 fea0 	bl	800e90c <xTaskRemoveFromEventList>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d00e      	beq.n	800dbf0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d00b      	beq.n	800dbf0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2201      	movs	r2, #1
 800dbdc:	601a      	str	r2, [r3, #0]
 800dbde:	e007      	b.n	800dbf0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dbe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	b2db      	uxtb	r3, r3
 800dbe8:	b25a      	sxtb	r2, r3
 800dbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	637b      	str	r3, [r7, #52]	; 0x34
 800dbf4:	e001      	b.n	800dbfa <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	637b      	str	r3, [r7, #52]	; 0x34
 800dbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbfc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dc04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3738      	adds	r7, #56	; 0x38
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}

0800dc0e <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800dc0e:	b580      	push	{r7, lr}
 800dc10:	b086      	sub	sp, #24
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d109      	bne.n	800dc34 <uxQueueSpacesAvailable+0x26>
	__asm volatile
 800dc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc24:	f383 8811 	msr	BASEPRI, r3
 800dc28:	f3bf 8f6f 	isb	sy
 800dc2c:	f3bf 8f4f 	dsb	sy
 800dc30:	60fb      	str	r3, [r7, #12]
 800dc32:	e7fe      	b.n	800dc32 <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 800dc34:	f001 fe9a 	bl	800f96c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc40:	1ad3      	subs	r3, r2, r3
 800dc42:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800dc44:	f001 fec0 	bl	800f9c8 <vPortExitCritical>

	return uxReturn;
 800dc48:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3718      	adds	r7, #24
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}

0800dc52 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dc52:	b580      	push	{r7, lr}
 800dc54:	b086      	sub	sp, #24
 800dc56:	af00      	add	r7, sp, #0
 800dc58:	60f8      	str	r0, [r7, #12]
 800dc5a:	60b9      	str	r1, [r7, #8]
 800dc5c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc66:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d10d      	bne.n	800dc8c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d14d      	bne.n	800dd14 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	689b      	ldr	r3, [r3, #8]
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f001 f819 	bl	800ecb4 <xTaskPriorityDisinherit>
 800dc82:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	2200      	movs	r2, #0
 800dc88:	609a      	str	r2, [r3, #8]
 800dc8a:	e043      	b.n	800dd14 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d119      	bne.n	800dcc6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	6858      	ldr	r0, [r3, #4]
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc9a:	461a      	mov	r2, r3
 800dc9c:	68b9      	ldr	r1, [r7, #8]
 800dc9e:	f00b faf9 	bl	8019294 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	685a      	ldr	r2, [r3, #4]
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcaa:	441a      	add	r2, r3
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	685a      	ldr	r2, [r3, #4]
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	689b      	ldr	r3, [r3, #8]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d32b      	bcc.n	800dd14 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	681a      	ldr	r2, [r3, #0]
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	605a      	str	r2, [r3, #4]
 800dcc4:	e026      	b.n	800dd14 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	68d8      	ldr	r0, [r3, #12]
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcce:	461a      	mov	r2, r3
 800dcd0:	68b9      	ldr	r1, [r7, #8]
 800dcd2:	f00b fadf 	bl	8019294 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	68da      	ldr	r2, [r3, #12]
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcde:	425b      	negs	r3, r3
 800dce0:	441a      	add	r2, r3
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	68da      	ldr	r2, [r3, #12]
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	429a      	cmp	r2, r3
 800dcf0:	d207      	bcs.n	800dd02 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	689a      	ldr	r2, [r3, #8]
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcfa:	425b      	negs	r3, r3
 800dcfc:	441a      	add	r2, r3
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2b02      	cmp	r3, #2
 800dd06:	d105      	bne.n	800dd14 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d002      	beq.n	800dd14 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	3b01      	subs	r3, #1
 800dd12:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	1c5a      	adds	r2, r3, #1
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800dd1c:	697b      	ldr	r3, [r7, #20]
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3718      	adds	r7, #24
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}

0800dd26 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dd26:	b580      	push	{r7, lr}
 800dd28:	b082      	sub	sp, #8
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	6078      	str	r0, [r7, #4]
 800dd2e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d018      	beq.n	800dd6a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	68da      	ldr	r2, [r3, #12]
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd40:	441a      	add	r2, r3
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	68da      	ldr	r2, [r3, #12]
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	689b      	ldr	r3, [r3, #8]
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	d303      	bcc.n	800dd5a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681a      	ldr	r2, [r3, #0]
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	68d9      	ldr	r1, [r3, #12]
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd62:	461a      	mov	r2, r3
 800dd64:	6838      	ldr	r0, [r7, #0]
 800dd66:	f00b fa95 	bl	8019294 <memcpy>
	}
}
 800dd6a:	bf00      	nop
 800dd6c:	3708      	adds	r7, #8
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}

0800dd72 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dd72:	b580      	push	{r7, lr}
 800dd74:	b084      	sub	sp, #16
 800dd76:	af00      	add	r7, sp, #0
 800dd78:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dd7a:	f001 fdf7 	bl	800f96c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd84:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd86:	e011      	b.n	800ddac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d012      	beq.n	800ddb6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	3324      	adds	r3, #36	; 0x24
 800dd94:	4618      	mov	r0, r3
 800dd96:	f000 fdb9 	bl	800e90c <xTaskRemoveFromEventList>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d001      	beq.n	800dda4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dda0:	f000 fe8c 	bl	800eabc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dda4:	7bfb      	ldrb	r3, [r7, #15]
 800dda6:	3b01      	subs	r3, #1
 800dda8:	b2db      	uxtb	r3, r3
 800ddaa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ddac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	dce9      	bgt.n	800dd88 <prvUnlockQueue+0x16>
 800ddb4:	e000      	b.n	800ddb8 <prvUnlockQueue+0x46>
					break;
 800ddb6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	22ff      	movs	r2, #255	; 0xff
 800ddbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ddc0:	f001 fe02 	bl	800f9c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ddc4:	f001 fdd2 	bl	800f96c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ddce:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ddd0:	e011      	b.n	800ddf6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	691b      	ldr	r3, [r3, #16]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d012      	beq.n	800de00 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	3310      	adds	r3, #16
 800ddde:	4618      	mov	r0, r3
 800dde0:	f000 fd94 	bl	800e90c <xTaskRemoveFromEventList>
 800dde4:	4603      	mov	r3, r0
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d001      	beq.n	800ddee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ddea:	f000 fe67 	bl	800eabc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ddee:	7bbb      	ldrb	r3, [r7, #14]
 800ddf0:	3b01      	subs	r3, #1
 800ddf2:	b2db      	uxtb	r3, r3
 800ddf4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ddf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	dce9      	bgt.n	800ddd2 <prvUnlockQueue+0x60>
 800ddfe:	e000      	b.n	800de02 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800de00:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	22ff      	movs	r2, #255	; 0xff
 800de06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800de0a:	f001 fddd 	bl	800f9c8 <vPortExitCritical>
}
 800de0e:	bf00      	nop
 800de10:	3710      	adds	r7, #16
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}

0800de16 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800de16:	b580      	push	{r7, lr}
 800de18:	b084      	sub	sp, #16
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de1e:	f001 fda5 	bl	800f96c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de26:	2b00      	cmp	r3, #0
 800de28:	d102      	bne.n	800de30 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800de2a:	2301      	movs	r3, #1
 800de2c:	60fb      	str	r3, [r7, #12]
 800de2e:	e001      	b.n	800de34 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800de30:	2300      	movs	r3, #0
 800de32:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de34:	f001 fdc8 	bl	800f9c8 <vPortExitCritical>

	return xReturn;
 800de38:	68fb      	ldr	r3, [r7, #12]
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	3710      	adds	r7, #16
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}

0800de42 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800de42:	b580      	push	{r7, lr}
 800de44:	b084      	sub	sp, #16
 800de46:	af00      	add	r7, sp, #0
 800de48:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de4a:	f001 fd8f 	bl	800f96c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de56:	429a      	cmp	r2, r3
 800de58:	d102      	bne.n	800de60 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800de5a:	2301      	movs	r3, #1
 800de5c:	60fb      	str	r3, [r7, #12]
 800de5e:	e001      	b.n	800de64 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800de60:	2300      	movs	r3, #0
 800de62:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de64:	f001 fdb0 	bl	800f9c8 <vPortExitCritical>

	return xReturn;
 800de68:	68fb      	ldr	r3, [r7, #12]
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3710      	adds	r7, #16
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
	...

0800de74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800de74:	b480      	push	{r7}
 800de76:	b085      	sub	sp, #20
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de7e:	2300      	movs	r3, #0
 800de80:	60fb      	str	r3, [r7, #12]
 800de82:	e014      	b.n	800deae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800de84:	4a0e      	ldr	r2, [pc, #56]	; (800dec0 <vQueueAddToRegistry+0x4c>)
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d10b      	bne.n	800dea8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800de90:	490b      	ldr	r1, [pc, #44]	; (800dec0 <vQueueAddToRegistry+0x4c>)
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	683a      	ldr	r2, [r7, #0]
 800de96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800de9a:	4a09      	ldr	r2, [pc, #36]	; (800dec0 <vQueueAddToRegistry+0x4c>)
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	00db      	lsls	r3, r3, #3
 800dea0:	4413      	add	r3, r2
 800dea2:	687a      	ldr	r2, [r7, #4]
 800dea4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dea6:	e005      	b.n	800deb4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	3301      	adds	r3, #1
 800deac:	60fb      	str	r3, [r7, #12]
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2b07      	cmp	r3, #7
 800deb2:	d9e7      	bls.n	800de84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800deb4:	bf00      	nop
 800deb6:	3714      	adds	r7, #20
 800deb8:	46bd      	mov	sp, r7
 800deba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debe:	4770      	bx	lr
 800dec0:	20006fc4 	.word	0x20006fc4

0800dec4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b086      	sub	sp, #24
 800dec8:	af00      	add	r7, sp, #0
 800deca:	60f8      	str	r0, [r7, #12]
 800decc:	60b9      	str	r1, [r7, #8]
 800dece:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ded4:	f001 fd4a 	bl	800f96c <vPortEnterCritical>
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dede:	b25b      	sxtb	r3, r3
 800dee0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dee4:	d103      	bne.n	800deee <vQueueWaitForMessageRestricted+0x2a>
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	2200      	movs	r2, #0
 800deea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800def4:	b25b      	sxtb	r3, r3
 800def6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800defa:	d103      	bne.n	800df04 <vQueueWaitForMessageRestricted+0x40>
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	2200      	movs	r2, #0
 800df00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800df04:	f001 fd60 	bl	800f9c8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d106      	bne.n	800df1e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	3324      	adds	r3, #36	; 0x24
 800df14:	687a      	ldr	r2, [r7, #4]
 800df16:	68b9      	ldr	r1, [r7, #8]
 800df18:	4618      	mov	r0, r3
 800df1a:	f000 fccd 	bl	800e8b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800df1e:	6978      	ldr	r0, [r7, #20]
 800df20:	f7ff ff27 	bl	800dd72 <prvUnlockQueue>
	}
 800df24:	bf00      	nop
 800df26:	3718      	adds	r7, #24
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}

0800df2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b08e      	sub	sp, #56	; 0x38
 800df30:	af04      	add	r7, sp, #16
 800df32:	60f8      	str	r0, [r7, #12]
 800df34:	60b9      	str	r1, [r7, #8]
 800df36:	607a      	str	r2, [r7, #4]
 800df38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800df3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d109      	bne.n	800df54 <xTaskCreateStatic+0x28>
 800df40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df44:	f383 8811 	msr	BASEPRI, r3
 800df48:	f3bf 8f6f 	isb	sy
 800df4c:	f3bf 8f4f 	dsb	sy
 800df50:	623b      	str	r3, [r7, #32]
 800df52:	e7fe      	b.n	800df52 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800df54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df56:	2b00      	cmp	r3, #0
 800df58:	d109      	bne.n	800df6e <xTaskCreateStatic+0x42>
 800df5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df5e:	f383 8811 	msr	BASEPRI, r3
 800df62:	f3bf 8f6f 	isb	sy
 800df66:	f3bf 8f4f 	dsb	sy
 800df6a:	61fb      	str	r3, [r7, #28]
 800df6c:	e7fe      	b.n	800df6c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800df6e:	2364      	movs	r3, #100	; 0x64
 800df70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	2b64      	cmp	r3, #100	; 0x64
 800df76:	d009      	beq.n	800df8c <xTaskCreateStatic+0x60>
 800df78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df7c:	f383 8811 	msr	BASEPRI, r3
 800df80:	f3bf 8f6f 	isb	sy
 800df84:	f3bf 8f4f 	dsb	sy
 800df88:	61bb      	str	r3, [r7, #24]
 800df8a:	e7fe      	b.n	800df8a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800df8c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800df8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df90:	2b00      	cmp	r3, #0
 800df92:	d01e      	beq.n	800dfd2 <xTaskCreateStatic+0xa6>
 800df94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df96:	2b00      	cmp	r3, #0
 800df98:	d01b      	beq.n	800dfd2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800df9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800df9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfa2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa6:	2202      	movs	r2, #2
 800dfa8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dfac:	2300      	movs	r3, #0
 800dfae:	9303      	str	r3, [sp, #12]
 800dfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb2:	9302      	str	r3, [sp, #8]
 800dfb4:	f107 0314 	add.w	r3, r7, #20
 800dfb8:	9301      	str	r3, [sp, #4]
 800dfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfbc:	9300      	str	r3, [sp, #0]
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	687a      	ldr	r2, [r7, #4]
 800dfc2:	68b9      	ldr	r1, [r7, #8]
 800dfc4:	68f8      	ldr	r0, [r7, #12]
 800dfc6:	f000 f850 	bl	800e06a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dfca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dfcc:	f000 f8e2 	bl	800e194 <prvAddNewTaskToReadyList>
 800dfd0:	e001      	b.n	800dfd6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dfd6:	697b      	ldr	r3, [r7, #20]
	}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	3728      	adds	r7, #40	; 0x28
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}

0800dfe0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b08c      	sub	sp, #48	; 0x30
 800dfe4:	af04      	add	r7, sp, #16
 800dfe6:	60f8      	str	r0, [r7, #12]
 800dfe8:	60b9      	str	r1, [r7, #8]
 800dfea:	603b      	str	r3, [r7, #0]
 800dfec:	4613      	mov	r3, r2
 800dfee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dff0:	88fb      	ldrh	r3, [r7, #6]
 800dff2:	009b      	lsls	r3, r3, #2
 800dff4:	4618      	mov	r0, r3
 800dff6:	f001 fdd3 	bl	800fba0 <pvPortMalloc>
 800dffa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d00e      	beq.n	800e020 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e002:	2064      	movs	r0, #100	; 0x64
 800e004:	f001 fdcc 	bl	800fba0 <pvPortMalloc>
 800e008:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e00a:	69fb      	ldr	r3, [r7, #28]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d003      	beq.n	800e018 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e010:	69fb      	ldr	r3, [r7, #28]
 800e012:	697a      	ldr	r2, [r7, #20]
 800e014:	631a      	str	r2, [r3, #48]	; 0x30
 800e016:	e005      	b.n	800e024 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e018:	6978      	ldr	r0, [r7, #20]
 800e01a:	f001 fe83 	bl	800fd24 <vPortFree>
 800e01e:	e001      	b.n	800e024 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e020:	2300      	movs	r3, #0
 800e022:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e024:	69fb      	ldr	r3, [r7, #28]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d017      	beq.n	800e05a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e02a:	69fb      	ldr	r3, [r7, #28]
 800e02c:	2200      	movs	r2, #0
 800e02e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e032:	88fa      	ldrh	r2, [r7, #6]
 800e034:	2300      	movs	r3, #0
 800e036:	9303      	str	r3, [sp, #12]
 800e038:	69fb      	ldr	r3, [r7, #28]
 800e03a:	9302      	str	r3, [sp, #8]
 800e03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e03e:	9301      	str	r3, [sp, #4]
 800e040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e042:	9300      	str	r3, [sp, #0]
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	68b9      	ldr	r1, [r7, #8]
 800e048:	68f8      	ldr	r0, [r7, #12]
 800e04a:	f000 f80e 	bl	800e06a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e04e:	69f8      	ldr	r0, [r7, #28]
 800e050:	f000 f8a0 	bl	800e194 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e054:	2301      	movs	r3, #1
 800e056:	61bb      	str	r3, [r7, #24]
 800e058:	e002      	b.n	800e060 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e05a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e05e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e060:	69bb      	ldr	r3, [r7, #24]
	}
 800e062:	4618      	mov	r0, r3
 800e064:	3720      	adds	r7, #32
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}

0800e06a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e06a:	b580      	push	{r7, lr}
 800e06c:	b088      	sub	sp, #32
 800e06e:	af00      	add	r7, sp, #0
 800e070:	60f8      	str	r0, [r7, #12]
 800e072:	60b9      	str	r1, [r7, #8]
 800e074:	607a      	str	r2, [r7, #4]
 800e076:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e07a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	009b      	lsls	r3, r3, #2
 800e080:	461a      	mov	r2, r3
 800e082:	21a5      	movs	r1, #165	; 0xa5
 800e084:	f00b f911 	bl	80192aa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e08a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e092:	3b01      	subs	r3, #1
 800e094:	009b      	lsls	r3, r3, #2
 800e096:	4413      	add	r3, r2
 800e098:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e09a:	69bb      	ldr	r3, [r7, #24]
 800e09c:	f023 0307 	bic.w	r3, r3, #7
 800e0a0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e0a2:	69bb      	ldr	r3, [r7, #24]
 800e0a4:	f003 0307 	and.w	r3, r3, #7
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d009      	beq.n	800e0c0 <prvInitialiseNewTask+0x56>
 800e0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b0:	f383 8811 	msr	BASEPRI, r3
 800e0b4:	f3bf 8f6f 	isb	sy
 800e0b8:	f3bf 8f4f 	dsb	sy
 800e0bc:	617b      	str	r3, [r7, #20]
 800e0be:	e7fe      	b.n	800e0be <prvInitialiseNewTask+0x54>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 800e0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c2:	69ba      	ldr	r2, [r7, #24]
 800e0c4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d01f      	beq.n	800e10c <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	61fb      	str	r3, [r7, #28]
 800e0d0:	e012      	b.n	800e0f8 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e0d2:	68ba      	ldr	r2, [r7, #8]
 800e0d4:	69fb      	ldr	r3, [r7, #28]
 800e0d6:	4413      	add	r3, r2
 800e0d8:	7819      	ldrb	r1, [r3, #0]
 800e0da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0dc:	69fb      	ldr	r3, [r7, #28]
 800e0de:	4413      	add	r3, r2
 800e0e0:	3334      	adds	r3, #52	; 0x34
 800e0e2:	460a      	mov	r2, r1
 800e0e4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e0e6:	68ba      	ldr	r2, [r7, #8]
 800e0e8:	69fb      	ldr	r3, [r7, #28]
 800e0ea:	4413      	add	r3, r2
 800e0ec:	781b      	ldrb	r3, [r3, #0]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d006      	beq.n	800e100 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e0f2:	69fb      	ldr	r3, [r7, #28]
 800e0f4:	3301      	adds	r3, #1
 800e0f6:	61fb      	str	r3, [r7, #28]
 800e0f8:	69fb      	ldr	r3, [r7, #28]
 800e0fa:	2b0f      	cmp	r3, #15
 800e0fc:	d9e9      	bls.n	800e0d2 <prvInitialiseNewTask+0x68>
 800e0fe:	e000      	b.n	800e102 <prvInitialiseNewTask+0x98>
			{
				break;
 800e100:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e104:	2200      	movs	r2, #0
 800e106:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e10a:	e003      	b.n	800e114 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e10e:	2200      	movs	r2, #0
 800e110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e116:	2b37      	cmp	r3, #55	; 0x37
 800e118:	d901      	bls.n	800e11e <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e11a:	2337      	movs	r3, #55	; 0x37
 800e11c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e122:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e128:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800e12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e12c:	2200      	movs	r2, #0
 800e12e:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e132:	3304      	adds	r3, #4
 800e134:	4618      	mov	r0, r3
 800e136:	f7ff f8b1 	bl	800d29c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e13c:	3318      	adds	r3, #24
 800e13e:	4618      	mov	r0, r3
 800e140:	f7ff f8ac 	bl	800d29c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e146:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e148:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e14c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e152:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e158:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800e15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e15c:	2200      	movs	r2, #0
 800e15e:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e162:	2200      	movs	r2, #0
 800e164:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e168:	2200      	movs	r2, #0
 800e16a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e16e:	683a      	ldr	r2, [r7, #0]
 800e170:	68f9      	ldr	r1, [r7, #12]
 800e172:	69b8      	ldr	r0, [r7, #24]
 800e174:	f001 fad6 	bl	800f724 <pxPortInitialiseStack>
 800e178:	4602      	mov	r2, r0
 800e17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e17c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e180:	2b00      	cmp	r3, #0
 800e182:	d002      	beq.n	800e18a <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e188:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e18a:	bf00      	nop
 800e18c:	3720      	adds	r7, #32
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}
	...

0800e194 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b082      	sub	sp, #8
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e19c:	f001 fbe6 	bl	800f96c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e1a0:	4b2d      	ldr	r3, [pc, #180]	; (800e258 <prvAddNewTaskToReadyList+0xc4>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	4a2c      	ldr	r2, [pc, #176]	; (800e258 <prvAddNewTaskToReadyList+0xc4>)
 800e1a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e1aa:	4b2c      	ldr	r3, [pc, #176]	; (800e25c <prvAddNewTaskToReadyList+0xc8>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d109      	bne.n	800e1c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e1b2:	4a2a      	ldr	r2, [pc, #168]	; (800e25c <prvAddNewTaskToReadyList+0xc8>)
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e1b8:	4b27      	ldr	r3, [pc, #156]	; (800e258 <prvAddNewTaskToReadyList+0xc4>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	d110      	bne.n	800e1e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e1c0:	f000 fca0 	bl	800eb04 <prvInitialiseTaskLists>
 800e1c4:	e00d      	b.n	800e1e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e1c6:	4b26      	ldr	r3, [pc, #152]	; (800e260 <prvAddNewTaskToReadyList+0xcc>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d109      	bne.n	800e1e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e1ce:	4b23      	ldr	r3, [pc, #140]	; (800e25c <prvAddNewTaskToReadyList+0xc8>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d802      	bhi.n	800e1e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e1dc:	4a1f      	ldr	r2, [pc, #124]	; (800e25c <prvAddNewTaskToReadyList+0xc8>)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e1e2:	4b20      	ldr	r3, [pc, #128]	; (800e264 <prvAddNewTaskToReadyList+0xd0>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	3301      	adds	r3, #1
 800e1e8:	4a1e      	ldr	r2, [pc, #120]	; (800e264 <prvAddNewTaskToReadyList+0xd0>)
 800e1ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e1ec:	4b1d      	ldr	r3, [pc, #116]	; (800e264 <prvAddNewTaskToReadyList+0xd0>)
 800e1ee:	681a      	ldr	r2, [r3, #0]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1f8:	4b1b      	ldr	r3, [pc, #108]	; (800e268 <prvAddNewTaskToReadyList+0xd4>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d903      	bls.n	800e208 <prvAddNewTaskToReadyList+0x74>
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e204:	4a18      	ldr	r2, [pc, #96]	; (800e268 <prvAddNewTaskToReadyList+0xd4>)
 800e206:	6013      	str	r3, [r2, #0]
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e20c:	4613      	mov	r3, r2
 800e20e:	009b      	lsls	r3, r3, #2
 800e210:	4413      	add	r3, r2
 800e212:	009b      	lsls	r3, r3, #2
 800e214:	4a15      	ldr	r2, [pc, #84]	; (800e26c <prvAddNewTaskToReadyList+0xd8>)
 800e216:	441a      	add	r2, r3
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	3304      	adds	r3, #4
 800e21c:	4619      	mov	r1, r3
 800e21e:	4610      	mov	r0, r2
 800e220:	f7ff f849 	bl	800d2b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e224:	f001 fbd0 	bl	800f9c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e228:	4b0d      	ldr	r3, [pc, #52]	; (800e260 <prvAddNewTaskToReadyList+0xcc>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d00e      	beq.n	800e24e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e230:	4b0a      	ldr	r3, [pc, #40]	; (800e25c <prvAddNewTaskToReadyList+0xc8>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d207      	bcs.n	800e24e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e23e:	4b0c      	ldr	r3, [pc, #48]	; (800e270 <prvAddNewTaskToReadyList+0xdc>)
 800e240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e244:	601a      	str	r2, [r3, #0]
 800e246:	f3bf 8f4f 	dsb	sy
 800e24a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e24e:	bf00      	nop
 800e250:	3708      	adds	r7, #8
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop
 800e258:	200011dc 	.word	0x200011dc
 800e25c:	20000d08 	.word	0x20000d08
 800e260:	200011e8 	.word	0x200011e8
 800e264:	200011f8 	.word	0x200011f8
 800e268:	200011e4 	.word	0x200011e4
 800e26c:	20000d0c 	.word	0x20000d0c
 800e270:	e000ed04 	.word	0xe000ed04

0800e274 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800e274:	b580      	push	{r7, lr}
 800e276:	b08a      	sub	sp, #40	; 0x28
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
 800e27c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e27e:	2300      	movs	r3, #0
 800e280:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d109      	bne.n	800e29c <vTaskDelayUntil+0x28>
 800e288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e28c:	f383 8811 	msr	BASEPRI, r3
 800e290:	f3bf 8f6f 	isb	sy
 800e294:	f3bf 8f4f 	dsb	sy
 800e298:	617b      	str	r3, [r7, #20]
 800e29a:	e7fe      	b.n	800e29a <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d109      	bne.n	800e2b6 <vTaskDelayUntil+0x42>
 800e2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2a6:	f383 8811 	msr	BASEPRI, r3
 800e2aa:	f3bf 8f6f 	isb	sy
 800e2ae:	f3bf 8f4f 	dsb	sy
 800e2b2:	613b      	str	r3, [r7, #16]
 800e2b4:	e7fe      	b.n	800e2b4 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800e2b6:	4b29      	ldr	r3, [pc, #164]	; (800e35c <vTaskDelayUntil+0xe8>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d009      	beq.n	800e2d2 <vTaskDelayUntil+0x5e>
 800e2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2c2:	f383 8811 	msr	BASEPRI, r3
 800e2c6:	f3bf 8f6f 	isb	sy
 800e2ca:	f3bf 8f4f 	dsb	sy
 800e2ce:	60fb      	str	r3, [r7, #12]
 800e2d0:	e7fe      	b.n	800e2d0 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800e2d2:	f000 f8e3 	bl	800e49c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800e2d6:	4b22      	ldr	r3, [pc, #136]	; (800e360 <vTaskDelayUntil+0xec>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	683a      	ldr	r2, [r7, #0]
 800e2e2:	4413      	add	r3, r2
 800e2e4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	6a3a      	ldr	r2, [r7, #32]
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	d20b      	bcs.n	800e308 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	69fa      	ldr	r2, [r7, #28]
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d211      	bcs.n	800e31e <vTaskDelayUntil+0xaa>
 800e2fa:	69fa      	ldr	r2, [r7, #28]
 800e2fc:	6a3b      	ldr	r3, [r7, #32]
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d90d      	bls.n	800e31e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800e302:	2301      	movs	r3, #1
 800e304:	627b      	str	r3, [r7, #36]	; 0x24
 800e306:	e00a      	b.n	800e31e <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	69fa      	ldr	r2, [r7, #28]
 800e30e:	429a      	cmp	r2, r3
 800e310:	d303      	bcc.n	800e31a <vTaskDelayUntil+0xa6>
 800e312:	69fa      	ldr	r2, [r7, #28]
 800e314:	6a3b      	ldr	r3, [r7, #32]
 800e316:	429a      	cmp	r2, r3
 800e318:	d901      	bls.n	800e31e <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800e31a:	2301      	movs	r3, #1
 800e31c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	69fa      	ldr	r2, [r7, #28]
 800e322:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e326:	2b00      	cmp	r3, #0
 800e328:	d006      	beq.n	800e338 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e32a:	69fa      	ldr	r2, [r7, #28]
 800e32c:	6a3b      	ldr	r3, [r7, #32]
 800e32e:	1ad3      	subs	r3, r2, r3
 800e330:	2100      	movs	r1, #0
 800e332:	4618      	mov	r0, r3
 800e334:	f000 fe5c 	bl	800eff0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e338:	f000 f8be 	bl	800e4b8 <xTaskResumeAll>
 800e33c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e33e:	69bb      	ldr	r3, [r7, #24]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d107      	bne.n	800e354 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800e344:	4b07      	ldr	r3, [pc, #28]	; (800e364 <vTaskDelayUntil+0xf0>)
 800e346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e34a:	601a      	str	r2, [r3, #0]
 800e34c:	f3bf 8f4f 	dsb	sy
 800e350:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e354:	bf00      	nop
 800e356:	3728      	adds	r7, #40	; 0x28
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	20001204 	.word	0x20001204
 800e360:	200011e0 	.word	0x200011e0
 800e364:	e000ed04 	.word	0xe000ed04

0800e368 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b084      	sub	sp, #16
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e370:	2300      	movs	r3, #0
 800e372:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d016      	beq.n	800e3a8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e37a:	4b13      	ldr	r3, [pc, #76]	; (800e3c8 <vTaskDelay+0x60>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d009      	beq.n	800e396 <vTaskDelay+0x2e>
 800e382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e386:	f383 8811 	msr	BASEPRI, r3
 800e38a:	f3bf 8f6f 	isb	sy
 800e38e:	f3bf 8f4f 	dsb	sy
 800e392:	60bb      	str	r3, [r7, #8]
 800e394:	e7fe      	b.n	800e394 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800e396:	f000 f881 	bl	800e49c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e39a:	2100      	movs	r1, #0
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f000 fe27 	bl	800eff0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e3a2:	f000 f889 	bl	800e4b8 <xTaskResumeAll>
 800e3a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d107      	bne.n	800e3be <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800e3ae:	4b07      	ldr	r3, [pc, #28]	; (800e3cc <vTaskDelay+0x64>)
 800e3b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3b4:	601a      	str	r2, [r3, #0]
 800e3b6:	f3bf 8f4f 	dsb	sy
 800e3ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e3be:	bf00      	nop
 800e3c0:	3710      	adds	r7, #16
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}
 800e3c6:	bf00      	nop
 800e3c8:	20001204 	.word	0x20001204
 800e3cc:	e000ed04 	.word	0xe000ed04

0800e3d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b08a      	sub	sp, #40	; 0x28
 800e3d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e3de:	463a      	mov	r2, r7
 800e3e0:	1d39      	adds	r1, r7, #4
 800e3e2:	f107 0308 	add.w	r3, r7, #8
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7fe ff04 	bl	800d1f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e3ec:	6839      	ldr	r1, [r7, #0]
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	68ba      	ldr	r2, [r7, #8]
 800e3f2:	9202      	str	r2, [sp, #8]
 800e3f4:	9301      	str	r3, [sp, #4]
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	9300      	str	r3, [sp, #0]
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	460a      	mov	r2, r1
 800e3fe:	4921      	ldr	r1, [pc, #132]	; (800e484 <vTaskStartScheduler+0xb4>)
 800e400:	4821      	ldr	r0, [pc, #132]	; (800e488 <vTaskStartScheduler+0xb8>)
 800e402:	f7ff fd93 	bl	800df2c <xTaskCreateStatic>
 800e406:	4602      	mov	r2, r0
 800e408:	4b20      	ldr	r3, [pc, #128]	; (800e48c <vTaskStartScheduler+0xbc>)
 800e40a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e40c:	4b1f      	ldr	r3, [pc, #124]	; (800e48c <vTaskStartScheduler+0xbc>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d002      	beq.n	800e41a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e414:	2301      	movs	r3, #1
 800e416:	617b      	str	r3, [r7, #20]
 800e418:	e001      	b.n	800e41e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e41a:	2300      	movs	r3, #0
 800e41c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	2b01      	cmp	r3, #1
 800e422:	d102      	bne.n	800e42a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e424:	f000 fe38 	bl	800f098 <xTimerCreateTimerTask>
 800e428:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e42a:	697b      	ldr	r3, [r7, #20]
 800e42c:	2b01      	cmp	r3, #1
 800e42e:	d117      	bne.n	800e460 <vTaskStartScheduler+0x90>
 800e430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e434:	f383 8811 	msr	BASEPRI, r3
 800e438:	f3bf 8f6f 	isb	sy
 800e43c:	f3bf 8f4f 	dsb	sy
 800e440:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e442:	4b13      	ldr	r3, [pc, #76]	; (800e490 <vTaskStartScheduler+0xc0>)
 800e444:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e448:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e44a:	4b12      	ldr	r3, [pc, #72]	; (800e494 <vTaskStartScheduler+0xc4>)
 800e44c:	2201      	movs	r2, #1
 800e44e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e450:	4b11      	ldr	r3, [pc, #68]	; (800e498 <vTaskStartScheduler+0xc8>)
 800e452:	2200      	movs	r2, #0
 800e454:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e456:	f7f2 f84d 	bl	80004f4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e45a:	f001 f9e9 	bl	800f830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e45e:	e00d      	b.n	800e47c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e466:	d109      	bne.n	800e47c <vTaskStartScheduler+0xac>
 800e468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e46c:	f383 8811 	msr	BASEPRI, r3
 800e470:	f3bf 8f6f 	isb	sy
 800e474:	f3bf 8f4f 	dsb	sy
 800e478:	60fb      	str	r3, [r7, #12]
 800e47a:	e7fe      	b.n	800e47a <vTaskStartScheduler+0xaa>
}
 800e47c:	bf00      	nop
 800e47e:	3718      	adds	r7, #24
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}
 800e484:	08019540 	.word	0x08019540
 800e488:	0800ead5 	.word	0x0800ead5
 800e48c:	20001200 	.word	0x20001200
 800e490:	200011fc 	.word	0x200011fc
 800e494:	200011e8 	.word	0x200011e8
 800e498:	200011e0 	.word	0x200011e0

0800e49c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e49c:	b480      	push	{r7}
 800e49e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e4a0:	4b04      	ldr	r3, [pc, #16]	; (800e4b4 <vTaskSuspendAll+0x18>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	4a03      	ldr	r2, [pc, #12]	; (800e4b4 <vTaskSuspendAll+0x18>)
 800e4a8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e4aa:	bf00      	nop
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b2:	4770      	bx	lr
 800e4b4:	20001204 	.word	0x20001204

0800e4b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b084      	sub	sp, #16
 800e4bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e4c6:	4b41      	ldr	r3, [pc, #260]	; (800e5cc <xTaskResumeAll+0x114>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d109      	bne.n	800e4e2 <xTaskResumeAll+0x2a>
 800e4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d2:	f383 8811 	msr	BASEPRI, r3
 800e4d6:	f3bf 8f6f 	isb	sy
 800e4da:	f3bf 8f4f 	dsb	sy
 800e4de:	603b      	str	r3, [r7, #0]
 800e4e0:	e7fe      	b.n	800e4e0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e4e2:	f001 fa43 	bl	800f96c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e4e6:	4b39      	ldr	r3, [pc, #228]	; (800e5cc <xTaskResumeAll+0x114>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	3b01      	subs	r3, #1
 800e4ec:	4a37      	ldr	r2, [pc, #220]	; (800e5cc <xTaskResumeAll+0x114>)
 800e4ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4f0:	4b36      	ldr	r3, [pc, #216]	; (800e5cc <xTaskResumeAll+0x114>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d162      	bne.n	800e5be <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e4f8:	4b35      	ldr	r3, [pc, #212]	; (800e5d0 <xTaskResumeAll+0x118>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d05e      	beq.n	800e5be <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e500:	e02f      	b.n	800e562 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e502:	4b34      	ldr	r3, [pc, #208]	; (800e5d4 <xTaskResumeAll+0x11c>)
 800e504:	68db      	ldr	r3, [r3, #12]
 800e506:	68db      	ldr	r3, [r3, #12]
 800e508:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	3318      	adds	r3, #24
 800e50e:	4618      	mov	r0, r3
 800e510:	f7fe ff2e 	bl	800d370 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	3304      	adds	r3, #4
 800e518:	4618      	mov	r0, r3
 800e51a:	f7fe ff29 	bl	800d370 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e522:	4b2d      	ldr	r3, [pc, #180]	; (800e5d8 <xTaskResumeAll+0x120>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	429a      	cmp	r2, r3
 800e528:	d903      	bls.n	800e532 <xTaskResumeAll+0x7a>
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e52e:	4a2a      	ldr	r2, [pc, #168]	; (800e5d8 <xTaskResumeAll+0x120>)
 800e530:	6013      	str	r3, [r2, #0]
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e536:	4613      	mov	r3, r2
 800e538:	009b      	lsls	r3, r3, #2
 800e53a:	4413      	add	r3, r2
 800e53c:	009b      	lsls	r3, r3, #2
 800e53e:	4a27      	ldr	r2, [pc, #156]	; (800e5dc <xTaskResumeAll+0x124>)
 800e540:	441a      	add	r2, r3
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	3304      	adds	r3, #4
 800e546:	4619      	mov	r1, r3
 800e548:	4610      	mov	r0, r2
 800e54a:	f7fe feb4 	bl	800d2b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e552:	4b23      	ldr	r3, [pc, #140]	; (800e5e0 <xTaskResumeAll+0x128>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e558:	429a      	cmp	r2, r3
 800e55a:	d302      	bcc.n	800e562 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e55c:	4b21      	ldr	r3, [pc, #132]	; (800e5e4 <xTaskResumeAll+0x12c>)
 800e55e:	2201      	movs	r2, #1
 800e560:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e562:	4b1c      	ldr	r3, [pc, #112]	; (800e5d4 <xTaskResumeAll+0x11c>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d1cb      	bne.n	800e502 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d001      	beq.n	800e574 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e570:	f000 fb62 	bl	800ec38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e574:	4b1c      	ldr	r3, [pc, #112]	; (800e5e8 <xTaskResumeAll+0x130>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d010      	beq.n	800e5a2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e580:	f000 f846 	bl	800e610 <xTaskIncrementTick>
 800e584:	4603      	mov	r3, r0
 800e586:	2b00      	cmp	r3, #0
 800e588:	d002      	beq.n	800e590 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e58a:	4b16      	ldr	r3, [pc, #88]	; (800e5e4 <xTaskResumeAll+0x12c>)
 800e58c:	2201      	movs	r2, #1
 800e58e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	3b01      	subs	r3, #1
 800e594:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d1f1      	bne.n	800e580 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800e59c:	4b12      	ldr	r3, [pc, #72]	; (800e5e8 <xTaskResumeAll+0x130>)
 800e59e:	2200      	movs	r2, #0
 800e5a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e5a2:	4b10      	ldr	r3, [pc, #64]	; (800e5e4 <xTaskResumeAll+0x12c>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d009      	beq.n	800e5be <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e5ae:	4b0f      	ldr	r3, [pc, #60]	; (800e5ec <xTaskResumeAll+0x134>)
 800e5b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5b4:	601a      	str	r2, [r3, #0]
 800e5b6:	f3bf 8f4f 	dsb	sy
 800e5ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e5be:	f001 fa03 	bl	800f9c8 <vPortExitCritical>

	return xAlreadyYielded;
 800e5c2:	68bb      	ldr	r3, [r7, #8]
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3710      	adds	r7, #16
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}
 800e5cc:	20001204 	.word	0x20001204
 800e5d0:	200011dc 	.word	0x200011dc
 800e5d4:	2000119c 	.word	0x2000119c
 800e5d8:	200011e4 	.word	0x200011e4
 800e5dc:	20000d0c 	.word	0x20000d0c
 800e5e0:	20000d08 	.word	0x20000d08
 800e5e4:	200011f0 	.word	0x200011f0
 800e5e8:	200011ec 	.word	0x200011ec
 800e5ec:	e000ed04 	.word	0xe000ed04

0800e5f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e5f0:	b480      	push	{r7}
 800e5f2:	b083      	sub	sp, #12
 800e5f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e5f6:	4b05      	ldr	r3, [pc, #20]	; (800e60c <xTaskGetTickCount+0x1c>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e5fc:	687b      	ldr	r3, [r7, #4]
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	370c      	adds	r7, #12
 800e602:	46bd      	mov	sp, r7
 800e604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e608:	4770      	bx	lr
 800e60a:	bf00      	nop
 800e60c:	200011e0 	.word	0x200011e0

0800e610 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b086      	sub	sp, #24
 800e614:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e616:	2300      	movs	r3, #0
 800e618:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e61a:	4b4e      	ldr	r3, [pc, #312]	; (800e754 <xTaskIncrementTick+0x144>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	f040 8088 	bne.w	800e734 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e624:	4b4c      	ldr	r3, [pc, #304]	; (800e758 <xTaskIncrementTick+0x148>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	3301      	adds	r3, #1
 800e62a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e62c:	4a4a      	ldr	r2, [pc, #296]	; (800e758 <xTaskIncrementTick+0x148>)
 800e62e:	693b      	ldr	r3, [r7, #16]
 800e630:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d11f      	bne.n	800e678 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800e638:	4b48      	ldr	r3, [pc, #288]	; (800e75c <xTaskIncrementTick+0x14c>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d009      	beq.n	800e656 <xTaskIncrementTick+0x46>
 800e642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e646:	f383 8811 	msr	BASEPRI, r3
 800e64a:	f3bf 8f6f 	isb	sy
 800e64e:	f3bf 8f4f 	dsb	sy
 800e652:	603b      	str	r3, [r7, #0]
 800e654:	e7fe      	b.n	800e654 <xTaskIncrementTick+0x44>
 800e656:	4b41      	ldr	r3, [pc, #260]	; (800e75c <xTaskIncrementTick+0x14c>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	60fb      	str	r3, [r7, #12]
 800e65c:	4b40      	ldr	r3, [pc, #256]	; (800e760 <xTaskIncrementTick+0x150>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	4a3e      	ldr	r2, [pc, #248]	; (800e75c <xTaskIncrementTick+0x14c>)
 800e662:	6013      	str	r3, [r2, #0]
 800e664:	4a3e      	ldr	r2, [pc, #248]	; (800e760 <xTaskIncrementTick+0x150>)
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	6013      	str	r3, [r2, #0]
 800e66a:	4b3e      	ldr	r3, [pc, #248]	; (800e764 <xTaskIncrementTick+0x154>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	3301      	adds	r3, #1
 800e670:	4a3c      	ldr	r2, [pc, #240]	; (800e764 <xTaskIncrementTick+0x154>)
 800e672:	6013      	str	r3, [r2, #0]
 800e674:	f000 fae0 	bl	800ec38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e678:	4b3b      	ldr	r3, [pc, #236]	; (800e768 <xTaskIncrementTick+0x158>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	693a      	ldr	r2, [r7, #16]
 800e67e:	429a      	cmp	r2, r3
 800e680:	d349      	bcc.n	800e716 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e682:	4b36      	ldr	r3, [pc, #216]	; (800e75c <xTaskIncrementTick+0x14c>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d104      	bne.n	800e696 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e68c:	4b36      	ldr	r3, [pc, #216]	; (800e768 <xTaskIncrementTick+0x158>)
 800e68e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e692:	601a      	str	r2, [r3, #0]
					break;
 800e694:	e03f      	b.n	800e716 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e696:	4b31      	ldr	r3, [pc, #196]	; (800e75c <xTaskIncrementTick+0x14c>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	68db      	ldr	r3, [r3, #12]
 800e69c:	68db      	ldr	r3, [r3, #12]
 800e69e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	685b      	ldr	r3, [r3, #4]
 800e6a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e6a6:	693a      	ldr	r2, [r7, #16]
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d203      	bcs.n	800e6b6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e6ae:	4a2e      	ldr	r2, [pc, #184]	; (800e768 <xTaskIncrementTick+0x158>)
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e6b4:	e02f      	b.n	800e716 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e6b6:	68bb      	ldr	r3, [r7, #8]
 800e6b8:	3304      	adds	r3, #4
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7fe fe58 	bl	800d370 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d004      	beq.n	800e6d2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	3318      	adds	r3, #24
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f7fe fe4f 	bl	800d370 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6d6:	4b25      	ldr	r3, [pc, #148]	; (800e76c <xTaskIncrementTick+0x15c>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	d903      	bls.n	800e6e6 <xTaskIncrementTick+0xd6>
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6e2:	4a22      	ldr	r2, [pc, #136]	; (800e76c <xTaskIncrementTick+0x15c>)
 800e6e4:	6013      	str	r3, [r2, #0]
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6ea:	4613      	mov	r3, r2
 800e6ec:	009b      	lsls	r3, r3, #2
 800e6ee:	4413      	add	r3, r2
 800e6f0:	009b      	lsls	r3, r3, #2
 800e6f2:	4a1f      	ldr	r2, [pc, #124]	; (800e770 <xTaskIncrementTick+0x160>)
 800e6f4:	441a      	add	r2, r3
 800e6f6:	68bb      	ldr	r3, [r7, #8]
 800e6f8:	3304      	adds	r3, #4
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	4610      	mov	r0, r2
 800e6fe:	f7fe fdda 	bl	800d2b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e702:	68bb      	ldr	r3, [r7, #8]
 800e704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e706:	4b1b      	ldr	r3, [pc, #108]	; (800e774 <xTaskIncrementTick+0x164>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d3b8      	bcc.n	800e682 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800e710:	2301      	movs	r3, #1
 800e712:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e714:	e7b5      	b.n	800e682 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e716:	4b17      	ldr	r3, [pc, #92]	; (800e774 <xTaskIncrementTick+0x164>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e71c:	4914      	ldr	r1, [pc, #80]	; (800e770 <xTaskIncrementTick+0x160>)
 800e71e:	4613      	mov	r3, r2
 800e720:	009b      	lsls	r3, r3, #2
 800e722:	4413      	add	r3, r2
 800e724:	009b      	lsls	r3, r3, #2
 800e726:	440b      	add	r3, r1
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	2b01      	cmp	r3, #1
 800e72c:	d907      	bls.n	800e73e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800e72e:	2301      	movs	r3, #1
 800e730:	617b      	str	r3, [r7, #20]
 800e732:	e004      	b.n	800e73e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e734:	4b10      	ldr	r3, [pc, #64]	; (800e778 <xTaskIncrementTick+0x168>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	3301      	adds	r3, #1
 800e73a:	4a0f      	ldr	r2, [pc, #60]	; (800e778 <xTaskIncrementTick+0x168>)
 800e73c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e73e:	4b0f      	ldr	r3, [pc, #60]	; (800e77c <xTaskIncrementTick+0x16c>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d001      	beq.n	800e74a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800e746:	2301      	movs	r3, #1
 800e748:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e74a:	697b      	ldr	r3, [r7, #20]
}
 800e74c:	4618      	mov	r0, r3
 800e74e:	3718      	adds	r7, #24
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}
 800e754:	20001204 	.word	0x20001204
 800e758:	200011e0 	.word	0x200011e0
 800e75c:	20001194 	.word	0x20001194
 800e760:	20001198 	.word	0x20001198
 800e764:	200011f4 	.word	0x200011f4
 800e768:	200011fc 	.word	0x200011fc
 800e76c:	200011e4 	.word	0x200011e4
 800e770:	20000d0c 	.word	0x20000d0c
 800e774:	20000d08 	.word	0x20000d08
 800e778:	200011ec 	.word	0x200011ec
 800e77c:	200011f0 	.word	0x200011f0

0800e780 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b084      	sub	sp, #16
 800e784:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e786:	4b33      	ldr	r3, [pc, #204]	; (800e854 <vTaskSwitchContext+0xd4>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d003      	beq.n	800e796 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e78e:	4b32      	ldr	r3, [pc, #200]	; (800e858 <vTaskSwitchContext+0xd8>)
 800e790:	2201      	movs	r2, #1
 800e792:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e794:	e059      	b.n	800e84a <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 800e796:	4b30      	ldr	r3, [pc, #192]	; (800e858 <vTaskSwitchContext+0xd8>)
 800e798:	2200      	movs	r2, #0
 800e79a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e79c:	f7f1 feb1 	bl	8000502 <getRunTimeCounterValue>
 800e7a0:	4602      	mov	r2, r0
 800e7a2:	4b2e      	ldr	r3, [pc, #184]	; (800e85c <vTaskSwitchContext+0xdc>)
 800e7a4:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e7a6:	4b2d      	ldr	r3, [pc, #180]	; (800e85c <vTaskSwitchContext+0xdc>)
 800e7a8:	681a      	ldr	r2, [r3, #0]
 800e7aa:	4b2d      	ldr	r3, [pc, #180]	; (800e860 <vTaskSwitchContext+0xe0>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d909      	bls.n	800e7c6 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e7b2:	4b2c      	ldr	r3, [pc, #176]	; (800e864 <vTaskSwitchContext+0xe4>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800e7b8:	4a28      	ldr	r2, [pc, #160]	; (800e85c <vTaskSwitchContext+0xdc>)
 800e7ba:	6810      	ldr	r0, [r2, #0]
 800e7bc:	4a28      	ldr	r2, [pc, #160]	; (800e860 <vTaskSwitchContext+0xe0>)
 800e7be:	6812      	ldr	r2, [r2, #0]
 800e7c0:	1a82      	subs	r2, r0, r2
 800e7c2:	440a      	add	r2, r1
 800e7c4:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 800e7c6:	4b25      	ldr	r3, [pc, #148]	; (800e85c <vTaskSwitchContext+0xdc>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	4a25      	ldr	r2, [pc, #148]	; (800e860 <vTaskSwitchContext+0xe0>)
 800e7cc:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7ce:	4b26      	ldr	r3, [pc, #152]	; (800e868 <vTaskSwitchContext+0xe8>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	60fb      	str	r3, [r7, #12]
 800e7d4:	e00f      	b.n	800e7f6 <vTaskSwitchContext+0x76>
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d109      	bne.n	800e7f0 <vTaskSwitchContext+0x70>
 800e7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e0:	f383 8811 	msr	BASEPRI, r3
 800e7e4:	f3bf 8f6f 	isb	sy
 800e7e8:	f3bf 8f4f 	dsb	sy
 800e7ec:	607b      	str	r3, [r7, #4]
 800e7ee:	e7fe      	b.n	800e7ee <vTaskSwitchContext+0x6e>
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	3b01      	subs	r3, #1
 800e7f4:	60fb      	str	r3, [r7, #12]
 800e7f6:	491d      	ldr	r1, [pc, #116]	; (800e86c <vTaskSwitchContext+0xec>)
 800e7f8:	68fa      	ldr	r2, [r7, #12]
 800e7fa:	4613      	mov	r3, r2
 800e7fc:	009b      	lsls	r3, r3, #2
 800e7fe:	4413      	add	r3, r2
 800e800:	009b      	lsls	r3, r3, #2
 800e802:	440b      	add	r3, r1
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d0e5      	beq.n	800e7d6 <vTaskSwitchContext+0x56>
 800e80a:	68fa      	ldr	r2, [r7, #12]
 800e80c:	4613      	mov	r3, r2
 800e80e:	009b      	lsls	r3, r3, #2
 800e810:	4413      	add	r3, r2
 800e812:	009b      	lsls	r3, r3, #2
 800e814:	4a15      	ldr	r2, [pc, #84]	; (800e86c <vTaskSwitchContext+0xec>)
 800e816:	4413      	add	r3, r2
 800e818:	60bb      	str	r3, [r7, #8]
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	685b      	ldr	r3, [r3, #4]
 800e81e:	685a      	ldr	r2, [r3, #4]
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	605a      	str	r2, [r3, #4]
 800e824:	68bb      	ldr	r3, [r7, #8]
 800e826:	685a      	ldr	r2, [r3, #4]
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	3308      	adds	r3, #8
 800e82c:	429a      	cmp	r2, r3
 800e82e:	d104      	bne.n	800e83a <vTaskSwitchContext+0xba>
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	685b      	ldr	r3, [r3, #4]
 800e834:	685a      	ldr	r2, [r3, #4]
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	605a      	str	r2, [r3, #4]
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	68db      	ldr	r3, [r3, #12]
 800e840:	4a08      	ldr	r2, [pc, #32]	; (800e864 <vTaskSwitchContext+0xe4>)
 800e842:	6013      	str	r3, [r2, #0]
 800e844:	4a08      	ldr	r2, [pc, #32]	; (800e868 <vTaskSwitchContext+0xe8>)
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	6013      	str	r3, [r2, #0]
}
 800e84a:	bf00      	nop
 800e84c:	3710      	adds	r7, #16
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}
 800e852:	bf00      	nop
 800e854:	20001204 	.word	0x20001204
 800e858:	200011f0 	.word	0x200011f0
 800e85c:	2000120c 	.word	0x2000120c
 800e860:	20001208 	.word	0x20001208
 800e864:	20000d08 	.word	0x20000d08
 800e868:	200011e4 	.word	0x200011e4
 800e86c:	20000d0c 	.word	0x20000d0c

0800e870 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b084      	sub	sp, #16
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
 800e878:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d109      	bne.n	800e894 <vTaskPlaceOnEventList+0x24>
 800e880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e884:	f383 8811 	msr	BASEPRI, r3
 800e888:	f3bf 8f6f 	isb	sy
 800e88c:	f3bf 8f4f 	dsb	sy
 800e890:	60fb      	str	r3, [r7, #12]
 800e892:	e7fe      	b.n	800e892 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e894:	4b07      	ldr	r3, [pc, #28]	; (800e8b4 <vTaskPlaceOnEventList+0x44>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	3318      	adds	r3, #24
 800e89a:	4619      	mov	r1, r3
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	f7fe fd2e 	bl	800d2fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e8a2:	2101      	movs	r1, #1
 800e8a4:	6838      	ldr	r0, [r7, #0]
 800e8a6:	f000 fba3 	bl	800eff0 <prvAddCurrentTaskToDelayedList>
}
 800e8aa:	bf00      	nop
 800e8ac:	3710      	adds	r7, #16
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}
 800e8b2:	bf00      	nop
 800e8b4:	20000d08 	.word	0x20000d08

0800e8b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b086      	sub	sp, #24
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	60f8      	str	r0, [r7, #12]
 800e8c0:	60b9      	str	r1, [r7, #8]
 800e8c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d109      	bne.n	800e8de <vTaskPlaceOnEventListRestricted+0x26>
 800e8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ce:	f383 8811 	msr	BASEPRI, r3
 800e8d2:	f3bf 8f6f 	isb	sy
 800e8d6:	f3bf 8f4f 	dsb	sy
 800e8da:	617b      	str	r3, [r7, #20]
 800e8dc:	e7fe      	b.n	800e8dc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e8de:	4b0a      	ldr	r3, [pc, #40]	; (800e908 <vTaskPlaceOnEventListRestricted+0x50>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	3318      	adds	r3, #24
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	68f8      	ldr	r0, [r7, #12]
 800e8e8:	f7fe fce5 	bl	800d2b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d002      	beq.n	800e8f8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800e8f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e8f6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e8f8:	6879      	ldr	r1, [r7, #4]
 800e8fa:	68b8      	ldr	r0, [r7, #8]
 800e8fc:	f000 fb78 	bl	800eff0 <prvAddCurrentTaskToDelayedList>
	}
 800e900:	bf00      	nop
 800e902:	3718      	adds	r7, #24
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}
 800e908:	20000d08 	.word	0x20000d08

0800e90c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b086      	sub	sp, #24
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	68db      	ldr	r3, [r3, #12]
 800e918:	68db      	ldr	r3, [r3, #12]
 800e91a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d109      	bne.n	800e936 <xTaskRemoveFromEventList+0x2a>
 800e922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e926:	f383 8811 	msr	BASEPRI, r3
 800e92a:	f3bf 8f6f 	isb	sy
 800e92e:	f3bf 8f4f 	dsb	sy
 800e932:	60fb      	str	r3, [r7, #12]
 800e934:	e7fe      	b.n	800e934 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	3318      	adds	r3, #24
 800e93a:	4618      	mov	r0, r3
 800e93c:	f7fe fd18 	bl	800d370 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e940:	4b1d      	ldr	r3, [pc, #116]	; (800e9b8 <xTaskRemoveFromEventList+0xac>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d11d      	bne.n	800e984 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e948:	693b      	ldr	r3, [r7, #16]
 800e94a:	3304      	adds	r3, #4
 800e94c:	4618      	mov	r0, r3
 800e94e:	f7fe fd0f 	bl	800d370 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e952:	693b      	ldr	r3, [r7, #16]
 800e954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e956:	4b19      	ldr	r3, [pc, #100]	; (800e9bc <xTaskRemoveFromEventList+0xb0>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	429a      	cmp	r2, r3
 800e95c:	d903      	bls.n	800e966 <xTaskRemoveFromEventList+0x5a>
 800e95e:	693b      	ldr	r3, [r7, #16]
 800e960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e962:	4a16      	ldr	r2, [pc, #88]	; (800e9bc <xTaskRemoveFromEventList+0xb0>)
 800e964:	6013      	str	r3, [r2, #0]
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e96a:	4613      	mov	r3, r2
 800e96c:	009b      	lsls	r3, r3, #2
 800e96e:	4413      	add	r3, r2
 800e970:	009b      	lsls	r3, r3, #2
 800e972:	4a13      	ldr	r2, [pc, #76]	; (800e9c0 <xTaskRemoveFromEventList+0xb4>)
 800e974:	441a      	add	r2, r3
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	3304      	adds	r3, #4
 800e97a:	4619      	mov	r1, r3
 800e97c:	4610      	mov	r0, r2
 800e97e:	f7fe fc9a 	bl	800d2b6 <vListInsertEnd>
 800e982:	e005      	b.n	800e990 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e984:	693b      	ldr	r3, [r7, #16]
 800e986:	3318      	adds	r3, #24
 800e988:	4619      	mov	r1, r3
 800e98a:	480e      	ldr	r0, [pc, #56]	; (800e9c4 <xTaskRemoveFromEventList+0xb8>)
 800e98c:	f7fe fc93 	bl	800d2b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e990:	693b      	ldr	r3, [r7, #16]
 800e992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e994:	4b0c      	ldr	r3, [pc, #48]	; (800e9c8 <xTaskRemoveFromEventList+0xbc>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d905      	bls.n	800e9aa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e99e:	2301      	movs	r3, #1
 800e9a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e9a2:	4b0a      	ldr	r3, [pc, #40]	; (800e9cc <xTaskRemoveFromEventList+0xc0>)
 800e9a4:	2201      	movs	r2, #1
 800e9a6:	601a      	str	r2, [r3, #0]
 800e9a8:	e001      	b.n	800e9ae <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e9ae:	697b      	ldr	r3, [r7, #20]
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3718      	adds	r7, #24
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}
 800e9b8:	20001204 	.word	0x20001204
 800e9bc:	200011e4 	.word	0x200011e4
 800e9c0:	20000d0c 	.word	0x20000d0c
 800e9c4:	2000119c 	.word	0x2000119c
 800e9c8:	20000d08 	.word	0x20000d08
 800e9cc:	200011f0 	.word	0x200011f0

0800e9d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	b083      	sub	sp, #12
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e9d8:	4b06      	ldr	r3, [pc, #24]	; (800e9f4 <vTaskInternalSetTimeOutState+0x24>)
 800e9da:	681a      	ldr	r2, [r3, #0]
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e9e0:	4b05      	ldr	r3, [pc, #20]	; (800e9f8 <vTaskInternalSetTimeOutState+0x28>)
 800e9e2:	681a      	ldr	r2, [r3, #0]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	605a      	str	r2, [r3, #4]
}
 800e9e8:	bf00      	nop
 800e9ea:	370c      	adds	r7, #12
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f2:	4770      	bx	lr
 800e9f4:	200011f4 	.word	0x200011f4
 800e9f8:	200011e0 	.word	0x200011e0

0800e9fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b088      	sub	sp, #32
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d109      	bne.n	800ea20 <xTaskCheckForTimeOut+0x24>
 800ea0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea10:	f383 8811 	msr	BASEPRI, r3
 800ea14:	f3bf 8f6f 	isb	sy
 800ea18:	f3bf 8f4f 	dsb	sy
 800ea1c:	613b      	str	r3, [r7, #16]
 800ea1e:	e7fe      	b.n	800ea1e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d109      	bne.n	800ea3a <xTaskCheckForTimeOut+0x3e>
 800ea26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea2a:	f383 8811 	msr	BASEPRI, r3
 800ea2e:	f3bf 8f6f 	isb	sy
 800ea32:	f3bf 8f4f 	dsb	sy
 800ea36:	60fb      	str	r3, [r7, #12]
 800ea38:	e7fe      	b.n	800ea38 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800ea3a:	f000 ff97 	bl	800f96c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ea3e:	4b1d      	ldr	r3, [pc, #116]	; (800eab4 <xTaskCheckForTimeOut+0xb8>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	685b      	ldr	r3, [r3, #4]
 800ea48:	69ba      	ldr	r2, [r7, #24]
 800ea4a:	1ad3      	subs	r3, r2, r3
 800ea4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea56:	d102      	bne.n	800ea5e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	61fb      	str	r3, [r7, #28]
 800ea5c:	e023      	b.n	800eaa6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681a      	ldr	r2, [r3, #0]
 800ea62:	4b15      	ldr	r3, [pc, #84]	; (800eab8 <xTaskCheckForTimeOut+0xbc>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	429a      	cmp	r2, r3
 800ea68:	d007      	beq.n	800ea7a <xTaskCheckForTimeOut+0x7e>
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	685b      	ldr	r3, [r3, #4]
 800ea6e:	69ba      	ldr	r2, [r7, #24]
 800ea70:	429a      	cmp	r2, r3
 800ea72:	d302      	bcc.n	800ea7a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ea74:	2301      	movs	r3, #1
 800ea76:	61fb      	str	r3, [r7, #28]
 800ea78:	e015      	b.n	800eaa6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	697a      	ldr	r2, [r7, #20]
 800ea80:	429a      	cmp	r2, r3
 800ea82:	d20b      	bcs.n	800ea9c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	681a      	ldr	r2, [r3, #0]
 800ea88:	697b      	ldr	r3, [r7, #20]
 800ea8a:	1ad2      	subs	r2, r2, r3
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ea90:	6878      	ldr	r0, [r7, #4]
 800ea92:	f7ff ff9d 	bl	800e9d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ea96:	2300      	movs	r3, #0
 800ea98:	61fb      	str	r3, [r7, #28]
 800ea9a:	e004      	b.n	800eaa6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800eaa6:	f000 ff8f 	bl	800f9c8 <vPortExitCritical>

	return xReturn;
 800eaaa:	69fb      	ldr	r3, [r7, #28]
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3720      	adds	r7, #32
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}
 800eab4:	200011e0 	.word	0x200011e0
 800eab8:	200011f4 	.word	0x200011f4

0800eabc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eabc:	b480      	push	{r7}
 800eabe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eac0:	4b03      	ldr	r3, [pc, #12]	; (800ead0 <vTaskMissedYield+0x14>)
 800eac2:	2201      	movs	r2, #1
 800eac4:	601a      	str	r2, [r3, #0]
}
 800eac6:	bf00      	nop
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr
 800ead0:	200011f0 	.word	0x200011f0

0800ead4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b082      	sub	sp, #8
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eadc:	f000 f852 	bl	800eb84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eae0:	4b06      	ldr	r3, [pc, #24]	; (800eafc <prvIdleTask+0x28>)
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	d9f9      	bls.n	800eadc <prvIdleTask+0x8>
			{
				taskYIELD();
 800eae8:	4b05      	ldr	r3, [pc, #20]	; (800eb00 <prvIdleTask+0x2c>)
 800eaea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eaee:	601a      	str	r2, [r3, #0]
 800eaf0:	f3bf 8f4f 	dsb	sy
 800eaf4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800eaf8:	e7f0      	b.n	800eadc <prvIdleTask+0x8>
 800eafa:	bf00      	nop
 800eafc:	20000d0c 	.word	0x20000d0c
 800eb00:	e000ed04 	.word	0xe000ed04

0800eb04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b082      	sub	sp, #8
 800eb08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	607b      	str	r3, [r7, #4]
 800eb0e:	e00c      	b.n	800eb2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eb10:	687a      	ldr	r2, [r7, #4]
 800eb12:	4613      	mov	r3, r2
 800eb14:	009b      	lsls	r3, r3, #2
 800eb16:	4413      	add	r3, r2
 800eb18:	009b      	lsls	r3, r3, #2
 800eb1a:	4a12      	ldr	r2, [pc, #72]	; (800eb64 <prvInitialiseTaskLists+0x60>)
 800eb1c:	4413      	add	r3, r2
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f7fe fb9c 	bl	800d25c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	3301      	adds	r3, #1
 800eb28:	607b      	str	r3, [r7, #4]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2b37      	cmp	r3, #55	; 0x37
 800eb2e:	d9ef      	bls.n	800eb10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eb30:	480d      	ldr	r0, [pc, #52]	; (800eb68 <prvInitialiseTaskLists+0x64>)
 800eb32:	f7fe fb93 	bl	800d25c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eb36:	480d      	ldr	r0, [pc, #52]	; (800eb6c <prvInitialiseTaskLists+0x68>)
 800eb38:	f7fe fb90 	bl	800d25c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eb3c:	480c      	ldr	r0, [pc, #48]	; (800eb70 <prvInitialiseTaskLists+0x6c>)
 800eb3e:	f7fe fb8d 	bl	800d25c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eb42:	480c      	ldr	r0, [pc, #48]	; (800eb74 <prvInitialiseTaskLists+0x70>)
 800eb44:	f7fe fb8a 	bl	800d25c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eb48:	480b      	ldr	r0, [pc, #44]	; (800eb78 <prvInitialiseTaskLists+0x74>)
 800eb4a:	f7fe fb87 	bl	800d25c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eb4e:	4b0b      	ldr	r3, [pc, #44]	; (800eb7c <prvInitialiseTaskLists+0x78>)
 800eb50:	4a05      	ldr	r2, [pc, #20]	; (800eb68 <prvInitialiseTaskLists+0x64>)
 800eb52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eb54:	4b0a      	ldr	r3, [pc, #40]	; (800eb80 <prvInitialiseTaskLists+0x7c>)
 800eb56:	4a05      	ldr	r2, [pc, #20]	; (800eb6c <prvInitialiseTaskLists+0x68>)
 800eb58:	601a      	str	r2, [r3, #0]
}
 800eb5a:	bf00      	nop
 800eb5c:	3708      	adds	r7, #8
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}
 800eb62:	bf00      	nop
 800eb64:	20000d0c 	.word	0x20000d0c
 800eb68:	2000116c 	.word	0x2000116c
 800eb6c:	20001180 	.word	0x20001180
 800eb70:	2000119c 	.word	0x2000119c
 800eb74:	200011b0 	.word	0x200011b0
 800eb78:	200011c8 	.word	0x200011c8
 800eb7c:	20001194 	.word	0x20001194
 800eb80:	20001198 	.word	0x20001198

0800eb84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eb8a:	e019      	b.n	800ebc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eb8c:	f000 feee 	bl	800f96c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb90:	4b0f      	ldr	r3, [pc, #60]	; (800ebd0 <prvCheckTasksWaitingTermination+0x4c>)
 800eb92:	68db      	ldr	r3, [r3, #12]
 800eb94:	68db      	ldr	r3, [r3, #12]
 800eb96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	3304      	adds	r3, #4
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f7fe fbe7 	bl	800d370 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eba2:	4b0c      	ldr	r3, [pc, #48]	; (800ebd4 <prvCheckTasksWaitingTermination+0x50>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	3b01      	subs	r3, #1
 800eba8:	4a0a      	ldr	r2, [pc, #40]	; (800ebd4 <prvCheckTasksWaitingTermination+0x50>)
 800ebaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ebac:	4b0a      	ldr	r3, [pc, #40]	; (800ebd8 <prvCheckTasksWaitingTermination+0x54>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	3b01      	subs	r3, #1
 800ebb2:	4a09      	ldr	r2, [pc, #36]	; (800ebd8 <prvCheckTasksWaitingTermination+0x54>)
 800ebb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ebb6:	f000 ff07 	bl	800f9c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f000 f80e 	bl	800ebdc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ebc0:	4b05      	ldr	r3, [pc, #20]	; (800ebd8 <prvCheckTasksWaitingTermination+0x54>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d1e1      	bne.n	800eb8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ebc8:	bf00      	nop
 800ebca:	3708      	adds	r7, #8
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}
 800ebd0:	200011b0 	.word	0x200011b0
 800ebd4:	200011dc 	.word	0x200011dc
 800ebd8:	200011c4 	.word	0x200011c4

0800ebdc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b084      	sub	sp, #16
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d108      	bne.n	800ec00 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f001 f896 	bl	800fd24 <vPortFree>
				vPortFree( pxTCB );
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f001 f893 	bl	800fd24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ebfe:	e017      	b.n	800ec30 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ec06:	2b01      	cmp	r3, #1
 800ec08:	d103      	bne.n	800ec12 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ec0a:	6878      	ldr	r0, [r7, #4]
 800ec0c:	f001 f88a 	bl	800fd24 <vPortFree>
	}
 800ec10:	e00e      	b.n	800ec30 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ec18:	2b02      	cmp	r3, #2
 800ec1a:	d009      	beq.n	800ec30 <prvDeleteTCB+0x54>
 800ec1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec20:	f383 8811 	msr	BASEPRI, r3
 800ec24:	f3bf 8f6f 	isb	sy
 800ec28:	f3bf 8f4f 	dsb	sy
 800ec2c:	60fb      	str	r3, [r7, #12]
 800ec2e:	e7fe      	b.n	800ec2e <prvDeleteTCB+0x52>
	}
 800ec30:	bf00      	nop
 800ec32:	3710      	adds	r7, #16
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b083      	sub	sp, #12
 800ec3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec3e:	4b0c      	ldr	r3, [pc, #48]	; (800ec70 <prvResetNextTaskUnblockTime+0x38>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d104      	bne.n	800ec52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ec48:	4b0a      	ldr	r3, [pc, #40]	; (800ec74 <prvResetNextTaskUnblockTime+0x3c>)
 800ec4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ec4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ec50:	e008      	b.n	800ec64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec52:	4b07      	ldr	r3, [pc, #28]	; (800ec70 <prvResetNextTaskUnblockTime+0x38>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	68db      	ldr	r3, [r3, #12]
 800ec58:	68db      	ldr	r3, [r3, #12]
 800ec5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	685b      	ldr	r3, [r3, #4]
 800ec60:	4a04      	ldr	r2, [pc, #16]	; (800ec74 <prvResetNextTaskUnblockTime+0x3c>)
 800ec62:	6013      	str	r3, [r2, #0]
}
 800ec64:	bf00      	nop
 800ec66:	370c      	adds	r7, #12
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6e:	4770      	bx	lr
 800ec70:	20001194 	.word	0x20001194
 800ec74:	200011fc 	.word	0x200011fc

0800ec78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ec78:	b480      	push	{r7}
 800ec7a:	b083      	sub	sp, #12
 800ec7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ec7e:	4b0b      	ldr	r3, [pc, #44]	; (800ecac <xTaskGetSchedulerState+0x34>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d102      	bne.n	800ec8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ec86:	2301      	movs	r3, #1
 800ec88:	607b      	str	r3, [r7, #4]
 800ec8a:	e008      	b.n	800ec9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ec8c:	4b08      	ldr	r3, [pc, #32]	; (800ecb0 <xTaskGetSchedulerState+0x38>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d102      	bne.n	800ec9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ec94:	2302      	movs	r3, #2
 800ec96:	607b      	str	r3, [r7, #4]
 800ec98:	e001      	b.n	800ec9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ec9e:	687b      	ldr	r3, [r7, #4]
	}
 800eca0:	4618      	mov	r0, r3
 800eca2:	370c      	adds	r7, #12
 800eca4:	46bd      	mov	sp, r7
 800eca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecaa:	4770      	bx	lr
 800ecac:	200011e8 	.word	0x200011e8
 800ecb0:	20001204 	.word	0x20001204

0800ecb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b086      	sub	sp, #24
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d054      	beq.n	800ed74 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ecca:	4b2d      	ldr	r3, [pc, #180]	; (800ed80 <xTaskPriorityDisinherit+0xcc>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	693a      	ldr	r2, [r7, #16]
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	d009      	beq.n	800ece8 <xTaskPriorityDisinherit+0x34>
 800ecd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd8:	f383 8811 	msr	BASEPRI, r3
 800ecdc:	f3bf 8f6f 	isb	sy
 800ece0:	f3bf 8f4f 	dsb	sy
 800ece4:	60fb      	str	r3, [r7, #12]
 800ece6:	e7fe      	b.n	800ece6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800ece8:	693b      	ldr	r3, [r7, #16]
 800ecea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d109      	bne.n	800ed04 <xTaskPriorityDisinherit+0x50>
 800ecf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf4:	f383 8811 	msr	BASEPRI, r3
 800ecf8:	f3bf 8f6f 	isb	sy
 800ecfc:	f3bf 8f4f 	dsb	sy
 800ed00:	60bb      	str	r3, [r7, #8]
 800ed02:	e7fe      	b.n	800ed02 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800ed04:	693b      	ldr	r3, [r7, #16]
 800ed06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed08:	1e5a      	subs	r2, r3, #1
 800ed0a:	693b      	ldr	r3, [r7, #16]
 800ed0c:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ed0e:	693b      	ldr	r3, [r7, #16]
 800ed10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed12:	693b      	ldr	r3, [r7, #16]
 800ed14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed16:	429a      	cmp	r2, r3
 800ed18:	d02c      	beq.n	800ed74 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d128      	bne.n	800ed74 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed22:	693b      	ldr	r3, [r7, #16]
 800ed24:	3304      	adds	r3, #4
 800ed26:	4618      	mov	r0, r3
 800ed28:	f7fe fb22 	bl	800d370 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed38:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ed3c:	693b      	ldr	r3, [r7, #16]
 800ed3e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ed40:	693b      	ldr	r3, [r7, #16]
 800ed42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed44:	4b0f      	ldr	r3, [pc, #60]	; (800ed84 <xTaskPriorityDisinherit+0xd0>)
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	d903      	bls.n	800ed54 <xTaskPriorityDisinherit+0xa0>
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed50:	4a0c      	ldr	r2, [pc, #48]	; (800ed84 <xTaskPriorityDisinherit+0xd0>)
 800ed52:	6013      	str	r3, [r2, #0]
 800ed54:	693b      	ldr	r3, [r7, #16]
 800ed56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed58:	4613      	mov	r3, r2
 800ed5a:	009b      	lsls	r3, r3, #2
 800ed5c:	4413      	add	r3, r2
 800ed5e:	009b      	lsls	r3, r3, #2
 800ed60:	4a09      	ldr	r2, [pc, #36]	; (800ed88 <xTaskPriorityDisinherit+0xd4>)
 800ed62:	441a      	add	r2, r3
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	3304      	adds	r3, #4
 800ed68:	4619      	mov	r1, r3
 800ed6a:	4610      	mov	r0, r2
 800ed6c:	f7fe faa3 	bl	800d2b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ed70:	2301      	movs	r3, #1
 800ed72:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ed74:	697b      	ldr	r3, [r7, #20]
	}
 800ed76:	4618      	mov	r0, r3
 800ed78:	3718      	adds	r7, #24
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	bd80      	pop	{r7, pc}
 800ed7e:	bf00      	nop
 800ed80:	20000d08 	.word	0x20000d08
 800ed84:	200011e4 	.word	0x200011e4
 800ed88:	20000d0c 	.word	0x20000d0c

0800ed8c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b086      	sub	sp, #24
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	60f8      	str	r0, [r7, #12]
 800ed94:	60b9      	str	r1, [r7, #8]
 800ed96:	607a      	str	r2, [r7, #4]
 800ed98:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800ed9a:	f000 fde7 	bl	800f96c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ed9e:	4b26      	ldr	r3, [pc, #152]	; (800ee38 <xTaskNotifyWait+0xac>)
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800eda6:	b2db      	uxtb	r3, r3
 800eda8:	2b02      	cmp	r3, #2
 800edaa:	d01a      	beq.n	800ede2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800edac:	4b22      	ldr	r3, [pc, #136]	; (800ee38 <xTaskNotifyWait+0xac>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800edb2:	68fa      	ldr	r2, [r7, #12]
 800edb4:	43d2      	mvns	r2, r2
 800edb6:	400a      	ands	r2, r1
 800edb8:	65da      	str	r2, [r3, #92]	; 0x5c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800edba:	4b1f      	ldr	r3, [pc, #124]	; (800ee38 <xTaskNotifyWait+0xac>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	2201      	movs	r2, #1
 800edc0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

				if( xTicksToWait > ( TickType_t ) 0 )
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d00b      	beq.n	800ede2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800edca:	2101      	movs	r1, #1
 800edcc:	6838      	ldr	r0, [r7, #0]
 800edce:	f000 f90f 	bl	800eff0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800edd2:	4b1a      	ldr	r3, [pc, #104]	; (800ee3c <xTaskNotifyWait+0xb0>)
 800edd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edd8:	601a      	str	r2, [r3, #0]
 800edda:	f3bf 8f4f 	dsb	sy
 800edde:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ede2:	f000 fdf1 	bl	800f9c8 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ede6:	f000 fdc1 	bl	800f96c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d004      	beq.n	800edfa <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800edf0:	4b11      	ldr	r3, [pc, #68]	; (800ee38 <xTaskNotifyWait+0xac>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800edfa:	4b0f      	ldr	r3, [pc, #60]	; (800ee38 <xTaskNotifyWait+0xac>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ee02:	b2db      	uxtb	r3, r3
 800ee04:	2b02      	cmp	r3, #2
 800ee06:	d002      	beq.n	800ee0e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800ee08:	2300      	movs	r3, #0
 800ee0a:	617b      	str	r3, [r7, #20]
 800ee0c:	e008      	b.n	800ee20 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800ee0e:	4b0a      	ldr	r3, [pc, #40]	; (800ee38 <xTaskNotifyWait+0xac>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ee14:	68ba      	ldr	r2, [r7, #8]
 800ee16:	43d2      	mvns	r2, r2
 800ee18:	400a      	ands	r2, r1
 800ee1a:	65da      	str	r2, [r3, #92]	; 0x5c
				xReturn = pdTRUE;
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ee20:	4b05      	ldr	r3, [pc, #20]	; (800ee38 <xTaskNotifyWait+0xac>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	2200      	movs	r2, #0
 800ee26:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		}
		taskEXIT_CRITICAL();
 800ee2a:	f000 fdcd 	bl	800f9c8 <vPortExitCritical>

		return xReturn;
 800ee2e:	697b      	ldr	r3, [r7, #20]
	}
 800ee30:	4618      	mov	r0, r3
 800ee32:	3718      	adds	r7, #24
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}
 800ee38:	20000d08 	.word	0x20000d08
 800ee3c:	e000ed04 	.word	0xe000ed04

0800ee40 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b08e      	sub	sp, #56	; 0x38
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	60f8      	str	r0, [r7, #12]
 800ee48:	60b9      	str	r1, [r7, #8]
 800ee4a:	603b      	str	r3, [r7, #0]
 800ee4c:	4613      	mov	r3, r2
 800ee4e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800ee50:	2301      	movs	r3, #1
 800ee52:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d109      	bne.n	800ee6e <xTaskGenericNotifyFromISR+0x2e>
 800ee5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee5e:	f383 8811 	msr	BASEPRI, r3
 800ee62:	f3bf 8f6f 	isb	sy
 800ee66:	f3bf 8f4f 	dsb	sy
 800ee6a:	627b      	str	r3, [r7, #36]	; 0x24
 800ee6c:	e7fe      	b.n	800ee6c <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ee6e:	f000 fe59 	bl	800fb24 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800ee76:	f3ef 8211 	mrs	r2, BASEPRI
 800ee7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee7e:	f383 8811 	msr	BASEPRI, r3
 800ee82:	f3bf 8f6f 	isb	sy
 800ee86:	f3bf 8f4f 	dsb	sy
 800ee8a:	623a      	str	r2, [r7, #32]
 800ee8c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800ee8e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ee90:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d003      	beq.n	800eea0 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ee98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800eea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800eea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800eeaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeac:	2202      	movs	r2, #2
 800eeae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

			switch( eAction )
 800eeb2:	79fb      	ldrb	r3, [r7, #7]
 800eeb4:	2b04      	cmp	r3, #4
 800eeb6:	d829      	bhi.n	800ef0c <xTaskGenericNotifyFromISR+0xcc>
 800eeb8:	a201      	add	r2, pc, #4	; (adr r2, 800eec0 <xTaskGenericNotifyFromISR+0x80>)
 800eeba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eebe:	bf00      	nop
 800eec0:	0800ef2b 	.word	0x0800ef2b
 800eec4:	0800eed5 	.word	0x0800eed5
 800eec8:	0800eee3 	.word	0x0800eee3
 800eecc:	0800eeef 	.word	0x0800eeef
 800eed0:	0800eef7 	.word	0x0800eef7
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800eed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	431a      	orrs	r2, r3
 800eedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eede:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 800eee0:	e026      	b.n	800ef30 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800eee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eee6:	1c5a      	adds	r2, r3, #1
 800eee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeea:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 800eeec:	e020      	b.n	800ef30 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800eeee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef0:	68ba      	ldr	r2, [r7, #8]
 800eef2:	65da      	str	r2, [r3, #92]	; 0x5c
					break;
 800eef4:	e01c      	b.n	800ef30 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800eef6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800eefa:	2b02      	cmp	r3, #2
 800eefc:	d003      	beq.n	800ef06 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800eefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef00:	68ba      	ldr	r2, [r7, #8]
 800ef02:	65da      	str	r2, [r3, #92]	; 0x5c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ef04:	e014      	b.n	800ef30 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 800ef06:	2300      	movs	r3, #0
 800ef08:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800ef0a:	e011      	b.n	800ef30 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ef0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ef10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef14:	d00b      	beq.n	800ef2e <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 800ef16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef1a:	f383 8811 	msr	BASEPRI, r3
 800ef1e:	f3bf 8f6f 	isb	sy
 800ef22:	f3bf 8f4f 	dsb	sy
 800ef26:	61bb      	str	r3, [r7, #24]
 800ef28:	e7fe      	b.n	800ef28 <xTaskGenericNotifyFromISR+0xe8>
					break;
 800ef2a:	bf00      	nop
 800ef2c:	e000      	b.n	800ef30 <xTaskGenericNotifyFromISR+0xf0>
					break;
 800ef2e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ef30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ef34:	2b01      	cmp	r3, #1
 800ef36:	d145      	bne.n	800efc4 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ef38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d009      	beq.n	800ef54 <xTaskGenericNotifyFromISR+0x114>
 800ef40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef44:	f383 8811 	msr	BASEPRI, r3
 800ef48:	f3bf 8f6f 	isb	sy
 800ef4c:	f3bf 8f4f 	dsb	sy
 800ef50:	617b      	str	r3, [r7, #20]
 800ef52:	e7fe      	b.n	800ef52 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef54:	4b20      	ldr	r3, [pc, #128]	; (800efd8 <xTaskGenericNotifyFromISR+0x198>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d11d      	bne.n	800ef98 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef5e:	3304      	adds	r3, #4
 800ef60:	4618      	mov	r0, r3
 800ef62:	f7fe fa05 	bl	800d370 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ef66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef6a:	4b1c      	ldr	r3, [pc, #112]	; (800efdc <xTaskGenericNotifyFromISR+0x19c>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d903      	bls.n	800ef7a <xTaskGenericNotifyFromISR+0x13a>
 800ef72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef76:	4a19      	ldr	r2, [pc, #100]	; (800efdc <xTaskGenericNotifyFromISR+0x19c>)
 800ef78:	6013      	str	r3, [r2, #0]
 800ef7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef7e:	4613      	mov	r3, r2
 800ef80:	009b      	lsls	r3, r3, #2
 800ef82:	4413      	add	r3, r2
 800ef84:	009b      	lsls	r3, r3, #2
 800ef86:	4a16      	ldr	r2, [pc, #88]	; (800efe0 <xTaskGenericNotifyFromISR+0x1a0>)
 800ef88:	441a      	add	r2, r3
 800ef8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef8c:	3304      	adds	r3, #4
 800ef8e:	4619      	mov	r1, r3
 800ef90:	4610      	mov	r0, r2
 800ef92:	f7fe f990 	bl	800d2b6 <vListInsertEnd>
 800ef96:	e005      	b.n	800efa4 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800ef98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef9a:	3318      	adds	r3, #24
 800ef9c:	4619      	mov	r1, r3
 800ef9e:	4811      	ldr	r0, [pc, #68]	; (800efe4 <xTaskGenericNotifyFromISR+0x1a4>)
 800efa0:	f7fe f989 	bl	800d2b6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800efa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efa8:	4b0f      	ldr	r3, [pc, #60]	; (800efe8 <xTaskGenericNotifyFromISR+0x1a8>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efae:	429a      	cmp	r2, r3
 800efb0:	d908      	bls.n	800efc4 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800efb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d002      	beq.n	800efbe <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800efb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efba:	2201      	movs	r2, #1
 800efbc:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800efbe:	4b0b      	ldr	r3, [pc, #44]	; (800efec <xTaskGenericNotifyFromISR+0x1ac>)
 800efc0:	2201      	movs	r2, #1
 800efc2:	601a      	str	r2, [r3, #0]
 800efc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc6:	613b      	str	r3, [r7, #16]
	__asm volatile
 800efc8:	693b      	ldr	r3, [r7, #16]
 800efca:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800efce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800efd0:	4618      	mov	r0, r3
 800efd2:	3738      	adds	r7, #56	; 0x38
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}
 800efd8:	20001204 	.word	0x20001204
 800efdc:	200011e4 	.word	0x200011e4
 800efe0:	20000d0c 	.word	0x20000d0c
 800efe4:	2000119c 	.word	0x2000119c
 800efe8:	20000d08 	.word	0x20000d08
 800efec:	200011f0 	.word	0x200011f0

0800eff0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b084      	sub	sp, #16
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
 800eff8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800effa:	4b21      	ldr	r3, [pc, #132]	; (800f080 <prvAddCurrentTaskToDelayedList+0x90>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f000:	4b20      	ldr	r3, [pc, #128]	; (800f084 <prvAddCurrentTaskToDelayedList+0x94>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	3304      	adds	r3, #4
 800f006:	4618      	mov	r0, r3
 800f008:	f7fe f9b2 	bl	800d370 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f012:	d10a      	bne.n	800f02a <prvAddCurrentTaskToDelayedList+0x3a>
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d007      	beq.n	800f02a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f01a:	4b1a      	ldr	r3, [pc, #104]	; (800f084 <prvAddCurrentTaskToDelayedList+0x94>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	3304      	adds	r3, #4
 800f020:	4619      	mov	r1, r3
 800f022:	4819      	ldr	r0, [pc, #100]	; (800f088 <prvAddCurrentTaskToDelayedList+0x98>)
 800f024:	f7fe f947 	bl	800d2b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f028:	e026      	b.n	800f078 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f02a:	68fa      	ldr	r2, [r7, #12]
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	4413      	add	r3, r2
 800f030:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f032:	4b14      	ldr	r3, [pc, #80]	; (800f084 <prvAddCurrentTaskToDelayedList+0x94>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	68ba      	ldr	r2, [r7, #8]
 800f038:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f03a:	68ba      	ldr	r2, [r7, #8]
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	429a      	cmp	r2, r3
 800f040:	d209      	bcs.n	800f056 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f042:	4b12      	ldr	r3, [pc, #72]	; (800f08c <prvAddCurrentTaskToDelayedList+0x9c>)
 800f044:	681a      	ldr	r2, [r3, #0]
 800f046:	4b0f      	ldr	r3, [pc, #60]	; (800f084 <prvAddCurrentTaskToDelayedList+0x94>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	3304      	adds	r3, #4
 800f04c:	4619      	mov	r1, r3
 800f04e:	4610      	mov	r0, r2
 800f050:	f7fe f955 	bl	800d2fe <vListInsert>
}
 800f054:	e010      	b.n	800f078 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f056:	4b0e      	ldr	r3, [pc, #56]	; (800f090 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f058:	681a      	ldr	r2, [r3, #0]
 800f05a:	4b0a      	ldr	r3, [pc, #40]	; (800f084 <prvAddCurrentTaskToDelayedList+0x94>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	3304      	adds	r3, #4
 800f060:	4619      	mov	r1, r3
 800f062:	4610      	mov	r0, r2
 800f064:	f7fe f94b 	bl	800d2fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f068:	4b0a      	ldr	r3, [pc, #40]	; (800f094 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	68ba      	ldr	r2, [r7, #8]
 800f06e:	429a      	cmp	r2, r3
 800f070:	d202      	bcs.n	800f078 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f072:	4a08      	ldr	r2, [pc, #32]	; (800f094 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	6013      	str	r3, [r2, #0]
}
 800f078:	bf00      	nop
 800f07a:	3710      	adds	r7, #16
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}
 800f080:	200011e0 	.word	0x200011e0
 800f084:	20000d08 	.word	0x20000d08
 800f088:	200011c8 	.word	0x200011c8
 800f08c:	20001198 	.word	0x20001198
 800f090:	20001194 	.word	0x20001194
 800f094:	200011fc 	.word	0x200011fc

0800f098 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b08a      	sub	sp, #40	; 0x28
 800f09c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f0a2:	f000 faff 	bl	800f6a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f0a6:	4b1c      	ldr	r3, [pc, #112]	; (800f118 <xTimerCreateTimerTask+0x80>)
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d021      	beq.n	800f0f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f0b6:	1d3a      	adds	r2, r7, #4
 800f0b8:	f107 0108 	add.w	r1, r7, #8
 800f0bc:	f107 030c 	add.w	r3, r7, #12
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f7fe f8b1 	bl	800d228 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f0c6:	6879      	ldr	r1, [r7, #4]
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	68fa      	ldr	r2, [r7, #12]
 800f0cc:	9202      	str	r2, [sp, #8]
 800f0ce:	9301      	str	r3, [sp, #4]
 800f0d0:	2302      	movs	r3, #2
 800f0d2:	9300      	str	r3, [sp, #0]
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	460a      	mov	r2, r1
 800f0d8:	4910      	ldr	r1, [pc, #64]	; (800f11c <xTimerCreateTimerTask+0x84>)
 800f0da:	4811      	ldr	r0, [pc, #68]	; (800f120 <xTimerCreateTimerTask+0x88>)
 800f0dc:	f7fe ff26 	bl	800df2c <xTaskCreateStatic>
 800f0e0:	4602      	mov	r2, r0
 800f0e2:	4b10      	ldr	r3, [pc, #64]	; (800f124 <xTimerCreateTimerTask+0x8c>)
 800f0e4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f0e6:	4b0f      	ldr	r3, [pc, #60]	; (800f124 <xTimerCreateTimerTask+0x8c>)
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d001      	beq.n	800f0f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f0f2:	697b      	ldr	r3, [r7, #20]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d109      	bne.n	800f10c <xTimerCreateTimerTask+0x74>
	__asm volatile
 800f0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0fc:	f383 8811 	msr	BASEPRI, r3
 800f100:	f3bf 8f6f 	isb	sy
 800f104:	f3bf 8f4f 	dsb	sy
 800f108:	613b      	str	r3, [r7, #16]
 800f10a:	e7fe      	b.n	800f10a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800f10c:	697b      	ldr	r3, [r7, #20]
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3718      	adds	r7, #24
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	20001240 	.word	0x20001240
 800f11c:	08019548 	.word	0x08019548
 800f120:	0800f259 	.word	0x0800f259
 800f124:	20001244 	.word	0x20001244

0800f128 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b08a      	sub	sp, #40	; 0x28
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	60f8      	str	r0, [r7, #12]
 800f130:	60b9      	str	r1, [r7, #8]
 800f132:	607a      	str	r2, [r7, #4]
 800f134:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f136:	2300      	movs	r3, #0
 800f138:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d109      	bne.n	800f154 <xTimerGenericCommand+0x2c>
 800f140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f144:	f383 8811 	msr	BASEPRI, r3
 800f148:	f3bf 8f6f 	isb	sy
 800f14c:	f3bf 8f4f 	dsb	sy
 800f150:	623b      	str	r3, [r7, #32]
 800f152:	e7fe      	b.n	800f152 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f154:	4b19      	ldr	r3, [pc, #100]	; (800f1bc <xTimerGenericCommand+0x94>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d02a      	beq.n	800f1b2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	2b05      	cmp	r3, #5
 800f16c:	dc18      	bgt.n	800f1a0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f16e:	f7ff fd83 	bl	800ec78 <xTaskGetSchedulerState>
 800f172:	4603      	mov	r3, r0
 800f174:	2b02      	cmp	r3, #2
 800f176:	d109      	bne.n	800f18c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f178:	4b10      	ldr	r3, [pc, #64]	; (800f1bc <xTimerGenericCommand+0x94>)
 800f17a:	6818      	ldr	r0, [r3, #0]
 800f17c:	f107 0110 	add.w	r1, r7, #16
 800f180:	2300      	movs	r3, #0
 800f182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f184:	f7fe fa5c 	bl	800d640 <xQueueGenericSend>
 800f188:	6278      	str	r0, [r7, #36]	; 0x24
 800f18a:	e012      	b.n	800f1b2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f18c:	4b0b      	ldr	r3, [pc, #44]	; (800f1bc <xTimerGenericCommand+0x94>)
 800f18e:	6818      	ldr	r0, [r3, #0]
 800f190:	f107 0110 	add.w	r1, r7, #16
 800f194:	2300      	movs	r3, #0
 800f196:	2200      	movs	r2, #0
 800f198:	f7fe fa52 	bl	800d640 <xQueueGenericSend>
 800f19c:	6278      	str	r0, [r7, #36]	; 0x24
 800f19e:	e008      	b.n	800f1b2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f1a0:	4b06      	ldr	r3, [pc, #24]	; (800f1bc <xTimerGenericCommand+0x94>)
 800f1a2:	6818      	ldr	r0, [r3, #0]
 800f1a4:	f107 0110 	add.w	r1, r7, #16
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	683a      	ldr	r2, [r7, #0]
 800f1ac:	f7fe fb42 	bl	800d834 <xQueueGenericSendFromISR>
 800f1b0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	3728      	adds	r7, #40	; 0x28
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bd80      	pop	{r7, pc}
 800f1bc:	20001240 	.word	0x20001240

0800f1c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b088      	sub	sp, #32
 800f1c4:	af02      	add	r7, sp, #8
 800f1c6:	6078      	str	r0, [r7, #4]
 800f1c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1ca:	4b22      	ldr	r3, [pc, #136]	; (800f254 <prvProcessExpiredTimer+0x94>)
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	68db      	ldr	r3, [r3, #12]
 800f1d0:	68db      	ldr	r3, [r3, #12]
 800f1d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f1d4:	697b      	ldr	r3, [r7, #20]
 800f1d6:	3304      	adds	r3, #4
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f7fe f8c9 	bl	800d370 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f1de:	697b      	ldr	r3, [r7, #20]
 800f1e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f1e4:	f003 0304 	and.w	r3, r3, #4
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d021      	beq.n	800f230 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f1ec:	697b      	ldr	r3, [r7, #20]
 800f1ee:	699a      	ldr	r2, [r3, #24]
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	18d1      	adds	r1, r2, r3
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	683a      	ldr	r2, [r7, #0]
 800f1f8:	6978      	ldr	r0, [r7, #20]
 800f1fa:	f000 f8d1 	bl	800f3a0 <prvInsertTimerInActiveList>
 800f1fe:	4603      	mov	r3, r0
 800f200:	2b00      	cmp	r3, #0
 800f202:	d01e      	beq.n	800f242 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f204:	2300      	movs	r3, #0
 800f206:	9300      	str	r3, [sp, #0]
 800f208:	2300      	movs	r3, #0
 800f20a:	687a      	ldr	r2, [r7, #4]
 800f20c:	2100      	movs	r1, #0
 800f20e:	6978      	ldr	r0, [r7, #20]
 800f210:	f7ff ff8a 	bl	800f128 <xTimerGenericCommand>
 800f214:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f216:	693b      	ldr	r3, [r7, #16]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d112      	bne.n	800f242 <prvProcessExpiredTimer+0x82>
 800f21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f220:	f383 8811 	msr	BASEPRI, r3
 800f224:	f3bf 8f6f 	isb	sy
 800f228:	f3bf 8f4f 	dsb	sy
 800f22c:	60fb      	str	r3, [r7, #12]
 800f22e:	e7fe      	b.n	800f22e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f236:	f023 0301 	bic.w	r3, r3, #1
 800f23a:	b2da      	uxtb	r2, r3
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	6a1b      	ldr	r3, [r3, #32]
 800f246:	6978      	ldr	r0, [r7, #20]
 800f248:	4798      	blx	r3
}
 800f24a:	bf00      	nop
 800f24c:	3718      	adds	r7, #24
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}
 800f252:	bf00      	nop
 800f254:	20001238 	.word	0x20001238

0800f258 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b084      	sub	sp, #16
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f260:	f107 0308 	add.w	r3, r7, #8
 800f264:	4618      	mov	r0, r3
 800f266:	f000 f857 	bl	800f318 <prvGetNextExpireTime>
 800f26a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	4619      	mov	r1, r3
 800f270:	68f8      	ldr	r0, [r7, #12]
 800f272:	f000 f803 	bl	800f27c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f276:	f000 f8d5 	bl	800f424 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f27a:	e7f1      	b.n	800f260 <prvTimerTask+0x8>

0800f27c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b084      	sub	sp, #16
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f286:	f7ff f909 	bl	800e49c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f28a:	f107 0308 	add.w	r3, r7, #8
 800f28e:	4618      	mov	r0, r3
 800f290:	f000 f866 	bl	800f360 <prvSampleTimeNow>
 800f294:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d130      	bne.n	800f2fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d10a      	bne.n	800f2b8 <prvProcessTimerOrBlockTask+0x3c>
 800f2a2:	687a      	ldr	r2, [r7, #4]
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d806      	bhi.n	800f2b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f2aa:	f7ff f905 	bl	800e4b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f2ae:	68f9      	ldr	r1, [r7, #12]
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f7ff ff85 	bl	800f1c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f2b6:	e024      	b.n	800f302 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d008      	beq.n	800f2d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f2be:	4b13      	ldr	r3, [pc, #76]	; (800f30c <prvProcessTimerOrBlockTask+0x90>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d101      	bne.n	800f2cc <prvProcessTimerOrBlockTask+0x50>
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	e000      	b.n	800f2ce <prvProcessTimerOrBlockTask+0x52>
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f2d0:	4b0f      	ldr	r3, [pc, #60]	; (800f310 <prvProcessTimerOrBlockTask+0x94>)
 800f2d2:	6818      	ldr	r0, [r3, #0]
 800f2d4:	687a      	ldr	r2, [r7, #4]
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	1ad3      	subs	r3, r2, r3
 800f2da:	683a      	ldr	r2, [r7, #0]
 800f2dc:	4619      	mov	r1, r3
 800f2de:	f7fe fdf1 	bl	800dec4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f2e2:	f7ff f8e9 	bl	800e4b8 <xTaskResumeAll>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d10a      	bne.n	800f302 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f2ec:	4b09      	ldr	r3, [pc, #36]	; (800f314 <prvProcessTimerOrBlockTask+0x98>)
 800f2ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2f2:	601a      	str	r2, [r3, #0]
 800f2f4:	f3bf 8f4f 	dsb	sy
 800f2f8:	f3bf 8f6f 	isb	sy
}
 800f2fc:	e001      	b.n	800f302 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f2fe:	f7ff f8db 	bl	800e4b8 <xTaskResumeAll>
}
 800f302:	bf00      	nop
 800f304:	3710      	adds	r7, #16
 800f306:	46bd      	mov	sp, r7
 800f308:	bd80      	pop	{r7, pc}
 800f30a:	bf00      	nop
 800f30c:	2000123c 	.word	0x2000123c
 800f310:	20001240 	.word	0x20001240
 800f314:	e000ed04 	.word	0xe000ed04

0800f318 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f318:	b480      	push	{r7}
 800f31a:	b085      	sub	sp, #20
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f320:	4b0e      	ldr	r3, [pc, #56]	; (800f35c <prvGetNextExpireTime+0x44>)
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d101      	bne.n	800f32e <prvGetNextExpireTime+0x16>
 800f32a:	2201      	movs	r2, #1
 800f32c:	e000      	b.n	800f330 <prvGetNextExpireTime+0x18>
 800f32e:	2200      	movs	r2, #0
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d105      	bne.n	800f348 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f33c:	4b07      	ldr	r3, [pc, #28]	; (800f35c <prvGetNextExpireTime+0x44>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	68db      	ldr	r3, [r3, #12]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	60fb      	str	r3, [r7, #12]
 800f346:	e001      	b.n	800f34c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f348:	2300      	movs	r3, #0
 800f34a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f34c:	68fb      	ldr	r3, [r7, #12]
}
 800f34e:	4618      	mov	r0, r3
 800f350:	3714      	adds	r7, #20
 800f352:	46bd      	mov	sp, r7
 800f354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f358:	4770      	bx	lr
 800f35a:	bf00      	nop
 800f35c:	20001238 	.word	0x20001238

0800f360 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b084      	sub	sp, #16
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f368:	f7ff f942 	bl	800e5f0 <xTaskGetTickCount>
 800f36c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f36e:	4b0b      	ldr	r3, [pc, #44]	; (800f39c <prvSampleTimeNow+0x3c>)
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	68fa      	ldr	r2, [r7, #12]
 800f374:	429a      	cmp	r2, r3
 800f376:	d205      	bcs.n	800f384 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f378:	f000 f930 	bl	800f5dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2201      	movs	r2, #1
 800f380:	601a      	str	r2, [r3, #0]
 800f382:	e002      	b.n	800f38a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2200      	movs	r2, #0
 800f388:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f38a:	4a04      	ldr	r2, [pc, #16]	; (800f39c <prvSampleTimeNow+0x3c>)
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f390:	68fb      	ldr	r3, [r7, #12]
}
 800f392:	4618      	mov	r0, r3
 800f394:	3710      	adds	r7, #16
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}
 800f39a:	bf00      	nop
 800f39c:	20001248 	.word	0x20001248

0800f3a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b086      	sub	sp, #24
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	60f8      	str	r0, [r7, #12]
 800f3a8:	60b9      	str	r1, [r7, #8]
 800f3aa:	607a      	str	r2, [r7, #4]
 800f3ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	68ba      	ldr	r2, [r7, #8]
 800f3b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	68fa      	ldr	r2, [r7, #12]
 800f3bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f3be:	68ba      	ldr	r2, [r7, #8]
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d812      	bhi.n	800f3ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3c6:	687a      	ldr	r2, [r7, #4]
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	1ad2      	subs	r2, r2, r3
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	699b      	ldr	r3, [r3, #24]
 800f3d0:	429a      	cmp	r2, r3
 800f3d2:	d302      	bcc.n	800f3da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	617b      	str	r3, [r7, #20]
 800f3d8:	e01b      	b.n	800f412 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f3da:	4b10      	ldr	r3, [pc, #64]	; (800f41c <prvInsertTimerInActiveList+0x7c>)
 800f3dc:	681a      	ldr	r2, [r3, #0]
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	3304      	adds	r3, #4
 800f3e2:	4619      	mov	r1, r3
 800f3e4:	4610      	mov	r0, r2
 800f3e6:	f7fd ff8a 	bl	800d2fe <vListInsert>
 800f3ea:	e012      	b.n	800f412 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f3ec:	687a      	ldr	r2, [r7, #4]
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d206      	bcs.n	800f402 <prvInsertTimerInActiveList+0x62>
 800f3f4:	68ba      	ldr	r2, [r7, #8]
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	429a      	cmp	r2, r3
 800f3fa:	d302      	bcc.n	800f402 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	617b      	str	r3, [r7, #20]
 800f400:	e007      	b.n	800f412 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f402:	4b07      	ldr	r3, [pc, #28]	; (800f420 <prvInsertTimerInActiveList+0x80>)
 800f404:	681a      	ldr	r2, [r3, #0]
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	3304      	adds	r3, #4
 800f40a:	4619      	mov	r1, r3
 800f40c:	4610      	mov	r0, r2
 800f40e:	f7fd ff76 	bl	800d2fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f412:	697b      	ldr	r3, [r7, #20]
}
 800f414:	4618      	mov	r0, r3
 800f416:	3718      	adds	r7, #24
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}
 800f41c:	2000123c 	.word	0x2000123c
 800f420:	20001238 	.word	0x20001238

0800f424 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b08e      	sub	sp, #56	; 0x38
 800f428:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f42a:	e0c6      	b.n	800f5ba <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	da17      	bge.n	800f462 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f432:	1d3b      	adds	r3, r7, #4
 800f434:	3304      	adds	r3, #4
 800f436:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d109      	bne.n	800f452 <prvProcessReceivedCommands+0x2e>
 800f43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f442:	f383 8811 	msr	BASEPRI, r3
 800f446:	f3bf 8f6f 	isb	sy
 800f44a:	f3bf 8f4f 	dsb	sy
 800f44e:	61fb      	str	r3, [r7, #28]
 800f450:	e7fe      	b.n	800f450 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f458:	6850      	ldr	r0, [r2, #4]
 800f45a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f45c:	6892      	ldr	r2, [r2, #8]
 800f45e:	4611      	mov	r1, r2
 800f460:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2b00      	cmp	r3, #0
 800f466:	f2c0 80a7 	blt.w	800f5b8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f470:	695b      	ldr	r3, [r3, #20]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d004      	beq.n	800f480 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f478:	3304      	adds	r3, #4
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7fd ff78 	bl	800d370 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f480:	463b      	mov	r3, r7
 800f482:	4618      	mov	r0, r3
 800f484:	f7ff ff6c 	bl	800f360 <prvSampleTimeNow>
 800f488:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2b09      	cmp	r3, #9
 800f48e:	f200 8094 	bhi.w	800f5ba <prvProcessReceivedCommands+0x196>
 800f492:	a201      	add	r2, pc, #4	; (adr r2, 800f498 <prvProcessReceivedCommands+0x74>)
 800f494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f498:	0800f4c1 	.word	0x0800f4c1
 800f49c:	0800f4c1 	.word	0x0800f4c1
 800f4a0:	0800f4c1 	.word	0x0800f4c1
 800f4a4:	0800f533 	.word	0x0800f533
 800f4a8:	0800f547 	.word	0x0800f547
 800f4ac:	0800f58f 	.word	0x0800f58f
 800f4b0:	0800f4c1 	.word	0x0800f4c1
 800f4b4:	0800f4c1 	.word	0x0800f4c1
 800f4b8:	0800f533 	.word	0x0800f533
 800f4bc:	0800f547 	.word	0x0800f547
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4c6:	f043 0301 	orr.w	r3, r3, #1
 800f4ca:	b2da      	uxtb	r2, r3
 800f4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f4d2:	68ba      	ldr	r2, [r7, #8]
 800f4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d6:	699b      	ldr	r3, [r3, #24]
 800f4d8:	18d1      	adds	r1, r2, r3
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4e0:	f7ff ff5e 	bl	800f3a0 <prvInsertTimerInActiveList>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d067      	beq.n	800f5ba <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ec:	6a1b      	ldr	r3, [r3, #32]
 800f4ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4f8:	f003 0304 	and.w	r3, r3, #4
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d05c      	beq.n	800f5ba <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f500:	68ba      	ldr	r2, [r7, #8]
 800f502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f504:	699b      	ldr	r3, [r3, #24]
 800f506:	441a      	add	r2, r3
 800f508:	2300      	movs	r3, #0
 800f50a:	9300      	str	r3, [sp, #0]
 800f50c:	2300      	movs	r3, #0
 800f50e:	2100      	movs	r1, #0
 800f510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f512:	f7ff fe09 	bl	800f128 <xTimerGenericCommand>
 800f516:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f518:	6a3b      	ldr	r3, [r7, #32]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d14d      	bne.n	800f5ba <prvProcessReceivedCommands+0x196>
 800f51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f522:	f383 8811 	msr	BASEPRI, r3
 800f526:	f3bf 8f6f 	isb	sy
 800f52a:	f3bf 8f4f 	dsb	sy
 800f52e:	61bb      	str	r3, [r7, #24]
 800f530:	e7fe      	b.n	800f530 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f538:	f023 0301 	bic.w	r3, r3, #1
 800f53c:	b2da      	uxtb	r2, r3
 800f53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f540:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f544:	e039      	b.n	800f5ba <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f548:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f54c:	f043 0301 	orr.w	r3, r3, #1
 800f550:	b2da      	uxtb	r2, r3
 800f552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f554:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f558:	68ba      	ldr	r2, [r7, #8]
 800f55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f55c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f560:	699b      	ldr	r3, [r3, #24]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d109      	bne.n	800f57a <prvProcessReceivedCommands+0x156>
 800f566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f56a:	f383 8811 	msr	BASEPRI, r3
 800f56e:	f3bf 8f6f 	isb	sy
 800f572:	f3bf 8f4f 	dsb	sy
 800f576:	617b      	str	r3, [r7, #20]
 800f578:	e7fe      	b.n	800f578 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f57c:	699a      	ldr	r2, [r3, #24]
 800f57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f580:	18d1      	adds	r1, r2, r3
 800f582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f588:	f7ff ff0a 	bl	800f3a0 <prvInsertTimerInActiveList>
					break;
 800f58c:	e015      	b.n	800f5ba <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f590:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f594:	f003 0302 	and.w	r3, r3, #2
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d103      	bne.n	800f5a4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800f59c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f59e:	f000 fbc1 	bl	800fd24 <vPortFree>
 800f5a2:	e00a      	b.n	800f5ba <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5aa:	f023 0301 	bic.w	r3, r3, #1
 800f5ae:	b2da      	uxtb	r2, r3
 800f5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f5b6:	e000      	b.n	800f5ba <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f5b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f5ba:	4b07      	ldr	r3, [pc, #28]	; (800f5d8 <prvProcessReceivedCommands+0x1b4>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	1d39      	adds	r1, r7, #4
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f7fe f9ca 	bl	800d95c <xQueueReceive>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	f47f af2e 	bne.w	800f42c <prvProcessReceivedCommands+0x8>
	}
}
 800f5d0:	bf00      	nop
 800f5d2:	3730      	adds	r7, #48	; 0x30
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}
 800f5d8:	20001240 	.word	0x20001240

0800f5dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b088      	sub	sp, #32
 800f5e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f5e2:	e047      	b.n	800f674 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f5e4:	4b2d      	ldr	r3, [pc, #180]	; (800f69c <prvSwitchTimerLists+0xc0>)
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	68db      	ldr	r3, [r3, #12]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5ee:	4b2b      	ldr	r3, [pc, #172]	; (800f69c <prvSwitchTimerLists+0xc0>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	68db      	ldr	r3, [r3, #12]
 800f5f4:	68db      	ldr	r3, [r3, #12]
 800f5f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	3304      	adds	r3, #4
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7fd feb7 	bl	800d370 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	6a1b      	ldr	r3, [r3, #32]
 800f606:	68f8      	ldr	r0, [r7, #12]
 800f608:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f610:	f003 0304 	and.w	r3, r3, #4
 800f614:	2b00      	cmp	r3, #0
 800f616:	d02d      	beq.n	800f674 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	699b      	ldr	r3, [r3, #24]
 800f61c:	693a      	ldr	r2, [r7, #16]
 800f61e:	4413      	add	r3, r2
 800f620:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f622:	68ba      	ldr	r2, [r7, #8]
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	429a      	cmp	r2, r3
 800f628:	d90e      	bls.n	800f648 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	68ba      	ldr	r2, [r7, #8]
 800f62e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	68fa      	ldr	r2, [r7, #12]
 800f634:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f636:	4b19      	ldr	r3, [pc, #100]	; (800f69c <prvSwitchTimerLists+0xc0>)
 800f638:	681a      	ldr	r2, [r3, #0]
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	3304      	adds	r3, #4
 800f63e:	4619      	mov	r1, r3
 800f640:	4610      	mov	r0, r2
 800f642:	f7fd fe5c 	bl	800d2fe <vListInsert>
 800f646:	e015      	b.n	800f674 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f648:	2300      	movs	r3, #0
 800f64a:	9300      	str	r3, [sp, #0]
 800f64c:	2300      	movs	r3, #0
 800f64e:	693a      	ldr	r2, [r7, #16]
 800f650:	2100      	movs	r1, #0
 800f652:	68f8      	ldr	r0, [r7, #12]
 800f654:	f7ff fd68 	bl	800f128 <xTimerGenericCommand>
 800f658:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d109      	bne.n	800f674 <prvSwitchTimerLists+0x98>
 800f660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f664:	f383 8811 	msr	BASEPRI, r3
 800f668:	f3bf 8f6f 	isb	sy
 800f66c:	f3bf 8f4f 	dsb	sy
 800f670:	603b      	str	r3, [r7, #0]
 800f672:	e7fe      	b.n	800f672 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f674:	4b09      	ldr	r3, [pc, #36]	; (800f69c <prvSwitchTimerLists+0xc0>)
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d1b2      	bne.n	800f5e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f67e:	4b07      	ldr	r3, [pc, #28]	; (800f69c <prvSwitchTimerLists+0xc0>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f684:	4b06      	ldr	r3, [pc, #24]	; (800f6a0 <prvSwitchTimerLists+0xc4>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	4a04      	ldr	r2, [pc, #16]	; (800f69c <prvSwitchTimerLists+0xc0>)
 800f68a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f68c:	4a04      	ldr	r2, [pc, #16]	; (800f6a0 <prvSwitchTimerLists+0xc4>)
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	6013      	str	r3, [r2, #0]
}
 800f692:	bf00      	nop
 800f694:	3718      	adds	r7, #24
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}
 800f69a:	bf00      	nop
 800f69c:	20001238 	.word	0x20001238
 800f6a0:	2000123c 	.word	0x2000123c

0800f6a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b082      	sub	sp, #8
 800f6a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f6aa:	f000 f95f 	bl	800f96c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f6ae:	4b15      	ldr	r3, [pc, #84]	; (800f704 <prvCheckForValidListAndQueue+0x60>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d120      	bne.n	800f6f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f6b6:	4814      	ldr	r0, [pc, #80]	; (800f708 <prvCheckForValidListAndQueue+0x64>)
 800f6b8:	f7fd fdd0 	bl	800d25c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f6bc:	4813      	ldr	r0, [pc, #76]	; (800f70c <prvCheckForValidListAndQueue+0x68>)
 800f6be:	f7fd fdcd 	bl	800d25c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f6c2:	4b13      	ldr	r3, [pc, #76]	; (800f710 <prvCheckForValidListAndQueue+0x6c>)
 800f6c4:	4a10      	ldr	r2, [pc, #64]	; (800f708 <prvCheckForValidListAndQueue+0x64>)
 800f6c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f6c8:	4b12      	ldr	r3, [pc, #72]	; (800f714 <prvCheckForValidListAndQueue+0x70>)
 800f6ca:	4a10      	ldr	r2, [pc, #64]	; (800f70c <prvCheckForValidListAndQueue+0x68>)
 800f6cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	9300      	str	r3, [sp, #0]
 800f6d2:	4b11      	ldr	r3, [pc, #68]	; (800f718 <prvCheckForValidListAndQueue+0x74>)
 800f6d4:	4a11      	ldr	r2, [pc, #68]	; (800f71c <prvCheckForValidListAndQueue+0x78>)
 800f6d6:	2110      	movs	r1, #16
 800f6d8:	200a      	movs	r0, #10
 800f6da:	f7fd fedb 	bl	800d494 <xQueueGenericCreateStatic>
 800f6de:	4602      	mov	r2, r0
 800f6e0:	4b08      	ldr	r3, [pc, #32]	; (800f704 <prvCheckForValidListAndQueue+0x60>)
 800f6e2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f6e4:	4b07      	ldr	r3, [pc, #28]	; (800f704 <prvCheckForValidListAndQueue+0x60>)
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d005      	beq.n	800f6f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f6ec:	4b05      	ldr	r3, [pc, #20]	; (800f704 <prvCheckForValidListAndQueue+0x60>)
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	490b      	ldr	r1, [pc, #44]	; (800f720 <prvCheckForValidListAndQueue+0x7c>)
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	f7fe fbbe 	bl	800de74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f6f8:	f000 f966 	bl	800f9c8 <vPortExitCritical>
}
 800f6fc:	bf00      	nop
 800f6fe:	46bd      	mov	sp, r7
 800f700:	bd80      	pop	{r7, pc}
 800f702:	bf00      	nop
 800f704:	20001240 	.word	0x20001240
 800f708:	20001210 	.word	0x20001210
 800f70c:	20001224 	.word	0x20001224
 800f710:	20001238 	.word	0x20001238
 800f714:	2000123c 	.word	0x2000123c
 800f718:	200012ec 	.word	0x200012ec
 800f71c:	2000124c 	.word	0x2000124c
 800f720:	08019550 	.word	0x08019550

0800f724 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f724:	b480      	push	{r7}
 800f726:	b085      	sub	sp, #20
 800f728:	af00      	add	r7, sp, #0
 800f72a:	60f8      	str	r0, [r7, #12]
 800f72c:	60b9      	str	r1, [r7, #8]
 800f72e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	3b04      	subs	r3, #4
 800f734:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f73c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	3b04      	subs	r3, #4
 800f742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	f023 0201 	bic.w	r2, r3, #1
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	3b04      	subs	r3, #4
 800f752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f754:	4a0c      	ldr	r2, [pc, #48]	; (800f788 <pxPortInitialiseStack+0x64>)
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	3b14      	subs	r3, #20
 800f75e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f760:	687a      	ldr	r2, [r7, #4]
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	3b04      	subs	r3, #4
 800f76a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	f06f 0202 	mvn.w	r2, #2
 800f772:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	3b20      	subs	r3, #32
 800f778:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f77a:	68fb      	ldr	r3, [r7, #12]
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	3714      	adds	r7, #20
 800f780:	46bd      	mov	sp, r7
 800f782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f786:	4770      	bx	lr
 800f788:	0800f78d 	.word	0x0800f78d

0800f78c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f78c:	b480      	push	{r7}
 800f78e:	b085      	sub	sp, #20
 800f790:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f792:	2300      	movs	r3, #0
 800f794:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f796:	4b11      	ldr	r3, [pc, #68]	; (800f7dc <prvTaskExitError+0x50>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f79e:	d009      	beq.n	800f7b4 <prvTaskExitError+0x28>
 800f7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7a4:	f383 8811 	msr	BASEPRI, r3
 800f7a8:	f3bf 8f6f 	isb	sy
 800f7ac:	f3bf 8f4f 	dsb	sy
 800f7b0:	60fb      	str	r3, [r7, #12]
 800f7b2:	e7fe      	b.n	800f7b2 <prvTaskExitError+0x26>
 800f7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b8:	f383 8811 	msr	BASEPRI, r3
 800f7bc:	f3bf 8f6f 	isb	sy
 800f7c0:	f3bf 8f4f 	dsb	sy
 800f7c4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f7c6:	bf00      	nop
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d0fc      	beq.n	800f7c8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f7ce:	bf00      	nop
 800f7d0:	3714      	adds	r7, #20
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d8:	4770      	bx	lr
 800f7da:	bf00      	nop
 800f7dc:	2000011c 	.word	0x2000011c

0800f7e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f7e0:	4b07      	ldr	r3, [pc, #28]	; (800f800 <pxCurrentTCBConst2>)
 800f7e2:	6819      	ldr	r1, [r3, #0]
 800f7e4:	6808      	ldr	r0, [r1, #0]
 800f7e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7ea:	f380 8809 	msr	PSP, r0
 800f7ee:	f3bf 8f6f 	isb	sy
 800f7f2:	f04f 0000 	mov.w	r0, #0
 800f7f6:	f380 8811 	msr	BASEPRI, r0
 800f7fa:	4770      	bx	lr
 800f7fc:	f3af 8000 	nop.w

0800f800 <pxCurrentTCBConst2>:
 800f800:	20000d08 	.word	0x20000d08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f804:	bf00      	nop
 800f806:	bf00      	nop

0800f808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f808:	4808      	ldr	r0, [pc, #32]	; (800f82c <prvPortStartFirstTask+0x24>)
 800f80a:	6800      	ldr	r0, [r0, #0]
 800f80c:	6800      	ldr	r0, [r0, #0]
 800f80e:	f380 8808 	msr	MSP, r0
 800f812:	f04f 0000 	mov.w	r0, #0
 800f816:	f380 8814 	msr	CONTROL, r0
 800f81a:	b662      	cpsie	i
 800f81c:	b661      	cpsie	f
 800f81e:	f3bf 8f4f 	dsb	sy
 800f822:	f3bf 8f6f 	isb	sy
 800f826:	df00      	svc	0
 800f828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f82a:	bf00      	nop
 800f82c:	e000ed08 	.word	0xe000ed08

0800f830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b086      	sub	sp, #24
 800f834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f836:	4b44      	ldr	r3, [pc, #272]	; (800f948 <xPortStartScheduler+0x118>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	4a44      	ldr	r2, [pc, #272]	; (800f94c <xPortStartScheduler+0x11c>)
 800f83c:	4293      	cmp	r3, r2
 800f83e:	d109      	bne.n	800f854 <xPortStartScheduler+0x24>
 800f840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f844:	f383 8811 	msr	BASEPRI, r3
 800f848:	f3bf 8f6f 	isb	sy
 800f84c:	f3bf 8f4f 	dsb	sy
 800f850:	613b      	str	r3, [r7, #16]
 800f852:	e7fe      	b.n	800f852 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f854:	4b3c      	ldr	r3, [pc, #240]	; (800f948 <xPortStartScheduler+0x118>)
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	4a3d      	ldr	r2, [pc, #244]	; (800f950 <xPortStartScheduler+0x120>)
 800f85a:	4293      	cmp	r3, r2
 800f85c:	d109      	bne.n	800f872 <xPortStartScheduler+0x42>
 800f85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f862:	f383 8811 	msr	BASEPRI, r3
 800f866:	f3bf 8f6f 	isb	sy
 800f86a:	f3bf 8f4f 	dsb	sy
 800f86e:	60fb      	str	r3, [r7, #12]
 800f870:	e7fe      	b.n	800f870 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f872:	4b38      	ldr	r3, [pc, #224]	; (800f954 <xPortStartScheduler+0x124>)
 800f874:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f876:	697b      	ldr	r3, [r7, #20]
 800f878:	781b      	ldrb	r3, [r3, #0]
 800f87a:	b2db      	uxtb	r3, r3
 800f87c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	22ff      	movs	r2, #255	; 0xff
 800f882:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f884:	697b      	ldr	r3, [r7, #20]
 800f886:	781b      	ldrb	r3, [r3, #0]
 800f888:	b2db      	uxtb	r3, r3
 800f88a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f88c:	78fb      	ldrb	r3, [r7, #3]
 800f88e:	b2db      	uxtb	r3, r3
 800f890:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f894:	b2da      	uxtb	r2, r3
 800f896:	4b30      	ldr	r3, [pc, #192]	; (800f958 <xPortStartScheduler+0x128>)
 800f898:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f89a:	4b30      	ldr	r3, [pc, #192]	; (800f95c <xPortStartScheduler+0x12c>)
 800f89c:	2207      	movs	r2, #7
 800f89e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f8a0:	e009      	b.n	800f8b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800f8a2:	4b2e      	ldr	r3, [pc, #184]	; (800f95c <xPortStartScheduler+0x12c>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	3b01      	subs	r3, #1
 800f8a8:	4a2c      	ldr	r2, [pc, #176]	; (800f95c <xPortStartScheduler+0x12c>)
 800f8aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f8ac:	78fb      	ldrb	r3, [r7, #3]
 800f8ae:	b2db      	uxtb	r3, r3
 800f8b0:	005b      	lsls	r3, r3, #1
 800f8b2:	b2db      	uxtb	r3, r3
 800f8b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f8b6:	78fb      	ldrb	r3, [r7, #3]
 800f8b8:	b2db      	uxtb	r3, r3
 800f8ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f8be:	2b80      	cmp	r3, #128	; 0x80
 800f8c0:	d0ef      	beq.n	800f8a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f8c2:	4b26      	ldr	r3, [pc, #152]	; (800f95c <xPortStartScheduler+0x12c>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	f1c3 0307 	rsb	r3, r3, #7
 800f8ca:	2b04      	cmp	r3, #4
 800f8cc:	d009      	beq.n	800f8e2 <xPortStartScheduler+0xb2>
 800f8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8d2:	f383 8811 	msr	BASEPRI, r3
 800f8d6:	f3bf 8f6f 	isb	sy
 800f8da:	f3bf 8f4f 	dsb	sy
 800f8de:	60bb      	str	r3, [r7, #8]
 800f8e0:	e7fe      	b.n	800f8e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f8e2:	4b1e      	ldr	r3, [pc, #120]	; (800f95c <xPortStartScheduler+0x12c>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	021b      	lsls	r3, r3, #8
 800f8e8:	4a1c      	ldr	r2, [pc, #112]	; (800f95c <xPortStartScheduler+0x12c>)
 800f8ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f8ec:	4b1b      	ldr	r3, [pc, #108]	; (800f95c <xPortStartScheduler+0x12c>)
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f8f4:	4a19      	ldr	r2, [pc, #100]	; (800f95c <xPortStartScheduler+0x12c>)
 800f8f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	b2da      	uxtb	r2, r3
 800f8fc:	697b      	ldr	r3, [r7, #20]
 800f8fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f900:	4b17      	ldr	r3, [pc, #92]	; (800f960 <xPortStartScheduler+0x130>)
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	4a16      	ldr	r2, [pc, #88]	; (800f960 <xPortStartScheduler+0x130>)
 800f906:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f90a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f90c:	4b14      	ldr	r3, [pc, #80]	; (800f960 <xPortStartScheduler+0x130>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	4a13      	ldr	r2, [pc, #76]	; (800f960 <xPortStartScheduler+0x130>)
 800f912:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f916:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f918:	f000 f8d6 	bl	800fac8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f91c:	4b11      	ldr	r3, [pc, #68]	; (800f964 <xPortStartScheduler+0x134>)
 800f91e:	2200      	movs	r2, #0
 800f920:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f922:	f000 f8f5 	bl	800fb10 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f926:	4b10      	ldr	r3, [pc, #64]	; (800f968 <xPortStartScheduler+0x138>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	4a0f      	ldr	r2, [pc, #60]	; (800f968 <xPortStartScheduler+0x138>)
 800f92c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f930:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f932:	f7ff ff69 	bl	800f808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f936:	f7fe ff23 	bl	800e780 <vTaskSwitchContext>
	prvTaskExitError();
 800f93a:	f7ff ff27 	bl	800f78c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f93e:	2300      	movs	r3, #0
}
 800f940:	4618      	mov	r0, r3
 800f942:	3718      	adds	r7, #24
 800f944:	46bd      	mov	sp, r7
 800f946:	bd80      	pop	{r7, pc}
 800f948:	e000ed00 	.word	0xe000ed00
 800f94c:	410fc271 	.word	0x410fc271
 800f950:	410fc270 	.word	0x410fc270
 800f954:	e000e400 	.word	0xe000e400
 800f958:	2000133c 	.word	0x2000133c
 800f95c:	20001340 	.word	0x20001340
 800f960:	e000ed20 	.word	0xe000ed20
 800f964:	2000011c 	.word	0x2000011c
 800f968:	e000ef34 	.word	0xe000ef34

0800f96c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f96c:	b480      	push	{r7}
 800f96e:	b083      	sub	sp, #12
 800f970:	af00      	add	r7, sp, #0
 800f972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f976:	f383 8811 	msr	BASEPRI, r3
 800f97a:	f3bf 8f6f 	isb	sy
 800f97e:	f3bf 8f4f 	dsb	sy
 800f982:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f984:	4b0e      	ldr	r3, [pc, #56]	; (800f9c0 <vPortEnterCritical+0x54>)
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	3301      	adds	r3, #1
 800f98a:	4a0d      	ldr	r2, [pc, #52]	; (800f9c0 <vPortEnterCritical+0x54>)
 800f98c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f98e:	4b0c      	ldr	r3, [pc, #48]	; (800f9c0 <vPortEnterCritical+0x54>)
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	2b01      	cmp	r3, #1
 800f994:	d10e      	bne.n	800f9b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f996:	4b0b      	ldr	r3, [pc, #44]	; (800f9c4 <vPortEnterCritical+0x58>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	b2db      	uxtb	r3, r3
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d009      	beq.n	800f9b4 <vPortEnterCritical+0x48>
 800f9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9a4:	f383 8811 	msr	BASEPRI, r3
 800f9a8:	f3bf 8f6f 	isb	sy
 800f9ac:	f3bf 8f4f 	dsb	sy
 800f9b0:	603b      	str	r3, [r7, #0]
 800f9b2:	e7fe      	b.n	800f9b2 <vPortEnterCritical+0x46>
	}
}
 800f9b4:	bf00      	nop
 800f9b6:	370c      	adds	r7, #12
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9be:	4770      	bx	lr
 800f9c0:	2000011c 	.word	0x2000011c
 800f9c4:	e000ed04 	.word	0xe000ed04

0800f9c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f9c8:	b480      	push	{r7}
 800f9ca:	b083      	sub	sp, #12
 800f9cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f9ce:	4b11      	ldr	r3, [pc, #68]	; (800fa14 <vPortExitCritical+0x4c>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d109      	bne.n	800f9ea <vPortExitCritical+0x22>
 800f9d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9da:	f383 8811 	msr	BASEPRI, r3
 800f9de:	f3bf 8f6f 	isb	sy
 800f9e2:	f3bf 8f4f 	dsb	sy
 800f9e6:	607b      	str	r3, [r7, #4]
 800f9e8:	e7fe      	b.n	800f9e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800f9ea:	4b0a      	ldr	r3, [pc, #40]	; (800fa14 <vPortExitCritical+0x4c>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	3b01      	subs	r3, #1
 800f9f0:	4a08      	ldr	r2, [pc, #32]	; (800fa14 <vPortExitCritical+0x4c>)
 800f9f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f9f4:	4b07      	ldr	r3, [pc, #28]	; (800fa14 <vPortExitCritical+0x4c>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d104      	bne.n	800fa06 <vPortExitCritical+0x3e>
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800fa06:	bf00      	nop
 800fa08:	370c      	adds	r7, #12
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa10:	4770      	bx	lr
 800fa12:	bf00      	nop
 800fa14:	2000011c 	.word	0x2000011c
	...

0800fa20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fa20:	f3ef 8009 	mrs	r0, PSP
 800fa24:	f3bf 8f6f 	isb	sy
 800fa28:	4b15      	ldr	r3, [pc, #84]	; (800fa80 <pxCurrentTCBConst>)
 800fa2a:	681a      	ldr	r2, [r3, #0]
 800fa2c:	f01e 0f10 	tst.w	lr, #16
 800fa30:	bf08      	it	eq
 800fa32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fa36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa3a:	6010      	str	r0, [r2, #0]
 800fa3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fa40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fa44:	f380 8811 	msr	BASEPRI, r0
 800fa48:	f3bf 8f4f 	dsb	sy
 800fa4c:	f3bf 8f6f 	isb	sy
 800fa50:	f7fe fe96 	bl	800e780 <vTaskSwitchContext>
 800fa54:	f04f 0000 	mov.w	r0, #0
 800fa58:	f380 8811 	msr	BASEPRI, r0
 800fa5c:	bc09      	pop	{r0, r3}
 800fa5e:	6819      	ldr	r1, [r3, #0]
 800fa60:	6808      	ldr	r0, [r1, #0]
 800fa62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa66:	f01e 0f10 	tst.w	lr, #16
 800fa6a:	bf08      	it	eq
 800fa6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fa70:	f380 8809 	msr	PSP, r0
 800fa74:	f3bf 8f6f 	isb	sy
 800fa78:	4770      	bx	lr
 800fa7a:	bf00      	nop
 800fa7c:	f3af 8000 	nop.w

0800fa80 <pxCurrentTCBConst>:
 800fa80:	20000d08 	.word	0x20000d08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fa84:	bf00      	nop
 800fa86:	bf00      	nop

0800fa88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
	__asm volatile
 800fa8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa92:	f383 8811 	msr	BASEPRI, r3
 800fa96:	f3bf 8f6f 	isb	sy
 800fa9a:	f3bf 8f4f 	dsb	sy
 800fa9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800faa0:	f7fe fdb6 	bl	800e610 <xTaskIncrementTick>
 800faa4:	4603      	mov	r3, r0
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d003      	beq.n	800fab2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800faaa:	4b06      	ldr	r3, [pc, #24]	; (800fac4 <SysTick_Handler+0x3c>)
 800faac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fab0:	601a      	str	r2, [r3, #0]
 800fab2:	2300      	movs	r3, #0
 800fab4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800fabc:	bf00      	nop
 800fabe:	3708      	adds	r7, #8
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}
 800fac4:	e000ed04 	.word	0xe000ed04

0800fac8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fac8:	b480      	push	{r7}
 800faca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800facc:	4b0b      	ldr	r3, [pc, #44]	; (800fafc <vPortSetupTimerInterrupt+0x34>)
 800face:	2200      	movs	r2, #0
 800fad0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fad2:	4b0b      	ldr	r3, [pc, #44]	; (800fb00 <vPortSetupTimerInterrupt+0x38>)
 800fad4:	2200      	movs	r2, #0
 800fad6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fad8:	4b0a      	ldr	r3, [pc, #40]	; (800fb04 <vPortSetupTimerInterrupt+0x3c>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	4a0a      	ldr	r2, [pc, #40]	; (800fb08 <vPortSetupTimerInterrupt+0x40>)
 800fade:	fba2 2303 	umull	r2, r3, r2, r3
 800fae2:	099b      	lsrs	r3, r3, #6
 800fae4:	4a09      	ldr	r2, [pc, #36]	; (800fb0c <vPortSetupTimerInterrupt+0x44>)
 800fae6:	3b01      	subs	r3, #1
 800fae8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800faea:	4b04      	ldr	r3, [pc, #16]	; (800fafc <vPortSetupTimerInterrupt+0x34>)
 800faec:	2207      	movs	r2, #7
 800faee:	601a      	str	r2, [r3, #0]
}
 800faf0:	bf00      	nop
 800faf2:	46bd      	mov	sp, r7
 800faf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf8:	4770      	bx	lr
 800fafa:	bf00      	nop
 800fafc:	e000e010 	.word	0xe000e010
 800fb00:	e000e018 	.word	0xe000e018
 800fb04:	20000000 	.word	0x20000000
 800fb08:	10624dd3 	.word	0x10624dd3
 800fb0c:	e000e014 	.word	0xe000e014

0800fb10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fb10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fb20 <vPortEnableVFP+0x10>
 800fb14:	6801      	ldr	r1, [r0, #0]
 800fb16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fb1a:	6001      	str	r1, [r0, #0]
 800fb1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fb1e:	bf00      	nop
 800fb20:	e000ed88 	.word	0xe000ed88

0800fb24 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fb24:	b480      	push	{r7}
 800fb26:	b085      	sub	sp, #20
 800fb28:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fb2a:	f3ef 8305 	mrs	r3, IPSR
 800fb2e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	2b0f      	cmp	r3, #15
 800fb34:	d913      	bls.n	800fb5e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fb36:	4a16      	ldr	r2, [pc, #88]	; (800fb90 <vPortValidateInterruptPriority+0x6c>)
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	4413      	add	r3, r2
 800fb3c:	781b      	ldrb	r3, [r3, #0]
 800fb3e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fb40:	4b14      	ldr	r3, [pc, #80]	; (800fb94 <vPortValidateInterruptPriority+0x70>)
 800fb42:	781b      	ldrb	r3, [r3, #0]
 800fb44:	7afa      	ldrb	r2, [r7, #11]
 800fb46:	429a      	cmp	r2, r3
 800fb48:	d209      	bcs.n	800fb5e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800fb4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb4e:	f383 8811 	msr	BASEPRI, r3
 800fb52:	f3bf 8f6f 	isb	sy
 800fb56:	f3bf 8f4f 	dsb	sy
 800fb5a:	607b      	str	r3, [r7, #4]
 800fb5c:	e7fe      	b.n	800fb5c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fb5e:	4b0e      	ldr	r3, [pc, #56]	; (800fb98 <vPortValidateInterruptPriority+0x74>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fb66:	4b0d      	ldr	r3, [pc, #52]	; (800fb9c <vPortValidateInterruptPriority+0x78>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	429a      	cmp	r2, r3
 800fb6c:	d909      	bls.n	800fb82 <vPortValidateInterruptPriority+0x5e>
 800fb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb72:	f383 8811 	msr	BASEPRI, r3
 800fb76:	f3bf 8f6f 	isb	sy
 800fb7a:	f3bf 8f4f 	dsb	sy
 800fb7e:	603b      	str	r3, [r7, #0]
 800fb80:	e7fe      	b.n	800fb80 <vPortValidateInterruptPriority+0x5c>
	}
 800fb82:	bf00      	nop
 800fb84:	3714      	adds	r7, #20
 800fb86:	46bd      	mov	sp, r7
 800fb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8c:	4770      	bx	lr
 800fb8e:	bf00      	nop
 800fb90:	e000e3f0 	.word	0xe000e3f0
 800fb94:	2000133c 	.word	0x2000133c
 800fb98:	e000ed0c 	.word	0xe000ed0c
 800fb9c:	20001340 	.word	0x20001340

0800fba0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b08a      	sub	sp, #40	; 0x28
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fbac:	f7fe fc76 	bl	800e49c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fbb0:	4b57      	ldr	r3, [pc, #348]	; (800fd10 <pvPortMalloc+0x170>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d101      	bne.n	800fbbc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fbb8:	f000 f90c 	bl	800fdd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fbbc:	4b55      	ldr	r3, [pc, #340]	; (800fd14 <pvPortMalloc+0x174>)
 800fbbe:	681a      	ldr	r2, [r3, #0]
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	4013      	ands	r3, r2
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	f040 808c 	bne.w	800fce2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d01c      	beq.n	800fc0a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800fbd0:	2208      	movs	r2, #8
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	4413      	add	r3, r2
 800fbd6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f003 0307 	and.w	r3, r3, #7
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d013      	beq.n	800fc0a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	f023 0307 	bic.w	r3, r3, #7
 800fbe8:	3308      	adds	r3, #8
 800fbea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f003 0307 	and.w	r3, r3, #7
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d009      	beq.n	800fc0a <pvPortMalloc+0x6a>
 800fbf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbfa:	f383 8811 	msr	BASEPRI, r3
 800fbfe:	f3bf 8f6f 	isb	sy
 800fc02:	f3bf 8f4f 	dsb	sy
 800fc06:	617b      	str	r3, [r7, #20]
 800fc08:	e7fe      	b.n	800fc08 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d068      	beq.n	800fce2 <pvPortMalloc+0x142>
 800fc10:	4b41      	ldr	r3, [pc, #260]	; (800fd18 <pvPortMalloc+0x178>)
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	687a      	ldr	r2, [r7, #4]
 800fc16:	429a      	cmp	r2, r3
 800fc18:	d863      	bhi.n	800fce2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fc1a:	4b40      	ldr	r3, [pc, #256]	; (800fd1c <pvPortMalloc+0x17c>)
 800fc1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fc1e:	4b3f      	ldr	r3, [pc, #252]	; (800fd1c <pvPortMalloc+0x17c>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fc24:	e004      	b.n	800fc30 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800fc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc32:	685b      	ldr	r3, [r3, #4]
 800fc34:	687a      	ldr	r2, [r7, #4]
 800fc36:	429a      	cmp	r2, r3
 800fc38:	d903      	bls.n	800fc42 <pvPortMalloc+0xa2>
 800fc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d1f1      	bne.n	800fc26 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fc42:	4b33      	ldr	r3, [pc, #204]	; (800fd10 <pvPortMalloc+0x170>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc48:	429a      	cmp	r2, r3
 800fc4a:	d04a      	beq.n	800fce2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fc4c:	6a3b      	ldr	r3, [r7, #32]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	2208      	movs	r2, #8
 800fc52:	4413      	add	r3, r2
 800fc54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc58:	681a      	ldr	r2, [r3, #0]
 800fc5a:	6a3b      	ldr	r3, [r7, #32]
 800fc5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc60:	685a      	ldr	r2, [r3, #4]
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	1ad2      	subs	r2, r2, r3
 800fc66:	2308      	movs	r3, #8
 800fc68:	005b      	lsls	r3, r3, #1
 800fc6a:	429a      	cmp	r2, r3
 800fc6c:	d91e      	bls.n	800fcac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fc6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	4413      	add	r3, r2
 800fc74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc76:	69bb      	ldr	r3, [r7, #24]
 800fc78:	f003 0307 	and.w	r3, r3, #7
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d009      	beq.n	800fc94 <pvPortMalloc+0xf4>
 800fc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc84:	f383 8811 	msr	BASEPRI, r3
 800fc88:	f3bf 8f6f 	isb	sy
 800fc8c:	f3bf 8f4f 	dsb	sy
 800fc90:	613b      	str	r3, [r7, #16]
 800fc92:	e7fe      	b.n	800fc92 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc96:	685a      	ldr	r2, [r3, #4]
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	1ad2      	subs	r2, r2, r3
 800fc9c:	69bb      	ldr	r3, [r7, #24]
 800fc9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca2:	687a      	ldr	r2, [r7, #4]
 800fca4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fca6:	69b8      	ldr	r0, [r7, #24]
 800fca8:	f000 f8f6 	bl	800fe98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fcac:	4b1a      	ldr	r3, [pc, #104]	; (800fd18 <pvPortMalloc+0x178>)
 800fcae:	681a      	ldr	r2, [r3, #0]
 800fcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb2:	685b      	ldr	r3, [r3, #4]
 800fcb4:	1ad3      	subs	r3, r2, r3
 800fcb6:	4a18      	ldr	r2, [pc, #96]	; (800fd18 <pvPortMalloc+0x178>)
 800fcb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fcba:	4b17      	ldr	r3, [pc, #92]	; (800fd18 <pvPortMalloc+0x178>)
 800fcbc:	681a      	ldr	r2, [r3, #0]
 800fcbe:	4b18      	ldr	r3, [pc, #96]	; (800fd20 <pvPortMalloc+0x180>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	429a      	cmp	r2, r3
 800fcc4:	d203      	bcs.n	800fcce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fcc6:	4b14      	ldr	r3, [pc, #80]	; (800fd18 <pvPortMalloc+0x178>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	4a15      	ldr	r2, [pc, #84]	; (800fd20 <pvPortMalloc+0x180>)
 800fccc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fcce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcd0:	685a      	ldr	r2, [r3, #4]
 800fcd2:	4b10      	ldr	r3, [pc, #64]	; (800fd14 <pvPortMalloc+0x174>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	431a      	orrs	r2, r3
 800fcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fcdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcde:	2200      	movs	r2, #0
 800fce0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fce2:	f7fe fbe9 	bl	800e4b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fce6:	69fb      	ldr	r3, [r7, #28]
 800fce8:	f003 0307 	and.w	r3, r3, #7
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d009      	beq.n	800fd04 <pvPortMalloc+0x164>
 800fcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcf4:	f383 8811 	msr	BASEPRI, r3
 800fcf8:	f3bf 8f6f 	isb	sy
 800fcfc:	f3bf 8f4f 	dsb	sy
 800fd00:	60fb      	str	r3, [r7, #12]
 800fd02:	e7fe      	b.n	800fd02 <pvPortMalloc+0x162>
	return pvReturn;
 800fd04:	69fb      	ldr	r3, [r7, #28]
}
 800fd06:	4618      	mov	r0, r3
 800fd08:	3728      	adds	r7, #40	; 0x28
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}
 800fd0e:	bf00      	nop
 800fd10:	20004f4c 	.word	0x20004f4c
 800fd14:	20004f58 	.word	0x20004f58
 800fd18:	20004f50 	.word	0x20004f50
 800fd1c:	20004f44 	.word	0x20004f44
 800fd20:	20004f54 	.word	0x20004f54

0800fd24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b086      	sub	sp, #24
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d046      	beq.n	800fdc4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fd36:	2308      	movs	r3, #8
 800fd38:	425b      	negs	r3, r3
 800fd3a:	697a      	ldr	r2, [r7, #20]
 800fd3c:	4413      	add	r3, r2
 800fd3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fd40:	697b      	ldr	r3, [r7, #20]
 800fd42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fd44:	693b      	ldr	r3, [r7, #16]
 800fd46:	685a      	ldr	r2, [r3, #4]
 800fd48:	4b20      	ldr	r3, [pc, #128]	; (800fdcc <vPortFree+0xa8>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	4013      	ands	r3, r2
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d109      	bne.n	800fd66 <vPortFree+0x42>
 800fd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd56:	f383 8811 	msr	BASEPRI, r3
 800fd5a:	f3bf 8f6f 	isb	sy
 800fd5e:	f3bf 8f4f 	dsb	sy
 800fd62:	60fb      	str	r3, [r7, #12]
 800fd64:	e7fe      	b.n	800fd64 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fd66:	693b      	ldr	r3, [r7, #16]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d009      	beq.n	800fd82 <vPortFree+0x5e>
 800fd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd72:	f383 8811 	msr	BASEPRI, r3
 800fd76:	f3bf 8f6f 	isb	sy
 800fd7a:	f3bf 8f4f 	dsb	sy
 800fd7e:	60bb      	str	r3, [r7, #8]
 800fd80:	e7fe      	b.n	800fd80 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fd82:	693b      	ldr	r3, [r7, #16]
 800fd84:	685a      	ldr	r2, [r3, #4]
 800fd86:	4b11      	ldr	r3, [pc, #68]	; (800fdcc <vPortFree+0xa8>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	4013      	ands	r3, r2
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d019      	beq.n	800fdc4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fd90:	693b      	ldr	r3, [r7, #16]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d115      	bne.n	800fdc4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fd98:	693b      	ldr	r3, [r7, #16]
 800fd9a:	685a      	ldr	r2, [r3, #4]
 800fd9c:	4b0b      	ldr	r3, [pc, #44]	; (800fdcc <vPortFree+0xa8>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	43db      	mvns	r3, r3
 800fda2:	401a      	ands	r2, r3
 800fda4:	693b      	ldr	r3, [r7, #16]
 800fda6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fda8:	f7fe fb78 	bl	800e49c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fdac:	693b      	ldr	r3, [r7, #16]
 800fdae:	685a      	ldr	r2, [r3, #4]
 800fdb0:	4b07      	ldr	r3, [pc, #28]	; (800fdd0 <vPortFree+0xac>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	4413      	add	r3, r2
 800fdb6:	4a06      	ldr	r2, [pc, #24]	; (800fdd0 <vPortFree+0xac>)
 800fdb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fdba:	6938      	ldr	r0, [r7, #16]
 800fdbc:	f000 f86c 	bl	800fe98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800fdc0:	f7fe fb7a 	bl	800e4b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fdc4:	bf00      	nop
 800fdc6:	3718      	adds	r7, #24
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	20004f58 	.word	0x20004f58
 800fdd0:	20004f50 	.word	0x20004f50

0800fdd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fdd4:	b480      	push	{r7}
 800fdd6:	b085      	sub	sp, #20
 800fdd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fdda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800fdde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fde0:	4b27      	ldr	r3, [pc, #156]	; (800fe80 <prvHeapInit+0xac>)
 800fde2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	f003 0307 	and.w	r3, r3, #7
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d00c      	beq.n	800fe08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	3307      	adds	r3, #7
 800fdf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	f023 0307 	bic.w	r3, r3, #7
 800fdfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fdfc:	68ba      	ldr	r2, [r7, #8]
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	1ad3      	subs	r3, r2, r3
 800fe02:	4a1f      	ldr	r2, [pc, #124]	; (800fe80 <prvHeapInit+0xac>)
 800fe04:	4413      	add	r3, r2
 800fe06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fe0c:	4a1d      	ldr	r2, [pc, #116]	; (800fe84 <prvHeapInit+0xb0>)
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fe12:	4b1c      	ldr	r3, [pc, #112]	; (800fe84 <prvHeapInit+0xb0>)
 800fe14:	2200      	movs	r2, #0
 800fe16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	68ba      	ldr	r2, [r7, #8]
 800fe1c:	4413      	add	r3, r2
 800fe1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fe20:	2208      	movs	r2, #8
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	1a9b      	subs	r3, r3, r2
 800fe26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	f023 0307 	bic.w	r3, r3, #7
 800fe2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	4a15      	ldr	r2, [pc, #84]	; (800fe88 <prvHeapInit+0xb4>)
 800fe34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fe36:	4b14      	ldr	r3, [pc, #80]	; (800fe88 <prvHeapInit+0xb4>)
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fe3e:	4b12      	ldr	r3, [pc, #72]	; (800fe88 <prvHeapInit+0xb4>)
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	2200      	movs	r2, #0
 800fe44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	68fa      	ldr	r2, [r7, #12]
 800fe4e:	1ad2      	subs	r2, r2, r3
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800fe54:	4b0c      	ldr	r3, [pc, #48]	; (800fe88 <prvHeapInit+0xb4>)
 800fe56:	681a      	ldr	r2, [r3, #0]
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	685b      	ldr	r3, [r3, #4]
 800fe60:	4a0a      	ldr	r2, [pc, #40]	; (800fe8c <prvHeapInit+0xb8>)
 800fe62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	685b      	ldr	r3, [r3, #4]
 800fe68:	4a09      	ldr	r2, [pc, #36]	; (800fe90 <prvHeapInit+0xbc>)
 800fe6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fe6c:	4b09      	ldr	r3, [pc, #36]	; (800fe94 <prvHeapInit+0xc0>)
 800fe6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800fe72:	601a      	str	r2, [r3, #0]
}
 800fe74:	bf00      	nop
 800fe76:	3714      	adds	r7, #20
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7e:	4770      	bx	lr
 800fe80:	20001344 	.word	0x20001344
 800fe84:	20004f44 	.word	0x20004f44
 800fe88:	20004f4c 	.word	0x20004f4c
 800fe8c:	20004f54 	.word	0x20004f54
 800fe90:	20004f50 	.word	0x20004f50
 800fe94:	20004f58 	.word	0x20004f58

0800fe98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800fe98:	b480      	push	{r7}
 800fe9a:	b085      	sub	sp, #20
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800fea0:	4b28      	ldr	r3, [pc, #160]	; (800ff44 <prvInsertBlockIntoFreeList+0xac>)
 800fea2:	60fb      	str	r3, [r7, #12]
 800fea4:	e002      	b.n	800feac <prvInsertBlockIntoFreeList+0x14>
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	60fb      	str	r3, [r7, #12]
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	687a      	ldr	r2, [r7, #4]
 800feb2:	429a      	cmp	r2, r3
 800feb4:	d8f7      	bhi.n	800fea6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	685b      	ldr	r3, [r3, #4]
 800febe:	68ba      	ldr	r2, [r7, #8]
 800fec0:	4413      	add	r3, r2
 800fec2:	687a      	ldr	r2, [r7, #4]
 800fec4:	429a      	cmp	r2, r3
 800fec6:	d108      	bne.n	800feda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	685a      	ldr	r2, [r3, #4]
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	685b      	ldr	r3, [r3, #4]
 800fed0:	441a      	add	r2, r3
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	685b      	ldr	r3, [r3, #4]
 800fee2:	68ba      	ldr	r2, [r7, #8]
 800fee4:	441a      	add	r2, r3
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	429a      	cmp	r2, r3
 800feec:	d118      	bne.n	800ff20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	681a      	ldr	r2, [r3, #0]
 800fef2:	4b15      	ldr	r3, [pc, #84]	; (800ff48 <prvInsertBlockIntoFreeList+0xb0>)
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	429a      	cmp	r2, r3
 800fef8:	d00d      	beq.n	800ff16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	685a      	ldr	r2, [r3, #4]
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	685b      	ldr	r3, [r3, #4]
 800ff04:	441a      	add	r2, r3
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	681a      	ldr	r2, [r3, #0]
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	601a      	str	r2, [r3, #0]
 800ff14:	e008      	b.n	800ff28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ff16:	4b0c      	ldr	r3, [pc, #48]	; (800ff48 <prvInsertBlockIntoFreeList+0xb0>)
 800ff18:	681a      	ldr	r2, [r3, #0]
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	601a      	str	r2, [r3, #0]
 800ff1e:	e003      	b.n	800ff28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	681a      	ldr	r2, [r3, #0]
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ff28:	68fa      	ldr	r2, [r7, #12]
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	d002      	beq.n	800ff36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	687a      	ldr	r2, [r7, #4]
 800ff34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ff36:	bf00      	nop
 800ff38:	3714      	adds	r7, #20
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff40:	4770      	bx	lr
 800ff42:	bf00      	nop
 800ff44:	20004f44 	.word	0x20004f44
 800ff48:	20004f4c 	.word	0x20004f4c

0800ff4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ff50:	2200      	movs	r2, #0
 800ff52:	4912      	ldr	r1, [pc, #72]	; (800ff9c <MX_USB_DEVICE_Init+0x50>)
 800ff54:	4812      	ldr	r0, [pc, #72]	; (800ffa0 <MX_USB_DEVICE_Init+0x54>)
 800ff56:	f7fb fd4f 	bl	800b9f8 <USBD_Init>
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d001      	beq.n	800ff64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ff60:	f7f1 fa34 	bl	80013cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ff64:	490f      	ldr	r1, [pc, #60]	; (800ffa4 <MX_USB_DEVICE_Init+0x58>)
 800ff66:	480e      	ldr	r0, [pc, #56]	; (800ffa0 <MX_USB_DEVICE_Init+0x54>)
 800ff68:	f7fb fd7c 	bl	800ba64 <USBD_RegisterClass>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d001      	beq.n	800ff76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ff72:	f7f1 fa2b 	bl	80013cc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ff76:	490c      	ldr	r1, [pc, #48]	; (800ffa8 <MX_USB_DEVICE_Init+0x5c>)
 800ff78:	4809      	ldr	r0, [pc, #36]	; (800ffa0 <MX_USB_DEVICE_Init+0x54>)
 800ff7a:	f7fb fca1 	bl	800b8c0 <USBD_CDC_RegisterInterface>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d001      	beq.n	800ff88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ff84:	f7f1 fa22 	bl	80013cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ff88:	4805      	ldr	r0, [pc, #20]	; (800ffa0 <MX_USB_DEVICE_Init+0x54>)
 800ff8a:	f7fb fd8c 	bl	800baa6 <USBD_Start>
 800ff8e:	4603      	mov	r3, r0
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d001      	beq.n	800ff98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ff94:	f7f1 fa1a 	bl	80013cc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ff98:	bf00      	nop
 800ff9a:	bd80      	pop	{r7, pc}
 800ff9c:	20000134 	.word	0x20000134
 800ffa0:	20007004 	.word	0x20007004
 800ffa4:	20000018 	.word	0x20000018
 800ffa8:	20000120 	.word	0x20000120

0800ffac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	4905      	ldr	r1, [pc, #20]	; (800ffc8 <CDC_Init_FS+0x1c>)
 800ffb4:	4805      	ldr	r0, [pc, #20]	; (800ffcc <CDC_Init_FS+0x20>)
 800ffb6:	f7fb fc98 	bl	800b8ea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ffba:	4905      	ldr	r1, [pc, #20]	; (800ffd0 <CDC_Init_FS+0x24>)
 800ffbc:	4803      	ldr	r0, [pc, #12]	; (800ffcc <CDC_Init_FS+0x20>)
 800ffbe:	f7fb fcad 	bl	800b91c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ffc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	bd80      	pop	{r7, pc}
 800ffc8:	20007ad4 	.word	0x20007ad4
 800ffcc:	20007004 	.word	0x20007004
 800ffd0:	200072d4 	.word	0x200072d4

0800ffd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ffd4:	b480      	push	{r7}
 800ffd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ffd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ffda:	4618      	mov	r0, r3
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe2:	4770      	bx	lr

0800ffe4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ffe4:	b480      	push	{r7}
 800ffe6:	b083      	sub	sp, #12
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	4603      	mov	r3, r0
 800ffec:	6039      	str	r1, [r7, #0]
 800ffee:	71fb      	strb	r3, [r7, #7]
 800fff0:	4613      	mov	r3, r2
 800fff2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fff4:	79fb      	ldrb	r3, [r7, #7]
 800fff6:	2b23      	cmp	r3, #35	; 0x23
 800fff8:	d84a      	bhi.n	8010090 <CDC_Control_FS+0xac>
 800fffa:	a201      	add	r2, pc, #4	; (adr r2, 8010000 <CDC_Control_FS+0x1c>)
 800fffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010000:	08010091 	.word	0x08010091
 8010004:	08010091 	.word	0x08010091
 8010008:	08010091 	.word	0x08010091
 801000c:	08010091 	.word	0x08010091
 8010010:	08010091 	.word	0x08010091
 8010014:	08010091 	.word	0x08010091
 8010018:	08010091 	.word	0x08010091
 801001c:	08010091 	.word	0x08010091
 8010020:	08010091 	.word	0x08010091
 8010024:	08010091 	.word	0x08010091
 8010028:	08010091 	.word	0x08010091
 801002c:	08010091 	.word	0x08010091
 8010030:	08010091 	.word	0x08010091
 8010034:	08010091 	.word	0x08010091
 8010038:	08010091 	.word	0x08010091
 801003c:	08010091 	.word	0x08010091
 8010040:	08010091 	.word	0x08010091
 8010044:	08010091 	.word	0x08010091
 8010048:	08010091 	.word	0x08010091
 801004c:	08010091 	.word	0x08010091
 8010050:	08010091 	.word	0x08010091
 8010054:	08010091 	.word	0x08010091
 8010058:	08010091 	.word	0x08010091
 801005c:	08010091 	.word	0x08010091
 8010060:	08010091 	.word	0x08010091
 8010064:	08010091 	.word	0x08010091
 8010068:	08010091 	.word	0x08010091
 801006c:	08010091 	.word	0x08010091
 8010070:	08010091 	.word	0x08010091
 8010074:	08010091 	.word	0x08010091
 8010078:	08010091 	.word	0x08010091
 801007c:	08010091 	.word	0x08010091
 8010080:	08010091 	.word	0x08010091
 8010084:	08010091 	.word	0x08010091
 8010088:	08010091 	.word	0x08010091
 801008c:	08010091 	.word	0x08010091
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010090:	bf00      	nop
  }

  return (USBD_OK);
 8010092:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010094:	4618      	mov	r0, r3
 8010096:	370c      	adds	r7, #12
 8010098:	46bd      	mov	sp, r7
 801009a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009e:	4770      	bx	lr

080100a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b082      	sub	sp, #8
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
 80100a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	return impl_CDC_Receive_FS(Buf, Len);
 80100aa:	6839      	ldr	r1, [r7, #0]
 80100ac:	6878      	ldr	r0, [r7, #4]
 80100ae:	f008 fd29 	bl	8018b04 <impl_CDC_Receive_FS>
 80100b2:	4603      	mov	r3, r0

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80100b4:	4618      	mov	r0, r3
 80100b6:	3708      	adds	r7, #8
 80100b8:	46bd      	mov	sp, r7
 80100ba:	bd80      	pop	{r7, pc}

080100bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b084      	sub	sp, #16
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
 80100c4:	460b      	mov	r3, r1
 80100c6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80100c8:	2300      	movs	r3, #0
 80100ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80100cc:	4b0d      	ldr	r3, [pc, #52]	; (8010104 <CDC_Transmit_FS+0x48>)
 80100ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80100d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d001      	beq.n	80100e2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80100de:	2301      	movs	r3, #1
 80100e0:	e00b      	b.n	80100fa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80100e2:	887b      	ldrh	r3, [r7, #2]
 80100e4:	461a      	mov	r2, r3
 80100e6:	6879      	ldr	r1, [r7, #4]
 80100e8:	4806      	ldr	r0, [pc, #24]	; (8010104 <CDC_Transmit_FS+0x48>)
 80100ea:	f7fb fbfe 	bl	800b8ea <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80100ee:	4805      	ldr	r0, [pc, #20]	; (8010104 <CDC_Transmit_FS+0x48>)
 80100f0:	f7fb fc28 	bl	800b944 <USBD_CDC_TransmitPacket>
 80100f4:	4603      	mov	r3, r0
 80100f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80100f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80100fa:	4618      	mov	r0, r3
 80100fc:	3710      	adds	r7, #16
 80100fe:	46bd      	mov	sp, r7
 8010100:	bd80      	pop	{r7, pc}
 8010102:	bf00      	nop
 8010104:	20007004 	.word	0x20007004

08010108 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010108:	b480      	push	{r7}
 801010a:	b087      	sub	sp, #28
 801010c:	af00      	add	r7, sp, #0
 801010e:	60f8      	str	r0, [r7, #12]
 8010110:	60b9      	str	r1, [r7, #8]
 8010112:	4613      	mov	r3, r2
 8010114:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010116:	2300      	movs	r3, #0
 8010118:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801011a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801011e:	4618      	mov	r0, r3
 8010120:	371c      	adds	r7, #28
 8010122:	46bd      	mov	sp, r7
 8010124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010128:	4770      	bx	lr
	...

0801012c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801012c:	b480      	push	{r7}
 801012e:	b083      	sub	sp, #12
 8010130:	af00      	add	r7, sp, #0
 8010132:	4603      	mov	r3, r0
 8010134:	6039      	str	r1, [r7, #0]
 8010136:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	2212      	movs	r2, #18
 801013c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801013e:	4b03      	ldr	r3, [pc, #12]	; (801014c <USBD_FS_DeviceDescriptor+0x20>)
}
 8010140:	4618      	mov	r0, r3
 8010142:	370c      	adds	r7, #12
 8010144:	46bd      	mov	sp, r7
 8010146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014a:	4770      	bx	lr
 801014c:	20000150 	.word	0x20000150

08010150 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010150:	b480      	push	{r7}
 8010152:	b083      	sub	sp, #12
 8010154:	af00      	add	r7, sp, #0
 8010156:	4603      	mov	r3, r0
 8010158:	6039      	str	r1, [r7, #0]
 801015a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801015c:	683b      	ldr	r3, [r7, #0]
 801015e:	2204      	movs	r2, #4
 8010160:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010162:	4b03      	ldr	r3, [pc, #12]	; (8010170 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010164:	4618      	mov	r0, r3
 8010166:	370c      	adds	r7, #12
 8010168:	46bd      	mov	sp, r7
 801016a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016e:	4770      	bx	lr
 8010170:	20000164 	.word	0x20000164

08010174 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b082      	sub	sp, #8
 8010178:	af00      	add	r7, sp, #0
 801017a:	4603      	mov	r3, r0
 801017c:	6039      	str	r1, [r7, #0]
 801017e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010180:	79fb      	ldrb	r3, [r7, #7]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d105      	bne.n	8010192 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010186:	683a      	ldr	r2, [r7, #0]
 8010188:	4907      	ldr	r1, [pc, #28]	; (80101a8 <USBD_FS_ProductStrDescriptor+0x34>)
 801018a:	4808      	ldr	r0, [pc, #32]	; (80101ac <USBD_FS_ProductStrDescriptor+0x38>)
 801018c:	f7fc fc59 	bl	800ca42 <USBD_GetString>
 8010190:	e004      	b.n	801019c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010192:	683a      	ldr	r2, [r7, #0]
 8010194:	4904      	ldr	r1, [pc, #16]	; (80101a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8010196:	4805      	ldr	r0, [pc, #20]	; (80101ac <USBD_FS_ProductStrDescriptor+0x38>)
 8010198:	f7fc fc53 	bl	800ca42 <USBD_GetString>
  }
  return USBD_StrDesc;
 801019c:	4b02      	ldr	r3, [pc, #8]	; (80101a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801019e:	4618      	mov	r0, r3
 80101a0:	3708      	adds	r7, #8
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}
 80101a6:	bf00      	nop
 80101a8:	200082d4 	.word	0x200082d4
 80101ac:	08019558 	.word	0x08019558

080101b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b082      	sub	sp, #8
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	4603      	mov	r3, r0
 80101b8:	6039      	str	r1, [r7, #0]
 80101ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80101bc:	683a      	ldr	r2, [r7, #0]
 80101be:	4904      	ldr	r1, [pc, #16]	; (80101d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80101c0:	4804      	ldr	r0, [pc, #16]	; (80101d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80101c2:	f7fc fc3e 	bl	800ca42 <USBD_GetString>
  return USBD_StrDesc;
 80101c6:	4b02      	ldr	r3, [pc, #8]	; (80101d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80101c8:	4618      	mov	r0, r3
 80101ca:	3708      	adds	r7, #8
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}
 80101d0:	200082d4 	.word	0x200082d4
 80101d4:	08019570 	.word	0x08019570

080101d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b082      	sub	sp, #8
 80101dc:	af00      	add	r7, sp, #0
 80101de:	4603      	mov	r3, r0
 80101e0:	6039      	str	r1, [r7, #0]
 80101e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	221a      	movs	r2, #26
 80101e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80101ea:	f000 f843 	bl	8010274 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80101ee:	4b02      	ldr	r3, [pc, #8]	; (80101f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80101f0:	4618      	mov	r0, r3
 80101f2:	3708      	adds	r7, #8
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}
 80101f8:	20000168 	.word	0x20000168

080101fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b082      	sub	sp, #8
 8010200:	af00      	add	r7, sp, #0
 8010202:	4603      	mov	r3, r0
 8010204:	6039      	str	r1, [r7, #0]
 8010206:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010208:	79fb      	ldrb	r3, [r7, #7]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d105      	bne.n	801021a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801020e:	683a      	ldr	r2, [r7, #0]
 8010210:	4907      	ldr	r1, [pc, #28]	; (8010230 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010212:	4808      	ldr	r0, [pc, #32]	; (8010234 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010214:	f7fc fc15 	bl	800ca42 <USBD_GetString>
 8010218:	e004      	b.n	8010224 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801021a:	683a      	ldr	r2, [r7, #0]
 801021c:	4904      	ldr	r1, [pc, #16]	; (8010230 <USBD_FS_ConfigStrDescriptor+0x34>)
 801021e:	4805      	ldr	r0, [pc, #20]	; (8010234 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010220:	f7fc fc0f 	bl	800ca42 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010224:	4b02      	ldr	r3, [pc, #8]	; (8010230 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010226:	4618      	mov	r0, r3
 8010228:	3708      	adds	r7, #8
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop
 8010230:	200082d4 	.word	0x200082d4
 8010234:	08019584 	.word	0x08019584

08010238 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
 801023e:	4603      	mov	r3, r0
 8010240:	6039      	str	r1, [r7, #0]
 8010242:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010244:	79fb      	ldrb	r3, [r7, #7]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d105      	bne.n	8010256 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801024a:	683a      	ldr	r2, [r7, #0]
 801024c:	4907      	ldr	r1, [pc, #28]	; (801026c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801024e:	4808      	ldr	r0, [pc, #32]	; (8010270 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010250:	f7fc fbf7 	bl	800ca42 <USBD_GetString>
 8010254:	e004      	b.n	8010260 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010256:	683a      	ldr	r2, [r7, #0]
 8010258:	4904      	ldr	r1, [pc, #16]	; (801026c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801025a:	4805      	ldr	r0, [pc, #20]	; (8010270 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801025c:	f7fc fbf1 	bl	800ca42 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010260:	4b02      	ldr	r3, [pc, #8]	; (801026c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010262:	4618      	mov	r0, r3
 8010264:	3708      	adds	r7, #8
 8010266:	46bd      	mov	sp, r7
 8010268:	bd80      	pop	{r7, pc}
 801026a:	bf00      	nop
 801026c:	200082d4 	.word	0x200082d4
 8010270:	08019590 	.word	0x08019590

08010274 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b084      	sub	sp, #16
 8010278:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801027a:	4b0f      	ldr	r3, [pc, #60]	; (80102b8 <Get_SerialNum+0x44>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010280:	4b0e      	ldr	r3, [pc, #56]	; (80102bc <Get_SerialNum+0x48>)
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010286:	4b0e      	ldr	r3, [pc, #56]	; (80102c0 <Get_SerialNum+0x4c>)
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801028c:	68fa      	ldr	r2, [r7, #12]
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	4413      	add	r3, r2
 8010292:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d009      	beq.n	80102ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801029a:	2208      	movs	r2, #8
 801029c:	4909      	ldr	r1, [pc, #36]	; (80102c4 <Get_SerialNum+0x50>)
 801029e:	68f8      	ldr	r0, [r7, #12]
 80102a0:	f000 f814 	bl	80102cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80102a4:	2204      	movs	r2, #4
 80102a6:	4908      	ldr	r1, [pc, #32]	; (80102c8 <Get_SerialNum+0x54>)
 80102a8:	68b8      	ldr	r0, [r7, #8]
 80102aa:	f000 f80f 	bl	80102cc <IntToUnicode>
  }
}
 80102ae:	bf00      	nop
 80102b0:	3710      	adds	r7, #16
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
 80102b6:	bf00      	nop
 80102b8:	1fff7a10 	.word	0x1fff7a10
 80102bc:	1fff7a14 	.word	0x1fff7a14
 80102c0:	1fff7a18 	.word	0x1fff7a18
 80102c4:	2000016a 	.word	0x2000016a
 80102c8:	2000017a 	.word	0x2000017a

080102cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80102cc:	b480      	push	{r7}
 80102ce:	b087      	sub	sp, #28
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	60f8      	str	r0, [r7, #12]
 80102d4:	60b9      	str	r1, [r7, #8]
 80102d6:	4613      	mov	r3, r2
 80102d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80102da:	2300      	movs	r3, #0
 80102dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80102de:	2300      	movs	r3, #0
 80102e0:	75fb      	strb	r3, [r7, #23]
 80102e2:	e027      	b.n	8010334 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	0f1b      	lsrs	r3, r3, #28
 80102e8:	2b09      	cmp	r3, #9
 80102ea:	d80b      	bhi.n	8010304 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	0f1b      	lsrs	r3, r3, #28
 80102f0:	b2da      	uxtb	r2, r3
 80102f2:	7dfb      	ldrb	r3, [r7, #23]
 80102f4:	005b      	lsls	r3, r3, #1
 80102f6:	4619      	mov	r1, r3
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	440b      	add	r3, r1
 80102fc:	3230      	adds	r2, #48	; 0x30
 80102fe:	b2d2      	uxtb	r2, r2
 8010300:	701a      	strb	r2, [r3, #0]
 8010302:	e00a      	b.n	801031a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	0f1b      	lsrs	r3, r3, #28
 8010308:	b2da      	uxtb	r2, r3
 801030a:	7dfb      	ldrb	r3, [r7, #23]
 801030c:	005b      	lsls	r3, r3, #1
 801030e:	4619      	mov	r1, r3
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	440b      	add	r3, r1
 8010314:	3237      	adds	r2, #55	; 0x37
 8010316:	b2d2      	uxtb	r2, r2
 8010318:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	011b      	lsls	r3, r3, #4
 801031e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010320:	7dfb      	ldrb	r3, [r7, #23]
 8010322:	005b      	lsls	r3, r3, #1
 8010324:	3301      	adds	r3, #1
 8010326:	68ba      	ldr	r2, [r7, #8]
 8010328:	4413      	add	r3, r2
 801032a:	2200      	movs	r2, #0
 801032c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801032e:	7dfb      	ldrb	r3, [r7, #23]
 8010330:	3301      	adds	r3, #1
 8010332:	75fb      	strb	r3, [r7, #23]
 8010334:	7dfa      	ldrb	r2, [r7, #23]
 8010336:	79fb      	ldrb	r3, [r7, #7]
 8010338:	429a      	cmp	r2, r3
 801033a:	d3d3      	bcc.n	80102e4 <IntToUnicode+0x18>
  }
}
 801033c:	bf00      	nop
 801033e:	371c      	adds	r7, #28
 8010340:	46bd      	mov	sp, r7
 8010342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010346:	4770      	bx	lr

08010348 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b08a      	sub	sp, #40	; 0x28
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010350:	f107 0314 	add.w	r3, r7, #20
 8010354:	2200      	movs	r2, #0
 8010356:	601a      	str	r2, [r3, #0]
 8010358:	605a      	str	r2, [r3, #4]
 801035a:	609a      	str	r2, [r3, #8]
 801035c:	60da      	str	r2, [r3, #12]
 801035e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010368:	d13a      	bne.n	80103e0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801036a:	2300      	movs	r3, #0
 801036c:	613b      	str	r3, [r7, #16]
 801036e:	4b1e      	ldr	r3, [pc, #120]	; (80103e8 <HAL_PCD_MspInit+0xa0>)
 8010370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010372:	4a1d      	ldr	r2, [pc, #116]	; (80103e8 <HAL_PCD_MspInit+0xa0>)
 8010374:	f043 0301 	orr.w	r3, r3, #1
 8010378:	6313      	str	r3, [r2, #48]	; 0x30
 801037a:	4b1b      	ldr	r3, [pc, #108]	; (80103e8 <HAL_PCD_MspInit+0xa0>)
 801037c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801037e:	f003 0301 	and.w	r3, r3, #1
 8010382:	613b      	str	r3, [r7, #16]
 8010384:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010386:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801038a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801038c:	2302      	movs	r3, #2
 801038e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010390:	2300      	movs	r3, #0
 8010392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010394:	2303      	movs	r3, #3
 8010396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010398:	230a      	movs	r3, #10
 801039a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801039c:	f107 0314 	add.w	r3, r7, #20
 80103a0:	4619      	mov	r1, r3
 80103a2:	4812      	ldr	r0, [pc, #72]	; (80103ec <HAL_PCD_MspInit+0xa4>)
 80103a4:	f7f2 fdaa 	bl	8002efc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80103a8:	4b0f      	ldr	r3, [pc, #60]	; (80103e8 <HAL_PCD_MspInit+0xa0>)
 80103aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103ac:	4a0e      	ldr	r2, [pc, #56]	; (80103e8 <HAL_PCD_MspInit+0xa0>)
 80103ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103b2:	6353      	str	r3, [r2, #52]	; 0x34
 80103b4:	2300      	movs	r3, #0
 80103b6:	60fb      	str	r3, [r7, #12]
 80103b8:	4b0b      	ldr	r3, [pc, #44]	; (80103e8 <HAL_PCD_MspInit+0xa0>)
 80103ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103bc:	4a0a      	ldr	r2, [pc, #40]	; (80103e8 <HAL_PCD_MspInit+0xa0>)
 80103be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80103c2:	6453      	str	r3, [r2, #68]	; 0x44
 80103c4:	4b08      	ldr	r3, [pc, #32]	; (80103e8 <HAL_PCD_MspInit+0xa0>)
 80103c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80103cc:	60fb      	str	r3, [r7, #12]
 80103ce:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80103d0:	2200      	movs	r2, #0
 80103d2:	2105      	movs	r1, #5
 80103d4:	2043      	movs	r0, #67	; 0x43
 80103d6:	f7f2 f9c9 	bl	800276c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80103da:	2043      	movs	r0, #67	; 0x43
 80103dc:	f7f2 f9e2 	bl	80027a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80103e0:	bf00      	nop
 80103e2:	3728      	adds	r7, #40	; 0x28
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}
 80103e8:	40023800 	.word	0x40023800
 80103ec:	40020000 	.word	0x40020000

080103f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b082      	sub	sp, #8
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010404:	4619      	mov	r1, r3
 8010406:	4610      	mov	r0, r2
 8010408:	f7fb fb98 	bl	800bb3c <USBD_LL_SetupStage>
}
 801040c:	bf00      	nop
 801040e:	3708      	adds	r7, #8
 8010410:	46bd      	mov	sp, r7
 8010412:	bd80      	pop	{r7, pc}

08010414 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b082      	sub	sp, #8
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
 801041c:	460b      	mov	r3, r1
 801041e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010426:	78fa      	ldrb	r2, [r7, #3]
 8010428:	6879      	ldr	r1, [r7, #4]
 801042a:	4613      	mov	r3, r2
 801042c:	00db      	lsls	r3, r3, #3
 801042e:	1a9b      	subs	r3, r3, r2
 8010430:	009b      	lsls	r3, r3, #2
 8010432:	440b      	add	r3, r1
 8010434:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010438:	681a      	ldr	r2, [r3, #0]
 801043a:	78fb      	ldrb	r3, [r7, #3]
 801043c:	4619      	mov	r1, r3
 801043e:	f7fb fbd0 	bl	800bbe2 <USBD_LL_DataOutStage>
}
 8010442:	bf00      	nop
 8010444:	3708      	adds	r7, #8
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}

0801044a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801044a:	b580      	push	{r7, lr}
 801044c:	b082      	sub	sp, #8
 801044e:	af00      	add	r7, sp, #0
 8010450:	6078      	str	r0, [r7, #4]
 8010452:	460b      	mov	r3, r1
 8010454:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801045c:	78fa      	ldrb	r2, [r7, #3]
 801045e:	6879      	ldr	r1, [r7, #4]
 8010460:	4613      	mov	r3, r2
 8010462:	00db      	lsls	r3, r3, #3
 8010464:	1a9b      	subs	r3, r3, r2
 8010466:	009b      	lsls	r3, r3, #2
 8010468:	440b      	add	r3, r1
 801046a:	3348      	adds	r3, #72	; 0x48
 801046c:	681a      	ldr	r2, [r3, #0]
 801046e:	78fb      	ldrb	r3, [r7, #3]
 8010470:	4619      	mov	r1, r3
 8010472:	f7fb fc19 	bl	800bca8 <USBD_LL_DataInStage>
}
 8010476:	bf00      	nop
 8010478:	3708      	adds	r7, #8
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}

0801047e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801047e:	b580      	push	{r7, lr}
 8010480:	b082      	sub	sp, #8
 8010482:	af00      	add	r7, sp, #0
 8010484:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801048c:	4618      	mov	r0, r3
 801048e:	f7fb fd1d 	bl	800becc <USBD_LL_SOF>
}
 8010492:	bf00      	nop
 8010494:	3708      	adds	r7, #8
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}

0801049a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801049a:	b580      	push	{r7, lr}
 801049c:	b084      	sub	sp, #16
 801049e:	af00      	add	r7, sp, #0
 80104a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80104a2:	2301      	movs	r3, #1
 80104a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	68db      	ldr	r3, [r3, #12]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d102      	bne.n	80104b4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80104ae:	2300      	movs	r3, #0
 80104b0:	73fb      	strb	r3, [r7, #15]
 80104b2:	e008      	b.n	80104c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	68db      	ldr	r3, [r3, #12]
 80104b8:	2b02      	cmp	r3, #2
 80104ba:	d102      	bne.n	80104c2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80104bc:	2301      	movs	r3, #1
 80104be:	73fb      	strb	r3, [r7, #15]
 80104c0:	e001      	b.n	80104c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80104c2:	f7f0 ff83 	bl	80013cc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80104cc:	7bfa      	ldrb	r2, [r7, #15]
 80104ce:	4611      	mov	r1, r2
 80104d0:	4618      	mov	r0, r3
 80104d2:	f7fb fcc0 	bl	800be56 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80104dc:	4618      	mov	r0, r3
 80104de:	f7fb fc79 	bl	800bdd4 <USBD_LL_Reset>
}
 80104e2:	bf00      	nop
 80104e4:	3710      	adds	r7, #16
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd80      	pop	{r7, pc}
	...

080104ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b082      	sub	sp, #8
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80104fa:	4618      	mov	r0, r3
 80104fc:	f7fb fcbb 	bl	800be76 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	687a      	ldr	r2, [r7, #4]
 801050c:	6812      	ldr	r2, [r2, #0]
 801050e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010512:	f043 0301 	orr.w	r3, r3, #1
 8010516:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	6a1b      	ldr	r3, [r3, #32]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d005      	beq.n	801052c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010520:	4b04      	ldr	r3, [pc, #16]	; (8010534 <HAL_PCD_SuspendCallback+0x48>)
 8010522:	691b      	ldr	r3, [r3, #16]
 8010524:	4a03      	ldr	r2, [pc, #12]	; (8010534 <HAL_PCD_SuspendCallback+0x48>)
 8010526:	f043 0306 	orr.w	r3, r3, #6
 801052a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801052c:	bf00      	nop
 801052e:	3708      	adds	r7, #8
 8010530:	46bd      	mov	sp, r7
 8010532:	bd80      	pop	{r7, pc}
 8010534:	e000ed00 	.word	0xe000ed00

08010538 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b082      	sub	sp, #8
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010546:	4618      	mov	r0, r3
 8010548:	f7fb fcaa 	bl	800bea0 <USBD_LL_Resume>
}
 801054c:	bf00      	nop
 801054e:	3708      	adds	r7, #8
 8010550:	46bd      	mov	sp, r7
 8010552:	bd80      	pop	{r7, pc}

08010554 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b082      	sub	sp, #8
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
 801055c:	460b      	mov	r3, r1
 801055e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010566:	78fa      	ldrb	r2, [r7, #3]
 8010568:	4611      	mov	r1, r2
 801056a:	4618      	mov	r0, r3
 801056c:	f7fb fcd5 	bl	800bf1a <USBD_LL_IsoOUTIncomplete>
}
 8010570:	bf00      	nop
 8010572:	3708      	adds	r7, #8
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}

08010578 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b082      	sub	sp, #8
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
 8010580:	460b      	mov	r3, r1
 8010582:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801058a:	78fa      	ldrb	r2, [r7, #3]
 801058c:	4611      	mov	r1, r2
 801058e:	4618      	mov	r0, r3
 8010590:	f7fb fcb6 	bl	800bf00 <USBD_LL_IsoINIncomplete>
}
 8010594:	bf00      	nop
 8010596:	3708      	adds	r7, #8
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}

0801059c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b082      	sub	sp, #8
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7fb fcc2 	bl	800bf34 <USBD_LL_DevConnected>
}
 80105b0:	bf00      	nop
 80105b2:	3708      	adds	r7, #8
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bd80      	pop	{r7, pc}

080105b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b082      	sub	sp, #8
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80105c6:	4618      	mov	r0, r3
 80105c8:	f7fb fcbf 	bl	800bf4a <USBD_LL_DevDisconnected>
}
 80105cc:	bf00      	nop
 80105ce:	3708      	adds	r7, #8
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}

080105d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b082      	sub	sp, #8
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	781b      	ldrb	r3, [r3, #0]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d13c      	bne.n	801065e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80105e4:	4a20      	ldr	r2, [pc, #128]	; (8010668 <USBD_LL_Init+0x94>)
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	4a1e      	ldr	r2, [pc, #120]	; (8010668 <USBD_LL_Init+0x94>)
 80105f0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80105f4:	4b1c      	ldr	r3, [pc, #112]	; (8010668 <USBD_LL_Init+0x94>)
 80105f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80105fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80105fc:	4b1a      	ldr	r3, [pc, #104]	; (8010668 <USBD_LL_Init+0x94>)
 80105fe:	2204      	movs	r2, #4
 8010600:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010602:	4b19      	ldr	r3, [pc, #100]	; (8010668 <USBD_LL_Init+0x94>)
 8010604:	2202      	movs	r2, #2
 8010606:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010608:	4b17      	ldr	r3, [pc, #92]	; (8010668 <USBD_LL_Init+0x94>)
 801060a:	2200      	movs	r2, #0
 801060c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801060e:	4b16      	ldr	r3, [pc, #88]	; (8010668 <USBD_LL_Init+0x94>)
 8010610:	2202      	movs	r2, #2
 8010612:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010614:	4b14      	ldr	r3, [pc, #80]	; (8010668 <USBD_LL_Init+0x94>)
 8010616:	2200      	movs	r2, #0
 8010618:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801061a:	4b13      	ldr	r3, [pc, #76]	; (8010668 <USBD_LL_Init+0x94>)
 801061c:	2200      	movs	r2, #0
 801061e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010620:	4b11      	ldr	r3, [pc, #68]	; (8010668 <USBD_LL_Init+0x94>)
 8010622:	2200      	movs	r2, #0
 8010624:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010626:	4b10      	ldr	r3, [pc, #64]	; (8010668 <USBD_LL_Init+0x94>)
 8010628:	2200      	movs	r2, #0
 801062a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801062c:	4b0e      	ldr	r3, [pc, #56]	; (8010668 <USBD_LL_Init+0x94>)
 801062e:	2200      	movs	r2, #0
 8010630:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010632:	480d      	ldr	r0, [pc, #52]	; (8010668 <USBD_LL_Init+0x94>)
 8010634:	f7f5 fc5a 	bl	8005eec <HAL_PCD_Init>
 8010638:	4603      	mov	r3, r0
 801063a:	2b00      	cmp	r3, #0
 801063c:	d001      	beq.n	8010642 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801063e:	f7f0 fec5 	bl	80013cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010642:	2180      	movs	r1, #128	; 0x80
 8010644:	4808      	ldr	r0, [pc, #32]	; (8010668 <USBD_LL_Init+0x94>)
 8010646:	f7f6 fdb8 	bl	80071ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801064a:	2240      	movs	r2, #64	; 0x40
 801064c:	2100      	movs	r1, #0
 801064e:	4806      	ldr	r0, [pc, #24]	; (8010668 <USBD_LL_Init+0x94>)
 8010650:	f7f6 fd6c 	bl	800712c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010654:	2280      	movs	r2, #128	; 0x80
 8010656:	2101      	movs	r1, #1
 8010658:	4803      	ldr	r0, [pc, #12]	; (8010668 <USBD_LL_Init+0x94>)
 801065a:	f7f6 fd67 	bl	800712c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801065e:	2300      	movs	r3, #0
}
 8010660:	4618      	mov	r0, r3
 8010662:	3708      	adds	r7, #8
 8010664:	46bd      	mov	sp, r7
 8010666:	bd80      	pop	{r7, pc}
 8010668:	200084d4 	.word	0x200084d4

0801066c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801066c:	b580      	push	{r7, lr}
 801066e:	b084      	sub	sp, #16
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010674:	2300      	movs	r3, #0
 8010676:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010678:	2300      	movs	r3, #0
 801067a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010682:	4618      	mov	r0, r3
 8010684:	f7f5 fd4f 	bl	8006126 <HAL_PCD_Start>
 8010688:	4603      	mov	r3, r0
 801068a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801068c:	7bfb      	ldrb	r3, [r7, #15]
 801068e:	4618      	mov	r0, r3
 8010690:	f000 f92a 	bl	80108e8 <USBD_Get_USB_Status>
 8010694:	4603      	mov	r3, r0
 8010696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010698:	7bbb      	ldrb	r3, [r7, #14]
}
 801069a:	4618      	mov	r0, r3
 801069c:	3710      	adds	r7, #16
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}

080106a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80106a2:	b580      	push	{r7, lr}
 80106a4:	b084      	sub	sp, #16
 80106a6:	af00      	add	r7, sp, #0
 80106a8:	6078      	str	r0, [r7, #4]
 80106aa:	4608      	mov	r0, r1
 80106ac:	4611      	mov	r1, r2
 80106ae:	461a      	mov	r2, r3
 80106b0:	4603      	mov	r3, r0
 80106b2:	70fb      	strb	r3, [r7, #3]
 80106b4:	460b      	mov	r3, r1
 80106b6:	70bb      	strb	r3, [r7, #2]
 80106b8:	4613      	mov	r3, r2
 80106ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106bc:	2300      	movs	r3, #0
 80106be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106c0:	2300      	movs	r3, #0
 80106c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80106ca:	78bb      	ldrb	r3, [r7, #2]
 80106cc:	883a      	ldrh	r2, [r7, #0]
 80106ce:	78f9      	ldrb	r1, [r7, #3]
 80106d0:	f7f6 f933 	bl	800693a <HAL_PCD_EP_Open>
 80106d4:	4603      	mov	r3, r0
 80106d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106d8:	7bfb      	ldrb	r3, [r7, #15]
 80106da:	4618      	mov	r0, r3
 80106dc:	f000 f904 	bl	80108e8 <USBD_Get_USB_Status>
 80106e0:	4603      	mov	r3, r0
 80106e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80106e6:	4618      	mov	r0, r3
 80106e8:	3710      	adds	r7, #16
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}

080106ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80106ee:	b580      	push	{r7, lr}
 80106f0:	b084      	sub	sp, #16
 80106f2:	af00      	add	r7, sp, #0
 80106f4:	6078      	str	r0, [r7, #4]
 80106f6:	460b      	mov	r3, r1
 80106f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106fa:	2300      	movs	r3, #0
 80106fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106fe:	2300      	movs	r3, #0
 8010700:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010708:	78fa      	ldrb	r2, [r7, #3]
 801070a:	4611      	mov	r1, r2
 801070c:	4618      	mov	r0, r3
 801070e:	f7f6 f97c 	bl	8006a0a <HAL_PCD_EP_Close>
 8010712:	4603      	mov	r3, r0
 8010714:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010716:	7bfb      	ldrb	r3, [r7, #15]
 8010718:	4618      	mov	r0, r3
 801071a:	f000 f8e5 	bl	80108e8 <USBD_Get_USB_Status>
 801071e:	4603      	mov	r3, r0
 8010720:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010722:	7bbb      	ldrb	r3, [r7, #14]
}
 8010724:	4618      	mov	r0, r3
 8010726:	3710      	adds	r7, #16
 8010728:	46bd      	mov	sp, r7
 801072a:	bd80      	pop	{r7, pc}

0801072c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801072c:	b580      	push	{r7, lr}
 801072e:	b084      	sub	sp, #16
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
 8010734:	460b      	mov	r3, r1
 8010736:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010738:	2300      	movs	r3, #0
 801073a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801073c:	2300      	movs	r3, #0
 801073e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010746:	78fa      	ldrb	r2, [r7, #3]
 8010748:	4611      	mov	r1, r2
 801074a:	4618      	mov	r0, r3
 801074c:	f7f6 fa54 	bl	8006bf8 <HAL_PCD_EP_SetStall>
 8010750:	4603      	mov	r3, r0
 8010752:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010754:	7bfb      	ldrb	r3, [r7, #15]
 8010756:	4618      	mov	r0, r3
 8010758:	f000 f8c6 	bl	80108e8 <USBD_Get_USB_Status>
 801075c:	4603      	mov	r3, r0
 801075e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010760:	7bbb      	ldrb	r3, [r7, #14]
}
 8010762:	4618      	mov	r0, r3
 8010764:	3710      	adds	r7, #16
 8010766:	46bd      	mov	sp, r7
 8010768:	bd80      	pop	{r7, pc}

0801076a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801076a:	b580      	push	{r7, lr}
 801076c:	b084      	sub	sp, #16
 801076e:	af00      	add	r7, sp, #0
 8010770:	6078      	str	r0, [r7, #4]
 8010772:	460b      	mov	r3, r1
 8010774:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010776:	2300      	movs	r3, #0
 8010778:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801077a:	2300      	movs	r3, #0
 801077c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010784:	78fa      	ldrb	r2, [r7, #3]
 8010786:	4611      	mov	r1, r2
 8010788:	4618      	mov	r0, r3
 801078a:	f7f6 fa99 	bl	8006cc0 <HAL_PCD_EP_ClrStall>
 801078e:	4603      	mov	r3, r0
 8010790:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010792:	7bfb      	ldrb	r3, [r7, #15]
 8010794:	4618      	mov	r0, r3
 8010796:	f000 f8a7 	bl	80108e8 <USBD_Get_USB_Status>
 801079a:	4603      	mov	r3, r0
 801079c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801079e:	7bbb      	ldrb	r3, [r7, #14]
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	3710      	adds	r7, #16
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}

080107a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80107a8:	b480      	push	{r7}
 80107aa:	b085      	sub	sp, #20
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
 80107b0:	460b      	mov	r3, r1
 80107b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80107ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80107bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	da0b      	bge.n	80107dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80107c4:	78fb      	ldrb	r3, [r7, #3]
 80107c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80107ca:	68f9      	ldr	r1, [r7, #12]
 80107cc:	4613      	mov	r3, r2
 80107ce:	00db      	lsls	r3, r3, #3
 80107d0:	1a9b      	subs	r3, r3, r2
 80107d2:	009b      	lsls	r3, r3, #2
 80107d4:	440b      	add	r3, r1
 80107d6:	333e      	adds	r3, #62	; 0x3e
 80107d8:	781b      	ldrb	r3, [r3, #0]
 80107da:	e00b      	b.n	80107f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80107dc:	78fb      	ldrb	r3, [r7, #3]
 80107de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80107e2:	68f9      	ldr	r1, [r7, #12]
 80107e4:	4613      	mov	r3, r2
 80107e6:	00db      	lsls	r3, r3, #3
 80107e8:	1a9b      	subs	r3, r3, r2
 80107ea:	009b      	lsls	r3, r3, #2
 80107ec:	440b      	add	r3, r1
 80107ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80107f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80107f4:	4618      	mov	r0, r3
 80107f6:	3714      	adds	r7, #20
 80107f8:	46bd      	mov	sp, r7
 80107fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fe:	4770      	bx	lr

08010800 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b084      	sub	sp, #16
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
 8010808:	460b      	mov	r3, r1
 801080a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801080c:	2300      	movs	r3, #0
 801080e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010810:	2300      	movs	r3, #0
 8010812:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801081a:	78fa      	ldrb	r2, [r7, #3]
 801081c:	4611      	mov	r1, r2
 801081e:	4618      	mov	r0, r3
 8010820:	f7f6 f866 	bl	80068f0 <HAL_PCD_SetAddress>
 8010824:	4603      	mov	r3, r0
 8010826:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010828:	7bfb      	ldrb	r3, [r7, #15]
 801082a:	4618      	mov	r0, r3
 801082c:	f000 f85c 	bl	80108e8 <USBD_Get_USB_Status>
 8010830:	4603      	mov	r3, r0
 8010832:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010834:	7bbb      	ldrb	r3, [r7, #14]
}
 8010836:	4618      	mov	r0, r3
 8010838:	3710      	adds	r7, #16
 801083a:	46bd      	mov	sp, r7
 801083c:	bd80      	pop	{r7, pc}

0801083e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801083e:	b580      	push	{r7, lr}
 8010840:	b086      	sub	sp, #24
 8010842:	af00      	add	r7, sp, #0
 8010844:	60f8      	str	r0, [r7, #12]
 8010846:	607a      	str	r2, [r7, #4]
 8010848:	603b      	str	r3, [r7, #0]
 801084a:	460b      	mov	r3, r1
 801084c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801084e:	2300      	movs	r3, #0
 8010850:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010852:	2300      	movs	r3, #0
 8010854:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801085c:	7af9      	ldrb	r1, [r7, #11]
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	687a      	ldr	r2, [r7, #4]
 8010862:	f7f6 f97f 	bl	8006b64 <HAL_PCD_EP_Transmit>
 8010866:	4603      	mov	r3, r0
 8010868:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801086a:	7dfb      	ldrb	r3, [r7, #23]
 801086c:	4618      	mov	r0, r3
 801086e:	f000 f83b 	bl	80108e8 <USBD_Get_USB_Status>
 8010872:	4603      	mov	r3, r0
 8010874:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010876:	7dbb      	ldrb	r3, [r7, #22]
}
 8010878:	4618      	mov	r0, r3
 801087a:	3718      	adds	r7, #24
 801087c:	46bd      	mov	sp, r7
 801087e:	bd80      	pop	{r7, pc}

08010880 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b086      	sub	sp, #24
 8010884:	af00      	add	r7, sp, #0
 8010886:	60f8      	str	r0, [r7, #12]
 8010888:	607a      	str	r2, [r7, #4]
 801088a:	603b      	str	r3, [r7, #0]
 801088c:	460b      	mov	r3, r1
 801088e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010890:	2300      	movs	r3, #0
 8010892:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010894:	2300      	movs	r3, #0
 8010896:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801089e:	7af9      	ldrb	r1, [r7, #11]
 80108a0:	683b      	ldr	r3, [r7, #0]
 80108a2:	687a      	ldr	r2, [r7, #4]
 80108a4:	f7f6 f8fb 	bl	8006a9e <HAL_PCD_EP_Receive>
 80108a8:	4603      	mov	r3, r0
 80108aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80108ac:	7dfb      	ldrb	r3, [r7, #23]
 80108ae:	4618      	mov	r0, r3
 80108b0:	f000 f81a 	bl	80108e8 <USBD_Get_USB_Status>
 80108b4:	4603      	mov	r3, r0
 80108b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80108b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80108ba:	4618      	mov	r0, r3
 80108bc:	3718      	adds	r7, #24
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}

080108c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80108c2:	b580      	push	{r7, lr}
 80108c4:	b082      	sub	sp, #8
 80108c6:	af00      	add	r7, sp, #0
 80108c8:	6078      	str	r0, [r7, #4]
 80108ca:	460b      	mov	r3, r1
 80108cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80108d4:	78fa      	ldrb	r2, [r7, #3]
 80108d6:	4611      	mov	r1, r2
 80108d8:	4618      	mov	r0, r3
 80108da:	f7f6 f92b 	bl	8006b34 <HAL_PCD_EP_GetRxCount>
 80108de:	4603      	mov	r3, r0
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	3708      	adds	r7, #8
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}

080108e8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80108e8:	b480      	push	{r7}
 80108ea:	b085      	sub	sp, #20
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	4603      	mov	r3, r0
 80108f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108f2:	2300      	movs	r3, #0
 80108f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80108f6:	79fb      	ldrb	r3, [r7, #7]
 80108f8:	2b03      	cmp	r3, #3
 80108fa:	d817      	bhi.n	801092c <USBD_Get_USB_Status+0x44>
 80108fc:	a201      	add	r2, pc, #4	; (adr r2, 8010904 <USBD_Get_USB_Status+0x1c>)
 80108fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010902:	bf00      	nop
 8010904:	08010915 	.word	0x08010915
 8010908:	0801091b 	.word	0x0801091b
 801090c:	08010921 	.word	0x08010921
 8010910:	08010927 	.word	0x08010927
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010914:	2300      	movs	r3, #0
 8010916:	73fb      	strb	r3, [r7, #15]
    break;
 8010918:	e00b      	b.n	8010932 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801091a:	2303      	movs	r3, #3
 801091c:	73fb      	strb	r3, [r7, #15]
    break;
 801091e:	e008      	b.n	8010932 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010920:	2301      	movs	r3, #1
 8010922:	73fb      	strb	r3, [r7, #15]
    break;
 8010924:	e005      	b.n	8010932 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010926:	2303      	movs	r3, #3
 8010928:	73fb      	strb	r3, [r7, #15]
    break;
 801092a:	e002      	b.n	8010932 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801092c:	2303      	movs	r3, #3
 801092e:	73fb      	strb	r3, [r7, #15]
    break;
 8010930:	bf00      	nop
  }
  return usb_status;
 8010932:	7bfb      	ldrb	r3, [r7, #15]
}
 8010934:	4618      	mov	r0, r3
 8010936:	3714      	adds	r7, #20
 8010938:	46bd      	mov	sp, r7
 801093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093e:	4770      	bx	lr

08010940 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8010940:	b480      	push	{r7}
 8010942:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8010944:	bf00      	nop
 8010946:	46bd      	mov	sp, r7
 8010948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094c:	4770      	bx	lr
	...

08010950 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8010950:	b580      	push	{r7, lr}
 8010952:	b086      	sub	sp, #24
 8010954:	af04      	add	r7, sp, #16
 8010956:	4603      	mov	r3, r0
 8010958:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 801095a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801095e:	9302      	str	r3, [sp, #8]
 8010960:	2301      	movs	r3, #1
 8010962:	9301      	str	r3, [sp, #4]
 8010964:	1dfb      	adds	r3, r7, #7
 8010966:	9300      	str	r3, [sp, #0]
 8010968:	2301      	movs	r3, #1
 801096a:	2200      	movs	r2, #0
 801096c:	2178      	movs	r1, #120	; 0x78
 801096e:	4803      	ldr	r0, [pc, #12]	; (801097c <ssd1306_WriteCommand+0x2c>)
 8010970:	f7f2 fdb0 	bl	80034d4 <HAL_I2C_Mem_Write>
}
 8010974:	bf00      	nop
 8010976:	3708      	adds	r7, #8
 8010978:	46bd      	mov	sp, r7
 801097a:	bd80      	pop	{r7, pc}
 801097c:	20005d98 	.word	0x20005d98

08010980 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8010980:	b580      	push	{r7, lr}
 8010982:	b086      	sub	sp, #24
 8010984:	af04      	add	r7, sp, #16
 8010986:	6078      	str	r0, [r7, #4]
 8010988:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 801098a:	683b      	ldr	r3, [r7, #0]
 801098c:	b29b      	uxth	r3, r3
 801098e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010992:	9202      	str	r2, [sp, #8]
 8010994:	9301      	str	r3, [sp, #4]
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	9300      	str	r3, [sp, #0]
 801099a:	2301      	movs	r3, #1
 801099c:	2240      	movs	r2, #64	; 0x40
 801099e:	2178      	movs	r1, #120	; 0x78
 80109a0:	4803      	ldr	r0, [pc, #12]	; (80109b0 <ssd1306_WriteData+0x30>)
 80109a2:	f7f2 fd97 	bl	80034d4 <HAL_I2C_Mem_Write>
}
 80109a6:	bf00      	nop
 80109a8:	3708      	adds	r7, #8
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}
 80109ae:	bf00      	nop
 80109b0:	20005d98 	.word	0x20005d98

080109b4 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80109b4:	b580      	push	{r7, lr}
 80109b6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80109b8:	f7ff ffc2 	bl	8010940 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80109bc:	2064      	movs	r0, #100	; 0x64
 80109be:	f7f1 fa25 	bl	8001e0c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80109c2:	2000      	movs	r0, #0
 80109c4:	f000 fb2a 	bl	801101c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80109c8:	2020      	movs	r0, #32
 80109ca:	f7ff ffc1 	bl	8010950 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80109ce:	2000      	movs	r0, #0
 80109d0:	f7ff ffbe 	bl	8010950 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80109d4:	20b0      	movs	r0, #176	; 0xb0
 80109d6:	f7ff ffbb 	bl	8010950 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80109da:	20c8      	movs	r0, #200	; 0xc8
 80109dc:	f7ff ffb8 	bl	8010950 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80109e0:	2000      	movs	r0, #0
 80109e2:	f7ff ffb5 	bl	8010950 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80109e6:	2010      	movs	r0, #16
 80109e8:	f7ff ffb2 	bl	8010950 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80109ec:	2040      	movs	r0, #64	; 0x40
 80109ee:	f7ff ffaf 	bl	8010950 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80109f2:	20ff      	movs	r0, #255	; 0xff
 80109f4:	f000 faff 	bl	8010ff6 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80109f8:	20a1      	movs	r0, #161	; 0xa1
 80109fa:	f7ff ffa9 	bl	8010950 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80109fe:	20a6      	movs	r0, #166	; 0xa6
 8010a00:	f7ff ffa6 	bl	8010950 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8010a04:	20a8      	movs	r0, #168	; 0xa8
 8010a06:	f7ff ffa3 	bl	8010950 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8010a0a:	201f      	movs	r0, #31
 8010a0c:	f7ff ffa0 	bl	8010950 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8010a10:	20a4      	movs	r0, #164	; 0xa4
 8010a12:	f7ff ff9d 	bl	8010950 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8010a16:	20d3      	movs	r0, #211	; 0xd3
 8010a18:	f7ff ff9a 	bl	8010950 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8010a1c:	2000      	movs	r0, #0
 8010a1e:	f7ff ff97 	bl	8010950 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8010a22:	20d5      	movs	r0, #213	; 0xd5
 8010a24:	f7ff ff94 	bl	8010950 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8010a28:	20f0      	movs	r0, #240	; 0xf0
 8010a2a:	f7ff ff91 	bl	8010950 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8010a2e:	20d9      	movs	r0, #217	; 0xd9
 8010a30:	f7ff ff8e 	bl	8010950 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8010a34:	2022      	movs	r0, #34	; 0x22
 8010a36:	f7ff ff8b 	bl	8010950 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8010a3a:	20da      	movs	r0, #218	; 0xda
 8010a3c:	f7ff ff88 	bl	8010950 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8010a40:	2002      	movs	r0, #2
 8010a42:	f7ff ff85 	bl	8010950 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8010a46:	20db      	movs	r0, #219	; 0xdb
 8010a48:	f7ff ff82 	bl	8010950 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8010a4c:	2020      	movs	r0, #32
 8010a4e:	f7ff ff7f 	bl	8010950 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8010a52:	208d      	movs	r0, #141	; 0x8d
 8010a54:	f7ff ff7c 	bl	8010950 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8010a58:	2014      	movs	r0, #20
 8010a5a:	f7ff ff79 	bl	8010950 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8010a5e:	2001      	movs	r0, #1
 8010a60:	f000 fadc 	bl	801101c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8010a64:	2000      	movs	r0, #0
 8010a66:	f000 f80f 	bl	8010a88 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8010a6a:	f000 f8bd 	bl	8010be8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8010a6e:	4b05      	ldr	r3, [pc, #20]	; (8010a84 <ssd1306_Init+0xd0>)
 8010a70:	2200      	movs	r2, #0
 8010a72:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8010a74:	4b03      	ldr	r3, [pc, #12]	; (8010a84 <ssd1306_Init+0xd0>)
 8010a76:	2200      	movs	r2, #0
 8010a78:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8010a7a:	4b02      	ldr	r3, [pc, #8]	; (8010a84 <ssd1306_Init+0xd0>)
 8010a7c:	2201      	movs	r2, #1
 8010a7e:	715a      	strb	r2, [r3, #5]
}
 8010a80:	bf00      	nop
 8010a82:	bd80      	pop	{r7, pc}
 8010a84:	2000515c 	.word	0x2000515c

08010a88 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8010a88:	b480      	push	{r7}
 8010a8a:	b085      	sub	sp, #20
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	4603      	mov	r3, r0
 8010a90:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8010a92:	2300      	movs	r3, #0
 8010a94:	60fb      	str	r3, [r7, #12]
 8010a96:	e00d      	b.n	8010ab4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8010a98:	79fb      	ldrb	r3, [r7, #7]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d101      	bne.n	8010aa2 <ssd1306_Fill+0x1a>
 8010a9e:	2100      	movs	r1, #0
 8010aa0:	e000      	b.n	8010aa4 <ssd1306_Fill+0x1c>
 8010aa2:	21ff      	movs	r1, #255	; 0xff
 8010aa4:	4a08      	ldr	r2, [pc, #32]	; (8010ac8 <ssd1306_Fill+0x40>)
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	4413      	add	r3, r2
 8010aaa:	460a      	mov	r2, r1
 8010aac:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	3301      	adds	r3, #1
 8010ab2:	60fb      	str	r3, [r7, #12]
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010aba:	d3ed      	bcc.n	8010a98 <ssd1306_Fill+0x10>
    }
}
 8010abc:	bf00      	nop
 8010abe:	3714      	adds	r7, #20
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac6:	4770      	bx	lr
 8010ac8:	20004f5c 	.word	0x20004f5c

08010acc <ssd1306_FillZone>:


void ssd1306_FillZone(uint8_t x, uint8_t y, uint8_t wx, uint8_t wy, SSD1306_COLOR color)
{
 8010acc:	b490      	push	{r4, r7}
 8010ace:	b08a      	sub	sp, #40	; 0x28
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	4604      	mov	r4, r0
 8010ad4:	4608      	mov	r0, r1
 8010ad6:	4611      	mov	r1, r2
 8010ad8:	461a      	mov	r2, r3
 8010ada:	4623      	mov	r3, r4
 8010adc:	71fb      	strb	r3, [r7, #7]
 8010ade:	4603      	mov	r3, r0
 8010ae0:	71bb      	strb	r3, [r7, #6]
 8010ae2:	460b      	mov	r3, r1
 8010ae4:	717b      	strb	r3, [r7, #5]
 8010ae6:	4613      	mov	r3, r2
 8010ae8:	713b      	strb	r3, [r7, #4]
    uint32_t xi;
    uint32_t yi;

    int by = y/8;
 8010aea:	79bb      	ldrb	r3, [r7, #6]
 8010aec:	08db      	lsrs	r3, r3, #3
 8010aee:	b2db      	uxtb	r3, r3
 8010af0:	61bb      	str	r3, [r7, #24]
    int bly = (y+wy+7)/8;
 8010af2:	79ba      	ldrb	r2, [r7, #6]
 8010af4:	793b      	ldrb	r3, [r7, #4]
 8010af6:	4413      	add	r3, r2
 8010af8:	3307      	adds	r3, #7
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	da00      	bge.n	8010b00 <ssd1306_FillZone+0x34>
 8010afe:	3307      	adds	r3, #7
 8010b00:	10db      	asrs	r3, r3, #3
 8010b02:	617b      	str	r3, [r7, #20]

    for (yi = by; yi < bly; yi++) {
 8010b04:	69bb      	ldr	r3, [r7, #24]
 8010b06:	623b      	str	r3, [r7, #32]
 8010b08:	e063      	b.n	8010bd2 <ssd1306_FillZone+0x106>
    	uint8_t b = 0xFF;
 8010b0a:	23ff      	movs	r3, #255	; 0xff
 8010b0c:	77fb      	strb	r3, [r7, #31]
    	if (yi == by) {
 8010b0e:	69bb      	ldr	r3, [r7, #24]
 8010b10:	6a3a      	ldr	r2, [r7, #32]
 8010b12:	429a      	cmp	r2, r3
 8010b14:	d106      	bne.n	8010b24 <ssd1306_FillZone+0x58>
    		b = b << (y & 0x7);
 8010b16:	7ffa      	ldrb	r2, [r7, #31]
 8010b18:	79bb      	ldrb	r3, [r7, #6]
 8010b1a:	f003 0307 	and.w	r3, r3, #7
 8010b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8010b22:	77fb      	strb	r3, [r7, #31]
    	}
    	if (yi == bly-1) {
 8010b24:	697b      	ldr	r3, [r7, #20]
 8010b26:	3b01      	subs	r3, #1
 8010b28:	461a      	mov	r2, r3
 8010b2a:	6a3b      	ldr	r3, [r7, #32]
 8010b2c:	4293      	cmp	r3, r2
 8010b2e:	d113      	bne.n	8010b58 <ssd1306_FillZone+0x8c>
    		int s = (y+wy) & 0x7;
 8010b30:	79ba      	ldrb	r2, [r7, #6]
 8010b32:	793b      	ldrb	r3, [r7, #4]
 8010b34:	4413      	add	r3, r2
 8010b36:	b2db      	uxtb	r3, r3
 8010b38:	f003 0307 	and.w	r3, r3, #7
 8010b3c:	613b      	str	r3, [r7, #16]
    		if (s) b &= ~(0xFFU << s);
 8010b3e:	693b      	ldr	r3, [r7, #16]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d009      	beq.n	8010b58 <ssd1306_FillZone+0x8c>
 8010b44:	22ff      	movs	r2, #255	; 0xff
 8010b46:	693b      	ldr	r3, [r7, #16]
 8010b48:	fa02 f303 	lsl.w	r3, r2, r3
 8010b4c:	b2db      	uxtb	r3, r3
 8010b4e:	43db      	mvns	r3, r3
 8010b50:	b2da      	uxtb	r2, r3
 8010b52:	7ffb      	ldrb	r3, [r7, #31]
 8010b54:	4013      	ands	r3, r2
 8010b56:	77fb      	strb	r3, [r7, #31]
    	}
    	for (xi = x; xi <x+wx; xi++) {
 8010b58:	79fb      	ldrb	r3, [r7, #7]
 8010b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8010b5c:	e02d      	b.n	8010bba <ssd1306_FillZone+0xee>
    		int i = yi*SSD1306_WIDTH+xi;
 8010b5e:	6a3b      	ldr	r3, [r7, #32]
 8010b60:	01da      	lsls	r2, r3, #7
 8010b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b64:	4413      	add	r3, r2
 8010b66:	60fb      	str	r3, [r7, #12]
    		if (i>=SSD1306_BUFFER_SIZE) break;
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b6e:	da2c      	bge.n	8010bca <ssd1306_FillZone+0xfe>
    		if (color == Black) {
 8010b70:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d111      	bne.n	8010b9c <ssd1306_FillZone+0xd0>
    			SSD1306_Buffer[i] &= ~b;
 8010b78:	4a1a      	ldr	r2, [pc, #104]	; (8010be4 <ssd1306_FillZone+0x118>)
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	4413      	add	r3, r2
 8010b7e:	781b      	ldrb	r3, [r3, #0]
 8010b80:	b25a      	sxtb	r2, r3
 8010b82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010b86:	43db      	mvns	r3, r3
 8010b88:	b25b      	sxtb	r3, r3
 8010b8a:	4013      	ands	r3, r2
 8010b8c:	b25b      	sxtb	r3, r3
 8010b8e:	b2d9      	uxtb	r1, r3
 8010b90:	4a14      	ldr	r2, [pc, #80]	; (8010be4 <ssd1306_FillZone+0x118>)
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	4413      	add	r3, r2
 8010b96:	460a      	mov	r2, r1
 8010b98:	701a      	strb	r2, [r3, #0]
 8010b9a:	e00b      	b.n	8010bb4 <ssd1306_FillZone+0xe8>
    		} else {
    			SSD1306_Buffer[i] |= b;
 8010b9c:	4a11      	ldr	r2, [pc, #68]	; (8010be4 <ssd1306_FillZone+0x118>)
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	4413      	add	r3, r2
 8010ba2:	781a      	ldrb	r2, [r3, #0]
 8010ba4:	7ffb      	ldrb	r3, [r7, #31]
 8010ba6:	4313      	orrs	r3, r2
 8010ba8:	b2d9      	uxtb	r1, r3
 8010baa:	4a0e      	ldr	r2, [pc, #56]	; (8010be4 <ssd1306_FillZone+0x118>)
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	4413      	add	r3, r2
 8010bb0:	460a      	mov	r2, r1
 8010bb2:	701a      	strb	r2, [r3, #0]
    	for (xi = x; xi <x+wx; xi++) {
 8010bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb6:	3301      	adds	r3, #1
 8010bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8010bba:	79fa      	ldrb	r2, [r7, #7]
 8010bbc:	797b      	ldrb	r3, [r7, #5]
 8010bbe:	4413      	add	r3, r2
 8010bc0:	461a      	mov	r2, r3
 8010bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bc4:	4293      	cmp	r3, r2
 8010bc6:	d3ca      	bcc.n	8010b5e <ssd1306_FillZone+0x92>
 8010bc8:	e000      	b.n	8010bcc <ssd1306_FillZone+0x100>
    		if (i>=SSD1306_BUFFER_SIZE) break;
 8010bca:	bf00      	nop
    for (yi = by; yi < bly; yi++) {
 8010bcc:	6a3b      	ldr	r3, [r7, #32]
 8010bce:	3301      	adds	r3, #1
 8010bd0:	623b      	str	r3, [r7, #32]
 8010bd2:	697b      	ldr	r3, [r7, #20]
 8010bd4:	6a3a      	ldr	r2, [r7, #32]
 8010bd6:	429a      	cmp	r2, r3
 8010bd8:	d397      	bcc.n	8010b0a <ssd1306_FillZone+0x3e>
    		}
    	}
    }

}
 8010bda:	bf00      	nop
 8010bdc:	3728      	adds	r7, #40	; 0x28
 8010bde:	46bd      	mov	sp, r7
 8010be0:	bc90      	pop	{r4, r7}
 8010be2:	4770      	bx	lr
 8010be4:	20004f5c 	.word	0x20004f5c

08010be8 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b082      	sub	sp, #8
 8010bec:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8010bee:	2300      	movs	r3, #0
 8010bf0:	71fb      	strb	r3, [r7, #7]
 8010bf2:	e016      	b.n	8010c22 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8010bf4:	79fb      	ldrb	r3, [r7, #7]
 8010bf6:	3b50      	subs	r3, #80	; 0x50
 8010bf8:	b2db      	uxtb	r3, r3
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f7ff fea8 	bl	8010950 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8010c00:	2000      	movs	r0, #0
 8010c02:	f7ff fea5 	bl	8010950 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8010c06:	2010      	movs	r0, #16
 8010c08:	f7ff fea2 	bl	8010950 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8010c0c:	79fb      	ldrb	r3, [r7, #7]
 8010c0e:	01db      	lsls	r3, r3, #7
 8010c10:	4a07      	ldr	r2, [pc, #28]	; (8010c30 <ssd1306_UpdateScreen+0x48>)
 8010c12:	4413      	add	r3, r2
 8010c14:	2180      	movs	r1, #128	; 0x80
 8010c16:	4618      	mov	r0, r3
 8010c18:	f7ff feb2 	bl	8010980 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8010c1c:	79fb      	ldrb	r3, [r7, #7]
 8010c1e:	3301      	adds	r3, #1
 8010c20:	71fb      	strb	r3, [r7, #7]
 8010c22:	79fb      	ldrb	r3, [r7, #7]
 8010c24:	2b03      	cmp	r3, #3
 8010c26:	d9e5      	bls.n	8010bf4 <ssd1306_UpdateScreen+0xc>
    }
}
 8010c28:	bf00      	nop
 8010c2a:	3708      	adds	r7, #8
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}
 8010c30:	20004f5c 	.word	0x20004f5c

08010c34 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8010c34:	b480      	push	{r7}
 8010c36:	b083      	sub	sp, #12
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	71fb      	strb	r3, [r7, #7]
 8010c3e:	460b      	mov	r3, r1
 8010c40:	71bb      	strb	r3, [r7, #6]
 8010c42:	4613      	mov	r3, r2
 8010c44:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8010c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	db48      	blt.n	8010ce0 <ssd1306_DrawPixel+0xac>
 8010c4e:	79bb      	ldrb	r3, [r7, #6]
 8010c50:	2b1f      	cmp	r3, #31
 8010c52:	d845      	bhi.n	8010ce0 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8010c54:	4b25      	ldr	r3, [pc, #148]	; (8010cec <ssd1306_DrawPixel+0xb8>)
 8010c56:	791b      	ldrb	r3, [r3, #4]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d006      	beq.n	8010c6a <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8010c5c:	797b      	ldrb	r3, [r7, #5]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	bf0c      	ite	eq
 8010c62:	2301      	moveq	r3, #1
 8010c64:	2300      	movne	r3, #0
 8010c66:	b2db      	uxtb	r3, r3
 8010c68:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8010c6a:	797b      	ldrb	r3, [r7, #5]
 8010c6c:	2b01      	cmp	r3, #1
 8010c6e:	d11a      	bne.n	8010ca6 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8010c70:	79fa      	ldrb	r2, [r7, #7]
 8010c72:	79bb      	ldrb	r3, [r7, #6]
 8010c74:	08db      	lsrs	r3, r3, #3
 8010c76:	b2d8      	uxtb	r0, r3
 8010c78:	4603      	mov	r3, r0
 8010c7a:	01db      	lsls	r3, r3, #7
 8010c7c:	4413      	add	r3, r2
 8010c7e:	4a1c      	ldr	r2, [pc, #112]	; (8010cf0 <ssd1306_DrawPixel+0xbc>)
 8010c80:	5cd3      	ldrb	r3, [r2, r3]
 8010c82:	b25a      	sxtb	r2, r3
 8010c84:	79bb      	ldrb	r3, [r7, #6]
 8010c86:	f003 0307 	and.w	r3, r3, #7
 8010c8a:	2101      	movs	r1, #1
 8010c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8010c90:	b25b      	sxtb	r3, r3
 8010c92:	4313      	orrs	r3, r2
 8010c94:	b259      	sxtb	r1, r3
 8010c96:	79fa      	ldrb	r2, [r7, #7]
 8010c98:	4603      	mov	r3, r0
 8010c9a:	01db      	lsls	r3, r3, #7
 8010c9c:	4413      	add	r3, r2
 8010c9e:	b2c9      	uxtb	r1, r1
 8010ca0:	4a13      	ldr	r2, [pc, #76]	; (8010cf0 <ssd1306_DrawPixel+0xbc>)
 8010ca2:	54d1      	strb	r1, [r2, r3]
 8010ca4:	e01d      	b.n	8010ce2 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8010ca6:	79fa      	ldrb	r2, [r7, #7]
 8010ca8:	79bb      	ldrb	r3, [r7, #6]
 8010caa:	08db      	lsrs	r3, r3, #3
 8010cac:	b2d8      	uxtb	r0, r3
 8010cae:	4603      	mov	r3, r0
 8010cb0:	01db      	lsls	r3, r3, #7
 8010cb2:	4413      	add	r3, r2
 8010cb4:	4a0e      	ldr	r2, [pc, #56]	; (8010cf0 <ssd1306_DrawPixel+0xbc>)
 8010cb6:	5cd3      	ldrb	r3, [r2, r3]
 8010cb8:	b25a      	sxtb	r2, r3
 8010cba:	79bb      	ldrb	r3, [r7, #6]
 8010cbc:	f003 0307 	and.w	r3, r3, #7
 8010cc0:	2101      	movs	r1, #1
 8010cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8010cc6:	b25b      	sxtb	r3, r3
 8010cc8:	43db      	mvns	r3, r3
 8010cca:	b25b      	sxtb	r3, r3
 8010ccc:	4013      	ands	r3, r2
 8010cce:	b259      	sxtb	r1, r3
 8010cd0:	79fa      	ldrb	r2, [r7, #7]
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	01db      	lsls	r3, r3, #7
 8010cd6:	4413      	add	r3, r2
 8010cd8:	b2c9      	uxtb	r1, r1
 8010cda:	4a05      	ldr	r2, [pc, #20]	; (8010cf0 <ssd1306_DrawPixel+0xbc>)
 8010cdc:	54d1      	strb	r1, [r2, r3]
 8010cde:	e000      	b.n	8010ce2 <ssd1306_DrawPixel+0xae>
        return;
 8010ce0:	bf00      	nop
    }
}
 8010ce2:	370c      	adds	r7, #12
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cea:	4770      	bx	lr
 8010cec:	2000515c 	.word	0x2000515c
 8010cf0:	20004f5c 	.word	0x20004f5c

08010cf4 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8010cf4:	b590      	push	{r4, r7, lr}
 8010cf6:	b089      	sub	sp, #36	; 0x24
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	4604      	mov	r4, r0
 8010cfc:	1d38      	adds	r0, r7, #4
 8010cfe:	e880 0006 	stmia.w	r0, {r1, r2}
 8010d02:	461a      	mov	r2, r3
 8010d04:	4623      	mov	r3, r4
 8010d06:	73fb      	strb	r3, [r7, #15]
 8010d08:	4613      	mov	r3, r2
 8010d0a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8010d0c:	7bfb      	ldrb	r3, [r7, #15]
 8010d0e:	2b1f      	cmp	r3, #31
 8010d10:	d902      	bls.n	8010d18 <ssd1306_WriteChar+0x24>
 8010d12:	7bfb      	ldrb	r3, [r7, #15]
 8010d14:	2b7e      	cmp	r3, #126	; 0x7e
 8010d16:	d901      	bls.n	8010d1c <ssd1306_WriteChar+0x28>
        return 0;
 8010d18:	2300      	movs	r3, #0
 8010d1a:	e06d      	b.n	8010df8 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8010d1c:	4b38      	ldr	r3, [pc, #224]	; (8010e00 <ssd1306_WriteChar+0x10c>)
 8010d1e:	881b      	ldrh	r3, [r3, #0]
 8010d20:	461a      	mov	r2, r3
 8010d22:	793b      	ldrb	r3, [r7, #4]
 8010d24:	4413      	add	r3, r2
 8010d26:	2b80      	cmp	r3, #128	; 0x80
 8010d28:	dc06      	bgt.n	8010d38 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8010d2a:	4b35      	ldr	r3, [pc, #212]	; (8010e00 <ssd1306_WriteChar+0x10c>)
 8010d2c:	885b      	ldrh	r3, [r3, #2]
 8010d2e:	461a      	mov	r2, r3
 8010d30:	797b      	ldrb	r3, [r7, #5]
 8010d32:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8010d34:	2b20      	cmp	r3, #32
 8010d36:	dd01      	ble.n	8010d3c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	e05d      	b.n	8010df8 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	61fb      	str	r3, [r7, #28]
 8010d40:	e04c      	b.n	8010ddc <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8010d42:	68ba      	ldr	r2, [r7, #8]
 8010d44:	7bfb      	ldrb	r3, [r7, #15]
 8010d46:	3b20      	subs	r3, #32
 8010d48:	7979      	ldrb	r1, [r7, #5]
 8010d4a:	fb01 f303 	mul.w	r3, r1, r3
 8010d4e:	4619      	mov	r1, r3
 8010d50:	69fb      	ldr	r3, [r7, #28]
 8010d52:	440b      	add	r3, r1
 8010d54:	005b      	lsls	r3, r3, #1
 8010d56:	4413      	add	r3, r2
 8010d58:	881b      	ldrh	r3, [r3, #0]
 8010d5a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8010d5c:	2300      	movs	r3, #0
 8010d5e:	61bb      	str	r3, [r7, #24]
 8010d60:	e034      	b.n	8010dcc <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8010d62:	697a      	ldr	r2, [r7, #20]
 8010d64:	69bb      	ldr	r3, [r7, #24]
 8010d66:	fa02 f303 	lsl.w	r3, r2, r3
 8010d6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d012      	beq.n	8010d98 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8010d72:	4b23      	ldr	r3, [pc, #140]	; (8010e00 <ssd1306_WriteChar+0x10c>)
 8010d74:	881b      	ldrh	r3, [r3, #0]
 8010d76:	b2da      	uxtb	r2, r3
 8010d78:	69bb      	ldr	r3, [r7, #24]
 8010d7a:	b2db      	uxtb	r3, r3
 8010d7c:	4413      	add	r3, r2
 8010d7e:	b2d8      	uxtb	r0, r3
 8010d80:	4b1f      	ldr	r3, [pc, #124]	; (8010e00 <ssd1306_WriteChar+0x10c>)
 8010d82:	885b      	ldrh	r3, [r3, #2]
 8010d84:	b2da      	uxtb	r2, r3
 8010d86:	69fb      	ldr	r3, [r7, #28]
 8010d88:	b2db      	uxtb	r3, r3
 8010d8a:	4413      	add	r3, r2
 8010d8c:	b2db      	uxtb	r3, r3
 8010d8e:	7bba      	ldrb	r2, [r7, #14]
 8010d90:	4619      	mov	r1, r3
 8010d92:	f7ff ff4f 	bl	8010c34 <ssd1306_DrawPixel>
 8010d96:	e016      	b.n	8010dc6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8010d98:	4b19      	ldr	r3, [pc, #100]	; (8010e00 <ssd1306_WriteChar+0x10c>)
 8010d9a:	881b      	ldrh	r3, [r3, #0]
 8010d9c:	b2da      	uxtb	r2, r3
 8010d9e:	69bb      	ldr	r3, [r7, #24]
 8010da0:	b2db      	uxtb	r3, r3
 8010da2:	4413      	add	r3, r2
 8010da4:	b2d8      	uxtb	r0, r3
 8010da6:	4b16      	ldr	r3, [pc, #88]	; (8010e00 <ssd1306_WriteChar+0x10c>)
 8010da8:	885b      	ldrh	r3, [r3, #2]
 8010daa:	b2da      	uxtb	r2, r3
 8010dac:	69fb      	ldr	r3, [r7, #28]
 8010dae:	b2db      	uxtb	r3, r3
 8010db0:	4413      	add	r3, r2
 8010db2:	b2d9      	uxtb	r1, r3
 8010db4:	7bbb      	ldrb	r3, [r7, #14]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	bf0c      	ite	eq
 8010dba:	2301      	moveq	r3, #1
 8010dbc:	2300      	movne	r3, #0
 8010dbe:	b2db      	uxtb	r3, r3
 8010dc0:	461a      	mov	r2, r3
 8010dc2:	f7ff ff37 	bl	8010c34 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8010dc6:	69bb      	ldr	r3, [r7, #24]
 8010dc8:	3301      	adds	r3, #1
 8010dca:	61bb      	str	r3, [r7, #24]
 8010dcc:	793b      	ldrb	r3, [r7, #4]
 8010dce:	461a      	mov	r2, r3
 8010dd0:	69bb      	ldr	r3, [r7, #24]
 8010dd2:	4293      	cmp	r3, r2
 8010dd4:	d3c5      	bcc.n	8010d62 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8010dd6:	69fb      	ldr	r3, [r7, #28]
 8010dd8:	3301      	adds	r3, #1
 8010dda:	61fb      	str	r3, [r7, #28]
 8010ddc:	797b      	ldrb	r3, [r7, #5]
 8010dde:	461a      	mov	r2, r3
 8010de0:	69fb      	ldr	r3, [r7, #28]
 8010de2:	4293      	cmp	r3, r2
 8010de4:	d3ad      	bcc.n	8010d42 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8010de6:	4b06      	ldr	r3, [pc, #24]	; (8010e00 <ssd1306_WriteChar+0x10c>)
 8010de8:	881a      	ldrh	r2, [r3, #0]
 8010dea:	793b      	ldrb	r3, [r7, #4]
 8010dec:	b29b      	uxth	r3, r3
 8010dee:	4413      	add	r3, r2
 8010df0:	b29a      	uxth	r2, r3
 8010df2:	4b03      	ldr	r3, [pc, #12]	; (8010e00 <ssd1306_WriteChar+0x10c>)
 8010df4:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8010df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010df8:	4618      	mov	r0, r3
 8010dfa:	3724      	adds	r7, #36	; 0x24
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bd90      	pop	{r4, r7, pc}
 8010e00:	2000515c 	.word	0x2000515c

08010e04 <ssd1306_WriteString>:
    }

    // Everything ok
    return *str;
}
char ssd1306_WriteString(const char* str, FontDef Font, SSD1306_COLOR color) {
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b084      	sub	sp, #16
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	60f8      	str	r0, [r7, #12]
 8010e0c:	1d38      	adds	r0, r7, #4
 8010e0e:	e880 0006 	stmia.w	r0, {r1, r2}
 8010e12:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8010e14:	e012      	b.n	8010e3c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	7818      	ldrb	r0, [r3, #0]
 8010e1a:	78fb      	ldrb	r3, [r7, #3]
 8010e1c:	1d3a      	adds	r2, r7, #4
 8010e1e:	ca06      	ldmia	r2, {r1, r2}
 8010e20:	f7ff ff68 	bl	8010cf4 <ssd1306_WriteChar>
 8010e24:	4603      	mov	r3, r0
 8010e26:	461a      	mov	r2, r3
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	781b      	ldrb	r3, [r3, #0]
 8010e2c:	429a      	cmp	r2, r3
 8010e2e:	d002      	beq.n	8010e36 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	781b      	ldrb	r3, [r3, #0]
 8010e34:	e008      	b.n	8010e48 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	3301      	adds	r3, #1
 8010e3a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	781b      	ldrb	r3, [r3, #0]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d1e8      	bne.n	8010e16 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	781b      	ldrb	r3, [r3, #0]
}
 8010e48:	4618      	mov	r0, r3
 8010e4a:	3710      	adds	r7, #16
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd80      	pop	{r7, pc}

08010e50 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8010e50:	b480      	push	{r7}
 8010e52:	b083      	sub	sp, #12
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	4603      	mov	r3, r0
 8010e58:	460a      	mov	r2, r1
 8010e5a:	71fb      	strb	r3, [r7, #7]
 8010e5c:	4613      	mov	r3, r2
 8010e5e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8010e60:	79fb      	ldrb	r3, [r7, #7]
 8010e62:	b29a      	uxth	r2, r3
 8010e64:	4b05      	ldr	r3, [pc, #20]	; (8010e7c <ssd1306_SetCursor+0x2c>)
 8010e66:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8010e68:	79bb      	ldrb	r3, [r7, #6]
 8010e6a:	b29a      	uxth	r2, r3
 8010e6c:	4b03      	ldr	r3, [pc, #12]	; (8010e7c <ssd1306_SetCursor+0x2c>)
 8010e6e:	805a      	strh	r2, [r3, #2]
}
 8010e70:	bf00      	nop
 8010e72:	370c      	adds	r7, #12
 8010e74:	46bd      	mov	sp, r7
 8010e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7a:	4770      	bx	lr
 8010e7c:	2000515c 	.word	0x2000515c

08010e80 <ssd1306_GetCursorX>:

uint8_t ssd1306_GetCursorX(void)
{
 8010e80:	b480      	push	{r7}
 8010e82:	af00      	add	r7, sp, #0
	return SSD1306.CurrentX;
 8010e84:	4b03      	ldr	r3, [pc, #12]	; (8010e94 <ssd1306_GetCursorX+0x14>)
 8010e86:	881b      	ldrh	r3, [r3, #0]
 8010e88:	b2db      	uxtb	r3, r3
}
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e92:	4770      	bx	lr
 8010e94:	2000515c 	.word	0x2000515c

08010e98 <ssd1306_GetCursorY>:
uint8_t ssd1306_GetCursorY(void)
{
 8010e98:	b480      	push	{r7}
 8010e9a:	af00      	add	r7, sp, #0
	return SSD1306.CurrentY;
 8010e9c:	4b03      	ldr	r3, [pc, #12]	; (8010eac <ssd1306_GetCursorY+0x14>)
 8010e9e:	885b      	ldrh	r3, [r3, #2]
 8010ea0:	b2db      	uxtb	r3, r3
}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eaa:	4770      	bx	lr
 8010eac:	2000515c 	.word	0x2000515c

08010eb0 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8010eb0:	b590      	push	{r4, r7, lr}
 8010eb2:	b089      	sub	sp, #36	; 0x24
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	4604      	mov	r4, r0
 8010eb8:	4608      	mov	r0, r1
 8010eba:	4611      	mov	r1, r2
 8010ebc:	461a      	mov	r2, r3
 8010ebe:	4623      	mov	r3, r4
 8010ec0:	71fb      	strb	r3, [r7, #7]
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	71bb      	strb	r3, [r7, #6]
 8010ec6:	460b      	mov	r3, r1
 8010ec8:	717b      	strb	r3, [r7, #5]
 8010eca:	4613      	mov	r3, r2
 8010ecc:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8010ece:	797a      	ldrb	r2, [r7, #5]
 8010ed0:	79fb      	ldrb	r3, [r7, #7]
 8010ed2:	1ad3      	subs	r3, r2, r3
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	bfb8      	it	lt
 8010ed8:	425b      	neglt	r3, r3
 8010eda:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8010edc:	793a      	ldrb	r2, [r7, #4]
 8010ede:	79bb      	ldrb	r3, [r7, #6]
 8010ee0:	1ad3      	subs	r3, r2, r3
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	bfb8      	it	lt
 8010ee6:	425b      	neglt	r3, r3
 8010ee8:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8010eea:	79fa      	ldrb	r2, [r7, #7]
 8010eec:	797b      	ldrb	r3, [r7, #5]
 8010eee:	429a      	cmp	r2, r3
 8010ef0:	d201      	bcs.n	8010ef6 <ssd1306_Line+0x46>
 8010ef2:	2301      	movs	r3, #1
 8010ef4:	e001      	b.n	8010efa <ssd1306_Line+0x4a>
 8010ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010efa:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 8010efc:	79ba      	ldrb	r2, [r7, #6]
 8010efe:	793b      	ldrb	r3, [r7, #4]
 8010f00:	429a      	cmp	r2, r3
 8010f02:	d201      	bcs.n	8010f08 <ssd1306_Line+0x58>
 8010f04:	2301      	movs	r3, #1
 8010f06:	e001      	b.n	8010f0c <ssd1306_Line+0x5c>
 8010f08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010f0c:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 8010f0e:	69ba      	ldr	r2, [r7, #24]
 8010f10:	697b      	ldr	r3, [r7, #20]
 8010f12:	1ad3      	subs	r3, r2, r3
 8010f14:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 8010f16:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8010f1a:	7939      	ldrb	r1, [r7, #4]
 8010f1c:	797b      	ldrb	r3, [r7, #5]
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f7ff fe88 	bl	8010c34 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8010f24:	e024      	b.n	8010f70 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8010f26:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8010f2a:	79b9      	ldrb	r1, [r7, #6]
 8010f2c:	79fb      	ldrb	r3, [r7, #7]
 8010f2e:	4618      	mov	r0, r3
 8010f30:	f7ff fe80 	bl	8010c34 <ssd1306_DrawPixel>
    error2 = error * 2;
 8010f34:	69fb      	ldr	r3, [r7, #28]
 8010f36:	005b      	lsls	r3, r3, #1
 8010f38:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 8010f3a:	697b      	ldr	r3, [r7, #20]
 8010f3c:	425b      	negs	r3, r3
 8010f3e:	68ba      	ldr	r2, [r7, #8]
 8010f40:	429a      	cmp	r2, r3
 8010f42:	dd08      	ble.n	8010f56 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8010f44:	69fa      	ldr	r2, [r7, #28]
 8010f46:	697b      	ldr	r3, [r7, #20]
 8010f48:	1ad3      	subs	r3, r2, r3
 8010f4a:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 8010f4c:	693b      	ldr	r3, [r7, #16]
 8010f4e:	b2da      	uxtb	r2, r3
 8010f50:	79fb      	ldrb	r3, [r7, #7]
 8010f52:	4413      	add	r3, r2
 8010f54:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 8010f56:	68ba      	ldr	r2, [r7, #8]
 8010f58:	69bb      	ldr	r3, [r7, #24]
 8010f5a:	429a      	cmp	r2, r3
 8010f5c:	da08      	bge.n	8010f70 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 8010f5e:	69fa      	ldr	r2, [r7, #28]
 8010f60:	69bb      	ldr	r3, [r7, #24]
 8010f62:	4413      	add	r3, r2
 8010f64:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	b2da      	uxtb	r2, r3
 8010f6a:	79bb      	ldrb	r3, [r7, #6]
 8010f6c:	4413      	add	r3, r2
 8010f6e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8010f70:	79fa      	ldrb	r2, [r7, #7]
 8010f72:	797b      	ldrb	r3, [r7, #5]
 8010f74:	429a      	cmp	r2, r3
 8010f76:	d1d6      	bne.n	8010f26 <ssd1306_Line+0x76>
 8010f78:	79ba      	ldrb	r2, [r7, #6]
 8010f7a:	793b      	ldrb	r3, [r7, #4]
 8010f7c:	429a      	cmp	r2, r3
 8010f7e:	d1d2      	bne.n	8010f26 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 8010f80:	bf00      	nop
}
 8010f82:	3724      	adds	r7, #36	; 0x24
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd90      	pop	{r4, r7, pc}

08010f88 <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8010f88:	b590      	push	{r4, r7, lr}
 8010f8a:	b085      	sub	sp, #20
 8010f8c:	af02      	add	r7, sp, #8
 8010f8e:	4604      	mov	r4, r0
 8010f90:	4608      	mov	r0, r1
 8010f92:	4611      	mov	r1, r2
 8010f94:	461a      	mov	r2, r3
 8010f96:	4623      	mov	r3, r4
 8010f98:	71fb      	strb	r3, [r7, #7]
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	71bb      	strb	r3, [r7, #6]
 8010f9e:	460b      	mov	r3, r1
 8010fa0:	717b      	strb	r3, [r7, #5]
 8010fa2:	4613      	mov	r3, r2
 8010fa4:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 8010fa6:	79bc      	ldrb	r4, [r7, #6]
 8010fa8:	797a      	ldrb	r2, [r7, #5]
 8010faa:	79b9      	ldrb	r1, [r7, #6]
 8010fac:	79f8      	ldrb	r0, [r7, #7]
 8010fae:	7e3b      	ldrb	r3, [r7, #24]
 8010fb0:	9300      	str	r3, [sp, #0]
 8010fb2:	4623      	mov	r3, r4
 8010fb4:	f7ff ff7c 	bl	8010eb0 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8010fb8:	793c      	ldrb	r4, [r7, #4]
 8010fba:	797a      	ldrb	r2, [r7, #5]
 8010fbc:	79b9      	ldrb	r1, [r7, #6]
 8010fbe:	7978      	ldrb	r0, [r7, #5]
 8010fc0:	7e3b      	ldrb	r3, [r7, #24]
 8010fc2:	9300      	str	r3, [sp, #0]
 8010fc4:	4623      	mov	r3, r4
 8010fc6:	f7ff ff73 	bl	8010eb0 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 8010fca:	793c      	ldrb	r4, [r7, #4]
 8010fcc:	79fa      	ldrb	r2, [r7, #7]
 8010fce:	7939      	ldrb	r1, [r7, #4]
 8010fd0:	7978      	ldrb	r0, [r7, #5]
 8010fd2:	7e3b      	ldrb	r3, [r7, #24]
 8010fd4:	9300      	str	r3, [sp, #0]
 8010fd6:	4623      	mov	r3, r4
 8010fd8:	f7ff ff6a 	bl	8010eb0 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 8010fdc:	79bc      	ldrb	r4, [r7, #6]
 8010fde:	79fa      	ldrb	r2, [r7, #7]
 8010fe0:	7939      	ldrb	r1, [r7, #4]
 8010fe2:	79f8      	ldrb	r0, [r7, #7]
 8010fe4:	7e3b      	ldrb	r3, [r7, #24]
 8010fe6:	9300      	str	r3, [sp, #0]
 8010fe8:	4623      	mov	r3, r4
 8010fea:	f7ff ff61 	bl	8010eb0 <ssd1306_Line>

  return;
 8010fee:	bf00      	nop
}
 8010ff0:	370c      	adds	r7, #12
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	bd90      	pop	{r4, r7, pc}

08010ff6 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8010ff6:	b580      	push	{r7, lr}
 8010ff8:	b084      	sub	sp, #16
 8010ffa:	af00      	add	r7, sp, #0
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8011000:	2381      	movs	r3, #129	; 0x81
 8011002:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8011004:	7bfb      	ldrb	r3, [r7, #15]
 8011006:	4618      	mov	r0, r3
 8011008:	f7ff fca2 	bl	8010950 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 801100c:	79fb      	ldrb	r3, [r7, #7]
 801100e:	4618      	mov	r0, r3
 8011010:	f7ff fc9e 	bl	8010950 <ssd1306_WriteCommand>
}
 8011014:	bf00      	nop
 8011016:	3710      	adds	r7, #16
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}

0801101c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 801101c:	b580      	push	{r7, lr}
 801101e:	b084      	sub	sp, #16
 8011020:	af00      	add	r7, sp, #0
 8011022:	4603      	mov	r3, r0
 8011024:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8011026:	79fb      	ldrb	r3, [r7, #7]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d005      	beq.n	8011038 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 801102c:	23af      	movs	r3, #175	; 0xaf
 801102e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8011030:	4b08      	ldr	r3, [pc, #32]	; (8011054 <ssd1306_SetDisplayOn+0x38>)
 8011032:	2201      	movs	r2, #1
 8011034:	719a      	strb	r2, [r3, #6]
 8011036:	e004      	b.n	8011042 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8011038:	23ae      	movs	r3, #174	; 0xae
 801103a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 801103c:	4b05      	ldr	r3, [pc, #20]	; (8011054 <ssd1306_SetDisplayOn+0x38>)
 801103e:	2200      	movs	r2, #0
 8011040:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8011042:	7bfb      	ldrb	r3, [r7, #15]
 8011044:	4618      	mov	r0, r3
 8011046:	f7ff fc83 	bl	8010950 <ssd1306_WriteCommand>
}
 801104a:	bf00      	nop
 801104c:	3710      	adds	r7, #16
 801104e:	46bd      	mov	sp, r7
 8011050:	bd80      	pop	{r7, pc}
 8011052:	bf00      	nop
 8011054:	2000515c 	.word	0x2000515c

08011058 <itm_debug1>:
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b086      	sub	sp, #24
 801105c:	af02      	add	r7, sp, #8
 801105e:	60f8      	str	r0, [r7, #12]
 8011060:	60b9      	str	r1, [r7, #8]
 8011062:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8011064:	4b08      	ldr	r3, [pc, #32]	; (8011088 <itm_debug1+0x30>)
 8011066:	681a      	ldr	r2, [r3, #0]
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	4013      	ands	r3, r2
 801106c:	2b00      	cmp	r3, #0
 801106e:	d007      	beq.n	8011080 <itm_debug1+0x28>
 8011070:	2301      	movs	r3, #1
 8011072:	9300      	str	r3, [sp, #0]
 8011074:	2300      	movs	r3, #0
 8011076:	2200      	movs	r2, #0
 8011078:	6879      	ldr	r1, [r7, #4]
 801107a:	68b8      	ldr	r0, [r7, #8]
 801107c:	f007 fef4 	bl	8018e68 <_itm_debug3>
}
 8011080:	bf00      	nop
 8011082:	3710      	adds	r7, #16
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}
 8011088:	200005a4 	.word	0x200005a4

0801108c <itm_debug2>:
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b086      	sub	sp, #24
 8011090:	af02      	add	r7, sp, #8
 8011092:	60f8      	str	r0, [r7, #12]
 8011094:	60b9      	str	r1, [r7, #8]
 8011096:	607a      	str	r2, [r7, #4]
 8011098:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 801109a:	4b09      	ldr	r3, [pc, #36]	; (80110c0 <itm_debug2+0x34>)
 801109c:	681a      	ldr	r2, [r3, #0]
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	4013      	ands	r3, r2
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d007      	beq.n	80110b6 <itm_debug2+0x2a>
 80110a6:	2302      	movs	r3, #2
 80110a8:	9300      	str	r3, [sp, #0]
 80110aa:	2300      	movs	r3, #0
 80110ac:	683a      	ldr	r2, [r7, #0]
 80110ae:	6879      	ldr	r1, [r7, #4]
 80110b0:	68b8      	ldr	r0, [r7, #8]
 80110b2:	f007 fed9 	bl	8018e68 <_itm_debug3>
}
 80110b6:	bf00      	nop
 80110b8:	3710      	adds	r7, #16
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd80      	pop	{r7, pc}
 80110be:	bf00      	nop
 80110c0:	200005a4 	.word	0x200005a4

080110c4 <itm_debug3>:
static inline void itm_debug3(uint32_t f, const char *msg, int v1, int v2, int v3)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b086      	sub	sp, #24
 80110c8:	af02      	add	r7, sp, #8
 80110ca:	60f8      	str	r0, [r7, #12]
 80110cc:	60b9      	str	r1, [r7, #8]
 80110ce:	607a      	str	r2, [r7, #4]
 80110d0:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 80110d2:	4b09      	ldr	r3, [pc, #36]	; (80110f8 <itm_debug3+0x34>)
 80110d4:	681a      	ldr	r2, [r3, #0]
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	4013      	ands	r3, r2
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d007      	beq.n	80110ee <itm_debug3+0x2a>
 80110de:	2303      	movs	r3, #3
 80110e0:	9300      	str	r3, [sp, #0]
 80110e2:	69bb      	ldr	r3, [r7, #24]
 80110e4:	683a      	ldr	r2, [r7, #0]
 80110e6:	6879      	ldr	r1, [r7, #4]
 80110e8:	68b8      	ldr	r0, [r7, #8]
 80110ea:	f007 febd 	bl	8018e68 <_itm_debug3>
}
 80110ee:	bf00      	nop
 80110f0:	3710      	adds	r7, #16
 80110f2:	46bd      	mov	sp, r7
 80110f4:	bd80      	pop	{r7, pc}
 80110f6:	bf00      	nop
 80110f8:	200005a4 	.word	0x200005a4

080110fc <mqf_read_to_ina3221>:

LFMQUEUE_DEF_H(to_ui, msg_64_t)
LFMQUEUE_DEF_H(from_ui, msg_64_t)


LFMQUEUE_DEF_H(to_ina3221, msg_64_t)
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b082      	sub	sp, #8
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
 8011104:	6879      	ldr	r1, [r7, #4]
 8011106:	4804      	ldr	r0, [pc, #16]	; (8011118 <mqf_read_to_ina3221+0x1c>)
 8011108:	f008 f82e 	bl	8019168 <mqf_read>
 801110c:	4603      	mov	r3, r0
 801110e:	4618      	mov	r0, r3
 8011110:	3708      	adds	r7, #8
 8011112:	46bd      	mov	sp, r7
 8011114:	bd80      	pop	{r7, pc}
 8011116:	bf00      	nop
 8011118:	20000584 	.word	0x20000584

0801111c <mqf_write_from_ina3221>:
LFMQUEUE_DEF_H(from_ina3221, msg_64_t)
 801111c:	b580      	push	{r7, lr}
 801111e:	b082      	sub	sp, #8
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
 8011124:	6879      	ldr	r1, [r7, #4]
 8011126:	4804      	ldr	r0, [pc, #16]	; (8011138 <mqf_write_from_ina3221+0x1c>)
 8011128:	f007 ffa4 	bl	8019074 <mqf_write>
 801112c:	4603      	mov	r3, r0
 801112e:	4618      	mov	r0, r3
 8011130:	3708      	adds	r7, #8
 8011132:	46bd      	mov	sp, r7
 8011134:	bd80      	pop	{r7, pc}
 8011136:	bf00      	nop
 8011138:	20000590 	.word	0x20000590

0801113c <bkpoint>:
#ifndef INA3221_TASKRD
#error hu?
#endif

static void bkpoint(int loc, int err)
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b082      	sub	sp, #8
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
 8011144:	6039      	str	r1, [r7, #0]
	itm_debug2(DBG_ERR|DBG_INA3221, "INA ERR", loc, err);
 8011146:	683b      	ldr	r3, [r7, #0]
 8011148:	687a      	ldr	r2, [r7, #4]
 801114a:	4904      	ldr	r1, [pc, #16]	; (801115c <bkpoint+0x20>)
 801114c:	4804      	ldr	r0, [pc, #16]	; (8011160 <bkpoint+0x24>)
 801114e:	f7ff ff9d 	bl	801108c <itm_debug2>
}
 8011152:	bf00      	nop
 8011154:	3708      	adds	r7, #8
 8011156:	46bd      	mov	sp, r7
 8011158:	bd80      	pop	{r7, pc}
 801115a:	bf00      	nop
 801115c:	080195a0 	.word	0x080195a0
 8011160:	80000020 	.word	0x80000020

08011164 <run_ina_task>:
static void handle_ina_notif(uint32_t notif);

static 	ina_state_t state = state_idle;

static void run_ina_task(void)
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b086      	sub	sp, #24
 8011168:	af00      	add	r7, sp, #0
	ina3221_init_and_configure();
 801116a:	f000 fdd5 	bl	8011d18 <ina3221_init_and_configure>
	_UNUSED_ int nstuck = 0;
 801116e:	2300      	movs	r3, #0
 8011170:	617b      	str	r3, [r7, #20]
	for (;;) {
		uint32_t notif = 0;
 8011172:	2300      	movs	r3, #0
 8011174:	60fb      	str	r3, [r7, #12]
		xTaskNotifyWait(0, 0xFFFFFFFF, &notif, portMAX_DELAY);
 8011176:	f107 020c 	add.w	r2, r7, #12
 801117a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801117e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011182:	2000      	movs	r0, #0
 8011184:	f7fd fe02 	bl	800ed8c <xTaskNotifyWait>
		handle_ina_notif(notif);
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	4618      	mov	r0, r3
 801118c:	f000 f828 	bl	80111e0 <handle_ina_notif>

		for (;;) {
			msg_64_t m;
			int rc = mqf_read_to_ina3221(&m);
 8011190:	463b      	mov	r3, r7
 8011192:	4618      	mov	r0, r3
 8011194:	f7ff ffb2 	bl	80110fc <mqf_read_to_ina3221>
 8011198:	6138      	str	r0, [r7, #16]
			if (rc) break;
 801119a:	693b      	ldr	r3, [r7, #16]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d000      	beq.n	80111a2 <run_ina_task+0x3e>
	for (;;) {
 80111a0:	e7e7      	b.n	8011172 <run_ina_task+0xe>
			switch (m.cmd) {
 80111a2:	78bb      	ldrb	r3, [r7, #2]
 80111a4:	2bfc      	cmp	r3, #252	; 0xfc
 80111a6:	d004      	beq.n	80111b2 <run_ina_task+0x4e>
 80111a8:	2bfc      	cmp	r3, #252	; 0xfc
 80111aa:	db10      	blt.n	80111ce <run_ina_task+0x6a>
 80111ac:	3bfe      	subs	r3, #254	; 0xfe
 80111ae:	2b01      	cmp	r3, #1
					testerAddr = m.from;
				}
				continue;
				break;
			default:
				break;
 80111b0:	e00d      	b.n	80111ce <run_ina_task+0x6a>
				if (run_mode != m.v1u) {
 80111b2:	4b09      	ldr	r3, [pc, #36]	; (80111d8 <run_ina_task+0x74>)
 80111b4:	781b      	ldrb	r3, [r3, #0]
 80111b6:	b29a      	uxth	r2, r3
 80111b8:	88bb      	ldrh	r3, [r7, #4]
 80111ba:	429a      	cmp	r2, r3
 80111bc:	d009      	beq.n	80111d2 <run_ina_task+0x6e>
					run_mode = m.v1u;
 80111be:	88bb      	ldrh	r3, [r7, #4]
 80111c0:	b2da      	uxtb	r2, r3
 80111c2:	4b05      	ldr	r3, [pc, #20]	; (80111d8 <run_ina_task+0x74>)
 80111c4:	701a      	strb	r2, [r3, #0]
					testerAddr = m.from;
 80111c6:	787a      	ldrb	r2, [r7, #1]
 80111c8:	4b04      	ldr	r3, [pc, #16]	; (80111dc <run_ina_task+0x78>)
 80111ca:	701a      	strb	r2, [r3, #0]
				continue;
 80111cc:	e001      	b.n	80111d2 <run_ina_task+0x6e>
				break;
 80111ce:	bf00      	nop
 80111d0:	e7de      	b.n	8011190 <run_ina_task+0x2c>
				continue;
 80111d2:	bf00      	nop
		for (;;) {
 80111d4:	e7dc      	b.n	8011190 <run_ina_task+0x2c>
 80111d6:	bf00      	nop
 80111d8:	20005164 	.word	0x20005164
 80111dc:	20005165 	.word	0x20005165

080111e0 <handle_ina_notif>:
		}
	}
}

static void handle_ina_notif(uint32_t notif)
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b088      	sub	sp, #32
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
				continue;
			}
		}
#endif // INA3221_CONTIUNOUS
	}
	if (notif & NOTIF_INA_WRCOMPL) {
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	f003 0310 	and.w	r3, r3, #16
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d035      	beq.n	801125e <handle_ina_notif+0x7e>
		itm_debug1(DBG_INA3221, "WRcpl", state);
 80111f2:	4b74      	ldr	r3, [pc, #464]	; (80113c4 <handle_ina_notif+0x1e4>)
 80111f4:	781b      	ldrb	r3, [r3, #0]
 80111f6:	461a      	mov	r2, r3
 80111f8:	4973      	ldr	r1, [pc, #460]	; (80113c8 <handle_ina_notif+0x1e8>)
 80111fa:	2020      	movs	r0, #32
 80111fc:	f7ff ff2c 	bl	8011058 <itm_debug1>
		if ((state >= state_trig_0) && (state <= state_trig_3)) {
 8011200:	4b70      	ldr	r3, [pc, #448]	; (80113c4 <handle_ina_notif+0x1e4>)
 8011202:	781b      	ldrb	r3, [r3, #0]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d023      	beq.n	8011250 <handle_ina_notif+0x70>
 8011208:	4b6e      	ldr	r3, [pc, #440]	; (80113c4 <handle_ina_notif+0x1e4>)
 801120a:	781b      	ldrb	r3, [r3, #0]
 801120c:	2b04      	cmp	r3, #4
 801120e:	d81f      	bhi.n	8011250 <handle_ina_notif+0x70>
			int dev = state - state_trig_0;
 8011210:	4b6c      	ldr	r3, [pc, #432]	; (80113c4 <handle_ina_notif+0x1e4>)
 8011212:	781b      	ldrb	r3, [r3, #0]
 8011214:	3b01      	subs	r3, #1
 8011216:	61fb      	str	r3, [r7, #28]
			dev = _next_dev(dev);
 8011218:	69f8      	ldr	r0, [r7, #28]
 801121a:	f000 f8e3 	bl	80113e4 <_next_dev>
 801121e:	61f8      	str	r0, [r7, #28]
			if (dev >= 0) {
 8011220:	69fb      	ldr	r3, [r7, #28]
 8011222:	2b00      	cmp	r3, #0
 8011224:	db10      	blt.n	8011248 <handle_ina_notif+0x68>
				state = dev + state_trig_0;
 8011226:	69fb      	ldr	r3, [r7, #28]
 8011228:	b2db      	uxtb	r3, r3
 801122a:	3301      	adds	r3, #1
 801122c:	b2da      	uxtb	r2, r3
 801122e:	4b65      	ldr	r3, [pc, #404]	; (80113c4 <handle_ina_notif+0x1e4>)
 8011230:	701a      	strb	r2, [r3, #0]
				rc = _trig(dev);
 8011232:	69f8      	ldr	r0, [r7, #28]
 8011234:	f000 f8f6 	bl	8011424 <_trig>
 8011238:	61b8      	str	r0, [r7, #24]
				if (rc) {
 801123a:	69bb      	ldr	r3, [r7, #24]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d00d      	beq.n	801125c <handle_ina_notif+0x7c>
					state = state_idle;
 8011240:	4b60      	ldr	r3, [pc, #384]	; (80113c4 <handle_ina_notif+0x1e4>)
 8011242:	2200      	movs	r2, #0
 8011244:	701a      	strb	r2, [r3, #0]
					return;
 8011246:	e0b9      	b.n	80113bc <handle_ina_notif+0x1dc>
				}
			} else {
#if INA3221_TASKRD
state = state_idle;
 8011248:	4b5e      	ldr	r3, [pc, #376]	; (80113c4 <handle_ina_notif+0x1e4>)
 801124a:	2200      	movs	r2, #0
 801124c:	701a      	strb	r2, [r3, #0]
		if ((state >= state_trig_0) && (state <= state_trig_3)) {
 801124e:	e005      	b.n	801125c <handle_ina_notif+0x7c>
                        _read_complete(0);
                        state = state_idle;
                    }
                }*/
		} else {
			bkpoint(1,1000);
 8011250:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011254:	2001      	movs	r0, #1
 8011256:	f7ff ff71 	bl	801113c <bkpoint>
 801125a:	e000      	b.n	801125e <handle_ina_notif+0x7e>
		if ((state >= state_trig_0) && (state <= state_trig_3)) {
 801125c:	bf00      	nop
		}
	}
	if (notif & NOTIF_INA_READ) {
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	f003 0308 	and.w	r3, r3, #8
 8011264:	2b00      	cmp	r3, #0
 8011266:	d01c      	beq.n	80112a2 <handle_ina_notif+0xc2>
#if INA3221_TASKRD
#if INA3221_CHECKCONV
		state = state_chk_cvrf;
		_read_cvrf();
#else
		int dev = _next_dev(-1);
 8011268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801126c:	f000 f8ba 	bl	80113e4 <_next_dev>
 8011270:	6178      	str	r0, [r7, #20]
		if (dev >= 0) {
 8011272:	697b      	ldr	r3, [r7, #20]
 8011274:	2b00      	cmp	r3, #0
 8011276:	db0e      	blt.n	8011296 <handle_ina_notif+0xb6>
			state = state_rd_0 + dev * 3;
 8011278:	697b      	ldr	r3, [r7, #20]
 801127a:	b2db      	uxtb	r3, r3
 801127c:	461a      	mov	r2, r3
 801127e:	0052      	lsls	r2, r2, #1
 8011280:	4413      	add	r3, r2
 8011282:	b2db      	uxtb	r3, r3
 8011284:	3305      	adds	r3, #5
 8011286:	b2da      	uxtb	r2, r3
 8011288:	4b4e      	ldr	r3, [pc, #312]	; (80113c4 <handle_ina_notif+0x1e4>)
 801128a:	701a      	strb	r2, [r3, #0]
			_reg_read(dev, 0);
 801128c:	2100      	movs	r1, #0
 801128e:	6978      	ldr	r0, [r7, #20]
 8011290:	f000 f8f4 	bl	801147c <_reg_read>
 8011294:	e005      	b.n	80112a2 <handle_ina_notif+0xc2>
		} else {
			_read_complete(0);
 8011296:	2000      	movs	r0, #0
 8011298:	f000 f95a 	bl	8011550 <_read_complete>
			state = state_idle;
 801129c:	4b49      	ldr	r3, [pc, #292]	; (80113c4 <handle_ina_notif+0x1e4>)
 801129e:	2200      	movs	r2, #0
 80112a0:	701a      	strb	r2, [r3, #0]
		}

#endif
#endif
	}
	if (notif & NOTIF_INA_RDCOMPL) {
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	f003 0320 	and.w	r3, r3, #32
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d055      	beq.n	8011358 <handle_ina_notif+0x178>
		itm_debug1(DBG_INA3221, "RDcpl", state);
 80112ac:	4b45      	ldr	r3, [pc, #276]	; (80113c4 <handle_ina_notif+0x1e4>)
 80112ae:	781b      	ldrb	r3, [r3, #0]
 80112b0:	461a      	mov	r2, r3
 80112b2:	4946      	ldr	r1, [pc, #280]	; (80113cc <handle_ina_notif+0x1ec>)
 80112b4:	2020      	movs	r0, #32
 80112b6:	f7ff fecf 	bl	8011058 <itm_debug1>
				_read_cvrf();
			}
#else
		if (0) {
#endif
		} else if ((state >= state_rd_0) && (state <= state_rd_11)) {
 80112ba:	4b42      	ldr	r3, [pc, #264]	; (80113c4 <handle_ina_notif+0x1e4>)
 80112bc:	781b      	ldrb	r3, [r3, #0]
 80112be:	2b04      	cmp	r3, #4
 80112c0:	d945      	bls.n	801134e <handle_ina_notif+0x16e>
 80112c2:	4b40      	ldr	r3, [pc, #256]	; (80113c4 <handle_ina_notif+0x1e4>)
 80112c4:	781b      	ldrb	r3, [r3, #0]
 80112c6:	2b10      	cmp	r3, #16
 80112c8:	d841      	bhi.n	801134e <handle_ina_notif+0x16e>
			int reg = (state - state_rd_0) % 3;
 80112ca:	4b3e      	ldr	r3, [pc, #248]	; (80113c4 <handle_ina_notif+0x1e4>)
 80112cc:	781b      	ldrb	r3, [r3, #0]
 80112ce:	1f5a      	subs	r2, r3, #5
 80112d0:	4b3f      	ldr	r3, [pc, #252]	; (80113d0 <handle_ina_notif+0x1f0>)
 80112d2:	fb83 3102 	smull	r3, r1, r3, r2
 80112d6:	17d3      	asrs	r3, r2, #31
 80112d8:	1ac9      	subs	r1, r1, r3
 80112da:	460b      	mov	r3, r1
 80112dc:	005b      	lsls	r3, r3, #1
 80112de:	440b      	add	r3, r1
 80112e0:	1ad3      	subs	r3, r2, r3
 80112e2:	613b      	str	r3, [r7, #16]
			int dev = (state - state_rd_0) / 3;
 80112e4:	4b37      	ldr	r3, [pc, #220]	; (80113c4 <handle_ina_notif+0x1e4>)
 80112e6:	781b      	ldrb	r3, [r3, #0]
 80112e8:	3b05      	subs	r3, #5
 80112ea:	4a39      	ldr	r2, [pc, #228]	; (80113d0 <handle_ina_notif+0x1f0>)
 80112ec:	fb82 1203 	smull	r1, r2, r2, r3
 80112f0:	17db      	asrs	r3, r3, #31
 80112f2:	1ad3      	subs	r3, r2, r3
 80112f4:	60fb      	str	r3, [r7, #12]
			if (reg==2){
 80112f6:	693b      	ldr	r3, [r7, #16]
 80112f8:	2b02      	cmp	r3, #2
 80112fa:	d11b      	bne.n	8011334 <handle_ina_notif+0x154>
				dev = _next_dev(dev);
 80112fc:	68f8      	ldr	r0, [r7, #12]
 80112fe:	f000 f871 	bl	80113e4 <_next_dev>
 8011302:	60f8      	str	r0, [r7, #12]
				if (dev >= 0) {
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	2b00      	cmp	r3, #0
 8011308:	db0d      	blt.n	8011326 <handle_ina_notif+0x146>
					state = (state_rd_0 + dev) * 3;
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	3305      	adds	r3, #5
 801130e:	b2db      	uxtb	r3, r3
 8011310:	461a      	mov	r2, r3
 8011312:	0052      	lsls	r2, r2, #1
 8011314:	4413      	add	r3, r2
 8011316:	b2da      	uxtb	r2, r3
 8011318:	4b2a      	ldr	r3, [pc, #168]	; (80113c4 <handle_ina_notif+0x1e4>)
 801131a:	701a      	strb	r2, [r3, #0]
					_reg_read(dev, 0);
 801131c:	2100      	movs	r1, #0
 801131e:	68f8      	ldr	r0, [r7, #12]
 8011320:	f000 f8ac 	bl	801147c <_reg_read>
		} else if ((state >= state_rd_0) && (state <= state_rd_11)) {
 8011324:	e018      	b.n	8011358 <handle_ina_notif+0x178>
				} else {
					_read_complete(0);
 8011326:	2000      	movs	r0, #0
 8011328:	f000 f912 	bl	8011550 <_read_complete>
					state = state_idle;
 801132c:	4b25      	ldr	r3, [pc, #148]	; (80113c4 <handle_ina_notif+0x1e4>)
 801132e:	2200      	movs	r2, #0
 8011330:	701a      	strb	r2, [r3, #0]
		} else if ((state >= state_rd_0) && (state <= state_rd_11)) {
 8011332:	e011      	b.n	8011358 <handle_ina_notif+0x178>
				}
			} else {
				state++;
 8011334:	4b23      	ldr	r3, [pc, #140]	; (80113c4 <handle_ina_notif+0x1e4>)
 8011336:	781b      	ldrb	r3, [r3, #0]
 8011338:	3301      	adds	r3, #1
 801133a:	b2da      	uxtb	r2, r3
 801133c:	4b21      	ldr	r3, [pc, #132]	; (80113c4 <handle_ina_notif+0x1e4>)
 801133e:	701a      	strb	r2, [r3, #0]
				_reg_read(dev, reg+1);
 8011340:	693b      	ldr	r3, [r7, #16]
 8011342:	3301      	adds	r3, #1
 8011344:	4619      	mov	r1, r3
 8011346:	68f8      	ldr	r0, [r7, #12]
 8011348:	f000 f898 	bl	801147c <_reg_read>
		} else if ((state >= state_rd_0) && (state <= state_rd_11)) {
 801134c:	e004      	b.n	8011358 <handle_ina_notif+0x178>
			}
		} else {
			bkpoint(2,1000);
 801134e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011352:	2002      	movs	r0, #2
 8011354:	f7ff fef2 	bl	801113c <bkpoint>
		}
	}
	if (notif & NOTIF_INA_ERR) {
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801135e:	2b00      	cmp	r3, #0
 8011360:	d02c      	beq.n	80113bc <handle_ina_notif+0x1dc>
		bkpoint(3, lastErr);
 8011362:	4b1c      	ldr	r3, [pc, #112]	; (80113d4 <handle_ina_notif+0x1f4>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	4619      	mov	r1, r3
 8011368:	2003      	movs	r0, #3
 801136a:	f7ff fee7 	bl	801113c <bkpoint>
		if ((state >= state_rd_0) && (state <= state_rd_11)) {
 801136e:	4b15      	ldr	r3, [pc, #84]	; (80113c4 <handle_ina_notif+0x1e4>)
 8011370:	781b      	ldrb	r3, [r3, #0]
 8011372:	2b04      	cmp	r3, #4
 8011374:	d907      	bls.n	8011386 <handle_ina_notif+0x1a6>
 8011376:	4b13      	ldr	r3, [pc, #76]	; (80113c4 <handle_ina_notif+0x1e4>)
 8011378:	781b      	ldrb	r3, [r3, #0]
 801137a:	2b10      	cmp	r3, #16
 801137c:	d803      	bhi.n	8011386 <handle_ina_notif+0x1a6>
			// write error
			// TODO
			state = state_idle;
 801137e:	4b11      	ldr	r3, [pc, #68]	; (80113c4 <handle_ina_notif+0x1e4>)
 8011380:	2200      	movs	r2, #0
 8011382:	701a      	strb	r2, [r3, #0]
 8011384:	e010      	b.n	80113a8 <handle_ina_notif+0x1c8>
		} else if ((state >= state_trig_0) && (state <= state_trig_3)) {
 8011386:	4b0f      	ldr	r3, [pc, #60]	; (80113c4 <handle_ina_notif+0x1e4>)
 8011388:	781b      	ldrb	r3, [r3, #0]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d007      	beq.n	801139e <handle_ina_notif+0x1be>
 801138e:	4b0d      	ldr	r3, [pc, #52]	; (80113c4 <handle_ina_notif+0x1e4>)
 8011390:	781b      	ldrb	r3, [r3, #0]
 8011392:	2b04      	cmp	r3, #4
 8011394:	d803      	bhi.n	801139e <handle_ina_notif+0x1be>
			// read error
			// TODO
			state = state_idle;
 8011396:	4b0b      	ldr	r3, [pc, #44]	; (80113c4 <handle_ina_notif+0x1e4>)
 8011398:	2200      	movs	r2, #0
 801139a:	701a      	strb	r2, [r3, #0]
 801139c:	e004      	b.n	80113a8 <handle_ina_notif+0x1c8>
		} else {
			bkpoint(3,1000);
 801139e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80113a2:	2003      	movs	r0, #3
 80113a4:	f7ff feca 	bl	801113c <bkpoint>
		}
		itm_debug1(DBG_INA3221|DBG_ERR, "i2c rst", lastErr);
 80113a8:	4b0a      	ldr	r3, [pc, #40]	; (80113d4 <handle_ina_notif+0x1f4>)
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	461a      	mov	r2, r3
 80113ae:	490a      	ldr	r1, [pc, #40]	; (80113d8 <handle_ina_notif+0x1f8>)
 80113b0:	480a      	ldr	r0, [pc, #40]	; (80113dc <handle_ina_notif+0x1fc>)
 80113b2:	f7ff fe51 	bl	8011058 <itm_debug1>
		HAL_I2C_Init(&INA3221_I2C_PORT);
 80113b6:	480a      	ldr	r0, [pc, #40]	; (80113e0 <handle_ina_notif+0x200>)
 80113b8:	f7f1 ff54 	bl	8003264 <HAL_I2C_Init>
	}
}
 80113bc:	3720      	adds	r7, #32
 80113be:	46bd      	mov	sp, r7
 80113c0:	bd80      	pop	{r7, pc}
 80113c2:	bf00      	nop
 80113c4:	200051b0 	.word	0x200051b0
 80113c8:	080195a8 	.word	0x080195a8
 80113cc:	080195b0 	.word	0x080195b0
 80113d0:	55555556 	.word	0x55555556
 80113d4:	200051a8 	.word	0x200051a8
 80113d8:	080195b8 	.word	0x080195b8
 80113dc:	80000020 	.word	0x80000020
 80113e0:	2000562c 	.word	0x2000562c

080113e4 <_next_dev>:




static int _next_dev(int dev)
{
 80113e4:	b480      	push	{r7}
 80113e6:	b083      	sub	sp, #12
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
	dev = dev+1;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	3301      	adds	r3, #1
 80113f0:	607b      	str	r3, [r7, #4]
	for (;dev<=3;dev++) {
 80113f2:	e00a      	b.n	801140a <_next_dev+0x26>
		if (ina3221_devices[dev]) return dev;
 80113f4:	4a0a      	ldr	r2, [pc, #40]	; (8011420 <_next_dev+0x3c>)
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	4413      	add	r3, r2
 80113fa:	781b      	ldrb	r3, [r3, #0]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d001      	beq.n	8011404 <_next_dev+0x20>
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	e007      	b.n	8011414 <_next_dev+0x30>
	for (;dev<=3;dev++) {
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	3301      	adds	r3, #1
 8011408:	607b      	str	r3, [r7, #4]
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	2b03      	cmp	r3, #3
 801140e:	ddf1      	ble.n	80113f4 <_next_dev+0x10>
	}
	return -1;
 8011410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011414:	4618      	mov	r0, r3
 8011416:	370c      	adds	r7, #12
 8011418:	46bd      	mov	sp, r7
 801141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141e:	4770      	bx	lr
 8011420:	20005168 	.word	0x20005168

08011424 <_trig>:


static int  _trig(int dev)
{
 8011424:	b580      	push	{r7, lr}
 8011426:	b084      	sub	sp, #16
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
	if (disable_ina3221) return 0;
 801142c:	4b0f      	ldr	r3, [pc, #60]	; (801146c <_trig+0x48>)
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d001      	beq.n	8011438 <_trig+0x14>
 8011434:	2300      	movs	r3, #0
 8011436:	e014      	b.n	8011462 <_trig+0x3e>
	cvrf_dev = dev;
 8011438:	4a0d      	ldr	r2, [pc, #52]	; (8011470 <_trig+0x4c>)
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	6013      	str	r3, [r2, #0]
	int addr = 0x40 + dev;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	3340      	adds	r3, #64	; 0x40
 8011442:	60fb      	str	r3, [r7, #12]
	itm_debug2(DBG_INA3221, "TRIG", dev, addr);
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	687a      	ldr	r2, [r7, #4]
 8011448:	490a      	ldr	r1, [pc, #40]	; (8011474 <_trig+0x50>)
 801144a:	2020      	movs	r0, #32
 801144c:	f7ff fe1e 	bl	801108c <itm_debug2>
	return ina3221_write16it(addr, INA3221_REG_CONFIG, ina_conf_val);
 8011450:	4b09      	ldr	r3, [pc, #36]	; (8011478 <_trig+0x54>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	b29b      	uxth	r3, r3
 8011456:	461a      	mov	r2, r3
 8011458:	2100      	movs	r1, #0
 801145a:	68f8      	ldr	r0, [r7, #12]
 801145c:	f000 fa9e 	bl	801199c <ina3221_write16it>
 8011460:	4603      	mov	r3, r0
}
 8011462:	4618      	mov	r0, r3
 8011464:	3710      	adds	r7, #16
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}
 801146a:	bf00      	nop
 801146c:	2000516e 	.word	0x2000516e
 8011470:	200051ac 	.word	0x200051ac
 8011474:	080195c0 	.word	0x080195c0
 8011478:	20005174 	.word	0x20005174

0801147c <_reg_read>:
static void _reg_read(int dev, int nreg)
{
 801147c:	b590      	push	{r4, r7, lr}
 801147e:	b089      	sub	sp, #36	; 0x24
 8011480:	af02      	add	r7, sp, #8
 8011482:	6078      	str	r0, [r7, #4]
 8011484:	6039      	str	r1, [r7, #0]
	int addr = 0x40 + dev;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	3340      	adds	r3, #64	; 0x40
 801148a:	613b      	str	r3, [r7, #16]
	int hwreg;
	switch (nreg) {
 801148c:	683b      	ldr	r3, [r7, #0]
 801148e:	2b01      	cmp	r3, #1
 8011490:	d006      	beq.n	80114a0 <_reg_read+0x24>
 8011492:	2b02      	cmp	r3, #2
 8011494:	d007      	beq.n	80114a6 <_reg_read+0x2a>
 8011496:	2b00      	cmp	r3, #0
 8011498:	d108      	bne.n	80114ac <_reg_read+0x30>
	case 0: hwreg = INA3221_REG_CH1_SHUNTVOLT; break;
 801149a:	2301      	movs	r3, #1
 801149c:	617b      	str	r3, [r7, #20]
 801149e:	e00b      	b.n	80114b8 <_reg_read+0x3c>
	case 1: hwreg = INA3221_REG_CH2_SHUNTVOLT; break;
 80114a0:	2303      	movs	r3, #3
 80114a2:	617b      	str	r3, [r7, #20]
 80114a4:	e008      	b.n	80114b8 <_reg_read+0x3c>
	case 2: hwreg = INA3221_REG_CH3_SHUNTVOLT; break;
 80114a6:	2305      	movs	r3, #5
 80114a8:	617b      	str	r3, [r7, #20]
 80114aa:	e005      	b.n	80114b8 <_reg_read+0x3c>
	default:
		itm_debug1(DBG_ERR|DBG_INA3221, "hu?", nreg);
 80114ac:	683a      	ldr	r2, [r7, #0]
 80114ae:	4921      	ldr	r1, [pc, #132]	; (8011534 <_reg_read+0xb8>)
 80114b0:	4821      	ldr	r0, [pc, #132]	; (8011538 <_reg_read+0xbc>)
 80114b2:	f7ff fdd1 	bl	8011058 <itm_debug1>
		return;
 80114b6:	e039      	b.n	801152c <_reg_read+0xb0>
	}
	itm_debug3(DBG_INA3221, "gns read", dev, nreg, hwreg);
 80114b8:	697b      	ldr	r3, [r7, #20]
 80114ba:	9300      	str	r3, [sp, #0]
 80114bc:	683b      	ldr	r3, [r7, #0]
 80114be:	687a      	ldr	r2, [r7, #4]
 80114c0:	491e      	ldr	r1, [pc, #120]	; (801153c <_reg_read+0xc0>)
 80114c2:	2020      	movs	r0, #32
 80114c4:	f7ff fdfe 	bl	80110c4 <itm_debug3>
	HAL_StatusTypeDef status;

	if (__HAL_I2C_GET_FLAG(&INA3221_I2C_PORT, I2C_FLAG_BUSY) != RESET) {
 80114c8:	4b1d      	ldr	r3, [pc, #116]	; (8011540 <_reg_read+0xc4>)
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	699b      	ldr	r3, [r3, #24]
 80114ce:	f003 0302 	and.w	r3, r3, #2
 80114d2:	2b02      	cmp	r3, #2
 80114d4:	d105      	bne.n	80114e2 <_reg_read+0x66>
		itm_debug1(DBG_ERR|DBG_INA3221, "busy", 0);
 80114d6:	2200      	movs	r2, #0
 80114d8:	491a      	ldr	r1, [pc, #104]	; (8011544 <_reg_read+0xc8>)
 80114da:	4817      	ldr	r0, [pc, #92]	; (8011538 <_reg_read+0xbc>)
 80114dc:	f7ff fdbc 	bl	8011058 <itm_debug1>
		// TODO _end_next_reg(1);
		return;
 80114e0:	e024      	b.n	801152c <_reg_read+0xb0>
	}

	status = HAL_I2C_Mem_Read_IT(&INA3221_I2C_PORT, addr<<1, hwreg, I2C_MEMADD_SIZE_8BIT,
 80114e2:	693b      	ldr	r3, [r7, #16]
 80114e4:	b29b      	uxth	r3, r3
 80114e6:	005b      	lsls	r3, r3, #1
 80114e8:	b298      	uxth	r0, r3
 80114ea:	697b      	ldr	r3, [r7, #20]
 80114ec:	b29c      	uxth	r4, r3
 80114ee:	4b16      	ldr	r3, [pc, #88]	; (8011548 <_reg_read+0xcc>)
 80114f0:	6819      	ldr	r1, [r3, #0]
			(uint8_t *)&cur_values[dev*3+nreg], 2);
 80114f2:	687a      	ldr	r2, [r7, #4]
 80114f4:	4613      	mov	r3, r2
 80114f6:	005b      	lsls	r3, r3, #1
 80114f8:	441a      	add	r2, r3
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	4413      	add	r3, r2
 80114fe:	005b      	lsls	r3, r3, #1
 8011500:	440b      	add	r3, r1
	status = HAL_I2C_Mem_Read_IT(&INA3221_I2C_PORT, addr<<1, hwreg, I2C_MEMADD_SIZE_8BIT,
 8011502:	2202      	movs	r2, #2
 8011504:	9201      	str	r2, [sp, #4]
 8011506:	9300      	str	r3, [sp, #0]
 8011508:	2301      	movs	r3, #1
 801150a:	4622      	mov	r2, r4
 801150c:	4601      	mov	r1, r0
 801150e:	480c      	ldr	r0, [pc, #48]	; (8011540 <_reg_read+0xc4>)
 8011510:	f7f2 fb00 	bl	8003b14 <HAL_I2C_Mem_Read_IT>
 8011514:	4603      	mov	r3, r0
 8011516:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8011518:	7bfb      	ldrb	r3, [r7, #15]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d006      	beq.n	801152c <_reg_read+0xb0>
		itm_debug1(DBG_INA3221|DBG_ERR, "readit", status);
 801151e:	7bfb      	ldrb	r3, [r7, #15]
 8011520:	461a      	mov	r2, r3
 8011522:	490a      	ldr	r1, [pc, #40]	; (801154c <_reg_read+0xd0>)
 8011524:	4804      	ldr	r0, [pc, #16]	; (8011538 <_reg_read+0xbc>)
 8011526:	f7ff fd97 	bl	8011058 <itm_debug1>
		// TODO
		return;
 801152a:	bf00      	nop
	}
}
 801152c:	371c      	adds	r7, #28
 801152e:	46bd      	mov	sp, r7
 8011530:	bd90      	pop	{r4, r7, pc}
 8011532:	bf00      	nop
 8011534:	080195c8 	.word	0x080195c8
 8011538:	80000020 	.word	0x80000020
 801153c:	080195cc 	.word	0x080195cc
 8011540:	2000562c 	.word	0x2000562c
 8011544:	080195d8 	.word	0x080195d8
 8011548:	2000019c 	.word	0x2000019c
 801154c:	080195e0 	.word	0x080195e0

08011550 <_read_complete>:
	return 0;
}
#endif

static void _read_complete(_UNUSED_ int err)
{
 8011550:	b580      	push	{r7, lr}
 8011552:	b08e      	sub	sp, #56	; 0x38
 8011554:	af02      	add	r7, sp, #8
 8011556:	6078      	str	r0, [r7, #4]
	uint16_t *valu = (uint16_t *) cur_values;
 8011558:	4b56      	ldr	r3, [pc, #344]	; (80116b4 <_read_complete+0x164>)
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	627b      	str	r3, [r7, #36]	; 0x24
	int16_t  *vals = (int16_t *) cur_values;
 801155e:	4b55      	ldr	r3, [pc, #340]	; (80116b4 <_read_complete+0x164>)
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	623b      	str	r3, [r7, #32]
	static int8_t presence[INA3221_NUM_VALS] = {0};

	for (int i = 0; i<INA3221_NUM_VALS; i++) {
 8011564:	2300      	movs	r3, #0
 8011566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011568:	e00e      	b.n	8011588 <_read_complete+0x38>
			valu[i] = __builtin_bswap16(valu[i]);
 801156a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801156c:	005b      	lsls	r3, r3, #1
 801156e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011570:	4413      	add	r3, r2
 8011572:	881a      	ldrh	r2, [r3, #0]
 8011574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011576:	005b      	lsls	r3, r3, #1
 8011578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801157a:	440b      	add	r3, r1
 801157c:	ba52      	rev16	r2, r2
 801157e:	b292      	uxth	r2, r2
 8011580:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i<INA3221_NUM_VALS; i++) {
 8011582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011584:	3301      	adds	r3, #1
 8011586:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801158a:	2b0b      	cmp	r3, #11
 801158c:	dded      	ble.n	801156a <_read_complete+0x1a>
	}
	msg_64_t m;

	switch (run_mode) {
 801158e:	4b4a      	ldr	r3, [pc, #296]	; (80116b8 <_read_complete+0x168>)
 8011590:	781b      	ldrb	r3, [r3, #0]
 8011592:	2b01      	cmp	r3, #1
 8011594:	d023      	beq.n	80115de <_read_complete+0x8e>
 8011596:	2b03      	cmp	r3, #3
 8011598:	d000      	beq.n	801159c <_read_complete+0x4c>
	default:
		break;
 801159a:	e086      	b.n	80116aa <_read_complete+0x15a>
	case runmode_detect1:
		itm_debug1(DBG_INA3221, "D/1", vals[1]);
 801159c:	6a3b      	ldr	r3, [r7, #32]
 801159e:	3302      	adds	r3, #2
 80115a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80115a4:	461a      	mov	r2, r3
 80115a6:	4945      	ldr	r1, [pc, #276]	; (80116bc <_read_complete+0x16c>)
 80115a8:	2020      	movs	r0, #32
 80115aa:	f7ff fd55 	bl	8011058 <itm_debug1>
		m.from =  MA_CANTON(localBoardNum, 0);
 80115ae:	4b44      	ldr	r3, [pc, #272]	; (80116c0 <_read_complete+0x170>)
 80115b0:	781b      	ldrb	r3, [r3, #0]
 80115b2:	00db      	lsls	r3, r3, #3
 80115b4:	b2db      	uxtb	r3, r3
 80115b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80115ba:	b2db      	uxtb	r3, r3
 80115bc:	747b      	strb	r3, [r7, #17]
		m.to = MA_UI(1);
 80115be:	2381      	movs	r3, #129	; 0x81
 80115c0:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_INA3221_VAL1;
 80115c2:	2327      	movs	r3, #39	; 0x27
 80115c4:	74bb      	strb	r3, [r7, #18]
		m.sub = 1;
 80115c6:	2301      	movs	r3, #1
 80115c8:	74fb      	strb	r3, [r7, #19]
		m.v1 = vals[1];
 80115ca:	6a3b      	ldr	r3, [r7, #32]
 80115cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80115d0:	82bb      	strh	r3, [r7, #20]
		mqf_write_from_ina3221(&m);
 80115d2:	f107 0310 	add.w	r3, r7, #16
 80115d6:	4618      	mov	r0, r3
 80115d8:	f7ff fda0 	bl	801111c <mqf_write_from_ina3221>
		break;
 80115dc:	e065      	b.n	80116aa <_read_complete+0x15a>
	case runmode_normal:
		for (int i = 0; i<INA3221_NUM_VALS; i++) {
 80115de:	2300      	movs	r3, #0
 80115e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80115e2:	e05f      	b.n	80116a4 <_read_complete+0x154>
			itm_debug2(DBG_INA3221, "ina val", i, vals[i]);
 80115e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115e6:	005b      	lsls	r3, r3, #1
 80115e8:	6a3a      	ldr	r2, [r7, #32]
 80115ea:	4413      	add	r3, r2
 80115ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80115f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80115f2:	4934      	ldr	r1, [pc, #208]	; (80116c4 <_read_complete+0x174>)
 80115f4:	2020      	movs	r0, #32
 80115f6:	f7ff fd49 	bl	801108c <itm_debug2>
			int p = (abs(vals[i])>1000) ? 1 : 0;
 80115fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115fc:	005b      	lsls	r3, r3, #1
 80115fe:	6a3a      	ldr	r2, [r7, #32]
 8011600:	4413      	add	r3, r2
 8011602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011606:	2b00      	cmp	r3, #0
 8011608:	bfb8      	it	lt
 801160a:	425b      	neglt	r3, r3
 801160c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011610:	bfcc      	ite	gt
 8011612:	2301      	movgt	r3, #1
 8011614:	2300      	movle	r3, #0
 8011616:	b2db      	uxtb	r3, r3
 8011618:	61fb      	str	r3, [r7, #28]
			if (p == presence[i]) continue;
 801161a:	4a2b      	ldr	r2, [pc, #172]	; (80116c8 <_read_complete+0x178>)
 801161c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801161e:	4413      	add	r3, r2
 8011620:	f993 3000 	ldrsb.w	r3, [r3]
 8011624:	461a      	mov	r2, r3
 8011626:	69fb      	ldr	r3, [r7, #28]
 8011628:	4293      	cmp	r3, r2
 801162a:	d103      	bne.n	8011634 <_read_complete+0xe4>
		for (int i = 0; i<INA3221_NUM_VALS; i++) {
 801162c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801162e:	3301      	adds	r3, #1
 8011630:	62bb      	str	r3, [r7, #40]	; 0x28
 8011632:	e037      	b.n	80116a4 <_read_complete+0x154>
			presence[i] = p;
 8011634:	69fb      	ldr	r3, [r7, #28]
 8011636:	b259      	sxtb	r1, r3
 8011638:	4a23      	ldr	r2, [pc, #140]	; (80116c8 <_read_complete+0x178>)
 801163a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801163c:	4413      	add	r3, r2
 801163e:	460a      	mov	r2, r1
 8011640:	701a      	strb	r2, [r3, #0]
			itm_debug3(DBG_INA3221|DBG_PRES, "PRSCH", i,p, vals[i]);
 8011642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011644:	005b      	lsls	r3, r3, #1
 8011646:	6a3a      	ldr	r2, [r7, #32]
 8011648:	4413      	add	r3, r2
 801164a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801164e:	9300      	str	r3, [sp, #0]
 8011650:	69fb      	ldr	r3, [r7, #28]
 8011652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011654:	491d      	ldr	r1, [pc, #116]	; (80116cc <_read_complete+0x17c>)
 8011656:	2060      	movs	r0, #96	; 0x60
 8011658:	f7ff fd34 	bl	80110c4 <itm_debug3>
			// notify change
			m.from = MA_CANTON(localBoardNum, 0);
 801165c:	4b18      	ldr	r3, [pc, #96]	; (80116c0 <_read_complete+0x170>)
 801165e:	781b      	ldrb	r3, [r3, #0]
 8011660:	00db      	lsls	r3, r3, #3
 8011662:	b2db      	uxtb	r3, r3
 8011664:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011668:	b2db      	uxtb	r3, r3
 801166a:	747b      	strb	r3, [r7, #17]
			m.to = MA_CONTROL();
 801166c:	23d7      	movs	r3, #215	; 0xd7
 801166e:	743b      	strb	r3, [r7, #16]
			m.cmd = CMD_PRESENCE_CHANGE;
 8011670:	2312      	movs	r3, #18
 8011672:	74bb      	strb	r3, [r7, #18]
			m.sub = i;
 8011674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011676:	b2db      	uxtb	r3, r3
 8011678:	74fb      	strb	r3, [r7, #19]
			m.v1u = p;
 801167a:	69fb      	ldr	r3, [r7, #28]
 801167c:	b29b      	uxth	r3, r3
 801167e:	82bb      	strh	r3, [r7, #20]
			m.v2 = vals[i];
 8011680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011682:	005b      	lsls	r3, r3, #1
 8011684:	6a3a      	ldr	r2, [r7, #32]
 8011686:	4413      	add	r3, r2
 8011688:	f9b3 3000 	ldrsh.w	r3, [r3]
 801168c:	82fb      	strh	r3, [r7, #22]
			mqf_write_from_ina3221(&m);
 801168e:	f107 0310 	add.w	r3, r7, #16
 8011692:	4618      	mov	r0, r3
 8011694:	f7ff fd42 	bl	801111c <mqf_write_from_ina3221>


			static int cnt=0;
			cnt++;
 8011698:	4b0d      	ldr	r3, [pc, #52]	; (80116d0 <_read_complete+0x180>)
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	3301      	adds	r3, #1
 801169e:	4a0c      	ldr	r2, [pc, #48]	; (80116d0 <_read_complete+0x180>)
 80116a0:	6013      	str	r3, [r2, #0]
				m.to = MA_UI(1);
				m.cmd = CMD_INA3221_REPORT;
				m.v32u = (uint32_t) v;
				mqf_write_from_ina3221(&m);
			}
			break;
 80116a2:	e002      	b.n	80116aa <_read_complete+0x15a>
		for (int i = 0; i<INA3221_NUM_VALS; i++) {
 80116a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116a6:	2b0b      	cmp	r3, #11
 80116a8:	dd9c      	ble.n	80115e4 <_read_complete+0x94>
		}
	}
}
 80116aa:	bf00      	nop
 80116ac:	3730      	adds	r7, #48	; 0x30
 80116ae:	46bd      	mov	sp, r7
 80116b0:	bd80      	pop	{r7, pc}
 80116b2:	bf00      	nop
 80116b4:	2000019c 	.word	0x2000019c
 80116b8:	20005164 	.word	0x20005164
 80116bc:	080195e8 	.word	0x080195e8
 80116c0:	200053dd 	.word	0x200053dd
 80116c4:	080195ec 	.word	0x080195ec
 80116c8:	200051b4 	.word	0x200051b4
 80116cc:	080195f4 	.word	0x080195f4
 80116d0:	200051c0 	.word	0x200051c0

080116d4 <HAL_I2C_MemTxCpltCallback>:


void HAL_I2C_MemTxCpltCallback(_UNUSED_ I2C_HandleTypeDef *hi2c)
{
 80116d4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80116d8:	b08a      	sub	sp, #40	; 0x28
 80116da:	af02      	add	r7, sp, #8
 80116dc:	6078      	str	r0, [r7, #4]
	BEGIN_ISR
 80116de:	f004 fb11 	bl	8015d04 <GetCycleCount64>
 80116e2:	4603      	mov	r3, r0
 80116e4:	460c      	mov	r4, r1
 80116e6:	e9c7 3404 	strd	r3, r4, [r7, #16]
	BaseType_t higher=0;
 80116ea:	2300      	movs	r3, #0
 80116ec:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(ina3221_taskHandle, NOTIF_INA_WRCOMPL, eSetBits, &higher);
 80116ee:	4b1b      	ldr	r3, [pc, #108]	; (801175c <HAL_I2C_MemTxCpltCallback+0x88>)
 80116f0:	6818      	ldr	r0, [r3, #0]
 80116f2:	f107 030c 	add.w	r3, r7, #12
 80116f6:	9300      	str	r3, [sp, #0]
 80116f8:	2300      	movs	r3, #0
 80116fa:	2201      	movs	r2, #1
 80116fc:	2110      	movs	r1, #16
 80116fe:	f7fd fb9f 	bl	800ee40 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d007      	beq.n	8011718 <HAL_I2C_MemTxCpltCallback+0x44>
 8011708:	4b15      	ldr	r3, [pc, #84]	; (8011760 <HAL_I2C_MemTxCpltCallback+0x8c>)
 801170a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801170e:	601a      	str	r2, [r3, #0]
 8011710:	f3bf 8f4f 	dsb	sy
 8011714:	f3bf 8f6f 	isb	sy
	END_ISR;
 8011718:	f004 faf4 	bl	8015d04 <GetCycleCount64>
 801171c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8011720:	e9d7 bc04 	ldrd	fp, ip, [r7, #16]
 8011724:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8011728:	460b      	mov	r3, r1
 801172a:	4614      	mov	r4, r2
 801172c:	ebb3 030b 	subs.w	r3, r3, fp
 8011730:	eb64 040c 	sbc.w	r4, r4, ip
 8011734:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8011738:	f04f 0200 	mov.w	r2, #0
 801173c:	42a2      	cmp	r2, r4
 801173e:	bf08      	it	eq
 8011740:	4299      	cmpeq	r1, r3
 8011742:	d206      	bcs.n	8011752 <HAL_I2C_MemTxCpltCallback+0x7e>
 8011744:	69ba      	ldr	r2, [r7, #24]
 8011746:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801174a:	1ad3      	subs	r3, r2, r3
 801174c:	4618      	mov	r0, r3
 801174e:	f004 fac7 	bl	8015ce0 <long_isr>
}
 8011752:	bf00      	nop
 8011754:	3720      	adds	r7, #32
 8011756:	46bd      	mov	sp, r7
 8011758:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 801175c:	20006d3c 	.word	0x20006d3c
 8011760:	e000ed04 	.word	0xe000ed04

08011764 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(_UNUSED_ I2C_HandleTypeDef *hi2c)
{
 8011764:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8011768:	b08a      	sub	sp, #40	; 0x28
 801176a:	af02      	add	r7, sp, #8
 801176c:	6078      	str	r0, [r7, #4]
	BEGIN_ISR
 801176e:	f004 fac9 	bl	8015d04 <GetCycleCount64>
 8011772:	4603      	mov	r3, r0
 8011774:	460c      	mov	r4, r1
 8011776:	e9c7 3404 	strd	r3, r4, [r7, #16]
	BaseType_t higher=0;
 801177a:	2300      	movs	r3, #0
 801177c:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(ina3221_taskHandle, NOTIF_INA_RDCOMPL, eSetBits, &higher);
 801177e:	4b1b      	ldr	r3, [pc, #108]	; (80117ec <HAL_I2C_MemRxCpltCallback+0x88>)
 8011780:	6818      	ldr	r0, [r3, #0]
 8011782:	f107 030c 	add.w	r3, r7, #12
 8011786:	9300      	str	r3, [sp, #0]
 8011788:	2300      	movs	r3, #0
 801178a:	2201      	movs	r2, #1
 801178c:	2120      	movs	r1, #32
 801178e:	f7fd fb57 	bl	800ee40 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d007      	beq.n	80117a8 <HAL_I2C_MemRxCpltCallback+0x44>
 8011798:	4b15      	ldr	r3, [pc, #84]	; (80117f0 <HAL_I2C_MemRxCpltCallback+0x8c>)
 801179a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801179e:	601a      	str	r2, [r3, #0]
 80117a0:	f3bf 8f4f 	dsb	sy
 80117a4:	f3bf 8f6f 	isb	sy
	END_ISR;
 80117a8:	f004 faac 	bl	8015d04 <GetCycleCount64>
 80117ac:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80117b0:	e9d7 bc04 	ldrd	fp, ip, [r7, #16]
 80117b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80117b8:	460b      	mov	r3, r1
 80117ba:	4614      	mov	r4, r2
 80117bc:	ebb3 030b 	subs.w	r3, r3, fp
 80117c0:	eb64 040c 	sbc.w	r4, r4, ip
 80117c4:	f64b 3180 	movw	r1, #48000	; 0xbb80
 80117c8:	f04f 0200 	mov.w	r2, #0
 80117cc:	42a2      	cmp	r2, r4
 80117ce:	bf08      	it	eq
 80117d0:	4299      	cmpeq	r1, r3
 80117d2:	d206      	bcs.n	80117e2 <HAL_I2C_MemRxCpltCallback+0x7e>
 80117d4:	69ba      	ldr	r2, [r7, #24]
 80117d6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80117da:	1ad3      	subs	r3, r2, r3
 80117dc:	4618      	mov	r0, r3
 80117de:	f004 fa7f 	bl	8015ce0 <long_isr>
}
 80117e2:	bf00      	nop
 80117e4:	3720      	adds	r7, #32
 80117e6:	46bd      	mov	sp, r7
 80117e8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80117ec:	20006d3c 	.word	0x20006d3c
 80117f0:	e000ed04 	.word	0xe000ed04

080117f4 <HAL_I2C_ErrorCallback>:



void HAL_I2C_ErrorCallback(_UNUSED_ I2C_HandleTypeDef *hi2c)
{
 80117f4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80117f8:	b08a      	sub	sp, #40	; 0x28
 80117fa:	af02      	add	r7, sp, #8
 80117fc:	6078      	str	r0, [r7, #4]
	BEGIN_ISR
 80117fe:	f004 fa81 	bl	8015d04 <GetCycleCount64>
 8011802:	4603      	mov	r3, r0
 8011804:	460c      	mov	r4, r1
 8011806:	e9c7 3404 	strd	r3, r4, [r7, #16]
	lastErr = hi2c->ErrorCode;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801180e:	461a      	mov	r2, r3
 8011810:	4b1d      	ldr	r3, [pc, #116]	; (8011888 <HAL_I2C_ErrorCallback+0x94>)
 8011812:	601a      	str	r2, [r3, #0]
	BaseType_t higher=0;
 8011814:	2300      	movs	r3, #0
 8011816:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(ina3221_taskHandle, NOTIF_INA_ERR, eSetBits, &higher);
 8011818:	4b1c      	ldr	r3, [pc, #112]	; (801188c <HAL_I2C_ErrorCallback+0x98>)
 801181a:	6818      	ldr	r0, [r3, #0]
 801181c:	f107 030c 	add.w	r3, r7, #12
 8011820:	9300      	str	r3, [sp, #0]
 8011822:	2300      	movs	r3, #0
 8011824:	2201      	movs	r2, #1
 8011826:	2140      	movs	r1, #64	; 0x40
 8011828:	f7fd fb0a 	bl	800ee40 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d007      	beq.n	8011842 <HAL_I2C_ErrorCallback+0x4e>
 8011832:	4b17      	ldr	r3, [pc, #92]	; (8011890 <HAL_I2C_ErrorCallback+0x9c>)
 8011834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011838:	601a      	str	r2, [r3, #0]
 801183a:	f3bf 8f4f 	dsb	sy
 801183e:	f3bf 8f6f 	isb	sy
	END_ISR;
 8011842:	f004 fa5f 	bl	8015d04 <GetCycleCount64>
 8011846:	e9c7 0106 	strd	r0, r1, [r7, #24]
 801184a:	e9d7 bc04 	ldrd	fp, ip, [r7, #16]
 801184e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8011852:	460b      	mov	r3, r1
 8011854:	4614      	mov	r4, r2
 8011856:	ebb3 030b 	subs.w	r3, r3, fp
 801185a:	eb64 040c 	sbc.w	r4, r4, ip
 801185e:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8011862:	f04f 0200 	mov.w	r2, #0
 8011866:	42a2      	cmp	r2, r4
 8011868:	bf08      	it	eq
 801186a:	4299      	cmpeq	r1, r3
 801186c:	d206      	bcs.n	801187c <HAL_I2C_ErrorCallback+0x88>
 801186e:	69ba      	ldr	r2, [r7, #24]
 8011870:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8011874:	1ad3      	subs	r3, r2, r3
 8011876:	4618      	mov	r0, r3
 8011878:	f004 fa32 	bl	8015ce0 <long_isr>
}
 801187c:	bf00      	nop
 801187e:	3720      	adds	r7, #32
 8011880:	46bd      	mov	sp, r7
 8011882:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8011886:	bf00      	nop
 8011888:	200051a8 	.word	0x200051a8
 801188c:	20006d3c 	.word	0x20006d3c
 8011890:	e000ed04 	.word	0xe000ed04

08011894 <ina3221_read16>:

// ----------------------------------------------------------------------------------


static uint16_t ina3221_read16(int a, int reg)
{
 8011894:	b580      	push	{r7, lr}
 8011896:	b088      	sub	sp, #32
 8011898:	af04      	add	r7, sp, #16
 801189a:	6078      	str	r0, [r7, #4]
 801189c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
	uint16_t w16;
    status = HAL_I2C_Mem_Read(&INA3221_I2C_PORT, a<<1, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&w16, 2, HAL_MAX_DELAY);
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	b29b      	uxth	r3, r3
 80118a2:	005b      	lsls	r3, r3, #1
 80118a4:	b299      	uxth	r1, r3
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	b29a      	uxth	r2, r3
 80118aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80118ae:	9302      	str	r3, [sp, #8]
 80118b0:	2302      	movs	r3, #2
 80118b2:	9301      	str	r3, [sp, #4]
 80118b4:	f107 030c 	add.w	r3, r7, #12
 80118b8:	9300      	str	r3, [sp, #0]
 80118ba:	2301      	movs	r3, #1
 80118bc:	4811      	ldr	r0, [pc, #68]	; (8011904 <ina3221_read16+0x70>)
 80118be:	f7f1 ff03 	bl	80036c8 <HAL_I2C_Mem_Read>
 80118c2:	4603      	mov	r3, r0
 80118c4:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 80118c6:	7bfb      	ldrb	r3, [r7, #15]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d013      	beq.n	80118f4 <ina3221_read16+0x60>
    	itm_debug1(DBG_INA3221|DBG_ERR, "i2c r err", status);
 80118cc:	7bfb      	ldrb	r3, [r7, #15]
 80118ce:	461a      	mov	r2, r3
 80118d0:	490d      	ldr	r1, [pc, #52]	; (8011908 <ina3221_read16+0x74>)
 80118d2:	480e      	ldr	r0, [pc, #56]	; (801190c <ina3221_read16+0x78>)
 80118d4:	f7ff fbc0 	bl	8011058 <itm_debug1>
    	ina3221_errors++;
 80118d8:	4b0d      	ldr	r3, [pc, #52]	; (8011910 <ina3221_read16+0x7c>)
 80118da:	881b      	ldrh	r3, [r3, #0]
 80118dc:	3301      	adds	r3, #1
 80118de:	b29a      	uxth	r2, r3
 80118e0:	4b0b      	ldr	r3, [pc, #44]	; (8011910 <ina3221_read16+0x7c>)
 80118e2:	801a      	strh	r2, [r3, #0]
    	bkpoint(1, INA3221_I2C_PORT.ErrorCode);
 80118e4:	4b07      	ldr	r3, [pc, #28]	; (8011904 <ina3221_read16+0x70>)
 80118e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118e8:	4619      	mov	r1, r3
 80118ea:	2001      	movs	r0, #1
 80118ec:	f7ff fc26 	bl	801113c <bkpoint>
    	return 0;
 80118f0:	2300      	movs	r3, #0
 80118f2:	e002      	b.n	80118fa <ina3221_read16+0x66>
    } else {
    	return __builtin_bswap16(w16);
 80118f4:	89bb      	ldrh	r3, [r7, #12]
 80118f6:	ba5b      	rev16	r3, r3
 80118f8:	b29b      	uxth	r3, r3
    }
}
 80118fa:	4618      	mov	r0, r3
 80118fc:	3710      	adds	r7, #16
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd80      	pop	{r7, pc}
 8011902:	bf00      	nop
 8011904:	2000562c 	.word	0x2000562c
 8011908:	080195fc 	.word	0x080195fc
 801190c:	80000020 	.word	0x80000020
 8011910:	2000516c 	.word	0x2000516c

08011914 <ina3221_write16>:

static int ina3221_write16(int a, int reg, uint16_t v)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b08a      	sub	sp, #40	; 0x28
 8011918:	af04      	add	r7, sp, #16
 801191a:	60f8      	str	r0, [r7, #12]
 801191c:	60b9      	str	r1, [r7, #8]
 801191e:	4613      	mov	r3, r2
 8011920:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint16_t w16;
	if ((1)) w16 = __builtin_bswap16(v);
 8011922:	88fb      	ldrh	r3, [r7, #6]
 8011924:	ba5b      	rev16	r3, r3
 8011926:	b29b      	uxth	r3, r3
 8011928:	82bb      	strh	r3, [r7, #20]
	else w16=v;
    status = HAL_I2C_Mem_Write(&INA3221_I2C_PORT, a<<1, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&w16, 2, HAL_MAX_DELAY);
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	b29b      	uxth	r3, r3
 801192e:	005b      	lsls	r3, r3, #1
 8011930:	b299      	uxth	r1, r3
 8011932:	68bb      	ldr	r3, [r7, #8]
 8011934:	b29a      	uxth	r2, r3
 8011936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801193a:	9302      	str	r3, [sp, #8]
 801193c:	2302      	movs	r3, #2
 801193e:	9301      	str	r3, [sp, #4]
 8011940:	f107 0314 	add.w	r3, r7, #20
 8011944:	9300      	str	r3, [sp, #0]
 8011946:	2301      	movs	r3, #1
 8011948:	4810      	ldr	r0, [pc, #64]	; (801198c <ina3221_write16+0x78>)
 801194a:	f7f1 fdc3 	bl	80034d4 <HAL_I2C_Mem_Write>
 801194e:	4603      	mov	r3, r0
 8011950:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) {
 8011952:	7dfb      	ldrb	r3, [r7, #23]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d014      	beq.n	8011982 <ina3221_write16+0x6e>
    	itm_debug1(DBG_INA3221|DBG_ERR, "i2c w err", status);
 8011958:	7dfb      	ldrb	r3, [r7, #23]
 801195a:	461a      	mov	r2, r3
 801195c:	490c      	ldr	r1, [pc, #48]	; (8011990 <ina3221_write16+0x7c>)
 801195e:	480d      	ldr	r0, [pc, #52]	; (8011994 <ina3221_write16+0x80>)
 8011960:	f7ff fb7a 	bl	8011058 <itm_debug1>
       	ina3221_errors++;
 8011964:	4b0c      	ldr	r3, [pc, #48]	; (8011998 <ina3221_write16+0x84>)
 8011966:	881b      	ldrh	r3, [r3, #0]
 8011968:	3301      	adds	r3, #1
 801196a:	b29a      	uxth	r2, r3
 801196c:	4b0a      	ldr	r3, [pc, #40]	; (8011998 <ina3221_write16+0x84>)
 801196e:	801a      	strh	r2, [r3, #0]
    	bkpoint(2, INA3221_I2C_PORT.ErrorCode);
 8011970:	4b06      	ldr	r3, [pc, #24]	; (801198c <ina3221_write16+0x78>)
 8011972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011974:	4619      	mov	r1, r3
 8011976:	2002      	movs	r0, #2
 8011978:	f7ff fbe0 	bl	801113c <bkpoint>
    	return -1;
 801197c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011980:	e000      	b.n	8011984 <ina3221_write16+0x70>
    }
    return 0;
 8011982:	2300      	movs	r3, #0
}
 8011984:	4618      	mov	r0, r3
 8011986:	3718      	adds	r7, #24
 8011988:	46bd      	mov	sp, r7
 801198a:	bd80      	pop	{r7, pc}
 801198c:	2000562c 	.word	0x2000562c
 8011990:	08019608 	.word	0x08019608
 8011994:	80000020 	.word	0x80000020
 8011998:	2000516c 	.word	0x2000516c

0801199c <ina3221_write16it>:




_UNUSED_ static int ina3221_write16it(int a, int reg, uint16_t v)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b088      	sub	sp, #32
 80119a0:	af02      	add	r7, sp, #8
 80119a2:	60f8      	str	r0, [r7, #12]
 80119a4:	60b9      	str	r1, [r7, #8]
 80119a6:	4613      	mov	r3, r2
 80119a8:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint16_t w16;
	if ((1)) w16 = __builtin_bswap16(v);
 80119aa:	88fb      	ldrh	r3, [r7, #6]
 80119ac:	ba5b      	rev16	r3, r3
 80119ae:	b29b      	uxth	r3, r3
 80119b0:	82bb      	strh	r3, [r7, #20]
	else w16=v;

	if (HAL_I2C_GetState(&INA3221_I2C_PORT) != HAL_I2C_STATE_READY) {
 80119b2:	4824      	ldr	r0, [pc, #144]	; (8011a44 <ina3221_write16it+0xa8>)
 80119b4:	f7f2 fcf8 	bl	80043a8 <HAL_I2C_GetState>
 80119b8:	4603      	mov	r3, r0
 80119ba:	2b20      	cmp	r3, #32
 80119bc:	d00a      	beq.n	80119d4 <ina3221_write16it+0x38>
    	bkpoint(3, INA3221_I2C_PORT.State);
 80119be:	4b21      	ldr	r3, [pc, #132]	; (8011a44 <ina3221_write16it+0xa8>)
 80119c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80119c4:	b2db      	uxtb	r3, r3
 80119c6:	4619      	mov	r1, r3
 80119c8:	2003      	movs	r0, #3
 80119ca:	f7ff fbb7 	bl	801113c <bkpoint>
    	return -1;
 80119ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80119d2:	e033      	b.n	8011a3c <ina3221_write16it+0xa0>
	}
#if 0
    status = HAL_I2C_Mem_Write_IT(&INA3221_I2C_PORT, a<<1, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&w16, 2);
#else
    status = HAL_I2C_Mem_Write_IT_NW(&INA3221_I2C_PORT, a<<1, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&w16, 2);
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	b29b      	uxth	r3, r3
 80119d8:	005b      	lsls	r3, r3, #1
 80119da:	b299      	uxth	r1, r3
 80119dc:	68bb      	ldr	r3, [r7, #8]
 80119de:	b29a      	uxth	r2, r3
 80119e0:	2302      	movs	r3, #2
 80119e2:	9301      	str	r3, [sp, #4]
 80119e4:	f107 0314 	add.w	r3, r7, #20
 80119e8:	9300      	str	r3, [sp, #0]
 80119ea:	2301      	movs	r3, #1
 80119ec:	4815      	ldr	r0, [pc, #84]	; (8011a44 <ina3221_write16it+0xa8>)
 80119ee:	f000 f835 	bl	8011a5c <HAL_I2C_Mem_Write_IT_NW>
 80119f2:	4603      	mov	r3, r0
 80119f4:	75fb      	strb	r3, [r7, #23]
#endif
    if (status != HAL_OK) {
 80119f6:	7dfb      	ldrb	r3, [r7, #23]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d01e      	beq.n	8011a3a <ina3221_write16it+0x9e>
    	itm_debug1(DBG_INA3221|DBG_ERR, "i2c w err", status);
 80119fc:	7dfb      	ldrb	r3, [r7, #23]
 80119fe:	461a      	mov	r2, r3
 8011a00:	4911      	ldr	r1, [pc, #68]	; (8011a48 <ina3221_write16it+0xac>)
 8011a02:	4812      	ldr	r0, [pc, #72]	; (8011a4c <ina3221_write16it+0xb0>)
 8011a04:	f7ff fb28 	bl	8011058 <itm_debug1>
       	ina3221_errors++;
 8011a08:	4b11      	ldr	r3, [pc, #68]	; (8011a50 <ina3221_write16it+0xb4>)
 8011a0a:	881b      	ldrh	r3, [r3, #0]
 8011a0c:	3301      	adds	r3, #1
 8011a0e:	b29a      	uxth	r2, r3
 8011a10:	4b0f      	ldr	r3, [pc, #60]	; (8011a50 <ina3221_write16it+0xb4>)
 8011a12:	801a      	strh	r2, [r3, #0]
    	bkpoint(3, INA3221_I2C_PORT.ErrorCode);
 8011a14:	4b0b      	ldr	r3, [pc, #44]	; (8011a44 <ina3221_write16it+0xa8>)
 8011a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a18:	4619      	mov	r1, r3
 8011a1a:	2003      	movs	r0, #3
 8011a1c:	f7ff fb8e 	bl	801113c <bkpoint>
    	itm_debug1(DBG_INA3221|DBG_ERR, "i2c rst", lastErr);
 8011a20:	4b0c      	ldr	r3, [pc, #48]	; (8011a54 <ina3221_write16it+0xb8>)
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	461a      	mov	r2, r3
 8011a26:	490c      	ldr	r1, [pc, #48]	; (8011a58 <ina3221_write16it+0xbc>)
 8011a28:	4808      	ldr	r0, [pc, #32]	; (8011a4c <ina3221_write16it+0xb0>)
 8011a2a:	f7ff fb15 	bl	8011058 <itm_debug1>
    	HAL_I2C_Init(&INA3221_I2C_PORT);
 8011a2e:	4805      	ldr	r0, [pc, #20]	; (8011a44 <ina3221_write16it+0xa8>)
 8011a30:	f7f1 fc18 	bl	8003264 <HAL_I2C_Init>
    	return -1;
 8011a34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a38:	e000      	b.n	8011a3c <ina3221_write16it+0xa0>
    }
    return 0;
 8011a3a:	2300      	movs	r3, #0
}
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	3718      	adds	r7, #24
 8011a40:	46bd      	mov	sp, r7
 8011a42:	bd80      	pop	{r7, pc}
 8011a44:	2000562c 	.word	0x2000562c
 8011a48:	08019608 	.word	0x08019608
 8011a4c:	80000020 	.word	0x80000020
 8011a50:	2000516c 	.word	0x2000516c
 8011a54:	200051a8 	.word	0x200051a8
 8011a58:	080195b8 	.word	0x080195b8

08011a5c <HAL_I2C_Mem_Write_IT_NW>:
#define I2C_TIMEOUT_BUSY_FLAG     25U         /*!< Timeout 25 ms             */
#define I2C_TIMEOUT_STOP_FLAG     5U          /*!< Timeout 5 ms              */
#define I2C_NO_OPTION_FRAME       0xFFFF0000U /*!< XferOptions default value */

HAL_StatusTypeDef HAL_I2C_Mem_Write_IT_NW(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8011a5c:	b480      	push	{r7}
 8011a5e:	b087      	sub	sp, #28
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	60f8      	str	r0, [r7, #12]
 8011a64:	4608      	mov	r0, r1
 8011a66:	4611      	mov	r1, r2
 8011a68:	461a      	mov	r2, r3
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	817b      	strh	r3, [r7, #10]
 8011a6e:	460b      	mov	r3, r1
 8011a70:	813b      	strh	r3, [r7, #8]
 8011a72:	4613      	mov	r3, r2
 8011a74:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8011a76:	2300      	movs	r3, #0
 8011a78:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011a80:	b2db      	uxtb	r3, r3
 8011a82:	2b20      	cmp	r3, #32
 8011a84:	f040 8083 	bne.w	8011b8e <HAL_I2C_Mem_Write_IT_NW+0x132>
  {
    /* Wait until BUSY flag is reset */
    count = 2; //I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8011a88:	2302      	movs	r3, #2
 8011a8a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8011a8c:	697b      	ldr	r3, [r7, #20]
 8011a8e:	3b01      	subs	r3, #1
 8011a90:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8011a92:	697b      	ldr	r3, [r7, #20]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d116      	bne.n	8011ac6 <HAL_I2C_Mem_Write_IT_NW+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	2220      	movs	r2, #32
 8011aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ab2:	f043 0220 	orr.w	r2, r3, #32
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	2200      	movs	r2, #0
 8011abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8011ac2:	2301      	movs	r3, #1
 8011ac4:	e064      	b.n	8011b90 <HAL_I2C_Mem_Write_IT_NW+0x134>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	699b      	ldr	r3, [r3, #24]
 8011acc:	f003 0302 	and.w	r3, r3, #2
 8011ad0:	2b02      	cmp	r3, #2
 8011ad2:	d0db      	beq.n	8011a8c <HAL_I2C_Mem_Write_IT_NW+0x30>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011ada:	2b01      	cmp	r3, #1
 8011adc:	d101      	bne.n	8011ae2 <HAL_I2C_Mem_Write_IT_NW+0x86>
 8011ade:	2302      	movs	r3, #2
 8011ae0:	e056      	b.n	8011b90 <HAL_I2C_Mem_Write_IT_NW+0x134>
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	2201      	movs	r2, #1
 8011ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	f003 0301 	and.w	r3, r3, #1
 8011af4:	2b01      	cmp	r3, #1
 8011af6:	d007      	beq.n	8011b08 <HAL_I2C_Mem_Write_IT_NW+0xac>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	681a      	ldr	r2, [r3, #0]
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	f042 0201 	orr.w	r2, r2, #1
 8011b06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	681a      	ldr	r2, [r3, #0]
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011b16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	2221      	movs	r2, #33	; 0x21
 8011b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	2240      	movs	r2, #64	; 0x40
 8011b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	6a3a      	ldr	r2, [r7, #32]
 8011b32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011b38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011b3e:	b29a      	uxth	r2, r3
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	4a15      	ldr	r2, [pc, #84]	; (8011b9c <HAL_I2C_Mem_Write_IT_NW+0x140>)
 8011b48:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8011b4a:	897a      	ldrh	r2, [r7, #10]
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8011b50:	893a      	ldrh	r2, [r7, #8]
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8011b56:	88fa      	ldrh	r2, [r7, #6]
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	2200      	movs	r2, #0
 8011b60:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	681a      	ldr	r2, [r3, #0]
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011b70:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	2200      	movs	r2, #0
 8011b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	685a      	ldr	r2, [r3, #4]
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8011b88:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	e000      	b.n	8011b90 <HAL_I2C_Mem_Write_IT_NW+0x134>
  }
  else
  {
    return HAL_BUSY;
 8011b8e:	2302      	movs	r3, #2
  }
}
 8011b90:	4618      	mov	r0, r3
 8011b92:	371c      	adds	r7, #28
 8011b94:	46bd      	mov	sp, r7
 8011b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9a:	4770      	bx	lr
 8011b9c:	ffff0000 	.word	0xffff0000

08011ba0 <_ina3221_configure>:
    return HAL_BUSY;
  }
}

static void _ina3221_configure(int a, int continuous)
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b088      	sub	sp, #32
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
 8011ba8:	6039      	str	r1, [r7, #0]
	//HAL_StatusTypeDef status;
	uint16_t w16;

    _UNUSED_ uint16_t mid = ina3221_read16(a, INA3221_REG_MANUFACTURER_ID);
 8011baa:	21fe      	movs	r1, #254	; 0xfe
 8011bac:	6878      	ldr	r0, [r7, #4]
 8011bae:	f7ff fe71 	bl	8011894 <ina3221_read16>
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	83bb      	strh	r3, [r7, #28]
     // 0x5449
    _UNUSED_ uint16_t did = ina3221_read16(a,  INA3221_REG_DIE_ID);
 8011bb6:	21ff      	movs	r1, #255	; 0xff
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	f7ff fe6b 	bl	8011894 <ina3221_read16>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	837b      	strh	r3, [r7, #26]
    // 0x3220

    _UNUSED_ uint16_t cnfbr = ina3221_read16(a,  INA3221_REG_CONFIG);
 8011bc2:	2100      	movs	r1, #0
 8011bc4:	6878      	ldr	r0, [r7, #4]
 8011bc6:	f7ff fe65 	bl	8011894 <ina3221_read16>
 8011bca:	4603      	mov	r3, r0
 8011bcc:	833b      	strh	r3, [r7, #24]

    if ((1)) {
    	w16 = INA3221_CONF_RESET;
 8011bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011bd2:	83fb      	strh	r3, [r7, #30]
    	int rc = ina3221_write16(a, INA3221_REG_CONFIG, w16);
 8011bd4:	8bfb      	ldrh	r3, [r7, #30]
 8011bd6:	461a      	mov	r2, r3
 8011bd8:	2100      	movs	r1, #0
 8011bda:	6878      	ldr	r0, [r7, #4]
 8011bdc:	f7ff fe9a 	bl	8011914 <ina3221_write16>
 8011be0:	6178      	str	r0, [r7, #20]
    	if (rc) {
 8011be2:	697b      	ldr	r3, [r7, #20]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d003      	beq.n	8011bf0 <_ina3221_configure+0x50>
    		bkpoint(100,rc);
 8011be8:	6979      	ldr	r1, [r7, #20]
 8011bea:	2064      	movs	r0, #100	; 0x64
 8011bec:	f7ff faa6 	bl	801113c <bkpoint>
    	}
    	osDelay(1000);
 8011bf0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011bf4:	f7fb f91c 	bl	800ce30 <osDelay>
    	//if ((1)) return;
    }
    _UNUSED_ uint16_t cnfar = ina3221_read16(a,  INA3221_REG_CONFIG);
 8011bf8:	2100      	movs	r1, #0
 8011bfa:	6878      	ldr	r0, [r7, #4]
 8011bfc:	f7ff fe4a 	bl	8011894 <ina3221_read16>
 8011c00:	4603      	mov	r3, r0
 8011c02:	827b      	strh	r3, [r7, #18]

    w16 = INA3221_CONF_CH1_EN | INA3221_CONF_CH2_EN | INA3221_CONF_CH3_EN
 8011c04:	f247 0301 	movw	r3, #28673	; 0x7001
 8011c08:	83fb      	strh	r3, [r7, #30]
    		| INA3221_CONF_VS_CT_140u
			| INA3221_CONF_MODE_SHUNT;
    w16 |= (continuous ? INA3221_CONF_AVG16 : INA3221_CONF_AVG1);
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d002      	beq.n	8011c16 <_ina3221_configure+0x76>
 8011c10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011c14:	e000      	b.n	8011c18 <_ina3221_configure+0x78>
 8011c16:	2200      	movs	r2, #0
 8011c18:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011c1c:	4313      	orrs	r3, r2
 8011c1e:	b21b      	sxth	r3, r3
 8011c20:	83fb      	strh	r3, [r7, #30]

    if (continuous) w16 |= INA3221_CONF_MODE_CONTINUOUS;
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d003      	beq.n	8011c30 <_ina3221_configure+0x90>
 8011c28:	8bfb      	ldrh	r3, [r7, #30]
 8011c2a:	f043 0304 	orr.w	r3, r3, #4
 8011c2e:	83fb      	strh	r3, [r7, #30]
	ina_conf_val = w16;
 8011c30:	8bfb      	ldrh	r3, [r7, #30]
 8011c32:	4a13      	ldr	r2, [pc, #76]	; (8011c80 <_ina3221_configure+0xe0>)
 8011c34:	6013      	str	r3, [r2, #0]
	int rc = ina3221_write16(a, INA3221_REG_CONFIG, w16);
 8011c36:	8bfb      	ldrh	r3, [r7, #30]
 8011c38:	461a      	mov	r2, r3
 8011c3a:	2100      	movs	r1, #0
 8011c3c:	6878      	ldr	r0, [r7, #4]
 8011c3e:	f7ff fe69 	bl	8011914 <ina3221_write16>
 8011c42:	60f8      	str	r0, [r7, #12]
    if ((0)) osDelay(100*1);
    if (rc) bkpoint(101, rc);
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d003      	beq.n	8011c52 <_ina3221_configure+0xb2>
 8011c4a:	68f9      	ldr	r1, [r7, #12]
 8011c4c:	2065      	movs	r0, #101	; 0x65
 8011c4e:	f7ff fa75 	bl	801113c <bkpoint>
    rc = ina3221_write16(a, INA3221_REG_MASK_ENABLE, 0);
 8011c52:	2200      	movs	r2, #0
 8011c54:	210f      	movs	r1, #15
 8011c56:	6878      	ldr	r0, [r7, #4]
 8011c58:	f7ff fe5c 	bl	8011914 <ina3221_write16>
 8011c5c:	60f8      	str	r0, [r7, #12]
    if (rc) bkpoint(102, rc);
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d003      	beq.n	8011c6c <_ina3221_configure+0xcc>
 8011c64:	68f9      	ldr	r1, [r7, #12]
 8011c66:	2066      	movs	r0, #102	; 0x66
 8011c68:	f7ff fa68 	bl	801113c <bkpoint>

    _UNUSED_ uint16_t cnfac = ina3221_read16(a,  INA3221_REG_CONFIG);
 8011c6c:	2100      	movs	r1, #0
 8011c6e:	6878      	ldr	r0, [r7, #4]
 8011c70:	f7ff fe10 	bl	8011894 <ina3221_read16>
 8011c74:	4603      	mov	r3, r0
 8011c76:	817b      	strh	r3, [r7, #10]
    //if ((0)) ina3221_start_read();

    return;
 8011c78:	bf00      	nop
}
 8011c7a:	3720      	adds	r7, #32
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	bd80      	pop	{r7, pc}
 8011c80:	20005174 	.word	0x20005174

08011c84 <_ina3221_init>:

void _ina3221_init(int continuous)
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b086      	sub	sp, #24
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
	if (disable_ina3221) return;
 8011c8c:	4b1d      	ldr	r3, [pc, #116]	; (8011d04 <_ina3221_init+0x80>)
 8011c8e:	781b      	ldrb	r3, [r3, #0]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d132      	bne.n	8011cfa <_ina3221_init+0x76>
	//I2C_Scan();
	for (int dev = 0; dev<4; dev++) {
 8011c94:	2300      	movs	r3, #0
 8011c96:	617b      	str	r3, [r7, #20]
 8011c98:	e028      	b.n	8011cec <_ina3221_init+0x68>
		int addr = 0x40 + dev;
 8011c9a:	697b      	ldr	r3, [r7, #20]
 8011c9c:	3340      	adds	r3, #64	; 0x40
 8011c9e:	613b      	str	r3, [r7, #16]
	    HAL_StatusTypeDef res;
        res = HAL_I2C_IsDeviceReady(&INA3221_I2C_PORT, addr << 1, 1, 10);
 8011ca0:	693b      	ldr	r3, [r7, #16]
 8011ca2:	b29b      	uxth	r3, r3
 8011ca4:	005b      	lsls	r3, r3, #1
 8011ca6:	b299      	uxth	r1, r3
 8011ca8:	230a      	movs	r3, #10
 8011caa:	2201      	movs	r2, #1
 8011cac:	4816      	ldr	r0, [pc, #88]	; (8011d08 <_ina3221_init+0x84>)
 8011cae:	f7f1 ffef 	bl	8003c90 <HAL_I2C_IsDeviceReady>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	73fb      	strb	r3, [r7, #15]
        if (res == HAL_OK) {
 8011cb6:	7bfb      	ldrb	r3, [r7, #15]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d10f      	bne.n	8011cdc <_ina3221_init+0x58>
        	_ina3221_configure(addr, continuous);
 8011cbc:	6879      	ldr	r1, [r7, #4]
 8011cbe:	6938      	ldr	r0, [r7, #16]
 8011cc0:	f7ff ff6e 	bl	8011ba0 <_ina3221_configure>
        	itm_debug2(DBG_PRES|DBG_INA3221, "INA@", dev, addr);
 8011cc4:	693b      	ldr	r3, [r7, #16]
 8011cc6:	697a      	ldr	r2, [r7, #20]
 8011cc8:	4910      	ldr	r1, [pc, #64]	; (8011d0c <_ina3221_init+0x88>)
 8011cca:	2060      	movs	r0, #96	; 0x60
 8011ccc:	f7ff f9de 	bl	801108c <itm_debug2>
        	ina3221_devices[dev]=1;
 8011cd0:	4a0f      	ldr	r2, [pc, #60]	; (8011d10 <_ina3221_init+0x8c>)
 8011cd2:	697b      	ldr	r3, [r7, #20]
 8011cd4:	4413      	add	r3, r2
 8011cd6:	2201      	movs	r2, #1
 8011cd8:	701a      	strb	r2, [r3, #0]
 8011cda:	e004      	b.n	8011ce6 <_ina3221_init+0x62>
        } else {
        	ina3221_devices[dev]=0;
 8011cdc:	4a0c      	ldr	r2, [pc, #48]	; (8011d10 <_ina3221_init+0x8c>)
 8011cde:	697b      	ldr	r3, [r7, #20]
 8011ce0:	4413      	add	r3, r2
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	701a      	strb	r2, [r3, #0]
	for (int dev = 0; dev<4; dev++) {
 8011ce6:	697b      	ldr	r3, [r7, #20]
 8011ce8:	3301      	adds	r3, #1
 8011cea:	617b      	str	r3, [r7, #20]
 8011cec:	697b      	ldr	r3, [r7, #20]
 8011cee:	2b03      	cmp	r3, #3
 8011cf0:	ddd3      	ble.n	8011c9a <_ina3221_init+0x16>
        }
	}
	ina3221_init_done = 1;
 8011cf2:	4b08      	ldr	r3, [pc, #32]	; (8011d14 <_ina3221_init+0x90>)
 8011cf4:	2201      	movs	r2, #1
 8011cf6:	601a      	str	r2, [r3, #0]
 8011cf8:	e000      	b.n	8011cfc <_ina3221_init+0x78>
	if (disable_ina3221) return;
 8011cfa:	bf00      	nop
}
 8011cfc:	3718      	adds	r7, #24
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}
 8011d02:	bf00      	nop
 8011d04:	2000516e 	.word	0x2000516e
 8011d08:	2000562c 	.word	0x2000562c
 8011d0c:	08019614 	.word	0x08019614
 8011d10:	20005168 	.word	0x20005168
 8011d14:	20005170 	.word	0x20005170

08011d18 <ina3221_init_and_configure>:

static void ina3221_init_and_configure(void)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	af00      	add	r7, sp, #0
	_ina3221_init(INA3221_CONTIUNOUS);
 8011d1c:	2001      	movs	r0, #1
 8011d1e:	f7ff ffb1 	bl	8011c84 <_ina3221_init>
}
 8011d22:	bf00      	nop
 8011d24:	bd80      	pop	{r7, pc}

08011d26 <ina3221_task_start>:

// ----------------------------------------------------------------------------------

void ina3221_task_start(_UNUSED_ void *argument)
{
 8011d26:	b580      	push	{r7, lr}
 8011d28:	b082      	sub	sp, #8
 8011d2a:	af00      	add	r7, sp, #0
 8011d2c:	6078      	str	r0, [r7, #4]
	if (DISABLE_INA3221) {
		for(;;) {
			osDelay(1);
		}
	}
	run_ina_task();
 8011d2e:	f7ff fa19 	bl	8011164 <run_ina_task>
#else
	for(;;) {
		osDelay(1);
	}
#endif
}
 8011d32:	bf00      	nop
 8011d34:	3708      	adds	r7, #8
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd80      	pop	{r7, pc}
	...

08011d3c <itm_debug1>:
{
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b086      	sub	sp, #24
 8011d40:	af02      	add	r7, sp, #8
 8011d42:	60f8      	str	r0, [r7, #12]
 8011d44:	60b9      	str	r1, [r7, #8]
 8011d46:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8011d48:	4b08      	ldr	r3, [pc, #32]	; (8011d6c <itm_debug1+0x30>)
 8011d4a:	681a      	ldr	r2, [r3, #0]
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	4013      	ands	r3, r2
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d007      	beq.n	8011d64 <itm_debug1+0x28>
 8011d54:	2301      	movs	r3, #1
 8011d56:	9300      	str	r3, [sp, #0]
 8011d58:	2300      	movs	r3, #0
 8011d5a:	2200      	movs	r2, #0
 8011d5c:	6879      	ldr	r1, [r7, #4]
 8011d5e:	68b8      	ldr	r0, [r7, #8]
 8011d60:	f007 f882 	bl	8018e68 <_itm_debug3>
}
 8011d64:	bf00      	nop
 8011d66:	3710      	adds	r7, #16
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bd80      	pop	{r7, pc}
 8011d6c:	200005a4 	.word	0x200005a4

08011d70 <ihm_setlayout>:
		CODE_END
};


void ihm_setlayout(int numdisp, int numlayout)
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b084      	sub	sp, #16
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
 8011d78:	6039      	str	r1, [r7, #0]
	const uint8_t *p = NULL;
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	60fb      	str	r3, [r7, #12]
	switch (numlayout) {
 8011d7e:	683b      	ldr	r3, [r7, #0]
 8011d80:	2b03      	cmp	r3, #3
 8011d82:	d017      	beq.n	8011db4 <ihm_setlayout+0x44>
 8011d84:	2b03      	cmp	r3, #3
 8011d86:	dc06      	bgt.n	8011d96 <ihm_setlayout+0x26>
 8011d88:	2b01      	cmp	r3, #1
 8011d8a:	d00d      	beq.n	8011da8 <ihm_setlayout+0x38>
 8011d8c:	2b01      	cmp	r3, #1
 8011d8e:	dc0e      	bgt.n	8011dae <ihm_setlayout+0x3e>
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d024      	beq.n	8011dde <ihm_setlayout+0x6e>
 8011d94:	e01d      	b.n	8011dd2 <ihm_setlayout+0x62>
 8011d96:	2b05      	cmp	r3, #5
 8011d98:	d018      	beq.n	8011dcc <ihm_setlayout+0x5c>
 8011d9a:	2b05      	cmp	r3, #5
 8011d9c:	db13      	blt.n	8011dc6 <ihm_setlayout+0x56>
 8011d9e:	2bc8      	cmp	r3, #200	; 0xc8
 8011da0:	d00b      	beq.n	8011dba <ihm_setlayout+0x4a>
 8011da2:	2bc9      	cmp	r3, #201	; 0xc9
 8011da4:	d00c      	beq.n	8011dc0 <ihm_setlayout+0x50>
 8011da6:	e014      	b.n	8011dd2 <ihm_setlayout+0x62>
	case LAYOUT_DEFAULT: // default
		break;
	case LAYOUT_INIT:
		p = layout_init;
 8011da8:	4b12      	ldr	r3, [pc, #72]	; (8011df4 <ihm_setlayout+0x84>)
 8011daa:	60fb      	str	r3, [r7, #12]
		break;
 8011dac:	e018      	b.n	8011de0 <ihm_setlayout+0x70>
	case LAYOUT_MANUAL: // speed mode
		p = layout_manual;
 8011dae:	4b12      	ldr	r3, [pc, #72]	; (8011df8 <ihm_setlayout+0x88>)
 8011db0:	60fb      	str	r3, [r7, #12]
		break;
 8011db2:	e015      	b.n	8011de0 <ihm_setlayout+0x70>
	case LAYOUT_AUTO:
		p = layout_auto;
 8011db4:	4b11      	ldr	r3, [pc, #68]	; (8011dfc <ihm_setlayout+0x8c>)
 8011db6:	60fb      	str	r3, [r7, #12]
		break;
 8011db8:	e012      	b.n	8011de0 <ihm_setlayout+0x70>
	case LAYOUT_INA3221_DETECT: // ina3221 I2C detection
		p = layout_ina3221_i2c;
 8011dba:	4b11      	ldr	r3, [pc, #68]	; (8011e00 <ihm_setlayout+0x90>)
 8011dbc:	60fb      	str	r3, [r7, #12]
		break;
 8011dbe:	e00f      	b.n	8011de0 <ihm_setlayout+0x70>
	case LAYOUT_INA3221_VAL:
		p = layout_ina3221_val;
 8011dc0:	4b10      	ldr	r3, [pc, #64]	; (8011e04 <ihm_setlayout+0x94>)
 8011dc2:	60fb      	str	r3, [r7, #12]
		break;
 8011dc4:	e00c      	b.n	8011de0 <ihm_setlayout+0x70>
	case LAYOUT_OFF:
		p = layout_off;
 8011dc6:	4b10      	ldr	r3, [pc, #64]	; (8011e08 <ihm_setlayout+0x98>)
 8011dc8:	60fb      	str	r3, [r7, #12]
		break;
 8011dca:	e009      	b.n	8011de0 <ihm_setlayout+0x70>
	case LAYOUT_DETECT1:
		p = layout_detect1;
 8011dcc:	4b0f      	ldr	r3, [pc, #60]	; (8011e0c <ihm_setlayout+0x9c>)
 8011dce:	60fb      	str	r3, [r7, #12]
		break;
 8011dd0:	e006      	b.n	8011de0 <ihm_setlayout+0x70>
	default:
		itm_debug1(DBG_ERR|DBG_UI, "bad layout", numlayout);
 8011dd2:	683a      	ldr	r2, [r7, #0]
 8011dd4:	490e      	ldr	r1, [pc, #56]	; (8011e10 <ihm_setlayout+0xa0>)
 8011dd6:	480f      	ldr	r0, [pc, #60]	; (8011e14 <ihm_setlayout+0xa4>)
 8011dd8:	f7ff ffb0 	bl	8011d3c <itm_debug1>
		break;
 8011ddc:	e000      	b.n	8011de0 <ihm_setlayout+0x70>
		break;
 8011dde:	bf00      	nop
	}
	disp[numdisp] = p;
 8011de0:	490d      	ldr	r1, [pc, #52]	; (8011e18 <ihm_setlayout+0xa8>)
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	68fa      	ldr	r2, [r7, #12]
 8011de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8011dea:	bf00      	nop
 8011dec:	3710      	adds	r7, #16
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bd80      	pop	{r7, pc}
 8011df2:	bf00      	nop
 8011df4:	0801ba14 	.word	0x0801ba14
 8011df8:	0801ba1c 	.word	0x0801ba1c
 8011dfc:	0801ba30 	.word	0x0801ba30
 8011e00:	0801ba44 	.word	0x0801ba44
 8011e04:	0801ba5c 	.word	0x0801ba5c
 8011e08:	0801ba04 	.word	0x0801ba04
 8011e0c:	0801ba74 	.word	0x0801ba74
 8011e10:	0801961c 	.word	0x0801961c
 8011e14:	80000800 	.word	0x80000800
 8011e18:	200051c4 	.word	0x200051c4

08011e1c <ihm_setvar>:
// ----------------------------------------------------------------

static uint16_t regs[DISP_MAX_REGS][MAX_DISP];

void ihm_setvar(int numdisp, int varnum, uint16_t val)
{
 8011e1c:	b480      	push	{r7}
 8011e1e:	b085      	sub	sp, #20
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	60f8      	str	r0, [r7, #12]
 8011e24:	60b9      	str	r1, [r7, #8]
 8011e26:	4613      	mov	r3, r2
 8011e28:	80fb      	strh	r3, [r7, #6]
	if (varnum>DISP_MAX_REGS) return;
 8011e2a:	68bb      	ldr	r3, [r7, #8]
 8011e2c:	2b10      	cmp	r3, #16
 8011e2e:	dc0a      	bgt.n	8011e46 <ihm_setvar+0x2a>
	if (numdisp>MAX_DISP) return;
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	2b01      	cmp	r3, #1
 8011e34:	dc09      	bgt.n	8011e4a <ihm_setvar+0x2e>
	regs[varnum][numdisp] = val;
 8011e36:	4908      	ldr	r1, [pc, #32]	; (8011e58 <ihm_setvar+0x3c>)
 8011e38:	68ba      	ldr	r2, [r7, #8]
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	4413      	add	r3, r2
 8011e3e:	88fa      	ldrh	r2, [r7, #6]
 8011e40:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8011e44:	e002      	b.n	8011e4c <ihm_setvar+0x30>
	if (varnum>DISP_MAX_REGS) return;
 8011e46:	bf00      	nop
 8011e48:	e000      	b.n	8011e4c <ihm_setvar+0x30>
	if (numdisp>MAX_DISP) return;
 8011e4a:	bf00      	nop
}
 8011e4c:	3714      	adds	r7, #20
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e54:	4770      	bx	lr
 8011e56:	bf00      	nop
 8011e58:	200051c8 	.word	0x200051c8

08011e5c <ihm_getvar>:
uint16_t ihm_getvar(int numdisp, int varnum)
{
 8011e5c:	b480      	push	{r7}
 8011e5e:	b083      	sub	sp, #12
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
 8011e64:	6039      	str	r1, [r7, #0]
	if (varnum>DISP_MAX_REGS) return 0;
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	2b10      	cmp	r3, #16
 8011e6a:	dd01      	ble.n	8011e70 <ihm_getvar+0x14>
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	e00a      	b.n	8011e86 <ihm_getvar+0x2a>
	if (numdisp>MAX_DISP) return 0;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	2b01      	cmp	r3, #1
 8011e74:	dd01      	ble.n	8011e7a <ihm_getvar+0x1e>
 8011e76:	2300      	movs	r3, #0
 8011e78:	e005      	b.n	8011e86 <ihm_getvar+0x2a>
	return regs[varnum][numdisp];
 8011e7a:	4906      	ldr	r1, [pc, #24]	; (8011e94 <ihm_getvar+0x38>)
 8011e7c:	683a      	ldr	r2, [r7, #0]
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	4413      	add	r3, r2
 8011e82:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
}
 8011e86:	4618      	mov	r0, r3
 8011e88:	370c      	adds	r7, #12
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e90:	4770      	bx	lr
 8011e92:	bf00      	nop
 8011e94:	200051c8 	.word	0x200051c8

08011e98 <disp_layout>:
static void write_snum1000(int16_t v, FontDef *curfont);
static void write_bargraph(int16_t v, int16_t min, int16_t max);
static void write_sbargraph(int16_t v, int16_t min, int16_t max);

void disp_layout(int numdisp)
{
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	b08c      	sub	sp, #48	; 0x30
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
	uint32_t t0 = HAL_GetTick();
 8011ea0:	f7ef ffa8 	bl	8001df4 <HAL_GetTick>
 8011ea4:	61f8      	str	r0, [r7, #28]
	const uint8_t *d = disp[numdisp];
 8011ea6:	4ace      	ldr	r2, [pc, #824]	; (80121e0 <disp_layout+0x348>)
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011eae:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (!d) d = default_layout;
 8011eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d101      	bne.n	8011eba <disp_layout+0x22>
 8011eb6:	4bcb      	ldr	r3, [pc, #812]	; (80121e4 <disp_layout+0x34c>)
 8011eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	ssd1306_Fill(Black);
 8011eba:	2000      	movs	r0, #0
 8011ebc:	f7fe fde4 	bl	8010a88 <ssd1306_Fill>
	ssd1306_SetCursor(0, 0);
 8011ec0:	2100      	movs	r1, #0
 8011ec2:	2000      	movs	r0, #0
 8011ec4:	f7fe ffc4 	bl	8010e50 <ssd1306_SetCursor>
	FontDef *curfont = &Font_7x10;
 8011ec8:	4bc7      	ldr	r3, [pc, #796]	; (80121e8 <disp_layout+0x350>)
 8011eca:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t v16s;
	//uint16_t *puval;
	static uint16_t last_dur1=0;
	static uint16_t last_dur2=0;

	for (int i=0; i<MAX_OPCODE_PER_DISPLAY; i++) {
 8011ecc:	2300      	movs	r3, #0
 8011ece:	623b      	str	r3, [r7, #32]
 8011ed0:	e2a4      	b.n	801241c <disp_layout+0x584>
		if (CODE_END == d[i]) break;
 8011ed2:	6a3b      	ldr	r3, [r7, #32]
 8011ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ed6:	4413      	add	r3, r2
 8011ed8:	781b      	ldrb	r3, [r3, #0]
 8011eda:	2bfe      	cmp	r3, #254	; 0xfe
 8011edc:	f000 82a3 	beq.w	8012426 <disp_layout+0x58e>
		if ((d[i] & 0x80)==0) { // CODE_STR
 8011ee0:	6a3b      	ldr	r3, [r7, #32]
 8011ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ee4:	4413      	add	r3, r2
 8011ee6:	781b      	ldrb	r3, [r3, #0]
 8011ee8:	b25b      	sxtb	r3, r3
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	db10      	blt.n	8011f10 <disp_layout+0x78>
			const char * stri = ui_strings[d[i]&0x7F];
 8011eee:	6a3b      	ldr	r3, [r7, #32]
 8011ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ef2:	4413      	add	r3, r2
 8011ef4:	781b      	ldrb	r3, [r3, #0]
 8011ef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011efa:	4abc      	ldr	r2, [pc, #752]	; (80121ec <disp_layout+0x354>)
 8011efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f00:	613b      	str	r3, [r7, #16]
			ssd1306_WriteString(stri, *curfont, White);
 8011f02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f04:	2301      	movs	r3, #1
 8011f06:	ca06      	ldmia	r2, {r1, r2}
 8011f08:	6938      	ldr	r0, [r7, #16]
 8011f0a:	f7fe ff7b 	bl	8010e04 <ssd1306_WriteString>
			continue;
 8011f0e:	e282      	b.n	8012416 <disp_layout+0x57e>
		}
		switch (d[i]) {
 8011f10:	6a3b      	ldr	r3, [r7, #32]
 8011f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011f14:	4413      	add	r3, r2
 8011f16:	781b      	ldrb	r3, [r3, #0]
 8011f18:	3b80      	subs	r3, #128	; 0x80
 8011f1a:	2b7f      	cmp	r3, #127	; 0x7f
 8011f1c:	f200 826d 	bhi.w	80123fa <disp_layout+0x562>
 8011f20:	a201      	add	r2, pc, #4	; (adr r2, 8011f28 <disp_layout+0x90>)
 8011f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f26:	bf00      	nop
 8011f28:	08012129 	.word	0x08012129
 8011f2c:	08012137 	.word	0x08012137
 8011f30:	08012145 	.word	0x08012145
 8011f34:	08012153 	.word	0x08012153
 8011f38:	08012161 	.word	0x08012161
 8011f3c:	0801216f 	.word	0x0801216f
 8011f40:	0801217d 	.word	0x0801217d
 8011f44:	0801218b 	.word	0x0801218b
 8011f48:	0801236d 	.word	0x0801236d
 8011f4c:	080123fb 	.word	0x080123fb
 8011f50:	080123fb 	.word	0x080123fb
 8011f54:	080123fb 	.word	0x080123fb
 8011f58:	080123fb 	.word	0x080123fb
 8011f5c:	080123fb 	.word	0x080123fb
 8011f60:	080123fb 	.word	0x080123fb
 8011f64:	08012381 	.word	0x08012381
 8011f68:	080123fb 	.word	0x080123fb
 8011f6c:	080123fb 	.word	0x080123fb
 8011f70:	080123fb 	.word	0x080123fb
 8011f74:	080123fb 	.word	0x080123fb
 8011f78:	080123fb 	.word	0x080123fb
 8011f7c:	080123fb 	.word	0x080123fb
 8011f80:	080123fb 	.word	0x080123fb
 8011f84:	080123fb 	.word	0x080123fb
 8011f88:	080123fb 	.word	0x080123fb
 8011f8c:	080123fb 	.word	0x080123fb
 8011f90:	080123fb 	.word	0x080123fb
 8011f94:	080123fb 	.word	0x080123fb
 8011f98:	080123fb 	.word	0x080123fb
 8011f9c:	080123fb 	.word	0x080123fb
 8011fa0:	080123fb 	.word	0x080123fb
 8011fa4:	080123fb 	.word	0x080123fb
 8011fa8:	080123fb 	.word	0x080123fb
 8011fac:	080123fb 	.word	0x080123fb
 8011fb0:	080123fb 	.word	0x080123fb
 8011fb4:	080123fb 	.word	0x080123fb
 8011fb8:	080123fb 	.word	0x080123fb
 8011fbc:	080123fb 	.word	0x080123fb
 8011fc0:	080123fb 	.word	0x080123fb
 8011fc4:	080123fb 	.word	0x080123fb
 8011fc8:	080123fb 	.word	0x080123fb
 8011fcc:	080123fb 	.word	0x080123fb
 8011fd0:	080123fb 	.word	0x080123fb
 8011fd4:	080123fb 	.word	0x080123fb
 8011fd8:	080123fb 	.word	0x080123fb
 8011fdc:	080123fb 	.word	0x080123fb
 8011fe0:	080123fb 	.word	0x080123fb
 8011fe4:	080123fb 	.word	0x080123fb
 8011fe8:	080123fb 	.word	0x080123fb
 8011fec:	080123fb 	.word	0x080123fb
 8011ff0:	080123fb 	.word	0x080123fb
 8011ff4:	080123fb 	.word	0x080123fb
 8011ff8:	080123fb 	.word	0x080123fb
 8011ffc:	080123fb 	.word	0x080123fb
 8012000:	080123fb 	.word	0x080123fb
 8012004:	080123fb 	.word	0x080123fb
 8012008:	080123fb 	.word	0x080123fb
 801200c:	080123fb 	.word	0x080123fb
 8012010:	080123fb 	.word	0x080123fb
 8012014:	080123fb 	.word	0x080123fb
 8012018:	080123fb 	.word	0x080123fb
 801201c:	080123fb 	.word	0x080123fb
 8012020:	080123fb 	.word	0x080123fb
 8012024:	080123fb 	.word	0x080123fb
 8012028:	080121f9 	.word	0x080121f9
 801202c:	080123a7 	.word	0x080123a7
 8012030:	080122a5 	.word	0x080122a5
 8012034:	080122cb 	.word	0x080122cb
 8012038:	080122f1 	.word	0x080122f1
 801203c:	0801222d 	.word	0x0801222d
 8012040:	08012255 	.word	0x08012255
 8012044:	0801227d 	.word	0x0801227d
 8012048:	08012317 	.word	0x08012317
 801204c:	08012341 	.word	0x08012341
 8012050:	08012199 	.word	0x08012199
 8012054:	080123fb 	.word	0x080123fb
 8012058:	080123fb 	.word	0x080123fb
 801205c:	080123fb 	.word	0x080123fb
 8012060:	080123fb 	.word	0x080123fb
 8012064:	080123fb 	.word	0x080123fb
 8012068:	080123fb 	.word	0x080123fb
 801206c:	080123fb 	.word	0x080123fb
 8012070:	080123fb 	.word	0x080123fb
 8012074:	080123fb 	.word	0x080123fb
 8012078:	080123fb 	.word	0x080123fb
 801207c:	080123fb 	.word	0x080123fb
 8012080:	080123fb 	.word	0x080123fb
 8012084:	080123fb 	.word	0x080123fb
 8012088:	080123fb 	.word	0x080123fb
 801208c:	080123fb 	.word	0x080123fb
 8012090:	080123fb 	.word	0x080123fb
 8012094:	080123fb 	.word	0x080123fb
 8012098:	080123fb 	.word	0x080123fb
 801209c:	080123fb 	.word	0x080123fb
 80120a0:	080123fb 	.word	0x080123fb
 80120a4:	080123fb 	.word	0x080123fb
 80120a8:	080123fb 	.word	0x080123fb
 80120ac:	080123fb 	.word	0x080123fb
 80120b0:	080123fb 	.word	0x080123fb
 80120b4:	080123fb 	.word	0x080123fb
 80120b8:	080123fb 	.word	0x080123fb
 80120bc:	080123fb 	.word	0x080123fb
 80120c0:	080123fb 	.word	0x080123fb
 80120c4:	080123fb 	.word	0x080123fb
 80120c8:	080123fb 	.word	0x080123fb
 80120cc:	080123fb 	.word	0x080123fb
 80120d0:	080123fb 	.word	0x080123fb
 80120d4:	080123fb 	.word	0x080123fb
 80120d8:	080123fb 	.word	0x080123fb
 80120dc:	080123fb 	.word	0x080123fb
 80120e0:	080123fb 	.word	0x080123fb
 80120e4:	080123fb 	.word	0x080123fb
 80120e8:	080123fb 	.word	0x080123fb
 80120ec:	080123fb 	.word	0x080123fb
 80120f0:	080123fb 	.word	0x080123fb
 80120f4:	080123fb 	.word	0x080123fb
 80120f8:	080123fb 	.word	0x080123fb
 80120fc:	080123fb 	.word	0x080123fb
 8012100:	080123fb 	.word	0x080123fb
 8012104:	080123fb 	.word	0x080123fb
 8012108:	080123fb 	.word	0x080123fb
 801210c:	080123fb 	.word	0x080123fb
 8012110:	080123fb 	.word	0x080123fb
 8012114:	080123fb 	.word	0x080123fb
 8012118:	080123fb 	.word	0x080123fb
 801211c:	080123fb 	.word	0x080123fb
 8012120:	080123fb 	.word	0x080123fb
 8012124:	08012415 	.word	0x08012415
		case CODE_NOP: break;
		case CODE_ZONE_STATUS:
			ssd1306_SetCursor(0, 0);
 8012128:	2100      	movs	r1, #0
 801212a:	2000      	movs	r0, #0
 801212c:	f7fe fe90 	bl	8010e50 <ssd1306_SetCursor>
			curfont = &Font_7x10;
 8012130:	4b2d      	ldr	r3, [pc, #180]	; (80121e8 <disp_layout+0x350>)
 8012132:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8012134:	e16f      	b.n	8012416 <disp_layout+0x57e>
		case CODE_ZONE_MODE:
			ssd1306_SetCursor(RIGHT_X, 0);
 8012136:	2100      	movs	r1, #0
 8012138:	2040      	movs	r0, #64	; 0x40
 801213a:	f7fe fe89 	bl	8010e50 <ssd1306_SetCursor>
			curfont = &Font_7x10;
 801213e:	4b2a      	ldr	r3, [pc, #168]	; (80121e8 <disp_layout+0x350>)
 8012140:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8012142:	e168      	b.n	8012416 <disp_layout+0x57e>
		case CODE_ZONE_TEXT1:
			ssd1306_SetCursor(0, TEXT_Y);
 8012144:	210c      	movs	r1, #12
 8012146:	2000      	movs	r0, #0
 8012148:	f7fe fe82 	bl	8010e50 <ssd1306_SetCursor>
			curfont = &Font_11x18;
 801214c:	4b28      	ldr	r3, [pc, #160]	; (80121f0 <disp_layout+0x358>)
 801214e:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 8012150:	e161      	b.n	8012416 <disp_layout+0x57e>
		case CODE_ZONE_TEXT2:
			ssd1306_SetCursor(RIGHT_X, TEXT_Y);
 8012152:	210c      	movs	r1, #12
 8012154:	2040      	movs	r0, #64	; 0x40
 8012156:	f7fe fe7b 	bl	8010e50 <ssd1306_SetCursor>
			curfont = &Font_11x18;
 801215a:	4b25      	ldr	r3, [pc, #148]	; (80121f0 <disp_layout+0x358>)
 801215c:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 801215e:	e15a      	b.n	8012416 <disp_layout+0x57e>
		case CODE_ZONE_TEXT1s:
			ssd1306_SetCursor(0, TEXT_Y);
 8012160:	210c      	movs	r1, #12
 8012162:	2000      	movs	r0, #0
 8012164:	f7fe fe74 	bl	8010e50 <ssd1306_SetCursor>
			curfont = &Font_7x10;
 8012168:	4b1f      	ldr	r3, [pc, #124]	; (80121e8 <disp_layout+0x350>)
 801216a:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 801216c:	e153      	b.n	8012416 <disp_layout+0x57e>
		case CODE_ZONE_TEXT2s:
			ssd1306_SetCursor(RIGHT_X, TEXT_Y);
 801216e:	210c      	movs	r1, #12
 8012170:	2040      	movs	r0, #64	; 0x40
 8012172:	f7fe fe6d 	bl	8010e50 <ssd1306_SetCursor>
			curfont = &Font_7x10;
 8012176:	4b1c      	ldr	r3, [pc, #112]	; (80121e8 <disp_layout+0x350>)
 8012178:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 801217a:	e14c      	b.n	8012416 <disp_layout+0x57e>
		case CODE_ZONE_TEXT3s:
#ifdef SSD1306_INCLUDE_FONT_6x8
			ssd1306_SetCursor(0, TEXT_Y+12);
 801217c:	2118      	movs	r1, #24
 801217e:	2000      	movs	r0, #0
 8012180:	f7fe fe66 	bl	8010e50 <ssd1306_SetCursor>
			curfont = &Font_6x8;
 8012184:	4b1b      	ldr	r3, [pc, #108]	; (80121f4 <disp_layout+0x35c>)
 8012186:	62bb      	str	r3, [r7, #40]	; 0x28
#else
			ssd1306_SetCursor(0, TEXT_Y+10);
			curfont = &Font_7x10;
#endif
			break;
 8012188:	e145      	b.n	8012416 <disp_layout+0x57e>
		case CODE_ZONE_TEXT4s:
#ifdef SSD1306_INCLUDE_FONT_6x8
			ssd1306_SetCursor(RIGHT_X, TEXT_Y+12);
 801218a:	2118      	movs	r1, #24
 801218c:	2040      	movs	r0, #64	; 0x40
 801218e:	f7fe fe5f 	bl	8010e50 <ssd1306_SetCursor>
			curfont = &Font_6x8;
 8012192:	4b18      	ldr	r3, [pc, #96]	; (80121f4 <disp_layout+0x35c>)
 8012194:	62bb      	str	r3, [r7, #40]	; 0x28
#else
			ssd1306_SetCursor(RIGHT_X, TEXT_Y+10);
			curfont = &Font_7x10;
#endif
			break;
 8012196:	e13e      	b.n	8012416 <disp_layout+0x57e>
			curfont = &Font_16x26;
			break;
#endif

		case CODE_SPTR:
			i++;
 8012198:	6a3b      	ldr	r3, [r7, #32]
 801219a:	3301      	adds	r3, #1
 801219c:	623b      	str	r3, [r7, #32]
			v16u = (int16_t) _GET_REG(numdisp, d[i]);
 801219e:	6a3b      	ldr	r3, [r7, #32]
 80121a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121a2:	4413      	add	r3, r2
 80121a4:	781b      	ldrb	r3, [r3, #0]
 80121a6:	4619      	mov	r1, r3
 80121a8:	6878      	ldr	r0, [r7, #4]
 80121aa:	f7ff fe57 	bl	8011e5c <ihm_getvar>
 80121ae:	4603      	mov	r3, r0
 80121b0:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (v16u<10) v16u = 10;
 80121b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80121b4:	2b09      	cmp	r3, #9
 80121b6:	d801      	bhi.n	80121bc <disp_layout+0x324>
 80121b8:	230a      	movs	r3, #10
 80121ba:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (v16u>100) v16u = 100;
 80121bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80121be:	2b64      	cmp	r3, #100	; 0x64
 80121c0:	d901      	bls.n	80121c6 <disp_layout+0x32e>
 80121c2:	2364      	movs	r3, #100	; 0x64
 80121c4:	84fb      	strh	r3, [r7, #38]	; 0x26
			const char * stri = ui_strings[v16u];
 80121c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80121c8:	4a08      	ldr	r2, [pc, #32]	; (80121ec <disp_layout+0x354>)
 80121ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80121ce:	61bb      	str	r3, [r7, #24]
			ssd1306_WriteString(stri, *curfont, White);
 80121d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80121d2:	2301      	movs	r3, #1
 80121d4:	ca06      	ldmia	r2, {r1, r2}
 80121d6:	69b8      	ldr	r0, [r7, #24]
 80121d8:	f7fe fe14 	bl	8010e04 <ssd1306_WriteString>
			break;
 80121dc:	e11b      	b.n	8012416 <disp_layout+0x57e>
 80121de:	bf00      	nop
 80121e0:	200051c4 	.word	0x200051c4
 80121e4:	0801ba0c 	.word	0x0801ba0c
 80121e8:	2000018c 	.word	0x2000018c
 80121ec:	200001a0 	.word	0x200001a0
 80121f0:	20000194 	.word	0x20000194
 80121f4:	20000184 	.word	0x20000184
		case CODE_DIGIT:
			i++;
 80121f8:	6a3b      	ldr	r3, [r7, #32]
 80121fa:	3301      	adds	r3, #1
 80121fc:	623b      	str	r3, [r7, #32]
			v16u = (int16_t) _GET_REG(numdisp, d[i]);
 80121fe:	6a3b      	ldr	r3, [r7, #32]
 8012200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012202:	4413      	add	r3, r2
 8012204:	781b      	ldrb	r3, [r3, #0]
 8012206:	4619      	mov	r1, r3
 8012208:	6878      	ldr	r0, [r7, #4]
 801220a:	f7ff fe27 	bl	8011e5c <ihm_getvar>
 801220e:	4603      	mov	r3, r0
 8012210:	84fb      	strh	r3, [r7, #38]	; 0x26
			ssd1306_WriteChar('0'+(v16u & 0xF) , *curfont, White);
 8012212:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012214:	b2db      	uxtb	r3, r3
 8012216:	f003 030f 	and.w	r3, r3, #15
 801221a:	b2db      	uxtb	r3, r3
 801221c:	3330      	adds	r3, #48	; 0x30
 801221e:	b2d8      	uxtb	r0, r3
 8012220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012222:	2301      	movs	r3, #1
 8012224:	ca06      	ldmia	r2, {r1, r2}
 8012226:	f7fe fd65 	bl	8010cf4 <ssd1306_WriteChar>
			break;
 801222a:	e0f4      	b.n	8012416 <disp_layout+0x57e>
		case CODE_SVAL:
			i++;
 801222c:	6a3b      	ldr	r3, [r7, #32]
 801222e:	3301      	adds	r3, #1
 8012230:	623b      	str	r3, [r7, #32]
			v16s = (int16_t) _GET_REG(numdisp, d[i]);
 8012232:	6a3b      	ldr	r3, [r7, #32]
 8012234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012236:	4413      	add	r3, r2
 8012238:	781b      	ldrb	r3, [r3, #0]
 801223a:	4619      	mov	r1, r3
 801223c:	6878      	ldr	r0, [r7, #4]
 801223e:	f7ff fe0d 	bl	8011e5c <ihm_getvar>
 8012242:	4603      	mov	r3, r0
 8012244:	82fb      	strh	r3, [r7, #22]
			write_snum(v16s, curfont);
 8012246:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801224a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801224c:	4618      	mov	r0, r3
 801224e:	f000 f9bb 	bl	80125c8 <write_snum>
			break;
 8012252:	e0e0      	b.n	8012416 <disp_layout+0x57e>
		case CODE_SVAL4:
			i++;
 8012254:	6a3b      	ldr	r3, [r7, #32]
 8012256:	3301      	adds	r3, #1
 8012258:	623b      	str	r3, [r7, #32]
			v16s = (int16_t) _GET_REG(numdisp, d[i]);
 801225a:	6a3b      	ldr	r3, [r7, #32]
 801225c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801225e:	4413      	add	r3, r2
 8012260:	781b      	ldrb	r3, [r3, #0]
 8012262:	4619      	mov	r1, r3
 8012264:	6878      	ldr	r0, [r7, #4]
 8012266:	f7ff fdf9 	bl	8011e5c <ihm_getvar>
 801226a:	4603      	mov	r3, r0
 801226c:	82fb      	strh	r3, [r7, #22]
			write_snum4(v16s, curfont);
 801226e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012272:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012274:	4618      	mov	r0, r3
 8012276:	f000 f9e5 	bl	8012644 <write_snum4>
			break;
 801227a:	e0cc      	b.n	8012416 <disp_layout+0x57e>
		case CODE_SVAL1000:
			i++;
 801227c:	6a3b      	ldr	r3, [r7, #32]
 801227e:	3301      	adds	r3, #1
 8012280:	623b      	str	r3, [r7, #32]
			v16s = (int16_t) _GET_REG(numdisp, d[i]);
 8012282:	6a3b      	ldr	r3, [r7, #32]
 8012284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012286:	4413      	add	r3, r2
 8012288:	781b      	ldrb	r3, [r3, #0]
 801228a:	4619      	mov	r1, r3
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f7ff fde5 	bl	8011e5c <ihm_getvar>
 8012292:	4603      	mov	r3, r0
 8012294:	82fb      	strh	r3, [r7, #22]
			write_snum1000(v16s, curfont);
 8012296:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801229a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801229c:	4618      	mov	r0, r3
 801229e:	f000 fa0b 	bl	80126b8 <write_snum1000>
			break;
 80122a2:	e0b8      	b.n	8012416 <disp_layout+0x57e>
		case CODE_UVAL:
			i++;
 80122a4:	6a3b      	ldr	r3, [r7, #32]
 80122a6:	3301      	adds	r3, #1
 80122a8:	623b      	str	r3, [r7, #32]
			v16u = _GET_REG(numdisp, d[i]);
 80122aa:	6a3b      	ldr	r3, [r7, #32]
 80122ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122ae:	4413      	add	r3, r2
 80122b0:	781b      	ldrb	r3, [r3, #0]
 80122b2:	4619      	mov	r1, r3
 80122b4:	6878      	ldr	r0, [r7, #4]
 80122b6:	f7ff fdd1 	bl	8011e5c <ihm_getvar>
 80122ba:	4603      	mov	r3, r0
 80122bc:	84fb      	strh	r3, [r7, #38]	; 0x26
			write_unum(v16u, curfont);
 80122be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80122c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80122c2:	4618      	mov	r0, r3
 80122c4:	f000 f940 	bl	8012548 <write_unum>
			break;
 80122c8:	e0a5      	b.n	8012416 <disp_layout+0x57e>
		case CODE_UVAL4:
			i++;
 80122ca:	6a3b      	ldr	r3, [r7, #32]
 80122cc:	3301      	adds	r3, #1
 80122ce:	623b      	str	r3, [r7, #32]
			v16u = _GET_REG(numdisp, d[i]);
 80122d0:	6a3b      	ldr	r3, [r7, #32]
 80122d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122d4:	4413      	add	r3, r2
 80122d6:	781b      	ldrb	r3, [r3, #0]
 80122d8:	4619      	mov	r1, r3
 80122da:	6878      	ldr	r0, [r7, #4]
 80122dc:	f7ff fdbe 	bl	8011e5c <ihm_getvar>
 80122e0:	4603      	mov	r3, r0
 80122e2:	84fb      	strh	r3, [r7, #38]	; 0x26
			write_unum4(v16u, curfont);
 80122e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80122e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80122e8:	4618      	mov	r0, r3
 80122ea:	f000 f93d 	bl	8012568 <write_unum4>
			break;
 80122ee:	e092      	b.n	8012416 <disp_layout+0x57e>
		case CODE_UVAL1000:
			i++;
 80122f0:	6a3b      	ldr	r3, [r7, #32]
 80122f2:	3301      	adds	r3, #1
 80122f4:	623b      	str	r3, [r7, #32]
			v16u = _GET_REG(numdisp, d[i]);
 80122f6:	6a3b      	ldr	r3, [r7, #32]
 80122f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122fa:	4413      	add	r3, r2
 80122fc:	781b      	ldrb	r3, [r3, #0]
 80122fe:	4619      	mov	r1, r3
 8012300:	6878      	ldr	r0, [r7, #4]
 8012302:	f7ff fdab 	bl	8011e5c <ihm_getvar>
 8012306:	4603      	mov	r3, r0
 8012308:	84fb      	strh	r3, [r7, #38]	; 0x26
			write_unum1000(v16u, curfont);
 801230a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801230c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801230e:	4618      	mov	r0, r3
 8012310:	f000 f942 	bl	8012598 <write_unum1000>
			break;
 8012314:	e07f      	b.n	8012416 <disp_layout+0x57e>
		case CODE_GRAPH_LEVEL:
			i++;
 8012316:	6a3b      	ldr	r3, [r7, #32]
 8012318:	3301      	adds	r3, #1
 801231a:	623b      	str	r3, [r7, #32]
			v16u = _GET_REG(numdisp, d[i]);
 801231c:	6a3b      	ldr	r3, [r7, #32]
 801231e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012320:	4413      	add	r3, r2
 8012322:	781b      	ldrb	r3, [r3, #0]
 8012324:	4619      	mov	r1, r3
 8012326:	6878      	ldr	r0, [r7, #4]
 8012328:	f7ff fd98 	bl	8011e5c <ihm_getvar>
 801232c:	4603      	mov	r3, r0
 801232e:	84fb      	strh	r3, [r7, #38]	; 0x26
			write_bargraph(v16u, 0, 100);
 8012330:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012334:	2264      	movs	r2, #100	; 0x64
 8012336:	2100      	movs	r1, #0
 8012338:	4618      	mov	r0, r3
 801233a:	f000 f9f7 	bl	801272c <write_bargraph>
			break;
 801233e:	e06a      	b.n	8012416 <disp_layout+0x57e>
		case CODE_GRAPH_SLEVEL:
			i++;
 8012340:	6a3b      	ldr	r3, [r7, #32]
 8012342:	3301      	adds	r3, #1
 8012344:	623b      	str	r3, [r7, #32]
			v16s = _GET_REG(numdisp, d[i]);
 8012346:	6a3b      	ldr	r3, [r7, #32]
 8012348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801234a:	4413      	add	r3, r2
 801234c:	781b      	ldrb	r3, [r3, #0]
 801234e:	4619      	mov	r1, r3
 8012350:	6878      	ldr	r0, [r7, #4]
 8012352:	f7ff fd83 	bl	8011e5c <ihm_getvar>
 8012356:	4603      	mov	r3, r0
 8012358:	82fb      	strh	r3, [r7, #22]
			write_sbargraph(v16s, -100, 100);
 801235a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801235e:	2264      	movs	r2, #100	; 0x64
 8012360:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8012364:	4618      	mov	r0, r3
 8012366:	f000 fa4d 	bl	8012804 <write_sbargraph>
			break;
 801236a:	e054      	b.n	8012416 <disp_layout+0x57e>
		case CODE_TIM4_CNT: {
			extern TIM_HandleTypeDef htim4;
			v16u = htim4.Instance->CNT;
 801236c:	4b3c      	ldr	r3, [pc, #240]	; (8012460 <disp_layout+0x5c8>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012372:	84fb      	strh	r3, [r7, #38]	; 0x26
			write_unum(v16u, curfont);
 8012374:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012376:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012378:	4618      	mov	r0, r3
 801237a:	f000 f8e5 	bl	8012548 <write_unum>
			break;
 801237e:	e04a      	b.n	8012416 <disp_layout+0x57e>
		}
		case CODE_PROFILE:
			write_unum((int16_t)last_dur1, curfont);
 8012380:	4b38      	ldr	r3, [pc, #224]	; (8012464 <disp_layout+0x5cc>)
 8012382:	881b      	ldrh	r3, [r3, #0]
 8012384:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012386:	4618      	mov	r0, r3
 8012388:	f000 f8de 	bl	8012548 <write_unum>
			ssd1306_WriteChar('/', *curfont, White);
 801238c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801238e:	2301      	movs	r3, #1
 8012390:	ca06      	ldmia	r2, {r1, r2}
 8012392:	202f      	movs	r0, #47	; 0x2f
 8012394:	f7fe fcae 	bl	8010cf4 <ssd1306_WriteChar>
			write_unum((int16_t)last_dur2, curfont);
 8012398:	4b33      	ldr	r3, [pc, #204]	; (8012468 <disp_layout+0x5d0>)
 801239a:	881b      	ldrh	r3, [r3, #0]
 801239c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801239e:	4618      	mov	r0, r3
 80123a0:	f000 f8d2 	bl	8012548 <write_unum>
			break;
 80123a4:	e037      	b.n	8012416 <disp_layout+0x57e>
		case CODE_DIR:
			i+=1;
 80123a6:	6a3b      	ldr	r3, [r7, #32]
 80123a8:	3301      	adds	r3, #1
 80123aa:	623b      	str	r3, [r7, #32]
			v16s = _GET_REG(numdisp, d[i]);
 80123ac:	6a3b      	ldr	r3, [r7, #32]
 80123ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80123b0:	4413      	add	r3, r2
 80123b2:	781b      	ldrb	r3, [r3, #0]
 80123b4:	4619      	mov	r1, r3
 80123b6:	6878      	ldr	r0, [r7, #4]
 80123b8:	f7ff fd50 	bl	8011e5c <ihm_getvar>
 80123bc:	4603      	mov	r3, r0
 80123be:	82fb      	strh	r3, [r7, #22]
			if (v16s > 0) ssd1306_WriteChar('>', *curfont, White);
 80123c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	dd06      	ble.n	80123d6 <disp_layout+0x53e>
 80123c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123ca:	2301      	movs	r3, #1
 80123cc:	ca06      	ldmia	r2, {r1, r2}
 80123ce:	203e      	movs	r0, #62	; 0x3e
 80123d0:	f7fe fc90 	bl	8010cf4 <ssd1306_WriteChar>
			else if (v16s < 0) ssd1306_WriteChar('<', *curfont, White);
			else ssd1306_WriteChar('|', *curfont, White);
			break;
 80123d4:	e01f      	b.n	8012416 <disp_layout+0x57e>
			else if (v16s < 0) ssd1306_WriteChar('<', *curfont, White);
 80123d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	da06      	bge.n	80123ec <disp_layout+0x554>
 80123de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123e0:	2301      	movs	r3, #1
 80123e2:	ca06      	ldmia	r2, {r1, r2}
 80123e4:	203c      	movs	r0, #60	; 0x3c
 80123e6:	f7fe fc85 	bl	8010cf4 <ssd1306_WriteChar>
			break;
 80123ea:	e014      	b.n	8012416 <disp_layout+0x57e>
			else ssd1306_WriteChar('|', *curfont, White);
 80123ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123ee:	2301      	movs	r3, #1
 80123f0:	ca06      	ldmia	r2, {r1, r2}
 80123f2:	207c      	movs	r0, #124	; 0x7c
 80123f4:	f7fe fc7e 	bl	8010cf4 <ssd1306_WriteChar>
			break;
 80123f8:	e00d      	b.n	8012416 <disp_layout+0x57e>


		default:
			switch (d[i] & 0xC0) {
 80123fa:	6a3b      	ldr	r3, [r7, #32]
 80123fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80123fe:	4413      	add	r3, r2
 8012400:	781b      	ldrb	r3, [r3, #0]
 8012402:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012406:	2bc0      	cmp	r3, #192	; 0xc0
 8012408:	d000      	beq.n	801240c <disp_layout+0x574>
			default:
			case 0x80: break;
 801240a:	e004      	b.n	8012416 <disp_layout+0x57e>
			case 0xC0: i++; break;
 801240c:	6a3b      	ldr	r3, [r7, #32]
 801240e:	3301      	adds	r3, #1
 8012410:	623b      	str	r3, [r7, #32]
 8012412:	e000      	b.n	8012416 <disp_layout+0x57e>
		case CODE_NOP: break;
 8012414:	bf00      	nop
	for (int i=0; i<MAX_OPCODE_PER_DISPLAY; i++) {
 8012416:	6a3b      	ldr	r3, [r7, #32]
 8012418:	3301      	adds	r3, #1
 801241a:	623b      	str	r3, [r7, #32]
 801241c:	6a3b      	ldr	r3, [r7, #32]
 801241e:	2b17      	cmp	r3, #23
 8012420:	f77f ad57 	ble.w	8011ed2 <disp_layout+0x3a>
 8012424:	e000      	b.n	8012428 <disp_layout+0x590>
		if (CODE_END == d[i]) break;
 8012426:	bf00      	nop
			//case 0xB0: i+=2; break;
			//case 0xD0: i+=4; break;
			}
		}
	}
	uint32_t t1 = HAL_GetTick();
 8012428:	f7ef fce4 	bl	8001df4 <HAL_GetTick>
 801242c:	60f8      	str	r0, [r7, #12]
	ssd1306_UpdateScreen();
 801242e:	f7fe fbdb 	bl	8010be8 <ssd1306_UpdateScreen>
	uint32_t t2 = HAL_GetTick();
 8012432:	f7ef fcdf 	bl	8001df4 <HAL_GetTick>
 8012436:	60b8      	str	r0, [r7, #8]
	last_dur1 = t2-t0;
 8012438:	68bb      	ldr	r3, [r7, #8]
 801243a:	b29a      	uxth	r2, r3
 801243c:	69fb      	ldr	r3, [r7, #28]
 801243e:	b29b      	uxth	r3, r3
 8012440:	1ad3      	subs	r3, r2, r3
 8012442:	b29a      	uxth	r2, r3
 8012444:	4b07      	ldr	r3, [pc, #28]	; (8012464 <disp_layout+0x5cc>)
 8012446:	801a      	strh	r2, [r3, #0]
	last_dur2 = t2-t1;
 8012448:	68bb      	ldr	r3, [r7, #8]
 801244a:	b29a      	uxth	r2, r3
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	b29b      	uxth	r3, r3
 8012450:	1ad3      	subs	r3, r2, r3
 8012452:	b29a      	uxth	r2, r3
 8012454:	4b04      	ldr	r3, [pc, #16]	; (8012468 <disp_layout+0x5d0>)
 8012456:	801a      	strh	r2, [r3, #0]
}
 8012458:	bf00      	nop
 801245a:	3730      	adds	r7, #48	; 0x30
 801245c:	46bd      	mov	sp, r7
 801245e:	bd80      	pop	{r7, pc}
 8012460:	20005d54 	.word	0x20005d54
 8012464:	200051e8 	.word	0x200051e8
 8012468:	200051ea 	.word	0x200051ea

0801246c <_write_unum>:
	}
}
*/

static void _write_unum(uint16_t v, FontDef *curfont, uint8_t hzero, uint8_t fp1000)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b086      	sub	sp, #24
 8012470:	af00      	add	r7, sp, #0
 8012472:	6039      	str	r1, [r7, #0]
 8012474:	4611      	mov	r1, r2
 8012476:	461a      	mov	r2, r3
 8012478:	4603      	mov	r3, r0
 801247a:	80fb      	strh	r3, [r7, #6]
 801247c:	460b      	mov	r3, r1
 801247e:	717b      	strb	r3, [r7, #5]
 8012480:	4613      	mov	r3, r2
 8012482:	713b      	strb	r3, [r7, #4]
	int f = 0;
 8012484:	2300      	movs	r3, #0
 8012486:	617b      	str	r3, [r7, #20]
	int ns = 1000;
 8012488:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801248c:	613b      	str	r3, [r7, #16]
	if (fp1000) {
 801248e:	793b      	ldrb	r3, [r7, #4]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d004      	beq.n	801249e <_write_unum+0x32>
		ns = 1000;
 8012494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012498:	613b      	str	r3, [r7, #16]
		hzero = 1;
 801249a:	2301      	movs	r3, #1
 801249c:	717b      	strb	r3, [r7, #5]
	}
	for (int i=ns;i>0; i = i /10) {
 801249e:	693b      	ldr	r3, [r7, #16]
 80124a0:	60fb      	str	r3, [r7, #12]
 80124a2:	e048      	b.n	8012536 <_write_unum+0xca>
		int n = v/i;
 80124a4:	88fa      	ldrh	r2, [r7, #6]
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80124ac:	60bb      	str	r3, [r7, #8]
		if (!n && !f && (i>1)) {
 80124ae:	68bb      	ldr	r3, [r7, #8]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d112      	bne.n	80124da <_write_unum+0x6e>
 80124b4:	697b      	ldr	r3, [r7, #20]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d10f      	bne.n	80124da <_write_unum+0x6e>
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	2b01      	cmp	r3, #1
 80124be:	dd0c      	ble.n	80124da <_write_unum+0x6e>
			if (!hzero) continue;
 80124c0:	797b      	ldrb	r3, [r7, #5]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d02e      	beq.n	8012524 <_write_unum+0xb8>
			if (hzero == ' ') {
 80124c6:	797b      	ldrb	r3, [r7, #5]
 80124c8:	2b20      	cmp	r3, #32
 80124ca:	d106      	bne.n	80124da <_write_unum+0x6e>
				ssd1306_WriteChar(' ', *curfont, White);
 80124cc:	683a      	ldr	r2, [r7, #0]
 80124ce:	2301      	movs	r3, #1
 80124d0:	ca06      	ldmia	r2, {r1, r2}
 80124d2:	2020      	movs	r0, #32
 80124d4:	f7fe fc0e 	bl	8010cf4 <ssd1306_WriteChar>
				continue;
 80124d8:	e025      	b.n	8012526 <_write_unum+0xba>
			}
		}
		ssd1306_WriteChar(n+'0', *curfont, White);
 80124da:	68bb      	ldr	r3, [r7, #8]
 80124dc:	b2db      	uxtb	r3, r3
 80124de:	3330      	adds	r3, #48	; 0x30
 80124e0:	b2d8      	uxtb	r0, r3
 80124e2:	683a      	ldr	r2, [r7, #0]
 80124e4:	2301      	movs	r3, #1
 80124e6:	ca06      	ldmia	r2, {r1, r2}
 80124e8:	f7fe fc04 	bl	8010cf4 <ssd1306_WriteChar>
		if ((f==0) && fp1000) {
 80124ec:	697b      	ldr	r3, [r7, #20]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d10a      	bne.n	8012508 <_write_unum+0x9c>
 80124f2:	793b      	ldrb	r3, [r7, #4]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d007      	beq.n	8012508 <_write_unum+0x9c>
			ssd1306_WriteChar(',', *curfont, White);
 80124f8:	683a      	ldr	r2, [r7, #0]
 80124fa:	2301      	movs	r3, #1
 80124fc:	ca06      	ldmia	r2, {r1, r2}
 80124fe:	202c      	movs	r0, #44	; 0x2c
 8012500:	f7fe fbf8 	bl	8010cf4 <ssd1306_WriteChar>
			hzero = 1;
 8012504:	2301      	movs	r3, #1
 8012506:	717b      	strb	r3, [r7, #5]
		}
		f++;
 8012508:	697b      	ldr	r3, [r7, #20]
 801250a:	3301      	adds	r3, #1
 801250c:	617b      	str	r3, [r7, #20]
		v = v - i*n;
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	b29a      	uxth	r2, r3
 8012512:	68bb      	ldr	r3, [r7, #8]
 8012514:	b29b      	uxth	r3, r3
 8012516:	fb12 f303 	smulbb	r3, r2, r3
 801251a:	b29b      	uxth	r3, r3
 801251c:	88fa      	ldrh	r2, [r7, #6]
 801251e:	1ad3      	subs	r3, r2, r3
 8012520:	80fb      	strh	r3, [r7, #6]
 8012522:	e000      	b.n	8012526 <_write_unum+0xba>
			if (!hzero) continue;
 8012524:	bf00      	nop
	for (int i=ns;i>0; i = i /10) {
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	4a06      	ldr	r2, [pc, #24]	; (8012544 <_write_unum+0xd8>)
 801252a:	fb82 1203 	smull	r1, r2, r2, r3
 801252e:	1092      	asrs	r2, r2, #2
 8012530:	17db      	asrs	r3, r3, #31
 8012532:	1ad3      	subs	r3, r2, r3
 8012534:	60fb      	str	r3, [r7, #12]
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	2b00      	cmp	r3, #0
 801253a:	dcb3      	bgt.n	80124a4 <_write_unum+0x38>
	}
}
 801253c:	bf00      	nop
 801253e:	3718      	adds	r7, #24
 8012540:	46bd      	mov	sp, r7
 8012542:	bd80      	pop	{r7, pc}
 8012544:	66666667 	.word	0x66666667

08012548 <write_unum>:
static void write_unum(uint16_t v, FontDef *curfont)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b082      	sub	sp, #8
 801254c:	af00      	add	r7, sp, #0
 801254e:	4603      	mov	r3, r0
 8012550:	6039      	str	r1, [r7, #0]
 8012552:	80fb      	strh	r3, [r7, #6]
	_write_unum(v, curfont, 0, 0);
 8012554:	88f8      	ldrh	r0, [r7, #6]
 8012556:	2300      	movs	r3, #0
 8012558:	2200      	movs	r2, #0
 801255a:	6839      	ldr	r1, [r7, #0]
 801255c:	f7ff ff86 	bl	801246c <_write_unum>
}
 8012560:	bf00      	nop
 8012562:	3708      	adds	r7, #8
 8012564:	46bd      	mov	sp, r7
 8012566:	bd80      	pop	{r7, pc}

08012568 <write_unum4>:
static void write_unum4(uint16_t v, FontDef *curfont)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b082      	sub	sp, #8
 801256c:	af00      	add	r7, sp, #0
 801256e:	4603      	mov	r3, r0
 8012570:	6039      	str	r1, [r7, #0]
 8012572:	80fb      	strh	r3, [r7, #6]
	if (v>9999) v=9999;
 8012574:	88fb      	ldrh	r3, [r7, #6]
 8012576:	f242 720f 	movw	r2, #9999	; 0x270f
 801257a:	4293      	cmp	r3, r2
 801257c:	d902      	bls.n	8012584 <write_unum4+0x1c>
 801257e:	f242 730f 	movw	r3, #9999	; 0x270f
 8012582:	80fb      	strh	r3, [r7, #6]
	_write_unum(v, curfont, 1, 0);
 8012584:	88f8      	ldrh	r0, [r7, #6]
 8012586:	2300      	movs	r3, #0
 8012588:	2201      	movs	r2, #1
 801258a:	6839      	ldr	r1, [r7, #0]
 801258c:	f7ff ff6e 	bl	801246c <_write_unum>
}
 8012590:	bf00      	nop
 8012592:	3708      	adds	r7, #8
 8012594:	46bd      	mov	sp, r7
 8012596:	bd80      	pop	{r7, pc}

08012598 <write_unum1000>:
static void write_unum1000(uint16_t v, FontDef *curfont)
{
 8012598:	b580      	push	{r7, lr}
 801259a:	b082      	sub	sp, #8
 801259c:	af00      	add	r7, sp, #0
 801259e:	4603      	mov	r3, r0
 80125a0:	6039      	str	r1, [r7, #0]
 80125a2:	80fb      	strh	r3, [r7, #6]
	if (v>9999) v=9999;
 80125a4:	88fb      	ldrh	r3, [r7, #6]
 80125a6:	f242 720f 	movw	r2, #9999	; 0x270f
 80125aa:	4293      	cmp	r3, r2
 80125ac:	d902      	bls.n	80125b4 <write_unum1000+0x1c>
 80125ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80125b2:	80fb      	strh	r3, [r7, #6]
	_write_unum(v, curfont, 1, 1);
 80125b4:	88f8      	ldrh	r0, [r7, #6]
 80125b6:	2301      	movs	r3, #1
 80125b8:	2201      	movs	r2, #1
 80125ba:	6839      	ldr	r1, [r7, #0]
 80125bc:	f7ff ff56 	bl	801246c <_write_unum>
}
 80125c0:	bf00      	nop
 80125c2:	3708      	adds	r7, #8
 80125c4:	46bd      	mov	sp, r7
 80125c6:	bd80      	pop	{r7, pc}

080125c8 <write_snum>:
static void write_snum(int16_t v, FontDef *curfont)
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b082      	sub	sp, #8
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	4603      	mov	r3, r0
 80125d0:	6039      	str	r1, [r7, #0]
 80125d2:	80fb      	strh	r3, [r7, #6]
	if ((v<-5000)||(v>5000)) {
 80125d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80125d8:	4a17      	ldr	r2, [pc, #92]	; (8012638 <write_snum+0x70>)
 80125da:	4293      	cmp	r3, r2
 80125dc:	db05      	blt.n	80125ea <write_snum+0x22>
 80125de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80125e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80125e6:	4293      	cmp	r3, r2
 80125e8:	dd06      	ble.n	80125f8 <write_snum+0x30>
		itm_debug1(DBG_UI|DBG_ERR, "strange here", v);
 80125ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80125ee:	461a      	mov	r2, r3
 80125f0:	4912      	ldr	r1, [pc, #72]	; (801263c <write_snum+0x74>)
 80125f2:	4813      	ldr	r0, [pc, #76]	; (8012640 <write_snum+0x78>)
 80125f4:	f7ff fba2 	bl	8011d3c <itm_debug1>
	}
	if (v < 0) {
 80125f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	da06      	bge.n	801260e <write_snum+0x46>
		ssd1306_WriteChar('-', *curfont, White);
 8012600:	683a      	ldr	r2, [r7, #0]
 8012602:	2301      	movs	r3, #1
 8012604:	ca06      	ldmia	r2, {r1, r2}
 8012606:	202d      	movs	r0, #45	; 0x2d
 8012608:	f7fe fb74 	bl	8010cf4 <ssd1306_WriteChar>
 801260c:	e005      	b.n	801261a <write_snum+0x52>
	} else {
		ssd1306_WriteChar('+', *curfont, White);
 801260e:	683a      	ldr	r2, [r7, #0]
 8012610:	2301      	movs	r3, #1
 8012612:	ca06      	ldmia	r2, {r1, r2}
 8012614:	202b      	movs	r0, #43	; 0x2b
 8012616:	f7fe fb6d 	bl	8010cf4 <ssd1306_WriteChar>
	}
	write_unum(abs(v), curfont);
 801261a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801261e:	2b00      	cmp	r3, #0
 8012620:	bfb8      	it	lt
 8012622:	425b      	neglt	r3, r3
 8012624:	b29b      	uxth	r3, r3
 8012626:	6839      	ldr	r1, [r7, #0]
 8012628:	4618      	mov	r0, r3
 801262a:	f7ff ff8d 	bl	8012548 <write_unum>
}
 801262e:	bf00      	nop
 8012630:	3708      	adds	r7, #8
 8012632:	46bd      	mov	sp, r7
 8012634:	bd80      	pop	{r7, pc}
 8012636:	bf00      	nop
 8012638:	ffffec78 	.word	0xffffec78
 801263c:	080196dc 	.word	0x080196dc
 8012640:	80000800 	.word	0x80000800

08012644 <write_snum4>:

static void write_snum4(int16_t v, FontDef *curfont)
{
 8012644:	b580      	push	{r7, lr}
 8012646:	b082      	sub	sp, #8
 8012648:	af00      	add	r7, sp, #0
 801264a:	4603      	mov	r3, r0
 801264c:	6039      	str	r1, [r7, #0]
 801264e:	80fb      	strh	r3, [r7, #6]
	if (v<-9999) v=-9999;
 8012650:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012654:	4a17      	ldr	r2, [pc, #92]	; (80126b4 <write_snum4+0x70>)
 8012656:	4293      	cmp	r3, r2
 8012658:	da02      	bge.n	8012660 <write_snum4+0x1c>
 801265a:	f64d 03f1 	movw	r3, #55537	; 0xd8f1
 801265e:	80fb      	strh	r3, [r7, #6]
	if (v>9999) v=9999;
 8012660:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012664:	f242 720f 	movw	r2, #9999	; 0x270f
 8012668:	4293      	cmp	r3, r2
 801266a:	dd02      	ble.n	8012672 <write_snum4+0x2e>
 801266c:	f242 730f 	movw	r3, #9999	; 0x270f
 8012670:	80fb      	strh	r3, [r7, #6]
	if (v < 0) {
 8012672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012676:	2b00      	cmp	r3, #0
 8012678:	da06      	bge.n	8012688 <write_snum4+0x44>
		ssd1306_WriteChar('-', *curfont, White);
 801267a:	683a      	ldr	r2, [r7, #0]
 801267c:	2301      	movs	r3, #1
 801267e:	ca06      	ldmia	r2, {r1, r2}
 8012680:	202d      	movs	r0, #45	; 0x2d
 8012682:	f7fe fb37 	bl	8010cf4 <ssd1306_WriteChar>
 8012686:	e005      	b.n	8012694 <write_snum4+0x50>
	} else {
		ssd1306_WriteChar('+', *curfont, White);
 8012688:	683a      	ldr	r2, [r7, #0]
 801268a:	2301      	movs	r3, #1
 801268c:	ca06      	ldmia	r2, {r1, r2}
 801268e:	202b      	movs	r0, #43	; 0x2b
 8012690:	f7fe fb30 	bl	8010cf4 <ssd1306_WriteChar>
	}
	_write_unum(abs(v), curfont, 1, 0);
 8012694:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012698:	2b00      	cmp	r3, #0
 801269a:	bfb8      	it	lt
 801269c:	425b      	neglt	r3, r3
 801269e:	b298      	uxth	r0, r3
 80126a0:	2300      	movs	r3, #0
 80126a2:	2201      	movs	r2, #1
 80126a4:	6839      	ldr	r1, [r7, #0]
 80126a6:	f7ff fee1 	bl	801246c <_write_unum>
}
 80126aa:	bf00      	nop
 80126ac:	3708      	adds	r7, #8
 80126ae:	46bd      	mov	sp, r7
 80126b0:	bd80      	pop	{r7, pc}
 80126b2:	bf00      	nop
 80126b4:	ffffd8f1 	.word	0xffffd8f1

080126b8 <write_snum1000>:

static void write_snum1000(int16_t v, FontDef *curfont)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b082      	sub	sp, #8
 80126bc:	af00      	add	r7, sp, #0
 80126be:	4603      	mov	r3, r0
 80126c0:	6039      	str	r1, [r7, #0]
 80126c2:	80fb      	strh	r3, [r7, #6]
	if (v<-9999) v=-9999;
 80126c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80126c8:	4a17      	ldr	r2, [pc, #92]	; (8012728 <write_snum1000+0x70>)
 80126ca:	4293      	cmp	r3, r2
 80126cc:	da02      	bge.n	80126d4 <write_snum1000+0x1c>
 80126ce:	f64d 03f1 	movw	r3, #55537	; 0xd8f1
 80126d2:	80fb      	strh	r3, [r7, #6]
	if (v>9999) v=9999;
 80126d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80126d8:	f242 720f 	movw	r2, #9999	; 0x270f
 80126dc:	4293      	cmp	r3, r2
 80126de:	dd02      	ble.n	80126e6 <write_snum1000+0x2e>
 80126e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80126e4:	80fb      	strh	r3, [r7, #6]
	if (v < 0) {
 80126e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	da06      	bge.n	80126fc <write_snum1000+0x44>
		ssd1306_WriteChar('-', *curfont, White);
 80126ee:	683a      	ldr	r2, [r7, #0]
 80126f0:	2301      	movs	r3, #1
 80126f2:	ca06      	ldmia	r2, {r1, r2}
 80126f4:	202d      	movs	r0, #45	; 0x2d
 80126f6:	f7fe fafd 	bl	8010cf4 <ssd1306_WriteChar>
 80126fa:	e005      	b.n	8012708 <write_snum1000+0x50>
	} else {
		ssd1306_WriteChar('+', *curfont, White);
 80126fc:	683a      	ldr	r2, [r7, #0]
 80126fe:	2301      	movs	r3, #1
 8012700:	ca06      	ldmia	r2, {r1, r2}
 8012702:	202b      	movs	r0, #43	; 0x2b
 8012704:	f7fe faf6 	bl	8010cf4 <ssd1306_WriteChar>
	}
	_write_unum(abs(v), curfont, 1, 1);
 8012708:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801270c:	2b00      	cmp	r3, #0
 801270e:	bfb8      	it	lt
 8012710:	425b      	neglt	r3, r3
 8012712:	b298      	uxth	r0, r3
 8012714:	2301      	movs	r3, #1
 8012716:	2201      	movs	r2, #1
 8012718:	6839      	ldr	r1, [r7, #0]
 801271a:	f7ff fea7 	bl	801246c <_write_unum>
}
 801271e:	bf00      	nop
 8012720:	3708      	adds	r7, #8
 8012722:	46bd      	mov	sp, r7
 8012724:	bd80      	pop	{r7, pc}
 8012726:	bf00      	nop
 8012728:	ffffd8f1 	.word	0xffffd8f1

0801272c <write_bargraph>:

static void write_bargraph(int16_t v, int16_t min, int16_t max)
{
 801272c:	b590      	push	{r4, r7, lr}
 801272e:	b087      	sub	sp, #28
 8012730:	af02      	add	r7, sp, #8
 8012732:	4603      	mov	r3, r0
 8012734:	80fb      	strh	r3, [r7, #6]
 8012736:	460b      	mov	r3, r1
 8012738:	80bb      	strh	r3, [r7, #4]
 801273a:	4613      	mov	r3, r2
 801273c:	807b      	strh	r3, [r7, #2]
	uint8_t x0 = ssd1306_GetCursorX();
 801273e:	f7fe fb9f 	bl	8010e80 <ssd1306_GetCursorX>
 8012742:	4603      	mov	r3, r0
 8012744:	73fb      	strb	r3, [r7, #15]
	uint8_t y0 = ssd1306_GetCursorY();
 8012746:	f7fe fba7 	bl	8010e98 <ssd1306_GetCursorY>
 801274a:	4603      	mov	r3, r0
 801274c:	73bb      	strb	r3, [r7, #14]
	const uint8_t w = 50;
 801274e:	2332      	movs	r3, #50	; 0x32
 8012750:	737b      	strb	r3, [r7, #13]
	const uint8_t h = 11; //y0+=3;
 8012752:	230b      	movs	r3, #11
 8012754:	733b      	strb	r3, [r7, #12]
	ssd1306_DrawRectangle(x0, y0, x0+w, y0+h, White);
 8012756:	7bfa      	ldrb	r2, [r7, #15]
 8012758:	7b7b      	ldrb	r3, [r7, #13]
 801275a:	4413      	add	r3, r2
 801275c:	b2dc      	uxtb	r4, r3
 801275e:	7bba      	ldrb	r2, [r7, #14]
 8012760:	7b3b      	ldrb	r3, [r7, #12]
 8012762:	4413      	add	r3, r2
 8012764:	b2da      	uxtb	r2, r3
 8012766:	7bb9      	ldrb	r1, [r7, #14]
 8012768:	7bf8      	ldrb	r0, [r7, #15]
 801276a:	2301      	movs	r3, #1
 801276c:	9300      	str	r3, [sp, #0]
 801276e:	4613      	mov	r3, r2
 8012770:	4622      	mov	r2, r4
 8012772:	f7fe fc09 	bl	8010f88 <ssd1306_DrawRectangle>

	if (v>max) v=max;
 8012776:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801277a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801277e:	429a      	cmp	r2, r3
 8012780:	dd01      	ble.n	8012786 <write_bargraph+0x5a>
 8012782:	887b      	ldrh	r3, [r7, #2]
 8012784:	80fb      	strh	r3, [r7, #6]
	if (v<min) v=min;
 8012786:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801278a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801278e:	429a      	cmp	r2, r3
 8012790:	da01      	bge.n	8012796 <write_bargraph+0x6a>
 8012792:	88bb      	ldrh	r3, [r7, #4]
 8012794:	80fb      	strh	r3, [r7, #6]
	int l = ((int)w*(v-min))/(max-min);
 8012796:	7b7b      	ldrb	r3, [r7, #13]
 8012798:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 801279c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80127a0:	1a8a      	subs	r2, r1, r2
 80127a2:	fb02 f203 	mul.w	r2, r2, r3
 80127a6:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80127aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80127ae:	1acb      	subs	r3, r1, r3
 80127b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80127b4:	60bb      	str	r3, [r7, #8]
	if (l>0) ssd1306_FillZone(x0, y0, l, h, White);
 80127b6:	68bb      	ldr	r3, [r7, #8]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	dd09      	ble.n	80127d0 <write_bargraph+0xa4>
 80127bc:	68bb      	ldr	r3, [r7, #8]
 80127be:	b2da      	uxtb	r2, r3
 80127c0:	7b3c      	ldrb	r4, [r7, #12]
 80127c2:	7bb9      	ldrb	r1, [r7, #14]
 80127c4:	7bf8      	ldrb	r0, [r7, #15]
 80127c6:	2301      	movs	r3, #1
 80127c8:	9300      	str	r3, [sp, #0]
 80127ca:	4623      	mov	r3, r4
 80127cc:	f7fe f97e 	bl	8010acc <ssd1306_FillZone>
	if ((min<0) && (max>0)) {
 80127d0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	da11      	bge.n	80127fc <write_bargraph+0xd0>
 80127d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	dd0d      	ble.n	80127fc <write_bargraph+0xd0>
		l = ((int)w*(0-min))/(max-min);
 80127e0:	7b7b      	ldrb	r3, [r7, #13]
 80127e2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80127e6:	4252      	negs	r2, r2
 80127e8:	fb02 f203 	mul.w	r2, r2, r3
 80127ec:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80127f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80127f4:	1acb      	subs	r3, r1, r3
 80127f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80127fa:	60bb      	str	r3, [r7, #8]
		/// TODO ?
	}
}
 80127fc:	bf00      	nop
 80127fe:	3714      	adds	r7, #20
 8012800:	46bd      	mov	sp, r7
 8012802:	bd90      	pop	{r4, r7, pc}

08012804 <write_sbargraph>:



static void write_sbargraph(int16_t v, int16_t min, int16_t max)
{
 8012804:	b590      	push	{r4, r7, lr}
 8012806:	b089      	sub	sp, #36	; 0x24
 8012808:	af02      	add	r7, sp, #8
 801280a:	4603      	mov	r3, r0
 801280c:	80fb      	strh	r3, [r7, #6]
 801280e:	460b      	mov	r3, r1
 8012810:	80bb      	strh	r3, [r7, #4]
 8012812:	4613      	mov	r3, r2
 8012814:	807b      	strh	r3, [r7, #2]
	uint8_t x0 = ssd1306_GetCursorX();
 8012816:	f7fe fb33 	bl	8010e80 <ssd1306_GetCursorX>
 801281a:	4603      	mov	r3, r0
 801281c:	75fb      	strb	r3, [r7, #23]
	uint8_t y0 = ssd1306_GetCursorY();
 801281e:	f7fe fb3b 	bl	8010e98 <ssd1306_GetCursorY>
 8012822:	4603      	mov	r3, r0
 8012824:	75bb      	strb	r3, [r7, #22]
	const uint8_t w = 50;
 8012826:	2332      	movs	r3, #50	; 0x32
 8012828:	757b      	strb	r3, [r7, #21]
	const uint8_t h = 11; //y0+=3;
 801282a:	230b      	movs	r3, #11
 801282c:	753b      	strb	r3, [r7, #20]
	ssd1306_DrawRectangle(x0, y0, x0+w, y0+h, White);
 801282e:	7dfa      	ldrb	r2, [r7, #23]
 8012830:	7d7b      	ldrb	r3, [r7, #21]
 8012832:	4413      	add	r3, r2
 8012834:	b2dc      	uxtb	r4, r3
 8012836:	7dba      	ldrb	r2, [r7, #22]
 8012838:	7d3b      	ldrb	r3, [r7, #20]
 801283a:	4413      	add	r3, r2
 801283c:	b2da      	uxtb	r2, r3
 801283e:	7db9      	ldrb	r1, [r7, #22]
 8012840:	7df8      	ldrb	r0, [r7, #23]
 8012842:	2301      	movs	r3, #1
 8012844:	9300      	str	r3, [sp, #0]
 8012846:	4613      	mov	r3, r2
 8012848:	4622      	mov	r2, r4
 801284a:	f7fe fb9d 	bl	8010f88 <ssd1306_DrawRectangle>

	if (v>max) v=max;
 801284e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012852:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012856:	429a      	cmp	r2, r3
 8012858:	dd01      	ble.n	801285e <write_sbargraph+0x5a>
 801285a:	887b      	ldrh	r3, [r7, #2]
 801285c:	80fb      	strh	r3, [r7, #6]
	if (v<min) v=min;
 801285e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012862:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012866:	429a      	cmp	r2, r3
 8012868:	da01      	bge.n	801286e <write_sbargraph+0x6a>
 801286a:	88bb      	ldrh	r3, [r7, #4]
 801286c:	80fb      	strh	r3, [r7, #6]
	int m = ((int)w*(0-min))/(max-min);
 801286e:	7d7b      	ldrb	r3, [r7, #21]
 8012870:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012874:	4252      	negs	r2, r2
 8012876:	fb02 f203 	mul.w	r2, r2, r3
 801287a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801287e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012882:	1acb      	subs	r3, r1, r3
 8012884:	fb92 f3f3 	sdiv	r3, r2, r3
 8012888:	613b      	str	r3, [r7, #16]
	int l = ((int)w*(v-min))/(max-min);
 801288a:	7d7b      	ldrb	r3, [r7, #21]
 801288c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8012890:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012894:	1a8a      	subs	r2, r1, r2
 8012896:	fb02 f203 	mul.w	r2, r2, r3
 801289a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801289e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80128a2:	1acb      	subs	r3, r1, r3
 80128a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80128a8:	60fb      	str	r3, [r7, #12]
	if (l>m) ssd1306_FillZone(x0+m, y0, l-m, h, White);
 80128aa:	68fa      	ldr	r2, [r7, #12]
 80128ac:	693b      	ldr	r3, [r7, #16]
 80128ae:	429a      	cmp	r2, r3
 80128b0:	dd12      	ble.n	80128d8 <write_sbargraph+0xd4>
 80128b2:	693b      	ldr	r3, [r7, #16]
 80128b4:	b2da      	uxtb	r2, r3
 80128b6:	7dfb      	ldrb	r3, [r7, #23]
 80128b8:	4413      	add	r3, r2
 80128ba:	b2d8      	uxtb	r0, r3
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	b2da      	uxtb	r2, r3
 80128c0:	693b      	ldr	r3, [r7, #16]
 80128c2:	b2db      	uxtb	r3, r3
 80128c4:	1ad3      	subs	r3, r2, r3
 80128c6:	b2da      	uxtb	r2, r3
 80128c8:	7d3c      	ldrb	r4, [r7, #20]
 80128ca:	7db9      	ldrb	r1, [r7, #22]
 80128cc:	2301      	movs	r3, #1
 80128ce:	9300      	str	r3, [sp, #0]
 80128d0:	4623      	mov	r3, r4
 80128d2:	f7fe f8fb 	bl	8010acc <ssd1306_FillZone>
 80128d6:	e011      	b.n	80128fc <write_sbargraph+0xf8>
	else ssd1306_FillZone(x0+l, y0, m-l, h, White);
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	b2da      	uxtb	r2, r3
 80128dc:	7dfb      	ldrb	r3, [r7, #23]
 80128de:	4413      	add	r3, r2
 80128e0:	b2d8      	uxtb	r0, r3
 80128e2:	693b      	ldr	r3, [r7, #16]
 80128e4:	b2da      	uxtb	r2, r3
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	b2db      	uxtb	r3, r3
 80128ea:	1ad3      	subs	r3, r2, r3
 80128ec:	b2da      	uxtb	r2, r3
 80128ee:	7d3c      	ldrb	r4, [r7, #20]
 80128f0:	7db9      	ldrb	r1, [r7, #22]
 80128f2:	2301      	movs	r3, #1
 80128f4:	9300      	str	r3, [sp, #0]
 80128f6:	4623      	mov	r3, r4
 80128f8:	f7fe f8e8 	bl	8010acc <ssd1306_FillZone>
	ssd1306_Line(x0+m, y0-1, x0+m, y0+h+2, White);
 80128fc:	693b      	ldr	r3, [r7, #16]
 80128fe:	b2da      	uxtb	r2, r3
 8012900:	7dfb      	ldrb	r3, [r7, #23]
 8012902:	4413      	add	r3, r2
 8012904:	b2d8      	uxtb	r0, r3
 8012906:	7dbb      	ldrb	r3, [r7, #22]
 8012908:	3b01      	subs	r3, #1
 801290a:	b2d9      	uxtb	r1, r3
 801290c:	693b      	ldr	r3, [r7, #16]
 801290e:	b2da      	uxtb	r2, r3
 8012910:	7dfb      	ldrb	r3, [r7, #23]
 8012912:	4413      	add	r3, r2
 8012914:	b2dc      	uxtb	r4, r3
 8012916:	7dba      	ldrb	r2, [r7, #22]
 8012918:	7d3b      	ldrb	r3, [r7, #20]
 801291a:	4413      	add	r3, r2
 801291c:	b2db      	uxtb	r3, r3
 801291e:	3302      	adds	r3, #2
 8012920:	b2da      	uxtb	r2, r3
 8012922:	2301      	movs	r3, #1
 8012924:	9300      	str	r3, [sp, #0]
 8012926:	4613      	mov	r3, r2
 8012928:	4622      	mov	r2, r4
 801292a:	f7fe fac1 	bl	8010eb0 <ssd1306_Line>
	if ((min<0) && (max>0)) {
 801292e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012932:	2b00      	cmp	r3, #0
 8012934:	da11      	bge.n	801295a <write_sbargraph+0x156>
 8012936:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801293a:	2b00      	cmp	r3, #0
 801293c:	dd0d      	ble.n	801295a <write_sbargraph+0x156>
		l = ((int)w*(0-min))/(max-min);
 801293e:	7d7b      	ldrb	r3, [r7, #21]
 8012940:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8012944:	4252      	negs	r2, r2
 8012946:	fb02 f203 	mul.w	r2, r2, r3
 801294a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801294e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012952:	1acb      	subs	r3, r1, r3
 8012954:	fb92 f3f3 	sdiv	r3, r2, r3
 8012958:	60fb      	str	r3, [r7, #12]
		/// TODO
	}
}
 801295a:	bf00      	nop
 801295c:	371c      	adds	r7, #28
 801295e:	46bd      	mov	sp, r7
 8012960:	bd90      	pop	{r4, r7, pc}
	...

08012964 <itm_debug1>:
{
 8012964:	b580      	push	{r7, lr}
 8012966:	b086      	sub	sp, #24
 8012968:	af02      	add	r7, sp, #8
 801296a:	60f8      	str	r0, [r7, #12]
 801296c:	60b9      	str	r1, [r7, #8]
 801296e:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8012970:	4b08      	ldr	r3, [pc, #32]	; (8012994 <itm_debug1+0x30>)
 8012972:	681a      	ldr	r2, [r3, #0]
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	4013      	ands	r3, r2
 8012978:	2b00      	cmp	r3, #0
 801297a:	d007      	beq.n	801298c <itm_debug1+0x28>
 801297c:	2301      	movs	r3, #1
 801297e:	9300      	str	r3, [sp, #0]
 8012980:	2300      	movs	r3, #0
 8012982:	2200      	movs	r2, #0
 8012984:	6879      	ldr	r1, [r7, #4]
 8012986:	68b8      	ldr	r0, [r7, #8]
 8012988:	f006 fa6e 	bl	8018e68 <_itm_debug3>
}
 801298c:	bf00      	nop
 801298e:	3710      	adds	r7, #16
 8012990:	46bd      	mov	sp, r7
 8012992:	bd80      	pop	{r7, pc}
 8012994:	200005a4 	.word	0x200005a4

08012998 <itm_debug2>:
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b086      	sub	sp, #24
 801299c:	af02      	add	r7, sp, #8
 801299e:	60f8      	str	r0, [r7, #12]
 80129a0:	60b9      	str	r1, [r7, #8]
 80129a2:	607a      	str	r2, [r7, #4]
 80129a4:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 80129a6:	4b09      	ldr	r3, [pc, #36]	; (80129cc <itm_debug2+0x34>)
 80129a8:	681a      	ldr	r2, [r3, #0]
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	4013      	ands	r3, r2
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d007      	beq.n	80129c2 <itm_debug2+0x2a>
 80129b2:	2302      	movs	r3, #2
 80129b4:	9300      	str	r3, [sp, #0]
 80129b6:	2300      	movs	r3, #0
 80129b8:	683a      	ldr	r2, [r7, #0]
 80129ba:	6879      	ldr	r1, [r7, #4]
 80129bc:	68b8      	ldr	r0, [r7, #8]
 80129be:	f006 fa53 	bl	8018e68 <_itm_debug3>
}
 80129c2:	bf00      	nop
 80129c4:	3710      	adds	r7, #16
 80129c6:	46bd      	mov	sp, r7
 80129c8:	bd80      	pop	{r7, pc}
 80129ca:	bf00      	nop
 80129cc:	200005a4 	.word	0x200005a4

080129d0 <mqf_read_to_ui>:

LFMQUEUE_DEF_H(to_forward_usb, msg_64_t)
LFMQUEUE_DEF_H(from_forward_usb, msg_64_t)


LFMQUEUE_DEF_H(to_ui, msg_64_t)
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b082      	sub	sp, #8
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	6078      	str	r0, [r7, #4]
 80129d8:	6879      	ldr	r1, [r7, #4]
 80129da:	4804      	ldr	r0, [pc, #16]	; (80129ec <mqf_read_to_ui+0x1c>)
 80129dc:	f006 fbc4 	bl	8019168 <mqf_read>
 80129e0:	4603      	mov	r3, r0
 80129e2:	4618      	mov	r0, r3
 80129e4:	3708      	adds	r7, #8
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}
 80129ea:	bf00      	nop
 80129ec:	20000560 	.word	0x20000560

080129f0 <mqf_write_from_ui>:
LFMQUEUE_DEF_H(from_ui, msg_64_t)
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b082      	sub	sp, #8
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
 80129f8:	6879      	ldr	r1, [r7, #4]
 80129fa:	4804      	ldr	r0, [pc, #16]	; (8012a0c <mqf_write_from_ui+0x1c>)
 80129fc:	f006 fb3a 	bl	8019074 <mqf_write>
 8012a00:	4603      	mov	r3, r0
 8012a02:	4618      	mov	r0, r3
 8012a04:	3708      	adds	r7, #8
 8012a06:	46bd      	mov	sp, r7
 8012a08:	bd80      	pop	{r7, pc}
 8012a0a:	bf00      	nop
 8012a0c:	2000056c 	.word	0x2000056c

08012a10 <get_srotary>:
	return ((p<<ENC_MUL2)>>ENC_DIV2);//>>1;
}


static int16_t get_srotary(TIM_HandleTypeDef *ptdef)
{
 8012a10:	b480      	push	{r7}
 8012a12:	b085      	sub	sp, #20
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
	int16_t p = __HAL_TIM_GET_COUNTER(ptdef);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a1e:	81fb      	strh	r3, [r7, #14]
	if (p<-ENC_MAX-MIDDLE_ZERO) {
 8012a20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012a24:	f113 0f36 	cmn.w	r3, #54	; 0x36
 8012a28:	da08      	bge.n	8012a3c <get_srotary+0x2c>
		p = -ENC_MAX-MIDDLE_ZERO;
 8012a2a:	f64f 73ca 	movw	r3, #65482	; 0xffca
 8012a2e:	81fb      	strh	r3, [r7, #14]
		__HAL_TIM_SET_COUNTER(ptdef, p);
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012a38:	625a      	str	r2, [r3, #36]	; 0x24
 8012a3a:	e00a      	b.n	8012a52 <get_srotary+0x42>
	} else if (p>=ENC_MAX+MIDDLE_ZERO) {
 8012a3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012a40:	2b35      	cmp	r3, #53	; 0x35
 8012a42:	dd06      	ble.n	8012a52 <get_srotary+0x42>
		p=ENC_MAX+MIDDLE_ZERO;
 8012a44:	2336      	movs	r3, #54	; 0x36
 8012a46:	81fb      	strh	r3, [r7, #14]
		__HAL_TIM_SET_COUNTER(ptdef, p);
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012a50:	625a      	str	r2, [r3, #36]	; 0x24
	}
	if (abs(p)<MIDDLE_ZERO) p=0;
 8012a52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012a56:	f113 0f03 	cmn.w	r3, #3
 8012a5a:	db06      	blt.n	8012a6a <get_srotary+0x5a>
 8012a5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012a60:	2b03      	cmp	r3, #3
 8012a62:	dc02      	bgt.n	8012a6a <get_srotary+0x5a>
 8012a64:	2300      	movs	r3, #0
 8012a66:	81fb      	strh	r3, [r7, #14]
 8012a68:	e00c      	b.n	8012a84 <get_srotary+0x74>
	else if (p>0) p=p-MIDDLE_ZERO;
 8012a6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	dd04      	ble.n	8012a7c <get_srotary+0x6c>
 8012a72:	89fb      	ldrh	r3, [r7, #14]
 8012a74:	3b04      	subs	r3, #4
 8012a76:	b29b      	uxth	r3, r3
 8012a78:	81fb      	strh	r3, [r7, #14]
 8012a7a:	e003      	b.n	8012a84 <get_srotary+0x74>
	else p=p+MIDDLE_ZERO;
 8012a7c:	89fb      	ldrh	r3, [r7, #14]
 8012a7e:	3304      	adds	r3, #4
 8012a80:	b29b      	uxth	r3, r3
 8012a82:	81fb      	strh	r3, [r7, #14]
	return ((p<<ENC_MUL2)>>ENC_DIV2);//>>1;
 8012a84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012a88:	005b      	lsls	r3, r3, #1
 8012a8a:	b21b      	sxth	r3, r3
}
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	3714      	adds	r7, #20
 8012a90:	46bd      	mov	sp, r7
 8012a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a96:	4770      	bx	lr

08012a98 <ihm_runtick>:
static void ihm_runtick_testcanton(int);
static void ihm_runtick_detect(int);
static void ihm_runtick_detect1(int);

void ihm_runtick(void)
{
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	b082      	sub	sp, #8
 8012a9c:	af00      	add	r7, sp, #0
	static int performInit = 1;
	runmode_t orm = run_mode;
 8012a9e:	4b24      	ldr	r3, [pc, #144]	; (8012b30 <ihm_runtick+0x98>)
 8012aa0:	781b      	ldrb	r3, [r3, #0]
 8012aa2:	71fb      	strb	r3, [r7, #7]
	switch (run_mode) {
 8012aa4:	4b22      	ldr	r3, [pc, #136]	; (8012b30 <ihm_runtick+0x98>)
 8012aa6:	781b      	ldrb	r3, [r3, #0]
 8012aa8:	2b04      	cmp	r3, #4
 8012aaa:	d82b      	bhi.n	8012b04 <ihm_runtick+0x6c>
 8012aac:	a201      	add	r2, pc, #4	; (adr r2, 8012ab4 <ihm_runtick+0x1c>)
 8012aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ab2:	bf00      	nop
 8012ab4:	08012ad5 	.word	0x08012ad5
 8012ab8:	08012ac9 	.word	0x08012ac9
 8012abc:	08012ae1 	.word	0x08012ae1
 8012ac0:	08012aed 	.word	0x08012aed
 8012ac4:	08012af9 	.word	0x08012af9
	case runmode_normal:	ihm_runtick_normal(performInit); 	break;
 8012ac8:	4b1a      	ldr	r3, [pc, #104]	; (8012b34 <ihm_runtick+0x9c>)
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	4618      	mov	r0, r3
 8012ace:	f000 f8a3 	bl	8012c18 <ihm_runtick_normal>
 8012ad2:	e01d      	b.n	8012b10 <ihm_runtick+0x78>
	case runmode_off:		ihm_runtick_off(performInit); 		break;
 8012ad4:	4b17      	ldr	r3, [pc, #92]	; (8012b34 <ihm_runtick+0x9c>)
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	4618      	mov	r0, r3
 8012ada:	f000 fad7 	bl	801308c <ihm_runtick_off>
 8012ade:	e017      	b.n	8012b10 <ihm_runtick+0x78>
	case runmode_testcanton:ihm_runtick_testcanton(performInit); break;
 8012ae0:	4b14      	ldr	r3, [pc, #80]	; (8012b34 <ihm_runtick+0x9c>)
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f000 fb1b 	bl	8013120 <ihm_runtick_testcanton>
 8012aea:	e011      	b.n	8012b10 <ihm_runtick+0x78>
	case runmode_detect1:	ihm_runtick_detect1(performInit);	break;
 8012aec:	4b11      	ldr	r3, [pc, #68]	; (8012b34 <ihm_runtick+0x9c>)
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	4618      	mov	r0, r3
 8012af2:	f000 fb21 	bl	8013138 <ihm_runtick_detect1>
 8012af6:	e00b      	b.n	8012b10 <ihm_runtick+0x78>
	case runmode_detect:	ihm_runtick_detect(performInit);	break;
 8012af8:	4b0e      	ldr	r3, [pc, #56]	; (8012b34 <ihm_runtick+0x9c>)
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	4618      	mov	r0, r3
 8012afe:	f000 fc1d 	bl	801333c <ihm_runtick_detect>
 8012b02:	e005      	b.n	8012b10 <ihm_runtick+0x78>
	default:				ihm_runtick_off(performInit);		break;
 8012b04:	4b0b      	ldr	r3, [pc, #44]	; (8012b34 <ihm_runtick+0x9c>)
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	4618      	mov	r0, r3
 8012b0a:	f000 fabf 	bl	801308c <ihm_runtick_off>
 8012b0e:	bf00      	nop
	}
	performInit = (run_mode == orm) ? 0 : 1;
 8012b10:	4b07      	ldr	r3, [pc, #28]	; (8012b30 <ihm_runtick+0x98>)
 8012b12:	781b      	ldrb	r3, [r3, #0]
 8012b14:	79fa      	ldrb	r2, [r7, #7]
 8012b16:	429a      	cmp	r2, r3
 8012b18:	bf14      	ite	ne
 8012b1a:	2301      	movne	r3, #1
 8012b1c:	2300      	moveq	r3, #0
 8012b1e:	b2db      	uxtb	r3, r3
 8012b20:	461a      	mov	r2, r3
 8012b22:	4b04      	ldr	r3, [pc, #16]	; (8012b34 <ihm_runtick+0x9c>)
 8012b24:	601a      	str	r2, [r3, #0]
}
 8012b26:	bf00      	nop
 8012b28:	3708      	adds	r7, #8
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	bd80      	pop	{r7, pc}
 8012b2e:	bf00      	nop
 8012b30:	200051ed 	.word	0x200051ed
 8012b34:	20000228 	.word	0x20000228

08012b38 <set_displayout>:
// TODO : change this for per display struct
static ihm_mode_t ihm_dispmode = mode_init;
//static int ihm_train = 0;

static void set_displayout(void)
{
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	af00      	add	r7, sp, #0
	switch (ihm_dispmode) {
 8012b3c:	4b18      	ldr	r3, [pc, #96]	; (8012ba0 <set_displayout+0x68>)
 8012b3e:	781b      	ldrb	r3, [r3, #0]
 8012b40:	3b01      	subs	r3, #1
 8012b42:	2b03      	cmp	r3, #3
 8012b44:	d80a      	bhi.n	8012b5c <set_displayout+0x24>
 8012b46:	a201      	add	r2, pc, #4	; (adr r2, 8012b4c <set_displayout+0x14>)
 8012b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b4c:	08012b67 	.word	0x08012b67
 8012b50:	08012b71 	.word	0x08012b71
 8012b54:	08012b7b 	.word	0x08012b7b
 8012b58:	08012b85 	.word	0x08012b85
	default:
	case mode_init: 	  	ihm_setlayout(0, LAYOUT_INIT); break;
 8012b5c:	2101      	movs	r1, #1
 8012b5e:	2000      	movs	r0, #0
 8012b60:	f7ff f906 	bl	8011d70 <ihm_setlayout>
 8012b64:	e013      	b.n	8012b8e <set_displayout+0x56>
	case mode_ina_detect:	ihm_setlayout(0, LAYOUT_INA3221_DETECT); break;
 8012b66:	21c8      	movs	r1, #200	; 0xc8
 8012b68:	2000      	movs	r0, #0
 8012b6a:	f7ff f901 	bl	8011d70 <ihm_setlayout>
 8012b6e:	e00e      	b.n	8012b8e <set_displayout+0x56>
	case mode_ina_val:		ihm_setlayout(0, LAYOUT_INA3221_VAL); break;
 8012b70:	21c9      	movs	r1, #201	; 0xc9
 8012b72:	2000      	movs	r0, #0
 8012b74:	f7ff f8fc 	bl	8011d70 <ihm_setlayout>
 8012b78:	e009      	b.n	8012b8e <set_displayout+0x56>

	case mode_manual:		ihm_setlayout(0, LAYOUT_MANUAL); break;
 8012b7a:	2102      	movs	r1, #2
 8012b7c:	2000      	movs	r0, #0
 8012b7e:	f7ff f8f7 	bl	8011d70 <ihm_setlayout>
 8012b82:	e004      	b.n	8012b8e <set_displayout+0x56>
	case mode_auto: 		ihm_setlayout(0, LAYOUT_AUTO); break;
 8012b84:	2103      	movs	r1, #3
 8012b86:	2000      	movs	r0, #0
 8012b88:	f7ff f8f2 	bl	8011d70 <ihm_setlayout>
 8012b8c:	bf00      	nop
	}
	SET_NEEDSREFRESH(0);
 8012b8e:	4b05      	ldr	r3, [pc, #20]	; (8012ba4 <set_displayout+0x6c>)
 8012b90:	781b      	ldrb	r3, [r3, #0]
 8012b92:	f043 0301 	orr.w	r3, r3, #1
 8012b96:	b2da      	uxtb	r2, r3
 8012b98:	4b02      	ldr	r3, [pc, #8]	; (8012ba4 <set_displayout+0x6c>)
 8012b9a:	701a      	strb	r2, [r3, #0]
}
 8012b9c:	bf00      	nop
 8012b9e:	bd80      	pop	{r7, pc}
 8012ba0:	200051ee 	.word	0x200051ee
 8012ba4:	200051ec 	.word	0x200051ec

08012ba8 <is_special_dispmode>:

static int is_special_dispmode(void)
{
 8012ba8:	b480      	push	{r7}
 8012baa:	af00      	add	r7, sp, #0
	switch (ihm_dispmode) {
 8012bac:	4b0e      	ldr	r3, [pc, #56]	; (8012be8 <is_special_dispmode+0x40>)
 8012bae:	781b      	ldrb	r3, [r3, #0]
 8012bb0:	3b01      	subs	r3, #1
 8012bb2:	2b03      	cmp	r3, #3
 8012bb4:	d80a      	bhi.n	8012bcc <is_special_dispmode+0x24>
 8012bb6:	a201      	add	r2, pc, #4	; (adr r2, 8012bbc <is_special_dispmode+0x14>)
 8012bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bbc:	08012bd1 	.word	0x08012bd1
 8012bc0:	08012bd5 	.word	0x08012bd5
 8012bc4:	08012bd9 	.word	0x08012bd9
 8012bc8:	08012bdd 	.word	0x08012bdd
	default:
	case mode_init: 	  	return 0;
 8012bcc:	2300      	movs	r3, #0
 8012bce:	e006      	b.n	8012bde <is_special_dispmode+0x36>
	case mode_ina_detect:	return 1;
 8012bd0:	2301      	movs	r3, #1
 8012bd2:	e004      	b.n	8012bde <is_special_dispmode+0x36>
	case mode_ina_val:		return 1;
 8012bd4:	2301      	movs	r3, #1
 8012bd6:	e002      	b.n	8012bde <is_special_dispmode+0x36>

	case mode_manual:		return 0;
 8012bd8:	2300      	movs	r3, #0
 8012bda:	e000      	b.n	8012bde <is_special_dispmode+0x36>
	case mode_auto: 		return 0;
 8012bdc:	2300      	movs	r3, #0
	}
}
 8012bde:	4618      	mov	r0, r3
 8012be0:	46bd      	mov	sp, r7
 8012be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be6:	4770      	bx	lr
 8012be8:	200051ee 	.word	0x200051ee

08012bec <set_dispmode>:

static void set_dispmode(ihm_mode_t m)
{
 8012bec:	b580      	push	{r7, lr}
 8012bee:	b082      	sub	sp, #8
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	71fb      	strb	r3, [r7, #7]
	if (ihm_dispmode == m) return;
 8012bf6:	4b07      	ldr	r3, [pc, #28]	; (8012c14 <set_dispmode+0x28>)
 8012bf8:	781b      	ldrb	r3, [r3, #0]
 8012bfa:	79fa      	ldrb	r2, [r7, #7]
 8012bfc:	429a      	cmp	r2, r3
 8012bfe:	d005      	beq.n	8012c0c <set_dispmode+0x20>
	ihm_dispmode = m;
 8012c00:	4a04      	ldr	r2, [pc, #16]	; (8012c14 <set_dispmode+0x28>)
 8012c02:	79fb      	ldrb	r3, [r7, #7]
 8012c04:	7013      	strb	r3, [r2, #0]
	set_displayout();
 8012c06:	f7ff ff97 	bl	8012b38 <set_displayout>
 8012c0a:	e000      	b.n	8012c0e <set_dispmode+0x22>
	if (ihm_dispmode == m) return;
 8012c0c:	bf00      	nop
}
 8012c0e:	3708      	adds	r7, #8
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd80      	pop	{r7, pc}
 8012c14:	200051ee 	.word	0x200051ee

08012c18 <ihm_runtick_normal>:

void ihm_runtick_normal(int init)
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b08a      	sub	sp, #40	; 0x28
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
	//static int cnt=0;
	if (init) {
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d016      	beq.n	8012c54 <ihm_runtick_normal+0x3c>
		itm_debug1(DBG_UI, "UI init", 0);
 8012c26:	2200      	movs	r2, #0
 8012c28:	4963      	ldr	r1, [pc, #396]	; (8012db8 <ihm_runtick_normal+0x1a0>)
 8012c2a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012c2e:	f7ff fe99 	bl	8012964 <itm_debug1>
		set_dispmode(mode_init);
 8012c32:	2000      	movs	r0, #0
 8012c34:	f7ff ffda 	bl	8012bec <set_dispmode>
		for (int i = 0; i<DISP_MAX_REGS; i++) {
 8012c38:	2300      	movs	r3, #0
 8012c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8012c3c:	e007      	b.n	8012c4e <ihm_runtick_normal+0x36>
			ihm_setvar(0, i, 0);
 8012c3e:	2200      	movs	r2, #0
 8012c40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012c42:	2000      	movs	r0, #0
 8012c44:	f7ff f8ea 	bl	8011e1c <ihm_setvar>
		for (int i = 0; i<DISP_MAX_REGS; i++) {
 8012c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c4a:	3301      	adds	r3, #1
 8012c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8012c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c50:	2b0f      	cmp	r3, #15
 8012c52:	ddf4      	ble.n	8012c3e <ihm_runtick_normal+0x26>
		}
	}
	itm_debug1(DBG_UI, "UI tick", 0);
 8012c54:	2200      	movs	r2, #0
 8012c56:	4959      	ldr	r1, [pc, #356]	; (8012dbc <ihm_runtick_normal+0x1a4>)
 8012c58:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012c5c:	f7ff fe82 	bl	8012964 <itm_debug1>

	needsrefresh_mask = 0;
 8012c60:	4b57      	ldr	r3, [pc, #348]	; (8012dc0 <ihm_runtick_normal+0x1a8>)
 8012c62:	2200      	movs	r2, #0
 8012c64:	701a      	strb	r2, [r3, #0]
	// scan rotary encoder -----------
	for (int i=0; i<MAX_ROTARY; i++) {
 8012c66:	2300      	movs	r3, #0
 8012c68:	623b      	str	r3, [r7, #32]
 8012c6a:	e066      	b.n	8012d3a <ihm_runtick_normal+0x122>
				m.v1u = rot_position[i];
				mqf_write_from_ui(&m);
			}
		}
#else
		int16_t p = get_srotary(&htim4);
 8012c6c:	4855      	ldr	r0, [pc, #340]	; (8012dc4 <ihm_runtick_normal+0x1ac>)
 8012c6e:	f7ff fecf 	bl	8012a10 <get_srotary>
 8012c72:	4603      	mov	r3, r0
 8012c74:	82fb      	strh	r3, [r7, #22]
		if (p != rot_position[i]) {
 8012c76:	4a54      	ldr	r2, [pc, #336]	; (8012dc8 <ihm_runtick_normal+0x1b0>)
 8012c78:	6a3b      	ldr	r3, [r7, #32]
 8012c7a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012c7e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012c82:	429a      	cmp	r2, r3
 8012c84:	d056      	beq.n	8012d34 <ihm_runtick_normal+0x11c>
			// pos changed
			rot_position[i] = p;
 8012c86:	4950      	ldr	r1, [pc, #320]	; (8012dc8 <ihm_runtick_normal+0x1b0>)
 8012c88:	6a3b      	ldr	r3, [r7, #32]
 8012c8a:	8afa      	ldrh	r2, [r7, #22]
 8012c8c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			if (ihm_dispmode==mode_manual) {
 8012c90:	4b4e      	ldr	r3, [pc, #312]	; (8012dcc <ihm_runtick_normal+0x1b4>)
 8012c92:	781b      	ldrb	r3, [r3, #0]
 8012c94:	2b03      	cmp	r3, #3
 8012c96:	d10f      	bne.n	8012cb8 <ihm_runtick_normal+0xa0>
				ihm_setvar(0, 1, (uint16_t) rot_position[0]);
 8012c98:	4b4b      	ldr	r3, [pc, #300]	; (8012dc8 <ihm_runtick_normal+0x1b0>)
 8012c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012c9e:	b29b      	uxth	r3, r3
 8012ca0:	461a      	mov	r2, r3
 8012ca2:	2101      	movs	r1, #1
 8012ca4:	2000      	movs	r0, #0
 8012ca6:	f7ff f8b9 	bl	8011e1c <ihm_setvar>
				//ihm_setvar(0, 1, ((int)rot0_position - 50));
				SET_NEEDSREFRESH(0);
 8012caa:	4b45      	ldr	r3, [pc, #276]	; (8012dc0 <ihm_runtick_normal+0x1a8>)
 8012cac:	781b      	ldrb	r3, [r3, #0]
 8012cae:	f043 0301 	orr.w	r3, r3, #1
 8012cb2:	b2da      	uxtb	r2, r3
 8012cb4:	4b42      	ldr	r3, [pc, #264]	; (8012dc0 <ihm_runtick_normal+0x1a8>)
 8012cb6:	701a      	strb	r2, [r3, #0]
			}
			if (drive_mode[i]) {	// TODO refactor drive_mode
 8012cb8:	4a45      	ldr	r2, [pc, #276]	; (8012dd0 <ihm_runtick_normal+0x1b8>)
 8012cba:	6a3b      	ldr	r3, [r7, #32]
 8012cbc:	4413      	add	r3, r2
 8012cbe:	781b      	ldrb	r3, [r3, #0]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d037      	beq.n	8012d34 <ihm_runtick_normal+0x11c>
				msg_64_t m;
				m.from = MA_UI(i);
 8012cc4:	6a3b      	ldr	r3, [r7, #32]
 8012cc6:	b25b      	sxtb	r3, r3
 8012cc8:	f003 031f 	and.w	r3, r3, #31
 8012ccc:	b25b      	sxtb	r3, r3
 8012cce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012cd2:	b25b      	sxtb	r3, r3
 8012cd4:	b2db      	uxtb	r3, r3
 8012cd6:	727b      	strb	r3, [r7, #9]
				m.to = MA_CONTROL_T(i);
 8012cd8:	6a3b      	ldr	r3, [r7, #32]
 8012cda:	b25b      	sxtb	r3, r3
 8012cdc:	f003 0307 	and.w	r3, r3, #7
 8012ce0:	b25b      	sxtb	r3, r3
 8012ce2:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8012ce6:	b25b      	sxtb	r3, r3
 8012ce8:	b2db      	uxtb	r3, r3
 8012cea:	723b      	strb	r3, [r7, #8]
				m.cmd = CMD_MDRIVE_SPEED_DIR;
 8012cec:	2317      	movs	r3, #23
 8012cee:	72bb      	strb	r3, [r7, #10]
				m.v1u = abs(rot_position[i]);
 8012cf0:	4a35      	ldr	r2, [pc, #212]	; (8012dc8 <ihm_runtick_normal+0x1b0>)
 8012cf2:	6a3b      	ldr	r3, [r7, #32]
 8012cf4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	bfb8      	it	lt
 8012cfc:	425b      	neglt	r3, r3
 8012cfe:	b29b      	uxth	r3, r3
 8012d00:	81bb      	strh	r3, [r7, #12]
				m.v2 = SIGNOF0(rot_position[i]);
 8012d02:	4a31      	ldr	r2, [pc, #196]	; (8012dc8 <ihm_runtick_normal+0x1b0>)
 8012d04:	6a3b      	ldr	r3, [r7, #32]
 8012d06:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	db0a      	blt.n	8012d24 <ihm_runtick_normal+0x10c>
 8012d0e:	4a2e      	ldr	r2, [pc, #184]	; (8012dc8 <ihm_runtick_normal+0x1b0>)
 8012d10:	6a3b      	ldr	r3, [r7, #32]
 8012d12:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	bfcc      	ite	gt
 8012d1a:	2301      	movgt	r3, #1
 8012d1c:	2300      	movle	r3, #0
 8012d1e:	b2db      	uxtb	r3, r3
 8012d20:	b21b      	sxth	r3, r3
 8012d22:	e001      	b.n	8012d28 <ihm_runtick_normal+0x110>
 8012d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012d28:	81fb      	strh	r3, [r7, #14]
				// TODO handle dir
				mqf_write_from_ui(&m);
 8012d2a:	f107 0308 	add.w	r3, r7, #8
 8012d2e:	4618      	mov	r0, r3
 8012d30:	f7ff fe5e 	bl	80129f0 <mqf_write_from_ui>
	for (int i=0; i<MAX_ROTARY; i++) {
 8012d34:	6a3b      	ldr	r3, [r7, #32]
 8012d36:	3301      	adds	r3, #1
 8012d38:	623b      	str	r3, [r7, #32]
 8012d3a:	6a3b      	ldr	r3, [r7, #32]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	dd95      	ble.n	8012c6c <ihm_runtick_normal+0x54>
	}

	// scan buttons ------------------

	// mode test hook
	if (ihm_dispmode==mode_ina_detect) {
 8012d40:	4b22      	ldr	r3, [pc, #136]	; (8012dcc <ihm_runtick_normal+0x1b4>)
 8012d42:	781b      	ldrb	r3, [r3, #0]
 8012d44:	2b01      	cmp	r3, #1
 8012d46:	d119      	bne.n	8012d7c <ihm_runtick_normal+0x164>
		// ina3221 detection
		for (int i=0; i<4; i++) {
 8012d48:	2300      	movs	r3, #0
 8012d4a:	61fb      	str	r3, [r7, #28]
 8012d4c:	e00c      	b.n	8012d68 <ihm_runtick_normal+0x150>
			ihm_setvar(0, i, ina3221_devices[i]);
 8012d4e:	4a21      	ldr	r2, [pc, #132]	; (8012dd4 <ihm_runtick_normal+0x1bc>)
 8012d50:	69fb      	ldr	r3, [r7, #28]
 8012d52:	4413      	add	r3, r2
 8012d54:	781b      	ldrb	r3, [r3, #0]
 8012d56:	b29b      	uxth	r3, r3
 8012d58:	461a      	mov	r2, r3
 8012d5a:	69f9      	ldr	r1, [r7, #28]
 8012d5c:	2000      	movs	r0, #0
 8012d5e:	f7ff f85d 	bl	8011e1c <ihm_setvar>
		for (int i=0; i<4; i++) {
 8012d62:	69fb      	ldr	r3, [r7, #28]
 8012d64:	3301      	adds	r3, #1
 8012d66:	61fb      	str	r3, [r7, #28]
 8012d68:	69fb      	ldr	r3, [r7, #28]
 8012d6a:	2b03      	cmp	r3, #3
 8012d6c:	ddef      	ble.n	8012d4e <ihm_runtick_normal+0x136>
		}
		SET_NEEDSREFRESH(0);
 8012d6e:	4b14      	ldr	r3, [pc, #80]	; (8012dc0 <ihm_runtick_normal+0x1a8>)
 8012d70:	781b      	ldrb	r3, [r3, #0]
 8012d72:	f043 0301 	orr.w	r3, r3, #1
 8012d76:	b2da      	uxtb	r2, r3
 8012d78:	4b11      	ldr	r3, [pc, #68]	; (8012dc0 <ihm_runtick_normal+0x1a8>)
 8012d7a:	701a      	strb	r2, [r3, #0]
	}
	// process messages --------------
	ui_process_msg();
 8012d7c:	f000 f82c 	bl	8012dd8 <ui_process_msg>

	// update displays ---------------
	for (int i=0; i<MAX_DISP; i++) {
 8012d80:	2300      	movs	r3, #0
 8012d82:	61bb      	str	r3, [r7, #24]
 8012d84:	e010      	b.n	8012da8 <ihm_runtick_normal+0x190>
		if (NEEDSREFRESH(i)) {
 8012d86:	4b0e      	ldr	r3, [pc, #56]	; (8012dc0 <ihm_runtick_normal+0x1a8>)
 8012d88:	781b      	ldrb	r3, [r3, #0]
 8012d8a:	461a      	mov	r2, r3
 8012d8c:	69bb      	ldr	r3, [r7, #24]
 8012d8e:	fa42 f303 	asr.w	r3, r2, r3
 8012d92:	f003 0301 	and.w	r3, r3, #1
 8012d96:	b2db      	uxtb	r3, r3
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d002      	beq.n	8012da2 <ihm_runtick_normal+0x18a>
			disp_layout(i);
 8012d9c:	69b8      	ldr	r0, [r7, #24]
 8012d9e:	f7ff f87b 	bl	8011e98 <disp_layout>
	for (int i=0; i<MAX_DISP; i++) {
 8012da2:	69bb      	ldr	r3, [r7, #24]
 8012da4:	3301      	adds	r3, #1
 8012da6:	61bb      	str	r3, [r7, #24]
 8012da8:	69bb      	ldr	r3, [r7, #24]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	ddeb      	ble.n	8012d86 <ihm_runtick_normal+0x16e>
		}
	}
}
 8012dae:	bf00      	nop
 8012db0:	3728      	adds	r7, #40	; 0x28
 8012db2:	46bd      	mov	sp, r7
 8012db4:	bd80      	pop	{r7, pc}
 8012db6:	bf00      	nop
 8012db8:	080196ec 	.word	0x080196ec
 8012dbc:	080196f4 	.word	0x080196f4
 8012dc0:	200051ec 	.word	0x200051ec
 8012dc4:	20005d54 	.word	0x20005d54
 8012dc8:	20000220 	.word	0x20000220
 8012dcc:	200051ee 	.word	0x200051ee
 8012dd0:	20000224 	.word	0x20000224
 8012dd4:	20005168 	.word	0x20005168

08012dd8 <ui_process_msg>:


static void ui_process_msg(void)
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b088      	sub	sp, #32
 8012ddc:	af00      	add	r7, sp, #0
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_ui(&m);
 8012dde:	463b      	mov	r3, r7
 8012de0:	4618      	mov	r0, r3
 8012de2:	f7ff fdf5 	bl	80129d0 <mqf_read_to_ui>
 8012de6:	61b8      	str	r0, [r7, #24]
		if (rc) break;
 8012de8:	69bb      	ldr	r3, [r7, #24]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	f040 810d 	bne.w	801300a <ui_process_msg+0x232>

		if (m.cmd == CMD_TRTSPD_NOTIF) {
 8012df0:	78bb      	ldrb	r3, [r7, #2]
 8012df2:	2b24      	cmp	r3, #36	; 0x24
 8012df4:	d105      	bne.n	8012e02 <ui_process_msg+0x2a>
			itm_debug1(DBG_UI, "hop", 0);
 8012df6:	2200      	movs	r2, #0
 8012df8:	498d      	ldr	r1, [pc, #564]	; (8013030 <ui_process_msg+0x258>)
 8012dfa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012dfe:	f7ff fdb1 	bl	8012964 <itm_debug1>
		}

		switch(m.cmd) {
 8012e02:	78bb      	ldrb	r3, [r7, #2]
 8012e04:	2b25      	cmp	r3, #37	; 0x25
 8012e06:	f000 8102 	beq.w	801300e <ui_process_msg+0x236>
 8012e0a:	2bfc      	cmp	r3, #252	; 0xfc
 8012e0c:	d00a      	beq.n	8012e24 <ui_process_msg+0x4c>
 8012e0e:	2b01      	cmp	r3, #1
 8012e10:	f000 80ff 	beq.w	8013012 <ui_process_msg+0x23a>
		default:
			break;
 8012e14:	bf00      	nop
        		SET_NEEDSREFRESH(0);
        	}
        	return;
        	break;
        }
		if (IS_CONTROL_T(m.from)) {
 8012e16:	787b      	ldrb	r3, [r7, #1]
 8012e18:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8012e1c:	2bd0      	cmp	r3, #208	; 0xd0
 8012e1e:	f040 80a1 	bne.w	8012f64 <ui_process_msg+0x18c>
 8012e22:	e004      	b.n	8012e2e <ui_process_msg+0x56>
            run_mode = m.v1u;
 8012e24:	88bb      	ldrh	r3, [r7, #4]
 8012e26:	b2da      	uxtb	r2, r3
 8012e28:	4b82      	ldr	r3, [pc, #520]	; (8013034 <ui_process_msg+0x25c>)
 8012e2a:	701a      	strb	r2, [r3, #0]
            return;
 8012e2c:	e0fc      	b.n	8013028 <ui_process_msg+0x250>
			int trnum = m.from & 0x07;
 8012e2e:	787b      	ldrb	r3, [r7, #1]
 8012e30:	f003 0307 	and.w	r3, r3, #7
 8012e34:	617b      	str	r3, [r7, #20]
			if (trnum != 0) break; // TODO
 8012e36:	697b      	ldr	r3, [r7, #20]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	f040 80ec 	bne.w	8013016 <ui_process_msg+0x23e>
			switch (m.cmd) {
 8012e3e:	78bb      	ldrb	r3, [r7, #2]
 8012e40:	2b23      	cmp	r3, #35	; 0x23
 8012e42:	d03f      	beq.n	8012ec4 <ui_process_msg+0xec>
 8012e44:	2b23      	cmp	r3, #35	; 0x23
 8012e46:	dc04      	bgt.n	8012e52 <ui_process_msg+0x7a>
 8012e48:	2b21      	cmp	r3, #33	; 0x21
 8012e4a:	d051      	beq.n	8012ef0 <ui_process_msg+0x118>
 8012e4c:	2b22      	cmp	r3, #34	; 0x22
 8012e4e:	d008      	beq.n	8012e62 <ui_process_msg+0x8a>
 8012e50:	e07f      	b.n	8012f52 <ui_process_msg+0x17a>
 8012e52:	2b26      	cmp	r3, #38	; 0x26
 8012e54:	d068      	beq.n	8012f28 <ui_process_msg+0x150>
 8012e56:	2ba1      	cmp	r3, #161	; 0xa1
 8012e58:	f000 8086 	beq.w	8012f68 <ui_process_msg+0x190>
 8012e5c:	2b24      	cmp	r3, #36	; 0x24
 8012e5e:	d00d      	beq.n	8012e7c <ui_process_msg+0xa4>
 8012e60:	e077      	b.n	8012f52 <ui_process_msg+0x17a>
			case CMD_TRSTATUS_NOTIF:
				// unused
				// TODO trnum -> display num
				if (ihm_dispmode == mode_auto) {
 8012e62:	4b75      	ldr	r3, [pc, #468]	; (8013038 <ui_process_msg+0x260>)
 8012e64:	781b      	ldrb	r3, [r3, #0]
 8012e66:	2b04      	cmp	r3, #4
 8012e68:	f040 80d7 	bne.w	801301a <ui_process_msg+0x242>
					//TODO
					//ihm_setvar(0, 2, m.v1u);
					SET_NEEDSREFRESH(0);
 8012e6c:	4b73      	ldr	r3, [pc, #460]	; (801303c <ui_process_msg+0x264>)
 8012e6e:	781b      	ldrb	r3, [r3, #0]
 8012e70:	f043 0301 	orr.w	r3, r3, #1
 8012e74:	b2da      	uxtb	r2, r3
 8012e76:	4b71      	ldr	r3, [pc, #452]	; (801303c <ui_process_msg+0x264>)
 8012e78:	701a      	strb	r2, [r3, #0]
				}
				return;
 8012e7a:	e0ce      	b.n	801301a <ui_process_msg+0x242>
				break;
			case CMD_TRTSPD_NOTIF:
				itm_debug2(DBG_UI|DBG_CTRL, "rx tspd notif", trnum, m.v1u);
 8012e7c:	88bb      	ldrh	r3, [r7, #4]
 8012e7e:	697a      	ldr	r2, [r7, #20]
 8012e80:	496f      	ldr	r1, [pc, #444]	; (8013040 <ui_process_msg+0x268>)
 8012e82:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8012e86:	f7ff fd87 	bl	8012998 <itm_debug2>
				// TODO trnum -> display num
				if (!NOTIF_VOFF && ((ihm_dispmode == mode_manual) || (ihm_dispmode == mode_auto))) {
 8012e8a:	4b6b      	ldr	r3, [pc, #428]	; (8013038 <ui_process_msg+0x260>)
 8012e8c:	781b      	ldrb	r3, [r3, #0]
 8012e8e:	2b03      	cmp	r3, #3
 8012e90:	d004      	beq.n	8012e9c <ui_process_msg+0xc4>
 8012e92:	4b69      	ldr	r3, [pc, #420]	; (8013038 <ui_process_msg+0x260>)
 8012e94:	781b      	ldrb	r3, [r3, #0]
 8012e96:	2b04      	cmp	r3, #4
 8012e98:	f040 80c1 	bne.w	801301e <ui_process_msg+0x246>
					ihm_setvar(0, 2, m.v2 * m.v1u);
 8012e9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012ea0:	b29a      	uxth	r2, r3
 8012ea2:	88bb      	ldrh	r3, [r7, #4]
 8012ea4:	fb12 f303 	smulbb	r3, r2, r3
 8012ea8:	b29b      	uxth	r3, r3
 8012eaa:	461a      	mov	r2, r3
 8012eac:	2102      	movs	r1, #2
 8012eae:	2000      	movs	r0, #0
 8012eb0:	f7fe ffb4 	bl	8011e1c <ihm_setvar>
					SET_NEEDSREFRESH(0);
 8012eb4:	4b61      	ldr	r3, [pc, #388]	; (801303c <ui_process_msg+0x264>)
 8012eb6:	781b      	ldrb	r3, [r3, #0]
 8012eb8:	f043 0301 	orr.w	r3, r3, #1
 8012ebc:	b2da      	uxtb	r2, r3
 8012ebe:	4b5f      	ldr	r3, [pc, #380]	; (801303c <ui_process_msg+0x264>)
 8012ec0:	701a      	strb	r2, [r3, #0]
				}
				return;
 8012ec2:	e0ac      	b.n	801301e <ui_process_msg+0x246>
				break;

			case CMD_TRDIR_NOTIF:
				if (!is_special_dispmode()) {
 8012ec4:	f7ff fe70 	bl	8012ba8 <is_special_dispmode>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	f040 80a9 	bne.w	8013022 <ui_process_msg+0x24a>
					ihm_setvar(0, 4, m.v1);
 8012ed0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012ed4:	b29b      	uxth	r3, r3
 8012ed6:	461a      	mov	r2, r3
 8012ed8:	2104      	movs	r1, #4
 8012eda:	2000      	movs	r0, #0
 8012edc:	f7fe ff9e 	bl	8011e1c <ihm_setvar>
					SET_NEEDSREFRESH(0);
 8012ee0:	4b56      	ldr	r3, [pc, #344]	; (801303c <ui_process_msg+0x264>)
 8012ee2:	781b      	ldrb	r3, [r3, #0]
 8012ee4:	f043 0301 	orr.w	r3, r3, #1
 8012ee8:	b2da      	uxtb	r2, r3
 8012eea:	4b54      	ldr	r3, [pc, #336]	; (801303c <ui_process_msg+0x264>)
 8012eec:	701a      	strb	r2, [r3, #0]
				}
				return;
 8012eee:	e098      	b.n	8013022 <ui_process_msg+0x24a>
				break;
			case CMD_TRMODE_NOTIF:
				// TODO
				if (!is_special_dispmode()) {
 8012ef0:	f7ff fe5a 	bl	8012ba8 <is_special_dispmode>
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d114      	bne.n	8012f24 <ui_process_msg+0x14c>
					train_mode_t cm = (train_mode_t) m.v1u;
 8012efa:	88bb      	ldrh	r3, [r7, #4]
 8012efc:	74fb      	strb	r3, [r7, #19]
					switch (cm) {
 8012efe:	7cfb      	ldrb	r3, [r7, #19]
 8012f00:	2b01      	cmp	r3, #1
 8012f02:	db03      	blt.n	8012f0c <ui_process_msg+0x134>
 8012f04:	2b02      	cmp	r3, #2
 8012f06:	dd05      	ble.n	8012f14 <ui_process_msg+0x13c>
 8012f08:	2b03      	cmp	r3, #3
 8012f0a:	d007      	beq.n	8012f1c <ui_process_msg+0x144>
					default:
					case train_notrunning:
						set_dispmode(mode_init);
 8012f0c:	2000      	movs	r0, #0
 8012f0e:	f7ff fe6d 	bl	8012bec <set_dispmode>
						break;
 8012f12:	e008      	b.n	8012f26 <ui_process_msg+0x14e>
					case train_manual:
					case train_fullmanual:
						set_dispmode(mode_manual);
 8012f14:	2003      	movs	r0, #3
 8012f16:	f7ff fe69 	bl	8012bec <set_dispmode>
						break;
 8012f1a:	e004      	b.n	8012f26 <ui_process_msg+0x14e>
					case train_auto:
						set_dispmode(mode_auto);
 8012f1c:	2004      	movs	r0, #4
 8012f1e:	f7ff fe65 	bl	8012bec <set_dispmode>
						break;
 8012f22:	e000      	b.n	8012f26 <ui_process_msg+0x14e>
					}
				}
 8012f24:	bf00      	nop
				return;
 8012f26:	e07f      	b.n	8013028 <ui_process_msg+0x250>
				break;
			case CMD_TRSTATE_NOTIF:
				if (!is_special_dispmode()) {
 8012f28:	f7ff fe3e 	bl	8012ba8 <is_special_dispmode>
 8012f2c:	4603      	mov	r3, r0
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d179      	bne.n	8013026 <ui_process_msg+0x24e>
					ihm_setvar(0, 3, 10+m.v1u);
 8012f32:	88bb      	ldrh	r3, [r7, #4]
 8012f34:	330a      	adds	r3, #10
 8012f36:	b29b      	uxth	r3, r3
 8012f38:	461a      	mov	r2, r3
 8012f3a:	2103      	movs	r1, #3
 8012f3c:	2000      	movs	r0, #0
 8012f3e:	f7fe ff6d 	bl	8011e1c <ihm_setvar>
					SET_NEEDSREFRESH(0);
 8012f42:	4b3e      	ldr	r3, [pc, #248]	; (801303c <ui_process_msg+0x264>)
 8012f44:	781b      	ldrb	r3, [r3, #0]
 8012f46:	f043 0301 	orr.w	r3, r3, #1
 8012f4a:	b2da      	uxtb	r2, r3
 8012f4c:	4b3b      	ldr	r3, [pc, #236]	; (801303c <ui_process_msg+0x264>)
 8012f4e:	701a      	strb	r2, [r3, #0]
				}
				return;
 8012f50:	e069      	b.n	8013026 <ui_process_msg+0x24e>
				break;
			case CMD_UI_MSG:
				break; // see below
			default:
				itm_debug1(DBG_UI, "unk ctl", m.cmd);
 8012f52:	78bb      	ldrb	r3, [r7, #2]
 8012f54:	461a      	mov	r2, r3
 8012f56:	493b      	ldr	r1, [pc, #236]	; (8013044 <ui_process_msg+0x26c>)
 8012f58:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012f5c:	f7ff fd02 	bl	8012964 <itm_debug1>
				return;
 8012f60:	bf00      	nop
 8012f62:	e061      	b.n	8013028 <ui_process_msg+0x250>
				break;
			}
		}
 8012f64:	bf00      	nop
 8012f66:	e000      	b.n	8012f6a <ui_process_msg+0x192>
				break; // see below
 8012f68:	bf00      	nop
		if (IS_UI(m.to)) {
 8012f6a:	783b      	ldrb	r3, [r7, #0]
 8012f6c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8012f70:	2b80      	cmp	r3, #128	; 0x80
 8012f72:	d13f      	bne.n	8012ff4 <ui_process_msg+0x21c>
			int dn = m.to & 0x1F;
 8012f74:	783b      	ldrb	r3, [r7, #0]
 8012f76:	f003 031f 	and.w	r3, r3, #31
 8012f7a:	60fb      	str	r3, [r7, #12]
			if (dn != 1) {
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	2b01      	cmp	r3, #1
 8012f80:	d006      	beq.n	8012f90 <ui_process_msg+0x1b8>
				itm_debug1(DBG_UI, "?dn", dn);
 8012f82:	68fa      	ldr	r2, [r7, #12]
 8012f84:	4930      	ldr	r1, [pc, #192]	; (8013048 <ui_process_msg+0x270>)
 8012f86:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012f8a:	f7ff fceb 	bl	8012964 <itm_debug1>
 8012f8e:	e726      	b.n	8012dde <ui_process_msg+0x6>
				continue;
			}
			switch (m.cmd) {
 8012f90:	78bb      	ldrb	r3, [r7, #2]
 8012f92:	2b20      	cmp	r3, #32
 8012f94:	d002      	beq.n	8012f9c <ui_process_msg+0x1c4>
 8012f96:	2ba1      	cmp	r3, #161	; 0xa1
 8012f98:	d033      	beq.n	8013002 <ui_process_msg+0x22a>
 8012f9a:	e022      	b.n	8012fe2 <ui_process_msg+0x20a>
			case CMD_UI_MSG:
				//ui_msg5(dn, (char *) m.rbytes+1);
				break;
			case CMD_INA3221_REPORT:
				if (ihm_dispmode == mode_ina_val) {
 8012f9c:	4b26      	ldr	r3, [pc, #152]	; (8013038 <ui_process_msg+0x260>)
 8012f9e:	781b      	ldrb	r3, [r3, #0]
 8012fa0:	2b02      	cmp	r3, #2
 8012fa2:	d130      	bne.n	8013006 <ui_process_msg+0x22e>
					int16_t *values = (int16_t *) m.v32u;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	60bb      	str	r3, [r7, #8]
					for (int i =0; i<12; i++) {
 8012fa8:	2300      	movs	r3, #0
 8012faa:	61fb      	str	r3, [r7, #28]
 8012fac:	e00e      	b.n	8012fcc <ui_process_msg+0x1f4>
						ihm_setvar(0, i, values[i]);
 8012fae:	69fb      	ldr	r3, [r7, #28]
 8012fb0:	005b      	lsls	r3, r3, #1
 8012fb2:	68ba      	ldr	r2, [r7, #8]
 8012fb4:	4413      	add	r3, r2
 8012fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012fba:	b29b      	uxth	r3, r3
 8012fbc:	461a      	mov	r2, r3
 8012fbe:	69f9      	ldr	r1, [r7, #28]
 8012fc0:	2000      	movs	r0, #0
 8012fc2:	f7fe ff2b 	bl	8011e1c <ihm_setvar>
					for (int i =0; i<12; i++) {
 8012fc6:	69fb      	ldr	r3, [r7, #28]
 8012fc8:	3301      	adds	r3, #1
 8012fca:	61fb      	str	r3, [r7, #28]
 8012fcc:	69fb      	ldr	r3, [r7, #28]
 8012fce:	2b0b      	cmp	r3, #11
 8012fd0:	dded      	ble.n	8012fae <ui_process_msg+0x1d6>
					}
					SET_NEEDSREFRESH(0);
 8012fd2:	4b1a      	ldr	r3, [pc, #104]	; (801303c <ui_process_msg+0x264>)
 8012fd4:	781b      	ldrb	r3, [r3, #0]
 8012fd6:	f043 0301 	orr.w	r3, r3, #1
 8012fda:	b2da      	uxtb	r2, r3
 8012fdc:	4b17      	ldr	r3, [pc, #92]	; (801303c <ui_process_msg+0x264>)
 8012fde:	701a      	strb	r2, [r3, #0]
				}
				break;
 8012fe0:	e011      	b.n	8013006 <ui_process_msg+0x22e>

			default:
				itm_debug1(DBG_UI, "cmd?", m.cmd);
 8012fe2:	78bb      	ldrb	r3, [r7, #2]
 8012fe4:	461a      	mov	r2, r3
 8012fe6:	4919      	ldr	r1, [pc, #100]	; (801304c <ui_process_msg+0x274>)
 8012fe8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012fec:	f7ff fcba 	bl	8012964 <itm_debug1>
				break;
 8012ff0:	bf00      	nop
 8012ff2:	e009      	b.n	8013008 <ui_process_msg+0x230>
			}
		} else {
			itm_debug1(DBG_UI, "non ui msg", 0);
 8012ff4:	2200      	movs	r2, #0
 8012ff6:	4916      	ldr	r1, [pc, #88]	; (8013050 <ui_process_msg+0x278>)
 8012ff8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012ffc:	f7ff fcb2 	bl	8012964 <itm_debug1>
 8013000:	e6ed      	b.n	8012dde <ui_process_msg+0x6>
				break;
 8013002:	bf00      	nop
 8013004:	e6eb      	b.n	8012dde <ui_process_msg+0x6>
				break;
 8013006:	bf00      	nop
	for (;;) {
 8013008:	e6e9      	b.n	8012dde <ui_process_msg+0x6>
		if (rc) break;
 801300a:	bf00      	nop
 801300c:	e00c      	b.n	8013028 <ui_process_msg+0x250>
        	return;
 801300e:	bf00      	nop
 8013010:	e00a      	b.n	8013028 <ui_process_msg+0x250>
        	return;
 8013012:	bf00      	nop
 8013014:	e008      	b.n	8013028 <ui_process_msg+0x250>
			if (trnum != 0) break; // TODO
 8013016:	bf00      	nop
 8013018:	e006      	b.n	8013028 <ui_process_msg+0x250>
				return;
 801301a:	bf00      	nop
 801301c:	e004      	b.n	8013028 <ui_process_msg+0x250>
				return;
 801301e:	bf00      	nop
 8013020:	e002      	b.n	8013028 <ui_process_msg+0x250>
				return;
 8013022:	bf00      	nop
 8013024:	e000      	b.n	8013028 <ui_process_msg+0x250>
				return;
 8013026:	bf00      	nop
		}
	}
}
 8013028:	3720      	adds	r7, #32
 801302a:	46bd      	mov	sp, r7
 801302c:	bd80      	pop	{r7, pc}
 801302e:	bf00      	nop
 8013030:	080196fc 	.word	0x080196fc
 8013034:	200051ed 	.word	0x200051ed
 8013038:	200051ee 	.word	0x200051ee
 801303c:	200051ec 	.word	0x200051ec
 8013040:	08019700 	.word	0x08019700
 8013044:	08019710 	.word	0x08019710
 8013048:	08019718 	.word	0x08019718
 801304c:	0801971c 	.word	0x0801971c
 8013050:	08019724 	.word	0x08019724

08013054 <ui_process_msg_off>:
// ---------------------------------



static void ui_process_msg_off(void)
{
 8013054:	b580      	push	{r7, lr}
 8013056:	b084      	sub	sp, #16
 8013058:	af00      	add	r7, sp, #0
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_ui(&m);
 801305a:	463b      	mov	r3, r7
 801305c:	4618      	mov	r0, r3
 801305e:	f7ff fcb7 	bl	80129d0 <mqf_read_to_ui>
 8013062:	60f8      	str	r0, [r7, #12]
		if (rc) break;
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d109      	bne.n	801307e <ui_process_msg_off+0x2a>

		switch(m.cmd) {
 801306a:	78bb      	ldrb	r3, [r7, #2]
 801306c:	2bfc      	cmp	r3, #252	; 0xfc
 801306e:	d000      	beq.n	8013072 <ui_process_msg_off+0x1e>
		default:
			break;
 8013070:	e004      	b.n	801307c <ui_process_msg_off+0x28>
        case CMD_SETRUN_MODE:
            run_mode = m.v1u;
 8013072:	88bb      	ldrh	r3, [r7, #4]
 8013074:	b2da      	uxtb	r2, r3
 8013076:	4b04      	ldr	r3, [pc, #16]	; (8013088 <ui_process_msg_off+0x34>)
 8013078:	701a      	strb	r2, [r3, #0]
 801307a:	e001      	b.n	8013080 <ui_process_msg_off+0x2c>
	for (;;) {
 801307c:	e7ed      	b.n	801305a <ui_process_msg_off+0x6>
		if (rc) break;
 801307e:	bf00      	nop
            return;
            break;
		}
	}
}
 8013080:	3710      	adds	r7, #16
 8013082:	46bd      	mov	sp, r7
 8013084:	bd80      	pop	{r7, pc}
 8013086:	bf00      	nop
 8013088:	200051ed 	.word	0x200051ed

0801308c <ihm_runtick_off>:

void ihm_runtick_off(int init)
{
 801308c:	b580      	push	{r7, lr}
 801308e:	b084      	sub	sp, #16
 8013090:	af00      	add	r7, sp, #0
 8013092:	6078      	str	r0, [r7, #4]
	needsrefresh_mask = 0;
 8013094:	4b20      	ldr	r3, [pc, #128]	; (8013118 <ihm_runtick_off+0x8c>)
 8013096:	2200      	movs	r2, #0
 8013098:	701a      	strb	r2, [r3, #0]

	if (init) {
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d01e      	beq.n	80130de <ihm_runtick_off+0x52>
		itm_debug1(DBG_UI, "UI init", 0);
 80130a0:	2200      	movs	r2, #0
 80130a2:	491e      	ldr	r1, [pc, #120]	; (801311c <ihm_runtick_off+0x90>)
 80130a4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80130a8:	f7ff fc5c 	bl	8012964 <itm_debug1>
		ihm_setlayout(0, LAYOUT_OFF);
 80130ac:	2104      	movs	r1, #4
 80130ae:	2000      	movs	r0, #0
 80130b0:	f7fe fe5e 	bl	8011d70 <ihm_setlayout>
		for (int i = 0; i<DISP_MAX_REGS; i++) {
 80130b4:	2300      	movs	r3, #0
 80130b6:	60fb      	str	r3, [r7, #12]
 80130b8:	e007      	b.n	80130ca <ihm_runtick_off+0x3e>
			ihm_setvar(0, i, 0);
 80130ba:	2200      	movs	r2, #0
 80130bc:	68f9      	ldr	r1, [r7, #12]
 80130be:	2000      	movs	r0, #0
 80130c0:	f7fe feac 	bl	8011e1c <ihm_setvar>
		for (int i = 0; i<DISP_MAX_REGS; i++) {
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	3301      	adds	r3, #1
 80130c8:	60fb      	str	r3, [r7, #12]
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	2b0f      	cmp	r3, #15
 80130ce:	ddf4      	ble.n	80130ba <ihm_runtick_off+0x2e>
		}
		SET_NEEDSREFRESH(0);
 80130d0:	4b11      	ldr	r3, [pc, #68]	; (8013118 <ihm_runtick_off+0x8c>)
 80130d2:	781b      	ldrb	r3, [r3, #0]
 80130d4:	f043 0301 	orr.w	r3, r3, #1
 80130d8:	b2da      	uxtb	r2, r3
 80130da:	4b0f      	ldr	r3, [pc, #60]	; (8013118 <ihm_runtick_off+0x8c>)
 80130dc:	701a      	strb	r2, [r3, #0]
	}
	// process messages --------------
	ui_process_msg_off();
 80130de:	f7ff ffb9 	bl	8013054 <ui_process_msg_off>

	// update displays ---------------
	for (int i=0; i<MAX_DISP; i++) {
 80130e2:	2300      	movs	r3, #0
 80130e4:	60bb      	str	r3, [r7, #8]
 80130e6:	e010      	b.n	801310a <ihm_runtick_off+0x7e>
		if (NEEDSREFRESH(i)) {
 80130e8:	4b0b      	ldr	r3, [pc, #44]	; (8013118 <ihm_runtick_off+0x8c>)
 80130ea:	781b      	ldrb	r3, [r3, #0]
 80130ec:	461a      	mov	r2, r3
 80130ee:	68bb      	ldr	r3, [r7, #8]
 80130f0:	fa42 f303 	asr.w	r3, r2, r3
 80130f4:	f003 0301 	and.w	r3, r3, #1
 80130f8:	b2db      	uxtb	r3, r3
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d002      	beq.n	8013104 <ihm_runtick_off+0x78>
			disp_layout(i);
 80130fe:	68b8      	ldr	r0, [r7, #8]
 8013100:	f7fe feca 	bl	8011e98 <disp_layout>
	for (int i=0; i<MAX_DISP; i++) {
 8013104:	68bb      	ldr	r3, [r7, #8]
 8013106:	3301      	adds	r3, #1
 8013108:	60bb      	str	r3, [r7, #8]
 801310a:	68bb      	ldr	r3, [r7, #8]
 801310c:	2b00      	cmp	r3, #0
 801310e:	ddeb      	ble.n	80130e8 <ihm_runtick_off+0x5c>
		}
	}
}
 8013110:	bf00      	nop
 8013112:	3710      	adds	r7, #16
 8013114:	46bd      	mov	sp, r7
 8013116:	bd80      	pop	{r7, pc}
 8013118:	200051ec 	.word	0x200051ec
 801311c:	080196ec 	.word	0x080196ec

08013120 <ihm_runtick_testcanton>:
// ---------------------------------
// run mode Cantontest
// ---------------------------------

static void ihm_runtick_testcanton(int f)
{
 8013120:	b580      	push	{r7, lr}
 8013122:	b082      	sub	sp, #8
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]
	ihm_runtick_off(f);
 8013128:	6878      	ldr	r0, [r7, #4]
 801312a:	f7ff ffaf 	bl	801308c <ihm_runtick_off>
}
 801312e:	bf00      	nop
 8013130:	3708      	adds	r7, #8
 8013132:	46bd      	mov	sp, r7
 8013134:	bd80      	pop	{r7, pc}
	...

08013138 <ihm_runtick_detect1>:
// ---------------------------------

static void ui_process_msg_d1(void);

static void ihm_runtick_detect1(int init)
{
 8013138:	b580      	push	{r7, lr}
 801313a:	b08a      	sub	sp, #40	; 0x28
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
	static int voltidx = 7;
	needsrefresh_mask = 0;
 8013140:	4b4f      	ldr	r3, [pc, #316]	; (8013280 <ihm_runtick_detect1+0x148>)
 8013142:	2200      	movs	r2, #0
 8013144:	701a      	strb	r2, [r3, #0]

	if (init) {
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d049      	beq.n	80131e0 <ihm_runtick_detect1+0xa8>
		voltidx = 7;
 801314c:	4b4d      	ldr	r3, [pc, #308]	; (8013284 <ihm_runtick_detect1+0x14c>)
 801314e:	2207      	movs	r2, #7
 8013150:	601a      	str	r2, [r3, #0]
		osDelay(500); // ugly : make sure other tasklet are ready. TODO : fix this
 8013152:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8013156:	f7f9 fe6b 	bl	800ce30 <osDelay>
		itm_debug1(DBG_UI, "UI init", 0);
 801315a:	2200      	movs	r2, #0
 801315c:	494a      	ldr	r1, [pc, #296]	; (8013288 <ihm_runtick_detect1+0x150>)
 801315e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8013162:	f7ff fbff 	bl	8012964 <itm_debug1>
		ihm_setlayout(0, LAYOUT_DETECT1);
 8013166:	2105      	movs	r1, #5
 8013168:	2000      	movs	r0, #0
 801316a:	f7fe fe01 	bl	8011d70 <ihm_setlayout>
		for (int i = 0; i<DISP_MAX_REGS; i++) {
 801316e:	2300      	movs	r3, #0
 8013170:	627b      	str	r3, [r7, #36]	; 0x24
 8013172:	e007      	b.n	8013184 <ihm_runtick_detect1+0x4c>
			ihm_setvar(0, i, 0);
 8013174:	2200      	movs	r2, #0
 8013176:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013178:	2000      	movs	r0, #0
 801317a:	f7fe fe4f 	bl	8011e1c <ihm_setvar>
		for (int i = 0; i<DISP_MAX_REGS; i++) {
 801317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013180:	3301      	adds	r3, #1
 8013182:	627b      	str	r3, [r7, #36]	; 0x24
 8013184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013186:	2b0f      	cmp	r3, #15
 8013188:	ddf4      	ble.n	8013174 <ihm_runtick_detect1+0x3c>
		}
		ihm_setvar(0, 9, voltidx);
 801318a:	4b3e      	ldr	r3, [pc, #248]	; (8013284 <ihm_runtick_detect1+0x14c>)
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	b29b      	uxth	r3, r3
 8013190:	461a      	mov	r2, r3
 8013192:	2109      	movs	r1, #9
 8013194:	2000      	movs	r0, #0
 8013196:	f7fe fe41 	bl	8011e1c <ihm_setvar>
		SET_NEEDSREFRESH(0);
 801319a:	4b39      	ldr	r3, [pc, #228]	; (8013280 <ihm_runtick_detect1+0x148>)
 801319c:	781b      	ldrb	r3, [r3, #0]
 801319e:	f043 0301 	orr.w	r3, r3, #1
 80131a2:	b2da      	uxtb	r2, r3
 80131a4:	4b36      	ldr	r3, [pc, #216]	; (8013280 <ihm_runtick_detect1+0x148>)
 80131a6:	701a      	strb	r2, [r3, #0]
		msg_64_t m;
		m.from = MA_UI(1);
 80131a8:	2381      	movs	r3, #129	; 0x81
 80131aa:	747b      	strb	r3, [r7, #17]
		m.to = MA_CANTON(0,1);
 80131ac:	2301      	movs	r3, #1
 80131ae:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_BEMF_ON;
 80131b0:	2340      	movs	r3, #64	; 0x40
 80131b2:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_ui(&m);
 80131b4:	f107 0310 	add.w	r3, r7, #16
 80131b8:	4618      	mov	r0, r3
 80131ba:	f7ff fc19 	bl	80129f0 <mqf_write_from_ui>

		m.from = MA_UI(1);
 80131be:	2381      	movs	r3, #129	; 0x81
 80131c0:	747b      	strb	r3, [r7, #17]
		m.to = MA_CANTON(0,1);
 80131c2:	2301      	movs	r3, #1
 80131c4:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_SETVPWM;
 80131c6:	2301      	movs	r3, #1
 80131c8:	74bb      	strb	r3, [r7, #18]
		m.v1u = voltidx;
 80131ca:	4b2e      	ldr	r3, [pc, #184]	; (8013284 <ihm_runtick_detect1+0x14c>)
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	b29b      	uxth	r3, r3
 80131d0:	82bb      	strh	r3, [r7, #20]
		m.v2 = 0;
 80131d2:	2300      	movs	r3, #0
 80131d4:	82fb      	strh	r3, [r7, #22]
		mqf_write_from_ui(&m);
 80131d6:	f107 0310 	add.w	r3, r7, #16
 80131da:	4618      	mov	r0, r3
 80131dc:	f7ff fc08 	bl	80129f0 <mqf_write_from_ui>
	}
	// rotary encoder
	static  int16_t rotpos = 0x7FFF;
	int16_t p = get_srotary(&htim4);
 80131e0:	482a      	ldr	r0, [pc, #168]	; (801328c <ihm_runtick_detect1+0x154>)
 80131e2:	f7ff fc15 	bl	8012a10 <get_srotary>
 80131e6:	4603      	mov	r3, r0
 80131e8:	83fb      	strh	r3, [r7, #30]
	if (p != rotpos) {
 80131ea:	4b29      	ldr	r3, [pc, #164]	; (8013290 <ihm_runtick_detect1+0x158>)
 80131ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80131f0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80131f4:	429a      	cmp	r2, r3
 80131f6:	d025      	beq.n	8013244 <ihm_runtick_detect1+0x10c>
		// pos changed
		rotpos = p;
 80131f8:	4a25      	ldr	r2, [pc, #148]	; (8013290 <ihm_runtick_detect1+0x158>)
 80131fa:	8bfb      	ldrh	r3, [r7, #30]
 80131fc:	8013      	strh	r3, [r2, #0]
		ihm_setvar(0, 8, rotpos);
 80131fe:	4b24      	ldr	r3, [pc, #144]	; (8013290 <ihm_runtick_detect1+0x158>)
 8013200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013204:	b29b      	uxth	r3, r3
 8013206:	461a      	mov	r2, r3
 8013208:	2108      	movs	r1, #8
 801320a:	2000      	movs	r0, #0
 801320c:	f7fe fe06 	bl	8011e1c <ihm_setvar>
		SET_NEEDSREFRESH(0);
 8013210:	4b1b      	ldr	r3, [pc, #108]	; (8013280 <ihm_runtick_detect1+0x148>)
 8013212:	781b      	ldrb	r3, [r3, #0]
 8013214:	f043 0301 	orr.w	r3, r3, #1
 8013218:	b2da      	uxtb	r2, r3
 801321a:	4b19      	ldr	r3, [pc, #100]	; (8013280 <ihm_runtick_detect1+0x148>)
 801321c:	701a      	strb	r2, [r3, #0]

		msg_64_t m;
		m.from = MA_UI(1);
 801321e:	2381      	movs	r3, #129	; 0x81
 8013220:	727b      	strb	r3, [r7, #9]
		m.to = MA_CANTON(0,1);
 8013222:	2301      	movs	r3, #1
 8013224:	723b      	strb	r3, [r7, #8]
		m.cmd = CMD_SETVPWM;
 8013226:	2301      	movs	r3, #1
 8013228:	72bb      	strb	r3, [r7, #10]
		m.v1u = voltidx;
 801322a:	4b16      	ldr	r3, [pc, #88]	; (8013284 <ihm_runtick_detect1+0x14c>)
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	b29b      	uxth	r3, r3
 8013230:	81bb      	strh	r3, [r7, #12]
		m.v2 = rotpos;
 8013232:	4b17      	ldr	r3, [pc, #92]	; (8013290 <ihm_runtick_detect1+0x158>)
 8013234:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013238:	81fb      	strh	r3, [r7, #14]
		mqf_write_from_ui(&m);
 801323a:	f107 0308 	add.w	r3, r7, #8
 801323e:	4618      	mov	r0, r3
 8013240:	f7ff fbd6 	bl	80129f0 <mqf_write_from_ui>

	}
	// process messages --------------
	ui_process_msg_d1();
 8013244:	f000 f826 	bl	8013294 <ui_process_msg_d1>

	// update displays ---------------
	for (int i=0; i<MAX_DISP; i++) {
 8013248:	2300      	movs	r3, #0
 801324a:	623b      	str	r3, [r7, #32]
 801324c:	e010      	b.n	8013270 <ihm_runtick_detect1+0x138>
		if (NEEDSREFRESH(i)) {
 801324e:	4b0c      	ldr	r3, [pc, #48]	; (8013280 <ihm_runtick_detect1+0x148>)
 8013250:	781b      	ldrb	r3, [r3, #0]
 8013252:	461a      	mov	r2, r3
 8013254:	6a3b      	ldr	r3, [r7, #32]
 8013256:	fa42 f303 	asr.w	r3, r2, r3
 801325a:	f003 0301 	and.w	r3, r3, #1
 801325e:	b2db      	uxtb	r3, r3
 8013260:	2b00      	cmp	r3, #0
 8013262:	d002      	beq.n	801326a <ihm_runtick_detect1+0x132>
			disp_layout(i);
 8013264:	6a38      	ldr	r0, [r7, #32]
 8013266:	f7fe fe17 	bl	8011e98 <disp_layout>
	for (int i=0; i<MAX_DISP; i++) {
 801326a:	6a3b      	ldr	r3, [r7, #32]
 801326c:	3301      	adds	r3, #1
 801326e:	623b      	str	r3, [r7, #32]
 8013270:	6a3b      	ldr	r3, [r7, #32]
 8013272:	2b00      	cmp	r3, #0
 8013274:	ddeb      	ble.n	801324e <ihm_runtick_detect1+0x116>
		}
	}
}
 8013276:	bf00      	nop
 8013278:	3728      	adds	r7, #40	; 0x28
 801327a:	46bd      	mov	sp, r7
 801327c:	bd80      	pop	{r7, pc}
 801327e:	bf00      	nop
 8013280:	200051ec 	.word	0x200051ec
 8013284:	2000022c 	.word	0x2000022c
 8013288:	080196ec 	.word	0x080196ec
 801328c:	20005d54 	.word	0x20005d54
 8013290:	20000230 	.word	0x20000230

08013294 <ui_process_msg_d1>:



static void ui_process_msg_d1(void)
{
 8013294:	b580      	push	{r7, lr}
 8013296:	b084      	sub	sp, #16
 8013298:	af00      	add	r7, sp, #0
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_ui(&m);
 801329a:	463b      	mov	r3, r7
 801329c:	4618      	mov	r0, r3
 801329e:	f7ff fb97 	bl	80129d0 <mqf_read_to_ui>
 80132a2:	60f8      	str	r0, [r7, #12]
		if (rc) break;
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d13c      	bne.n	8013324 <ui_process_msg_d1+0x90>

		switch(m.cmd) {
 80132aa:	78bb      	ldrb	r3, [r7, #2]
 80132ac:	2b27      	cmp	r3, #39	; 0x27
 80132ae:	d021      	beq.n	80132f4 <ui_process_msg_d1+0x60>
 80132b0:	2bfc      	cmp	r3, #252	; 0xfc
 80132b2:	d002      	beq.n	80132ba <ui_process_msg_d1+0x26>
 80132b4:	2b03      	cmp	r3, #3
 80132b6:	d005      	beq.n	80132c4 <ui_process_msg_d1+0x30>
 80132b8:	e02c      	b.n	8013314 <ui_process_msg_d1+0x80>

        case CMD_SETRUN_MODE:
            run_mode = m.v1u;
 80132ba:	88bb      	ldrh	r3, [r7, #4]
 80132bc:	b2da      	uxtb	r2, r3
 80132be:	4b1b      	ldr	r3, [pc, #108]	; (801332c <ui_process_msg_d1+0x98>)
 80132c0:	701a      	strb	r2, [r3, #0]
 80132c2:	e030      	b.n	8013326 <ui_process_msg_d1+0x92>
            return;
            break;


        case CMD_BEMF_NOTIF:
    		ihm_setvar(0, 5, m.v2); //Von
 80132c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80132c8:	b29b      	uxth	r3, r3
 80132ca:	461a      	mov	r2, r3
 80132cc:	2105      	movs	r1, #5
 80132ce:	2000      	movs	r0, #0
 80132d0:	f7fe fda4 	bl	8011e1c <ihm_setvar>
    		ihm_setvar(0, 6, m.v1); //Voff
 80132d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80132d8:	b29b      	uxth	r3, r3
 80132da:	461a      	mov	r2, r3
 80132dc:	2106      	movs	r1, #6
 80132de:	2000      	movs	r0, #0
 80132e0:	f7fe fd9c 	bl	8011e1c <ihm_setvar>
    		SET_NEEDSREFRESH(0);
 80132e4:	4b12      	ldr	r3, [pc, #72]	; (8013330 <ui_process_msg_d1+0x9c>)
 80132e6:	781b      	ldrb	r3, [r3, #0]
 80132e8:	f043 0301 	orr.w	r3, r3, #1
 80132ec:	b2da      	uxtb	r2, r3
 80132ee:	4b10      	ldr	r3, [pc, #64]	; (8013330 <ui_process_msg_d1+0x9c>)
 80132f0:	701a      	strb	r2, [r3, #0]
    		break;
 80132f2:	e016      	b.n	8013322 <ui_process_msg_d1+0x8e>
        case CMD_INA3221_VAL1:
        	ihm_setvar(0, 7, m.v1);
 80132f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80132f8:	b29b      	uxth	r3, r3
 80132fa:	461a      	mov	r2, r3
 80132fc:	2107      	movs	r1, #7
 80132fe:	2000      	movs	r0, #0
 8013300:	f7fe fd8c 	bl	8011e1c <ihm_setvar>
        	SET_NEEDSREFRESH(0);
 8013304:	4b0a      	ldr	r3, [pc, #40]	; (8013330 <ui_process_msg_d1+0x9c>)
 8013306:	781b      	ldrb	r3, [r3, #0]
 8013308:	f043 0301 	orr.w	r3, r3, #1
 801330c:	b2da      	uxtb	r2, r3
 801330e:	4b08      	ldr	r3, [pc, #32]	; (8013330 <ui_process_msg_d1+0x9c>)
 8013310:	701a      	strb	r2, [r3, #0]
        	break;
 8013312:	e006      	b.n	8013322 <ui_process_msg_d1+0x8e>

        default:
        	itm_debug1(DBG_ERR|DBG_UI, "unhndld msg", m.cmd);
 8013314:	78bb      	ldrb	r3, [r7, #2]
 8013316:	461a      	mov	r2, r3
 8013318:	4906      	ldr	r1, [pc, #24]	; (8013334 <ui_process_msg_d1+0xa0>)
 801331a:	4807      	ldr	r0, [pc, #28]	; (8013338 <ui_process_msg_d1+0xa4>)
 801331c:	f7ff fb22 	bl	8012964 <itm_debug1>
        	break;
 8013320:	bf00      	nop
	for (;;) {
 8013322:	e7ba      	b.n	801329a <ui_process_msg_d1+0x6>
		if (rc) break;
 8013324:	bf00      	nop
		}
	}
}
 8013326:	3710      	adds	r7, #16
 8013328:	46bd      	mov	sp, r7
 801332a:	bd80      	pop	{r7, pc}
 801332c:	200051ed 	.word	0x200051ed
 8013330:	200051ec 	.word	0x200051ec
 8013334:	08019730 	.word	0x08019730
 8013338:	80000800 	.word	0x80000800

0801333c <ihm_runtick_detect>:
// ---------------------------------
// run mode detect
// ---------------------------------

static void ihm_runtick_detect(int f)
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b082      	sub	sp, #8
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
	ihm_runtick_off(f);
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f7ff fea1 	bl	801308c <ihm_runtick_off>
}
 801334a:	bf00      	nop
 801334c:	3708      	adds	r7, #8
 801334e:	46bd      	mov	sp, r7
 8013350:	bd80      	pop	{r7, pc}
	...

08013354 <itm_debug1>:
{
 8013354:	b580      	push	{r7, lr}
 8013356:	b086      	sub	sp, #24
 8013358:	af02      	add	r7, sp, #8
 801335a:	60f8      	str	r0, [r7, #12]
 801335c:	60b9      	str	r1, [r7, #8]
 801335e:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8013360:	4b08      	ldr	r3, [pc, #32]	; (8013384 <itm_debug1+0x30>)
 8013362:	681a      	ldr	r2, [r3, #0]
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	4013      	ands	r3, r2
 8013368:	2b00      	cmp	r3, #0
 801336a:	d007      	beq.n	801337c <itm_debug1+0x28>
 801336c:	2301      	movs	r3, #1
 801336e:	9300      	str	r3, [sp, #0]
 8013370:	2300      	movs	r3, #0
 8013372:	2200      	movs	r2, #0
 8013374:	6879      	ldr	r1, [r7, #4]
 8013376:	68b8      	ldr	r0, [r7, #8]
 8013378:	f005 fd76 	bl	8018e68 <_itm_debug3>
}
 801337c:	bf00      	nop
 801337e:	3710      	adds	r7, #16
 8013380:	46bd      	mov	sp, r7
 8013382:	bd80      	pop	{r7, pc}
 8013384:	200005a4 	.word	0x200005a4

08013388 <itm_debug2>:
{
 8013388:	b580      	push	{r7, lr}
 801338a:	b086      	sub	sp, #24
 801338c:	af02      	add	r7, sp, #8
 801338e:	60f8      	str	r0, [r7, #12]
 8013390:	60b9      	str	r1, [r7, #8]
 8013392:	607a      	str	r2, [r7, #4]
 8013394:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8013396:	4b09      	ldr	r3, [pc, #36]	; (80133bc <itm_debug2+0x34>)
 8013398:	681a      	ldr	r2, [r3, #0]
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	4013      	ands	r3, r2
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d007      	beq.n	80133b2 <itm_debug2+0x2a>
 80133a2:	2302      	movs	r3, #2
 80133a4:	9300      	str	r3, [sp, #0]
 80133a6:	2300      	movs	r3, #0
 80133a8:	683a      	ldr	r2, [r7, #0]
 80133aa:	6879      	ldr	r1, [r7, #4]
 80133ac:	68b8      	ldr	r0, [r7, #8]
 80133ae:	f005 fd5b 	bl	8018e68 <_itm_debug3>
}
 80133b2:	bf00      	nop
 80133b4:	3710      	adds	r7, #16
 80133b6:	46bd      	mov	sp, r7
 80133b8:	bd80      	pop	{r7, pc}
 80133ba:	bf00      	nop
 80133bc:	200005a4 	.word	0x200005a4

080133c0 <itm_debug3>:
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b086      	sub	sp, #24
 80133c4:	af02      	add	r7, sp, #8
 80133c6:	60f8      	str	r0, [r7, #12]
 80133c8:	60b9      	str	r1, [r7, #8]
 80133ca:	607a      	str	r2, [r7, #4]
 80133cc:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 80133ce:	4b09      	ldr	r3, [pc, #36]	; (80133f4 <itm_debug3+0x34>)
 80133d0:	681a      	ldr	r2, [r3, #0]
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	4013      	ands	r3, r2
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d007      	beq.n	80133ea <itm_debug3+0x2a>
 80133da:	2303      	movs	r3, #3
 80133dc:	9300      	str	r3, [sp, #0]
 80133de:	69bb      	ldr	r3, [r7, #24]
 80133e0:	683a      	ldr	r2, [r7, #0]
 80133e2:	6879      	ldr	r1, [r7, #4]
 80133e4:	68b8      	ldr	r0, [r7, #8]
 80133e6:	f005 fd3f 	bl	8018e68 <_itm_debug3>
}
 80133ea:	bf00      	nop
 80133ec:	3710      	adds	r7, #16
 80133ee:	46bd      	mov	sp, r7
 80133f0:	bd80      	pop	{r7, pc}
 80133f2:	bf00      	nop
 80133f4:	200005a4 	.word	0x200005a4

080133f8 <mqf_read_to_ctrl>:
/* from upper */
#define CMD_SET_TARGET_SPEED 0x10
#define CMD_SET_C1_C2		 0x11


LFMQUEUE_DEF_H(to_ctrl, msg_64_t)
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b082      	sub	sp, #8
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	6078      	str	r0, [r7, #4]
 8013400:	6879      	ldr	r1, [r7, #4]
 8013402:	4804      	ldr	r0, [pc, #16]	; (8013414 <mqf_read_to_ctrl+0x1c>)
 8013404:	f005 feb0 	bl	8019168 <mqf_read>
 8013408:	4603      	mov	r3, r0
 801340a:	4618      	mov	r0, r3
 801340c:	3708      	adds	r7, #8
 801340e:	46bd      	mov	sp, r7
 8013410:	bd80      	pop	{r7, pc}
 8013412:	bf00      	nop
 8013414:	20000548 	.word	0x20000548

08013418 <mqf_write_from_ctrl>:
LFMQUEUE_DEF_H(from_ctrl, msg_64_t)
 8013418:	b580      	push	{r7, lr}
 801341a:	b082      	sub	sp, #8
 801341c:	af00      	add	r7, sp, #0
 801341e:	6078      	str	r0, [r7, #4]
 8013420:	6879      	ldr	r1, [r7, #4]
 8013422:	4804      	ldr	r0, [pc, #16]	; (8013434 <mqf_write_from_ctrl+0x1c>)
 8013424:	f005 fe26 	bl	8019074 <mqf_write>
 8013428:	4603      	mov	r3, r0
 801342a:	4618      	mov	r0, r3
 801342c:	3708      	adds	r7, #8
 801342e:	46bd      	mov	sp, r7
 8013430:	bd80      	pop	{r7, pc}
 8013432:	bf00      	nop
 8013434:	20000554 	.word	0x20000554

08013438 <_sub_addr_to_sub_num>:
 l2r : (sw t 2) (blk 5.1) (blk 5.2)
 */
#include "../msg/trainmsg.h"

static inline int _sub_addr_to_sub_num(uint8_t addr, uint8_t sub)
{
 8013438:	b480      	push	{r7}
 801343a:	b085      	sub	sp, #20
 801343c:	af00      	add	r7, sp, #0
 801343e:	4603      	mov	r3, r0
 8013440:	460a      	mov	r2, r1
 8013442:	71fb      	strb	r3, [r7, #7]
 8013444:	4613      	mov	r3, r2
 8013446:	71bb      	strb	r3, [r7, #6]
    int brd = MA_2_BOARD(addr);
 8013448:	79fb      	ldrb	r3, [r7, #7]
 801344a:	10db      	asrs	r3, r3, #3
 801344c:	f003 0307 	and.w	r3, r3, #7
 8013450:	60fb      	str	r3, [r7, #12]
    int n = brd * 12 + sub;
 8013452:	68fa      	ldr	r2, [r7, #12]
 8013454:	4613      	mov	r3, r2
 8013456:	005b      	lsls	r3, r3, #1
 8013458:	4413      	add	r3, r2
 801345a:	009b      	lsls	r3, r3, #2
 801345c:	461a      	mov	r2, r3
 801345e:	79bb      	ldrb	r3, [r7, #6]
 8013460:	4413      	add	r3, r2
 8013462:	60bb      	str	r3, [r7, #8]
    return n;
 8013464:	68bb      	ldr	r3, [r7, #8]
}
 8013466:	4618      	mov	r0, r3
 8013468:	3714      	adds	r7, #20
 801346a:	46bd      	mov	sp, r7
 801346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013470:	4770      	bx	lr

08013472 <_blk_addr_to_blk_num>:

static inline int _blk_addr_to_blk_num(uint8_t addr)
{
 8013472:	b480      	push	{r7}
 8013474:	b085      	sub	sp, #20
 8013476:	af00      	add	r7, sp, #0
 8013478:	4603      	mov	r3, r0
 801347a:	71fb      	strb	r3, [r7, #7]
    int brd = MA_2_BOARD(addr);
 801347c:	79fb      	ldrb	r3, [r7, #7]
 801347e:	10db      	asrs	r3, r3, #3
 8013480:	f003 0307 	and.w	r3, r3, #7
 8013484:	60fb      	str	r3, [r7, #12]
    int nc = addr & 0x07;
 8013486:	79fb      	ldrb	r3, [r7, #7]
 8013488:	f003 0307 	and.w	r3, r3, #7
 801348c:	60bb      	str	r3, [r7, #8]
    return brd*6+nc;
 801348e:	68fa      	ldr	r2, [r7, #12]
 8013490:	4613      	mov	r3, r2
 8013492:	005b      	lsls	r3, r3, #1
 8013494:	4413      	add	r3, r2
 8013496:	005b      	lsls	r3, r3, #1
 8013498:	461a      	mov	r2, r3
 801349a:	68bb      	ldr	r3, [r7, #8]
 801349c:	4413      	add	r3, r2
}
 801349e:	4618      	mov	r0, r3
 80134a0:	3714      	adds	r7, #20
 80134a2:	46bd      	mov	sp, r7
 80134a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a8:	4770      	bx	lr
	...

080134ac <_blk_num_to_blk_addr>:
    int brd = subnum/12;
    return MA_CANTON(brd, 0);
}

static uint8_t _blk_num_to_blk_addr(int blknum)
{
 80134ac:	b480      	push	{r7}
 80134ae:	b085      	sub	sp, #20
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	6078      	str	r0, [r7, #4]
	if (blknum == -1) return 0xFF;
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80134ba:	d101      	bne.n	80134c0 <_blk_num_to_blk_addr+0x14>
 80134bc:	23ff      	movs	r3, #255	; 0xff
 80134be:	e020      	b.n	8013502 <_blk_num_to_blk_addr+0x56>
    int nc = blknum % 6;
 80134c0:	687a      	ldr	r2, [r7, #4]
 80134c2:	4b13      	ldr	r3, [pc, #76]	; (8013510 <_blk_num_to_blk_addr+0x64>)
 80134c4:	fb83 3102 	smull	r3, r1, r3, r2
 80134c8:	17d3      	asrs	r3, r2, #31
 80134ca:	1ac9      	subs	r1, r1, r3
 80134cc:	460b      	mov	r3, r1
 80134ce:	005b      	lsls	r3, r3, #1
 80134d0:	440b      	add	r3, r1
 80134d2:	005b      	lsls	r3, r3, #1
 80134d4:	1ad3      	subs	r3, r2, r3
 80134d6:	60fb      	str	r3, [r7, #12]
    int brd = blknum/6;
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	4a0d      	ldr	r2, [pc, #52]	; (8013510 <_blk_num_to_blk_addr+0x64>)
 80134dc:	fb82 1203 	smull	r1, r2, r2, r3
 80134e0:	17db      	asrs	r3, r3, #31
 80134e2:	1ad3      	subs	r3, r2, r3
 80134e4:	60bb      	str	r3, [r7, #8]
    return MA_CANTON(brd, nc);
 80134e6:	68bb      	ldr	r3, [r7, #8]
 80134e8:	00db      	lsls	r3, r3, #3
 80134ea:	b25b      	sxtb	r3, r3
 80134ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80134f0:	b25a      	sxtb	r2, r3
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	b25b      	sxtb	r3, r3
 80134f6:	f003 0307 	and.w	r3, r3, #7
 80134fa:	b25b      	sxtb	r3, r3
 80134fc:	4313      	orrs	r3, r2
 80134fe:	b25b      	sxtb	r3, r3
 8013500:	b2db      	uxtb	r3, r3
}
 8013502:	4618      	mov	r0, r3
 8013504:	3714      	adds	r7, #20
 8013506:	46bd      	mov	sp, r7
 8013508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350c:	4770      	bx	lr
 801350e:	bf00      	nop
 8013510:	2aaaaaab 	.word	0x2aaaaaab

08013514 <blk_addr_for_sub_addr>:
int _next_sub_num_for_sub_num(int subnum, uint8_t left);

// ---------------------------------------------------------------------

static inline uint8_t blk_addr_for_sub_addr(uint8_t addr, uint8_t sub)
{
 8013514:	b580      	push	{r7, lr}
 8013516:	b084      	sub	sp, #16
 8013518:	af00      	add	r7, sp, #0
 801351a:	4603      	mov	r3, r0
 801351c:	460a      	mov	r2, r1
 801351e:	71fb      	strb	r3, [r7, #7]
 8013520:	4613      	mov	r3, r2
 8013522:	71bb      	strb	r3, [r7, #6]
    int n = _sub_addr_to_sub_num(addr, sub);
 8013524:	79ba      	ldrb	r2, [r7, #6]
 8013526:	79fb      	ldrb	r3, [r7, #7]
 8013528:	4611      	mov	r1, r2
 801352a:	4618      	mov	r0, r3
 801352c:	f7ff ff84 	bl	8013438 <_sub_addr_to_sub_num>
 8013530:	60f8      	str	r0, [r7, #12]
    n = _blk_num_for_sub_num(n);
 8013532:	68f8      	ldr	r0, [r7, #12]
 8013534:	f005 fb46 	bl	8018bc4 <_blk_num_for_sub_num>
 8013538:	60f8      	str	r0, [r7, #12]
    return _blk_num_to_blk_addr(n);
 801353a:	68f8      	ldr	r0, [r7, #12]
 801353c:	f7ff ffb6 	bl	80134ac <_blk_num_to_blk_addr>
 8013540:	4603      	mov	r3, r0
}
 8013542:	4618      	mov	r0, r3
 8013544:	3710      	adds	r7, #16
 8013546:	46bd      	mov	sp, r7
 8013548:	bd80      	pop	{r7, pc}
	...

0801354c <fatal>:

static void ctrl_reset(void);


static void fatal(void)
{
 801354c:	b580      	push	{r7, lr}
 801354e:	af00      	add	r7, sp, #0
	itm_debug1(DBG_ERR, "fatal", 0);
 8013550:	2200      	movs	r2, #0
 8013552:	4905      	ldr	r1, [pc, #20]	; (8013568 <fatal+0x1c>)
 8013554:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8013558:	f7ff fefc 	bl	8013354 <itm_debug1>
#ifdef TRAIN_SIMU
    abort();
#else
    for (;;) osDelay(1000);
 801355c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013560:	f7f9 fc66 	bl	800ce30 <osDelay>
 8013564:	e7fa      	b.n	801355c <fatal+0x10>
 8013566:	bf00      	nop
 8013568:	0801973c 	.word	0x0801973c

0801356c <ctrl_reset>:

static void check_behaviour(uint32_t tick);


static void ctrl_reset(void)
{
 801356c:	b480      	push	{r7}
 801356e:	af00      	add	r7, sp, #0
	//TODO
}
 8013570:	bf00      	nop
 8013572:	46bd      	mov	sp, r7
 8013574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013578:	4770      	bx	lr
	...

0801357c <set_state>:
// ----------------------------------------------------------------------------


static inline void set_state(int tidx, train_ctrl_t *tvar, train_state_t ns)
{
 801357c:	b580      	push	{r7, lr}
 801357e:	b086      	sub	sp, #24
 8013580:	af00      	add	r7, sp, #0
 8013582:	60f8      	str	r0, [r7, #12]
 8013584:	60b9      	str	r1, [r7, #8]
 8013586:	4613      	mov	r3, r2
 8013588:	71fb      	strb	r3, [r7, #7]
	switch (ns) {
 801358a:	79fb      	ldrb	r3, [r7, #7]
 801358c:	2b05      	cmp	r3, #5
 801358e:	d839      	bhi.n	8013604 <set_state+0x88>
 8013590:	a201      	add	r2, pc, #4	; (adr r2, 8013598 <set_state+0x1c>)
 8013592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013596:	bf00      	nop
 8013598:	080135b1 	.word	0x080135b1
 801359c:	080135bf 	.word	0x080135bf
 80135a0:	080135cd 	.word	0x080135cd
 80135a4:	080135db 	.word	0x080135db
 80135a8:	080135e9 	.word	0x080135e9
 80135ac:	080135f7 	.word	0x080135f7
	case train_off: 			itm_debug1(DBG_CTRL, "ST->OFF", tidx); break;
 80135b0:	68fa      	ldr	r2, [r7, #12]
 80135b2:	4927      	ldr	r1, [pc, #156]	; (8013650 <set_state+0xd4>)
 80135b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80135b8:	f7ff fecc 	bl	8013354 <itm_debug1>
 80135bc:	e02a      	b.n	8013614 <set_state+0x98>
	case train_running_c1: 		itm_debug1(DBG_CTRL, "ST->RC1", tidx); break;
 80135be:	68fa      	ldr	r2, [r7, #12]
 80135c0:	4924      	ldr	r1, [pc, #144]	; (8013654 <set_state+0xd8>)
 80135c2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80135c6:	f7ff fec5 	bl	8013354 <itm_debug1>
 80135ca:	e023      	b.n	8013614 <set_state+0x98>
	case train_running_c1c2: 	itm_debug1(DBG_CTRL, "ST->C1C2", tidx); break;
 80135cc:	68fa      	ldr	r2, [r7, #12]
 80135ce:	4922      	ldr	r1, [pc, #136]	; (8013658 <set_state+0xdc>)
 80135d0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80135d4:	f7ff febe 	bl	8013354 <itm_debug1>
 80135d8:	e01c      	b.n	8013614 <set_state+0x98>
	case train_station:			itm_debug1(DBG_CTRL, "ST->STA", tidx); break;
 80135da:	68fa      	ldr	r2, [r7, #12]
 80135dc:	491f      	ldr	r1, [pc, #124]	; (801365c <set_state+0xe0>)
 80135de:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80135e2:	f7ff feb7 	bl	8013354 <itm_debug1>
 80135e6:	e015      	b.n	8013614 <set_state+0x98>
	case train_blk_wait:	 	itm_debug1(DBG_CTRL, "ST->BLKW", tidx); break;
 80135e8:	68fa      	ldr	r2, [r7, #12]
 80135ea:	491d      	ldr	r1, [pc, #116]	; (8013660 <set_state+0xe4>)
 80135ec:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80135f0:	f7ff feb0 	bl	8013354 <itm_debug1>
 80135f4:	e00e      	b.n	8013614 <set_state+0x98>
	case train_end_of_track:	itm_debug1(DBG_CTRL, "ST->EOT", tidx); break;
 80135f6:	68fa      	ldr	r2, [r7, #12]
 80135f8:	491a      	ldr	r1, [pc, #104]	; (8013664 <set_state+0xe8>)
 80135fa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80135fe:	f7ff fea9 	bl	8013354 <itm_debug1>
 8013602:	e007      	b.n	8013614 <set_state+0x98>
	default: 					itm_debug2(DBG_CTRL, "ST->?", tidx, ns); break;
 8013604:	79fb      	ldrb	r3, [r7, #7]
 8013606:	68fa      	ldr	r2, [r7, #12]
 8013608:	4917      	ldr	r1, [pc, #92]	; (8013668 <set_state+0xec>)
 801360a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801360e:	f7ff febb 	bl	8013388 <itm_debug2>
 8013612:	bf00      	nop
	}
	tvar->_state = ns;
 8013614:	68bb      	ldr	r3, [r7, #8]
 8013616:	79fa      	ldrb	r2, [r7, #7]
 8013618:	705a      	strb	r2, [r3, #1]
	// notif UI
	msg_64_t m;
	m.from = MA_CONTROL_T(tidx);
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	b25b      	sxtb	r3, r3
 801361e:	f003 0307 	and.w	r3, r3, #7
 8013622:	b25b      	sxtb	r3, r3
 8013624:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8013628:	b25b      	sxtb	r3, r3
 801362a:	b2db      	uxtb	r3, r3
 801362c:	747b      	strb	r3, [r7, #17]
	m.to = MA_UI(1); // fix me
 801362e:	2381      	movs	r3, #129	; 0x81
 8013630:	743b      	strb	r3, [r7, #16]
	m.cmd = CMD_TRSTATE_NOTIF;
 8013632:	2326      	movs	r3, #38	; 0x26
 8013634:	74bb      	strb	r3, [r7, #18]
	m.v1u = ns;
 8013636:	79fb      	ldrb	r3, [r7, #7]
 8013638:	b29b      	uxth	r3, r3
 801363a:	82bb      	strh	r3, [r7, #20]
	mqf_write_from_ctrl(&m);
 801363c:	f107 0310 	add.w	r3, r7, #16
 8013640:	4618      	mov	r0, r3
 8013642:	f7ff fee9 	bl	8013418 <mqf_write_from_ctrl>
}
 8013646:	bf00      	nop
 8013648:	3718      	adds	r7, #24
 801364a:	46bd      	mov	sp, r7
 801364c:	bd80      	pop	{r7, pc}
 801364e:	bf00      	nop
 8013650:	08019744 	.word	0x08019744
 8013654:	0801974c 	.word	0x0801974c
 8013658:	08019754 	.word	0x08019754
 801365c:	08019760 	.word	0x08019760
 8013660:	08019768 	.word	0x08019768
 8013664:	08019774 	.word	0x08019774
 8013668:	0801977c 	.word	0x0801977c

0801366c <ctrl_set_mode>:
static void ctrl_set_mode(int trnum, train_mode_t mode)
{
 801366c:	b580      	push	{r7, lr}
 801366e:	b084      	sub	sp, #16
 8013670:	af00      	add	r7, sp, #0
 8013672:	6078      	str	r0, [r7, #4]
 8013674:	460b      	mov	r3, r1
 8013676:	70fb      	strb	r3, [r7, #3]
	itm_debug2(DBG_CTRL, "set mode", trnum, mode);
 8013678:	78fb      	ldrb	r3, [r7, #3]
 801367a:	687a      	ldr	r2, [r7, #4]
 801367c:	4919      	ldr	r1, [pc, #100]	; (80136e4 <ctrl_set_mode+0x78>)
 801367e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013682:	f7ff fe81 	bl	8013388 <itm_debug2>
	if (trctl[trnum]._mode == mode) return;
 8013686:	4918      	ldr	r1, [pc, #96]	; (80136e8 <ctrl_set_mode+0x7c>)
 8013688:	687a      	ldr	r2, [r7, #4]
 801368a:	4613      	mov	r3, r2
 801368c:	005b      	lsls	r3, r3, #1
 801368e:	4413      	add	r3, r2
 8013690:	00db      	lsls	r3, r3, #3
 8013692:	440b      	add	r3, r1
 8013694:	781b      	ldrb	r3, [r3, #0]
 8013696:	78fa      	ldrb	r2, [r7, #3]
 8013698:	429a      	cmp	r2, r3
 801369a:	d01f      	beq.n	80136dc <ctrl_set_mode+0x70>
	trctl[trnum]._mode = mode;
 801369c:	4912      	ldr	r1, [pc, #72]	; (80136e8 <ctrl_set_mode+0x7c>)
 801369e:	687a      	ldr	r2, [r7, #4]
 80136a0:	4613      	mov	r3, r2
 80136a2:	005b      	lsls	r3, r3, #1
 80136a4:	4413      	add	r3, r2
 80136a6:	00db      	lsls	r3, r3, #3
 80136a8:	440b      	add	r3, r1
 80136aa:	78fa      	ldrb	r2, [r7, #3]
 80136ac:	701a      	strb	r2, [r3, #0]
	// notif UI
	msg_64_t m;
	m.from = MA_CONTROL_T(trnum);
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	b25b      	sxtb	r3, r3
 80136b2:	f003 0307 	and.w	r3, r3, #7
 80136b6:	b25b      	sxtb	r3, r3
 80136b8:	f063 032f 	orn	r3, r3, #47	; 0x2f
 80136bc:	b25b      	sxtb	r3, r3
 80136be:	b2db      	uxtb	r3, r3
 80136c0:	727b      	strb	r3, [r7, #9]
	m.to = MA_UI(1); // fix me
 80136c2:	2381      	movs	r3, #129	; 0x81
 80136c4:	723b      	strb	r3, [r7, #8]
	m.cmd = CMD_TRMODE_NOTIF;
 80136c6:	2321      	movs	r3, #33	; 0x21
 80136c8:	72bb      	strb	r3, [r7, #10]
	m.v1u = mode;
 80136ca:	78fb      	ldrb	r3, [r7, #3]
 80136cc:	b29b      	uxth	r3, r3
 80136ce:	81bb      	strh	r3, [r7, #12]
	mqf_write_from_ctrl(&m);
 80136d0:	f107 0308 	add.w	r3, r7, #8
 80136d4:	4618      	mov	r0, r3
 80136d6:	f7ff fe9f 	bl	8013418 <mqf_write_from_ctrl>
 80136da:	e000      	b.n	80136de <ctrl_set_mode+0x72>
	if (trctl[trnum]._mode == mode) return;
 80136dc:	bf00      	nop
}
 80136de:	3710      	adds	r7, #16
 80136e0:	46bd      	mov	sp, r7
 80136e2:	bd80      	pop	{r7, pc}
 80136e4:	08019784 	.word	0x08019784
 80136e8:	200051f0 	.word	0x200051f0

080136ec <ctrl_init>:
}
*/


static void ctrl_init(void)
{
 80136ec:	b580      	push	{r7, lr}
 80136ee:	af00      	add	r7, sp, #0
	memset(trctl, 0, sizeof(train_ctrl_t)*NUM_TRAINS);
 80136f0:	22c0      	movs	r2, #192	; 0xc0
 80136f2:	2100      	movs	r1, #0
 80136f4:	481f      	ldr	r0, [pc, #124]	; (8013774 <ctrl_init+0x88>)
 80136f6:	f005 fdd8 	bl	80192aa <memset>
	ctrl_set_mode(0, train_manual);
 80136fa:	2101      	movs	r1, #1
 80136fc:	2000      	movs	r0, #0
 80136fe:	f7ff ffb5 	bl	801366c <ctrl_set_mode>
	ctrl_set_mode(1, train_auto);
 8013702:	2103      	movs	r1, #3
 8013704:	2001      	movs	r0, #1
 8013706:	f7ff ffb1 	bl	801366c <ctrl_set_mode>
	set_turnout(0, 0);
 801370a:	2100      	movs	r1, #0
 801370c:	2000      	movs	r0, #0
 801370e:	f001 f949 	bl	80149a4 <set_turnout>
	if ((1)) {
		trctl[0].canton1_addr = MA_CANTON(0, 1);//MA_CANTON(0, 1); // initial blk
 8013712:	4b18      	ldr	r3, [pc, #96]	; (8013774 <ctrl_init+0x88>)
 8013714:	2201      	movs	r2, #1
 8013716:	715a      	strb	r2, [r3, #5]
		trctl[0].canton2_addr = 0xFF;
 8013718:	4b16      	ldr	r3, [pc, #88]	; (8013774 <ctrl_init+0x88>)
 801371a:	22ff      	movs	r2, #255	; 0xff
 801371c:	719a      	strb	r2, [r3, #6]
		trctl[0]._dir = 0;
 801371e:	4b15      	ldr	r3, [pc, #84]	; (8013774 <ctrl_init+0x88>)
 8013720:	2200      	movs	r2, #0
 8013722:	711a      	strb	r2, [r3, #4]
		trctl[0].desired_speed = 0;
 8013724:	4b13      	ldr	r3, [pc, #76]	; (8013774 <ctrl_init+0x88>)
 8013726:	2200      	movs	r2, #0
 8013728:	815a      	strh	r2, [r3, #10]
		trctl[0]._target_speed = 0;
 801372a:	4b12      	ldr	r3, [pc, #72]	; (8013774 <ctrl_init+0x88>)
 801372c:	2200      	movs	r2, #0
 801372e:	805a      	strh	r2, [r3, #2]
		set_state(0, &trctl[0], train_station);
 8013730:	2203      	movs	r2, #3
 8013732:	4910      	ldr	r1, [pc, #64]	; (8013774 <ctrl_init+0x88>)
 8013734:	2000      	movs	r0, #0
 8013736:	f7ff ff21 	bl	801357c <set_state>
		set_block_addr_occupency(trctl[0].canton1_addr, BLK_OCC_STOP);
 801373a:	4b0e      	ldr	r3, [pc, #56]	; (8013774 <ctrl_init+0x88>)
 801373c:	795b      	ldrb	r3, [r3, #5]
 801373e:	2101      	movs	r1, #1
 8013740:	4618      	mov	r0, r3
 8013742:	f000 fa97 	bl	8013c74 <set_block_addr_occupency>

			if ((1)) {
				evt_cmd_set_setdirspeed(1, &trctl[1], 1, 30, 1);
			}
		} else {
			trctl[1].canton1_addr = 0xFF;
 8013746:	4b0b      	ldr	r3, [pc, #44]	; (8013774 <ctrl_init+0x88>)
 8013748:	22ff      	movs	r2, #255	; 0xff
 801374a:	775a      	strb	r2, [r3, #29]
			trctl[1].canton2_addr = 0xFF;
 801374c:	4b09      	ldr	r3, [pc, #36]	; (8013774 <ctrl_init+0x88>)
 801374e:	22ff      	movs	r2, #255	; 0xff
 8013750:	779a      	strb	r2, [r3, #30]
			ctrl_set_mode(1, train_notrunning);
 8013752:	2100      	movs	r1, #0
 8013754:	2001      	movs	r0, #1
 8013756:	f7ff ff89 	bl	801366c <ctrl_set_mode>
			set_state(1, &trctl[1], train_off);
 801375a:	2200      	movs	r2, #0
 801375c:	4906      	ldr	r1, [pc, #24]	; (8013778 <ctrl_init+0x8c>)
 801375e:	2001      	movs	r0, #1
 8013760:	f7ff ff0c 	bl	801357c <set_state>
			//trctl[1].enabled = 0;
			update_c2_state_limits(0, &trctl[0], upd_init);
 8013764:	2200      	movs	r2, #0
 8013766:	4903      	ldr	r1, [pc, #12]	; (8013774 <ctrl_init+0x88>)
 8013768:	2000      	movs	r0, #0
 801376a:	f000 fd9b 	bl	80142a4 <update_c2_state_limits>

		}
	}
}
 801376e:	bf00      	nop
 8013770:	bd80      	pop	{r7, pc}
 8013772:	bf00      	nop
 8013774:	200051f0 	.word	0x200051f0
 8013778:	20005208 	.word	0x20005208

0801377c <reset_timer>:
// ----------------------------------------------------------------------------
// timers


static void reset_timer(int tidx, train_ctrl_t *tvar, int numtimer)
{
 801377c:	b580      	push	{r7, lr}
 801377e:	b084      	sub	sp, #16
 8013780:	af00      	add	r7, sp, #0
 8013782:	60f8      	str	r0, [r7, #12]
 8013784:	60b9      	str	r1, [r7, #8]
 8013786:	607a      	str	r2, [r7, #4]
	itm_debug2(DBG_CTRL, "reset_timer", tidx, numtimer);
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	68fa      	ldr	r2, [r7, #12]
 801378c:	490b      	ldr	r1, [pc, #44]	; (80137bc <reset_timer+0x40>)
 801378e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013792:	f7ff fdf9 	bl	8013388 <itm_debug2>
	if (numtimer<0 || numtimer>=NUM_TIMERS) fatal();
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	2b00      	cmp	r3, #0
 801379a:	db02      	blt.n	80137a2 <reset_timer+0x26>
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	2b01      	cmp	r3, #1
 80137a0:	dd01      	ble.n	80137a6 <reset_timer+0x2a>
 80137a2:	f7ff fed3 	bl	801354c <fatal>
	tvar->timertick[numtimer] = 0;
 80137a6:	68bb      	ldr	r3, [r7, #8]
 80137a8:	687a      	ldr	r2, [r7, #4]
 80137aa:	3204      	adds	r2, #4
 80137ac:	2100      	movs	r1, #0
 80137ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80137b2:	bf00      	nop
 80137b4:	3710      	adds	r7, #16
 80137b6:	46bd      	mov	sp, r7
 80137b8:	bd80      	pop	{r7, pc}
 80137ba:	bf00      	nop
 80137bc:	08019790 	.word	0x08019790

080137c0 <set_timer>:
static void set_timer(int tidx, train_ctrl_t *tvar, int numtimer, uint32_t tval)
{
 80137c0:	b580      	push	{r7, lr}
 80137c2:	b086      	sub	sp, #24
 80137c4:	af02      	add	r7, sp, #8
 80137c6:	60f8      	str	r0, [r7, #12]
 80137c8:	60b9      	str	r1, [r7, #8]
 80137ca:	607a      	str	r2, [r7, #4]
 80137cc:	603b      	str	r3, [r7, #0]
	itm_debug3(DBG_CTRL, "set_timer", tidx, numtimer, tval);
 80137ce:	683b      	ldr	r3, [r7, #0]
 80137d0:	9300      	str	r3, [sp, #0]
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	68fa      	ldr	r2, [r7, #12]
 80137d6:	490d      	ldr	r1, [pc, #52]	; (801380c <set_timer+0x4c>)
 80137d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80137dc:	f7ff fdf0 	bl	80133c0 <itm_debug3>
	if (numtimer<0 || numtimer>=NUM_TIMERS) fatal();
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	db02      	blt.n	80137ec <set_timer+0x2c>
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	2b01      	cmp	r3, #1
 80137ea:	dd01      	ble.n	80137f0 <set_timer+0x30>
 80137ec:	f7ff feae 	bl	801354c <fatal>
	tvar->timertick[numtimer] = HAL_GetTick() + tval;
 80137f0:	f7ee fb00 	bl	8001df4 <HAL_GetTick>
 80137f4:	4602      	mov	r2, r0
 80137f6:	683b      	ldr	r3, [r7, #0]
 80137f8:	18d1      	adds	r1, r2, r3
 80137fa:	68bb      	ldr	r3, [r7, #8]
 80137fc:	687a      	ldr	r2, [r7, #4]
 80137fe:	3204      	adds	r2, #4
 8013800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8013804:	bf00      	nop
 8013806:	3710      	adds	r7, #16
 8013808:	46bd      	mov	sp, r7
 801380a:	bd80      	pop	{r7, pc}
 801380c:	0801979c 	.word	0x0801979c

08013810 <check_timers>:

static void check_timers(uint32_t tick)
{
 8013810:	b580      	push	{r7, lr}
 8013812:	b088      	sub	sp, #32
 8013814:	af02      	add	r7, sp, #8
 8013816:	6078      	str	r0, [r7, #4]
	//uint32_t t = HAL_GetTick();
	for (int tidx = 0; tidx<NUM_TRAINS; tidx++) {
 8013818:	2300      	movs	r3, #0
 801381a:	617b      	str	r3, [r7, #20]
 801381c:	e036      	b.n	801388c <check_timers+0x7c>
		train_ctrl_t *tvar = &trctl[tidx];
 801381e:	697a      	ldr	r2, [r7, #20]
 8013820:	4613      	mov	r3, r2
 8013822:	005b      	lsls	r3, r3, #1
 8013824:	4413      	add	r3, r2
 8013826:	00db      	lsls	r3, r3, #3
 8013828:	4a1c      	ldr	r2, [pc, #112]	; (801389c <check_timers+0x8c>)
 801382a:	4413      	add	r3, r2
 801382c:	60fb      	str	r3, [r7, #12]
		for (int j=0; j<NUM_TIMERS; j++) {
 801382e:	2300      	movs	r3, #0
 8013830:	613b      	str	r3, [r7, #16]
 8013832:	e025      	b.n	8013880 <check_timers+0x70>
			uint32_t tv = tvar->timertick[j];
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	693a      	ldr	r2, [r7, #16]
 8013838:	3204      	adds	r2, #4
 801383a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801383e:	60bb      	str	r3, [r7, #8]
			if (!tv) continue;
 8013840:	68bb      	ldr	r3, [r7, #8]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d018      	beq.n	8013878 <check_timers+0x68>
			if (tv <= tick) {
 8013846:	68ba      	ldr	r2, [r7, #8]
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	429a      	cmp	r2, r3
 801384c:	d815      	bhi.n	801387a <check_timers+0x6a>
				itm_debug3(DBG_CTRL, "tim", tidx, j, tv);
 801384e:	68bb      	ldr	r3, [r7, #8]
 8013850:	9300      	str	r3, [sp, #0]
 8013852:	693b      	ldr	r3, [r7, #16]
 8013854:	697a      	ldr	r2, [r7, #20]
 8013856:	4912      	ldr	r1, [pc, #72]	; (80138a0 <check_timers+0x90>)
 8013858:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801385c:	f7ff fdb0 	bl	80133c0 <itm_debug3>
				tvar->timertick[j] = 0;
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	693a      	ldr	r2, [r7, #16]
 8013864:	3204      	adds	r2, #4
 8013866:	2100      	movs	r1, #0
 8013868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				evt_timer(tidx, tvar, j);
 801386c:	693a      	ldr	r2, [r7, #16]
 801386e:	68f9      	ldr	r1, [r7, #12]
 8013870:	6978      	ldr	r0, [r7, #20]
 8013872:	f000 fce3 	bl	801423c <evt_timer>
 8013876:	e000      	b.n	801387a <check_timers+0x6a>
			if (!tv) continue;
 8013878:	bf00      	nop
		for (int j=0; j<NUM_TIMERS; j++) {
 801387a:	693b      	ldr	r3, [r7, #16]
 801387c:	3301      	adds	r3, #1
 801387e:	613b      	str	r3, [r7, #16]
 8013880:	693b      	ldr	r3, [r7, #16]
 8013882:	2b01      	cmp	r3, #1
 8013884:	ddd6      	ble.n	8013834 <check_timers+0x24>
	for (int tidx = 0; tidx<NUM_TRAINS; tidx++) {
 8013886:	697b      	ldr	r3, [r7, #20]
 8013888:	3301      	adds	r3, #1
 801388a:	617b      	str	r3, [r7, #20]
 801388c:	697b      	ldr	r3, [r7, #20]
 801388e:	2b07      	cmp	r3, #7
 8013890:	ddc5      	ble.n	801381e <check_timers+0xe>
			}
		}
	}
}
 8013892:	bf00      	nop
 8013894:	3718      	adds	r7, #24
 8013896:	46bd      	mov	sp, r7
 8013898:	bd80      	pop	{r7, pc}
 801389a:	bf00      	nop
 801389c:	200051f0 	.word	0x200051f0
 80138a0:	080197a8 	.word	0x080197a8

080138a4 <sub_presence_changed>:




static void sub_presence_changed(_UNUSED_ uint32_t tick, uint8_t from_addr, uint8_t lsegnum, uint16_t p, int16_t ival)
{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	b08a      	sub	sp, #40	; 0x28
 80138a8:	af02      	add	r7, sp, #8
 80138aa:	6078      	str	r0, [r7, #4]
 80138ac:	4608      	mov	r0, r1
 80138ae:	4611      	mov	r1, r2
 80138b0:	461a      	mov	r2, r3
 80138b2:	4603      	mov	r3, r0
 80138b4:	70fb      	strb	r3, [r7, #3]
 80138b6:	460b      	mov	r3, r1
 80138b8:	70bb      	strb	r3, [r7, #2]
 80138ba:	4613      	mov	r3, r2
 80138bc:	803b      	strh	r3, [r7, #0]
	int segnum = _sub_addr_to_sub_num(from_addr, lsegnum);
 80138be:	78ba      	ldrb	r2, [r7, #2]
 80138c0:	78fb      	ldrb	r3, [r7, #3]
 80138c2:	4611      	mov	r1, r2
 80138c4:	4618      	mov	r0, r3
 80138c6:	f7ff fdb7 	bl	8013438 <_sub_addr_to_sub_num>
 80138ca:	6178      	str	r0, [r7, #20]
	itm_debug3(DBG_PRES|DBG_CTRL, "PRC",  p, lsegnum, ival);
 80138cc:	883a      	ldrh	r2, [r7, #0]
 80138ce:	78b9      	ldrb	r1, [r7, #2]
 80138d0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80138d4:	9300      	str	r3, [sp, #0]
 80138d6:	460b      	mov	r3, r1
 80138d8:	4947      	ldr	r1, [pc, #284]	; (80139f8 <sub_presence_changed+0x154>)
 80138da:	f44f 6088 	mov.w	r0, #1088	; 0x440
 80138de:	f7ff fd6f 	bl	80133c0 <itm_debug3>
	if ((segnum<0) || (segnum>11)) return;
 80138e2:	697b      	ldr	r3, [r7, #20]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	f2c0 8082 	blt.w	80139ee <sub_presence_changed+0x14a>
 80138ea:	697b      	ldr	r3, [r7, #20]
 80138ec:	2b0b      	cmp	r3, #11
 80138ee:	dc7e      	bgt.n	80139ee <sub_presence_changed+0x14a>

	uint8_t canton = blk_addr_for_sub_addr(from_addr, segnum);
 80138f0:	697b      	ldr	r3, [r7, #20]
 80138f2:	b2da      	uxtb	r2, r3
 80138f4:	78fb      	ldrb	r3, [r7, #3]
 80138f6:	4611      	mov	r1, r2
 80138f8:	4618      	mov	r0, r3
 80138fa:	f7ff fe0b 	bl	8013514 <blk_addr_for_sub_addr>
 80138fe:	4603      	mov	r3, r0
 8013900:	74fb      	strb	r3, [r7, #19]
	if (0xFF == canton) {
 8013902:	7cfb      	ldrb	r3, [r7, #19]
 8013904:	2bff      	cmp	r3, #255	; 0xff
 8013906:	d106      	bne.n	8013916 <sub_presence_changed+0x72>
		itm_debug2(DBG_ERR|DBG_CTRL, "blk??", from_addr, segnum);
 8013908:	78fa      	ldrb	r2, [r7, #3]
 801390a:	697b      	ldr	r3, [r7, #20]
 801390c:	493b      	ldr	r1, [pc, #236]	; (80139fc <sub_presence_changed+0x158>)
 801390e:	483c      	ldr	r0, [pc, #240]	; (8013a00 <sub_presence_changed+0x15c>)
 8013910:	f7ff fd3a 	bl	8013388 <itm_debug2>
		return;
 8013914:	e06c      	b.n	80139f0 <sub_presence_changed+0x14c>
	}
	itm_debug3(DBG_PRES|DBG_CTRL, "PRBLK", p, segnum, canton);
 8013916:	883a      	ldrh	r2, [r7, #0]
 8013918:	7cfb      	ldrb	r3, [r7, #19]
 801391a:	9300      	str	r3, [sp, #0]
 801391c:	697b      	ldr	r3, [r7, #20]
 801391e:	4939      	ldr	r1, [pc, #228]	; (8013a04 <sub_presence_changed+0x160>)
 8013920:	f44f 6088 	mov.w	r0, #1088	; 0x440
 8013924:	f7ff fd4c 	bl	80133c0 <itm_debug3>

	int f = 0;
 8013928:	2300      	movs	r3, #0
 801392a:	61fb      	str	r3, [r7, #28]

	for (int tn = 0; tn < NUM_TRAINS; tn++) {
 801392c:	2300      	movs	r3, #0
 801392e:	61bb      	str	r3, [r7, #24]
 8013930:	e050      	b.n	80139d4 <sub_presence_changed+0x130>
		train_ctrl_t *tvar = &trctl[tn];
 8013932:	69ba      	ldr	r2, [r7, #24]
 8013934:	4613      	mov	r3, r2
 8013936:	005b      	lsls	r3, r3, #1
 8013938:	4413      	add	r3, r2
 801393a:	00db      	lsls	r3, r3, #3
 801393c:	4a32      	ldr	r2, [pc, #200]	; (8013a08 <sub_presence_changed+0x164>)
 801393e:	4413      	add	r3, r2
 8013940:	60fb      	str	r3, [r7, #12]
		const train_config_t *tconf = get_train_cnf(tn);
 8013942:	69b8      	ldr	r0, [r7, #24]
 8013944:	f002 fb5c 	bl	8016000 <get_train_cnf>
 8013948:	60b8      	str	r0, [r7, #8]
		// check enabled
		if (!tconf->enabled) continue;
 801394a:	68bb      	ldr	r3, [r7, #8]
 801394c:	7c9b      	ldrb	r3, [r3, #18]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d03c      	beq.n	80139cc <sub_presence_changed+0x128>
		itm_debug3(DBG_PRES|DBG_CTRL, "prblk?", tn, tvar->canton1_addr, tvar->canton2_addr);
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	795b      	ldrb	r3, [r3, #5]
 8013956:	461a      	mov	r2, r3
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	799b      	ldrb	r3, [r3, #6]
 801395c:	9300      	str	r3, [sp, #0]
 801395e:	4613      	mov	r3, r2
 8013960:	69ba      	ldr	r2, [r7, #24]
 8013962:	492a      	ldr	r1, [pc, #168]	; (8013a0c <sub_presence_changed+0x168>)
 8013964:	f44f 6088 	mov.w	r0, #1088	; 0x440
 8013968:	f7ff fd2a 	bl	80133c0 <itm_debug3>
		if (tvar->canton1_addr == canton) {
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	795b      	ldrb	r3, [r3, #5]
 8013970:	7cfa      	ldrb	r2, [r7, #19]
 8013972:	429a      	cmp	r2, r3
 8013974:	d115      	bne.n	80139a2 <sub_presence_changed+0xfe>
			if (p) {
 8013976:	883b      	ldrh	r3, [r7, #0]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d00b      	beq.n	8013994 <sub_presence_changed+0xf0>
				itm_debug2(DBG_PRES, "?enter c1", tn, segnum);
 801397c:	697b      	ldr	r3, [r7, #20]
 801397e:	69ba      	ldr	r2, [r7, #24]
 8013980:	4923      	ldr	r1, [pc, #140]	; (8013a10 <sub_presence_changed+0x16c>)
 8013982:	2040      	movs	r0, #64	; 0x40
 8013984:	f7ff fd00 	bl	8013388 <itm_debug2>
				evt_entered_c1(tn, tvar, 0);
 8013988:	2200      	movs	r2, #0
 801398a:	68f9      	ldr	r1, [r7, #12]
 801398c:	69b8      	ldr	r0, [r7, #24]
 801398e:	f000 fa97 	bl	8013ec0 <evt_entered_c1>
 8013992:	e003      	b.n	801399c <sub_presence_changed+0xf8>
			} else {
				evt_leaved_c1(tn, tvar);
 8013994:	68f9      	ldr	r1, [r7, #12]
 8013996:	69b8      	ldr	r0, [r7, #24]
 8013998:	f000 fa4a 	bl	8013e30 <evt_leaved_c1>
			}
			f = 1;
 801399c:	2301      	movs	r3, #1
 801399e:	61fb      	str	r3, [r7, #28]
 80139a0:	e015      	b.n	80139ce <sub_presence_changed+0x12a>
		} else if (tvar->canton2_addr == canton) {
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	799b      	ldrb	r3, [r3, #6]
 80139a6:	7cfa      	ldrb	r2, [r7, #19]
 80139a8:	429a      	cmp	r2, r3
 80139aa:	d110      	bne.n	80139ce <sub_presence_changed+0x12a>
			if (p) {
 80139ac:	883b      	ldrh	r3, [r7, #0]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d005      	beq.n	80139be <sub_presence_changed+0x11a>
				evt_entered_c2(tn, tvar, 0);
 80139b2:	2200      	movs	r2, #0
 80139b4:	68f9      	ldr	r1, [r7, #12]
 80139b6:	69b8      	ldr	r0, [r7, #24]
 80139b8:	f000 f9e6 	bl	8013d88 <evt_entered_c2>
 80139bc:	e003      	b.n	80139c6 <sub_presence_changed+0x122>
			} else {
				evt_leaved_c2(tn, tvar);
 80139be:	68f9      	ldr	r1, [r7, #12]
 80139c0:	69b8      	ldr	r0, [r7, #24]
 80139c2:	f000 fa93 	bl	8013eec <evt_leaved_c2>
			}
			f = 1;
 80139c6:	2301      	movs	r3, #1
 80139c8:	61fb      	str	r3, [r7, #28]
 80139ca:	e000      	b.n	80139ce <sub_presence_changed+0x12a>
		if (!tconf->enabled) continue;
 80139cc:	bf00      	nop
	for (int tn = 0; tn < NUM_TRAINS; tn++) {
 80139ce:	69bb      	ldr	r3, [r7, #24]
 80139d0:	3301      	adds	r3, #1
 80139d2:	61bb      	str	r3, [r7, #24]
 80139d4:	69bb      	ldr	r3, [r7, #24]
 80139d6:	2b07      	cmp	r3, #7
 80139d8:	ddab      	ble.n	8013932 <sub_presence_changed+0x8e>
		}
	}
	if (!f) {
 80139da:	69fb      	ldr	r3, [r7, #28]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d107      	bne.n	80139f0 <sub_presence_changed+0x14c>
		// presence on unexpected canton
		itm_debug2(DBG_ERR|DBG_PRES, "?unexp", segnum, canton);
 80139e0:	7cfb      	ldrb	r3, [r7, #19]
 80139e2:	697a      	ldr	r2, [r7, #20]
 80139e4:	490b      	ldr	r1, [pc, #44]	; (8013a14 <sub_presence_changed+0x170>)
 80139e6:	480c      	ldr	r0, [pc, #48]	; (8013a18 <sub_presence_changed+0x174>)
 80139e8:	f7ff fcce 	bl	8013388 <itm_debug2>
 80139ec:	e000      	b.n	80139f0 <sub_presence_changed+0x14c>
	if ((segnum<0) || (segnum>11)) return;
 80139ee:	bf00      	nop
	}
}
 80139f0:	3720      	adds	r7, #32
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bd80      	pop	{r7, pc}
 80139f6:	bf00      	nop
 80139f8:	080197ac 	.word	0x080197ac
 80139fc:	080197b0 	.word	0x080197b0
 8013a00:	80000400 	.word	0x80000400
 8013a04:	080197b8 	.word	0x080197b8
 8013a08:	200051f0 	.word	0x200051f0
 8013a0c:	080197c0 	.word	0x080197c0
 8013a10:	080197c8 	.word	0x080197c8
 8013a14:	080197d4 	.word	0x080197d4
 8013a18:	80000040 	.word	0x80000040

08013a1c <ctrl_run_tick>:

// ----------------------------------------------------------------------------


void ctrl_run_tick(_UNUSED_ uint32_t notif_flags, uint32_t tick, _UNUSED_ uint32_t dt)
{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	b08c      	sub	sp, #48	; 0x30
 8013a20:	af02      	add	r7, sp, #8
 8013a22:	60f8      	str	r0, [r7, #12]
 8013a24:	60b9      	str	r1, [r7, #8]
 8013a26:	607a      	str	r2, [r7, #4]
	static int first=1;
	if (first) {
 8013a28:	4b62      	ldr	r3, [pc, #392]	; (8013bb4 <ctrl_run_tick+0x198>)
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d006      	beq.n	8013a3e <ctrl_run_tick+0x22>
		first = 0;
 8013a30:	4b60      	ldr	r3, [pc, #384]	; (8013bb4 <ctrl_run_tick+0x198>)
 8013a32:	2200      	movs	r2, #0
 8013a34:	601a      	str	r2, [r3, #0]
		ctrl_init();
 8013a36:	f7ff fe59 	bl	80136ec <ctrl_init>
		ctrl_reset();
 8013a3a:	f7ff fd97 	bl	801356c <ctrl_reset>
    }

	check_block_delayed(tick);
 8013a3e:	68b8      	ldr	r0, [r7, #8]
 8013a40:	f000 f958 	bl	8013cf4 <check_block_delayed>

	/* process messages */
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_ctrl(&m);
 8013a44:	f107 0310 	add.w	r3, r7, #16
 8013a48:	4618      	mov	r0, r3
 8013a4a:	f7ff fcd5 	bl	80133f8 <mqf_read_to_ctrl>
 8013a4e:	6278      	str	r0, [r7, #36]	; 0x24
		if (rc) break;
 8013a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d009      	beq.n	8013a6a <ctrl_run_tick+0x4e>
			}
		} else {
			itm_debug1(DBG_MSG|DBG_CTRL, "bad msg", m.to);
		}
	}
	check_timers(tick);
 8013a56:	68b8      	ldr	r0, [r7, #8]
 8013a58:	f7ff feda 	bl	8013810 <check_timers>
	check_blk_tick(tick);
 8013a5c:	68b8      	ldr	r0, [r7, #8]
 8013a5e:	f000 ff59 	bl	8014914 <check_blk_tick>
	check_behaviour(tick);
 8013a62:	68b8      	ldr	r0, [r7, #8]
 8013a64:	f000 ffe0 	bl	8014a28 <check_behaviour>
	//hi_tick(notif_flags, tick, dt);
}
 8013a68:	e0a0      	b.n	8013bac <ctrl_run_tick+0x190>
        switch (m.cmd) {
 8013a6a:	7cbb      	ldrb	r3, [r7, #18]
 8013a6c:	2bfc      	cmp	r3, #252	; 0xfc
 8013a6e:	d007      	beq.n	8013a80 <ctrl_run_tick+0x64>
 8013a70:	2bfc      	cmp	r3, #252	; 0xfc
 8013a72:	db17      	blt.n	8013aa4 <ctrl_run_tick+0x88>
 8013a74:	3bfe      	subs	r3, #254	; 0xfe
 8013a76:	2b01      	cmp	r3, #1
 8013a78:	d814      	bhi.n	8013aa4 <ctrl_run_tick+0x88>
                ctrl_reset(); // untested
 8013a7a:	f7ff fd77 	bl	801356c <ctrl_reset>
                continue;
 8013a7e:	e094      	b.n	8013baa <ctrl_run_tick+0x18e>
            	if (run_mode != m.v1u) {
 8013a80:	4b4d      	ldr	r3, [pc, #308]	; (8013bb8 <ctrl_run_tick+0x19c>)
 8013a82:	781b      	ldrb	r3, [r3, #0]
 8013a84:	b29a      	uxth	r2, r3
 8013a86:	8abb      	ldrh	r3, [r7, #20]
 8013a88:	429a      	cmp	r2, r3
 8013a8a:	f000 8089 	beq.w	8013ba0 <ctrl_run_tick+0x184>
            		run_mode = m.v1u;
 8013a8e:	8abb      	ldrh	r3, [r7, #20]
 8013a90:	b2da      	uxtb	r2, r3
 8013a92:	4b49      	ldr	r3, [pc, #292]	; (8013bb8 <ctrl_run_tick+0x19c>)
 8013a94:	701a      	strb	r2, [r3, #0]
            		testerAddr = m.from;
 8013a96:	7c7a      	ldrb	r2, [r7, #17]
 8013a98:	4b48      	ldr	r3, [pc, #288]	; (8013bbc <ctrl_run_tick+0x1a0>)
 8013a9a:	701a      	strb	r2, [r3, #0]
            		first = 1;
 8013a9c:	4b45      	ldr	r3, [pc, #276]	; (8013bb4 <ctrl_run_tick+0x198>)
 8013a9e:	2201      	movs	r2, #1
 8013aa0:	601a      	str	r2, [r3, #0]
                continue;
 8013aa2:	e07d      	b.n	8013ba0 <ctrl_run_tick+0x184>
            	break;
 8013aa4:	bf00      	nop
        if (run_mode != runmode_normal) continue;
 8013aa6:	4b44      	ldr	r3, [pc, #272]	; (8013bb8 <ctrl_run_tick+0x19c>)
 8013aa8:	781b      	ldrb	r3, [r3, #0]
 8013aaa:	2b01      	cmp	r3, #1
 8013aac:	d17a      	bne.n	8013ba4 <ctrl_run_tick+0x188>
		if (IS_CONTROL_T(m.to)) {
 8013aae:	7c3b      	ldrb	r3, [r7, #16]
 8013ab0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8013ab4:	2bd0      	cmp	r3, #208	; 0xd0
 8013ab6:	d16b      	bne.n	8013b90 <ctrl_run_tick+0x174>
			int tidx = m.to & 0x7;
 8013ab8:	7c3b      	ldrb	r3, [r7, #16]
 8013aba:	f003 0307 	and.w	r3, r3, #7
 8013abe:	623b      	str	r3, [r7, #32]
			train_ctrl_t *tvar = &trctl[tidx];
 8013ac0:	6a3a      	ldr	r2, [r7, #32]
 8013ac2:	4613      	mov	r3, r2
 8013ac4:	005b      	lsls	r3, r3, #1
 8013ac6:	4413      	add	r3, r2
 8013ac8:	00db      	lsls	r3, r3, #3
 8013aca:	4a3d      	ldr	r2, [pc, #244]	; (8013bc0 <ctrl_run_tick+0x1a4>)
 8013acc:	4413      	add	r3, r2
 8013ace:	61fb      	str	r3, [r7, #28]
			switch (m.cmd) {
 8013ad0:	7cbb      	ldrb	r3, [r7, #18]
 8013ad2:	2b13      	cmp	r3, #19
 8013ad4:	d018      	beq.n	8013b08 <ctrl_run_tick+0xec>
 8013ad6:	2b13      	cmp	r3, #19
 8013ad8:	dc02      	bgt.n	8013ae0 <ctrl_run_tick+0xc4>
 8013ada:	2b12      	cmp	r3, #18
 8013adc:	d005      	beq.n	8013aea <ctrl_run_tick+0xce>
				break;
 8013ade:	e064      	b.n	8013baa <ctrl_run_tick+0x18e>
			switch (m.cmd) {
 8013ae0:	2b17      	cmp	r3, #23
 8013ae2:	d039      	beq.n	8013b58 <ctrl_run_tick+0x13c>
 8013ae4:	2b51      	cmp	r3, #81	; 0x51
 8013ae6:	d043      	beq.n	8013b70 <ctrl_run_tick+0x154>
				break;
 8013ae8:	e05f      	b.n	8013baa <ctrl_run_tick+0x18e>
				if (ignore_ina_presence) break;
 8013aea:	4b36      	ldr	r3, [pc, #216]	; (8013bc4 <ctrl_run_tick+0x1a8>)
 8013aec:	781b      	ldrb	r3, [r3, #0]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d15a      	bne.n	8013ba8 <ctrl_run_tick+0x18c>
				sub_presence_changed(tick, m.from, m.sub, m.v1u, m.v2);
 8013af2:	7c79      	ldrb	r1, [r7, #17]
 8013af4:	7cfa      	ldrb	r2, [r7, #19]
 8013af6:	8ab8      	ldrh	r0, [r7, #20]
 8013af8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013afc:	9300      	str	r3, [sp, #0]
 8013afe:	4603      	mov	r3, r0
 8013b00:	68b8      	ldr	r0, [r7, #8]
 8013b02:	f7ff fecf 	bl	80138a4 <sub_presence_changed>
				break;
 8013b06:	e050      	b.n	8013baa <ctrl_run_tick+0x18e>
				itm_debug2(DBG_CTRL,"BEMF/C2", tidx,  m.v1u);
 8013b08:	8abb      	ldrh	r3, [r7, #20]
 8013b0a:	6a3a      	ldr	r2, [r7, #32]
 8013b0c:	492e      	ldr	r1, [pc, #184]	; (8013bc8 <ctrl_run_tick+0x1ac>)
 8013b0e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013b12:	f7ff fc39 	bl	8013388 <itm_debug2>
				train_ctrl_t *tvar = &trctl[tidx];
 8013b16:	6a3a      	ldr	r2, [r7, #32]
 8013b18:	4613      	mov	r3, r2
 8013b1a:	005b      	lsls	r3, r3, #1
 8013b1c:	4413      	add	r3, r2
 8013b1e:	00db      	lsls	r3, r3, #3
 8013b20:	4a27      	ldr	r2, [pc, #156]	; (8013bc0 <ctrl_run_tick+0x1a4>)
 8013b22:	4413      	add	r3, r2
 8013b24:	61bb      	str	r3, [r7, #24]
				if (m.v1u != tvar->canton2_addr) {
 8013b26:	8aba      	ldrh	r2, [r7, #20]
 8013b28:	69bb      	ldr	r3, [r7, #24]
 8013b2a:	799b      	ldrb	r3, [r3, #6]
 8013b2c:	b29b      	uxth	r3, r3
 8013b2e:	429a      	cmp	r2, r3
 8013b30:	d00c      	beq.n	8013b4c <ctrl_run_tick+0x130>
					itm_debug3(DBG_CTRL, "not c2", tidx, m.v1u, tvar->canton2_addr);
 8013b32:	8abb      	ldrh	r3, [r7, #20]
 8013b34:	461a      	mov	r2, r3
 8013b36:	69bb      	ldr	r3, [r7, #24]
 8013b38:	799b      	ldrb	r3, [r3, #6]
 8013b3a:	9300      	str	r3, [sp, #0]
 8013b3c:	4613      	mov	r3, r2
 8013b3e:	6a3a      	ldr	r2, [r7, #32]
 8013b40:	4922      	ldr	r1, [pc, #136]	; (8013bcc <ctrl_run_tick+0x1b0>)
 8013b42:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013b46:	f7ff fc3b 	bl	80133c0 <itm_debug3>
					break;
 8013b4a:	e02e      	b.n	8013baa <ctrl_run_tick+0x18e>
				evt_entered_c2(tidx, tvar, 1);
 8013b4c:	2201      	movs	r2, #1
 8013b4e:	69b9      	ldr	r1, [r7, #24]
 8013b50:	6a38      	ldr	r0, [r7, #32]
 8013b52:	f000 f919 	bl	8013d88 <evt_entered_c2>
				break;
 8013b56:	e028      	b.n	8013baa <ctrl_run_tick+0x18e>
				evt_cmd_set_setdirspeed(tidx, tvar, m.v2, m.v1u, 0);
 8013b58:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013b5c:	b25a      	sxtb	r2, r3
 8013b5e:	8ab9      	ldrh	r1, [r7, #20]
 8013b60:	2300      	movs	r3, #0
 8013b62:	9300      	str	r3, [sp, #0]
 8013b64:	460b      	mov	r3, r1
 8013b66:	69f9      	ldr	r1, [r7, #28]
 8013b68:	6a38      	ldr	r0, [r7, #32]
 8013b6a:	f000 fa0d 	bl	8013f88 <evt_cmd_set_setdirspeed>
				break;
 8013b6e:	e01c      	b.n	8013baa <ctrl_run_tick+0x18e>
				itm_debug2(DBG_POSE, "Trig", m.v1u, m.v2u);
 8013b70:	8abb      	ldrh	r3, [r7, #20]
 8013b72:	461a      	mov	r2, r3
 8013b74:	8afb      	ldrh	r3, [r7, #22]
 8013b76:	4916      	ldr	r1, [pc, #88]	; (8013bd0 <ctrl_run_tick+0x1b4>)
 8013b78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8013b7c:	f7ff fc04 	bl	8013388 <itm_debug2>
				evt_pose_triggered(tidx, tvar, m.v1u);
 8013b80:	8abb      	ldrh	r3, [r7, #20]
 8013b82:	b2db      	uxtb	r3, r3
 8013b84:	461a      	mov	r2, r3
 8013b86:	69f9      	ldr	r1, [r7, #28]
 8013b88:	6a38      	ldr	r0, [r7, #32]
 8013b8a:	f000 fb09 	bl	80141a0 <evt_pose_triggered>
				break;
 8013b8e:	e00c      	b.n	8013baa <ctrl_run_tick+0x18e>
			itm_debug1(DBG_MSG|DBG_CTRL, "bad msg", m.to);
 8013b90:	7c3b      	ldrb	r3, [r7, #16]
 8013b92:	461a      	mov	r2, r3
 8013b94:	490f      	ldr	r1, [pc, #60]	; (8013bd4 <ctrl_run_tick+0x1b8>)
 8013b96:	f240 4002 	movw	r0, #1026	; 0x402
 8013b9a:	f7ff fbdb 	bl	8013354 <itm_debug1>
 8013b9e:	e751      	b.n	8013a44 <ctrl_run_tick+0x28>
                continue;
 8013ba0:	bf00      	nop
 8013ba2:	e74f      	b.n	8013a44 <ctrl_run_tick+0x28>
        if (run_mode != runmode_normal) continue;
 8013ba4:	bf00      	nop
 8013ba6:	e74d      	b.n	8013a44 <ctrl_run_tick+0x28>
				if (ignore_ina_presence) break;
 8013ba8:	bf00      	nop
	for (;;) {
 8013baa:	e74b      	b.n	8013a44 <ctrl_run_tick+0x28>
}
 8013bac:	3728      	adds	r7, #40	; 0x28
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	bd80      	pop	{r7, pc}
 8013bb2:	bf00      	nop
 8013bb4:	20000234 	.word	0x20000234
 8013bb8:	200052b0 	.word	0x200052b0
 8013bbc:	200052b1 	.word	0x200052b1
 8013bc0:	200051f0 	.word	0x200051f0
 8013bc4:	20000232 	.word	0x20000232
 8013bc8:	080197dc 	.word	0x080197dc
 8013bcc:	080197e4 	.word	0x080197e4
 8013bd0:	080197ec 	.word	0x080197ec
 8013bd4:	080197f4 	.word	0x080197f4

08013bd8 <set_block_num_occupency>:
static uint8_t blk_occup[NUM_CANTONS] = {0}; // TODO 32
static uint8_t occupency_changed = 0;


static void set_block_num_occupency(int blknum, uint8_t v)
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b084      	sub	sp, #16
 8013bdc:	af02      	add	r7, sp, #8
 8013bde:	6078      	str	r0, [r7, #4]
 8013be0:	460b      	mov	r3, r1
 8013be2:	70fb      	strb	r3, [r7, #3]
	if (-1 == blknum) fatal();
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013bea:	d101      	bne.n	8013bf0 <set_block_num_occupency+0x18>
 8013bec:	f7ff fcae 	bl	801354c <fatal>
	if (blk_occup[blknum] != v) {
 8013bf0:	4a1c      	ldr	r2, [pc, #112]	; (8013c64 <set_block_num_occupency+0x8c>)
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	4413      	add	r3, r2
 8013bf6:	781b      	ldrb	r3, [r3, #0]
 8013bf8:	78fa      	ldrb	r2, [r7, #3]
 8013bfa:	429a      	cmp	r2, r3
 8013bfc:	d01e      	beq.n	8013c3c <set_block_num_occupency+0x64>
		if (USE_BLOCK_DELAY_FREE && (v==BLK_OCC_FREE)) {
 8013bfe:	78fb      	ldrb	r3, [r7, #3]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d113      	bne.n	8013c2c <set_block_num_occupency+0x54>
			if (blk_occup[blknum] >= BLK_OCC_DELAY1) fatal();
 8013c04:	4a17      	ldr	r2, [pc, #92]	; (8013c64 <set_block_num_occupency+0x8c>)
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	4413      	add	r3, r2
 8013c0a:	781b      	ldrb	r3, [r3, #0]
 8013c0c:	2b0f      	cmp	r3, #15
 8013c0e:	d901      	bls.n	8013c14 <set_block_num_occupency+0x3c>
 8013c10:	f7ff fc9c 	bl	801354c <fatal>
			blk_occup[blknum] = BLK_OCC_DELAYM;
 8013c14:	4a13      	ldr	r2, [pc, #76]	; (8013c64 <set_block_num_occupency+0x8c>)
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	4413      	add	r3, r2
 8013c1a:	2216      	movs	r2, #22
 8013c1c:	701a      	strb	r2, [r3, #0]
			itm_debug1(DBG_CTRL, "delay free", blknum);
 8013c1e:	687a      	ldr	r2, [r7, #4]
 8013c20:	4911      	ldr	r1, [pc, #68]	; (8013c68 <set_block_num_occupency+0x90>)
 8013c22:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013c26:	f7ff fb95 	bl	8013354 <itm_debug1>
 8013c2a:	e007      	b.n	8013c3c <set_block_num_occupency+0x64>
		} else {
			blk_occup[blknum] = v;
 8013c2c:	4a0d      	ldr	r2, [pc, #52]	; (8013c64 <set_block_num_occupency+0x8c>)
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	4413      	add	r3, r2
 8013c32:	78fa      	ldrb	r2, [r7, #3]
 8013c34:	701a      	strb	r2, [r3, #0]
			occupency_changed = 1;
 8013c36:	4b0d      	ldr	r3, [pc, #52]	; (8013c6c <set_block_num_occupency+0x94>)
 8013c38:	2201      	movs	r2, #1
 8013c3a:	701a      	strb	r2, [r3, #0]
		}
	}
	if ((1)) {
		itm_debug3(DBG_CTRL, "BO123:", blk_occup[0], blk_occup[1], blk_occup[2]);
 8013c3c:	4b09      	ldr	r3, [pc, #36]	; (8013c64 <set_block_num_occupency+0x8c>)
 8013c3e:	781b      	ldrb	r3, [r3, #0]
 8013c40:	461a      	mov	r2, r3
 8013c42:	4b08      	ldr	r3, [pc, #32]	; (8013c64 <set_block_num_occupency+0x8c>)
 8013c44:	785b      	ldrb	r3, [r3, #1]
 8013c46:	4619      	mov	r1, r3
 8013c48:	4b06      	ldr	r3, [pc, #24]	; (8013c64 <set_block_num_occupency+0x8c>)
 8013c4a:	789b      	ldrb	r3, [r3, #2]
 8013c4c:	9300      	str	r3, [sp, #0]
 8013c4e:	460b      	mov	r3, r1
 8013c50:	4907      	ldr	r1, [pc, #28]	; (8013c70 <set_block_num_occupency+0x98>)
 8013c52:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013c56:	f7ff fbb3 	bl	80133c0 <itm_debug3>
	}
}
 8013c5a:	bf00      	nop
 8013c5c:	3708      	adds	r7, #8
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	bd80      	pop	{r7, pc}
 8013c62:	bf00      	nop
 8013c64:	200052b4 	.word	0x200052b4
 8013c68:	080197fc 	.word	0x080197fc
 8013c6c:	200052bc 	.word	0x200052bc
 8013c70:	08019808 	.word	0x08019808

08013c74 <set_block_addr_occupency>:
static void set_block_addr_occupency(uint8_t blkaddr, uint8_t v)
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b082      	sub	sp, #8
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	4603      	mov	r3, r0
 8013c7c:	460a      	mov	r2, r1
 8013c7e:	71fb      	strb	r3, [r7, #7]
 8013c80:	4613      	mov	r3, r2
 8013c82:	71bb      	strb	r3, [r7, #6]
	set_block_num_occupency(_blk_addr_to_blk_num(blkaddr), v);
 8013c84:	79fb      	ldrb	r3, [r7, #7]
 8013c86:	4618      	mov	r0, r3
 8013c88:	f7ff fbf3 	bl	8013472 <_blk_addr_to_blk_num>
 8013c8c:	4602      	mov	r2, r0
 8013c8e:	79bb      	ldrb	r3, [r7, #6]
 8013c90:	4619      	mov	r1, r3
 8013c92:	4610      	mov	r0, r2
 8013c94:	f7ff ffa0 	bl	8013bd8 <set_block_num_occupency>
}
 8013c98:	bf00      	nop
 8013c9a:	3708      	adds	r7, #8
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	bd80      	pop	{r7, pc}

08013ca0 <get_block_num_occupency>:

static uint8_t get_block_num_occupency(int blknum)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b082      	sub	sp, #8
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
	if (-1 == blknum) fatal();
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013cae:	d101      	bne.n	8013cb4 <get_block_num_occupency+0x14>
 8013cb0:	f7ff fc4c 	bl	801354c <fatal>
	return blk_occup[blknum];
 8013cb4:	4a03      	ldr	r2, [pc, #12]	; (8013cc4 <get_block_num_occupency+0x24>)
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	4413      	add	r3, r2
 8013cba:	781b      	ldrb	r3, [r3, #0]
}
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	3708      	adds	r7, #8
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	bd80      	pop	{r7, pc}
 8013cc4:	200052b4 	.word	0x200052b4

08013cc8 <occupied>:
{
	return get_block_num_occupency(_blk_addr_to_blk_num(blkaddr));
}

static uint8_t occupied(int dir)
{
 8013cc8:	b480      	push	{r7}
 8013cca:	b083      	sub	sp, #12
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
	if (dir<0) return BLK_OCC_LEFT;
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	da01      	bge.n	8013cda <occupied+0x12>
 8013cd6:	2302      	movs	r3, #2
 8013cd8:	e005      	b.n	8013ce6 <occupied+0x1e>
	if (dir>0) return BLK_OCC_RIGHT;
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	dd01      	ble.n	8013ce4 <occupied+0x1c>
 8013ce0:	2303      	movs	r3, #3
 8013ce2:	e000      	b.n	8013ce6 <occupied+0x1e>
	return BLK_OCC_STOP;
 8013ce4:	2301      	movs	r3, #1
}
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	370c      	adds	r7, #12
 8013cea:	46bd      	mov	sp, r7
 8013cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf0:	4770      	bx	lr
	...

08013cf4 <check_block_delayed>:

static void check_block_delayed(_UNUSED_ uint32_t tick)
{
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b084      	sub	sp, #16
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	6078      	str	r0, [r7, #4]
	static int cnt = 0;
	cnt++;
	if (cnt % 10) return;
#else
	static uint32_t lastcheck = 0;
	if (tick<lastcheck+100) return;
 8013cfc:	4b1e      	ldr	r3, [pc, #120]	; (8013d78 <check_block_delayed+0x84>)
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	3364      	adds	r3, #100	; 0x64
 8013d02:	687a      	ldr	r2, [r7, #4]
 8013d04:	429a      	cmp	r2, r3
 8013d06:	d332      	bcc.n	8013d6e <check_block_delayed+0x7a>
	lastcheck = tick;
 8013d08:	4a1b      	ldr	r2, [pc, #108]	; (8013d78 <check_block_delayed+0x84>)
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	6013      	str	r3, [r2, #0]
#endif
	for (int i=0; i<NUM_CANTONS; i++) {
 8013d0e:	2300      	movs	r3, #0
 8013d10:	60fb      	str	r3, [r7, #12]
 8013d12:	e028      	b.n	8013d66 <check_block_delayed+0x72>
		if (blk_occup[i] == BLK_OCC_DELAY1) {
 8013d14:	4a19      	ldr	r2, [pc, #100]	; (8013d7c <check_block_delayed+0x88>)
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	4413      	add	r3, r2
 8013d1a:	781b      	ldrb	r3, [r3, #0]
 8013d1c:	2b10      	cmp	r3, #16
 8013d1e:	d10e      	bne.n	8013d3e <check_block_delayed+0x4a>
			itm_debug1(DBG_CTRL, "FREE(d)", i);
 8013d20:	68fa      	ldr	r2, [r7, #12]
 8013d22:	4917      	ldr	r1, [pc, #92]	; (8013d80 <check_block_delayed+0x8c>)
 8013d24:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013d28:	f7ff fb14 	bl	8013354 <itm_debug1>
			blk_occup[i] = BLK_OCC_FREE;
 8013d2c:	4a13      	ldr	r2, [pc, #76]	; (8013d7c <check_block_delayed+0x88>)
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	4413      	add	r3, r2
 8013d32:	2200      	movs	r2, #0
 8013d34:	701a      	strb	r2, [r3, #0]
			occupency_changed = 1;
 8013d36:	4b13      	ldr	r3, [pc, #76]	; (8013d84 <check_block_delayed+0x90>)
 8013d38:	2201      	movs	r2, #1
 8013d3a:	701a      	strb	r2, [r3, #0]
 8013d3c:	e010      	b.n	8013d60 <check_block_delayed+0x6c>
		} else if (blk_occup[i] > BLK_OCC_DELAY1) {
 8013d3e:	4a0f      	ldr	r2, [pc, #60]	; (8013d7c <check_block_delayed+0x88>)
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	4413      	add	r3, r2
 8013d44:	781b      	ldrb	r3, [r3, #0]
 8013d46:	2b10      	cmp	r3, #16
 8013d48:	d90a      	bls.n	8013d60 <check_block_delayed+0x6c>
			blk_occup[i]--;
 8013d4a:	4a0c      	ldr	r2, [pc, #48]	; (8013d7c <check_block_delayed+0x88>)
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	4413      	add	r3, r2
 8013d50:	781b      	ldrb	r3, [r3, #0]
 8013d52:	3b01      	subs	r3, #1
 8013d54:	b2d9      	uxtb	r1, r3
 8013d56:	4a09      	ldr	r2, [pc, #36]	; (8013d7c <check_block_delayed+0x88>)
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	4413      	add	r3, r2
 8013d5c:	460a      	mov	r2, r1
 8013d5e:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<NUM_CANTONS; i++) {
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	3301      	adds	r3, #1
 8013d64:	60fb      	str	r3, [r7, #12]
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	2b07      	cmp	r3, #7
 8013d6a:	ddd3      	ble.n	8013d14 <check_block_delayed+0x20>
 8013d6c:	e000      	b.n	8013d70 <check_block_delayed+0x7c>
	if (tick<lastcheck+100) return;
 8013d6e:	bf00      	nop
		}
	}
}
 8013d70:	3710      	adds	r7, #16
 8013d72:	46bd      	mov	sp, r7
 8013d74:	bd80      	pop	{r7, pc}
 8013d76:	bf00      	nop
 8013d78:	200052c0 	.word	0x200052c0
 8013d7c:	200052b4 	.word	0x200052b4
 8013d80:	08019810 	.word	0x08019810
 8013d84:	200052bc 	.word	0x200052bc

08013d88 <evt_entered_c2>:




static void evt_entered_c2(int tidx, train_ctrl_t *tvar, uint8_t from_bemf)
{
 8013d88:	b590      	push	{r4, r7, lr}
 8013d8a:	b085      	sub	sp, #20
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	60f8      	str	r0, [r7, #12]
 8013d90:	60b9      	str	r1, [r7, #8]
 8013d92:	4613      	mov	r3, r2
 8013d94:	71fb      	strb	r3, [r7, #7]
	if (from_bemf && ignore_bemf_presence) return;
 8013d96:	79fb      	ldrb	r3, [r7, #7]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d003      	beq.n	8013da4 <evt_entered_c2+0x1c>
 8013d9c:	4b20      	ldr	r3, [pc, #128]	; (8013e20 <evt_entered_c2+0x98>)
 8013d9e:	781b      	ldrb	r3, [r3, #0]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d136      	bne.n	8013e12 <evt_entered_c2+0x8a>
	switch (tvar->_state) {
 8013da4:	68bb      	ldr	r3, [r7, #8]
 8013da6:	785b      	ldrb	r3, [r3, #1]
 8013da8:	2b01      	cmp	r3, #1
 8013daa:	d002      	beq.n	8013db2 <evt_entered_c2+0x2a>
 8013dac:	2b02      	cmp	r3, #2
 8013dae:	d032      	beq.n	8013e16 <evt_entered_c2+0x8e>
 8013db0:	e026      	b.n	8013e00 <evt_entered_c2+0x78>
	case train_running_c1:
		if (from_bemf && ignore_ina_presence) {
 8013db2:	79fb      	ldrb	r3, [r7, #7]
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d00a      	beq.n	8013dce <evt_entered_c2+0x46>
 8013db8:	4b1a      	ldr	r3, [pc, #104]	; (8013e24 <evt_entered_c2+0x9c>)
 8013dba:	781b      	ldrb	r3, [r3, #0]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d006      	beq.n	8013dce <evt_entered_c2+0x46>
			set_timer(tidx, tvar, TLEAVE_C1, TLEAVE_C1_VALUE);
 8013dc0:	2314      	movs	r3, #20
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	68b9      	ldr	r1, [r7, #8]
 8013dc6:	68f8      	ldr	r0, [r7, #12]
 8013dc8:	f7ff fcfa 	bl	80137c0 <set_timer>
 8013dcc:	e005      	b.n	8013dda <evt_entered_c2+0x52>
		} else {
			set_timer(tidx, tvar, TLEAVE_C1, TGUARD_C1_VALUE);
 8013dce:	2364      	movs	r3, #100	; 0x64
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	68b9      	ldr	r1, [r7, #8]
 8013dd4:	68f8      	ldr	r0, [r7, #12]
 8013dd6:	f7ff fcf3 	bl	80137c0 <set_timer>
		}
		set_block_addr_occupency(tvar->canton2_addr, occupied(tvar->_dir));
 8013dda:	68bb      	ldr	r3, [r7, #8]
 8013ddc:	799c      	ldrb	r4, [r3, #6]
 8013dde:	68bb      	ldr	r3, [r7, #8]
 8013de0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013de4:	4618      	mov	r0, r3
 8013de6:	f7ff ff6f 	bl	8013cc8 <occupied>
 8013dea:	4603      	mov	r3, r0
 8013dec:	4619      	mov	r1, r3
 8013dee:	4620      	mov	r0, r4
 8013df0:	f7ff ff40 	bl	8013c74 <set_block_addr_occupency>
		set_state(tidx, tvar, train_running_c1c2);
 8013df4:	2202      	movs	r2, #2
 8013df6:	68b9      	ldr	r1, [r7, #8]
 8013df8:	68f8      	ldr	r0, [r7, #12]
 8013dfa:	f7ff fbbf 	bl	801357c <set_state>
		break;
 8013dfe:	e00b      	b.n	8013e18 <evt_entered_c2+0x90>
	case train_running_c1c2:
		break;
	default:
		itm_debug2(DBG_ERR|DBG_CTRL, "bad st/1",tidx, tvar->_state);
 8013e00:	68bb      	ldr	r3, [r7, #8]
 8013e02:	785b      	ldrb	r3, [r3, #1]
 8013e04:	68fa      	ldr	r2, [r7, #12]
 8013e06:	4908      	ldr	r1, [pc, #32]	; (8013e28 <evt_entered_c2+0xa0>)
 8013e08:	4808      	ldr	r0, [pc, #32]	; (8013e2c <evt_entered_c2+0xa4>)
 8013e0a:	f7ff fabd 	bl	8013388 <itm_debug2>
		break;
 8013e0e:	bf00      	nop
 8013e10:	e002      	b.n	8013e18 <evt_entered_c2+0x90>
	if (from_bemf && ignore_bemf_presence) return;
 8013e12:	bf00      	nop
 8013e14:	e000      	b.n	8013e18 <evt_entered_c2+0x90>
		break;
 8013e16:	bf00      	nop
	}
}
 8013e18:	3714      	adds	r7, #20
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bd90      	pop	{r4, r7, pc}
 8013e1e:	bf00      	nop
 8013e20:	200051ef 	.word	0x200051ef
 8013e24:	20000232 	.word	0x20000232
 8013e28:	08019818 	.word	0x08019818
 8013e2c:	80000400 	.word	0x80000400

08013e30 <evt_leaved_c1>:

static void evt_leaved_c1(int tidx, train_ctrl_t *tvars)
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b082      	sub	sp, #8
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
 8013e38:	6039      	str	r1, [r7, #0]
	itm_debug2(DBG_CTRL, "evt_left_c1", tidx, tvars->_state);
 8013e3a:	683b      	ldr	r3, [r7, #0]
 8013e3c:	785b      	ldrb	r3, [r3, #1]
 8013e3e:	687a      	ldr	r2, [r7, #4]
 8013e40:	491c      	ldr	r1, [pc, #112]	; (8013eb4 <evt_leaved_c1+0x84>)
 8013e42:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013e46:	f7ff fa9f 	bl	8013388 <itm_debug2>
	switch (tvars->_state) {
 8013e4a:	683b      	ldr	r3, [r7, #0]
 8013e4c:	785b      	ldrb	r3, [r3, #1]
 8013e4e:	2b02      	cmp	r3, #2
 8013e50:	d123      	bne.n	8013e9a <evt_leaved_c1+0x6a>
	case train_running_c1c2:
		reset_timer(tidx, tvars, TLEAVE_C1);
 8013e52:	2200      	movs	r2, #0
 8013e54:	6839      	ldr	r1, [r7, #0]
 8013e56:	6878      	ldr	r0, [r7, #4]
 8013e58:	f7ff fc90 	bl	801377c <reset_timer>
		set_block_addr_occupency(tvars->canton1_addr, BLK_OCC_FREE);
 8013e5c:	683b      	ldr	r3, [r7, #0]
 8013e5e:	795b      	ldrb	r3, [r3, #5]
 8013e60:	2100      	movs	r1, #0
 8013e62:	4618      	mov	r0, r3
 8013e64:	f7ff ff06 	bl	8013c74 <set_block_addr_occupency>
		tvars->canton1_addr = tvars->canton2_addr;
 8013e68:	683b      	ldr	r3, [r7, #0]
 8013e6a:	799a      	ldrb	r2, [r3, #6]
 8013e6c:	683b      	ldr	r3, [r7, #0]
 8013e6e:	715a      	strb	r2, [r3, #5]
		tvars->canton2_addr = 0xFF;
 8013e70:	683b      	ldr	r3, [r7, #0]
 8013e72:	22ff      	movs	r2, #255	; 0xff
 8013e74:	719a      	strb	r2, [r3, #6]
		set_state(tidx, tvars, train_running_c1);
 8013e76:	2201      	movs	r2, #1
 8013e78:	6839      	ldr	r1, [r7, #0]
 8013e7a:	6878      	ldr	r0, [r7, #4]
 8013e7c:	f7ff fb7e 	bl	801357c <set_state>
		update_c2_state_limits(tidx, tvars, upd_c1c2);
 8013e80:	2202      	movs	r2, #2
 8013e82:	6839      	ldr	r1, [r7, #0]
 8013e84:	6878      	ldr	r0, [r7, #4]
 8013e86:	f000 fa0d 	bl	80142a4 <update_c2_state_limits>
		tvars->behaviour_flags |= BEHAVE_CHBKLK;
 8013e8a:	683b      	ldr	r3, [r7, #0]
 8013e8c:	899b      	ldrh	r3, [r3, #12]
 8013e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013e92:	b29a      	uxth	r2, r3
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	819a      	strh	r2, [r3, #12]
		break;
 8013e98:	e007      	b.n	8013eaa <evt_leaved_c1+0x7a>
	default:
		itm_debug2(DBG_ERR|DBG_CTRL, "bad st/2",tidx, tvars->_state);
 8013e9a:	683b      	ldr	r3, [r7, #0]
 8013e9c:	785b      	ldrb	r3, [r3, #1]
 8013e9e:	687a      	ldr	r2, [r7, #4]
 8013ea0:	4905      	ldr	r1, [pc, #20]	; (8013eb8 <evt_leaved_c1+0x88>)
 8013ea2:	4806      	ldr	r0, [pc, #24]	; (8013ebc <evt_leaved_c1+0x8c>)
 8013ea4:	f7ff fa70 	bl	8013388 <itm_debug2>
		break;
 8013ea8:	bf00      	nop
	}
}
 8013eaa:	bf00      	nop
 8013eac:	3708      	adds	r7, #8
 8013eae:	46bd      	mov	sp, r7
 8013eb0:	bd80      	pop	{r7, pc}
 8013eb2:	bf00      	nop
 8013eb4:	08019824 	.word	0x08019824
 8013eb8:	08019830 	.word	0x08019830
 8013ebc:	80000400 	.word	0x80000400

08013ec0 <evt_entered_c1>:

static void evt_entered_c1(int tidx, train_ctrl_t *tvars, _UNUSED_ uint8_t from_bemf)
{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b084      	sub	sp, #16
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	60f8      	str	r0, [r7, #12]
 8013ec8:	60b9      	str	r1, [r7, #8]
 8013eca:	4613      	mov	r3, r2
 8013ecc:	71fb      	strb	r3, [r7, #7]
	itm_debug2(DBG_CTRL, "enter C1", tidx, tvars->_state);
 8013ece:	68bb      	ldr	r3, [r7, #8]
 8013ed0:	785b      	ldrb	r3, [r3, #1]
 8013ed2:	68fa      	ldr	r2, [r7, #12]
 8013ed4:	4904      	ldr	r1, [pc, #16]	; (8013ee8 <evt_entered_c1+0x28>)
 8013ed6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013eda:	f7ff fa55 	bl	8013388 <itm_debug2>
}
 8013ede:	bf00      	nop
 8013ee0:	3710      	adds	r7, #16
 8013ee2:	46bd      	mov	sp, r7
 8013ee4:	bd80      	pop	{r7, pc}
 8013ee6:	bf00      	nop
 8013ee8:	0801983c 	.word	0x0801983c

08013eec <evt_leaved_c2>:
static void evt_leaved_c2(int tidx, train_ctrl_t *tvar)
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b082      	sub	sp, #8
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
 8013ef4:	6039      	str	r1, [r7, #0]
	itm_debug2(DBG_CTRL, "leave C2", tidx, tvar->_state);
 8013ef6:	683b      	ldr	r3, [r7, #0]
 8013ef8:	785b      	ldrb	r3, [r3, #1]
 8013efa:	687a      	ldr	r2, [r7, #4]
 8013efc:	4904      	ldr	r1, [pc, #16]	; (8013f10 <evt_leaved_c2+0x24>)
 8013efe:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013f02:	f7ff fa41 	bl	8013388 <itm_debug2>
}
 8013f06:	bf00      	nop
 8013f08:	3708      	adds	r7, #8
 8013f0a:	46bd      	mov	sp, r7
 8013f0c:	bd80      	pop	{r7, pc}
 8013f0e:	bf00      	nop
 8013f10:	08019848 	.word	0x08019848

08013f14 <evt_tleave>:

static void evt_tleave(int tidx, train_ctrl_t *tvars)
{
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b082      	sub	sp, #8
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]
 8013f1c:	6039      	str	r1, [r7, #0]
	if (ignore_ina_presence) {
 8013f1e:	4b15      	ldr	r3, [pc, #84]	; (8013f74 <evt_tleave+0x60>)
 8013f20:	781b      	ldrb	r3, [r3, #0]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d00b      	beq.n	8013f3e <evt_tleave+0x2a>
		itm_debug2(DBG_ERR|DBG_CTRL, "TLeave", tidx, tvars->_state);
 8013f26:	683b      	ldr	r3, [r7, #0]
 8013f28:	785b      	ldrb	r3, [r3, #1]
 8013f2a:	687a      	ldr	r2, [r7, #4]
 8013f2c:	4912      	ldr	r1, [pc, #72]	; (8013f78 <evt_tleave+0x64>)
 8013f2e:	4813      	ldr	r0, [pc, #76]	; (8013f7c <evt_tleave+0x68>)
 8013f30:	f7ff fa2a 	bl	8013388 <itm_debug2>
		evt_leaved_c1(tidx, tvars);
 8013f34:	6839      	ldr	r1, [r7, #0]
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	f7ff ff7a 	bl	8013e30 <evt_leaved_c1>
		// for now we do the same, but more to do for long trains
		evt_leaved_c1(tidx, tvars);
	} else {
		itm_debug2(DBG_ERR|DBG_CTRL, "TGurd/bdst", tidx, tvars->_state);
	}
}
 8013f3c:	e016      	b.n	8013f6c <evt_tleave+0x58>
	} else if (tvars->_state == train_running_c1c2){
 8013f3e:	683b      	ldr	r3, [r7, #0]
 8013f40:	785b      	ldrb	r3, [r3, #1]
 8013f42:	2b02      	cmp	r3, #2
 8013f44:	d10b      	bne.n	8013f5e <evt_tleave+0x4a>
		itm_debug2(DBG_ERR|DBG_CTRL, "TGuard", tidx, tvars->_state);
 8013f46:	683b      	ldr	r3, [r7, #0]
 8013f48:	785b      	ldrb	r3, [r3, #1]
 8013f4a:	687a      	ldr	r2, [r7, #4]
 8013f4c:	490c      	ldr	r1, [pc, #48]	; (8013f80 <evt_tleave+0x6c>)
 8013f4e:	480b      	ldr	r0, [pc, #44]	; (8013f7c <evt_tleave+0x68>)
 8013f50:	f7ff fa1a 	bl	8013388 <itm_debug2>
		evt_leaved_c1(tidx, tvars);
 8013f54:	6839      	ldr	r1, [r7, #0]
 8013f56:	6878      	ldr	r0, [r7, #4]
 8013f58:	f7ff ff6a 	bl	8013e30 <evt_leaved_c1>
}
 8013f5c:	e006      	b.n	8013f6c <evt_tleave+0x58>
		itm_debug2(DBG_ERR|DBG_CTRL, "TGurd/bdst", tidx, tvars->_state);
 8013f5e:	683b      	ldr	r3, [r7, #0]
 8013f60:	785b      	ldrb	r3, [r3, #1]
 8013f62:	687a      	ldr	r2, [r7, #4]
 8013f64:	4907      	ldr	r1, [pc, #28]	; (8013f84 <evt_tleave+0x70>)
 8013f66:	4805      	ldr	r0, [pc, #20]	; (8013f7c <evt_tleave+0x68>)
 8013f68:	f7ff fa0e 	bl	8013388 <itm_debug2>
}
 8013f6c:	bf00      	nop
 8013f6e:	3708      	adds	r7, #8
 8013f70:	46bd      	mov	sp, r7
 8013f72:	bd80      	pop	{r7, pc}
 8013f74:	20000232 	.word	0x20000232
 8013f78:	08019854 	.word	0x08019854
 8013f7c:	80000400 	.word	0x80000400
 8013f80:	0801985c 	.word	0x0801985c
 8013f84:	08019864 	.word	0x08019864

08013f88 <evt_cmd_set_setdirspeed>:

static void evt_cmd_set_setdirspeed(int tidx, train_ctrl_t *tvars, int8_t dir, uint16_t tspd, _UNUSED_ uint8_t generated)
{
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b088      	sub	sp, #32
 8013f8c:	af02      	add	r7, sp, #8
 8013f8e:	60f8      	str	r0, [r7, #12]
 8013f90:	60b9      	str	r1, [r7, #8]
 8013f92:	4611      	mov	r1, r2
 8013f94:	461a      	mov	r2, r3
 8013f96:	460b      	mov	r3, r1
 8013f98:	71fb      	strb	r3, [r7, #7]
 8013f9a:	4613      	mov	r3, r2
 8013f9c:	80bb      	strh	r3, [r7, #4]
	itm_debug3(DBG_CTRL, "dirspd", tidx, dir, tspd);
 8013f9e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8013fa2:	88bb      	ldrh	r3, [r7, #4]
 8013fa4:	9300      	str	r3, [sp, #0]
 8013fa6:	4613      	mov	r3, r2
 8013fa8:	68fa      	ldr	r2, [r7, #12]
 8013faa:	4973      	ldr	r1, [pc, #460]	; (8014178 <evt_cmd_set_setdirspeed+0x1f0>)
 8013fac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8013fb0:	f7ff fa06 	bl	80133c0 <itm_debug3>

	if (tvars->_state == train_off) {
 8013fb4:	68bb      	ldr	r3, [r7, #8]
 8013fb6:	785b      	ldrb	r3, [r3, #1]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d105      	bne.n	8013fc8 <evt_cmd_set_setdirspeed+0x40>
		itm_debug1(DBG_ERR|DBG_CTRL, "dir ch off", tidx);
 8013fbc:	68fa      	ldr	r2, [r7, #12]
 8013fbe:	496f      	ldr	r1, [pc, #444]	; (801417c <evt_cmd_set_setdirspeed+0x1f4>)
 8013fc0:	486f      	ldr	r0, [pc, #444]	; (8014180 <evt_cmd_set_setdirspeed+0x1f8>)
 8013fc2:	f7ff f9c7 	bl	8013354 <itm_debug1>
		return;
 8013fc6:	e0d4      	b.n	8014172 <evt_cmd_set_setdirspeed+0x1ea>
	}
	int8_t odir = tvars->_dir;
 8013fc8:	68bb      	ldr	r3, [r7, #8]
 8013fca:	791b      	ldrb	r3, [r3, #4]
 8013fcc:	75fb      	strb	r3, [r7, #23]
	uint16_t otspd = tvars->_target_speed;
 8013fce:	68bb      	ldr	r3, [r7, #8]
 8013fd0:	885b      	ldrh	r3, [r3, #2]
 8013fd2:	82bb      	strh	r3, [r7, #20]

	if (!dir && tspd) {
 8013fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d10a      	bne.n	8013ff2 <evt_cmd_set_setdirspeed+0x6a>
 8013fdc:	88bb      	ldrh	r3, [r7, #4]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d007      	beq.n	8013ff2 <evt_cmd_set_setdirspeed+0x6a>
		itm_debug2(DBG_ERR|DBG_CTRL, "dir0spd", tidx, tspd);
 8013fe2:	88bb      	ldrh	r3, [r7, #4]
 8013fe4:	68fa      	ldr	r2, [r7, #12]
 8013fe6:	4967      	ldr	r1, [pc, #412]	; (8014184 <evt_cmd_set_setdirspeed+0x1fc>)
 8013fe8:	4865      	ldr	r0, [pc, #404]	; (8014180 <evt_cmd_set_setdirspeed+0x1f8>)
 8013fea:	f7ff f9cd 	bl	8013388 <itm_debug2>
		tspd = 0;
 8013fee:	2300      	movs	r3, #0
 8013ff0:	80bb      	strh	r3, [r7, #4]
	}
	if (!tspd && dir) {
 8013ff2:	88bb      	ldrh	r3, [r7, #4]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d10c      	bne.n	8014012 <evt_cmd_set_setdirspeed+0x8a>
 8013ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d008      	beq.n	8014012 <evt_cmd_set_setdirspeed+0x8a>
		itm_debug2(DBG_ERR|DBG_CTRL, "spd0dir", tidx, dir);
 8014000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014004:	68fa      	ldr	r2, [r7, #12]
 8014006:	4960      	ldr	r1, [pc, #384]	; (8014188 <evt_cmd_set_setdirspeed+0x200>)
 8014008:	485d      	ldr	r0, [pc, #372]	; (8014180 <evt_cmd_set_setdirspeed+0x1f8>)
 801400a:	f7ff f9bd 	bl	8013388 <itm_debug2>
		dir = 0;
 801400e:	2300      	movs	r3, #0
 8014010:	71fb      	strb	r3, [r7, #7]
	}
	tvars->desired_speed = tspd;
 8014012:	68bb      	ldr	r3, [r7, #8]
 8014014:	88ba      	ldrh	r2, [r7, #4]
 8014016:	815a      	strh	r2, [r3, #10]

	if ((tspd == otspd) && (dir == odir)) {
 8014018:	88ba      	ldrh	r2, [r7, #4]
 801401a:	8abb      	ldrh	r3, [r7, #20]
 801401c:	429a      	cmp	r2, r3
 801401e:	d111      	bne.n	8014044 <evt_cmd_set_setdirspeed+0xbc>
 8014020:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014024:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014028:	429a      	cmp	r2, r3
 801402a:	d10b      	bne.n	8014044 <evt_cmd_set_setdirspeed+0xbc>
		// no change
		itm_debug3(DBG_CTRL, "dirspd/=", tidx, dir, tspd);
 801402c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014030:	88bb      	ldrh	r3, [r7, #4]
 8014032:	9300      	str	r3, [sp, #0]
 8014034:	4613      	mov	r3, r2
 8014036:	68fa      	ldr	r2, [r7, #12]
 8014038:	4954      	ldr	r1, [pc, #336]	; (801418c <evt_cmd_set_setdirspeed+0x204>)
 801403a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801403e:	f7ff f9bf 	bl	80133c0 <itm_debug3>
		return;
 8014042:	e096      	b.n	8014172 <evt_cmd_set_setdirspeed+0x1ea>
	}
	if ((tvars->_target_speed != 0) && (tvars->_dir != dir)) {
 8014044:	68bb      	ldr	r3, [r7, #8]
 8014046:	885b      	ldrh	r3, [r3, #2]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d016      	beq.n	801407a <evt_cmd_set_setdirspeed+0xf2>
 801404c:	68bb      	ldr	r3, [r7, #8]
 801404e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014052:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014056:	429a      	cmp	r2, r3
 8014058:	d00f      	beq.n	801407a <evt_cmd_set_setdirspeed+0xf2>
		itm_debug3(DBG_ERR|DBG_CTRL, "dir ch mov", tidx, dir, tvars->_target_speed);
 801405a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801405e:	68bb      	ldr	r3, [r7, #8]
 8014060:	885b      	ldrh	r3, [r3, #2]
 8014062:	9300      	str	r3, [sp, #0]
 8014064:	4613      	mov	r3, r2
 8014066:	68fa      	ldr	r2, [r7, #12]
 8014068:	4949      	ldr	r1, [pc, #292]	; (8014190 <evt_cmd_set_setdirspeed+0x208>)
 801406a:	4845      	ldr	r0, [pc, #276]	; (8014180 <evt_cmd_set_setdirspeed+0x1f8>)
 801406c:	f7ff f9a8 	bl	80133c0 <itm_debug3>
		set_state(tidx, tvars, train_station); // say it did stopped
 8014070:	2203      	movs	r2, #3
 8014072:	68b9      	ldr	r1, [r7, #8]
 8014074:	68f8      	ldr	r0, [r7, #12]
 8014076:	f7ff fa81 	bl	801357c <set_state>
		// change dir while not stopped... what do we do here ?
	}
	if ((tvars->_state == train_station) && dir && tspd) {
 801407a:	68bb      	ldr	r3, [r7, #8]
 801407c:	785b      	ldrb	r3, [r3, #1]
 801407e:	2b03      	cmp	r3, #3
 8014080:	d120      	bne.n	80140c4 <evt_cmd_set_setdirspeed+0x13c>
 8014082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d01c      	beq.n	80140c4 <evt_cmd_set_setdirspeed+0x13c>
 801408a:	88bb      	ldrh	r3, [r7, #4]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d019      	beq.n	80140c4 <evt_cmd_set_setdirspeed+0x13c>
		itm_debug1(DBG_CTRL, "quit stop", tidx);
 8014090:	68fa      	ldr	r2, [r7, #12]
 8014092:	4940      	ldr	r1, [pc, #256]	; (8014194 <evt_cmd_set_setdirspeed+0x20c>)
 8014094:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014098:	f7ff f95c 	bl	8013354 <itm_debug1>
		odir = 0;
 801409c:	2300      	movs	r3, #0
 801409e:	75fb      	strb	r3, [r7, #23]
		set_state(tidx, tvars, train_running_c1);
 80140a0:	2201      	movs	r2, #1
 80140a2:	68b9      	ldr	r1, [r7, #8]
 80140a4:	68f8      	ldr	r0, [r7, #12]
 80140a6:	f7ff fa69 	bl	801357c <set_state>
		set_block_addr_occupency(tvars->canton1_addr, (dir>0)? BLK_OCC_RIGHT:BLK_OCC_LEFT);
 80140aa:	68bb      	ldr	r3, [r7, #8]
 80140ac:	795a      	ldrb	r2, [r3, #5]
 80140ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	dd01      	ble.n	80140ba <evt_cmd_set_setdirspeed+0x132>
 80140b6:	2303      	movs	r3, #3
 80140b8:	e000      	b.n	80140bc <evt_cmd_set_setdirspeed+0x134>
 80140ba:	2302      	movs	r3, #2
 80140bc:	4619      	mov	r1, r3
 80140be:	4610      	mov	r0, r2
 80140c0:	f7ff fdd8 	bl	8013c74 <set_block_addr_occupency>
	}
	if (tvars->_state == train_running_c1c2 && (odir != dir) && dir) {
 80140c4:	68bb      	ldr	r3, [r7, #8]
 80140c6:	785b      	ldrb	r3, [r3, #1]
 80140c8:	2b02      	cmp	r3, #2
 80140ca:	d10e      	bne.n	80140ea <evt_cmd_set_setdirspeed+0x162>
 80140cc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80140d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80140d4:	429a      	cmp	r2, r3
 80140d6:	d008      	beq.n	80140ea <evt_cmd_set_setdirspeed+0x162>
 80140d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d004      	beq.n	80140ea <evt_cmd_set_setdirspeed+0x162>
		// special care here TODO when reversing change while in c1 to c2 transition
		// TODO
		itm_debug1(DBG_ERR|DBG_CTRL, "c1c2 rev!", tidx);
 80140e0:	68fa      	ldr	r2, [r7, #12]
 80140e2:	492d      	ldr	r1, [pc, #180]	; (8014198 <evt_cmd_set_setdirspeed+0x210>)
 80140e4:	4826      	ldr	r0, [pc, #152]	; (8014180 <evt_cmd_set_setdirspeed+0x1f8>)
 80140e6:	f7ff f935 	bl	8013354 <itm_debug1>
	}

	if (dir != odir) {
 80140ea:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80140ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80140f2:	429a      	cmp	r2, r3
 80140f4:	d025      	beq.n	8014142 <evt_cmd_set_setdirspeed+0x1ba>
		tvars->_dir = dir;
 80140f6:	68bb      	ldr	r3, [r7, #8]
 80140f8:	79fa      	ldrb	r2, [r7, #7]
 80140fa:	711a      	strb	r2, [r3, #4]
		if (!dir) {
 80140fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014100:	2b00      	cmp	r3, #0
 8014102:	d10c      	bne.n	801411e <evt_cmd_set_setdirspeed+0x196>
			itm_debug1(DBG_CTRL, "stopping", tidx);
 8014104:	68fa      	ldr	r2, [r7, #12]
 8014106:	4925      	ldr	r1, [pc, #148]	; (801419c <evt_cmd_set_setdirspeed+0x214>)
 8014108:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801410c:	f7ff f922 	bl	8013354 <itm_debug1>
			set_block_addr_occupency(tvars->canton1_addr, BLK_OCC_STOP);
 8014110:	68bb      	ldr	r3, [r7, #8]
 8014112:	795b      	ldrb	r3, [r3, #5]
 8014114:	2101      	movs	r1, #1
 8014116:	4618      	mov	r0, r3
 8014118:	f7ff fdac 	bl	8013c74 <set_block_addr_occupency>
 801411c:	e00c      	b.n	8014138 <evt_cmd_set_setdirspeed+0x1b0>
		} else {
			set_block_addr_occupency(tvars->canton1_addr, (dir>0)? BLK_OCC_RIGHT:BLK_OCC_LEFT);
 801411e:	68bb      	ldr	r3, [r7, #8]
 8014120:	795a      	ldrb	r2, [r3, #5]
 8014122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014126:	2b00      	cmp	r3, #0
 8014128:	dd01      	ble.n	801412e <evt_cmd_set_setdirspeed+0x1a6>
 801412a:	2303      	movs	r3, #3
 801412c:	e000      	b.n	8014130 <evt_cmd_set_setdirspeed+0x1a8>
 801412e:	2302      	movs	r3, #2
 8014130:	4619      	mov	r1, r3
 8014132:	4610      	mov	r0, r2
 8014134:	f7ff fd9e 	bl	8013c74 <set_block_addr_occupency>
		}
		update_c2_state_limits(tidx, tvars, upd_change_dir);
 8014138:	2201      	movs	r2, #1
 801413a:	68b9      	ldr	r1, [r7, #8]
 801413c:	68f8      	ldr	r0, [r7, #12]
 801413e:	f000 f8b1 	bl	80142a4 <update_c2_state_limits>
	}

	ctrl_set_dir(tidx, tvars, dir, 0);
 8014142:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014146:	2300      	movs	r3, #0
 8014148:	68b9      	ldr	r1, [r7, #8]
 801414a:	68f8      	ldr	r0, [r7, #12]
 801414c:	f000 fb42 	bl	80147d4 <ctrl_set_dir>

	if (tvars->_mode != train_fullmanual) {
 8014150:	68bb      	ldr	r3, [r7, #8]
 8014152:	781b      	ldrb	r3, [r3, #0]
 8014154:	2b02      	cmp	r3, #2
 8014156:	d006      	beq.n	8014166 <evt_cmd_set_setdirspeed+0x1de>
		tspd = MIN(tvars->spd_limit, tspd);
 8014158:	68bb      	ldr	r3, [r7, #8]
 801415a:	891b      	ldrh	r3, [r3, #8]
 801415c:	88ba      	ldrh	r2, [r7, #4]
 801415e:	4293      	cmp	r3, r2
 8014160:	bf28      	it	cs
 8014162:	4613      	movcs	r3, r2
 8014164:	80bb      	strh	r3, [r7, #4]
	}
	//ctrl_set_status(tidx, tspd ? train_running : train_station);
	ctrl_set_tspeed(tidx, tvars, tspd);
 8014166:	88bb      	ldrh	r3, [r7, #4]
 8014168:	461a      	mov	r2, r3
 801416a:	68b9      	ldr	r1, [r7, #8]
 801416c:	68f8      	ldr	r0, [r7, #12]
 801416e:	f000 fadd 	bl	801472c <ctrl_set_tspeed>
}
 8014172:	3718      	adds	r7, #24
 8014174:	46bd      	mov	sp, r7
 8014176:	bd80      	pop	{r7, pc}
 8014178:	08019870 	.word	0x08019870
 801417c:	08019878 	.word	0x08019878
 8014180:	80000400 	.word	0x80000400
 8014184:	08019884 	.word	0x08019884
 8014188:	0801988c 	.word	0x0801988c
 801418c:	08019894 	.word	0x08019894
 8014190:	080198a0 	.word	0x080198a0
 8014194:	080198ac 	.word	0x080198ac
 8014198:	080198b8 	.word	0x080198b8
 801419c:	080198c4 	.word	0x080198c4

080141a0 <evt_pose_triggered>:


static void evt_pose_triggered(int tidx, train_ctrl_t *tvar, uint8_t c_addr)
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b086      	sub	sp, #24
 80141a4:	af02      	add	r7, sp, #8
 80141a6:	60f8      	str	r0, [r7, #12]
 80141a8:	60b9      	str	r1, [r7, #8]
 80141aa:	4613      	mov	r3, r2
 80141ac:	71fb      	strb	r3, [r7, #7]
	itm_debug3(DBG_CTRL, "pose trgd", tidx, c_addr, tvar->_state);
 80141ae:	79fa      	ldrb	r2, [r7, #7]
 80141b0:	68bb      	ldr	r3, [r7, #8]
 80141b2:	785b      	ldrb	r3, [r3, #1]
 80141b4:	9300      	str	r3, [sp, #0]
 80141b6:	4613      	mov	r3, r2
 80141b8:	68fa      	ldr	r2, [r7, #12]
 80141ba:	491a      	ldr	r1, [pc, #104]	; (8014224 <evt_pose_triggered+0x84>)
 80141bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80141c0:	f7ff f8fe 	bl	80133c0 <itm_debug3>
	if (0==tidx) {
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d107      	bne.n	80141da <evt_pose_triggered+0x3a>
		itm_debug2(DBG_CTRL, "----trg0", c_addr, tvar->_state);
 80141ca:	79fa      	ldrb	r2, [r7, #7]
 80141cc:	68bb      	ldr	r3, [r7, #8]
 80141ce:	785b      	ldrb	r3, [r3, #1]
 80141d0:	4915      	ldr	r1, [pc, #84]	; (8014228 <evt_pose_triggered+0x88>)
 80141d2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80141d6:	f7ff f8d7 	bl	8013388 <itm_debug2>
	}
	switch (tvar->_state) {
 80141da:	68bb      	ldr	r3, [r7, #8]
 80141dc:	785b      	ldrb	r3, [r3, #1]
 80141de:	2b01      	cmp	r3, #1
 80141e0:	d115      	bne.n	801420e <evt_pose_triggered+0x6e>
	case train_running_c1:
		if (c_addr == tvar->canton1_addr) {
 80141e2:	68bb      	ldr	r3, [r7, #8]
 80141e4:	795b      	ldrb	r3, [r3, #5]
 80141e6:	79fa      	ldrb	r2, [r7, #7]
 80141e8:	429a      	cmp	r2, r3
 80141ea:	d105      	bne.n	80141f8 <evt_pose_triggered+0x58>
			update_c2_state_limits(tidx, tvar, upd_pose_trig);
 80141ec:	2203      	movs	r2, #3
 80141ee:	68b9      	ldr	r1, [r7, #8]
 80141f0:	68f8      	ldr	r0, [r7, #12]
 80141f2:	f000 f857 	bl	80142a4 <update_c2_state_limits>
			//hi_pose_triggered(tidx, tvar, _blk_addr_to_blk_num(c_addr));
			// TODO
		} else {
			itm_debug3(DBG_ERR|DBG_POSE|DBG_CTRL, "ptrg bad", tidx, c_addr, tvar->canton1_addr);
		}
		break;
 80141f6:	e011      	b.n	801421c <evt_pose_triggered+0x7c>
			itm_debug3(DBG_ERR|DBG_POSE|DBG_CTRL, "ptrg bad", tidx, c_addr, tvar->canton1_addr);
 80141f8:	79fa      	ldrb	r2, [r7, #7]
 80141fa:	68bb      	ldr	r3, [r7, #8]
 80141fc:	795b      	ldrb	r3, [r3, #5]
 80141fe:	9300      	str	r3, [sp, #0]
 8014200:	4613      	mov	r3, r2
 8014202:	68fa      	ldr	r2, [r7, #12]
 8014204:	4909      	ldr	r1, [pc, #36]	; (801422c <evt_pose_triggered+0x8c>)
 8014206:	480a      	ldr	r0, [pc, #40]	; (8014230 <evt_pose_triggered+0x90>)
 8014208:	f7ff f8da 	bl	80133c0 <itm_debug3>
		break;
 801420c:	e006      	b.n	801421c <evt_pose_triggered+0x7c>
	default:
		itm_debug2(DBG_ERR|DBG_CTRL, "bad st/3",tidx, tvar->_state);
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	785b      	ldrb	r3, [r3, #1]
 8014212:	68fa      	ldr	r2, [r7, #12]
 8014214:	4907      	ldr	r1, [pc, #28]	; (8014234 <evt_pose_triggered+0x94>)
 8014216:	4808      	ldr	r0, [pc, #32]	; (8014238 <evt_pose_triggered+0x98>)
 8014218:	f7ff f8b6 	bl	8013388 <itm_debug2>
	}
}
 801421c:	bf00      	nop
 801421e:	3710      	adds	r7, #16
 8014220:	46bd      	mov	sp, r7
 8014222:	bd80      	pop	{r7, pc}
 8014224:	080198d0 	.word	0x080198d0
 8014228:	080198dc 	.word	0x080198dc
 801422c:	080198e8 	.word	0x080198e8
 8014230:	80002400 	.word	0x80002400
 8014234:	080198f4 	.word	0x080198f4
 8014238:	80000400 	.word	0x80000400

0801423c <evt_timer>:




static void evt_timer(int tidx, train_ctrl_t *tvar, int tnum)
{
 801423c:	b580      	push	{r7, lr}
 801423e:	b084      	sub	sp, #16
 8014240:	af00      	add	r7, sp, #0
 8014242:	60f8      	str	r0, [r7, #12]
 8014244:	60b9      	str	r1, [r7, #8]
 8014246:	607a      	str	r2, [r7, #4]
	itm_debug2(DBG_CTRL, "timer evt", tidx, tnum);
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	68fa      	ldr	r2, [r7, #12]
 801424c:	4912      	ldr	r1, [pc, #72]	; (8014298 <evt_timer+0x5c>)
 801424e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014252:	f7ff f899 	bl	8013388 <itm_debug2>
	switch (tnum) {
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d002      	beq.n	8014262 <evt_timer+0x26>
 801425c:	2b01      	cmp	r3, #1
 801425e:	d005      	beq.n	801426c <evt_timer+0x30>
 8014260:	e00c      	b.n	801427c <evt_timer+0x40>
	case TLEAVE_C1:
		evt_tleave(tidx, tvar);
 8014262:	68b9      	ldr	r1, [r7, #8]
 8014264:	68f8      	ldr	r0, [r7, #12]
 8014266:	f7ff fe55 	bl	8013f14 <evt_tleave>
		break;
 801426a:	e010      	b.n	801428e <evt_timer+0x52>
	case TBEHAVE:
		tvar->behaviour_flags |= BEHAVE_TBEHAVE;
 801426c:	68bb      	ldr	r3, [r7, #8]
 801426e:	899b      	ldrh	r3, [r3, #12]
 8014270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014274:	b29a      	uxth	r2, r3
 8014276:	68bb      	ldr	r3, [r7, #8]
 8014278:	819a      	strh	r2, [r3, #12]
		break;
 801427a:	e008      	b.n	801428e <evt_timer+0x52>
	default:
		itm_debug2(DBG_ERR|DBG_CTRL, "?TIM", tidx, tnum);
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	68fa      	ldr	r2, [r7, #12]
 8014280:	4906      	ldr	r1, [pc, #24]	; (801429c <evt_timer+0x60>)
 8014282:	4807      	ldr	r0, [pc, #28]	; (80142a0 <evt_timer+0x64>)
 8014284:	f7ff f880 	bl	8013388 <itm_debug2>
		fatal();
 8014288:	f7ff f960 	bl	801354c <fatal>
		break;
 801428c:	bf00      	nop
	}
}
 801428e:	bf00      	nop
 8014290:	3710      	adds	r7, #16
 8014292:	46bd      	mov	sp, r7
 8014294:	bd80      	pop	{r7, pc}
 8014296:	bf00      	nop
 8014298:	08019900 	.word	0x08019900
 801429c:	0801990c 	.word	0x0801990c
 80142a0:	80000400 	.word	0x80000400

080142a4 <update_c2_state_limits>:




static void update_c2_state_limits(int tidx, train_ctrl_t *tvars, update_reason_t updreason)
{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b092      	sub	sp, #72	; 0x48
 80142a8:	af02      	add	r7, sp, #8
 80142aa:	60f8      	str	r0, [r7, #12]
 80142ac:	60b9      	str	r1, [r7, #8]
 80142ae:	4613      	mov	r3, r2
 80142b0:	71fb      	strb	r3, [r7, #7]
	itm_debug3(DBG_CTRLHI, "UPDC2", tidx, tvars->canton1_addr, updreason);
 80142b2:	68bb      	ldr	r3, [r7, #8]
 80142b4:	795b      	ldrb	r3, [r3, #5]
 80142b6:	461a      	mov	r2, r3
 80142b8:	79fb      	ldrb	r3, [r7, #7]
 80142ba:	9300      	str	r3, [sp, #0]
 80142bc:	4613      	mov	r3, r2
 80142be:	68fa      	ldr	r2, [r7, #12]
 80142c0:	4998      	ldr	r1, [pc, #608]	; (8014524 <update_c2_state_limits+0x280>)
 80142c2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80142c6:	f7ff f87b 	bl	80133c0 <itm_debug3>
	uint8_t c2addr = 0xFF;
 80142ca:	23ff      	movs	r3, #255	; 0xff
 80142cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint16_t olim = tvars->spd_limit;
 80142d0:	68bb      	ldr	r3, [r7, #8]
 80142d2:	891b      	ldrh	r3, [r3, #8]
 80142d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint32_t posetval = 0;
 80142d6:	2300      	movs	r3, #0
 80142d8:	63bb      	str	r3, [r7, #56]	; 0x38

	if (updreason == upd_pose_trig) tvars->behaviour_flags |= BEHAVE_PTRIG;
 80142da:	79fb      	ldrb	r3, [r7, #7]
 80142dc:	2b03      	cmp	r3, #3
 80142de:	d106      	bne.n	80142ee <update_c2_state_limits+0x4a>
 80142e0:	68bb      	ldr	r3, [r7, #8]
 80142e2:	899b      	ldrh	r3, [r3, #12]
 80142e4:	f043 0320 	orr.w	r3, r3, #32
 80142e8:	b29a      	uxth	r2, r3
 80142ea:	68bb      	ldr	r3, [r7, #8]
 80142ec:	819a      	strh	r2, [r3, #12]

	if ((tidx==1) && (tvars->canton1_addr==0x02) && (tvars->canton2_addr==0x01)) {
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	2b01      	cmp	r3, #1
 80142f2:	d10d      	bne.n	8014310 <update_c2_state_limits+0x6c>
 80142f4:	68bb      	ldr	r3, [r7, #8]
 80142f6:	795b      	ldrb	r3, [r3, #5]
 80142f8:	2b02      	cmp	r3, #2
 80142fa:	d109      	bne.n	8014310 <update_c2_state_limits+0x6c>
 80142fc:	68bb      	ldr	r3, [r7, #8]
 80142fe:	799b      	ldrb	r3, [r3, #6]
 8014300:	2b01      	cmp	r3, #1
 8014302:	d105      	bne.n	8014310 <update_c2_state_limits+0x6c>
		itm_debug1(DBG_CTRL, "hop", tidx);
 8014304:	68fa      	ldr	r2, [r7, #12]
 8014306:	4988      	ldr	r1, [pc, #544]	; (8014528 <update_c2_state_limits+0x284>)
 8014308:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801430c:	f7ff f822 	bl	8013354 <itm_debug1>
	}
	switch (tvars->_state) {
 8014310:	68bb      	ldr	r3, [r7, #8]
 8014312:	785b      	ldrb	r3, [r3, #1]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d007      	beq.n	8014328 <update_c2_state_limits+0x84>
 8014318:	2b03      	cmp	r3, #3
 801431a:	d005      	beq.n	8014328 <update_c2_state_limits+0x84>
		tvars->_target_speed = 0;
		if (tvars->canton2_addr != 0xFF) set_block_addr_occupency(tvars->canton2_addr, BLK_OCC_FREE);
		tvars->canton2_addr = 0xFF;
		goto sendlow;
	default:
		break;
 801431c:	bf00      	nop
	}
	if (tvars->canton1_addr == 0xFF) {
 801431e:	68bb      	ldr	r3, [r7, #8]
 8014320:	795b      	ldrb	r3, [r3, #5]
 8014322:	2bff      	cmp	r3, #255	; 0xff
 8014324:	d11a      	bne.n	801435c <update_c2_state_limits+0xb8>
 8014326:	e013      	b.n	8014350 <update_c2_state_limits+0xac>
		tvars->_dir = 0;
 8014328:	68bb      	ldr	r3, [r7, #8]
 801432a:	2200      	movs	r2, #0
 801432c:	711a      	strb	r2, [r3, #4]
		tvars->_target_speed = 0;
 801432e:	68bb      	ldr	r3, [r7, #8]
 8014330:	2200      	movs	r2, #0
 8014332:	805a      	strh	r2, [r3, #2]
		if (tvars->canton2_addr != 0xFF) set_block_addr_occupency(tvars->canton2_addr, BLK_OCC_FREE);
 8014334:	68bb      	ldr	r3, [r7, #8]
 8014336:	799b      	ldrb	r3, [r3, #6]
 8014338:	2bff      	cmp	r3, #255	; 0xff
 801433a:	d005      	beq.n	8014348 <update_c2_state_limits+0xa4>
 801433c:	68bb      	ldr	r3, [r7, #8]
 801433e:	799b      	ldrb	r3, [r3, #6]
 8014340:	2100      	movs	r1, #0
 8014342:	4618      	mov	r0, r3
 8014344:	f7ff fc96 	bl	8013c74 <set_block_addr_occupency>
		tvars->canton2_addr = 0xFF;
 8014348:	68bb      	ldr	r3, [r7, #8]
 801434a:	22ff      	movs	r2, #255	; 0xff
 801434c:	719a      	strb	r2, [r3, #6]
		goto sendlow;
 801434e:	e157      	b.n	8014600 <update_c2_state_limits+0x35c>
		itm_debug1(DBG_ERR|DBG_CTRL, "*** NO C1", tidx);
 8014350:	68fa      	ldr	r2, [r7, #12]
 8014352:	4976      	ldr	r1, [pc, #472]	; (801452c <update_c2_state_limits+0x288>)
 8014354:	4876      	ldr	r0, [pc, #472]	; (8014530 <update_c2_state_limits+0x28c>)
 8014356:	f7fe fffd 	bl	8013354 <itm_debug1>
		return;
 801435a:	e1d9      	b.n	8014710 <update_c2_state_limits+0x46c>
	}
	if (!tvars->_dir) {
 801435c:	68bb      	ldr	r3, [r7, #8]
 801435e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d11c      	bne.n	80143a0 <update_c2_state_limits+0xfc>
		set_state(tidx, tvars, train_station);
 8014366:	2203      	movs	r2, #3
 8014368:	68b9      	ldr	r1, [r7, #8]
 801436a:	68f8      	ldr	r0, [r7, #12]
 801436c:	f7ff f906 	bl	801357c <set_state>
		tvars->behaviour_flags |= BEHAVE_STOPPED;
 8014370:	68bb      	ldr	r3, [r7, #8]
 8014372:	899b      	ldrh	r3, [r3, #12]
 8014374:	f043 0302 	orr.w	r3, r3, #2
 8014378:	b29a      	uxth	r2, r3
 801437a:	68bb      	ldr	r3, [r7, #8]
 801437c:	819a      	strh	r2, [r3, #12]
		tvars->_target_speed = 0;
 801437e:	68bb      	ldr	r3, [r7, #8]
 8014380:	2200      	movs	r2, #0
 8014382:	805a      	strh	r2, [r3, #2]
		if (tvars->canton2_addr != 0xFF) set_block_addr_occupency(tvars->canton2_addr, BLK_OCC_FREE);
 8014384:	68bb      	ldr	r3, [r7, #8]
 8014386:	799b      	ldrb	r3, [r3, #6]
 8014388:	2bff      	cmp	r3, #255	; 0xff
 801438a:	d005      	beq.n	8014398 <update_c2_state_limits+0xf4>
 801438c:	68bb      	ldr	r3, [r7, #8]
 801438e:	799b      	ldrb	r3, [r3, #6]
 8014390:	2100      	movs	r1, #0
 8014392:	4618      	mov	r0, r3
 8014394:	f7ff fc6e 	bl	8013c74 <set_block_addr_occupency>
		tvars->canton2_addr = 0xFF;
 8014398:	68bb      	ldr	r3, [r7, #8]
 801439a:	22ff      	movs	r2, #255	; 0xff
 801439c:	719a      	strb	r2, [r3, #6]
		goto sendlow;
 801439e:	e12f      	b.n	8014600 <update_c2_state_limits+0x35c>
	}
	int c1num = _blk_addr_to_blk_num(tvars->canton1_addr);
 80143a0:	68bb      	ldr	r3, [r7, #8]
 80143a2:	795b      	ldrb	r3, [r3, #5]
 80143a4:	4618      	mov	r0, r3
 80143a6:	f7ff f864 	bl	8013472 <_blk_addr_to_blk_num>
 80143aa:	62b8      	str	r0, [r7, #40]	; 0x28
	int c2num = _next_block_num(c1num, (tvars->_dir<0));
 80143ac:	68bb      	ldr	r3, [r7, #8]
 80143ae:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80143b2:	b2db      	uxtb	r3, r3
 80143b4:	09db      	lsrs	r3, r3, #7
 80143b6:	b2db      	uxtb	r3, r3
 80143b8:	4619      	mov	r1, r3
 80143ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80143bc:	f004 fc1d 	bl	8018bfa <_next_block_num>
 80143c0:	6378      	str	r0, [r7, #52]	; 0x34

	itm_debug3(DBG_CTRL, "prev c1c2", tidx, tvars->canton1_addr, tvars->canton2_addr);
 80143c2:	68bb      	ldr	r3, [r7, #8]
 80143c4:	795b      	ldrb	r3, [r3, #5]
 80143c6:	461a      	mov	r2, r3
 80143c8:	68bb      	ldr	r3, [r7, #8]
 80143ca:	799b      	ldrb	r3, [r3, #6]
 80143cc:	9300      	str	r3, [sp, #0]
 80143ce:	4613      	mov	r3, r2
 80143d0:	68fa      	ldr	r2, [r7, #12]
 80143d2:	4958      	ldr	r1, [pc, #352]	; (8014534 <update_c2_state_limits+0x290>)
 80143d4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80143d8:	f7fe fff2 	bl	80133c0 <itm_debug3>
	itm_debug3(DBG_CTRL, "c1c2num", tidx, c1num, c2num);
 80143dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143de:	9300      	str	r3, [sp, #0]
 80143e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143e2:	68fa      	ldr	r2, [r7, #12]
 80143e4:	4954      	ldr	r1, [pc, #336]	; (8014538 <update_c2_state_limits+0x294>)
 80143e6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80143ea:	f7fe ffe9 	bl	80133c0 <itm_debug3>

	if (c2num < 0) {
 80143ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	da3f      	bge.n	8014474 <update_c2_state_limits+0x1d0>
		// end of track
		if (updreason == upd_c1c2) {
 80143f4:	79fb      	ldrb	r3, [r7, #7]
 80143f6:	2b02      	cmp	r3, #2
 80143f8:	d122      	bne.n	8014440 <update_c2_state_limits+0x19c>
			itm_debug1(DBG_CTRL, "eot", tidx);
 80143fa:	68fa      	ldr	r2, [r7, #12]
 80143fc:	494f      	ldr	r1, [pc, #316]	; (801453c <update_c2_state_limits+0x298>)
 80143fe:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014402:	f7fe ffa7 	bl	8013354 <itm_debug1>
			tvars->spd_limit = EOT_SPD_LIMIT;//			set_speed_limit(tn, 20);
 8014406:	68bb      	ldr	r3, [r7, #8]
 8014408:	2232      	movs	r2, #50	; 0x32
 801440a:	811a      	strh	r2, [r3, #8]
			const train_config_t *tconf = get_train_cnf(tidx);
 801440c:	68f8      	ldr	r0, [r7, #12]
 801440e:	f001 fdf7 	bl	8016000 <get_train_cnf>
 8014412:	6238      	str	r0, [r7, #32]
			posetval = pose_middle(_blk_addr_to_blk_num(tvars->canton1_addr), tconf, tvars->_dir);
 8014414:	68bb      	ldr	r3, [r7, #8]
 8014416:	795b      	ldrb	r3, [r3, #5]
 8014418:	4618      	mov	r0, r3
 801441a:	f7ff f82a 	bl	8013472 <_blk_addr_to_blk_num>
 801441e:	68bb      	ldr	r3, [r7, #8]
 8014420:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014424:	461a      	mov	r2, r3
 8014426:	6a39      	ldr	r1, [r7, #32]
 8014428:	f000 fa54 	bl	80148d4 <pose_middle>
 801442c:	4603      	mov	r3, r0
 801442e:	63bb      	str	r3, [r7, #56]	; 0x38
			tvars->behaviour_flags |= BEHAVE_EOT1;
 8014430:	68bb      	ldr	r3, [r7, #8]
 8014432:	899b      	ldrh	r3, [r3, #12]
 8014434:	f043 0304 	orr.w	r3, r3, #4
 8014438:	b29a      	uxth	r2, r3
 801443a:	68bb      	ldr	r3, [r7, #8]
 801443c:	819a      	strh	r2, [r3, #12]
 801443e:	e0bf      	b.n	80145c0 <update_c2_state_limits+0x31c>
		} else if (updreason == upd_pose_trig) {
 8014440:	79fb      	ldrb	r3, [r7, #7]
 8014442:	2b03      	cmp	r3, #3
 8014444:	f040 80bc 	bne.w	80145c0 <update_c2_state_limits+0x31c>
			itm_debug1(DBG_CTRL, "eot2", tidx);
 8014448:	68fa      	ldr	r2, [r7, #12]
 801444a:	493d      	ldr	r1, [pc, #244]	; (8014540 <update_c2_state_limits+0x29c>)
 801444c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014450:	f7fe ff80 	bl	8013354 <itm_debug1>
			set_state(tidx, tvars, train_end_of_track);
 8014454:	2205      	movs	r2, #5
 8014456:	68b9      	ldr	r1, [r7, #8]
 8014458:	68f8      	ldr	r0, [r7, #12]
 801445a:	f7ff f88f 	bl	801357c <set_state>
			tvars->spd_limit = 0;
 801445e:	68bb      	ldr	r3, [r7, #8]
 8014460:	2200      	movs	r2, #0
 8014462:	811a      	strh	r2, [r3, #8]
			tvars->behaviour_flags |= BEHAVE_EOT2;
 8014464:	68bb      	ldr	r3, [r7, #8]
 8014466:	899b      	ldrh	r3, [r3, #12]
 8014468:	f043 0308 	orr.w	r3, r3, #8
 801446c:	b29a      	uxth	r2, r3
 801446e:	68bb      	ldr	r3, [r7, #8]
 8014470:	819a      	strh	r2, [r3, #12]
 8014472:	e0a5      	b.n	80145c0 <update_c2_state_limits+0x31c>
		}
	} else {
		switch (blk_occup[c2num]) {
 8014474:	4a33      	ldr	r2, [pc, #204]	; (8014544 <update_c2_state_limits+0x2a0>)
 8014476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014478:	4413      	add	r3, r2
 801447a:	781b      	ldrb	r3, [r3, #0]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d002      	beq.n	8014486 <update_c2_state_limits+0x1e2>
 8014480:	2b04      	cmp	r3, #4
 8014482:	d046      	beq.n	8014512 <update_c2_state_limits+0x26e>
 8014484:	e026      	b.n	80144d4 <update_c2_state_limits+0x230>
			case BLK_OCC_FREE:
				itm_debug2(DBG_CTRL, "free", tidx, c2num);
 8014486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014488:	68fa      	ldr	r2, [r7, #12]
 801448a:	492f      	ldr	r1, [pc, #188]	; (8014548 <update_c2_state_limits+0x2a4>)
 801448c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014490:	f7fe ff7a 	bl	8013388 <itm_debug2>
				tvars->spd_limit = 100; //set_speed_limit(tidx, 100);
 8014494:	68bb      	ldr	r3, [r7, #8]
 8014496:	2264      	movs	r2, #100	; 0x64
 8014498:	811a      	strh	r2, [r3, #8]
				switch (tvars->_state) {
 801449a:	68bb      	ldr	r3, [r7, #8]
 801449c:	785b      	ldrb	r3, [r3, #1]
 801449e:	2b01      	cmp	r3, #1
 80144a0:	d016      	beq.n	80144d0 <update_c2_state_limits+0x22c>
 80144a2:	2b04      	cmp	r3, #4
 80144a4:	d10c      	bne.n	80144c0 <update_c2_state_limits+0x21c>
				case train_running_c1:
					break;
				case train_blk_wait:
					set_state(tidx, tvars, train_running_c1);
 80144a6:	2201      	movs	r2, #1
 80144a8:	68b9      	ldr	r1, [r7, #8]
 80144aa:	68f8      	ldr	r0, [r7, #12]
 80144ac:	f7ff f866 	bl	801357c <set_state>
					tvars->behaviour_flags |= BEHAVE_RESTARTBLK;
 80144b0:	68bb      	ldr	r3, [r7, #8]
 80144b2:	899b      	ldrh	r3, [r3, #12]
 80144b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80144b8:	b29a      	uxth	r2, r3
 80144ba:	68bb      	ldr	r3, [r7, #8]
 80144bc:	819a      	strh	r2, [r3, #12]
					break;
 80144be:	e008      	b.n	80144d2 <update_c2_state_limits+0x22e>
				default:
					itm_debug2(DBG_ERR|DBG_CTRL, "bad st/4", tidx, tvars->_state);
 80144c0:	68bb      	ldr	r3, [r7, #8]
 80144c2:	785b      	ldrb	r3, [r3, #1]
 80144c4:	68fa      	ldr	r2, [r7, #12]
 80144c6:	4921      	ldr	r1, [pc, #132]	; (801454c <update_c2_state_limits+0x2a8>)
 80144c8:	4819      	ldr	r0, [pc, #100]	; (8014530 <update_c2_state_limits+0x28c>)
 80144ca:	f7fe ff5d 	bl	8013388 <itm_debug2>
					break;
 80144ce:	e000      	b.n	80144d2 <update_c2_state_limits+0x22e>
					break;
 80144d0:	bf00      	nop
				}
				break;
 80144d2:	e075      	b.n	80145c0 <update_c2_state_limits+0x31c>
			default:
			case BLK_OCC_RIGHT:
			case BLK_OCC_LEFT:
			case BLK_OCC_STOP:
				itm_debug3(DBG_CTRL, "occ", tidx, c2num, blk_occup[c2num]);
 80144d4:	4a1b      	ldr	r2, [pc, #108]	; (8014544 <update_c2_state_limits+0x2a0>)
 80144d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144d8:	4413      	add	r3, r2
 80144da:	781b      	ldrb	r3, [r3, #0]
 80144dc:	9300      	str	r3, [sp, #0]
 80144de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144e0:	68fa      	ldr	r2, [r7, #12]
 80144e2:	491b      	ldr	r1, [pc, #108]	; (8014550 <update_c2_state_limits+0x2ac>)
 80144e4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80144e8:	f7fe ff6a 	bl	80133c0 <itm_debug3>
				set_state(tidx, tvars, train_blk_wait);
 80144ec:	2204      	movs	r2, #4
 80144ee:	68b9      	ldr	r1, [r7, #8]
 80144f0:	68f8      	ldr	r0, [r7, #12]
 80144f2:	f7ff f843 	bl	801357c <set_state>
				tvars->behaviour_flags |= BEHAVE_BLKW;
 80144f6:	68bb      	ldr	r3, [r7, #8]
 80144f8:	899b      	ldrh	r3, [r3, #12]
 80144fa:	f043 0310 	orr.w	r3, r3, #16
 80144fe:	b29a      	uxth	r2, r3
 8014500:	68bb      	ldr	r3, [r7, #8]
 8014502:	819a      	strh	r2, [r3, #12]
				c2num = -1;
 8014504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014508:	637b      	str	r3, [r7, #52]	; 0x34
				tvars->spd_limit = 0;
 801450a:	68bb      	ldr	r3, [r7, #8]
 801450c:	2200      	movs	r2, #0
 801450e:	811a      	strh	r2, [r3, #8]
				break;
 8014510:	e056      	b.n	80145c0 <update_c2_state_limits+0x31c>
			case BLK_OCC_C2: {
			    uint8_t c2addr = (c2num>=0) ? _blk_num_to_blk_addr(c2num) : 0xFF;
 8014512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014514:	2b00      	cmp	r3, #0
 8014516:	db1d      	blt.n	8014554 <update_c2_state_limits+0x2b0>
 8014518:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801451a:	f7fe ffc7 	bl	80134ac <_blk_num_to_blk_addr>
 801451e:	4603      	mov	r3, r0
 8014520:	e019      	b.n	8014556 <update_c2_state_limits+0x2b2>
 8014522:	bf00      	nop
 8014524:	08019914 	.word	0x08019914
 8014528:	0801991c 	.word	0x0801991c
 801452c:	08019920 	.word	0x08019920
 8014530:	80000400 	.word	0x80000400
 8014534:	0801992c 	.word	0x0801992c
 8014538:	08019938 	.word	0x08019938
 801453c:	08019940 	.word	0x08019940
 8014540:	08019944 	.word	0x08019944
 8014544:	200052b4 	.word	0x200052b4
 8014548:	0801994c 	.word	0x0801994c
 801454c:	08019954 	.word	0x08019954
 8014550:	08019960 	.word	0x08019960
 8014554:	23ff      	movs	r3, #255	; 0xff
 8014556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			    if (c2addr == tvars->canton2_addr) {
 801455a:	68bb      	ldr	r3, [r7, #8]
 801455c:	799b      	ldrb	r3, [r3, #6]
 801455e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014562:	429a      	cmp	r2, r3
 8014564:	d02b      	beq.n	80145be <update_c2_state_limits+0x31a>
			    	// normal case, same C2
			    	break;
			    } else if (tvars->canton2_addr != 0xFF) {
 8014566:	68bb      	ldr	r3, [r7, #8]
 8014568:	799b      	ldrb	r3, [r3, #6]
 801456a:	2bff      	cmp	r3, #255	; 0xff
 801456c:	d014      	beq.n	8014598 <update_c2_state_limits+0x2f4>
			    	// change C2. Can this occur ? if turnout is changed
			    	// but turnout should not be changed if C2 already set
			    	itm_debug3(DBG_ERR|DBG_CTRL, "C2 change", tidx, tvars->canton2_addr, c2addr);
 801456e:	68bb      	ldr	r3, [r7, #8]
 8014570:	799b      	ldrb	r3, [r3, #6]
 8014572:	461a      	mov	r2, r3
 8014574:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014578:	9300      	str	r3, [sp, #0]
 801457a:	4613      	mov	r3, r2
 801457c:	68fa      	ldr	r2, [r7, #12]
 801457e:	4966      	ldr	r1, [pc, #408]	; (8014718 <update_c2_state_limits+0x474>)
 8014580:	4866      	ldr	r0, [pc, #408]	; (801471c <update_c2_state_limits+0x478>)
 8014582:	f7fe ff1d 	bl	80133c0 <itm_debug3>
			    	set_block_addr_occupency(tvars->canton2_addr, BLK_OCC_FREE);
 8014586:	68bb      	ldr	r3, [r7, #8]
 8014588:	799b      	ldrb	r3, [r3, #6]
 801458a:	2100      	movs	r1, #0
 801458c:	4618      	mov	r0, r3
 801458e:	f7ff fb71 	bl	8013c74 <set_block_addr_occupency>
			    	tvars->canton2_addr = 0xFF;
 8014592:	68bb      	ldr	r3, [r7, #8]
 8014594:	22ff      	movs	r2, #255	; 0xff
 8014596:	719a      	strb	r2, [r3, #6]
			    }
			    // occupied
				itm_debug2(DBG_CTRL, "OCC C2", tidx, c2num);
 8014598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801459a:	68fa      	ldr	r2, [r7, #12]
 801459c:	4960      	ldr	r1, [pc, #384]	; (8014720 <update_c2_state_limits+0x47c>)
 801459e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80145a2:	f7fe fef1 	bl	8013388 <itm_debug2>
				set_state(tidx, tvars, train_blk_wait);
 80145a6:	2204      	movs	r2, #4
 80145a8:	68b9      	ldr	r1, [r7, #8]
 80145aa:	68f8      	ldr	r0, [r7, #12]
 80145ac:	f7fe ffe6 	bl	801357c <set_state>
				c2num = - 1;
 80145b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80145b4:	637b      	str	r3, [r7, #52]	; 0x34
				tvars->spd_limit = 0;
 80145b6:	68bb      	ldr	r3, [r7, #8]
 80145b8:	2200      	movs	r2, #0
 80145ba:	811a      	strh	r2, [r3, #8]
				break;
 80145bc:	e000      	b.n	80145c0 <update_c2_state_limits+0x31c>
			    	break;
 80145be:	bf00      	nop
			}
		}
	}
	if (c2num>=0) {
 80145c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	db11      	blt.n	80145ea <update_c2_state_limits+0x346>
		// sanity check, can be removed (TODO)
		if ((get_block_num_occupency(c2num) != BLK_OCC_FREE)
 80145c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80145c8:	f7ff fb6a 	bl	8013ca0 <get_block_num_occupency>
 80145cc:	4603      	mov	r3, r0
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d007      	beq.n	80145e2 <update_c2_state_limits+0x33e>
				&& (get_block_num_occupency(c2num) != BLK_OCC_C2))fatal();
 80145d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80145d4:	f7ff fb64 	bl	8013ca0 <get_block_num_occupency>
 80145d8:	4603      	mov	r3, r0
 80145da:	2b04      	cmp	r3, #4
 80145dc:	d001      	beq.n	80145e2 <update_c2_state_limits+0x33e>
 80145de:	f7fe ffb5 	bl	801354c <fatal>
		set_block_num_occupency(c2num, BLK_OCC_C2);
 80145e2:	2104      	movs	r1, #4
 80145e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80145e6:	f7ff faf7 	bl	8013bd8 <set_block_num_occupency>
	}
    c2addr = (c2num>=0) ? _blk_num_to_blk_addr(c2num) : 0xFF;
 80145ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	db04      	blt.n	80145fa <update_c2_state_limits+0x356>
 80145f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80145f2:	f7fe ff5b 	bl	80134ac <_blk_num_to_blk_addr>
 80145f6:	4603      	mov	r3, r0
 80145f8:	e000      	b.n	80145fc <update_c2_state_limits+0x358>
 80145fa:	23ff      	movs	r3, #255	; 0xff
 80145fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

sendlow:
	if ((c2addr != tvars->canton2_addr) || (updreason == upd_c1c2) || (updreason == upd_change_dir) ||(updreason==upd_init)) {
 8014600:	68bb      	ldr	r3, [r7, #8]
 8014602:	799b      	ldrb	r3, [r3, #6]
 8014604:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8014608:	429a      	cmp	r2, r3
 801460a:	d108      	bne.n	801461e <update_c2_state_limits+0x37a>
 801460c:	79fb      	ldrb	r3, [r7, #7]
 801460e:	2b02      	cmp	r3, #2
 8014610:	d005      	beq.n	801461e <update_c2_state_limits+0x37a>
 8014612:	79fb      	ldrb	r3, [r7, #7]
 8014614:	2b01      	cmp	r3, #1
 8014616:	d002      	beq.n	801461e <update_c2_state_limits+0x37a>
 8014618:	79fb      	ldrb	r3, [r7, #7]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d146      	bne.n	80146ac <update_c2_state_limits+0x408>
		itm_debug3(DBG_CTRL, "C1C2", tidx, tvars->canton1_addr, tvars->canton2_addr);
 801461e:	68bb      	ldr	r3, [r7, #8]
 8014620:	795b      	ldrb	r3, [r3, #5]
 8014622:	461a      	mov	r2, r3
 8014624:	68bb      	ldr	r3, [r7, #8]
 8014626:	799b      	ldrb	r3, [r3, #6]
 8014628:	9300      	str	r3, [sp, #0]
 801462a:	4613      	mov	r3, r2
 801462c:	68fa      	ldr	r2, [r7, #12]
 801462e:	493d      	ldr	r1, [pc, #244]	; (8014724 <update_c2_state_limits+0x480>)
 8014630:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014634:	f7fe fec4 	bl	80133c0 <itm_debug3>
		tvars->canton2_addr = c2addr;
 8014638:	68bb      	ldr	r3, [r7, #8]
 801463a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801463e:	719a      	strb	r2, [r3, #6]

		int dir = tvars->_dir;
 8014640:	68bb      	ldr	r3, [r7, #8]
 8014642:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014646:	633b      	str	r3, [r7, #48]	; 0x30
		const train_config_t *tconf = get_train_cnf(tidx);
 8014648:	68f8      	ldr	r0, [r7, #12]
 801464a:	f001 fcd9 	bl	8016000 <get_train_cnf>
 801464e:	61f8      	str	r0, [r7, #28]
		if (tconf->reversed) dir = -dir;
 8014650:	69fb      	ldr	r3, [r7, #28]
 8014652:	7edb      	ldrb	r3, [r3, #27]
 8014654:	2b00      	cmp	r3, #0
 8014656:	d002      	beq.n	801465e <update_c2_state_limits+0x3ba>
 8014658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801465a:	425b      	negs	r3, r3
 801465c:	633b      	str	r3, [r7, #48]	; 0x30

		msg_64_t m;
		m.from = MA_CONTROL_T(tidx);
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	b25b      	sxtb	r3, r3
 8014662:	f003 0307 	and.w	r3, r3, #7
 8014666:	b25b      	sxtb	r3, r3
 8014668:	f063 032f 	orn	r3, r3, #47	; 0x2f
 801466c:	b25b      	sxtb	r3, r3
 801466e:	b2db      	uxtb	r3, r3
 8014670:	747b      	strb	r3, [r7, #17]
		m.to =  MA_TRAIN_SC(tidx);
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	b25b      	sxtb	r3, r3
 8014676:	f003 0307 	and.w	r3, r3, #7
 801467a:	b25b      	sxtb	r3, r3
 801467c:	f063 0337 	orn	r3, r3, #55	; 0x37
 8014680:	b25b      	sxtb	r3, r3
 8014682:	b2db      	uxtb	r3, r3
 8014684:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_SET_C1_C2;
 8014686:	2311      	movs	r3, #17
 8014688:	74bb      	strb	r3, [r7, #18]
		m.vbytes[0] = tvars->canton1_addr;
 801468a:	68bb      	ldr	r3, [r7, #8]
 801468c:	795b      	ldrb	r3, [r3, #5]
 801468e:	753b      	strb	r3, [r7, #20]
		m.vbytes[1] = dir;
 8014690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014692:	b2db      	uxtb	r3, r3
 8014694:	757b      	strb	r3, [r7, #21]
		m.vbytes[2] = tvars->canton2_addr;
 8014696:	68bb      	ldr	r3, [r7, #8]
 8014698:	799b      	ldrb	r3, [r3, #6]
 801469a:	75bb      	strb	r3, [r7, #22]
		m.vbytes[3] = dir; // 0;
 801469c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801469e:	b2db      	uxtb	r3, r3
 80146a0:	75fb      	strb	r3, [r7, #23]
		mqf_write_from_ctrl(&m);
 80146a2:	f107 0310 	add.w	r3, r7, #16
 80146a6:	4618      	mov	r0, r3
 80146a8:	f7fe feb6 	bl	8013418 <mqf_write_from_ctrl>
	}
	if ((tvars->_mode != train_fullmanual) && (olim != tvars->spd_limit)) {
 80146ac:	68bb      	ldr	r3, [r7, #8]
 80146ae:	781b      	ldrb	r3, [r3, #0]
 80146b0:	2b02      	cmp	r3, #2
 80146b2:	d020      	beq.n	80146f6 <update_c2_state_limits+0x452>
 80146b4:	68bb      	ldr	r3, [r7, #8]
 80146b6:	891b      	ldrh	r3, [r3, #8]
 80146b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80146ba:	429a      	cmp	r2, r3
 80146bc:	d01b      	beq.n	80146f6 <update_c2_state_limits+0x452>
		itm_debug2(DBG_CTRL, "lim upd", tidx, tvars->spd_limit);
 80146be:	68bb      	ldr	r3, [r7, #8]
 80146c0:	891b      	ldrh	r3, [r3, #8]
 80146c2:	68fa      	ldr	r2, [r7, #12]
 80146c4:	4918      	ldr	r1, [pc, #96]	; (8014728 <update_c2_state_limits+0x484>)
 80146c6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80146ca:	f7fe fe5d 	bl	8013388 <itm_debug2>
		uint16_t tspd = MIN(tvars->spd_limit, tvars->desired_speed);
 80146ce:	68bb      	ldr	r3, [r7, #8]
 80146d0:	895a      	ldrh	r2, [r3, #10]
 80146d2:	68bb      	ldr	r3, [r7, #8]
 80146d4:	891b      	ldrh	r3, [r3, #8]
 80146d6:	4293      	cmp	r3, r2
 80146d8:	bf28      	it	cs
 80146da:	4613      	movcs	r3, r2
 80146dc:	837b      	strh	r3, [r7, #26]
		switch (updreason) {
 80146de:	79fb      	ldrb	r3, [r7, #7]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d00a      	beq.n	80146fa <update_c2_state_limits+0x456>
 80146e4:	2b01      	cmp	r3, #1
 80146e6:	d00a      	beq.n	80146fe <update_c2_state_limits+0x45a>
		case upd_change_dir: // do nothing, ctrl_set_tspeed will be updated
			break;
		case upd_init:
			break;
		default:
			ctrl_set_tspeed(tidx, tvars, tspd);
 80146e8:	8b7b      	ldrh	r3, [r7, #26]
 80146ea:	461a      	mov	r2, r3
 80146ec:	68b9      	ldr	r1, [r7, #8]
 80146ee:	68f8      	ldr	r0, [r7, #12]
 80146f0:	f000 f81c 	bl	801472c <ctrl_set_tspeed>
			break;
 80146f4:	e004      	b.n	8014700 <update_c2_state_limits+0x45c>
		}
	}
 80146f6:	bf00      	nop
 80146f8:	e002      	b.n	8014700 <update_c2_state_limits+0x45c>
			break;
 80146fa:	bf00      	nop
 80146fc:	e000      	b.n	8014700 <update_c2_state_limits+0x45c>
			break;
 80146fe:	bf00      	nop
	if (posetval) {
 8014700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014702:	2b00      	cmp	r3, #0
 8014704:	d004      	beq.n	8014710 <update_c2_state_limits+0x46c>
		//itm_debug2(DBG_CTRL, "set pose", tidx, posetval);
		// POSE trigger must be sent *after* CMD_SET_C1_C2
		set_pose_trig(tidx, posetval);
 8014706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014708:	4619      	mov	r1, r3
 801470a:	68f8      	ldr	r0, [r7, #12]
 801470c:	f000 f89c 	bl	8014848 <set_pose_trig>
	}

}
 8014710:	3740      	adds	r7, #64	; 0x40
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}
 8014716:	bf00      	nop
 8014718:	08019964 	.word	0x08019964
 801471c:	80000400 	.word	0x80000400
 8014720:	08019970 	.word	0x08019970
 8014724:	08019978 	.word	0x08019978
 8014728:	08019980 	.word	0x08019980

0801472c <ctrl_set_tspeed>:


// ---------------------------------------------------------------

static void ctrl_set_tspeed(int trnum, train_ctrl_t *tvars, uint16_t tspd)
{
 801472c:	b580      	push	{r7, lr}
 801472e:	b086      	sub	sp, #24
 8014730:	af00      	add	r7, sp, #0
 8014732:	60f8      	str	r0, [r7, #12]
 8014734:	60b9      	str	r1, [r7, #8]
 8014736:	4613      	mov	r3, r2
 8014738:	80fb      	strh	r3, [r7, #6]
	if (tvars->_target_speed == tspd) return;
 801473a:	68bb      	ldr	r3, [r7, #8]
 801473c:	885b      	ldrh	r3, [r3, #2]
 801473e:	88fa      	ldrh	r2, [r7, #6]
 8014740:	429a      	cmp	r2, r3
 8014742:	d03f      	beq.n	80147c4 <ctrl_set_tspeed+0x98>
	tvars->_target_speed = tspd;
 8014744:	68bb      	ldr	r3, [r7, #8]
 8014746:	88fa      	ldrh	r2, [r7, #6]
 8014748:	805a      	strh	r2, [r3, #2]

	// notif UI
	itm_debug2(DBG_UI|DBG_CTRL, "ctrl_set_tspeed", trnum, tspd);
 801474a:	88fb      	ldrh	r3, [r7, #6]
 801474c:	68fa      	ldr	r2, [r7, #12]
 801474e:	491f      	ldr	r1, [pc, #124]	; (80147cc <ctrl_set_tspeed+0xa0>)
 8014750:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8014754:	f7fe fe18 	bl	8013388 <itm_debug2>
	msg_64_t m;
	m.from = MA_CONTROL_T(trnum);
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	b25b      	sxtb	r3, r3
 801475c:	f003 0307 	and.w	r3, r3, #7
 8014760:	b25b      	sxtb	r3, r3
 8014762:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8014766:	b25b      	sxtb	r3, r3
 8014768:	b2db      	uxtb	r3, r3
 801476a:	747b      	strb	r3, [r7, #17]
	m.to = MA_UI(1); // TODO : fix me
 801476c:	2381      	movs	r3, #129	; 0x81
 801476e:	743b      	strb	r3, [r7, #16]
	m.cmd = CMD_TRTSPD_NOTIF;
 8014770:	2324      	movs	r3, #36	; 0x24
 8014772:	74bb      	strb	r3, [r7, #18]
	m.v1u = tspd;
 8014774:	88fb      	ldrh	r3, [r7, #6]
 8014776:	82bb      	strh	r3, [r7, #20]
	m.v2 = trctl[trnum]._dir;
 8014778:	4915      	ldr	r1, [pc, #84]	; (80147d0 <ctrl_set_tspeed+0xa4>)
 801477a:	68fa      	ldr	r2, [r7, #12]
 801477c:	4613      	mov	r3, r2
 801477e:	005b      	lsls	r3, r3, #1
 8014780:	4413      	add	r3, r2
 8014782:	00db      	lsls	r3, r3, #3
 8014784:	440b      	add	r3, r1
 8014786:	3304      	adds	r3, #4
 8014788:	f993 3000 	ldrsb.w	r3, [r3]
 801478c:	b21b      	sxth	r3, r3
 801478e:	82fb      	strh	r3, [r7, #22]
	mqf_write_from_ctrl(&m);
 8014790:	f107 0310 	add.w	r3, r7, #16
 8014794:	4618      	mov	r0, r3
 8014796:	f7fe fe3f 	bl	8013418 <mqf_write_from_ctrl>

	m.to = MA_TRAIN_SC(trnum);
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	b25b      	sxtb	r3, r3
 801479e:	f003 0307 	and.w	r3, r3, #7
 80147a2:	b25b      	sxtb	r3, r3
 80147a4:	f063 0337 	orn	r3, r3, #55	; 0x37
 80147a8:	b25b      	sxtb	r3, r3
 80147aa:	b2db      	uxtb	r3, r3
 80147ac:	743b      	strb	r3, [r7, #16]
	m.cmd = CMD_SET_TARGET_SPEED;
 80147ae:	2310      	movs	r3, #16
 80147b0:	74bb      	strb	r3, [r7, #18]
	// direction already given by SET_C1_C2
	//m.v1 = trctl[trnum]._dir*trctl[trnum]._target_speed;
	m.v1u = tvars->_target_speed;
 80147b2:	68bb      	ldr	r3, [r7, #8]
 80147b4:	885b      	ldrh	r3, [r3, #2]
 80147b6:	82bb      	strh	r3, [r7, #20]
	mqf_write_from_ctrl(&m);
 80147b8:	f107 0310 	add.w	r3, r7, #16
 80147bc:	4618      	mov	r0, r3
 80147be:	f7fe fe2b 	bl	8013418 <mqf_write_from_ctrl>
 80147c2:	e000      	b.n	80147c6 <ctrl_set_tspeed+0x9a>
	if (tvars->_target_speed == tspd) return;
 80147c4:	bf00      	nop


}
 80147c6:	3718      	adds	r7, #24
 80147c8:	46bd      	mov	sp, r7
 80147ca:	bd80      	pop	{r7, pc}
 80147cc:	08019988 	.word	0x08019988
 80147d0:	200051f0 	.word	0x200051f0

080147d4 <ctrl_set_dir>:

static void ctrl_set_dir(int trnum,  train_ctrl_t *tvars, int  dir, int force)
{
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b086      	sub	sp, #24
 80147d8:	af00      	add	r7, sp, #0
 80147da:	60f8      	str	r0, [r7, #12]
 80147dc:	60b9      	str	r1, [r7, #8]
 80147de:	607a      	str	r2, [r7, #4]
 80147e0:	603b      	str	r3, [r7, #0]
	if (!force && (tvars->_dir == dir)) return;
 80147e2:	683b      	ldr	r3, [r7, #0]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d106      	bne.n	80147f6 <ctrl_set_dir+0x22>
 80147e8:	68bb      	ldr	r3, [r7, #8]
 80147ea:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80147ee:	461a      	mov	r2, r3
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	4293      	cmp	r3, r2
 80147f4:	d021      	beq.n	801483a <ctrl_set_dir+0x66>

	itm_debug2(DBG_CTRL, "setdir", trnum, dir);
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	68fa      	ldr	r2, [r7, #12]
 80147fa:	4912      	ldr	r1, [pc, #72]	; (8014844 <ctrl_set_dir+0x70>)
 80147fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014800:	f7fe fdc2 	bl	8013388 <itm_debug2>


	msg_64_t m;
	m.from = MA_CONTROL_T(trnum);
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	b25b      	sxtb	r3, r3
 8014808:	f003 0307 	and.w	r3, r3, #7
 801480c:	b25b      	sxtb	r3, r3
 801480e:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8014812:	b25b      	sxtb	r3, r3
 8014814:	b2db      	uxtb	r3, r3
 8014816:	747b      	strb	r3, [r7, #17]
	tvars->_dir = dir;
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	b25a      	sxtb	r2, r3
 801481c:	68bb      	ldr	r3, [r7, #8]
 801481e:	711a      	strb	r2, [r3, #4]

	// notif UI
	m.to = MA_UI(1); // fix me
 8014820:	2381      	movs	r3, #129	; 0x81
 8014822:	743b      	strb	r3, [r7, #16]
	m.cmd = CMD_TRDIR_NOTIF;
 8014824:	2323      	movs	r3, #35	; 0x23
 8014826:	74bb      	strb	r3, [r7, #18]
	m.v1 = dir;
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	b21b      	sxth	r3, r3
 801482c:	82bb      	strh	r3, [r7, #20]
	mqf_write_from_ctrl(&m);
 801482e:	f107 0310 	add.w	r3, r7, #16
 8014832:	4618      	mov	r0, r3
 8014834:	f7fe fdf0 	bl	8013418 <mqf_write_from_ctrl>
 8014838:	e000      	b.n	801483c <ctrl_set_dir+0x68>
	if (!force && (tvars->_dir == dir)) return;
 801483a:	bf00      	nop
}
 801483c:	3718      	adds	r7, #24
 801483e:	46bd      	mov	sp, r7
 8014840:	bd80      	pop	{r7, pc}
 8014842:	bf00      	nop
 8014844:	08019998 	.word	0x08019998

08014848 <set_pose_trig>:

// ---------------------------------------------------------------


static void set_pose_trig(int numtrain, int32_t pose)
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b086      	sub	sp, #24
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
 8014850:	6039      	str	r1, [r7, #0]
	itm_debug2(DBG_CTRL, "set posetr", numtrain, pose);
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	687a      	ldr	r2, [r7, #4]
 8014856:	491e      	ldr	r1, [pc, #120]	; (80148d0 <set_pose_trig+0x88>)
 8014858:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801485c:	f7fe fd94 	bl	8013388 <itm_debug2>
	msg_64_t m;
	m.from = MA_CONTROL_T(numtrain);
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	b25b      	sxtb	r3, r3
 8014864:	f003 0307 	and.w	r3, r3, #7
 8014868:	b25b      	sxtb	r3, r3
 801486a:	f063 032f 	orn	r3, r3, #47	; 0x2f
 801486e:	b25b      	sxtb	r3, r3
 8014870:	b2db      	uxtb	r3, r3
 8014872:	727b      	strb	r3, [r7, #9]
	m.from = MA_CONTROL_T(numtrain);
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	b25b      	sxtb	r3, r3
 8014878:	f003 0307 	and.w	r3, r3, #7
 801487c:	b25b      	sxtb	r3, r3
 801487e:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8014882:	b25b      	sxtb	r3, r3
 8014884:	b2db      	uxtb	r3, r3
 8014886:	727b      	strb	r3, [r7, #9]
	m.to =  MA_TRAIN_SC(numtrain);
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	b25b      	sxtb	r3, r3
 801488c:	f003 0307 	and.w	r3, r3, #7
 8014890:	b25b      	sxtb	r3, r3
 8014892:	f063 0337 	orn	r3, r3, #55	; 0x37
 8014896:	b25b      	sxtb	r3, r3
 8014898:	b2db      	uxtb	r3, r3
 801489a:	723b      	strb	r3, [r7, #8]
	m.cmd = CMD_POSE_SET_TRIG;
 801489c:	2350      	movs	r3, #80	; 0x50
 801489e:	72bb      	strb	r3, [r7, #10]
	const train_config_t *tconf = get_train_cnf(numtrain);
 80148a0:	6878      	ldr	r0, [r7, #4]
 80148a2:	f001 fbad 	bl	8016000 <get_train_cnf>
 80148a6:	6178      	str	r0, [r7, #20]
	if (tconf->reversed)  m.v32 = -pose;
 80148a8:	697b      	ldr	r3, [r7, #20]
 80148aa:	7edb      	ldrb	r3, [r3, #27]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d003      	beq.n	80148b8 <set_pose_trig+0x70>
 80148b0:	683b      	ldr	r3, [r7, #0]
 80148b2:	425b      	negs	r3, r3
 80148b4:	60fb      	str	r3, [r7, #12]
 80148b6:	e001      	b.n	80148bc <set_pose_trig+0x74>
	else m.v32 = pose;
 80148b8:	683b      	ldr	r3, [r7, #0]
 80148ba:	60fb      	str	r3, [r7, #12]
	mqf_write_from_ctrl(&m);
 80148bc:	f107 0308 	add.w	r3, r7, #8
 80148c0:	4618      	mov	r0, r3
 80148c2:	f7fe fda9 	bl	8013418 <mqf_write_from_ctrl>
}
 80148c6:	bf00      	nop
 80148c8:	3718      	adds	r7, #24
 80148ca:	46bd      	mov	sp, r7
 80148cc:	bd80      	pop	{r7, pc}
 80148ce:	bf00      	nop
 80148d0:	080199a0 	.word	0x080199a0

080148d4 <pose_middle>:


static int32_t pose_middle(int blknum, const train_config_t *tconf, int dir)
{
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b088      	sub	sp, #32
 80148d8:	af00      	add	r7, sp, #0
 80148da:	60f8      	str	r0, [r7, #12]
 80148dc:	60b9      	str	r1, [r7, #8]
 80148de:	607a      	str	r2, [r7, #4]
	int cm = get_blk_len(blknum);
 80148e0:	68f8      	ldr	r0, [r7, #12]
 80148e2:	f004 f9bd 	bl	8018c60 <get_blk_len>
 80148e6:	61b8      	str	r0, [r7, #24]
	uint32_t p = cm * tconf->pose_per_cm;
 80148e8:	68bb      	ldr	r3, [r7, #8]
 80148ea:	8b9b      	ldrh	r3, [r3, #28]
 80148ec:	461a      	mov	r2, r3
 80148ee:	69bb      	ldr	r3, [r7, #24]
 80148f0:	fb03 f302 	mul.w	r3, r3, r2
 80148f4:	617b      	str	r3, [r7, #20]
	uint32_t pm = p/2;
 80148f6:	697b      	ldr	r3, [r7, #20]
 80148f8:	085b      	lsrs	r3, r3, #1
 80148fa:	61fb      	str	r3, [r7, #28]
	if (dir<0) pm = -pm;
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	da02      	bge.n	8014908 <pose_middle+0x34>
 8014902:	69fb      	ldr	r3, [r7, #28]
 8014904:	425b      	negs	r3, r3
 8014906:	61fb      	str	r3, [r7, #28]
	return pm;
 8014908:	69fb      	ldr	r3, [r7, #28]
}
 801490a:	4618      	mov	r0, r3
 801490c:	3720      	adds	r7, #32
 801490e:	46bd      	mov	sp, r7
 8014910:	bd80      	pop	{r7, pc}
	...

08014914 <check_blk_tick>:

// ---------------------------------------------------------------


static void check_blk_tick(_UNUSED_ uint32_t tick)
{
 8014914:	b580      	push	{r7, lr}
 8014916:	b086      	sub	sp, #24
 8014918:	af00      	add	r7, sp, #0
 801491a:	6078      	str	r0, [r7, #4]
	if ((0)) return;
	if (occupency_changed) {
 801491c:	4b1e      	ldr	r3, [pc, #120]	; (8014998 <check_blk_tick+0x84>)
 801491e:	781b      	ldrb	r3, [r3, #0]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d036      	beq.n	8014992 <check_blk_tick+0x7e>
		occupency_changed = 0;
 8014924:	4b1c      	ldr	r3, [pc, #112]	; (8014998 <check_blk_tick+0x84>)
 8014926:	2200      	movs	r2, #0
 8014928:	701a      	strb	r2, [r3, #0]
		for (int tidx=0; tidx<NUM_TRAINS; tidx++) {
 801492a:	2300      	movs	r3, #0
 801492c:	617b      	str	r3, [r7, #20]
 801492e:	e02d      	b.n	801498c <check_blk_tick+0x78>
			train_ctrl_t *tvars = &trctl[tidx];
 8014930:	697a      	ldr	r2, [r7, #20]
 8014932:	4613      	mov	r3, r2
 8014934:	005b      	lsls	r3, r3, #1
 8014936:	4413      	add	r3, r2
 8014938:	00db      	lsls	r3, r3, #3
 801493a:	4a18      	ldr	r2, [pc, #96]	; (801499c <check_blk_tick+0x88>)
 801493c:	4413      	add	r3, r2
 801493e:	613b      	str	r3, [r7, #16]
			const train_config_t *tconf = get_train_cnf(tidx);
 8014940:	6978      	ldr	r0, [r7, #20]
 8014942:	f001 fb5d 	bl	8016000 <get_train_cnf>
 8014946:	60f8      	str	r0, [r7, #12]
			if (!tconf->enabled) continue;
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	7c9b      	ldrb	r3, [r3, #18]
 801494c:	2b00      	cmp	r3, #0
 801494e:	d017      	beq.n	8014980 <check_blk_tick+0x6c>
			if (tvars->_state == train_off) continue;
 8014950:	693b      	ldr	r3, [r7, #16]
 8014952:	785b      	ldrb	r3, [r3, #1]
 8014954:	2b00      	cmp	r3, #0
 8014956:	d015      	beq.n	8014984 <check_blk_tick+0x70>
			if ((tvars->_state == train_blk_wait) || (tvars->spd_limit <100)) {
 8014958:	693b      	ldr	r3, [r7, #16]
 801495a:	785b      	ldrb	r3, [r3, #1]
 801495c:	2b04      	cmp	r3, #4
 801495e:	d003      	beq.n	8014968 <check_blk_tick+0x54>
 8014960:	693b      	ldr	r3, [r7, #16]
 8014962:	891b      	ldrh	r3, [r3, #8]
 8014964:	2b63      	cmp	r3, #99	; 0x63
 8014966:	d80e      	bhi.n	8014986 <check_blk_tick+0x72>
				itm_debug1(DBG_CTRL, "chk", tidx);
 8014968:	697a      	ldr	r2, [r7, #20]
 801496a:	490d      	ldr	r1, [pc, #52]	; (80149a0 <check_blk_tick+0x8c>)
 801496c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8014970:	f7fe fcf0 	bl	8013354 <itm_debug1>
				update_c2_state_limits(tidx, tvars, upd_check);
 8014974:	2204      	movs	r2, #4
 8014976:	6939      	ldr	r1, [r7, #16]
 8014978:	6978      	ldr	r0, [r7, #20]
 801497a:	f7ff fc93 	bl	80142a4 <update_c2_state_limits>
 801497e:	e002      	b.n	8014986 <check_blk_tick+0x72>
			if (!tconf->enabled) continue;
 8014980:	bf00      	nop
 8014982:	e000      	b.n	8014986 <check_blk_tick+0x72>
			if (tvars->_state == train_off) continue;
 8014984:	bf00      	nop
		for (int tidx=0; tidx<NUM_TRAINS; tidx++) {
 8014986:	697b      	ldr	r3, [r7, #20]
 8014988:	3301      	adds	r3, #1
 801498a:	617b      	str	r3, [r7, #20]
 801498c:	697b      	ldr	r3, [r7, #20]
 801498e:	2b07      	cmp	r3, #7
 8014990:	ddce      	ble.n	8014930 <check_blk_tick+0x1c>
			}
		}
	}
}
 8014992:	3718      	adds	r7, #24
 8014994:	46bd      	mov	sp, r7
 8014996:	bd80      	pop	{r7, pc}
 8014998:	200052bc 	.word	0x200052bc
 801499c:	200051f0 	.word	0x200051f0
 80149a0:	080199ac 	.word	0x080199ac

080149a4 <set_turnout>:


// ---------------------------------------------------------------

static void set_turnout(int tn, int v)
{
 80149a4:	b580      	push	{r7, lr}
 80149a6:	b084      	sub	sp, #16
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	6078      	str	r0, [r7, #4]
 80149ac:	6039      	str	r1, [r7, #0]
	itm_debug2(DBG_CTRL, "TURN", tn, v);
 80149ae:	683b      	ldr	r3, [r7, #0]
 80149b0:	687a      	ldr	r2, [r7, #4]
 80149b2:	491b      	ldr	r1, [pc, #108]	; (8014a20 <set_turnout+0x7c>)
 80149b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80149b8:	f7fe fce6 	bl	8013388 <itm_debug2>
	if (tn<0) fatal();
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	da01      	bge.n	80149c6 <set_turnout+0x22>
 80149c2:	f7fe fdc3 	bl	801354c <fatal>
	if (tn>=NUM_TURNOUTS) fatal();
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	2b07      	cmp	r3, #7
 80149ca:	dd01      	ble.n	80149d0 <set_turnout+0x2c>
 80149cc:	f7fe fdbe 	bl	801354c <fatal>
	if (tn>=NUM_LOCAL_TURNOUTS) fatal(); // TODO
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	2b07      	cmp	r3, #7
 80149d4:	dd01      	ble.n	80149da <set_turnout+0x36>
 80149d6:	f7fe fdb9 	bl	801354c <fatal>
	msg_64_t m;
	m.from = MA_CONTROL();
 80149da:	23d7      	movs	r3, #215	; 0xd7
 80149dc:	727b      	strb	r3, [r7, #9]
	m.to = MA_TURNOUT(0, tn); // TODO board num
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	b25b      	sxtb	r3, r3
 80149e2:	f003 0307 	and.w	r3, r3, #7
 80149e6:	b25b      	sxtb	r3, r3
 80149e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80149ec:	b25b      	sxtb	r3, r3
 80149ee:	b2db      	uxtb	r3, r3
 80149f0:	723b      	strb	r3, [r7, #8]
	m.cmd = v ? CMD_TURNOUT_B : CMD_TURNOUT_A;
 80149f2:	683b      	ldr	r3, [r7, #0]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d001      	beq.n	80149fc <set_turnout+0x58>
 80149f8:	2332      	movs	r3, #50	; 0x32
 80149fa:	e000      	b.n	80149fe <set_turnout+0x5a>
 80149fc:	2331      	movs	r3, #49	; 0x31
 80149fe:	72bb      	strb	r3, [r7, #10]

	mqf_write_from_ctrl(&m);
 8014a00:	f107 0308 	add.w	r3, r7, #8
 8014a04:	4618      	mov	r0, r3
 8014a06:	f7fe fd07 	bl	8013418 <mqf_write_from_ctrl>
	topolgy_set_turnout(tn, v);
 8014a0a:	6839      	ldr	r1, [r7, #0]
 8014a0c:	6878      	ldr	r0, [r7, #4]
 8014a0e:	f004 f93f 	bl	8018c90 <topolgy_set_turnout>

	occupency_changed = 1;
 8014a12:	4b04      	ldr	r3, [pc, #16]	; (8014a24 <set_turnout+0x80>)
 8014a14:	2201      	movs	r2, #1
 8014a16:	701a      	strb	r2, [r3, #0]
}
 8014a18:	bf00      	nop
 8014a1a:	3710      	adds	r7, #16
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	bd80      	pop	{r7, pc}
 8014a20:	080199b0 	.word	0x080199b0
 8014a24:	200052bc 	.word	0x200052bc

08014a28 <check_behaviour>:

// ---------------------------------------------------------------

static void check_behaviour(_UNUSED_ uint32_t tick)
{
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b084      	sub	sp, #16
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
	for (int tidx = 0; tidx<NUM_TRAINS; tidx++) {
 8014a30:	2300      	movs	r3, #0
 8014a32:	60fb      	str	r3, [r7, #12]
 8014a34:	e00a      	b.n	8014a4c <check_behaviour+0x24>
		const train_config_t *tconf = get_train_cnf(tidx);
 8014a36:	68f8      	ldr	r0, [r7, #12]
 8014a38:	f001 fae2 	bl	8016000 <get_train_cnf>
 8014a3c:	60b8      	str	r0, [r7, #8]
		if (!tconf->enabled) continue;
 8014a3e:	68bb      	ldr	r3, [r7, #8]
 8014a40:	7c9b      	ldrb	r3, [r3, #18]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d106      	bne.n	8014a54 <check_behaviour+0x2c>
	for (int tidx = 0; tidx<NUM_TRAINS; tidx++) {
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	3301      	adds	r3, #1
 8014a4a:	60fb      	str	r3, [r7, #12]
 8014a4c:	68fb      	ldr	r3, [r7, #12]
 8014a4e:	2b07      	cmp	r3, #7
 8014a50:	ddf1      	ble.n	8014a36 <check_behaviour+0xe>
 8014a52:	e000      	b.n	8014a56 <check_behaviour+0x2e>

		if (!SCEN_TWOTRAIN) return; // XXX
 8014a54:	bf00      	nop
				evt_cmd_set_setdirspeed(tidx, tvars, 0, 0, 1);
				continue;
			}
		}
	}
}
 8014a56:	3710      	adds	r7, #16
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	bd80      	pop	{r7, pc}

08014a5c <itm_debug1>:
{
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b086      	sub	sp, #24
 8014a60:	af02      	add	r7, sp, #8
 8014a62:	60f8      	str	r0, [r7, #12]
 8014a64:	60b9      	str	r1, [r7, #8]
 8014a66:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8014a68:	4b08      	ldr	r3, [pc, #32]	; (8014a8c <itm_debug1+0x30>)
 8014a6a:	681a      	ldr	r2, [r3, #0]
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	4013      	ands	r3, r2
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d007      	beq.n	8014a84 <itm_debug1+0x28>
 8014a74:	2301      	movs	r3, #1
 8014a76:	9300      	str	r3, [sp, #0]
 8014a78:	2300      	movs	r3, #0
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	6879      	ldr	r1, [r7, #4]
 8014a7e:	68b8      	ldr	r0, [r7, #8]
 8014a80:	f004 f9f2 	bl	8018e68 <_itm_debug3>
}
 8014a84:	bf00      	nop
 8014a86:	3710      	adds	r7, #16
 8014a88:	46bd      	mov	sp, r7
 8014a8a:	bd80      	pop	{r7, pc}
 8014a8c:	200005a4 	.word	0x200005a4

08014a90 <itm_debug3>:
{
 8014a90:	b580      	push	{r7, lr}
 8014a92:	b086      	sub	sp, #24
 8014a94:	af02      	add	r7, sp, #8
 8014a96:	60f8      	str	r0, [r7, #12]
 8014a98:	60b9      	str	r1, [r7, #8]
 8014a9a:	607a      	str	r2, [r7, #4]
 8014a9c:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 8014a9e:	4b09      	ldr	r3, [pc, #36]	; (8014ac4 <itm_debug3+0x34>)
 8014aa0:	681a      	ldr	r2, [r3, #0]
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	4013      	ands	r3, r2
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d007      	beq.n	8014aba <itm_debug3+0x2a>
 8014aaa:	2303      	movs	r3, #3
 8014aac:	9300      	str	r3, [sp, #0]
 8014aae:	69bb      	ldr	r3, [r7, #24]
 8014ab0:	683a      	ldr	r2, [r7, #0]
 8014ab2:	6879      	ldr	r1, [r7, #4]
 8014ab4:	68b8      	ldr	r0, [r7, #8]
 8014ab6:	f004 f9d7 	bl	8018e68 <_itm_debug3>
}
 8014aba:	bf00      	nop
 8014abc:	3710      	adds	r7, #16
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	bd80      	pop	{r7, pc}
 8014ac2:	bf00      	nop
 8014ac4:	200005a4 	.word	0x200005a4

08014ac8 <canton_error>:
#define ERR_STRANGE			-4242

int trainctl_error(char l, int code, const char *msg);

static inline int canton_error(int code, const char *msg)
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b082      	sub	sp, #8
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	6078      	str	r0, [r7, #4]
 8014ad0:	6039      	str	r1, [r7, #0]
	return trainctl_error('C', code, msg);
 8014ad2:	683a      	ldr	r2, [r7, #0]
 8014ad4:	6879      	ldr	r1, [r7, #4]
 8014ad6:	2043      	movs	r0, #67	; 0x43
 8014ad8:	f001 f8e2 	bl	8015ca0 <trainctl_error>
 8014adc:	4603      	mov	r3, r0
}
 8014ade:	4618      	mov	r0, r3
 8014ae0:	3708      	adds	r7, #8
 8014ae2:	46bd      	mov	sp, r7
 8014ae4:	bd80      	pop	{r7, pc}

08014ae6 <canton_error_rc>:
static inline int canton_error_rc(int rc, int code, const char *msg)
{
 8014ae6:	b580      	push	{r7, lr}
 8014ae8:	b084      	sub	sp, #16
 8014aea:	af00      	add	r7, sp, #0
 8014aec:	60f8      	str	r0, [r7, #12]
 8014aee:	60b9      	str	r1, [r7, #8]
 8014af0:	607a      	str	r2, [r7, #4]
	trainctl_error('C', code, msg);
 8014af2:	687a      	ldr	r2, [r7, #4]
 8014af4:	68b9      	ldr	r1, [r7, #8]
 8014af6:	2043      	movs	r0, #67	; 0x43
 8014af8:	f001 f8d2 	bl	8015ca0 <trainctl_error>
	return rc;
 8014afc:	68fb      	ldr	r3, [r7, #12]
}
 8014afe:	4618      	mov	r0, r3
 8014b00:	3710      	adds	r7, #16
 8014b02:	46bd      	mov	sp, r7
 8014b04:	bd80      	pop	{r7, pc}
	...

08014b08 <mqf_read_to_canton>:
/* turnout command */
#define CMD_TURNOUT_A		0x31
#define CMD_TURNOUT_B		0x32


LFMQUEUE_DEF_H(to_canton, msg_64_t)
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b082      	sub	sp, #8
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	6078      	str	r0, [r7, #4]
 8014b10:	6879      	ldr	r1, [r7, #4]
 8014b12:	4804      	ldr	r0, [pc, #16]	; (8014b24 <mqf_read_to_canton+0x1c>)
 8014b14:	f004 fb28 	bl	8019168 <mqf_read>
 8014b18:	4603      	mov	r3, r0
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	3708      	adds	r7, #8
 8014b1e:	46bd      	mov	sp, r7
 8014b20:	bd80      	pop	{r7, pc}
 8014b22:	bf00      	nop
 8014b24:	200004e8 	.word	0x200004e8

08014b28 <mqf_write_from_canton>:
LFMQUEUE_DEF_H(from_canton, msg_64_t)
 8014b28:	b580      	push	{r7, lr}
 8014b2a:	b082      	sub	sp, #8
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	6078      	str	r0, [r7, #4]
 8014b30:	6879      	ldr	r1, [r7, #4]
 8014b32:	4804      	ldr	r0, [pc, #16]	; (8014b44 <mqf_write_from_canton+0x1c>)
 8014b34:	f004 fa9e 	bl	8019074 <mqf_write>
 8014b38:	4603      	mov	r3, r0
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	3708      	adds	r7, #8
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	bd80      	pop	{r7, pc}
 8014b42:	bf00      	nop
 8014b44:	200004f4 	.word	0x200004f4

08014b48 <canton_reset>:
//--------------------------------------------



static void canton_reset(void)
{
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b086      	sub	sp, #24
 8014b4c:	af02      	add	r7, sp, #8
	for (int i = 0; i<NUM_LOCAL_CANTONS_SW; i++) {
 8014b4e:	2300      	movs	r3, #0
 8014b50:	60fb      	str	r3, [r7, #12]
 8014b52:	e01c      	b.n	8014b8e <canton_reset+0x46>
		USE_CANTON(i)
 8014b54:	68f8      	ldr	r0, [r7, #12]
 8014b56:	f001 fa2b 	bl	8015fb0 <get_canton_cnf>
 8014b5a:	60b8      	str	r0, [r7, #8]
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	00db      	lsls	r3, r3, #3
 8014b60:	4a0e      	ldr	r2, [pc, #56]	; (8014b9c <canton_reset+0x54>)
 8014b62:	4413      	add	r3, r2
 8014b64:	607b      	str	r3, [r7, #4]
		cvars->cur_dir = 99;
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	2263      	movs	r2, #99	; 0x63
 8014b6a:	701a      	strb	r2, [r3, #0]
		canton_set_pwm(i, cconf, cvars, 0, 0);
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	9300      	str	r3, [sp, #0]
 8014b70:	2300      	movs	r3, #0
 8014b72:	687a      	ldr	r2, [r7, #4]
 8014b74:	68b9      	ldr	r1, [r7, #8]
 8014b76:	68f8      	ldr	r0, [r7, #12]
 8014b78:	f000 f98e 	bl	8014e98 <canton_set_pwm>
		canton_set_volt(i, cconf, cvars,  7);
 8014b7c:	2307      	movs	r3, #7
 8014b7e:	687a      	ldr	r2, [r7, #4]
 8014b80:	68b9      	ldr	r1, [r7, #8]
 8014b82:	68f8      	ldr	r0, [r7, #12]
 8014b84:	f000 fae4 	bl	8015150 <canton_set_volt>
	for (int i = 0; i<NUM_LOCAL_CANTONS_SW; i++) {
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	3301      	adds	r3, #1
 8014b8c:	60fb      	str	r3, [r7, #12]
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	2b07      	cmp	r3, #7
 8014b92:	dddf      	ble.n	8014b54 <canton_reset+0xc>
	}
}
 8014b94:	bf00      	nop
 8014b96:	3710      	adds	r7, #16
 8014b98:	46bd      	mov	sp, r7
 8014b9a:	bd80      	pop	{r7, pc}
 8014b9c:	200052e4 	.word	0x200052e4

08014ba0 <handle_canton_cmd>:

static void handle_canton_cmd(int cidx, msg_64_t *m)
{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b086      	sub	sp, #24
 8014ba4:	af02      	add	r7, sp, #8
 8014ba6:	6078      	str	r0, [r7, #4]
 8014ba8:	6039      	str	r1, [r7, #0]
	if (m->cmd & 0x40) {
 8014baa:	683b      	ldr	r3, [r7, #0]
 8014bac:	789b      	ldrb	r3, [r3, #2]
 8014bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d00b      	beq.n	8014bce <handle_canton_cmd+0x2e>
		itm_debug1(DBG_LOWCTRL, "msg-bemf", m->to);
 8014bb6:	683b      	ldr	r3, [r7, #0]
 8014bb8:	781b      	ldrb	r3, [r3, #0]
 8014bba:	461a      	mov	r2, r3
 8014bbc:	493a      	ldr	r1, [pc, #232]	; (8014ca8 <handle_canton_cmd+0x108>)
 8014bbe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014bc2:	f7ff ff4b 	bl	8014a5c <itm_debug1>
		bemf_msg(m);
 8014bc6:	6838      	ldr	r0, [r7, #0]
 8014bc8:	f000 fc52 	bl	8015470 <bemf_msg>
		return;
 8014bcc:	e069      	b.n	8014ca2 <handle_canton_cmd+0x102>
	}


	USE_CANTON(cidx)
 8014bce:	6878      	ldr	r0, [r7, #4]
 8014bd0:	f001 f9ee 	bl	8015fb0 <get_canton_cnf>
 8014bd4:	60f8      	str	r0, [r7, #12]
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	00db      	lsls	r3, r3, #3
 8014bda:	4a34      	ldr	r2, [pc, #208]	; (8014cac <handle_canton_cmd+0x10c>)
 8014bdc:	4413      	add	r3, r2
 8014bde:	60bb      	str	r3, [r7, #8]
	if (!cvars) {
 8014be0:	68bb      	ldr	r3, [r7, #8]
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d105      	bne.n	8014bf2 <handle_canton_cmd+0x52>
		itm_debug1(DBG_LOWCTRL|DBG_ERR, "no cvars", cidx);
 8014be6:	687a      	ldr	r2, [r7, #4]
 8014be8:	4931      	ldr	r1, [pc, #196]	; (8014cb0 <handle_canton_cmd+0x110>)
 8014bea:	4832      	ldr	r0, [pc, #200]	; (8014cb4 <handle_canton_cmd+0x114>)
 8014bec:	f7ff ff36 	bl	8014a5c <itm_debug1>
		return;
 8014bf0:	e057      	b.n	8014ca2 <handle_canton_cmd+0x102>
	}
	switch (m->cmd) {
 8014bf2:	683b      	ldr	r3, [r7, #0]
 8014bf4:	789b      	ldrb	r3, [r3, #2]
 8014bf6:	2b01      	cmp	r3, #1
 8014bf8:	d016      	beq.n	8014c28 <handle_canton_cmd+0x88>
 8014bfa:	2b02      	cmp	r3, #2
 8014bfc:	d148      	bne.n	8014c90 <handle_canton_cmd+0xf0>
	case CMD_STOP:
		itm_debug1(DBG_LOWCTRL, "CMD STOP", 0);
 8014bfe:	2200      	movs	r2, #0
 8014c00:	492d      	ldr	r1, [pc, #180]	; (8014cb8 <handle_canton_cmd+0x118>)
 8014c02:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014c06:	f7ff ff29 	bl	8014a5c <itm_debug1>
		canton_set_pwm(cidx, cconf, cvars, 0, 0);
 8014c0a:	2300      	movs	r3, #0
 8014c0c:	9300      	str	r3, [sp, #0]
 8014c0e:	2300      	movs	r3, #0
 8014c10:	68ba      	ldr	r2, [r7, #8]
 8014c12:	68f9      	ldr	r1, [r7, #12]
 8014c14:	6878      	ldr	r0, [r7, #4]
 8014c16:	f000 f93f 	bl	8014e98 <canton_set_pwm>
		canton_set_volt(cidx, cconf, cvars,  7);
 8014c1a:	2307      	movs	r3, #7
 8014c1c:	68ba      	ldr	r2, [r7, #8]
 8014c1e:	68f9      	ldr	r1, [r7, #12]
 8014c20:	6878      	ldr	r0, [r7, #4]
 8014c22:	f000 fa95 	bl	8015150 <canton_set_volt>
		break;
 8014c26:	e03c      	b.n	8014ca2 <handle_canton_cmd+0x102>
	case CMD_SETVPWM:
		itm_debug3(DBG_LOWCTRL, "SETVPWM", cidx, m->v1u, m->v2);
 8014c28:	683b      	ldr	r3, [r7, #0]
 8014c2a:	889b      	ldrh	r3, [r3, #4]
 8014c2c:	461a      	mov	r2, r3
 8014c2e:	683b      	ldr	r3, [r7, #0]
 8014c30:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8014c34:	9300      	str	r3, [sp, #0]
 8014c36:	4613      	mov	r3, r2
 8014c38:	687a      	ldr	r2, [r7, #4]
 8014c3a:	4920      	ldr	r1, [pc, #128]	; (8014cbc <handle_canton_cmd+0x11c>)
 8014c3c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014c40:	f7ff ff26 	bl	8014a90 <itm_debug3>
		canton_set_pwm(cidx, cconf, cvars, SIGNOF0(m->v2), abs(m->v2));
 8014c44:	683b      	ldr	r3, [r7, #0]
 8014c46:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	db09      	blt.n	8014c62 <handle_canton_cmd+0xc2>
 8014c4e:	683b      	ldr	r3, [r7, #0]
 8014c50:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	bfcc      	ite	gt
 8014c58:	2301      	movgt	r3, #1
 8014c5a:	2300      	movle	r3, #0
 8014c5c:	b2db      	uxtb	r3, r3
 8014c5e:	b25a      	sxtb	r2, r3
 8014c60:	e001      	b.n	8014c66 <handle_canton_cmd+0xc6>
 8014c62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014c66:	683b      	ldr	r3, [r7, #0]
 8014c68:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	bfb8      	it	lt
 8014c70:	425b      	neglt	r3, r3
 8014c72:	9300      	str	r3, [sp, #0]
 8014c74:	4613      	mov	r3, r2
 8014c76:	68ba      	ldr	r2, [r7, #8]
 8014c78:	68f9      	ldr	r1, [r7, #12]
 8014c7a:	6878      	ldr	r0, [r7, #4]
 8014c7c:	f000 f90c 	bl	8014e98 <canton_set_pwm>
		canton_set_volt(cidx, cconf, cvars,  m->v1u);
 8014c80:	683b      	ldr	r3, [r7, #0]
 8014c82:	889b      	ldrh	r3, [r3, #4]
 8014c84:	68ba      	ldr	r2, [r7, #8]
 8014c86:	68f9      	ldr	r1, [r7, #12]
 8014c88:	6878      	ldr	r0, [r7, #4]
 8014c8a:	f000 fa61 	bl	8015150 <canton_set_volt>
		break;
 8014c8e:	e008      	b.n	8014ca2 <handle_canton_cmd+0x102>
	default:
		itm_debug1(DBG_LOWCTRL, "not handled msg", m->cmd);
 8014c90:	683b      	ldr	r3, [r7, #0]
 8014c92:	789b      	ldrb	r3, [r3, #2]
 8014c94:	461a      	mov	r2, r3
 8014c96:	490a      	ldr	r1, [pc, #40]	; (8014cc0 <handle_canton_cmd+0x120>)
 8014c98:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014c9c:	f7ff fede 	bl	8014a5c <itm_debug1>
		break;
 8014ca0:	bf00      	nop
	}
}
 8014ca2:	3710      	adds	r7, #16
 8014ca4:	46bd      	mov	sp, r7
 8014ca6:	bd80      	pop	{r7, pc}
 8014ca8:	080199b8 	.word	0x080199b8
 8014cac:	200052e4 	.word	0x200052e4
 8014cb0:	080199c4 	.word	0x080199c4
 8014cb4:	80000100 	.word	0x80000100
 8014cb8:	080199d0 	.word	0x080199d0
 8014cbc:	080199dc 	.word	0x080199dc
 8014cc0:	080199e4 	.word	0x080199e4

08014cc4 <canton_tick>:
static void handle_msg_normal(msg_64_t *m);
static void handle_msg_cantontest(msg_64_t *m);
static void handle_msg_detect1(msg_64_t *m);

void canton_tick(_UNUSED_ uint32_t notif_flags, _UNUSED_ uint32_t tick, _UNUSED_ uint32_t dt)
{
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	b088      	sub	sp, #32
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	60f8      	str	r0, [r7, #12]
 8014ccc:	60b9      	str	r1, [r7, #8]
 8014cce:	607a      	str	r2, [r7, #4]
	static int first=1;
	if (first) {
 8014cd0:	4b31      	ldr	r3, [pc, #196]	; (8014d98 <canton_tick+0xd4>)
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d006      	beq.n	8014ce6 <canton_tick+0x22>
		first = 0;
 8014cd8:	4b2f      	ldr	r3, [pc, #188]	; (8014d98 <canton_tick+0xd4>)
 8014cda:	2200      	movs	r2, #0
 8014cdc:	601a      	str	r2, [r3, #0]
		canton_reset();
 8014cde:	f7ff ff33 	bl	8014b48 <canton_reset>
		bemf_reset();
 8014ce2:	f000 fbab 	bl	801543c <bemf_reset>
	}
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_canton(&m);
 8014ce6:	f107 0310 	add.w	r3, r7, #16
 8014cea:	4618      	mov	r0, r3
 8014cec:	f7ff ff0c 	bl	8014b08 <mqf_read_to_canton>
 8014cf0:	61f8      	str	r0, [r7, #28]
		if (rc) break;
 8014cf2:	69fb      	ldr	r3, [r7, #28]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d14b      	bne.n	8014d90 <canton_tick+0xcc>
        switch (m.cmd) {
 8014cf8:	7cbb      	ldrb	r3, [r7, #18]
 8014cfa:	2bfc      	cmp	r3, #252	; 0xfc
 8014cfc:	d009      	beq.n	8014d12 <canton_tick+0x4e>
 8014cfe:	2bfc      	cmp	r3, #252	; 0xfc
 8014d00:	db1e      	blt.n	8014d40 <canton_tick+0x7c>
 8014d02:	3bfe      	subs	r3, #254	; 0xfe
 8014d04:	2b01      	cmp	r3, #1
 8014d06:	d81b      	bhi.n	8014d40 <canton_tick+0x7c>
        case CMD_RESET: // FALLTHRU
        case CMD_EMERGENCY_STOP:
            canton_reset();
 8014d08:	f7ff ff1e 	bl	8014b48 <canton_reset>
            bemf_reset();
 8014d0c:	f000 fb96 	bl	801543c <bemf_reset>
            break;
 8014d10:	e019      	b.n	8014d46 <canton_tick+0x82>
        case CMD_SETRUN_MODE:
        	if (m.v1u != run_mode) {
 8014d12:	8aba      	ldrh	r2, [r7, #20]
 8014d14:	4b21      	ldr	r3, [pc, #132]	; (8014d9c <canton_tick+0xd8>)
 8014d16:	781b      	ldrb	r3, [r3, #0]
 8014d18:	b29b      	uxth	r3, r3
 8014d1a:	429a      	cmp	r2, r3
 8014d1c:	d012      	beq.n	8014d44 <canton_tick+0x80>
        		run_mode = m.v1u;
 8014d1e:	8abb      	ldrh	r3, [r7, #20]
 8014d20:	b2da      	uxtb	r2, r3
 8014d22:	4b1e      	ldr	r3, [pc, #120]	; (8014d9c <canton_tick+0xd8>)
 8014d24:	701a      	strb	r2, [r3, #0]
        		testerAddr = m.from;
 8014d26:	7c7a      	ldrb	r2, [r7, #17]
 8014d28:	4b1d      	ldr	r3, [pc, #116]	; (8014da0 <canton_tick+0xdc>)
 8014d2a:	701a      	strb	r2, [r3, #0]
        		bemf_run_mode = run_mode; //(m.to == MA_BROADCAST) ? 1 : 0;
 8014d2c:	4b1b      	ldr	r3, [pc, #108]	; (8014d9c <canton_tick+0xd8>)
 8014d2e:	781a      	ldrb	r2, [r3, #0]
 8014d30:	4b1c      	ldr	r3, [pc, #112]	; (8014da4 <canton_tick+0xe0>)
 8014d32:	701a      	strb	r2, [r3, #0]
        		bemf_reset();
 8014d34:	f000 fb82 	bl	801543c <bemf_reset>
        		first = 1;
 8014d38:	4b17      	ldr	r3, [pc, #92]	; (8014d98 <canton_tick+0xd4>)
 8014d3a:	2201      	movs	r2, #1
 8014d3c:	601a      	str	r2, [r3, #0]
        	}
            break;
 8014d3e:	e001      	b.n	8014d44 <canton_tick+0x80>
        default:
        	break;
 8014d40:	bf00      	nop
 8014d42:	e000      	b.n	8014d46 <canton_tick+0x82>
            break;
 8014d44:	bf00      	nop
        }
        switch (run_mode) {
 8014d46:	4b15      	ldr	r3, [pc, #84]	; (8014d9c <canton_tick+0xd8>)
 8014d48:	781b      	ldrb	r3, [r3, #0]
 8014d4a:	2b04      	cmp	r3, #4
 8014d4c:	d81e      	bhi.n	8014d8c <canton_tick+0xc8>
 8014d4e:	a201      	add	r2, pc, #4	; (adr r2, 8014d54 <canton_tick+0x90>)
 8014d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d54:	08014d8d 	.word	0x08014d8d
 8014d58:	08014d69 	.word	0x08014d69
 8014d5c:	08014d81 	.word	0x08014d81
 8014d60:	08014d75 	.word	0x08014d75
 8014d64:	08014d8d 	.word	0x08014d8d
        case runmode_off:
        	break;
        case runmode_normal:
        	handle_msg_normal(&m);
 8014d68:	f107 0310 	add.w	r3, r7, #16
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	f000 f81b 	bl	8014da8 <handle_msg_normal>
        	break;
 8014d72:	e00c      	b.n	8014d8e <canton_tick+0xca>
        case runmode_detect1:
        	handle_msg_detect1(&m);
 8014d74:	f107 0310 	add.w	r3, r7, #16
 8014d78:	4618      	mov	r0, r3
 8014d7a:	f000 f830 	bl	8014dde <handle_msg_detect1>
        	break;
 8014d7e:	e006      	b.n	8014d8e <canton_tick+0xca>
        case runmode_detect:
        	break;
        case runmode_testcanton:
        	handle_msg_cantontest(&m);
 8014d80:	f107 0310 	add.w	r3, r7, #16
 8014d84:	4618      	mov	r0, r3
 8014d86:	f000 f835 	bl	8014df4 <handle_msg_cantontest>
        	break;
 8014d8a:	e000      	b.n	8014d8e <canton_tick+0xca>
        default:
        	break;
 8014d8c:	bf00      	nop
	for (;;) {
 8014d8e:	e7aa      	b.n	8014ce6 <canton_tick+0x22>
        }
	}
}
 8014d90:	bf00      	nop
 8014d92:	3720      	adds	r7, #32
 8014d94:	46bd      	mov	sp, r7
 8014d96:	bd80      	pop	{r7, pc}
 8014d98:	20000238 	.word	0x20000238
 8014d9c:	20005324 	.word	0x20005324
 8014da0:	20005325 	.word	0x20005325
 8014da4:	20005326 	.word	0x20005326

08014da8 <handle_msg_normal>:


static void handle_msg_normal(msg_64_t *m)
{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b084      	sub	sp, #16
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	6078      	str	r0, [r7, #4]
    int cidx = -1;
 8014db0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014db4:	60fb      	str	r3, [r7, #12]
    if (!IS_CANTON(m->to)) return;
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	781b      	ldrb	r3, [r3, #0]
 8014dba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d109      	bne.n	8014dd6 <handle_msg_normal+0x2e>
    cidx = m->to & 0x07;
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	781b      	ldrb	r3, [r3, #0]
 8014dc6:	f003 0307 	and.w	r3, r3, #7
 8014dca:	60fb      	str	r3, [r7, #12]
    handle_canton_cmd(cidx, m);
 8014dcc:	6879      	ldr	r1, [r7, #4]
 8014dce:	68f8      	ldr	r0, [r7, #12]
 8014dd0:	f7ff fee6 	bl	8014ba0 <handle_canton_cmd>
 8014dd4:	e000      	b.n	8014dd8 <handle_msg_normal+0x30>
    if (!IS_CANTON(m->to)) return;
 8014dd6:	bf00      	nop
}
 8014dd8:	3710      	adds	r7, #16
 8014dda:	46bd      	mov	sp, r7
 8014ddc:	bd80      	pop	{r7, pc}

08014dde <handle_msg_detect1>:

static void handle_msg_detect1(msg_64_t *m)
{
 8014dde:	b580      	push	{r7, lr}
 8014de0:	b082      	sub	sp, #8
 8014de2:	af00      	add	r7, sp, #0
 8014de4:	6078      	str	r0, [r7, #4]
	handle_msg_normal(m);
 8014de6:	6878      	ldr	r0, [r7, #4]
 8014de8:	f7ff ffde 	bl	8014da8 <handle_msg_normal>
}
 8014dec:	bf00      	nop
 8014dee:	3708      	adds	r7, #8
 8014df0:	46bd      	mov	sp, r7
 8014df2:	bd80      	pop	{r7, pc}

08014df4 <handle_msg_cantontest>:

static void handle_msg_cantontest(msg_64_t *m)
{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b086      	sub	sp, #24
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	6078      	str	r0, [r7, #4]
	int cidx = -1;
 8014dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014e00:	617b      	str	r3, [r7, #20]
	if (IS_BROADCAST(m->to)) {
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	781b      	ldrb	r3, [r3, #0]
 8014e06:	2bff      	cmp	r3, #255	; 0xff
 8014e08:	d103      	bne.n	8014e12 <handle_msg_cantontest+0x1e>
		cidx = -1;
 8014e0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014e0e:	617b      	str	r3, [r7, #20]
 8014e10:	e014      	b.n	8014e3c <handle_msg_cantontest+0x48>
	} else if (IS_CANTON(m->to)) {
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	781b      	ldrb	r3, [r3, #0]
 8014e16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d105      	bne.n	8014e2a <handle_msg_cantontest+0x36>
		cidx = m->to & 0x07;
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	781b      	ldrb	r3, [r3, #0]
 8014e22:	f003 0307 	and.w	r3, r3, #7
 8014e26:	617b      	str	r3, [r7, #20]
 8014e28:	e008      	b.n	8014e3c <handle_msg_cantontest+0x48>
	} else {
		itm_debug1(DBG_LOWCTRL, "not handled msg", m->cmd);
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	789b      	ldrb	r3, [r3, #2]
 8014e2e:	461a      	mov	r2, r3
 8014e30:	4918      	ldr	r1, [pc, #96]	; (8014e94 <handle_msg_cantontest+0xa0>)
 8014e32:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014e36:	f7ff fe11 	bl	8014a5c <itm_debug1>
		return;
 8014e3a:	e028      	b.n	8014e8e <handle_msg_cantontest+0x9a>
	}
    if (CMD_SETVPWM == m->cmd) {
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	789b      	ldrb	r3, [r3, #2]
 8014e40:	2b01      	cmp	r3, #1
 8014e42:	d10f      	bne.n	8014e64 <handle_msg_cantontest+0x70>
    	// in test mode, forward CMD_SETVPWM to UI for display
    	msg_64_t m2 = *m;
 8014e44:	687a      	ldr	r2, [r7, #4]
 8014e46:	f107 0308 	add.w	r3, r7, #8
 8014e4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014e4e:	e883 0003 	stmia.w	r3, {r0, r1}
    	m2.from = m2.to;
 8014e52:	7a3b      	ldrb	r3, [r7, #8]
 8014e54:	727b      	strb	r3, [r7, #9]
    	m2.to = MA_UI(1);
 8014e56:	2381      	movs	r3, #129	; 0x81
 8014e58:	723b      	strb	r3, [r7, #8]
    	mqf_write_from_canton(&m2);
 8014e5a:	f107 0308 	add.w	r3, r7, #8
 8014e5e:	4618      	mov	r0, r3
 8014e60:	f7ff fe62 	bl	8014b28 <mqf_write_from_canton>
    }
    if (cidx>=0) handle_canton_cmd(cidx, m);
 8014e64:	697b      	ldr	r3, [r7, #20]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	db04      	blt.n	8014e74 <handle_msg_cantontest+0x80>
 8014e6a:	6879      	ldr	r1, [r7, #4]
 8014e6c:	6978      	ldr	r0, [r7, #20]
 8014e6e:	f7ff fe97 	bl	8014ba0 <handle_canton_cmd>
 8014e72:	e00c      	b.n	8014e8e <handle_msg_cantontest+0x9a>
    else {
    	// broadcast
    	for (int i=0; i<NUM_LOCAL_CANTONS_HW; i++) {
 8014e74:	2300      	movs	r3, #0
 8014e76:	613b      	str	r3, [r7, #16]
 8014e78:	e006      	b.n	8014e88 <handle_msg_cantontest+0x94>
    		handle_canton_cmd(i, m);
 8014e7a:	6879      	ldr	r1, [r7, #4]
 8014e7c:	6938      	ldr	r0, [r7, #16]
 8014e7e:	f7ff fe8f 	bl	8014ba0 <handle_canton_cmd>
    	for (int i=0; i<NUM_LOCAL_CANTONS_HW; i++) {
 8014e82:	693b      	ldr	r3, [r7, #16]
 8014e84:	3301      	adds	r3, #1
 8014e86:	613b      	str	r3, [r7, #16]
 8014e88:	693b      	ldr	r3, [r7, #16]
 8014e8a:	2b04      	cmp	r3, #4
 8014e8c:	ddf5      	ble.n	8014e7a <handle_msg_cantontest+0x86>
    	}
    }
}
 8014e8e:	3718      	adds	r7, #24
 8014e90:	46bd      	mov	sp, r7
 8014e92:	bd80      	pop	{r7, pc}
 8014e94:	080199e4 	.word	0x080199e4

08014e98 <canton_set_pwm>:
#define USE_PWM_STOP 0
/*
 * it seems that output goes to high impedence when we stop pwm ????
 */
static void canton_set_pwm(int cidx, const canton_config_t *c, canton_vars_t *v,  int8_t dir, int duty)
{
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	b08a      	sub	sp, #40	; 0x28
 8014e9c:	af02      	add	r7, sp, #8
 8014e9e:	60f8      	str	r0, [r7, #12]
 8014ea0:	60b9      	str	r1, [r7, #8]
 8014ea2:	607a      	str	r2, [r7, #4]
 8014ea4:	70fb      	strb	r3, [r7, #3]
	itm_debug3(DBG_LOWCTRL, "c/set_pwm", cidx, dir, duty);
 8014ea6:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eac:	9300      	str	r3, [sp, #0]
 8014eae:	4613      	mov	r3, r2
 8014eb0:	68fa      	ldr	r2, [r7, #12]
 8014eb2:	499c      	ldr	r1, [pc, #624]	; (8015124 <canton_set_pwm+0x28c>)
 8014eb4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014eb8:	f7ff fdea 	bl	8014a90 <itm_debug3>
	int t = 2*duty; // with centered pwm (or normal)
 8014ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ebe:	005b      	lsls	r3, r3, #1
 8014ec0:	617b      	str	r3, [r7, #20]

	if ((v->cur_dir == dir) && (v->cur_pwm_duty==duty)) {
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	f993 3000 	ldrsb.w	r3, [r3]
 8014ec8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014ecc:	429a      	cmp	r2, r3
 8014ece:	d10c      	bne.n	8014eea <canton_set_pwm+0x52>
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	885b      	ldrh	r3, [r3, #2]
 8014ed4:	461a      	mov	r2, r3
 8014ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ed8:	4293      	cmp	r3, r2
 8014eda:	d106      	bne.n	8014eea <canton_set_pwm+0x52>
		itm_debug1(DBG_LOWCTRL, "c/same", duty);
 8014edc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ede:	4992      	ldr	r1, [pc, #584]	; (8015128 <canton_set_pwm+0x290>)
 8014ee0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014ee4:	f7ff fdba 	bl	8014a5c <itm_debug1>
		return;
 8014ee8:	e118      	b.n	801511c <canton_set_pwm+0x284>
	}

	TIM_HandleTypeDef *pwm_timer = CantonTimerHandles[c->pwm_timer_num];
 8014eea:	68bb      	ldr	r3, [r7, #8]
 8014eec:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8014ef0:	461a      	mov	r2, r3
 8014ef2:	4b8e      	ldr	r3, [pc, #568]	; (801512c <canton_set_pwm+0x294>)
 8014ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ef8:	613b      	str	r3, [r7, #16]
	if (!pwm_timer) {
 8014efa:	693b      	ldr	r3, [r7, #16]
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d108      	bne.n	8014f12 <canton_set_pwm+0x7a>
		itm_debug1(DBG_LOWCTRL|DBG_ERR, "c/notim", c->pwm_timer_num);
 8014f00:	68bb      	ldr	r3, [r7, #8]
 8014f02:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8014f06:	461a      	mov	r2, r3
 8014f08:	4989      	ldr	r1, [pc, #548]	; (8015130 <canton_set_pwm+0x298>)
 8014f0a:	488a      	ldr	r0, [pc, #552]	; (8015134 <canton_set_pwm+0x29c>)
 8014f0c:	f7ff fda6 	bl	8014a5c <itm_debug1>
		return;
 8014f10:	e104      	b.n	801511c <canton_set_pwm+0x284>
	}
	if (v->cur_dir != dir) {
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	f993 3000 	ldrsb.w	r3, [r3]
 8014f18:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014f1c:	429a      	cmp	r2, r3
 8014f1e:	d03e      	beq.n	8014f9e <canton_set_pwm+0x106>
		v->cur_dir = dir;
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	78fa      	ldrb	r2, [r7, #3]
 8014f24:	701a      	strb	r2, [r3, #0]
		itm_debug3(DBG_LOWCTRL, "set dir", dir, c->ch0, c->ch1);
 8014f26:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8014f2a:	68bb      	ldr	r3, [r7, #8]
 8014f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f2e:	4619      	mov	r1, r3
 8014f30:	68bb      	ldr	r3, [r7, #8]
 8014f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f34:	9300      	str	r3, [sp, #0]
 8014f36:	460b      	mov	r3, r1
 8014f38:	497f      	ldr	r1, [pc, #508]	; (8015138 <canton_set_pwm+0x2a0>)
 8014f3a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8014f3e:	f7ff fda7 	bl	8014a90 <itm_debug3>
		if (dir>0) {
 8014f42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	dd0c      	ble.n	8014f64 <canton_set_pwm+0xcc>
			if (USE_PWM_STOP) my_HAL_TIM_PWM_Stop(pwm_timer, c->ch1);
			else HAL_TIM_PWM_Start(pwm_timer, c->ch1);
 8014f4a:	68bb      	ldr	r3, [r7, #8]
 8014f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f4e:	4619      	mov	r1, r3
 8014f50:	6938      	ldr	r0, [r7, #16]
 8014f52:	f7f3 f853 	bl	8007ffc <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(pwm_timer, c->ch0);
 8014f56:	68bb      	ldr	r3, [r7, #8]
 8014f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f5a:	4619      	mov	r1, r3
 8014f5c:	6938      	ldr	r0, [r7, #16]
 8014f5e:	f7f3 f84d 	bl	8007ffc <HAL_TIM_PWM_Start>
 8014f62:	e01c      	b.n	8014f9e <canton_set_pwm+0x106>
		} else if (dir<0) {
 8014f64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	da0c      	bge.n	8014f86 <canton_set_pwm+0xee>
			if (USE_PWM_STOP) my_HAL_TIM_PWM_Stop(pwm_timer, c->ch0);
			else HAL_TIM_PWM_Start(pwm_timer, c->ch0);
 8014f6c:	68bb      	ldr	r3, [r7, #8]
 8014f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f70:	4619      	mov	r1, r3
 8014f72:	6938      	ldr	r0, [r7, #16]
 8014f74:	f7f3 f842 	bl	8007ffc <HAL_TIM_PWM_Start>
			HAL_TIM_PWM_Start(pwm_timer, c->ch1);
 8014f78:	68bb      	ldr	r3, [r7, #8]
 8014f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f7c:	4619      	mov	r1, r3
 8014f7e:	6938      	ldr	r0, [r7, #16]
 8014f80:	f7f3 f83c 	bl	8007ffc <HAL_TIM_PWM_Start>
 8014f84:	e00b      	b.n	8014f9e <canton_set_pwm+0x106>
		} else {
			if (USE_PWM_STOP) {
				my_HAL_TIM_PWM_Stop(pwm_timer, c->ch0);
				my_HAL_TIM_PWM_Stop(pwm_timer, c->ch1);
			} else {
				HAL_TIM_PWM_Start(pwm_timer, c->ch0);
 8014f86:	68bb      	ldr	r3, [r7, #8]
 8014f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f8a:	4619      	mov	r1, r3
 8014f8c:	6938      	ldr	r0, [r7, #16]
 8014f8e:	f7f3 f835 	bl	8007ffc <HAL_TIM_PWM_Start>
				HAL_TIM_PWM_Start(pwm_timer, c->ch1);
 8014f92:	68bb      	ldr	r3, [r7, #8]
 8014f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f96:	4619      	mov	r1, r3
 8014f98:	6938      	ldr	r0, [r7, #16]
 8014f9a:	f7f3 f82f 	bl	8007ffc <HAL_TIM_PWM_Start>
			}
		}
	}
	if (!dir) {
 8014f9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d101      	bne.n	8014faa <canton_set_pwm+0x112>
		duty = 0;
 8014fa6:	2300      	movs	r3, #0
 8014fa8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (USE_PWM_STOP) {
			v->cur_pwm_duty = 0;
			return;
		}
	}
	v->cur_pwm_duty = duty;
 8014faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fac:	b29a      	uxth	r2, r3
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	805a      	strh	r2, [r3, #2]
	uint32_t chon;
	uint32_t choff;
	if (dir>0) {
 8014fb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	dd06      	ble.n	8014fc8 <canton_set_pwm+0x130>
		chon = c->ch0;
 8014fba:	68bb      	ldr	r3, [r7, #8]
 8014fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fbe:	61bb      	str	r3, [r7, #24]
		choff = c->ch1;
 8014fc0:	68bb      	ldr	r3, [r7, #8]
 8014fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fc4:	61fb      	str	r3, [r7, #28]
 8014fc6:	e005      	b.n	8014fd4 <canton_set_pwm+0x13c>
	} else {
		chon = c->ch1;
 8014fc8:	68bb      	ldr	r3, [r7, #8]
 8014fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fcc:	61bb      	str	r3, [r7, #24]
		choff = c->ch0;
 8014fce:	68bb      	ldr	r3, [r7, #8]
 8014fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fd2:	61fb      	str	r3, [r7, #28]
	}
	if (!USE_PWM_STOP) {
		switch (choff) {
 8014fd4:	69fb      	ldr	r3, [r7, #28]
 8014fd6:	2b0c      	cmp	r3, #12
 8014fd8:	d848      	bhi.n	801506c <canton_set_pwm+0x1d4>
 8014fda:	a201      	add	r2, pc, #4	; (adr r2, 8014fe0 <canton_set_pwm+0x148>)
 8014fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fe0:	08015015 	.word	0x08015015
 8014fe4:	0801506d 	.word	0x0801506d
 8014fe8:	0801506d 	.word	0x0801506d
 8014fec:	0801506d 	.word	0x0801506d
 8014ff0:	0801502b 	.word	0x0801502b
 8014ff4:	0801506d 	.word	0x0801506d
 8014ff8:	0801506d 	.word	0x0801506d
 8014ffc:	0801506d 	.word	0x0801506d
 8015000:	08015041 	.word	0x08015041
 8015004:	0801506d 	.word	0x0801506d
 8015008:	0801506d 	.word	0x0801506d
 801500c:	0801506d 	.word	0x0801506d
 8015010:	08015057 	.word	0x08015057
		case TIM_CHANNEL_1:
			itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH1/CCR1", 0);
 8015014:	2200      	movs	r2, #0
 8015016:	4949      	ldr	r1, [pc, #292]	; (801513c <canton_set_pwm+0x2a4>)
 8015018:	f240 1001 	movw	r0, #257	; 0x101
 801501c:	f7ff fd1e 	bl	8014a5c <itm_debug1>
			pwm_timer->Instance->CCR1 = 0;
 8015020:	693b      	ldr	r3, [r7, #16]
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	2200      	movs	r2, #0
 8015026:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8015028:	e026      	b.n	8015078 <canton_set_pwm+0x1e0>
		case TIM_CHANNEL_2:
			itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH2/CCR1", 0);
 801502a:	2200      	movs	r2, #0
 801502c:	4944      	ldr	r1, [pc, #272]	; (8015140 <canton_set_pwm+0x2a8>)
 801502e:	f240 1001 	movw	r0, #257	; 0x101
 8015032:	f7ff fd13 	bl	8014a5c <itm_debug1>
			pwm_timer->Instance->CCR2 = 0;
 8015036:	693b      	ldr	r3, [r7, #16]
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	2200      	movs	r2, #0
 801503c:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 801503e:	e01b      	b.n	8015078 <canton_set_pwm+0x1e0>
		case TIM_CHANNEL_3:
			itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH3/CCR1", 0);
 8015040:	2200      	movs	r2, #0
 8015042:	4940      	ldr	r1, [pc, #256]	; (8015144 <canton_set_pwm+0x2ac>)
 8015044:	f240 1001 	movw	r0, #257	; 0x101
 8015048:	f7ff fd08 	bl	8014a5c <itm_debug1>
			pwm_timer->Instance->CCR3 = 0;
 801504c:	693b      	ldr	r3, [r7, #16]
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	2200      	movs	r2, #0
 8015052:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8015054:	e010      	b.n	8015078 <canton_set_pwm+0x1e0>
		case TIM_CHANNEL_4:
			itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH4/CCR1", 0);
 8015056:	2200      	movs	r2, #0
 8015058:	493b      	ldr	r1, [pc, #236]	; (8015148 <canton_set_pwm+0x2b0>)
 801505a:	f240 1001 	movw	r0, #257	; 0x101
 801505e:	f7ff fcfd 	bl	8014a5c <itm_debug1>
			pwm_timer->Instance->CCR4 = 0;
 8015062:	693b      	ldr	r3, [r7, #16]
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	2200      	movs	r2, #0
 8015068:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 801506a:	e005      	b.n	8015078 <canton_set_pwm+0x1e0>
		default:
			canton_error(ERR_BAD_PARAM_TIM, "bad timer channel");
 801506c:	4937      	ldr	r1, [pc, #220]	; (801514c <canton_set_pwm+0x2b4>)
 801506e:	f06f 0002 	mvn.w	r0, #2
 8015072:	f7ff fd29 	bl	8014ac8 <canton_error>
			break;
 8015076:	bf00      	nop
		}
	}
	switch (chon) {
 8015078:	69bb      	ldr	r3, [r7, #24]
 801507a:	2b0c      	cmp	r3, #12
 801507c:	d848      	bhi.n	8015110 <canton_set_pwm+0x278>
 801507e:	a201      	add	r2, pc, #4	; (adr r2, 8015084 <canton_set_pwm+0x1ec>)
 8015080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015084:	080150b9 	.word	0x080150b9
 8015088:	08015111 	.word	0x08015111
 801508c:	08015111 	.word	0x08015111
 8015090:	08015111 	.word	0x08015111
 8015094:	080150cf 	.word	0x080150cf
 8015098:	08015111 	.word	0x08015111
 801509c:	08015111 	.word	0x08015111
 80150a0:	08015111 	.word	0x08015111
 80150a4:	080150e5 	.word	0x080150e5
 80150a8:	08015111 	.word	0x08015111
 80150ac:	08015111 	.word	0x08015111
 80150b0:	08015111 	.word	0x08015111
 80150b4:	080150fb 	.word	0x080150fb
	case TIM_CHANNEL_1:
		itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH1/CCR1", t);
 80150b8:	697a      	ldr	r2, [r7, #20]
 80150ba:	4920      	ldr	r1, [pc, #128]	; (801513c <canton_set_pwm+0x2a4>)
 80150bc:	f240 1001 	movw	r0, #257	; 0x101
 80150c0:	f7ff fccc 	bl	8014a5c <itm_debug1>
		pwm_timer->Instance->CCR1 = t;
 80150c4:	693b      	ldr	r3, [r7, #16]
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	697a      	ldr	r2, [r7, #20]
 80150ca:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80150cc:	e026      	b.n	801511c <canton_set_pwm+0x284>
	case TIM_CHANNEL_2:
		itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH2/CCR1", t);
 80150ce:	697a      	ldr	r2, [r7, #20]
 80150d0:	491b      	ldr	r1, [pc, #108]	; (8015140 <canton_set_pwm+0x2a8>)
 80150d2:	f240 1001 	movw	r0, #257	; 0x101
 80150d6:	f7ff fcc1 	bl	8014a5c <itm_debug1>
		pwm_timer->Instance->CCR2 = t;
 80150da:	693b      	ldr	r3, [r7, #16]
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	697a      	ldr	r2, [r7, #20]
 80150e0:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80150e2:	e01b      	b.n	801511c <canton_set_pwm+0x284>
	case TIM_CHANNEL_3:
		itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH3/CCR1", t);
 80150e4:	697a      	ldr	r2, [r7, #20]
 80150e6:	4917      	ldr	r1, [pc, #92]	; (8015144 <canton_set_pwm+0x2ac>)
 80150e8:	f240 1001 	movw	r0, #257	; 0x101
 80150ec:	f7ff fcb6 	bl	8014a5c <itm_debug1>
		pwm_timer->Instance->CCR3 = t;
 80150f0:	693b      	ldr	r3, [r7, #16]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	697a      	ldr	r2, [r7, #20]
 80150f6:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80150f8:	e010      	b.n	801511c <canton_set_pwm+0x284>
	case TIM_CHANNEL_4:
		itm_debug1(DBG_LOWCTRL|DBG_TIM, "CH4/CCR1", t);
 80150fa:	697a      	ldr	r2, [r7, #20]
 80150fc:	4912      	ldr	r1, [pc, #72]	; (8015148 <canton_set_pwm+0x2b0>)
 80150fe:	f240 1001 	movw	r0, #257	; 0x101
 8015102:	f7ff fcab 	bl	8014a5c <itm_debug1>
		pwm_timer->Instance->CCR4 = t;
 8015106:	693b      	ldr	r3, [r7, #16]
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	697a      	ldr	r2, [r7, #20]
 801510c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 801510e:	e005      	b.n	801511c <canton_set_pwm+0x284>
	default:
		canton_error(ERR_BAD_PARAM_TIM, "bad timer channel");
 8015110:	490e      	ldr	r1, [pc, #56]	; (801514c <canton_set_pwm+0x2b4>)
 8015112:	f06f 0002 	mvn.w	r0, #2
 8015116:	f7ff fcd7 	bl	8014ac8 <canton_error>
		break;
 801511a:	bf00      	nop
	}

}
 801511c:	3720      	adds	r7, #32
 801511e:	46bd      	mov	sp, r7
 8015120:	bd80      	pop	{r7, pc}
 8015122:	bf00      	nop
 8015124:	080199f4 	.word	0x080199f4
 8015128:	08019a00 	.word	0x08019a00
 801512c:	200052c4 	.word	0x200052c4
 8015130:	08019a08 	.word	0x08019a08
 8015134:	80000100 	.word	0x80000100
 8015138:	08019a10 	.word	0x08019a10
 801513c:	08019a18 	.word	0x08019a18
 8015140:	08019a24 	.word	0x08019a24
 8015144:	08019a30 	.word	0x08019a30
 8015148:	08019a3c 	.word	0x08019a3c
 801514c:	08019a48 	.word	0x08019a48

08015150 <canton_set_volt>:
void canton_set_volt(int cidx, const canton_config_t *c, canton_vars_t *v, int voltidx)
{
 8015150:	b580      	push	{r7, lr}
 8015152:	b086      	sub	sp, #24
 8015154:	af02      	add	r7, sp, #8
 8015156:	60f8      	str	r0, [r7, #12]
 8015158:	60b9      	str	r1, [r7, #8]
 801515a:	607a      	str	r2, [r7, #4]
 801515c:	603b      	str	r3, [r7, #0]
	v->cur_voltidx = voltidx;
 801515e:	683b      	ldr	r3, [r7, #0]
 8015160:	b2da      	uxtb	r2, r3
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	705a      	strb	r2, [r3, #1]
    v->selected_centivolt =  (c->volts_cv[v->cur_voltidx]);
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	785b      	ldrb	r3, [r3, #1]
 801516a:	461a      	mov	r2, r3
 801516c:	68bb      	ldr	r3, [r7, #8]
 801516e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8015172:	461a      	mov	r2, r3
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	605a      	str	r2, [r3, #4]
	itm_debug3(DBG_LOWCTRL, "c/set_volt", cidx, voltidx, v->selected_centivolt);
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	685b      	ldr	r3, [r3, #4]
 801517c:	9300      	str	r3, [sp, #0]
 801517e:	683b      	ldr	r3, [r7, #0]
 8015180:	68fa      	ldr	r2, [r7, #12]
 8015182:	4917      	ldr	r1, [pc, #92]	; (80151e0 <canton_set_volt+0x90>)
 8015184:	f44f 7080 	mov.w	r0, #256	; 0x100
 8015188:	f7ff fc82 	bl	8014a90 <itm_debug3>
    if ((0)) debug_info('C', 0, "SET VLT ", voltidx,  v->selected_centivolt,0);
    if ((0)) debug_info('C', 0, "VLT BIT ", (voltidx & 0x03) ? 1 : 0,
    				(voltidx & 0x02) ? 1 : 0,
    				(voltidx & 0x01) ? 1 : 0);

	HAL_GPIO_WritePin(c->volt_port_b0, c->volt_b0, (voltidx & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 801518c:	68bb      	ldr	r3, [r7, #8]
 801518e:	6918      	ldr	r0, [r3, #16]
 8015190:	68bb      	ldr	r3, [r7, #8]
 8015192:	8b99      	ldrh	r1, [r3, #28]
 8015194:	683b      	ldr	r3, [r7, #0]
 8015196:	b2db      	uxtb	r3, r3
 8015198:	f003 0301 	and.w	r3, r3, #1
 801519c:	b2db      	uxtb	r3, r3
 801519e:	461a      	mov	r2, r3
 80151a0:	f7ee f846 	bl	8003230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c->volt_port_b1, c->volt_b1, (voltidx & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80151a4:	68bb      	ldr	r3, [r7, #8]
 80151a6:	6958      	ldr	r0, [r3, #20]
 80151a8:	68bb      	ldr	r3, [r7, #8]
 80151aa:	8bd9      	ldrh	r1, [r3, #30]
 80151ac:	683b      	ldr	r3, [r7, #0]
 80151ae:	105b      	asrs	r3, r3, #1
 80151b0:	b2db      	uxtb	r3, r3
 80151b2:	f003 0301 	and.w	r3, r3, #1
 80151b6:	b2db      	uxtb	r3, r3
 80151b8:	461a      	mov	r2, r3
 80151ba:	f7ee f839 	bl	8003230 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(c->volt_port_b2, c->volt_b2, (voltidx & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80151be:	68bb      	ldr	r3, [r7, #8]
 80151c0:	6998      	ldr	r0, [r3, #24]
 80151c2:	68bb      	ldr	r3, [r7, #8]
 80151c4:	8c19      	ldrh	r1, [r3, #32]
 80151c6:	683b      	ldr	r3, [r7, #0]
 80151c8:	109b      	asrs	r3, r3, #2
 80151ca:	b2db      	uxtb	r3, r3
 80151cc:	f003 0301 	and.w	r3, r3, #1
 80151d0:	b2db      	uxtb	r3, r3
 80151d2:	461a      	mov	r2, r3
 80151d4:	f7ee f82c 	bl	8003230 <HAL_GPIO_WritePin>
	if (voltidx & 0x04) s |= VOLT_0_SEL2_Pin; else r |=  c->volt_b2;
	if (voltidx & 0x08) s |= VOLT_0_SEL3_Pin; else r |=  c->volt_b3;
	HAL_GPIO_WritePin(c->volt_port, s, GPIO_PIN_SET);
	HAL_GPIO_WritePin(c->volt_port, r, GPIO_PIN_RESET);
#endif
}
 80151d8:	bf00      	nop
 80151da:	3710      	adds	r7, #16
 80151dc:	46bd      	mov	sp, r7
 80151de:	bd80      	pop	{r7, pc}
 80151e0:	08019a5c 	.word	0x08019a5c

080151e4 <volt_index>:
int volt_index(uint16_t mili_power,
		const canton_config_t *c1, //canton_vars_t *v1,
		_UNUSED_ const canton_config_t *c2, //canton_vars_t *v2,
		int *pvi1, int *pvi2,
		train_volt_policy_t pol)
{
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b08a      	sub	sp, #40	; 0x28
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	60b9      	str	r1, [r7, #8]
 80151ec:	607a      	str	r2, [r7, #4]
 80151ee:	603b      	str	r3, [r7, #0]
 80151f0:	4603      	mov	r3, r0
 80151f2:	81fb      	strh	r3, [r7, #14]
	int duty=0;
 80151f4:	2300      	movs	r3, #0
 80151f6:	627b      	str	r3, [r7, #36]	; 0x24
	*pvi1 = MAX_PVI;
 80151f8:	683b      	ldr	r3, [r7, #0]
 80151fa:	2207      	movs	r2, #7
 80151fc:	601a      	str	r2, [r3, #0]
	*pvi2 = MAX_PVI;
 80151fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015200:	2207      	movs	r2, #7
 8015202:	601a      	str	r2, [r3, #0]

	//if (mili_power <0)    return canton_error_rc(0, ERR_BAD_PARAM_MPOW, "negative milipower");
	if (mili_power >1000) return canton_error_rc(0, ERR_BAD_PARAM_MPOW, "milipower should be 0-999");
 8015204:	89fb      	ldrh	r3, [r7, #14]
 8015206:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801520a:	d907      	bls.n	801521c <volt_index+0x38>
 801520c:	4a54      	ldr	r2, [pc, #336]	; (8015360 <volt_index+0x17c>)
 801520e:	f06f 0103 	mvn.w	r1, #3
 8015212:	2000      	movs	r0, #0
 8015214:	f7ff fc67 	bl	8014ae6 <canton_error_rc>
 8015218:	4603      	mov	r3, r0
 801521a:	e09d      	b.n	8015358 <volt_index+0x174>
	switch (pol) {
 801521c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8015220:	2b01      	cmp	r3, #1
 8015222:	d00d      	beq.n	8015240 <volt_index+0x5c>
 8015224:	2b02      	cmp	r3, #2
 8015226:	d052      	beq.n	80152ce <volt_index+0xea>
 8015228:	2b00      	cmp	r3, #0
 801522a:	d017      	beq.n	801525c <volt_index+0x78>
	default :
        duty = 0;
 801522c:	2300      	movs	r3, #0
 801522e:	627b      	str	r3, [r7, #36]	; 0x24
		return canton_error_rc(0, ERR_BAD_PARAM_VPOL, "bad volt policy");
 8015230:	4a4c      	ldr	r2, [pc, #304]	; (8015364 <volt_index+0x180>)
 8015232:	f06f 0104 	mvn.w	r1, #4
 8015236:	2000      	movs	r0, #0
 8015238:	f7ff fc55 	bl	8014ae6 <canton_error_rc>
 801523c:	4603      	mov	r3, r0
 801523e:	e08b      	b.n	8015358 <volt_index+0x174>
		break;
	case vpolicy_pure_pwm:
		*pvi1 = 0;
 8015240:	683b      	ldr	r3, [r7, #0]
 8015242:	2200      	movs	r2, #0
 8015244:	601a      	str	r2, [r3, #0]
		*pvi2 = 0;
 8015246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015248:	2200      	movs	r2, #0
 801524a:	601a      	str	r2, [r3, #0]
		duty = mili_power / 10;
 801524c:	89fb      	ldrh	r3, [r7, #14]
 801524e:	4a46      	ldr	r2, [pc, #280]	; (8015368 <volt_index+0x184>)
 8015250:	fba2 2303 	umull	r2, r3, r2, r3
 8015254:	08db      	lsrs	r3, r3, #3
 8015256:	b29b      	uxth	r3, r3
 8015258:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 801525a:	e077      	b.n	801534c <volt_index+0x168>
    case vpolicy_normal:
            // fall back to full volt +  pwm
            *pvi1 = *pvi2 = 0;
 801525c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801525e:	2200      	movs	r2, #0
 8015260:	601a      	str	r2, [r3, #0]
 8015262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015264:	681a      	ldr	r2, [r3, #0]
 8015266:	683b      	ldr	r3, [r7, #0]
 8015268:	601a      	str	r2, [r3, #0]
            duty = mili_power / 10;
 801526a:	89fb      	ldrh	r3, [r7, #14]
 801526c:	4a3e      	ldr	r2, [pc, #248]	; (8015368 <volt_index+0x184>)
 801526e:	fba2 2303 	umull	r2, r3, r2, r3
 8015272:	08db      	lsrs	r3, r3, #3
 8015274:	b29b      	uxth	r3, r3
 8015276:	627b      	str	r3, [r7, #36]	; 0x24
            for (int i=MAX_PVI; i>=0; i--) {
 8015278:	2307      	movs	r3, #7
 801527a:	623b      	str	r3, [r7, #32]
 801527c:	e023      	b.n	80152c6 <volt_index+0xe2>
                if (!c1->volts_cv[i]) continue;
 801527e:	68bb      	ldr	r3, [r7, #8]
 8015280:	6a3a      	ldr	r2, [r7, #32]
 8015282:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8015286:	2b00      	cmp	r3, #0
 8015288:	d017      	beq.n	80152ba <volt_index+0xd6>
                // c1->volts in 0.01V unit
                int d = 100*mili_power / c1->volts_cv[i];
 801528a:	89fb      	ldrh	r3, [r7, #14]
 801528c:	2264      	movs	r2, #100	; 0x64
 801528e:	fb02 f303 	mul.w	r3, r2, r3
 8015292:	68ba      	ldr	r2, [r7, #8]
 8015294:	6a39      	ldr	r1, [r7, #32]
 8015296:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801529a:	fb93 f3f2 	sdiv	r3, r3, r2
 801529e:	613b      	str	r3, [r7, #16]
                if (d>MAX_PWM) {
 80152a0:	693b      	ldr	r3, [r7, #16]
 80152a2:	2b5a      	cmp	r3, #90	; 0x5a
 80152a4:	dc0b      	bgt.n	80152be <volt_index+0xda>
                    continue;
                }
                // XXX for now we assume all canton have same board with same voltage level
                *pvi1 = *pvi2 = i;
 80152a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152a8:	6a3a      	ldr	r2, [r7, #32]
 80152aa:	601a      	str	r2, [r3, #0]
 80152ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152ae:	681a      	ldr	r2, [r3, #0]
 80152b0:	683b      	ldr	r3, [r7, #0]
 80152b2:	601a      	str	r2, [r3, #0]
                duty = d;
 80152b4:	693b      	ldr	r3, [r7, #16]
 80152b6:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 80152b8:	e008      	b.n	80152cc <volt_index+0xe8>
                if (!c1->volts_cv[i]) continue;
 80152ba:	bf00      	nop
 80152bc:	e000      	b.n	80152c0 <volt_index+0xdc>
                    continue;
 80152be:	bf00      	nop
            for (int i=MAX_PVI; i>=0; i--) {
 80152c0:	6a3b      	ldr	r3, [r7, #32]
 80152c2:	3b01      	subs	r3, #1
 80152c4:	623b      	str	r3, [r7, #32]
 80152c6:	6a3b      	ldr	r3, [r7, #32]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	dad8      	bge.n	801527e <volt_index+0x9a>
            }
		break;
 80152cc:	e03e      	b.n	801534c <volt_index+0x168>
			break;
    	}
    	break;
#endif
	case vpolicy_pure_volt:
		duty = MAX_PWM;
 80152ce:	235a      	movs	r3, #90	; 0x5a
 80152d0:	627b      	str	r3, [r7, #36]	; 0x24
        int s = 0;
 80152d2:	2300      	movs	r3, #0
 80152d4:	61fb      	str	r3, [r7, #28]
		for (int i=MAX_PVI; i>=0; i--) {
 80152d6:	2307      	movs	r3, #7
 80152d8:	61bb      	str	r3, [r7, #24]
 80152da:	e031      	b.n	8015340 <volt_index+0x15c>
			if (!c1->volts_cv[i]) continue;
 80152dc:	68bb      	ldr	r3, [r7, #8]
 80152de:	69ba      	ldr	r2, [r7, #24]
 80152e0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d027      	beq.n	8015338 <volt_index+0x154>
			// c1->volts in 0.01V unit. 10V = 1000
			int p = c1->volts_cv[i]*MAX_PWM/100;  // 0.01V * % , ex : 345*90
 80152e8:	68bb      	ldr	r3, [r7, #8]
 80152ea:	69ba      	ldr	r2, [r7, #24]
 80152ec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80152f0:	461a      	mov	r2, r3
 80152f2:	235a      	movs	r3, #90	; 0x5a
 80152f4:	fb03 f302 	mul.w	r3, r3, r2
 80152f8:	4a1c      	ldr	r2, [pc, #112]	; (801536c <volt_index+0x188>)
 80152fa:	fb82 1203 	smull	r1, r2, r2, r3
 80152fe:	1152      	asrs	r2, r2, #5
 8015300:	17db      	asrs	r3, r3, #31
 8015302:	1ad3      	subs	r3, r2, r3
 8015304:	617b      	str	r3, [r7, #20]
			if (p <= mili_power) {
 8015306:	89fb      	ldrh	r3, [r7, #14]
 8015308:	697a      	ldr	r2, [r7, #20]
 801530a:	429a      	cmp	r2, r3
 801530c:	dc08      	bgt.n	8015320 <volt_index+0x13c>
                s = 1;
 801530e:	2301      	movs	r3, #1
 8015310:	61fb      	str	r3, [r7, #28]
				*pvi1 = i;
 8015312:	683b      	ldr	r3, [r7, #0]
 8015314:	69ba      	ldr	r2, [r7, #24]
 8015316:	601a      	str	r2, [r3, #0]
				*pvi2 = i;
 8015318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801531a:	69ba      	ldr	r2, [r7, #24]
 801531c:	601a      	str	r2, [r3, #0]
 801531e:	e00c      	b.n	801533a <volt_index+0x156>
			} else {
                if (!s) {
 8015320:	69fb      	ldr	r3, [r7, #28]
 8015322:	2b00      	cmp	r3, #0
 8015324:	d110      	bne.n	8015348 <volt_index+0x164>
                    // lower than minimal power
                    *pvi1 = i;
 8015326:	683b      	ldr	r3, [r7, #0]
 8015328:	69ba      	ldr	r2, [r7, #24]
 801532a:	601a      	str	r2, [r3, #0]
                    *pvi2 = i;
 801532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801532e:	69ba      	ldr	r2, [r7, #24]
 8015330:	601a      	str	r2, [r3, #0]
                    duty = 0;
 8015332:	2300      	movs	r3, #0
 8015334:	627b      	str	r3, [r7, #36]	; 0x24
                }
                // ok
				break;
 8015336:	e007      	b.n	8015348 <volt_index+0x164>
			if (!c1->volts_cv[i]) continue;
 8015338:	bf00      	nop
		for (int i=MAX_PVI; i>=0; i--) {
 801533a:	69bb      	ldr	r3, [r7, #24]
 801533c:	3b01      	subs	r3, #1
 801533e:	61bb      	str	r3, [r7, #24]
 8015340:	69bb      	ldr	r3, [r7, #24]
 8015342:	2b00      	cmp	r3, #0
 8015344:	daca      	bge.n	80152dc <volt_index+0xf8>
 8015346:	e000      	b.n	801534a <volt_index+0x166>
				break;
 8015348:	bf00      	nop
			}
		}
		break;
 801534a:	bf00      	nop
	}
    if (duty>MAX_PWM) {
 801534c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801534e:	2b5a      	cmp	r3, #90	; 0x5a
 8015350:	dd01      	ble.n	8015356 <volt_index+0x172>
        duty = MAX_PWM;
 8015352:	235a      	movs	r3, #90	; 0x5a
 8015354:	627b      	str	r3, [r7, #36]	; 0x24
        //canton_error(ERR_BAD_PARAM_MPOW, "test msg");
    }
	return duty;
 8015356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015358:	4618      	mov	r0, r3
 801535a:	3728      	adds	r7, #40	; 0x28
 801535c:	46bd      	mov	sp, r7
 801535e:	bd80      	pop	{r7, pc}
 8015360:	08019a68 	.word	0x08019a68
 8015364:	08019a84 	.word	0x08019a84
 8015368:	cccccccd 	.word	0xcccccccd
 801536c:	51eb851f 	.word	0x51eb851f

08015370 <itm_debug1>:
{
 8015370:	b580      	push	{r7, lr}
 8015372:	b086      	sub	sp, #24
 8015374:	af02      	add	r7, sp, #8
 8015376:	60f8      	str	r0, [r7, #12]
 8015378:	60b9      	str	r1, [r7, #8]
 801537a:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 801537c:	4b08      	ldr	r3, [pc, #32]	; (80153a0 <itm_debug1+0x30>)
 801537e:	681a      	ldr	r2, [r3, #0]
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	4013      	ands	r3, r2
 8015384:	2b00      	cmp	r3, #0
 8015386:	d007      	beq.n	8015398 <itm_debug1+0x28>
 8015388:	2301      	movs	r3, #1
 801538a:	9300      	str	r3, [sp, #0]
 801538c:	2300      	movs	r3, #0
 801538e:	2200      	movs	r2, #0
 8015390:	6879      	ldr	r1, [r7, #4]
 8015392:	68b8      	ldr	r0, [r7, #8]
 8015394:	f003 fd68 	bl	8018e68 <_itm_debug3>
}
 8015398:	bf00      	nop
 801539a:	3710      	adds	r7, #16
 801539c:	46bd      	mov	sp, r7
 801539e:	bd80      	pop	{r7, pc}
 80153a0:	200005a4 	.word	0x200005a4

080153a4 <itm_debug2>:
{
 80153a4:	b580      	push	{r7, lr}
 80153a6:	b086      	sub	sp, #24
 80153a8:	af02      	add	r7, sp, #8
 80153aa:	60f8      	str	r0, [r7, #12]
 80153ac:	60b9      	str	r1, [r7, #8]
 80153ae:	607a      	str	r2, [r7, #4]
 80153b0:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 80153b2:	4b09      	ldr	r3, [pc, #36]	; (80153d8 <itm_debug2+0x34>)
 80153b4:	681a      	ldr	r2, [r3, #0]
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	4013      	ands	r3, r2
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d007      	beq.n	80153ce <itm_debug2+0x2a>
 80153be:	2302      	movs	r3, #2
 80153c0:	9300      	str	r3, [sp, #0]
 80153c2:	2300      	movs	r3, #0
 80153c4:	683a      	ldr	r2, [r7, #0]
 80153c6:	6879      	ldr	r1, [r7, #4]
 80153c8:	68b8      	ldr	r0, [r7, #8]
 80153ca:	f003 fd4d 	bl	8018e68 <_itm_debug3>
}
 80153ce:	bf00      	nop
 80153d0:	3710      	adds	r7, #16
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}
 80153d6:	bf00      	nop
 80153d8:	200005a4 	.word	0x200005a4

080153dc <itm_debug3>:
{
 80153dc:	b580      	push	{r7, lr}
 80153de:	b086      	sub	sp, #24
 80153e0:	af02      	add	r7, sp, #8
 80153e2:	60f8      	str	r0, [r7, #12]
 80153e4:	60b9      	str	r1, [r7, #8]
 80153e6:	607a      	str	r2, [r7, #4]
 80153e8:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 80153ea:	4b09      	ldr	r3, [pc, #36]	; (8015410 <itm_debug3+0x34>)
 80153ec:	681a      	ldr	r2, [r3, #0]
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	4013      	ands	r3, r2
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d007      	beq.n	8015406 <itm_debug3+0x2a>
 80153f6:	2303      	movs	r3, #3
 80153f8:	9300      	str	r3, [sp, #0]
 80153fa:	69bb      	ldr	r3, [r7, #24]
 80153fc:	683a      	ldr	r2, [r7, #0]
 80153fe:	6879      	ldr	r1, [r7, #4]
 8015400:	68b8      	ldr	r0, [r7, #8]
 8015402:	f003 fd31 	bl	8018e68 <_itm_debug3>
}
 8015406:	bf00      	nop
 8015408:	3710      	adds	r7, #16
 801540a:	46bd      	mov	sp, r7
 801540c:	bd80      	pop	{r7, pc}
 801540e:	bf00      	nop
 8015410:	200005a4 	.word	0x200005a4

08015414 <runtime_error>:
	trainctl_error('G', code, msg);
	return NULL;
}

static inline void *runtime_error(int code, const char *msg)
{
 8015414:	b580      	push	{r7, lr}
 8015416:	b082      	sub	sp, #8
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
 801541c:	6039      	str	r1, [r7, #0]
	itm_debug1(DBG_CONFIG, msg, code);
 801541e:	687a      	ldr	r2, [r7, #4]
 8015420:	6839      	ldr	r1, [r7, #0]
 8015422:	2080      	movs	r0, #128	; 0x80
 8015424:	f7ff ffa4 	bl	8015370 <itm_debug1>
	trainctl_error('G', code, msg);
 8015428:	683a      	ldr	r2, [r7, #0]
 801542a:	6879      	ldr	r1, [r7, #4]
 801542c:	2047      	movs	r0, #71	; 0x47
 801542e:	f000 fc37 	bl	8015ca0 <trainctl_error>
	return NULL;
 8015432:	2300      	movs	r3, #0
}
 8015434:	4618      	mov	r0, r3
 8015436:	3708      	adds	r7, #8
 8015438:	46bd      	mov	sp, r7
 801543a:	bd80      	pop	{r7, pc}

0801543c <bemf_reset>:
#define USE_CANTON(_idx) \
		const canton_config_t *cconf = get_canton_cnf(_idx); \
		//canton_vars_t         *cvars = &canton_vars[_idx];

void bemf_reset(void)
{
 801543c:	b480      	push	{r7}
 801543e:	b083      	sub	sp, #12
 8015440:	af00      	add	r7, sp, #0
	for (int i=0; i<NUM_LOCAL_CANTONS_SW; i++) {
 8015442:	2300      	movs	r3, #0
 8015444:	607b      	str	r3, [r7, #4]
 8015446:	e007      	b.n	8015458 <bemf_reset+0x1c>
		bemf_to[i]=0xFF;
 8015448:	4a08      	ldr	r2, [pc, #32]	; (801546c <bemf_reset+0x30>)
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	4413      	add	r3, r2
 801544e:	22ff      	movs	r2, #255	; 0xff
 8015450:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<NUM_LOCAL_CANTONS_SW; i++) {
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	3301      	adds	r3, #1
 8015456:	607b      	str	r3, [r7, #4]
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	2b07      	cmp	r3, #7
 801545c:	ddf4      	ble.n	8015448 <bemf_reset+0xc>
	}
}
 801545e:	bf00      	nop
 8015460:	370c      	adds	r7, #12
 8015462:	46bd      	mov	sp, r7
 8015464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015468:	4770      	bx	lr
 801546a:	bf00      	nop
 801546c:	2000023c 	.word	0x2000023c

08015470 <bemf_msg>:

void bemf_msg(msg_64_t *m)
{
 8015470:	b580      	push	{r7, lr}
 8015472:	b084      	sub	sp, #16
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
	if (!IS_CANTON(m->to)) {
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	781b      	ldrb	r3, [r3, #0]
 801547c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8015480:	2b00      	cmp	r3, #0
 8015482:	d008      	beq.n	8015496 <bemf_msg+0x26>
		// error
		itm_debug1(DBG_ERR, "bad bemf c", m->to);
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	781b      	ldrb	r3, [r3, #0]
 8015488:	461a      	mov	r2, r3
 801548a:	491c      	ldr	r1, [pc, #112]	; (80154fc <bemf_msg+0x8c>)
 801548c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8015490:	f7ff ff6e 	bl	8015370 <itm_debug1>
		return;
 8015494:	e02f      	b.n	80154f6 <bemf_msg+0x86>
	}
	int idx = m->to & 0x07;
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	781b      	ldrb	r3, [r3, #0]
 801549a:	f003 0307 	and.w	r3, r3, #7
 801549e:	60fb      	str	r3, [r7, #12]
	switch(m->cmd) {
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	789b      	ldrb	r3, [r3, #2]
 80154a4:	2b40      	cmp	r3, #64	; 0x40
 80154a6:	d00d      	beq.n	80154c4 <bemf_msg+0x54>
 80154a8:	2b41      	cmp	r3, #65	; 0x41
 80154aa:	d11b      	bne.n	80154e4 <bemf_msg+0x74>
	case CMD_BEMF_OFF:
		itm_debug1(DBG_SPDCTL|DBG_CTRL, "BEMF OFF", idx);
 80154ac:	68fa      	ldr	r2, [r7, #12]
 80154ae:	4914      	ldr	r1, [pc, #80]	; (8015500 <bemf_msg+0x90>)
 80154b0:	f44f 6082 	mov.w	r0, #1040	; 0x410
 80154b4:	f7ff ff5c 	bl	8015370 <itm_debug1>
		bemf_to[idx] = 0xFF;
 80154b8:	4a12      	ldr	r2, [pc, #72]	; (8015504 <bemf_msg+0x94>)
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	4413      	add	r3, r2
 80154be:	22ff      	movs	r2, #255	; 0xff
 80154c0:	701a      	strb	r2, [r3, #0]
		break;
 80154c2:	e018      	b.n	80154f6 <bemf_msg+0x86>
	case CMD_BEMF_ON:
		itm_debug2(DBG_SPDCTL|DBG_CTRL, "BEMF ON", idx, m->from);
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	785b      	ldrb	r3, [r3, #1]
 80154c8:	68fa      	ldr	r2, [r7, #12]
 80154ca:	490f      	ldr	r1, [pc, #60]	; (8015508 <bemf_msg+0x98>)
 80154cc:	f44f 6082 	mov.w	r0, #1040	; 0x410
 80154d0:	f7ff ff68 	bl	80153a4 <itm_debug2>
		bemf_to[idx] = m->from;
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	7859      	ldrb	r1, [r3, #1]
 80154d8:	4a0a      	ldr	r2, [pc, #40]	; (8015504 <bemf_msg+0x94>)
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	4413      	add	r3, r2
 80154de:	460a      	mov	r2, r1
 80154e0:	701a      	strb	r2, [r3, #0]
		break;
 80154e2:	e008      	b.n	80154f6 <bemf_msg+0x86>
	default:
		itm_debug1(DBG_ERR, "bad bemf c", m->to);
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	781b      	ldrb	r3, [r3, #0]
 80154e8:	461a      	mov	r2, r3
 80154ea:	4904      	ldr	r1, [pc, #16]	; (80154fc <bemf_msg+0x8c>)
 80154ec:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80154f0:	f7ff ff3e 	bl	8015370 <itm_debug1>
		break;
 80154f4:	bf00      	nop
	}
}
 80154f6:	3710      	adds	r7, #16
 80154f8:	46bd      	mov	sp, r7
 80154fa:	bd80      	pop	{r7, pc}
 80154fc:	08019a94 	.word	0x08019a94
 8015500:	08019aa0 	.word	0x08019aa0
 8015504:	2000023c 	.word	0x2000023c
 8015508:	08019aac 	.word	0x08019aac

0801550c <bemf_tick>:

void bemf_tick(uint32_t notif_flags, _UNUSED_ uint32_t tick, _UNUSED_ uint32_t dt)
{
 801550c:	b580      	push	{r7, lr}
 801550e:	b084      	sub	sp, #16
 8015510:	af00      	add	r7, sp, #0
 8015512:	60f8      	str	r0, [r7, #12]
 8015514:	60b9      	str	r1, [r7, #8]
 8015516:	607a      	str	r2, [r7, #4]
	if (bemf_run_mode == runmode_off) return;
 8015518:	4b18      	ldr	r3, [pc, #96]	; (801557c <bemf_tick+0x70>)
 801551a:	781b      	ldrb	r3, [r3, #0]
 801551c:	2b00      	cmp	r3, #0
 801551e:	d029      	beq.n	8015574 <bemf_tick+0x68>

	itm_debug1(DBG_ADC, "------- btk", (int) notif_flags);
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	461a      	mov	r2, r3
 8015524:	4916      	ldr	r1, [pc, #88]	; (8015580 <bemf_tick+0x74>)
 8015526:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801552a:	f7ff ff21 	bl	8015370 <itm_debug1>
	if (notif_flags & NOTIF_NEW_ADC_1) {
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	f003 0301 	and.w	r3, r3, #1
 8015534:	2b00      	cmp	r3, #0
 8015536:	d013      	beq.n	8015560 <bemf_tick+0x54>
		if (notif_flags & NOTIF_NEW_ADC_2) {
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	f003 0302 	and.w	r3, r3, #2
 801553e:	2b00      	cmp	r3, #0
 8015540:	d00a      	beq.n	8015558 <bemf_tick+0x4c>
			itm_debug1(DBG_ERR|DBG_LOWCTRL|DBG_TIM, "both", (int) notif_flags);
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	461a      	mov	r2, r3
 8015546:	490f      	ldr	r1, [pc, #60]	; (8015584 <bemf_tick+0x78>)
 8015548:	480f      	ldr	r0, [pc, #60]	; (8015588 <bemf_tick+0x7c>)
 801554a:	f7ff ff11 	bl	8015370 <itm_debug1>
			runtime_error(ERR_DMA, "both NEW_ADC1 and NEW_ADC2");
 801554e:	490f      	ldr	r1, [pc, #60]	; (801558c <bemf_tick+0x80>)
 8015550:	f06f 000b 	mvn.w	r0, #11
 8015554:	f7ff ff5e 	bl	8015414 <runtime_error>
		}
		process_adc(&train_adc_buf[0], dt);
 8015558:	6879      	ldr	r1, [r7, #4]
 801555a:	480d      	ldr	r0, [pc, #52]	; (8015590 <bemf_tick+0x84>)
 801555c:	f000 f836 	bl	80155cc <process_adc>
	}
	if (notif_flags & NOTIF_NEW_ADC_2) {
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	f003 0302 	and.w	r3, r3, #2
 8015566:	2b00      	cmp	r3, #0
 8015568:	d005      	beq.n	8015576 <bemf_tick+0x6a>
		process_adc(&train_adc_buf[1], dt);
 801556a:	6879      	ldr	r1, [r7, #4]
 801556c:	4809      	ldr	r0, [pc, #36]	; (8015594 <bemf_tick+0x88>)
 801556e:	f000 f82d 	bl	80155cc <process_adc>
 8015572:	e000      	b.n	8015576 <bemf_tick+0x6a>
	if (bemf_run_mode == runmode_off) return;
 8015574:	bf00      	nop
	}
}
 8015576:	3710      	adds	r7, #16
 8015578:	46bd      	mov	sp, r7
 801557a:	bd80      	pop	{r7, pc}
 801557c:	20005326 	.word	0x20005326
 8015580:	08019ab4 	.word	0x08019ab4
 8015584:	08019ac0 	.word	0x08019ac0
 8015588:	80000101 	.word	0x80000101
 801558c:	08019ac8 	.word	0x08019ac8
 8015590:	200088dc 	.word	0x200088dc
 8015594:	20008904 	.word	0x20008904

08015598 <bemf_convert_to_millivolt>:
}
#endif


static inline int32_t bemf_convert_to_millivolt(_UNUSED_ const canton_config_t *c, int32_t m)
{
 8015598:	b480      	push	{r7}
 801559a:	b083      	sub	sp, #12
 801559c:	af00      	add	r7, sp, #0
 801559e:	6078      	str	r0, [r7, #4]
 80155a0:	6039      	str	r1, [r7, #0]
			m = 2200*m/2000;
		}
	}
#endif

	return ((m * 4545 * 33) / (4096*10));
 80155a2:	683b      	ldr	r3, [r7, #0]
 80155a4:	4a07      	ldr	r2, [pc, #28]	; (80155c4 <bemf_convert_to_millivolt+0x2c>)
 80155a6:	fb02 f303 	mul.w	r3, r2, r3
 80155aa:	4a07      	ldr	r2, [pc, #28]	; (80155c8 <bemf_convert_to_millivolt+0x30>)
 80155ac:	fb82 1203 	smull	r1, r2, r2, r3
 80155b0:	1392      	asrs	r2, r2, #14
 80155b2:	17db      	asrs	r3, r3, #31
 80155b4:	1ad3      	subs	r3, r2, r3
}
 80155b6:	4618      	mov	r0, r3
 80155b8:	370c      	adds	r7, #12
 80155ba:	46bd      	mov	sp, r7
 80155bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c0:	4770      	bx	lr
 80155c2:	bf00      	nop
 80155c4:	000249e1 	.word	0x000249e1
 80155c8:	66666667 	.word	0x66666667

080155cc <process_adc>:

/// ---------------------------------------------------------------------------------------

static void process_adc(volatile adc_buf_t *buf, _UNUSED_ uint32_t deltaticks)
{
 80155cc:	b580      	push	{r7, lr}
 80155ce:	b092      	sub	sp, #72	; 0x48
 80155d0:	af02      	add	r7, sp, #8
 80155d2:	6078      	str	r0, [r7, #4]
 80155d4:	6039      	str	r1, [r7, #0]
	for (int i=0; i<NUM_LOCAL_CANTONS_HW; i++) {
 80155d6:	2300      	movs	r3, #0
 80155d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80155da:	e0ae      	b.n	801573a <process_adc+0x16e>
		USE_CANTON(i)
 80155dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80155de:	f000 fce7 	bl	8015fb0 <get_canton_cnf>
 80155e2:	6338      	str	r0, [r7, #48]	; 0x30
		// process BEMF
#ifndef USE_INA3221
	    canton_intensity(cconf, cvars, buf[i].intOff, buf[i].intOn);
#error ohla
#endif
		int skp = 0;
 80155e4:	2300      	movs	r3, #0
 80155e6:	63bb      	str	r3, [r7, #56]	; 0x38
		if ((bemf_run_mode == runmode_testcanton) && (i<3)) {
 80155e8:	4b58      	ldr	r3, [pc, #352]	; (801574c <process_adc+0x180>)
 80155ea:	781b      	ldrb	r3, [r3, #0]
 80155ec:	2b02      	cmp	r3, #2
 80155ee:	d105      	bne.n	80155fc <process_adc+0x30>
 80155f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80155f2:	2b02      	cmp	r3, #2
 80155f4:	dc02      	bgt.n	80155fc <process_adc+0x30>
			skp = 1;
 80155f6:	2301      	movs	r3, #1
 80155f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80155fa:	e006      	b.n	801560a <process_adc+0x3e>
		} else if (0xFF == bemf_to[i]) {
 80155fc:	4a54      	ldr	r2, [pc, #336]	; (8015750 <process_adc+0x184>)
 80155fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015600:	4413      	add	r3, r2
 8015602:	781b      	ldrb	r3, [r3, #0]
 8015604:	2bff      	cmp	r3, #255	; 0xff
 8015606:	f000 8092 	beq.w	801572e <process_adc+0x162>
			continue;
		}

		const canton_config_t *c = get_canton_cnf(i);
 801560a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801560c:	f000 fcd0 	bl	8015fb0 <get_canton_cnf>
 8015610:	62f8      	str	r0, [r7, #44]	; 0x2c

		int32_t voffa = bemf_convert_to_millivolt(c, buf->off[i].vA);
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015616:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 801561a:	b29b      	uxth	r3, r3
 801561c:	4619      	mov	r1, r3
 801561e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015620:	f7ff ffba 	bl	8015598 <bemf_convert_to_millivolt>
 8015624:	62b8      	str	r0, [r7, #40]	; 0x28
		int32_t voffb = bemf_convert_to_millivolt(c, buf->off[i].vB);
 8015626:	687a      	ldr	r2, [r7, #4]
 8015628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801562a:	009b      	lsls	r3, r3, #2
 801562c:	4413      	add	r3, r2
 801562e:	885b      	ldrh	r3, [r3, #2]
 8015630:	b29b      	uxth	r3, r3
 8015632:	4619      	mov	r1, r3
 8015634:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015636:	f7ff ffaf 	bl	8015598 <bemf_convert_to_millivolt>
 801563a:	6278      	str	r0, [r7, #36]	; 0x24
		int32_t vona =  bemf_convert_to_millivolt(c, buf->on[i].vA);
 801563c:	687a      	ldr	r2, [r7, #4]
 801563e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015640:	3304      	adds	r3, #4
 8015642:	009b      	lsls	r3, r3, #2
 8015644:	4413      	add	r3, r2
 8015646:	889b      	ldrh	r3, [r3, #4]
 8015648:	b29b      	uxth	r3, r3
 801564a:	4619      	mov	r1, r3
 801564c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801564e:	f7ff ffa3 	bl	8015598 <bemf_convert_to_millivolt>
 8015652:	6238      	str	r0, [r7, #32]
		int32_t vonb =  bemf_convert_to_millivolt(c, buf->on[i].vB);
 8015654:	687a      	ldr	r2, [r7, #4]
 8015656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015658:	3304      	adds	r3, #4
 801565a:	009b      	lsls	r3, r3, #2
 801565c:	4413      	add	r3, r2
 801565e:	88db      	ldrh	r3, [r3, #6]
 8015660:	b29b      	uxth	r3, r3
 8015662:	4619      	mov	r1, r3
 8015664:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015666:	f7ff ff97 	bl	8015598 <bemf_convert_to_millivolt>
 801566a:	61f8      	str	r0, [r7, #28]

		int16_t voff = (int16_t)(voffb-voffa);
 801566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801566e:	b29a      	uxth	r2, r3
 8015670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015672:	b29b      	uxth	r3, r3
 8015674:	1ad3      	subs	r3, r2, r3
 8015676:	b29b      	uxth	r3, r3
 8015678:	86fb      	strh	r3, [r7, #54]	; 0x36
		int16_t von  = (int16_t)(vonb-vona);
 801567a:	69fb      	ldr	r3, [r7, #28]
 801567c:	b29a      	uxth	r2, r3
 801567e:	6a3b      	ldr	r3, [r7, #32]
 8015680:	b29b      	uxth	r3, r3
 8015682:	1ad3      	subs	r3, r2, r3
 8015684:	b29b      	uxth	r3, r3
 8015686:	86bb      	strh	r3, [r7, #52]	; 0x34

		if (cconf->reverse_bemf) {
 8015688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801568a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801568e:	f003 0302 	and.w	r3, r3, #2
 8015692:	b2db      	uxtb	r3, r3
 8015694:	2b00      	cmp	r3, #0
 8015696:	d007      	beq.n	80156a8 <process_adc+0xdc>
			voff = -voff;
 8015698:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801569a:	425b      	negs	r3, r3
 801569c:	b29b      	uxth	r3, r3
 801569e:	86fb      	strh	r3, [r7, #54]	; 0x36
			von = -von;
 80156a0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80156a2:	425b      	negs	r3, r3
 80156a4:	b29b      	uxth	r3, r3
 80156a6:	86bb      	strh	r3, [r7, #52]	; 0x34
		}
		if ((1)) {
			itm_debug3(DBG_ADC|DBG_LOWCTRL, "ADC/Voff", i, voffa, voffb);
 80156a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156aa:	9300      	str	r3, [sp, #0]
 80156ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80156b0:	4928      	ldr	r1, [pc, #160]	; (8015754 <process_adc+0x188>)
 80156b2:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 80156b6:	f7ff fe91 	bl	80153dc <itm_debug3>
			itm_debug3(DBG_ADC|DBG_LOWCTRL, "ADC/Von",  i, vona, vonb);
 80156ba:	69fb      	ldr	r3, [r7, #28]
 80156bc:	9300      	str	r3, [sp, #0]
 80156be:	6a3b      	ldr	r3, [r7, #32]
 80156c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80156c2:	4925      	ldr	r1, [pc, #148]	; (8015758 <process_adc+0x18c>)
 80156c4:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 80156c8:	f7ff fe88 	bl	80153dc <itm_debug3>
			itm_debug3(DBG_ADC|DBG_LOWCTRL, "ADCoi", i,  voff, von);
 80156cc:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80156d0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80156d4:	9300      	str	r3, [sp, #0]
 80156d6:	4613      	mov	r3, r2
 80156d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80156da:	4920      	ldr	r1, [pc, #128]	; (801575c <process_adc+0x190>)
 80156dc:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 80156e0:	f7ff fe7c 	bl	80153dc <itm_debug3>
		}
		if (skp) continue;
 80156e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d123      	bne.n	8015732 <process_adc+0x166>
				m.v2 = von;
				mqf_write(&from_canton, &m);
			}
		}
		msg_64_t m;
		m.from = MA_CANTON(localBoardNum, i);
 80156ea:	4b1d      	ldr	r3, [pc, #116]	; (8015760 <process_adc+0x194>)
 80156ec:	781b      	ldrb	r3, [r3, #0]
 80156ee:	00db      	lsls	r3, r3, #3
 80156f0:	b25b      	sxtb	r3, r3
 80156f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80156f6:	b25a      	sxtb	r2, r3
 80156f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80156fa:	b25b      	sxtb	r3, r3
 80156fc:	f003 0307 	and.w	r3, r3, #7
 8015700:	b25b      	sxtb	r3, r3
 8015702:	4313      	orrs	r3, r2
 8015704:	b25b      	sxtb	r3, r3
 8015706:	b2db      	uxtb	r3, r3
 8015708:	747b      	strb	r3, [r7, #17]
		m.to = bemf_to[i];
 801570a:	4a11      	ldr	r2, [pc, #68]	; (8015750 <process_adc+0x184>)
 801570c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801570e:	4413      	add	r3, r2
 8015710:	781b      	ldrb	r3, [r3, #0]
 8015712:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_BEMF_NOTIF;
 8015714:	2303      	movs	r3, #3
 8015716:	74bb      	strb	r3, [r7, #18]
		m.v1 = voff;
 8015718:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801571a:	82bb      	strh	r3, [r7, #20]
		m.v2 = von;
 801571c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801571e:	82fb      	strh	r3, [r7, #22]
		mqf_write(&from_canton, &m);
 8015720:	f107 0310 	add.w	r3, r7, #16
 8015724:	4619      	mov	r1, r3
 8015726:	480f      	ldr	r0, [pc, #60]	; (8015764 <process_adc+0x198>)
 8015728:	f003 fca4 	bl	8019074 <mqf_write>
 801572c:	e002      	b.n	8015734 <process_adc+0x168>
			continue;
 801572e:	bf00      	nop
 8015730:	e000      	b.n	8015734 <process_adc+0x168>
		if (skp) continue;
 8015732:	bf00      	nop
	for (int i=0; i<NUM_LOCAL_CANTONS_HW; i++) {
 8015734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015736:	3301      	adds	r3, #1
 8015738:	63fb      	str	r3, [r7, #60]	; 0x3c
 801573a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801573c:	2b04      	cmp	r3, #4
 801573e:	f77f af4d 	ble.w	80155dc <process_adc+0x10>
	}
}
 8015742:	bf00      	nop
 8015744:	3740      	adds	r7, #64	; 0x40
 8015746:	46bd      	mov	sp, r7
 8015748:	bd80      	pop	{r7, pc}
 801574a:	bf00      	nop
 801574c:	20005326 	.word	0x20005326
 8015750:	2000023c 	.word	0x2000023c
 8015754:	08019ae4 	.word	0x08019ae4
 8015758:	08019af0 	.word	0x08019af0
 801575c:	08019af8 	.word	0x08019af8
 8015760:	200053dd 	.word	0x200053dd
 8015764:	200004f4 	.word	0x200004f4

08015768 <presdect_tick>:
#include "railconfig.h"


#if INA3221_TASK
void presdect_tick(_UNUSED_ uint32_t notif_flags, _UNUSED_ uint32_t tick, _UNUSED_ uint32_t dt)
{
 8015768:	b480      	push	{r7}
 801576a:	b085      	sub	sp, #20
 801576c:	af00      	add	r7, sp, #0
 801576e:	60f8      	str	r0, [r7, #12]
 8015770:	60b9      	str	r1, [r7, #8]
 8015772:	607a      	str	r2, [r7, #4]
}
 8015774:	bf00      	nop
 8015776:	3714      	adds	r7, #20
 8015778:	46bd      	mov	sp, r7
 801577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577e:	4770      	bx	lr

08015780 <itm_debug1>:
{
 8015780:	b580      	push	{r7, lr}
 8015782:	b086      	sub	sp, #24
 8015784:	af02      	add	r7, sp, #8
 8015786:	60f8      	str	r0, [r7, #12]
 8015788:	60b9      	str	r1, [r7, #8]
 801578a:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 801578c:	4b08      	ldr	r3, [pc, #32]	; (80157b0 <itm_debug1+0x30>)
 801578e:	681a      	ldr	r2, [r3, #0]
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	4013      	ands	r3, r2
 8015794:	2b00      	cmp	r3, #0
 8015796:	d007      	beq.n	80157a8 <itm_debug1+0x28>
 8015798:	2301      	movs	r3, #1
 801579a:	9300      	str	r3, [sp, #0]
 801579c:	2300      	movs	r3, #0
 801579e:	2200      	movs	r2, #0
 80157a0:	6879      	ldr	r1, [r7, #4]
 80157a2:	68b8      	ldr	r0, [r7, #8]
 80157a4:	f003 fb60 	bl	8018e68 <_itm_debug3>
}
 80157a8:	bf00      	nop
 80157aa:	3710      	adds	r7, #16
 80157ac:	46bd      	mov	sp, r7
 80157ae:	bd80      	pop	{r7, pc}
 80157b0:	200005a4 	.word	0x200005a4

080157b4 <itm_debug2>:
{
 80157b4:	b580      	push	{r7, lr}
 80157b6:	b086      	sub	sp, #24
 80157b8:	af02      	add	r7, sp, #8
 80157ba:	60f8      	str	r0, [r7, #12]
 80157bc:	60b9      	str	r1, [r7, #8]
 80157be:	607a      	str	r2, [r7, #4]
 80157c0:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 80157c2:	4b09      	ldr	r3, [pc, #36]	; (80157e8 <itm_debug2+0x34>)
 80157c4:	681a      	ldr	r2, [r3, #0]
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	4013      	ands	r3, r2
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d007      	beq.n	80157de <itm_debug2+0x2a>
 80157ce:	2302      	movs	r3, #2
 80157d0:	9300      	str	r3, [sp, #0]
 80157d2:	2300      	movs	r3, #0
 80157d4:	683a      	ldr	r2, [r7, #0]
 80157d6:	6879      	ldr	r1, [r7, #4]
 80157d8:	68b8      	ldr	r0, [r7, #8]
 80157da:	f003 fb45 	bl	8018e68 <_itm_debug3>
}
 80157de:	bf00      	nop
 80157e0:	3710      	adds	r7, #16
 80157e2:	46bd      	mov	sp, r7
 80157e4:	bd80      	pop	{r7, pc}
 80157e6:	bf00      	nop
 80157e8:	200005a4 	.word	0x200005a4

080157ec <turnout_error>:
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b082      	sub	sp, #8
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
 80157f4:	6039      	str	r1, [r7, #0]
	return trainctl_error('A', code, msg);
 80157f6:	683a      	ldr	r2, [r7, #0]
 80157f8:	6879      	ldr	r1, [r7, #4]
 80157fa:	2041      	movs	r0, #65	; 0x41
 80157fc:	f000 fa50 	bl	8015ca0 <trainctl_error>
 8015800:	4603      	mov	r3, r0
}
 8015802:	4618      	mov	r0, r3
 8015804:	3708      	adds	r7, #8
 8015806:	46bd      	mov	sp, r7
 8015808:	bd80      	pop	{r7, pc}

0801580a <debug_info>:
{
	trainctl_notif('T', train_idx, cmd, dta, dtalen);
}

static inline void debug_info(uint32_t sel, uint32_t num, char *msg, int v1, int v2, int v3)
{
 801580a:	b580      	push	{r7, lr}
 801580c:	b088      	sub	sp, #32
 801580e:	af04      	add	r7, sp, #16
 8015810:	60f8      	str	r0, [r7, #12]
 8015812:	60b9      	str	r1, [r7, #8]
 8015814:	607a      	str	r2, [r7, #4]
 8015816:	603b      	str	r3, [r7, #0]
	trainctl_notif2(sel, num, 'D', msg, v1, v2, v3);
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	b2d8      	uxtb	r0, r3
 801581c:	68bb      	ldr	r3, [r7, #8]
 801581e:	b2d9      	uxtb	r1, r3
 8015820:	69fb      	ldr	r3, [r7, #28]
 8015822:	9302      	str	r3, [sp, #8]
 8015824:	69bb      	ldr	r3, [r7, #24]
 8015826:	9301      	str	r3, [sp, #4]
 8015828:	683b      	ldr	r3, [r7, #0]
 801582a:	9300      	str	r3, [sp, #0]
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	2244      	movs	r2, #68	; 0x44
 8015830:	f001 f8f2 	bl	8016a18 <trainctl_notif2>
}
 8015834:	bf00      	nop
 8015836:	3710      	adds	r7, #16
 8015838:	46bd      	mov	sp, r7
 801583a:	bd80      	pop	{r7, pc}

0801583c <mqf_read_to_turnout>:
LFMQUEUE_DEF_H(to_turnout, msg_64_t)
 801583c:	b580      	push	{r7, lr}
 801583e:	b082      	sub	sp, #8
 8015840:	af00      	add	r7, sp, #0
 8015842:	6078      	str	r0, [r7, #4]
 8015844:	6879      	ldr	r1, [r7, #4]
 8015846:	4804      	ldr	r0, [pc, #16]	; (8015858 <mqf_read_to_turnout+0x1c>)
 8015848:	f003 fc8e 	bl	8019168 <mqf_read>
 801584c:	4603      	mov	r3, r0
 801584e:	4618      	mov	r0, r3
 8015850:	3708      	adds	r7, #8
 8015852:	46bd      	mov	sp, r7
 8015854:	bd80      	pop	{r7, pc}
 8015856:	bf00      	nop
 8015858:	200004d0 	.word	0x200004d0

0801585c <turnout_tick>:
static void process_turnout_timers(uint32_t tick, uint32_t dt);
static void process_turnout_cmd(msg_64_t *m, uint32_t tick, uint32_t dt);


void turnout_tick(_UNUSED_ uint32_t notif_flags, uint32_t tick, uint32_t dt)
{
 801585c:	b580      	push	{r7, lr}
 801585e:	b088      	sub	sp, #32
 8015860:	af00      	add	r7, sp, #0
 8015862:	60f8      	str	r0, [r7, #12]
 8015864:	60b9      	str	r1, [r7, #8]
 8015866:	607a      	str	r2, [r7, #4]
	static int first=1;
	if (first) {
 8015868:	4b20      	ldr	r3, [pc, #128]	; (80158ec <turnout_tick+0x90>)
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d004      	beq.n	801587a <turnout_tick+0x1e>
		first = 0;
 8015870:	4b1e      	ldr	r3, [pc, #120]	; (80158ec <turnout_tick+0x90>)
 8015872:	2200      	movs	r2, #0
 8015874:	601a      	str	r2, [r3, #0]
		turnout_reset();
 8015876:	f000 f8d3 	bl	8015a20 <turnout_reset>
	}
	static int cnt = 0;
	cnt ++;
 801587a:	4b1d      	ldr	r3, [pc, #116]	; (80158f0 <turnout_tick+0x94>)
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	3301      	adds	r3, #1
 8015880:	4a1b      	ldr	r2, [pc, #108]	; (80158f0 <turnout_tick+0x94>)
 8015882:	6013      	str	r3, [r2, #0]
	if (cnt%4) return; // half freq
 8015884:	4b1a      	ldr	r3, [pc, #104]	; (80158f0 <turnout_tick+0x94>)
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	f003 0303 	and.w	r3, r3, #3
 801588c:	2b00      	cmp	r3, #0
 801588e:	d126      	bne.n	80158de <turnout_tick+0x82>
	// TODO we need a fixed freq for turnout

	process_turnout_timers(tick, dt);
 8015890:	6879      	ldr	r1, [r7, #4]
 8015892:	68b8      	ldr	r0, [r7, #8]
 8015894:	f000 f920 	bl	8015ad8 <process_turnout_timers>
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_turnout(&m);
 8015898:	f107 0310 	add.w	r3, r7, #16
 801589c:	4618      	mov	r0, r3
 801589e:	f7ff ffcd 	bl	801583c <mqf_read_to_turnout>
 80158a2:	61f8      	str	r0, [r7, #28]
		if (rc) break;
 80158a4:	69fb      	ldr	r3, [r7, #28]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d11b      	bne.n	80158e2 <turnout_tick+0x86>
		if (IS_TURNOUT(m.to)) {
 80158aa:	7c3b      	ldrb	r3, [r7, #16]
 80158ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80158b0:	2b40      	cmp	r3, #64	; 0x40
 80158b2:	d107      	bne.n	80158c4 <turnout_tick+0x68>
			process_turnout_cmd(&m, tick, dt);
 80158b4:	f107 0310 	add.w	r3, r7, #16
 80158b8:	687a      	ldr	r2, [r7, #4]
 80158ba:	68b9      	ldr	r1, [r7, #8]
 80158bc:	4618      	mov	r0, r3
 80158be:	f000 f819 	bl	80158f4 <process_turnout_cmd>
 80158c2:	e7e9      	b.n	8015898 <turnout_tick+0x3c>
		} else if (IS_BROADCAST(m.to)) {
 80158c4:	7c3b      	ldrb	r3, [r7, #16]
 80158c6:	2bff      	cmp	r3, #255	; 0xff
 80158c8:	d1e6      	bne.n	8015898 <turnout_tick+0x3c>
			switch (m.cmd) {
 80158ca:	7cbb      	ldrb	r3, [r7, #18]
 80158cc:	3bfe      	subs	r3, #254	; 0xfe
 80158ce:	2b01      	cmp	r3, #1
 80158d0:	d803      	bhi.n	80158da <turnout_tick+0x7e>
			default:
				break;
			case CMD_RESET: // FALLTHRU
			case CMD_EMERGENCY_STOP:
				turnout_reset();
 80158d2:	f000 f8a5 	bl	8015a20 <turnout_reset>
				break;
 80158d6:	bf00      	nop
 80158d8:	e000      	b.n	80158dc <turnout_tick+0x80>
				break;
 80158da:	bf00      	nop
	for (;;) {
 80158dc:	e7dc      	b.n	8015898 <turnout_tick+0x3c>
	if (cnt%4) return; // half freq
 80158de:	bf00      	nop
 80158e0:	e000      	b.n	80158e4 <turnout_tick+0x88>
		if (rc) break;
 80158e2:	bf00      	nop
			}
		} else {
			// error
		}
	}
}
 80158e4:	3720      	adds	r7, #32
 80158e6:	46bd      	mov	sp, r7
 80158e8:	bd80      	pop	{r7, pc}
 80158ea:	bf00      	nop
 80158ec:	20000244 	.word	0x20000244
 80158f0:	20005338 	.word	0x20005338

080158f4 <process_turnout_cmd>:
		const turnout_config_t *aconf = get_turnout_cnf(_idx); \
		turnout_vars_t         *avars = &tvars[_idx];


static void process_turnout_cmd(msg_64_t *m, _UNUSED_ uint32_t tick, _UNUSED_ uint32_t dt)
{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b08a      	sub	sp, #40	; 0x28
 80158f8:	af02      	add	r7, sp, #8
 80158fa:	60f8      	str	r0, [r7, #12]
 80158fc:	60b9      	str	r1, [r7, #8]
 80158fe:	607a      	str	r2, [r7, #4]
	uint8_t tidx = m->to & 0x07;
 8015900:	68fb      	ldr	r3, [r7, #12]
 8015902:	781b      	ldrb	r3, [r3, #0]
 8015904:	f003 0307 	and.w	r3, r3, #7
 8015908:	77fb      	strb	r3, [r7, #31]
	USE_TURNOUT(tidx)
 801590a:	7ffb      	ldrb	r3, [r7, #31]
 801590c:	4618      	mov	r0, r3
 801590e:	f000 fb9d 	bl	801604c <get_turnout_cnf>
 8015912:	61b8      	str	r0, [r7, #24]
 8015914:	7ffb      	ldrb	r3, [r7, #31]
 8015916:	005b      	lsls	r3, r3, #1
 8015918:	4a3a      	ldr	r2, [pc, #232]	; (8015a04 <process_turnout_cmd+0x110>)
 801591a:	4413      	add	r3, r2
 801591c:	617b      	str	r3, [r7, #20]
	if (!aconf || !avars) {
 801591e:	69bb      	ldr	r3, [r7, #24]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d002      	beq.n	801592a <process_turnout_cmd+0x36>
 8015924:	697b      	ldr	r3, [r7, #20]
 8015926:	2b00      	cmp	r3, #0
 8015928:	d105      	bne.n	8015936 <process_turnout_cmd+0x42>
		turnout_error(ERR_BAD_PARAM, "bad idx");
 801592a:	4937      	ldr	r1, [pc, #220]	; (8015a08 <process_turnout_cmd+0x114>)
 801592c:	f06f 0001 	mvn.w	r0, #1
 8015930:	f7ff ff5c 	bl	80157ec <turnout_error>
		return;
 8015934:	e063      	b.n	80159fe <process_turnout_cmd+0x10a>
	}
	debug_info('A', 0, "CMD", tidx, m->cmd, avars->value);
 8015936:	7ffa      	ldrb	r2, [r7, #31]
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	789b      	ldrb	r3, [r3, #2]
 801593c:	4619      	mov	r1, r3
 801593e:	697b      	ldr	r3, [r7, #20]
 8015940:	f993 3000 	ldrsb.w	r3, [r3]
 8015944:	9301      	str	r3, [sp, #4]
 8015946:	9100      	str	r1, [sp, #0]
 8015948:	4613      	mov	r3, r2
 801594a:	4a30      	ldr	r2, [pc, #192]	; (8015a0c <process_turnout_cmd+0x118>)
 801594c:	2100      	movs	r1, #0
 801594e:	2041      	movs	r0, #65	; 0x41
 8015950:	f7ff ff5b 	bl	801580a <debug_info>
#ifndef TRAIN_SIMU
	if (!aconf->cmd_port) return;
 8015954:	69bb      	ldr	r3, [r7, #24]
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	2b00      	cmp	r3, #0
 801595a:	d04f      	beq.n	80159fc <process_turnout_cmd+0x108>
#endif
	switch (m->cmd) {
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	789b      	ldrb	r3, [r3, #2]
 8015960:	2b31      	cmp	r3, #49	; 0x31
 8015962:	d002      	beq.n	801596a <process_turnout_cmd+0x76>
 8015964:	2b32      	cmp	r3, #50	; 0x32
 8015966:	d020      	beq.n	80159aa <process_turnout_cmd+0xb6>
 8015968:	e03f      	b.n	80159ea <process_turnout_cmd+0xf6>
	case CMD_TURNOUT_A:
		itm_debug2(DBG_TURNOUT, "TA", tidx, avars->value);
 801596a:	7ffa      	ldrb	r2, [r7, #31]
 801596c:	697b      	ldr	r3, [r7, #20]
 801596e:	f993 3000 	ldrsb.w	r3, [r3]
 8015972:	4927      	ldr	r1, [pc, #156]	; (8015a10 <process_turnout_cmd+0x11c>)
 8015974:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015978:	f7ff ff1c 	bl	80157b4 <itm_debug2>
		avars->value = -1;
 801597c:	697b      	ldr	r3, [r7, #20]
 801597e:	22ff      	movs	r2, #255	; 0xff
 8015980:	701a      	strb	r2, [r3, #0]
#ifndef TRAIN_SIMU
	    HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_RESET);
 8015982:	69bb      	ldr	r3, [r7, #24]
 8015984:	6818      	ldr	r0, [r3, #0]
 8015986:	69bb      	ldr	r3, [r7, #24]
 8015988:	889b      	ldrh	r3, [r3, #4]
 801598a:	2200      	movs	r2, #0
 801598c:	4619      	mov	r1, r3
 801598e:	f7ed fc4f 	bl	8003230 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_RESET);
 8015992:	69bb      	ldr	r3, [r7, #24]
 8015994:	6818      	ldr	r0, [r3, #0]
 8015996:	69bb      	ldr	r3, [r7, #24]
 8015998:	88db      	ldrh	r3, [r3, #6]
 801599a:	2200      	movs	r2, #0
 801599c:	4619      	mov	r1, r3
 801599e:	f7ed fc47 	bl	8003230 <HAL_GPIO_WritePin>
#endif
		avars->st = ST_SETA;
 80159a2:	697b      	ldr	r3, [r7, #20]
 80159a4:	2201      	movs	r2, #1
 80159a6:	705a      	strb	r2, [r3, #1]
		break;
 80159a8:	e029      	b.n	80159fe <process_turnout_cmd+0x10a>
	case CMD_TURNOUT_B:
		itm_debug2(DBG_TURNOUT, "TB", tidx, avars->value);
 80159aa:	7ffa      	ldrb	r2, [r7, #31]
 80159ac:	697b      	ldr	r3, [r7, #20]
 80159ae:	f993 3000 	ldrsb.w	r3, [r3]
 80159b2:	4918      	ldr	r1, [pc, #96]	; (8015a14 <process_turnout_cmd+0x120>)
 80159b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80159b8:	f7ff fefc 	bl	80157b4 <itm_debug2>
		avars->value = -1;
 80159bc:	697b      	ldr	r3, [r7, #20]
 80159be:	22ff      	movs	r2, #255	; 0xff
 80159c0:	701a      	strb	r2, [r3, #0]
#ifndef TRAIN_SIMU
	    HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_RESET);
 80159c2:	69bb      	ldr	r3, [r7, #24]
 80159c4:	6818      	ldr	r0, [r3, #0]
 80159c6:	69bb      	ldr	r3, [r7, #24]
 80159c8:	889b      	ldrh	r3, [r3, #4]
 80159ca:	2200      	movs	r2, #0
 80159cc:	4619      	mov	r1, r3
 80159ce:	f7ed fc2f 	bl	8003230 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_RESET);
 80159d2:	69bb      	ldr	r3, [r7, #24]
 80159d4:	6818      	ldr	r0, [r3, #0]
 80159d6:	69bb      	ldr	r3, [r7, #24]
 80159d8:	88db      	ldrh	r3, [r3, #6]
 80159da:	2200      	movs	r2, #0
 80159dc:	4619      	mov	r1, r3
 80159de:	f7ed fc27 	bl	8003230 <HAL_GPIO_WritePin>
#endif
		avars->st = ST_SETB;
 80159e2:	697b      	ldr	r3, [r7, #20]
 80159e4:	2203      	movs	r2, #3
 80159e6:	705a      	strb	r2, [r3, #1]
		break;
 80159e8:	e009      	b.n	80159fe <process_turnout_cmd+0x10a>
	default:
		itm_debug1(DBG_ERR|DBG_TURNOUT, "inv cmd", m->cmd);
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	789b      	ldrb	r3, [r3, #2]
 80159ee:	461a      	mov	r2, r3
 80159f0:	4909      	ldr	r1, [pc, #36]	; (8015a18 <process_turnout_cmd+0x124>)
 80159f2:	480a      	ldr	r0, [pc, #40]	; (8015a1c <process_turnout_cmd+0x128>)
 80159f4:	f7ff fec4 	bl	8015780 <itm_debug1>
		break;
 80159f8:	bf00      	nop
 80159fa:	e000      	b.n	80159fe <process_turnout_cmd+0x10a>
	if (!aconf->cmd_port) return;
 80159fc:	bf00      	nop
	}
}
 80159fe:	3720      	adds	r7, #32
 8015a00:	46bd      	mov	sp, r7
 8015a02:	bd80      	pop	{r7, pc}
 8015a04:	20005328 	.word	0x20005328
 8015a08:	08019b00 	.word	0x08019b00
 8015a0c:	08019b08 	.word	0x08019b08
 8015a10:	08019b0c 	.word	0x08019b0c
 8015a14:	08019b10 	.word	0x08019b10
 8015a18:	08019b14 	.word	0x08019b14
 8015a1c:	80000200 	.word	0x80000200

08015a20 <turnout_reset>:


static void turnout_reset(void)
{
 8015a20:	b580      	push	{r7, lr}
 8015a22:	b086      	sub	sp, #24
 8015a24:	af02      	add	r7, sp, #8
	for (int tidx=0; tidx<NUM_LOCAL_TURNOUTS; tidx++) {
 8015a26:	2300      	movs	r3, #0
 8015a28:	60fb      	str	r3, [r7, #12]
 8015a2a:	e044      	b.n	8015ab6 <turnout_reset+0x96>
		USE_TURNOUT(tidx) 	// aconf avars
 8015a2c:	68f8      	ldr	r0, [r7, #12]
 8015a2e:	f000 fb0d 	bl	801604c <get_turnout_cnf>
 8015a32:	60b8      	str	r0, [r7, #8]
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	005b      	lsls	r3, r3, #1
 8015a38:	4a23      	ldr	r2, [pc, #140]	; (8015ac8 <turnout_reset+0xa8>)
 8015a3a:	4413      	add	r3, r2
 8015a3c:	607b      	str	r3, [r7, #4]
		memset(avars, 0, sizeof(*avars));
 8015a3e:	2202      	movs	r2, #2
 8015a40:	2100      	movs	r1, #0
 8015a42:	6878      	ldr	r0, [r7, #4]
 8015a44:	f003 fc31 	bl	80192aa <memset>
		avars->value = 0;
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	2200      	movs	r2, #0
 8015a4c:	701a      	strb	r2, [r3, #0]
		avars->st = ST_IDLE;
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	2200      	movs	r2, #0
 8015a52:	705a      	strb	r2, [r3, #1]
		if (!aconf) {
 8015a54:	68bb      	ldr	r3, [r7, #8]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d106      	bne.n	8015a68 <turnout_reset+0x48>
			itm_debug1(DBG_TURNOUT, "tn skip", tidx);
 8015a5a:	68fa      	ldr	r2, [r7, #12]
 8015a5c:	491b      	ldr	r1, [pc, #108]	; (8015acc <turnout_reset+0xac>)
 8015a5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015a62:	f7ff fe8d 	bl	8015780 <itm_debug1>
			continue;
 8015a66:	e023      	b.n	8015ab0 <turnout_reset+0x90>
		}
#ifndef TRAIN_SIMU
		if (!aconf->cmd_port) return;
 8015a68:	68bb      	ldr	r3, [r7, #8]
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d026      	beq.n	8015abe <turnout_reset+0x9e>

		HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_RESET);
 8015a70:	68bb      	ldr	r3, [r7, #8]
 8015a72:	6818      	ldr	r0, [r3, #0]
 8015a74:	68bb      	ldr	r3, [r7, #8]
 8015a76:	889b      	ldrh	r3, [r3, #4]
 8015a78:	2200      	movs	r2, #0
 8015a7a:	4619      	mov	r1, r3
 8015a7c:	f7ed fbd8 	bl	8003230 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_RESET);
 8015a80:	68bb      	ldr	r3, [r7, #8]
 8015a82:	6818      	ldr	r0, [r3, #0]
 8015a84:	68bb      	ldr	r3, [r7, #8]
 8015a86:	88db      	ldrh	r3, [r3, #6]
 8015a88:	2200      	movs	r2, #0
 8015a8a:	4619      	mov	r1, r3
 8015a8c:	f7ed fbd0 	bl	8003230 <HAL_GPIO_WritePin>
#endif
		itm_debug1(DBG_TURNOUT, "A/RESET", tidx);
 8015a90:	68fa      	ldr	r2, [r7, #12]
 8015a92:	490f      	ldr	r1, [pc, #60]	; (8015ad0 <turnout_reset+0xb0>)
 8015a94:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015a98:	f7ff fe72 	bl	8015780 <itm_debug1>
		debug_info('A', 0, "RESET", 0, 0,0);
 8015a9c:	2300      	movs	r3, #0
 8015a9e:	9301      	str	r3, [sp, #4]
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	9300      	str	r3, [sp, #0]
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	4a0b      	ldr	r2, [pc, #44]	; (8015ad4 <turnout_reset+0xb4>)
 8015aa8:	2100      	movs	r1, #0
 8015aaa:	2041      	movs	r0, #65	; 0x41
 8015aac:	f7ff fead 	bl	801580a <debug_info>
	for (int tidx=0; tidx<NUM_LOCAL_TURNOUTS; tidx++) {
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	3301      	adds	r3, #1
 8015ab4:	60fb      	str	r3, [r7, #12]
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	2b07      	cmp	r3, #7
 8015aba:	ddb7      	ble.n	8015a2c <turnout_reset+0xc>
 8015abc:	e000      	b.n	8015ac0 <turnout_reset+0xa0>
		if (!aconf->cmd_port) return;
 8015abe:	bf00      	nop
		(void)aconf; // unused
	}
}
 8015ac0:	3710      	adds	r7, #16
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	bd80      	pop	{r7, pc}
 8015ac6:	bf00      	nop
 8015ac8:	20005328 	.word	0x20005328
 8015acc:	08019b1c 	.word	0x08019b1c
 8015ad0:	08019b24 	.word	0x08019b24
 8015ad4:	08019b2c 	.word	0x08019b2c

08015ad8 <process_turnout_timers>:




static void process_turnout_timers(_UNUSED_ uint32_t tick, _UNUSED_ uint32_t dt)
{
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	b088      	sub	sp, #32
 8015adc:	af02      	add	r7, sp, #8
 8015ade:	6078      	str	r0, [r7, #4]
 8015ae0:	6039      	str	r1, [r7, #0]
	for (int i=0; i<NUM_LOCAL_TURNOUTS; i++) {
 8015ae2:	2300      	movs	r3, #0
 8015ae4:	617b      	str	r3, [r7, #20]
 8015ae6:	e0a2      	b.n	8015c2e <process_turnout_timers+0x156>
		USE_TURNOUT(i)		// aconf , avars
 8015ae8:	6978      	ldr	r0, [r7, #20]
 8015aea:	f000 faaf 	bl	801604c <get_turnout_cnf>
 8015aee:	6138      	str	r0, [r7, #16]
 8015af0:	697b      	ldr	r3, [r7, #20]
 8015af2:	005b      	lsls	r3, r3, #1
 8015af4:	4a52      	ldr	r2, [pc, #328]	; (8015c40 <process_turnout_timers+0x168>)
 8015af6:	4413      	add	r3, r2
 8015af8:	60fb      	str	r3, [r7, #12]
#ifndef TRAIN_SIMU
        if (!aconf->cmd_port) continue;
 8015afa:	693b      	ldr	r3, [r7, #16]
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	f000 808f 	beq.w	8015c22 <process_turnout_timers+0x14a>
#endif
		switch (avars->st) {
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	785b      	ldrb	r3, [r3, #1]
 8015b08:	2b04      	cmp	r3, #4
 8015b0a:	d87d      	bhi.n	8015c08 <process_turnout_timers+0x130>
 8015b0c:	a201      	add	r2, pc, #4	; (adr r2, 8015b14 <process_turnout_timers+0x3c>)
 8015b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b12:	bf00      	nop
 8015b14:	08015c27 	.word	0x08015c27
 8015b18:	08015b29 	.word	0x08015b29
 8015b1c:	08015b99 	.word	0x08015b99
 8015b20:	08015b61 	.word	0x08015b61
 8015b24:	08015bd1 	.word	0x08015bd1
		case ST_IDLE:
			break;
		case ST_SETA:
#ifndef TRAIN_SIMU
			HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_SET);
 8015b28:	693b      	ldr	r3, [r7, #16]
 8015b2a:	6818      	ldr	r0, [r3, #0]
 8015b2c:	693b      	ldr	r3, [r7, #16]
 8015b2e:	889b      	ldrh	r3, [r3, #4]
 8015b30:	2201      	movs	r2, #1
 8015b32:	4619      	mov	r1, r3
 8015b34:	f7ed fb7c 	bl	8003230 <HAL_GPIO_WritePin>
#else
			(void)aconf; // unused in SIMU
#endif
			avars->st = ST_RESETA;
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	2202      	movs	r2, #2
 8015b3c:	705a      	strb	r2, [r3, #1]
			itm_debug1(DBG_TURNOUT, "A/SETA", i);
 8015b3e:	697a      	ldr	r2, [r7, #20]
 8015b40:	4940      	ldr	r1, [pc, #256]	; (8015c44 <process_turnout_timers+0x16c>)
 8015b42:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015b46:	f7ff fe1b 	bl	8015780 <itm_debug1>
			debug_info('A', 0, "A0/SETA", 0, 0,0);
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	9301      	str	r3, [sp, #4]
 8015b4e:	2300      	movs	r3, #0
 8015b50:	9300      	str	r3, [sp, #0]
 8015b52:	2300      	movs	r3, #0
 8015b54:	4a3c      	ldr	r2, [pc, #240]	; (8015c48 <process_turnout_timers+0x170>)
 8015b56:	2100      	movs	r1, #0
 8015b58:	2041      	movs	r0, #65	; 0x41
 8015b5a:	f7ff fe56 	bl	801580a <debug_info>
			break;
 8015b5e:	e063      	b.n	8015c28 <process_turnout_timers+0x150>
		case ST_SETB:
#ifndef TRAIN_SIMU
			HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_SET);
 8015b60:	693b      	ldr	r3, [r7, #16]
 8015b62:	6818      	ldr	r0, [r3, #0]
 8015b64:	693b      	ldr	r3, [r7, #16]
 8015b66:	88db      	ldrh	r3, [r3, #6]
 8015b68:	2201      	movs	r2, #1
 8015b6a:	4619      	mov	r1, r3
 8015b6c:	f7ed fb60 	bl	8003230 <HAL_GPIO_WritePin>
#endif
			avars->st = ST_RESETB;
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	2204      	movs	r2, #4
 8015b74:	705a      	strb	r2, [r3, #1]
			itm_debug1(DBG_TURNOUT, "A/SETB", i);
 8015b76:	697a      	ldr	r2, [r7, #20]
 8015b78:	4934      	ldr	r1, [pc, #208]	; (8015c4c <process_turnout_timers+0x174>)
 8015b7a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015b7e:	f7ff fdff 	bl	8015780 <itm_debug1>
			debug_info('A', 0, "A0/SETB", 0, 0,0);
 8015b82:	2300      	movs	r3, #0
 8015b84:	9301      	str	r3, [sp, #4]
 8015b86:	2300      	movs	r3, #0
 8015b88:	9300      	str	r3, [sp, #0]
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	4a30      	ldr	r2, [pc, #192]	; (8015c50 <process_turnout_timers+0x178>)
 8015b8e:	2100      	movs	r1, #0
 8015b90:	2041      	movs	r0, #65	; 0x41
 8015b92:	f7ff fe3a 	bl	801580a <debug_info>
			break;
 8015b96:	e047      	b.n	8015c28 <process_turnout_timers+0x150>
		case ST_RESETA:
#ifndef TRAIN_SIMU
			HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinA, GPIO_PIN_RESET);
 8015b98:	693b      	ldr	r3, [r7, #16]
 8015b9a:	6818      	ldr	r0, [r3, #0]
 8015b9c:	693b      	ldr	r3, [r7, #16]
 8015b9e:	889b      	ldrh	r3, [r3, #4]
 8015ba0:	2200      	movs	r2, #0
 8015ba2:	4619      	mov	r1, r3
 8015ba4:	f7ed fb44 	bl	8003230 <HAL_GPIO_WritePin>
#endif
			avars->st = ST_IDLE;
 8015ba8:	68fb      	ldr	r3, [r7, #12]
 8015baa:	2200      	movs	r2, #0
 8015bac:	705a      	strb	r2, [r3, #1]
			itm_debug1(DBG_TURNOUT, "A/RESETA", i);
 8015bae:	697a      	ldr	r2, [r7, #20]
 8015bb0:	4928      	ldr	r1, [pc, #160]	; (8015c54 <process_turnout_timers+0x17c>)
 8015bb2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015bb6:	f7ff fde3 	bl	8015780 <itm_debug1>
			debug_info('A', 0, "A0/RESETA", 0, 0,0);
 8015bba:	2300      	movs	r3, #0
 8015bbc:	9301      	str	r3, [sp, #4]
 8015bbe:	2300      	movs	r3, #0
 8015bc0:	9300      	str	r3, [sp, #0]
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	4a24      	ldr	r2, [pc, #144]	; (8015c58 <process_turnout_timers+0x180>)
 8015bc6:	2100      	movs	r1, #0
 8015bc8:	2041      	movs	r0, #65	; 0x41
 8015bca:	f7ff fe1e 	bl	801580a <debug_info>
			break;
 8015bce:	e02b      	b.n	8015c28 <process_turnout_timers+0x150>
		case ST_RESETB:
#ifndef TRAIN_SIMU
			HAL_GPIO_WritePin(aconf->cmd_port, aconf->pinB, GPIO_PIN_RESET);
 8015bd0:	693b      	ldr	r3, [r7, #16]
 8015bd2:	6818      	ldr	r0, [r3, #0]
 8015bd4:	693b      	ldr	r3, [r7, #16]
 8015bd6:	88db      	ldrh	r3, [r3, #6]
 8015bd8:	2200      	movs	r2, #0
 8015bda:	4619      	mov	r1, r3
 8015bdc:	f7ed fb28 	bl	8003230 <HAL_GPIO_WritePin>
#endif
			avars->st = ST_IDLE;
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	2200      	movs	r2, #0
 8015be4:	705a      	strb	r2, [r3, #1]
			itm_debug1(DBG_TURNOUT, "A/RESETB", i);
 8015be6:	697a      	ldr	r2, [r7, #20]
 8015be8:	491c      	ldr	r1, [pc, #112]	; (8015c5c <process_turnout_timers+0x184>)
 8015bea:	f44f 7000 	mov.w	r0, #512	; 0x200
 8015bee:	f7ff fdc7 	bl	8015780 <itm_debug1>
			debug_info('A', 0, "A0/RESETB", 0, 0,0);
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	9301      	str	r3, [sp, #4]
 8015bf6:	2300      	movs	r3, #0
 8015bf8:	9300      	str	r3, [sp, #0]
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	4a18      	ldr	r2, [pc, #96]	; (8015c60 <process_turnout_timers+0x188>)
 8015bfe:	2100      	movs	r1, #0
 8015c00:	2041      	movs	r0, #65	; 0x41
 8015c02:	f7ff fe02 	bl	801580a <debug_info>
			break;
 8015c06:	e00f      	b.n	8015c28 <process_turnout_timers+0x150>
			HAL_GPIO_TogglePin(aconf->cmd_port, aconf->pinB);
#endif
			break;
			 */
		default:
			itm_debug1(DBG_TURNOUT|DBG_ERR, "bad state", avars->st);
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	785b      	ldrb	r3, [r3, #1]
 8015c0c:	461a      	mov	r2, r3
 8015c0e:	4915      	ldr	r1, [pc, #84]	; (8015c64 <process_turnout_timers+0x18c>)
 8015c10:	4815      	ldr	r0, [pc, #84]	; (8015c68 <process_turnout_timers+0x190>)
 8015c12:	f7ff fdb5 	bl	8015780 <itm_debug1>
			turnout_error(ERR_BAD_STATE, "bad state");
 8015c16:	4913      	ldr	r1, [pc, #76]	; (8015c64 <process_turnout_timers+0x18c>)
 8015c18:	f06f 0008 	mvn.w	r0, #8
 8015c1c:	f7ff fde6 	bl	80157ec <turnout_error>
			break;
 8015c20:	e002      	b.n	8015c28 <process_turnout_timers+0x150>
        if (!aconf->cmd_port) continue;
 8015c22:	bf00      	nop
 8015c24:	e000      	b.n	8015c28 <process_turnout_timers+0x150>
			break;
 8015c26:	bf00      	nop
	for (int i=0; i<NUM_LOCAL_TURNOUTS; i++) {
 8015c28:	697b      	ldr	r3, [r7, #20]
 8015c2a:	3301      	adds	r3, #1
 8015c2c:	617b      	str	r3, [r7, #20]
 8015c2e:	697b      	ldr	r3, [r7, #20]
 8015c30:	2b07      	cmp	r3, #7
 8015c32:	f77f af59 	ble.w	8015ae8 <process_turnout_timers+0x10>
		}
	}
}
 8015c36:	bf00      	nop
 8015c38:	3718      	adds	r7, #24
 8015c3a:	46bd      	mov	sp, r7
 8015c3c:	bd80      	pop	{r7, pc}
 8015c3e:	bf00      	nop
 8015c40:	20005328 	.word	0x20005328
 8015c44:	08019b34 	.word	0x08019b34
 8015c48:	08019b3c 	.word	0x08019b3c
 8015c4c:	08019b44 	.word	0x08019b44
 8015c50:	08019b4c 	.word	0x08019b4c
 8015c54:	08019b54 	.word	0x08019b54
 8015c58:	08019b60 	.word	0x08019b60
 8015c5c:	08019b6c 	.word	0x08019b6c
 8015c60:	08019b78 	.word	0x08019b78
 8015c64:	08019b84 	.word	0x08019b84
 8015c68:	80000200 	.word	0x80000200

08015c6c <itm_debug1>:
//void _itm_debug1(const char *msg, int v);
//void _itm_debug2(const char *msg, int v1, int v2);
void _itm_debug3(const char *msg, int v1, int v2, int v3, int n);

static inline void itm_debug1(uint32_t f, const char *msg, int v)
{
 8015c6c:	b580      	push	{r7, lr}
 8015c6e:	b086      	sub	sp, #24
 8015c70:	af02      	add	r7, sp, #8
 8015c72:	60f8      	str	r0, [r7, #12]
 8015c74:	60b9      	str	r1, [r7, #8]
 8015c76:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8015c78:	4b08      	ldr	r3, [pc, #32]	; (8015c9c <itm_debug1+0x30>)
 8015c7a:	681a      	ldr	r2, [r3, #0]
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	4013      	ands	r3, r2
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d007      	beq.n	8015c94 <itm_debug1+0x28>
 8015c84:	2301      	movs	r3, #1
 8015c86:	9300      	str	r3, [sp, #0]
 8015c88:	2300      	movs	r3, #0
 8015c8a:	2200      	movs	r2, #0
 8015c8c:	6879      	ldr	r1, [r7, #4]
 8015c8e:	68b8      	ldr	r0, [r7, #8]
 8015c90:	f003 f8ea 	bl	8018e68 <_itm_debug3>
}
 8015c94:	bf00      	nop
 8015c96:	3710      	adds	r7, #16
 8015c98:	46bd      	mov	sp, r7
 8015c9a:	bd80      	pop	{r7, pc}
 8015c9c:	200005a4 	.word	0x200005a4

08015ca0 <trainctl_error>:




int trainctl_error(_UNUSED_ char l, int code, _UNUSED_ const char *msg)
{
 8015ca0:	b580      	push	{r7, lr}
 8015ca2:	b088      	sub	sp, #32
 8015ca4:	af02      	add	r7, sp, #8
 8015ca6:	4603      	mov	r3, r0
 8015ca8:	60b9      	str	r1, [r7, #8]
 8015caa:	607a      	str	r2, [r7, #4]
 8015cac:	73fb      	strb	r3, [r7, #15]
	int16_t c = code;
 8015cae:	68bb      	ldr	r3, [r7, #8]
 8015cb0:	b21b      	sxth	r3, r3
 8015cb2:	82fb      	strh	r3, [r7, #22]
	// add debug msg or notification here
	if (c >=0) c=-1;
 8015cb4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	db02      	blt.n	8015cc2 <trainctl_error+0x22>
 8015cbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015cc0:	82fb      	strh	r3, [r7, #22]
	trainctl_notif('G', 0, 'E', (void *)&c, sizeof(c));
 8015cc2:	f107 0216 	add.w	r2, r7, #22
 8015cc6:	2302      	movs	r3, #2
 8015cc8:	9300      	str	r3, [sp, #0]
 8015cca:	4613      	mov	r3, r2
 8015ccc:	2245      	movs	r2, #69	; 0x45
 8015cce:	2100      	movs	r1, #0
 8015cd0:	2047      	movs	r0, #71	; 0x47
 8015cd2:	f000 fe7d 	bl	80169d0 <trainctl_notif>
	return code;
 8015cd6:	68bb      	ldr	r3, [r7, #8]
}
 8015cd8:	4618      	mov	r0, r3
 8015cda:	3718      	adds	r7, #24
 8015cdc:	46bd      	mov	sp, r7
 8015cde:	bd80      	pop	{r7, pc}

08015ce0 <long_isr>:
}



void long_isr(uint32_t dur)
{
 8015ce0:	b580      	push	{r7, lr}
 8015ce2:	b082      	sub	sp, #8
 8015ce4:	af00      	add	r7, sp, #0
 8015ce6:	6078      	str	r0, [r7, #4]
	itm_debug1(DBG_ERR, "long isr", dur);
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	461a      	mov	r2, r3
 8015cec:	4904      	ldr	r1, [pc, #16]	; (8015d00 <long_isr+0x20>)
 8015cee:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8015cf2:	f7ff ffbb 	bl	8015c6c <itm_debug1>
	//for (int i=0; i<100; i++) {
	//	itm_debug1(DBG_ERR, "micro", GetCurrentMicro());
	//}
}
 8015cf6:	bf00      	nop
 8015cf8:	3708      	adds	r7, #8
 8015cfa:	46bd      	mov	sp, r7
 8015cfc:	bd80      	pop	{r7, pc}
 8015cfe:	bf00      	nop
 8015d00:	08019b90 	.word	0x08019b90

08015d04 <GetCycleCount64>:
 */
volatile uint64_t last_cycle_count_64 = 0;

// Call at least every 2^32 cycles (every 59.6 seconds @ 72 MHz).
uint64_t GetCycleCount64(void)
{
 8015d04:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8015d08:	b085      	sub	sp, #20
 8015d0a:	af00      	add	r7, sp, #0
#ifdef TRAIN_SIMU
    return 0;
#else
  uint32_t primask;
  asm volatile ("mrs %0, PRIMASK" : "=r"(primask));
 8015d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8015d10:	60fb      	str	r3, [r7, #12]
  asm volatile ("cpsid i");  // Disable interrupts.
 8015d12:	b672      	cpsid	i
  int64_t r = last_cycle_count_64;
 8015d14:	4b12      	ldr	r3, [pc, #72]	; (8015d60 <GetCycleCount64+0x5c>)
 8015d16:	e9d3 3400 	ldrd	r3, r4, [r3]
 8015d1a:	e9c7 3400 	strd	r3, r4, [r7]
  r += DWT->CYCCNT - (uint32_t)(r);
 8015d1e:	4b11      	ldr	r3, [pc, #68]	; (8015d64 <GetCycleCount64+0x60>)
 8015d20:	685a      	ldr	r2, [r3, #4]
 8015d22:	683b      	ldr	r3, [r7, #0]
 8015d24:	1ad3      	subs	r3, r2, r3
 8015d26:	469b      	mov	fp, r3
 8015d28:	f04f 0c00 	mov.w	ip, #0
 8015d2c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8015d30:	eb1b 0301 	adds.w	r3, fp, r1
 8015d34:	eb4c 0402 	adc.w	r4, ip, r2
 8015d38:	e9c7 3400 	strd	r3, r4, [r7]
  last_cycle_count_64 = r;
 8015d3c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8015d40:	4a07      	ldr	r2, [pc, #28]	; (8015d60 <GetCycleCount64+0x5c>)
 8015d42:	e9c2 3400 	strd	r3, r4, [r2]
  asm volatile ("msr PRIMASK, %0" : : "r"(primask));  // Restore interrupts.
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	f383 8810 	msr	PRIMASK, r3
  return r;
 8015d4c:	e9d7 3400 	ldrd	r3, r4, [r7]
#endif
}
 8015d50:	4618      	mov	r0, r3
 8015d52:	4621      	mov	r1, r4
 8015d54:	3714      	adds	r7, #20
 8015d56:	46bd      	mov	sp, r7
 8015d58:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8015d5c:	4770      	bx	lr
 8015d5e:	bf00      	nop
 8015d60:	20005340 	.word	0x20005340
 8015d64:	e0001000 	.word	0xe0001000

08015d68 <startCycleCounter>:

void startCycleCounter(void)
{
 8015d68:	b480      	push	{r7}
 8015d6a:	af00      	add	r7, sp, #0
#ifndef TRAIN_SIMU
	DWT->CYCCNT |= DWT_CTRL_CYCCNTENA_Msk;  // Set bit 0.
 8015d6c:	4b05      	ldr	r3, [pc, #20]	; (8015d84 <startCycleCounter+0x1c>)
 8015d6e:	685b      	ldr	r3, [r3, #4]
 8015d70:	4a04      	ldr	r2, [pc, #16]	; (8015d84 <startCycleCounter+0x1c>)
 8015d72:	f043 0301 	orr.w	r3, r3, #1
 8015d76:	6053      	str	r3, [r2, #4]
#endif
}
 8015d78:	bf00      	nop
 8015d7a:	46bd      	mov	sp, r7
 8015d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d80:	4770      	bx	lr
 8015d82:	bf00      	nop
 8015d84:	e0001000 	.word	0xe0001000

08015d88 <get_param_def>:
#include <stddef.h>
#include <string.h>
#include "param.h"

static param_t *get_param_def(const param_t *rgpar, const char *n)
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b084      	sub	sp, #16
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	6078      	str	r0, [r7, #4]
 8015d90:	6039      	str	r1, [r7, #0]
	for (param_t *p = (param_t*) rgpar; p->name; p++) {
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	60fb      	str	r3, [r7, #12]
 8015d96:	e00d      	b.n	8015db4 <get_param_def+0x2c>
		if (!strcmp(p->name, n)) return p;
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	6839      	ldr	r1, [r7, #0]
 8015d9e:	4618      	mov	r0, r3
 8015da0:	f7ea fa16 	bl	80001d0 <strcmp>
 8015da4:	4603      	mov	r3, r0
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d101      	bne.n	8015dae <get_param_def+0x26>
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	e007      	b.n	8015dbe <get_param_def+0x36>
	for (param_t *p = (param_t*) rgpar; p->name; p++) {
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	3324      	adds	r3, #36	; 0x24
 8015db2:	60fb      	str	r3, [r7, #12]
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d1ed      	bne.n	8015d98 <get_param_def+0x10>
	}
	return NULL;
 8015dbc:	2300      	movs	r3, #0
}
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	3710      	adds	r7, #16
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	bd80      	pop	{r7, pc}

08015dc6 <param_get_value>:

int param_get_value(const param_t *params, void *ptr, const char *name, int32_t *pvalue, int32_t *pdef, int32_t *pmin, int32_t *pmax)
{
 8015dc6:	b580      	push	{r7, lr}
 8015dc8:	b088      	sub	sp, #32
 8015dca:	af00      	add	r7, sp, #0
 8015dcc:	60f8      	str	r0, [r7, #12]
 8015dce:	60b9      	str	r1, [r7, #8]
 8015dd0:	607a      	str	r2, [r7, #4]
 8015dd2:	603b      	str	r3, [r7, #0]
	param_t *prm = get_param_def(params, name);
 8015dd4:	6879      	ldr	r1, [r7, #4]
 8015dd6:	68f8      	ldr	r0, [r7, #12]
 8015dd8:	f7ff ffd6 	bl	8015d88 <get_param_def>
 8015ddc:	6178      	str	r0, [r7, #20]
	if (!prm) {
 8015dde:	697b      	ldr	r3, [r7, #20]
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d101      	bne.n	8015de8 <param_get_value+0x22>
		return 10;
 8015de4:	230a      	movs	r3, #10
 8015de6:	e05c      	b.n	8015ea2 <param_get_value+0xdc>
	}
	if (pmin) *pmin = prm->min;
 8015de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d003      	beq.n	8015df6 <param_get_value+0x30>
 8015dee:	697b      	ldr	r3, [r7, #20]
 8015df0:	699a      	ldr	r2, [r3, #24]
 8015df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015df4:	601a      	str	r2, [r3, #0]
	if (pmax) *pmax = prm->max;
 8015df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d003      	beq.n	8015e04 <param_get_value+0x3e>
 8015dfc:	697b      	ldr	r3, [r7, #20]
 8015dfe:	69da      	ldr	r2, [r3, #28]
 8015e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e02:	601a      	str	r2, [r3, #0]
	if (pdef) *pdef = prm->def;
 8015e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d003      	beq.n	8015e12 <param_get_value+0x4c>
 8015e0a:	697b      	ldr	r3, [r7, #20]
 8015e0c:	6a1a      	ldr	r2, [r3, #32]
 8015e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e10:	601a      	str	r2, [r3, #0]
	if (pvalue) {
 8015e12:	683b      	ldr	r3, [r7, #0]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d043      	beq.n	8015ea0 <param_get_value+0xda>
		if (prm->getter) {
 8015e18:	697b      	ldr	r3, [r7, #20]
 8015e1a:	68db      	ldr	r3, [r3, #12]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d007      	beq.n	8015e30 <param_get_value+0x6a>
			*pvalue = prm->getter(prm);
 8015e20:	697b      	ldr	r3, [r7, #20]
 8015e22:	68db      	ldr	r3, [r3, #12]
 8015e24:	6978      	ldr	r0, [r7, #20]
 8015e26:	4798      	blx	r3
 8015e28:	4602      	mov	r2, r0
 8015e2a:	683b      	ldr	r3, [r7, #0]
 8015e2c:	601a      	str	r2, [r3, #0]
 8015e2e:	e037      	b.n	8015ea0 <param_get_value+0xda>
		} else {
			uint8_t *p = ptr;
 8015e30:	68bb      	ldr	r3, [r7, #8]
 8015e32:	61fb      	str	r3, [r7, #28]
			if (prm->ptr) p = prm->ptr;
 8015e34:	697b      	ldr	r3, [r7, #20]
 8015e36:	685b      	ldr	r3, [r3, #4]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d002      	beq.n	8015e42 <param_get_value+0x7c>
 8015e3c:	697b      	ldr	r3, [r7, #20]
 8015e3e:	685b      	ldr	r3, [r3, #4]
 8015e40:	61fb      	str	r3, [r7, #28]
			p += prm->offset;
 8015e42:	697b      	ldr	r3, [r7, #20]
 8015e44:	689b      	ldr	r3, [r3, #8]
 8015e46:	461a      	mov	r2, r3
 8015e48:	69fb      	ldr	r3, [r7, #28]
 8015e4a:	4413      	add	r3, r2
 8015e4c:	61fb      	str	r3, [r7, #28]
			if (!p) return 11;
 8015e4e:	69fb      	ldr	r3, [r7, #28]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d101      	bne.n	8015e58 <param_get_value+0x92>
 8015e54:	230b      	movs	r3, #11
 8015e56:	e024      	b.n	8015ea2 <param_get_value+0xdc>
			if ((int)p<0x100) return 12; // probably an error if low ptr
 8015e58:	69fb      	ldr	r3, [r7, #28]
 8015e5a:	2bff      	cmp	r3, #255	; 0xff
 8015e5c:	dc01      	bgt.n	8015e62 <param_get_value+0x9c>
 8015e5e:	230c      	movs	r3, #12
 8015e60:	e01f      	b.n	8015ea2 <param_get_value+0xdc>

			int8_t v8; int16_t v16; int32_t v32;
			switch (prm->size) {
 8015e62:	697b      	ldr	r3, [r7, #20]
 8015e64:	695b      	ldr	r3, [r3, #20]
 8015e66:	2b02      	cmp	r3, #2
 8015e68:	d00a      	beq.n	8015e80 <param_get_value+0xba>
 8015e6a:	2b04      	cmp	r3, #4
 8015e6c:	d00f      	beq.n	8015e8e <param_get_value+0xc8>
 8015e6e:	2b01      	cmp	r3, #1
 8015e70:	d111      	bne.n	8015e96 <param_get_value+0xd0>
			case 1:
				v8 = *((int8_t *)p);
 8015e72:	69fb      	ldr	r3, [r7, #28]
 8015e74:	781b      	ldrb	r3, [r3, #0]
 8015e76:	747b      	strb	r3, [r7, #17]
				v32 = (int32_t)v8;
 8015e78:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8015e7c:	61bb      	str	r3, [r7, #24]
				break;
 8015e7e:	e00c      	b.n	8015e9a <param_get_value+0xd4>
			case 2:
				v16 = *((int16_t *)p);
 8015e80:	69fb      	ldr	r3, [r7, #28]
 8015e82:	881b      	ldrh	r3, [r3, #0]
 8015e84:	827b      	strh	r3, [r7, #18]
				v32 = (int32_t)v16;
 8015e86:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015e8a:	61bb      	str	r3, [r7, #24]
				break;
 8015e8c:	e005      	b.n	8015e9a <param_get_value+0xd4>
			case 4:
				v32 = *((int32_t *)p);
 8015e8e:	69fb      	ldr	r3, [r7, #28]
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	61bb      	str	r3, [r7, #24]
				break;
 8015e94:	e001      	b.n	8015e9a <param_get_value+0xd4>
			default:
				return 12;
 8015e96:	230c      	movs	r3, #12
 8015e98:	e003      	b.n	8015ea2 <param_get_value+0xdc>
			}
			*pvalue = v32;
 8015e9a:	683b      	ldr	r3, [r7, #0]
 8015e9c:	69ba      	ldr	r2, [r7, #24]
 8015e9e:	601a      	str	r2, [r3, #0]
		}
	}
	return 0;
 8015ea0:	2300      	movs	r3, #0
}
 8015ea2:	4618      	mov	r0, r3
 8015ea4:	3720      	adds	r7, #32
 8015ea6:	46bd      	mov	sp, r7
 8015ea8:	bd80      	pop	{r7, pc}

08015eaa <param_set_value>:
int param_set_value(const param_t *params, void *ptr, const char *name, int32_t value)
{
 8015eaa:	b580      	push	{r7, lr}
 8015eac:	b088      	sub	sp, #32
 8015eae:	af00      	add	r7, sp, #0
 8015eb0:	60f8      	str	r0, [r7, #12]
 8015eb2:	60b9      	str	r1, [r7, #8]
 8015eb4:	607a      	str	r2, [r7, #4]
 8015eb6:	603b      	str	r3, [r7, #0]
	param_t *prm = get_param_def(params, name);
 8015eb8:	6879      	ldr	r1, [r7, #4]
 8015eba:	68f8      	ldr	r0, [r7, #12]
 8015ebc:	f7ff ff64 	bl	8015d88 <get_param_def>
 8015ec0:	61b8      	str	r0, [r7, #24]
	if (!prm) {
 8015ec2:	69bb      	ldr	r3, [r7, #24]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d101      	bne.n	8015ecc <param_set_value+0x22>
		return 10;
 8015ec8:	230a      	movs	r3, #10
 8015eca:	e03f      	b.n	8015f4c <param_set_value+0xa2>
	}
	if (prm->setter) {
 8015ecc:	69bb      	ldr	r3, [r7, #24]
 8015ece:	691b      	ldr	r3, [r3, #16]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d005      	beq.n	8015ee0 <param_set_value+0x36>
		//if ((1)) return 42;
		prm->setter(prm, value);
 8015ed4:	69bb      	ldr	r3, [r7, #24]
 8015ed6:	691b      	ldr	r3, [r3, #16]
 8015ed8:	6839      	ldr	r1, [r7, #0]
 8015eda:	69b8      	ldr	r0, [r7, #24]
 8015edc:	4798      	blx	r3
 8015ede:	e034      	b.n	8015f4a <param_set_value+0xa0>
	} else {
		uint8_t *p = ptr;
 8015ee0:	68bb      	ldr	r3, [r7, #8]
 8015ee2:	61fb      	str	r3, [r7, #28]
		if (prm->ptr) p = prm->ptr;
 8015ee4:	69bb      	ldr	r3, [r7, #24]
 8015ee6:	685b      	ldr	r3, [r3, #4]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d002      	beq.n	8015ef2 <param_set_value+0x48>
 8015eec:	69bb      	ldr	r3, [r7, #24]
 8015eee:	685b      	ldr	r3, [r3, #4]
 8015ef0:	61fb      	str	r3, [r7, #28]
		p += prm->offset;
 8015ef2:	69bb      	ldr	r3, [r7, #24]
 8015ef4:	689b      	ldr	r3, [r3, #8]
 8015ef6:	461a      	mov	r2, r3
 8015ef8:	69fb      	ldr	r3, [r7, #28]
 8015efa:	4413      	add	r3, r2
 8015efc:	61fb      	str	r3, [r7, #28]
		if (!p) return 11;
 8015efe:	69fb      	ldr	r3, [r7, #28]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d101      	bne.n	8015f08 <param_set_value+0x5e>
 8015f04:	230b      	movs	r3, #11
 8015f06:	e021      	b.n	8015f4c <param_set_value+0xa2>
		if ((int)p<0x100) return 12; // probably an error if low ptr
 8015f08:	69fb      	ldr	r3, [r7, #28]
 8015f0a:	2bff      	cmp	r3, #255	; 0xff
 8015f0c:	dc01      	bgt.n	8015f12 <param_set_value+0x68>
 8015f0e:	230c      	movs	r3, #12
 8015f10:	e01c      	b.n	8015f4c <param_set_value+0xa2>

		int8_t v8; int16_t v16; int32_t v32;
		v32 = value;
 8015f12:	683b      	ldr	r3, [r7, #0]
 8015f14:	617b      	str	r3, [r7, #20]
		switch (prm->size) {
 8015f16:	69bb      	ldr	r3, [r7, #24]
 8015f18:	695b      	ldr	r3, [r3, #20]
 8015f1a:	2b02      	cmp	r3, #2
 8015f1c:	d009      	beq.n	8015f32 <param_set_value+0x88>
 8015f1e:	2b04      	cmp	r3, #4
 8015f20:	d00d      	beq.n	8015f3e <param_set_value+0x94>
 8015f22:	2b01      	cmp	r3, #1
 8015f24:	d10f      	bne.n	8015f46 <param_set_value+0x9c>
		case 1:
			v8 = (int8_t) v32;
 8015f26:	697b      	ldr	r3, [r7, #20]
 8015f28:	747b      	strb	r3, [r7, #17]
			*((int8_t *)p) = v8;
 8015f2a:	69fb      	ldr	r3, [r7, #28]
 8015f2c:	7c7a      	ldrb	r2, [r7, #17]
 8015f2e:	701a      	strb	r2, [r3, #0]
			break;
 8015f30:	e00b      	b.n	8015f4a <param_set_value+0xa0>
		case 2:
			v16 = (int16_t) v32;
 8015f32:	697b      	ldr	r3, [r7, #20]
 8015f34:	827b      	strh	r3, [r7, #18]
			*((int16_t *)p) = v16;
 8015f36:	69fb      	ldr	r3, [r7, #28]
 8015f38:	8a7a      	ldrh	r2, [r7, #18]
 8015f3a:	801a      	strh	r2, [r3, #0]
			break;
 8015f3c:	e005      	b.n	8015f4a <param_set_value+0xa0>
		case 4:
			*((int32_t *)p) = v32;
 8015f3e:	69fb      	ldr	r3, [r7, #28]
 8015f40:	697a      	ldr	r2, [r7, #20]
 8015f42:	601a      	str	r2, [r3, #0]
			break;
 8015f44:	e001      	b.n	8015f4a <param_set_value+0xa0>
		default:
			return 12;
 8015f46:	230c      	movs	r3, #12
 8015f48:	e000      	b.n	8015f4c <param_set_value+0xa2>
		}
	}
	return 0;
 8015f4a:	2300      	movs	r3, #0
}
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	3720      	adds	r7, #32
 8015f50:	46bd      	mov	sp, r7
 8015f52:	bd80      	pop	{r7, pc}

08015f54 <itm_debug1>:
{
 8015f54:	b580      	push	{r7, lr}
 8015f56:	b086      	sub	sp, #24
 8015f58:	af02      	add	r7, sp, #8
 8015f5a:	60f8      	str	r0, [r7, #12]
 8015f5c:	60b9      	str	r1, [r7, #8]
 8015f5e:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8015f60:	4b08      	ldr	r3, [pc, #32]	; (8015f84 <itm_debug1+0x30>)
 8015f62:	681a      	ldr	r2, [r3, #0]
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	4013      	ands	r3, r2
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d007      	beq.n	8015f7c <itm_debug1+0x28>
 8015f6c:	2301      	movs	r3, #1
 8015f6e:	9300      	str	r3, [sp, #0]
 8015f70:	2300      	movs	r3, #0
 8015f72:	2200      	movs	r2, #0
 8015f74:	6879      	ldr	r1, [r7, #4]
 8015f76:	68b8      	ldr	r0, [r7, #8]
 8015f78:	f002 ff76 	bl	8018e68 <_itm_debug3>
}
 8015f7c:	bf00      	nop
 8015f7e:	3710      	adds	r7, #16
 8015f80:	46bd      	mov	sp, r7
 8015f82:	bd80      	pop	{r7, pc}
 8015f84:	200005a4 	.word	0x200005a4

08015f88 <config_error>:
{
	return trainctl_error('A', code, msg);
}

static inline void *config_error(int code, const char *msg)
{
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	b082      	sub	sp, #8
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	6078      	str	r0, [r7, #4]
 8015f90:	6039      	str	r1, [r7, #0]
	itm_debug1(DBG_CONFIG, msg, code);
 8015f92:	687a      	ldr	r2, [r7, #4]
 8015f94:	6839      	ldr	r1, [r7, #0]
 8015f96:	2080      	movs	r0, #128	; 0x80
 8015f98:	f7ff ffdc 	bl	8015f54 <itm_debug1>
	trainctl_error('G', code, msg);
 8015f9c:	683a      	ldr	r2, [r7, #0]
 8015f9e:	6879      	ldr	r1, [r7, #4]
 8015fa0:	2047      	movs	r0, #71	; 0x47
 8015fa2:	f7ff fe7d 	bl	8015ca0 <trainctl_error>
	return NULL;
 8015fa6:	2300      	movs	r3, #0
}
 8015fa8:	4618      	mov	r0, r3
 8015faa:	3708      	adds	r7, #8
 8015fac:	46bd      	mov	sp, r7
 8015fae:	bd80      	pop	{r7, pc}

08015fb0 <get_canton_cnf>:


static int setup_done = 1;

const canton_config_t *get_canton_cnf(int idx)
{
 8015fb0:	b580      	push	{r7, lr}
 8015fb2:	b082      	sub	sp, #8
 8015fb4:	af00      	add	r7, sp, #0
 8015fb6:	6078      	str	r0, [r7, #4]
	if (!setup_done) return config_error(ERR_SETUP_KO, "railconfig_setup_default not called");
 8015fb8:	4b0e      	ldr	r3, [pc, #56]	; (8015ff4 <get_canton_cnf+0x44>)
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d106      	bne.n	8015fce <get_canton_cnf+0x1e>
 8015fc0:	490d      	ldr	r1, [pc, #52]	; (8015ff8 <get_canton_cnf+0x48>)
 8015fc2:	f06f 0009 	mvn.w	r0, #9
 8015fc6:	f7ff ffdf 	bl	8015f88 <config_error>
 8015fca:	4603      	mov	r3, r0
 8015fcc:	e00e      	b.n	8015fec <get_canton_cnf+0x3c>
	if ((idx<0) || (idx>= NUM_CANTONS)) return NULL;
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	db02      	blt.n	8015fda <get_canton_cnf+0x2a>
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	2b07      	cmp	r3, #7
 8015fd8:	dd01      	ble.n	8015fde <get_canton_cnf+0x2e>
 8015fda:	2300      	movs	r3, #0
 8015fdc:	e006      	b.n	8015fec <get_canton_cnf+0x3c>
	return &Cantons[idx];
 8015fde:	687a      	ldr	r2, [r7, #4]
 8015fe0:	4613      	mov	r3, r2
 8015fe2:	005b      	lsls	r3, r3, #1
 8015fe4:	4413      	add	r3, r2
 8015fe6:	011b      	lsls	r3, r3, #4
 8015fe8:	4a04      	ldr	r2, [pc, #16]	; (8015ffc <get_canton_cnf+0x4c>)
 8015fea:	4413      	add	r3, r2
}
 8015fec:	4618      	mov	r0, r3
 8015fee:	3708      	adds	r7, #8
 8015ff0:	46bd      	mov	sp, r7
 8015ff2:	bd80      	pop	{r7, pc}
 8015ff4:	200004c8 	.word	0x200004c8
 8015ff8:	08019b9c 	.word	0x08019b9c
 8015ffc:	20000248 	.word	0x20000248

08016000 <get_train_cnf>:


const train_config_t *get_train_cnf(int idx)
{
 8016000:	b580      	push	{r7, lr}
 8016002:	b082      	sub	sp, #8
 8016004:	af00      	add	r7, sp, #0
 8016006:	6078      	str	r0, [r7, #4]
	if (!setup_done) return config_error(ERR_SETUP_KO, "railconfig_setup_default not called");
 8016008:	4b0d      	ldr	r3, [pc, #52]	; (8016040 <get_train_cnf+0x40>)
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d106      	bne.n	801601e <get_train_cnf+0x1e>
 8016010:	490c      	ldr	r1, [pc, #48]	; (8016044 <get_train_cnf+0x44>)
 8016012:	f06f 0009 	mvn.w	r0, #9
 8016016:	f7ff ffb7 	bl	8015f88 <config_error>
 801601a:	4603      	mov	r3, r0
 801601c:	e00b      	b.n	8016036 <get_train_cnf+0x36>
	if ((idx<0) || (idx>= NUM_TRAINS)) return NULL;
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	2b00      	cmp	r3, #0
 8016022:	db02      	blt.n	801602a <get_train_cnf+0x2a>
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	2b07      	cmp	r3, #7
 8016028:	dd01      	ble.n	801602e <get_train_cnf+0x2e>
 801602a:	2300      	movs	r3, #0
 801602c:	e003      	b.n	8016036 <get_train_cnf+0x36>
	return &Trains[idx];
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	015b      	lsls	r3, r3, #5
 8016032:	4a05      	ldr	r2, [pc, #20]	; (8016048 <get_train_cnf+0x48>)
 8016034:	4413      	add	r3, r2
}
 8016036:	4618      	mov	r0, r3
 8016038:	3708      	adds	r7, #8
 801603a:	46bd      	mov	sp, r7
 801603c:	bd80      	pop	{r7, pc}
 801603e:	bf00      	nop
 8016040:	200004c8 	.word	0x200004c8
 8016044:	08019b9c 	.word	0x08019b9c
 8016048:	200003c8 	.word	0x200003c8

0801604c <get_turnout_cnf>:


const turnout_config_t  *get_turnout_cnf(int idx)
{
 801604c:	b580      	push	{r7, lr}
 801604e:	b082      	sub	sp, #8
 8016050:	af00      	add	r7, sp, #0
 8016052:	6078      	str	r0, [r7, #4]
	if (!setup_done) return config_error(ERR_SETUP_KO, "railconfig_setup_default not called");
 8016054:	4b0d      	ldr	r3, [pc, #52]	; (801608c <get_turnout_cnf+0x40>)
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	2b00      	cmp	r3, #0
 801605a:	d106      	bne.n	801606a <get_turnout_cnf+0x1e>
 801605c:	490c      	ldr	r1, [pc, #48]	; (8016090 <get_turnout_cnf+0x44>)
 801605e:	f06f 0009 	mvn.w	r0, #9
 8016062:	f7ff ff91 	bl	8015f88 <config_error>
 8016066:	4603      	mov	r3, r0
 8016068:	e00b      	b.n	8016082 <get_turnout_cnf+0x36>
	if ((idx<0) || (idx>= NUM_TURNOUTS)) return NULL;
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	2b00      	cmp	r3, #0
 801606e:	db02      	blt.n	8016076 <get_turnout_cnf+0x2a>
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	2b07      	cmp	r3, #7
 8016074:	dd01      	ble.n	801607a <get_turnout_cnf+0x2e>
 8016076:	2300      	movs	r3, #0
 8016078:	e003      	b.n	8016082 <get_turnout_cnf+0x36>
	return &Turnouts[idx];
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	00db      	lsls	r3, r3, #3
 801607e:	4a05      	ldr	r2, [pc, #20]	; (8016094 <get_turnout_cnf+0x48>)
 8016080:	4413      	add	r3, r2
}
 8016082:	4618      	mov	r0, r3
 8016084:	3708      	adds	r7, #8
 8016086:	46bd      	mov	sp, r7
 8016088:	bd80      	pop	{r7, pc}
 801608a:	bf00      	nop
 801608c:	200004c8 	.word	0x200004c8
 8016090:	08019b9c 	.word	0x08019b9c
 8016094:	0801ba8c 	.word	0x0801ba8c

08016098 <stat_val_get>:
static const int numvalcanton = sizeof(statvalcanton)/sizeof(statvalcanton[0]);



int32_t stat_val_get(int step, int *pdone)
{
 8016098:	b480      	push	{r7}
 801609a:	b083      	sub	sp, #12
 801609c:	af00      	add	r7, sp, #0
 801609e:	6078      	str	r0, [r7, #4]
 80160a0:	6039      	str	r1, [r7, #0]
	*pdone = 1;
 80160a2:	683b      	ldr	r3, [r7, #0]
 80160a4:	2201      	movs	r2, #1
 80160a6:	601a      	str	r2, [r3, #0]
	return 0;
 80160a8:	2300      	movs	r3, #0
		train_vars_t *vars = get_train_vars(nt);
		const stat_val_t *sv = &statvaltrain[idx];
		return _getval(vars, sv->off, sv->l);
	}
#endif
}
 80160aa:	4618      	mov	r0, r3
 80160ac:	370c      	adds	r7, #12
 80160ae:	46bd      	mov	sp, r7
 80160b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b4:	4770      	bx	lr

080160b6 <txframe_send_notif>:
	txframe_send(m, 0);
}


static inline void txframe_send_notif(frame_msg_t *m, int len)
{
 80160b6:	b580      	push	{r7, lr}
 80160b8:	b082      	sub	sp, #8
 80160ba:	af00      	add	r7, sp, #0
 80160bc:	6078      	str	r0, [r7, #4]
 80160be:	6039      	str	r1, [r7, #0]
	m->t = TXFRAME_TYPE_NOTIF;
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	2202      	movs	r2, #2
 80160c4:	701a      	strb	r2, [r3, #0]
	if (len) m->len = len;
 80160c6:	683b      	ldr	r3, [r7, #0]
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d003      	beq.n	80160d4 <txframe_send_notif+0x1e>
 80160cc:	683b      	ldr	r3, [r7, #0]
 80160ce:	b2da      	uxtb	r2, r3
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	705a      	strb	r2, [r3, #1]
	txframe_send(m, 1);
 80160d4:	2101      	movs	r1, #1
 80160d6:	6878      	ldr	r0, [r7, #4]
 80160d8:	f002 fc9a 	bl	8018a10 <txframe_send>
}
 80160dc:	bf00      	nop
 80160de:	3708      	adds	r7, #8
 80160e0:	46bd      	mov	sp, r7
 80160e2:	bd80      	pop	{r7, pc}

080160e4 <mqf_read_to_forward_usb>:
#define CMD_POSE_TRIGGERED			0x51

LFMQUEUE_DEF_H(to_forward, msg_64_t)
LFMQUEUE_DEF_H(from_forward, msg_64_t)

LFMQUEUE_DEF_H(to_forward_usb, msg_64_t)
 80160e4:	b580      	push	{r7, lr}
 80160e6:	b082      	sub	sp, #8
 80160e8:	af00      	add	r7, sp, #0
 80160ea:	6078      	str	r0, [r7, #4]
 80160ec:	6879      	ldr	r1, [r7, #4]
 80160ee:	4804      	ldr	r0, [pc, #16]	; (8016100 <mqf_read_to_forward_usb+0x1c>)
 80160f0:	f003 f83a 	bl	8019168 <mqf_read>
 80160f4:	4603      	mov	r3, r0
 80160f6:	4618      	mov	r0, r3
 80160f8:	3708      	adds	r7, #8
 80160fa:	46bd      	mov	sp, r7
 80160fc:	bd80      	pop	{r7, pc}
 80160fe:	bf00      	nop
 8016100:	20000530 	.word	0x20000530

08016104 <mqf_write_from_forward_usb>:
LFMQUEUE_DEF_H(from_forward_usb, msg_64_t)
 8016104:	b580      	push	{r7, lr}
 8016106:	b082      	sub	sp, #8
 8016108:	af00      	add	r7, sp, #0
 801610a:	6078      	str	r0, [r7, #4]
 801610c:	6879      	ldr	r1, [r7, #4]
 801610e:	4804      	ldr	r0, [pc, #16]	; (8016120 <mqf_write_from_forward_usb+0x1c>)
 8016110:	f002 ffb0 	bl	8019074 <mqf_write>
 8016114:	4603      	mov	r3, r0
 8016116:	4618      	mov	r0, r3
 8016118:	3708      	adds	r7, #8
 801611a:	46bd      	mov	sp, r7
 801611c:	bd80      	pop	{r7, pc}
 801611e:	bf00      	nop
 8016120:	2000053c 	.word	0x2000053c

08016124 <_frm_escape>:

#define FRAME_DELIM '|'
#define FRAME_ESC   '\\'

static int _frm_escape(uint8_t *buf, int len, int maxlen)
{
 8016124:	b480      	push	{r7}
 8016126:	b089      	sub	sp, #36	; 0x24
 8016128:	af00      	add	r7, sp, #0
 801612a:	60f8      	str	r0, [r7, #12]
 801612c:	60b9      	str	r1, [r7, #8]
 801612e:	607a      	str	r2, [r7, #4]
    int ne = 0;
 8016130:	2300      	movs	r3, #0
 8016132:	61fb      	str	r3, [r7, #28]
    for (int i=0; i<len; i++) {
 8016134:	2300      	movs	r3, #0
 8016136:	61bb      	str	r3, [r7, #24]
 8016138:	e011      	b.n	801615e <_frm_escape+0x3a>
        if ((FRAME_ESC==buf[i]) || (FRAME_DELIM==buf[i])) {
 801613a:	69bb      	ldr	r3, [r7, #24]
 801613c:	68fa      	ldr	r2, [r7, #12]
 801613e:	4413      	add	r3, r2
 8016140:	781b      	ldrb	r3, [r3, #0]
 8016142:	2b5c      	cmp	r3, #92	; 0x5c
 8016144:	d005      	beq.n	8016152 <_frm_escape+0x2e>
 8016146:	69bb      	ldr	r3, [r7, #24]
 8016148:	68fa      	ldr	r2, [r7, #12]
 801614a:	4413      	add	r3, r2
 801614c:	781b      	ldrb	r3, [r3, #0]
 801614e:	2b7c      	cmp	r3, #124	; 0x7c
 8016150:	d102      	bne.n	8016158 <_frm_escape+0x34>
            ne++;
 8016152:	69fb      	ldr	r3, [r7, #28]
 8016154:	3301      	adds	r3, #1
 8016156:	61fb      	str	r3, [r7, #28]
    for (int i=0; i<len; i++) {
 8016158:	69bb      	ldr	r3, [r7, #24]
 801615a:	3301      	adds	r3, #1
 801615c:	61bb      	str	r3, [r7, #24]
 801615e:	69ba      	ldr	r2, [r7, #24]
 8016160:	68bb      	ldr	r3, [r7, #8]
 8016162:	429a      	cmp	r2, r3
 8016164:	dbe9      	blt.n	801613a <_frm_escape+0x16>
        }
    }
    int nl = ne+len;
 8016166:	69fa      	ldr	r2, [r7, #28]
 8016168:	68bb      	ldr	r3, [r7, #8]
 801616a:	4413      	add	r3, r2
 801616c:	613b      	str	r3, [r7, #16]
    if (nl>maxlen) return -1;
 801616e:	693a      	ldr	r2, [r7, #16]
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	429a      	cmp	r2, r3
 8016174:	dd02      	ble.n	801617c <_frm_escape+0x58>
 8016176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801617a:	e02f      	b.n	80161dc <_frm_escape+0xb8>
    for (int i=len-1+ne; i>=0; i--) {
 801617c:	68bb      	ldr	r3, [r7, #8]
 801617e:	3b01      	subs	r3, #1
 8016180:	69fa      	ldr	r2, [r7, #28]
 8016182:	4413      	add	r3, r2
 8016184:	617b      	str	r3, [r7, #20]
 8016186:	e025      	b.n	80161d4 <_frm_escape+0xb0>
        buf[i] = buf[i-ne];
 8016188:	697a      	ldr	r2, [r7, #20]
 801618a:	69fb      	ldr	r3, [r7, #28]
 801618c:	1ad3      	subs	r3, r2, r3
 801618e:	461a      	mov	r2, r3
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	441a      	add	r2, r3
 8016194:	697b      	ldr	r3, [r7, #20]
 8016196:	68f9      	ldr	r1, [r7, #12]
 8016198:	440b      	add	r3, r1
 801619a:	7812      	ldrb	r2, [r2, #0]
 801619c:	701a      	strb	r2, [r3, #0]
        if ((FRAME_ESC==buf[i]) || (FRAME_DELIM==buf[i])) {
 801619e:	697b      	ldr	r3, [r7, #20]
 80161a0:	68fa      	ldr	r2, [r7, #12]
 80161a2:	4413      	add	r3, r2
 80161a4:	781b      	ldrb	r3, [r3, #0]
 80161a6:	2b5c      	cmp	r3, #92	; 0x5c
 80161a8:	d005      	beq.n	80161b6 <_frm_escape+0x92>
 80161aa:	697b      	ldr	r3, [r7, #20]
 80161ac:	68fa      	ldr	r2, [r7, #12]
 80161ae:	4413      	add	r3, r2
 80161b0:	781b      	ldrb	r3, [r3, #0]
 80161b2:	2b7c      	cmp	r3, #124	; 0x7c
 80161b4:	d10b      	bne.n	80161ce <_frm_escape+0xaa>
            buf[i-1]=FRAME_ESC;
 80161b6:	697b      	ldr	r3, [r7, #20]
 80161b8:	3b01      	subs	r3, #1
 80161ba:	68fa      	ldr	r2, [r7, #12]
 80161bc:	4413      	add	r3, r2
 80161be:	225c      	movs	r2, #92	; 0x5c
 80161c0:	701a      	strb	r2, [r3, #0]
            ne--;
 80161c2:	69fb      	ldr	r3, [r7, #28]
 80161c4:	3b01      	subs	r3, #1
 80161c6:	61fb      	str	r3, [r7, #28]
            i--;
 80161c8:	697b      	ldr	r3, [r7, #20]
 80161ca:	3b01      	subs	r3, #1
 80161cc:	617b      	str	r3, [r7, #20]
    for (int i=len-1+ne; i>=0; i--) {
 80161ce:	697b      	ldr	r3, [r7, #20]
 80161d0:	3b01      	subs	r3, #1
 80161d2:	617b      	str	r3, [r7, #20]
 80161d4:	697b      	ldr	r3, [r7, #20]
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	dad6      	bge.n	8016188 <_frm_escape+0x64>
        }
    }
    return nl;
 80161da:	693b      	ldr	r3, [r7, #16]
}
 80161dc:	4618      	mov	r0, r3
 80161de:	3724      	adds	r7, #36	; 0x24
 80161e0:	46bd      	mov	sp, r7
 80161e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e6:	4770      	bx	lr

080161e8 <_frm_escape2>:

static int _frm_escape2(uint8_t *buf,  uint8_t *org, int len, int maxlen)
{
 80161e8:	b480      	push	{r7}
 80161ea:	b087      	sub	sp, #28
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	60f8      	str	r0, [r7, #12]
 80161f0:	60b9      	str	r1, [r7, #8]
 80161f2:	607a      	str	r2, [r7, #4]
 80161f4:	603b      	str	r3, [r7, #0]
    int ne = 0;
 80161f6:	2300      	movs	r3, #0
 80161f8:	617b      	str	r3, [r7, #20]
    for (int i=0; i<len; i++) {
 80161fa:	2300      	movs	r3, #0
 80161fc:	613b      	str	r3, [r7, #16]
 80161fe:	e02f      	b.n	8016260 <_frm_escape2+0x78>
    	if (ne>=maxlen) return -1;
 8016200:	697a      	ldr	r2, [r7, #20]
 8016202:	683b      	ldr	r3, [r7, #0]
 8016204:	429a      	cmp	r2, r3
 8016206:	db02      	blt.n	801620e <_frm_escape2+0x26>
 8016208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801620c:	e02d      	b.n	801626a <_frm_escape2+0x82>
        if ((FRAME_ESC==org[i]) || (FRAME_DELIM==org[i])) {
 801620e:	693b      	ldr	r3, [r7, #16]
 8016210:	68ba      	ldr	r2, [r7, #8]
 8016212:	4413      	add	r3, r2
 8016214:	781b      	ldrb	r3, [r3, #0]
 8016216:	2b5c      	cmp	r3, #92	; 0x5c
 8016218:	d005      	beq.n	8016226 <_frm_escape2+0x3e>
 801621a:	693b      	ldr	r3, [r7, #16]
 801621c:	68ba      	ldr	r2, [r7, #8]
 801621e:	4413      	add	r3, r2
 8016220:	781b      	ldrb	r3, [r3, #0]
 8016222:	2b7c      	cmp	r3, #124	; 0x7c
 8016224:	d10e      	bne.n	8016244 <_frm_escape2+0x5c>
        	buf[ne++] = FRAME_ESC;
 8016226:	697b      	ldr	r3, [r7, #20]
 8016228:	1c5a      	adds	r2, r3, #1
 801622a:	617a      	str	r2, [r7, #20]
 801622c:	461a      	mov	r2, r3
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	4413      	add	r3, r2
 8016232:	225c      	movs	r2, #92	; 0x5c
 8016234:	701a      	strb	r2, [r3, #0]
        	if (ne>=maxlen) return -1;
 8016236:	697a      	ldr	r2, [r7, #20]
 8016238:	683b      	ldr	r3, [r7, #0]
 801623a:	429a      	cmp	r2, r3
 801623c:	db02      	blt.n	8016244 <_frm_escape2+0x5c>
 801623e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016242:	e012      	b.n	801626a <_frm_escape2+0x82>
        }
        buf[ne++] = org[i];
 8016244:	693b      	ldr	r3, [r7, #16]
 8016246:	68ba      	ldr	r2, [r7, #8]
 8016248:	441a      	add	r2, r3
 801624a:	697b      	ldr	r3, [r7, #20]
 801624c:	1c59      	adds	r1, r3, #1
 801624e:	6179      	str	r1, [r7, #20]
 8016250:	4619      	mov	r1, r3
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	440b      	add	r3, r1
 8016256:	7812      	ldrb	r2, [r2, #0]
 8016258:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<len; i++) {
 801625a:	693b      	ldr	r3, [r7, #16]
 801625c:	3301      	adds	r3, #1
 801625e:	613b      	str	r3, [r7, #16]
 8016260:	693a      	ldr	r2, [r7, #16]
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	429a      	cmp	r2, r3
 8016266:	dbcb      	blt.n	8016200 <_frm_escape2+0x18>
    }
    return ne;
 8016268:	697b      	ldr	r3, [r7, #20]
}
 801626a:	4618      	mov	r0, r3
 801626c:	371c      	adds	r7, #28
 801626e:	46bd      	mov	sp, r7
 8016270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016274:	4770      	bx	lr

08016276 <frm_escape>:
static int frm_escape(uint8_t *buf, int len, int maxlen)
{
 8016276:	b580      	push	{r7, lr}
 8016278:	b086      	sub	sp, #24
 801627a:	af00      	add	r7, sp, #0
 801627c:	60f8      	str	r0, [r7, #12]
 801627e:	60b9      	str	r1, [r7, #8]
 8016280:	607a      	str	r2, [r7, #4]
	//configASSERT(buf[0]==FRAME_DELIM);
	//configASSERT(buf[len-1]==FRAME_DELIM);
    int l = _frm_escape(buf+1, len-2, maxlen-2);
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	1c58      	adds	r0, r3, #1
 8016286:	68bb      	ldr	r3, [r7, #8]
 8016288:	1e99      	subs	r1, r3, #2
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	3b02      	subs	r3, #2
 801628e:	461a      	mov	r2, r3
 8016290:	f7ff ff48 	bl	8016124 <_frm_escape>
 8016294:	6178      	str	r0, [r7, #20]
    if (l<0) return l;
 8016296:	697b      	ldr	r3, [r7, #20]
 8016298:	2b00      	cmp	r3, #0
 801629a:	da01      	bge.n	80162a0 <frm_escape+0x2a>
 801629c:	697b      	ldr	r3, [r7, #20]
 801629e:	e007      	b.n	80162b0 <frm_escape+0x3a>
    buf[l+1]=FRAME_DELIM;
 80162a0:	697b      	ldr	r3, [r7, #20]
 80162a2:	3301      	adds	r3, #1
 80162a4:	68fa      	ldr	r2, [r7, #12]
 80162a6:	4413      	add	r3, r2
 80162a8:	227c      	movs	r2, #124	; 0x7c
 80162aa:	701a      	strb	r2, [r3, #0]
    return l+2;
 80162ac:	697b      	ldr	r3, [r7, #20]
 80162ae:	3302      	adds	r3, #2
}
 80162b0:	4618      	mov	r0, r3
 80162b2:	3718      	adds	r7, #24
 80162b4:	46bd      	mov	sp, r7
 80162b6:	bd80      	pop	{r7, pc}

080162b8 <usbPollQueues>:
		uint8_t *param, int plen, uint8_t *rbuf, int rbuflen, int *prlen);

static void txframe_send_msg64(msg_64_t *msg);

void usbPollQueues(void)
{
 80162b8:	b580      	push	{r7, lr}
 80162ba:	b084      	sub	sp, #16
 80162bc:	af00      	add	r7, sp, #0
    for (;;) {
        msg_64_t m;
        int rc = mqf_read_to_forward_usb(&m);
 80162be:	463b      	mov	r3, r7
 80162c0:	4618      	mov	r0, r3
 80162c2:	f7ff ff0f 	bl	80160e4 <mqf_read_to_forward_usb>
 80162c6:	60f8      	str	r0, [r7, #12]
        if (rc) break;
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d104      	bne.n	80162d8 <usbPollQueues+0x20>
        txframe_send_msg64(&m);
 80162ce:	463b      	mov	r3, r7
 80162d0:	4618      	mov	r0, r3
 80162d2:	f000 fc8d 	bl	8016bf0 <txframe_send_msg64>
    for (;;) {
 80162d6:	e7f2      	b.n	80162be <usbPollQueues+0x6>
    }
}
 80162d8:	bf00      	nop
 80162da:	3710      	adds	r7, #16
 80162dc:	46bd      	mov	sp, r7
 80162de:	bd80      	pop	{r7, pc}

080162e0 <txrx_process_char>:

void txrx_process_char(uint8_t c, uint8_t *respbuf, int *replen)
{
 80162e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162e2:	b08f      	sub	sp, #60	; 0x3c
 80162e4:	af04      	add	r7, sp, #16
 80162e6:	4603      	mov	r3, r0
 80162e8:	60b9      	str	r1, [r7, #8]
 80162ea:	607a      	str	r2, [r7, #4]
 80162ec:	73fb      	strb	r3, [r7, #15]
	int buflen = *replen;
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	681b      	ldr	r3, [r3, #0]
 80162f2:	623b      	str	r3, [r7, #32]
	*replen = 0;
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	2200      	movs	r2, #0
 80162f8:	601a      	str	r2, [r3, #0]
	if ((c == FRAME_DELIM) && !frm.escape) {
 80162fa:	7bfb      	ldrb	r3, [r7, #15]
 80162fc:	2b7c      	cmp	r3, #124	; 0x7c
 80162fe:	f040 8097 	bne.w	8016430 <txrx_process_char+0x150>
 8016302:	4b88      	ldr	r3, [pc, #544]	; (8016524 <txrx_process_char+0x244>)
 8016304:	781b      	ldrb	r3, [r3, #0]
 8016306:	f003 0301 	and.w	r3, r3, #1
 801630a:	b2db      	uxtb	r3, r3
 801630c:	2b00      	cmp	r3, #0
 801630e:	f040 808f 	bne.w	8016430 <txrx_process_char+0x150>
		if (0 == frm.state) {
 8016312:	4b84      	ldr	r3, [pc, #528]	; (8016524 <txrx_process_char+0x244>)
 8016314:	781b      	ldrb	r3, [r3, #0]
 8016316:	f023 0301 	bic.w	r3, r3, #1
 801631a:	b2db      	uxtb	r3, r3
 801631c:	2b00      	cmp	r3, #0
 801631e:	d10b      	bne.n	8016338 <txrx_process_char+0x58>
			memset(&frm, 0, sizeof(frm));
 8016320:	2226      	movs	r2, #38	; 0x26
 8016322:	2100      	movs	r1, #0
 8016324:	487f      	ldr	r0, [pc, #508]	; (8016524 <txrx_process_char+0x244>)
 8016326:	f002 ffc0 	bl	80192aa <memset>
			frm.state = 1;
 801632a:	4a7e      	ldr	r2, [pc, #504]	; (8016524 <txrx_process_char+0x244>)
 801632c:	7813      	ldrb	r3, [r2, #0]
 801632e:	2101      	movs	r1, #1
 8016330:	f361 0347 	bfi	r3, r1, #1, #7
 8016334:	7013      	strb	r3, [r2, #0]
			return;
 8016336:	e0f1      	b.n	801651c <txrx_process_char+0x23c>
		} else if (5 == frm.state) {
 8016338:	4b7a      	ldr	r3, [pc, #488]	; (8016524 <txrx_process_char+0x244>)
 801633a:	781b      	ldrb	r3, [r3, #0]
 801633c:	f023 0301 	bic.w	r3, r3, #1
 8016340:	b2db      	uxtb	r3, r3
 8016342:	2b0a      	cmp	r3, #10
 8016344:	d168      	bne.n	8016418 <txrx_process_char+0x138>
			frm.state = 0;
 8016346:	4a77      	ldr	r2, [pc, #476]	; (8016524 <txrx_process_char+0x244>)
 8016348:	7813      	ldrb	r3, [r2, #0]
 801634a:	f36f 0347 	bfc	r3, #1, #7
 801634e:	7013      	strb	r3, [r2, #0]
			frm.escape = 0;
 8016350:	4a74      	ldr	r2, [pc, #464]	; (8016524 <txrx_process_char+0x244>)
 8016352:	7813      	ldrb	r3, [r2, #0]
 8016354:	f36f 0300 	bfc	r3, #0, #1
 8016358:	7013      	strb	r3, [r2, #0]
			// process frame
			int i = 0;
 801635a:	2300      	movs	r3, #0
 801635c:	61fb      	str	r3, [r7, #28]
			respbuf[i++] = FRAME_DELIM;
 801635e:	69fb      	ldr	r3, [r7, #28]
 8016360:	1c5a      	adds	r2, r3, #1
 8016362:	61fa      	str	r2, [r7, #28]
 8016364:	461a      	mov	r2, r3
 8016366:	68bb      	ldr	r3, [r7, #8]
 8016368:	4413      	add	r3, r2
 801636a:	227c      	movs	r2, #124	; 0x7c
 801636c:	701a      	strb	r2, [r3, #0]
			respbuf[i++] = frm.seqnum;
 801636e:	69fb      	ldr	r3, [r7, #28]
 8016370:	1c5a      	adds	r2, r3, #1
 8016372:	61fa      	str	r2, [r7, #28]
 8016374:	461a      	mov	r2, r3
 8016376:	68bb      	ldr	r3, [r7, #8]
 8016378:	4413      	add	r3, r2
 801637a:	4a6a      	ldr	r2, [pc, #424]	; (8016524 <txrx_process_char+0x244>)
 801637c:	7852      	ldrb	r2, [r2, #1]
 801637e:	701a      	strb	r2, [r3, #0]
			respbuf[i++] = 'R';
 8016380:	69fb      	ldr	r3, [r7, #28]
 8016382:	1c5a      	adds	r2, r3, #1
 8016384:	61fa      	str	r2, [r7, #28]
 8016386:	461a      	mov	r2, r3
 8016388:	68bb      	ldr	r3, [r7, #8]
 801638a:	4413      	add	r3, r2
 801638c:	2252      	movs	r2, #82	; 0x52
 801638e:	701a      	strb	r2, [r3, #0]
			int plen = 0;
 8016390:	2300      	movs	r3, #0
 8016392:	617b      	str	r3, [r7, #20]
			uint8_t rc = process_frame_cmd(frm.sel, frm.num, frm.cmd, frm.param, frm.pidx, respbuf+i+1, buflen-i-1, &plen);
 8016394:	4b63      	ldr	r3, [pc, #396]	; (8016524 <txrx_process_char+0x244>)
 8016396:	7898      	ldrb	r0, [r3, #2]
 8016398:	4b62      	ldr	r3, [pc, #392]	; (8016524 <txrx_process_char+0x244>)
 801639a:	78dc      	ldrb	r4, [r3, #3]
 801639c:	4b61      	ldr	r3, [pc, #388]	; (8016524 <txrx_process_char+0x244>)
 801639e:	791d      	ldrb	r5, [r3, #4]
 80163a0:	4b60      	ldr	r3, [pc, #384]	; (8016524 <txrx_process_char+0x244>)
 80163a2:	795b      	ldrb	r3, [r3, #5]
 80163a4:	461e      	mov	r6, r3
 80163a6:	69fb      	ldr	r3, [r7, #28]
 80163a8:	3301      	adds	r3, #1
 80163aa:	68ba      	ldr	r2, [r7, #8]
 80163ac:	4413      	add	r3, r2
 80163ae:	6a39      	ldr	r1, [r7, #32]
 80163b0:	69fa      	ldr	r2, [r7, #28]
 80163b2:	1a8a      	subs	r2, r1, r2
 80163b4:	3a01      	subs	r2, #1
 80163b6:	f107 0114 	add.w	r1, r7, #20
 80163ba:	9103      	str	r1, [sp, #12]
 80163bc:	9202      	str	r2, [sp, #8]
 80163be:	9301      	str	r3, [sp, #4]
 80163c0:	9600      	str	r6, [sp, #0]
 80163c2:	4b59      	ldr	r3, [pc, #356]	; (8016528 <txrx_process_char+0x248>)
 80163c4:	462a      	mov	r2, r5
 80163c6:	4621      	mov	r1, r4
 80163c8:	f000 f8d2 	bl	8016570 <process_frame_cmd>
 80163cc:	4603      	mov	r3, r0
 80163ce:	76fb      	strb	r3, [r7, #27]
			respbuf[i++] = rc;
 80163d0:	69fb      	ldr	r3, [r7, #28]
 80163d2:	1c5a      	adds	r2, r3, #1
 80163d4:	61fa      	str	r2, [r7, #28]
 80163d6:	461a      	mov	r2, r3
 80163d8:	68bb      	ldr	r3, [r7, #8]
 80163da:	4413      	add	r3, r2
 80163dc:	7efa      	ldrb	r2, [r7, #27]
 80163de:	701a      	strb	r2, [r3, #0]
			respbuf[i+plen] = FRAME_DELIM;
 80163e0:	697a      	ldr	r2, [r7, #20]
 80163e2:	69fb      	ldr	r3, [r7, #28]
 80163e4:	4413      	add	r3, r2
 80163e6:	461a      	mov	r2, r3
 80163e8:	68bb      	ldr	r3, [r7, #8]
 80163ea:	4413      	add	r3, r2
 80163ec:	227c      	movs	r2, #124	; 0x7c
 80163ee:	701a      	strb	r2, [r3, #0]
			int l = frm_escape(respbuf, i+plen+1, buflen);
 80163f0:	697a      	ldr	r2, [r7, #20]
 80163f2:	69fb      	ldr	r3, [r7, #28]
 80163f4:	4413      	add	r3, r2
 80163f6:	3301      	adds	r3, #1
 80163f8:	6a3a      	ldr	r2, [r7, #32]
 80163fa:	4619      	mov	r1, r3
 80163fc:	68b8      	ldr	r0, [r7, #8]
 80163fe:	f7ff ff3a 	bl	8016276 <frm_escape>
 8016402:	6278      	str	r0, [r7, #36]	; 0x24
			if (l<0) {
 8016404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016406:	2b00      	cmp	r3, #0
 8016408:	da01      	bge.n	801640e <txrx_process_char+0x12e>
				l = 0;
 801640a:	2300      	movs	r3, #0
 801640c:	627b      	str	r3, [r7, #36]	; 0x24
			}
			*replen = l;
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016412:	601a      	str	r2, [r3, #0]
			/*if ((0)) {
				static frame_msg_t m;
				m.len = 1+ sprintf(m.frm, "frm resp %d\r\n", *replen);
				txframe_send_debug(&m, 0);
			}*/
			return;
 8016414:	bf00      	nop
 8016416:	e081      	b.n	801651c <txrx_process_char+0x23c>
		} else {
			// short frame, ignore
			frm.state = 1;
 8016418:	4a42      	ldr	r2, [pc, #264]	; (8016524 <txrx_process_char+0x244>)
 801641a:	7813      	ldrb	r3, [r2, #0]
 801641c:	2101      	movs	r1, #1
 801641e:	f361 0347 	bfi	r3, r1, #1, #7
 8016422:	7013      	strb	r3, [r2, #0]
			frm.escape = 0;
 8016424:	4a3f      	ldr	r2, [pc, #252]	; (8016524 <txrx_process_char+0x244>)
 8016426:	7813      	ldrb	r3, [r2, #0]
 8016428:	f36f 0300 	bfc	r3, #0, #1
 801642c:	7013      	strb	r3, [r2, #0]
			return;
 801642e:	e075      	b.n	801651c <txrx_process_char+0x23c>
		}
	}
	if (c==FRAME_ESC && !frm.escape) {
 8016430:	7bfb      	ldrb	r3, [r7, #15]
 8016432:	2b5c      	cmp	r3, #92	; 0x5c
 8016434:	d10c      	bne.n	8016450 <txrx_process_char+0x170>
 8016436:	4b3b      	ldr	r3, [pc, #236]	; (8016524 <txrx_process_char+0x244>)
 8016438:	781b      	ldrb	r3, [r3, #0]
 801643a:	f003 0301 	and.w	r3, r3, #1
 801643e:	b2db      	uxtb	r3, r3
 8016440:	2b00      	cmp	r3, #0
 8016442:	d105      	bne.n	8016450 <txrx_process_char+0x170>
		// state is >0 here
		frm.escape = 1;
 8016444:	4a37      	ldr	r2, [pc, #220]	; (8016524 <txrx_process_char+0x244>)
 8016446:	7813      	ldrb	r3, [r2, #0]
 8016448:	f043 0301 	orr.w	r3, r3, #1
 801644c:	7013      	strb	r3, [r2, #0]
		return;
 801644e:	e065      	b.n	801651c <txrx_process_char+0x23c>
	}

	//  |sSNCvv...|
	switch (frm.state) {
 8016450:	4b34      	ldr	r3, [pc, #208]	; (8016524 <txrx_process_char+0x244>)
 8016452:	781b      	ldrb	r3, [r3, #0]
 8016454:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8016458:	b2db      	uxtb	r3, r3
 801645a:	3b01      	subs	r3, #1
 801645c:	2b04      	cmp	r3, #4
 801645e:	d80d      	bhi.n	801647c <txrx_process_char+0x19c>
 8016460:	a201      	add	r2, pc, #4	; (adr r2, 8016468 <txrx_process_char+0x188>)
 8016462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016466:	bf00      	nop
 8016468:	08016489 	.word	0x08016489
 801646c:	0801649d 	.word	0x0801649d
 8016470:	080164b1 	.word	0x080164b1
 8016474:	080164c5 	.word	0x080164c5
 8016478:	080164d9 	.word	0x080164d9
	default:
		frm.escape = 0;
 801647c:	4a29      	ldr	r2, [pc, #164]	; (8016524 <txrx_process_char+0x244>)
 801647e:	7813      	ldrb	r3, [r2, #0]
 8016480:	f36f 0300 	bfc	r3, #0, #1
 8016484:	7013      	strb	r3, [r2, #0]
		//configAssert(0);
		break;
 8016486:	e044      	b.n	8016512 <txrx_process_char+0x232>
	case 1:
		frm.seqnum = c;
 8016488:	4a26      	ldr	r2, [pc, #152]	; (8016524 <txrx_process_char+0x244>)
 801648a:	7bfb      	ldrb	r3, [r7, #15]
 801648c:	7053      	strb	r3, [r2, #1]
		frm.state = 2;
 801648e:	4a25      	ldr	r2, [pc, #148]	; (8016524 <txrx_process_char+0x244>)
 8016490:	7813      	ldrb	r3, [r2, #0]
 8016492:	2102      	movs	r1, #2
 8016494:	f361 0347 	bfi	r3, r1, #1, #7
 8016498:	7013      	strb	r3, [r2, #0]
		break;
 801649a:	e03a      	b.n	8016512 <txrx_process_char+0x232>
	case 2:
		frm.sel = c;
 801649c:	4a21      	ldr	r2, [pc, #132]	; (8016524 <txrx_process_char+0x244>)
 801649e:	7bfb      	ldrb	r3, [r7, #15]
 80164a0:	7093      	strb	r3, [r2, #2]
		frm.state = 3;
 80164a2:	4a20      	ldr	r2, [pc, #128]	; (8016524 <txrx_process_char+0x244>)
 80164a4:	7813      	ldrb	r3, [r2, #0]
 80164a6:	2103      	movs	r1, #3
 80164a8:	f361 0347 	bfi	r3, r1, #1, #7
 80164ac:	7013      	strb	r3, [r2, #0]
		break;
 80164ae:	e030      	b.n	8016512 <txrx_process_char+0x232>
	case 3:
		frm.num = c;
 80164b0:	4a1c      	ldr	r2, [pc, #112]	; (8016524 <txrx_process_char+0x244>)
 80164b2:	7bfb      	ldrb	r3, [r7, #15]
 80164b4:	70d3      	strb	r3, [r2, #3]
		frm.state = 4;
 80164b6:	4a1b      	ldr	r2, [pc, #108]	; (8016524 <txrx_process_char+0x244>)
 80164b8:	7813      	ldrb	r3, [r2, #0]
 80164ba:	2104      	movs	r1, #4
 80164bc:	f361 0347 	bfi	r3, r1, #1, #7
 80164c0:	7013      	strb	r3, [r2, #0]
		break;
 80164c2:	e026      	b.n	8016512 <txrx_process_char+0x232>
	case 4:
		frm.cmd = c;
 80164c4:	4a17      	ldr	r2, [pc, #92]	; (8016524 <txrx_process_char+0x244>)
 80164c6:	7bfb      	ldrb	r3, [r7, #15]
 80164c8:	7113      	strb	r3, [r2, #4]
		frm.state = 5;
 80164ca:	4a16      	ldr	r2, [pc, #88]	; (8016524 <txrx_process_char+0x244>)
 80164cc:	7813      	ldrb	r3, [r2, #0]
 80164ce:	2105      	movs	r1, #5
 80164d0:	f361 0347 	bfi	r3, r1, #1, #7
 80164d4:	7013      	strb	r3, [r2, #0]
		break;
 80164d6:	e01c      	b.n	8016512 <txrx_process_char+0x232>
	case 5:
		if (frm.pidx >= MAX_DATA_LEN) {
 80164d8:	4b12      	ldr	r3, [pc, #72]	; (8016524 <txrx_process_char+0x244>)
 80164da:	795b      	ldrb	r3, [r3, #5]
 80164dc:	2b1f      	cmp	r3, #31
 80164de:	d90a      	bls.n	80164f6 <txrx_process_char+0x216>
			frm.state = 0;
 80164e0:	4a10      	ldr	r2, [pc, #64]	; (8016524 <txrx_process_char+0x244>)
 80164e2:	7813      	ldrb	r3, [r2, #0]
 80164e4:	f36f 0347 	bfc	r3, #1, #7
 80164e8:	7013      	strb	r3, [r2, #0]
			frm.escape = 0;
 80164ea:	4a0e      	ldr	r2, [pc, #56]	; (8016524 <txrx_process_char+0x244>)
 80164ec:	7813      	ldrb	r3, [r2, #0]
 80164ee:	f36f 0300 	bfc	r3, #0, #1
 80164f2:	7013      	strb	r3, [r2, #0]
			break;
 80164f4:	e00d      	b.n	8016512 <txrx_process_char+0x232>
		}
		frm.param[frm.pidx] = c;
 80164f6:	4b0b      	ldr	r3, [pc, #44]	; (8016524 <txrx_process_char+0x244>)
 80164f8:	795b      	ldrb	r3, [r3, #5]
 80164fa:	461a      	mov	r2, r3
 80164fc:	4b09      	ldr	r3, [pc, #36]	; (8016524 <txrx_process_char+0x244>)
 80164fe:	4413      	add	r3, r2
 8016500:	7bfa      	ldrb	r2, [r7, #15]
 8016502:	719a      	strb	r2, [r3, #6]
		frm.pidx ++;
 8016504:	4b07      	ldr	r3, [pc, #28]	; (8016524 <txrx_process_char+0x244>)
 8016506:	795b      	ldrb	r3, [r3, #5]
 8016508:	3301      	adds	r3, #1
 801650a:	b2da      	uxtb	r2, r3
 801650c:	4b05      	ldr	r3, [pc, #20]	; (8016524 <txrx_process_char+0x244>)
 801650e:	715a      	strb	r2, [r3, #5]
		break;
 8016510:	bf00      	nop
	}
        frm.escape = 0;
 8016512:	4a04      	ldr	r2, [pc, #16]	; (8016524 <txrx_process_char+0x244>)
 8016514:	7813      	ldrb	r3, [r2, #0]
 8016516:	f36f 0300 	bfc	r3, #0, #1
 801651a:	7013      	strb	r3, [r2, #0]
}
 801651c:	372c      	adds	r7, #44	; 0x2c
 801651e:	46bd      	mov	sp, r7
 8016520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016522:	bf00      	nop
 8016524:	20005348 	.word	0x20005348
 8016528:	2000534e 	.word	0x2000534e

0801652c <param_set_pwm>:



// ---------------------------------------------------------------------------------
static void param_set_pwm(struct param *p, int32_t v) // XXX to be moved away
{
 801652c:	b580      	push	{r7, lr}
 801652e:	b082      	sub	sp, #8
 8016530:	af00      	add	r7, sp, #0
 8016532:	6078      	str	r0, [r7, #4]
 8016534:	6039      	str	r1, [r7, #0]
        set_pwm_freq(v);
 8016536:	6838      	ldr	r0, [r7, #0]
 8016538:	f002 f80c 	bl	8018554 <set_pwm_freq>
}
 801653c:	bf00      	nop
 801653e:	3708      	adds	r7, #8
 8016540:	46bd      	mov	sp, r7
 8016542:	bd80      	pop	{r7, pc}

08016544 <param_get_numtrains>:
int32_t (*getter)(struct param *);
	void (*setter)(struct param *, int32_t);
*/

static int32_t param_get_numtrains(param_t *p)
{
 8016544:	b480      	push	{r7}
 8016546:	b083      	sub	sp, #12
 8016548:	af00      	add	r7, sp, #0
 801654a:	6078      	str	r0, [r7, #4]
	return NUM_TRAINS;
 801654c:	2308      	movs	r3, #8
}
 801654e:	4618      	mov	r0, r3
 8016550:	370c      	adds	r7, #12
 8016552:	46bd      	mov	sp, r7
 8016554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016558:	4770      	bx	lr

0801655a <param_get_numcantons>:

static int32_t param_get_numcantons(param_t *p)
{
 801655a:	b480      	push	{r7}
 801655c:	b083      	sub	sp, #12
 801655e:	af00      	add	r7, sp, #0
 8016560:	6078      	str	r0, [r7, #4]
	return NUM_CANTONS;
 8016562:	2308      	movs	r3, #8
}
 8016564:	4618      	mov	r0, r3
 8016566:	370c      	adds	r7, #12
 8016568:	46bd      	mov	sp, r7
 801656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801656e:	4770      	bx	lr

08016570 <process_frame_cmd>:




static uint8_t process_frame_cmd(uint8_t sel, uint8_t num,  uint8_t cmd, uint8_t *param, int plen, uint8_t *rbuf, int rbuflen, int *prlen)
{
 8016570:	b580      	push	{r7, lr}
 8016572:	b094      	sub	sp, #80	; 0x50
 8016574:	af04      	add	r7, sp, #16
 8016576:	603b      	str	r3, [r7, #0]
 8016578:	4603      	mov	r3, r0
 801657a:	71fb      	strb	r3, [r7, #7]
 801657c:	460b      	mov	r3, r1
 801657e:	71bb      	strb	r3, [r7, #6]
 8016580:	4613      	mov	r3, r2
 8016582:	717b      	strb	r3, [r7, #5]
    //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
	int16_t s;
	*prlen = 0;
 8016584:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016586:	2200      	movs	r2, #0
 8016588:	601a      	str	r2, [r3, #0]
	int32_t v,d,min,max;
	int rc=-1;
 801658a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801658e:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch(sel) {
 8016590:	79fb      	ldrb	r3, [r7, #7]
 8016592:	3b36      	subs	r3, #54	; 0x36
 8016594:	2b1e      	cmp	r3, #30
 8016596:	f200 81ff 	bhi.w	8016998 <process_frame_cmd+0x428>
 801659a:	a201      	add	r2, pc, #4	; (adr r2, 80165a0 <process_frame_cmd+0x30>)
 801659c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165a0:	0801661d 	.word	0x0801661d
 80165a4:	08016999 	.word	0x08016999
 80165a8:	08016999 	.word	0x08016999
 80165ac:	08016999 	.word	0x08016999
 80165b0:	08016999 	.word	0x08016999
 80165b4:	08016999 	.word	0x08016999
 80165b8:	08016999 	.word	0x08016999
 80165bc:	08016999 	.word	0x08016999
 80165c0:	08016999 	.word	0x08016999
 80165c4:	08016999 	.word	0x08016999
 80165c8:	08016999 	.word	0x08016999
 80165cc:	0801663f 	.word	0x0801663f
 80165d0:	08016999 	.word	0x08016999
 80165d4:	08016999 	.word	0x08016999
 80165d8:	08016999 	.word	0x08016999
 80165dc:	08016999 	.word	0x08016999
 80165e0:	08016999 	.word	0x08016999
 80165e4:	08016655 	.word	0x08016655
 80165e8:	08016999 	.word	0x08016999
 80165ec:	08016999 	.word	0x08016999
 80165f0:	08016999 	.word	0x08016999
 80165f4:	08016999 	.word	0x08016999
 80165f8:	08016999 	.word	0x08016999
 80165fc:	08016999 	.word	0x08016999
 8016600:	08016999 	.word	0x08016999
 8016604:	08016999 	.word	0x08016999
 8016608:	08016999 	.word	0x08016999
 801660c:	08016999 	.word	0x08016999
 8016610:	08016999 	.word	0x08016999
 8016614:	08016999 	.word	0x08016999
 8016618:	080167b9 	.word	0x080167b9
    case '6': {
        msg_64_t m;
        m.to = num;
 801661c:	79bb      	ldrb	r3, [r7, #6]
 801661e:	743b      	strb	r3, [r7, #16]
        m.from = cmd;
 8016620:	797b      	ldrb	r3, [r7, #5]
 8016622:	747b      	strb	r3, [r7, #17]
        memcpy(m.rbytes, param, 6);
 8016624:	683a      	ldr	r2, [r7, #0]
 8016626:	f107 0312 	add.w	r3, r7, #18
 801662a:	6811      	ldr	r1, [r2, #0]
 801662c:	6019      	str	r1, [r3, #0]
 801662e:	8892      	ldrh	r2, [r2, #4]
 8016630:	809a      	strh	r2, [r3, #4]
        mqf_write_from_forward_usb(&m);
 8016632:	f107 0310 	add.w	r3, r7, #16
 8016636:	4618      	mov	r0, r3
 8016638:	f7ff fd64 	bl	8016104 <mqf_write_from_forward_usb>
        }
        break;
 801663c:	e1bc      	b.n	80169b8 <process_frame_cmd+0x448>
	case 'A':
		switch (cmd) {
 801663e:	797b      	ldrb	r3, [r7, #5]
 8016640:	2b57      	cmp	r3, #87	; 0x57
 8016642:	d003      	beq.n	801664c <process_frame_cmd+0xdc>
 8016644:	2b73      	cmp	r3, #115	; 0x73
 8016646:	d003      	beq.n	8016650 <process_frame_cmd+0xe0>
 8016648:	2b53      	cmp	r3, #83	; 0x53
		case 'S':
			//rc = turnout_cmd(num, 1);
			break;
 801664a:	e002      	b.n	8016652 <process_frame_cmd+0xe2>
		case 's':
			//rc = turnout_cmd(num, -1);
			break;
		case 'W':
			//rc = turnout_test(num);
			break;
 801664c:	bf00      	nop
 801664e:	e1b3      	b.n	80169b8 <process_frame_cmd+0x448>
			break;
 8016650:	bf00      	nop
		}
		break;
 8016652:	e1b1      	b.n	80169b8 <process_frame_cmd+0x448>
	case 'G':
		switch (cmd) {
 8016654:	797b      	ldrb	r3, [r7, #5]
 8016656:	3b43      	subs	r3, #67	; 0x43
 8016658:	2b2d      	cmp	r3, #45	; 0x2d
 801665a:	f200 80ab 	bhi.w	80167b4 <process_frame_cmd+0x244>
 801665e:	a201      	add	r2, pc, #4	; (adr r2, 8016664 <process_frame_cmd+0xf4>)
 8016660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016664:	0801671d 	.word	0x0801671d
 8016668:	080167b5 	.word	0x080167b5
 801666c:	080167b5 	.word	0x080167b5
 8016670:	080167b5 	.word	0x080167b5
 8016674:	080167b5 	.word	0x080167b5
 8016678:	080167b5 	.word	0x080167b5
 801667c:	080167b5 	.word	0x080167b5
 8016680:	080167b5 	.word	0x080167b5
 8016684:	0801672b 	.word	0x0801672b
 8016688:	080167b5 	.word	0x080167b5
 801668c:	080167b5 	.word	0x080167b5
 8016690:	080167b5 	.word	0x080167b5
 8016694:	080167b5 	.word	0x080167b5
 8016698:	0801678f 	.word	0x0801678f
 801669c:	080167b5 	.word	0x080167b5
 80166a0:	080167b5 	.word	0x080167b5
 80166a4:	08016727 	.word	0x08016727
 80166a8:	080167b5 	.word	0x080167b5
 80166ac:	080167b5 	.word	0x080167b5
 80166b0:	080167b5 	.word	0x080167b5
 80166b4:	080167b5 	.word	0x080167b5
 80166b8:	080167b5 	.word	0x080167b5
 80166bc:	080167b5 	.word	0x080167b5
 80166c0:	080167b5 	.word	0x080167b5
 80166c4:	080167b5 	.word	0x080167b5
 80166c8:	080167b5 	.word	0x080167b5
 80166cc:	080167b5 	.word	0x080167b5
 80166d0:	080167b5 	.word	0x080167b5
 80166d4:	080167b5 	.word	0x080167b5
 80166d8:	080167b5 	.word	0x080167b5
 80166dc:	080167b5 	.word	0x080167b5
 80166e0:	080167b5 	.word	0x080167b5
 80166e4:	080167b5 	.word	0x080167b5
 80166e8:	080167b5 	.word	0x080167b5
 80166ec:	080167b5 	.word	0x080167b5
 80166f0:	080167b5 	.word	0x080167b5
 80166f4:	080167b5 	.word	0x080167b5
 80166f8:	080167b5 	.word	0x080167b5
 80166fc:	080167b5 	.word	0x080167b5
 8016700:	080167b5 	.word	0x080167b5
 8016704:	080167b5 	.word	0x080167b5
 8016708:	080167b5 	.word	0x080167b5
 801670c:	080167b5 	.word	0x080167b5
 8016710:	080167b5 	.word	0x080167b5
 8016714:	080167b5 	.word	0x080167b5
 8016718:	0801672f 	.word	0x0801672f
		case 'C':
			cli_frame_mode = 0;
 801671c:	4ba9      	ldr	r3, [pc, #676]	; (80169c4 <process_frame_cmd+0x454>)
 801671e:	2200      	movs	r2, #0
 8016720:	701a      	strb	r2, [r3, #0]
			return 0;
 8016722:	2300      	movs	r3, #0
 8016724:	e149      	b.n	80169ba <process_frame_cmd+0x44a>
			break;
		case 'S':
			// TODO train_stop_all();
			return 0;
 8016726:	2300      	movs	r3, #0
 8016728:	e147      	b.n	80169ba <process_frame_cmd+0x44a>
			break;
		case 'K':
			// TODO calibrate_bemf();
			return 0;
 801672a:	2300      	movs	r3, #0
 801672c:	e145      	b.n	80169ba <process_frame_cmd+0x44a>
			break;
		case 'p':
			rc = param_get_value(glob_params, NULL, (char *)param, &v, &d, &min, &max);
 801672e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8016732:	f107 031c 	add.w	r3, r7, #28
 8016736:	9302      	str	r3, [sp, #8]
 8016738:	f107 0320 	add.w	r3, r7, #32
 801673c:	9301      	str	r3, [sp, #4]
 801673e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016742:	9300      	str	r3, [sp, #0]
 8016744:	4613      	mov	r3, r2
 8016746:	683a      	ldr	r2, [r7, #0]
 8016748:	2100      	movs	r1, #0
 801674a:	489f      	ldr	r0, [pc, #636]	; (80169c8 <process_frame_cmd+0x458>)
 801674c:	f7ff fb3b 	bl	8015dc6 <param_get_value>
 8016750:	63f8      	str	r0, [r7, #60]	; 0x3c
			memcpy(rbuf, &v,   sizeof(int32_t)); rbuf += sizeof(int32_t);
 8016752:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016756:	601a      	str	r2, [r3, #0]
 8016758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801675a:	3304      	adds	r3, #4
 801675c:	64fb      	str	r3, [r7, #76]	; 0x4c
			memcpy(rbuf, &d,   sizeof(int32_t)); rbuf += sizeof(int32_t);
 801675e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016762:	601a      	str	r2, [r3, #0]
 8016764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016766:	3304      	adds	r3, #4
 8016768:	64fb      	str	r3, [r7, #76]	; 0x4c
			memcpy(rbuf, &min, sizeof(int32_t)); rbuf += sizeof(int32_t);
 801676a:	6a3a      	ldr	r2, [r7, #32]
 801676c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801676e:	601a      	str	r2, [r3, #0]
 8016770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016772:	3304      	adds	r3, #4
 8016774:	64fb      	str	r3, [r7, #76]	; 0x4c
			memcpy(rbuf, &max, sizeof(int32_t)); rbuf += sizeof(int32_t);
 8016776:	69fa      	ldr	r2, [r7, #28]
 8016778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801677a:	601a      	str	r2, [r3, #0]
 801677c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801677e:	3304      	adds	r3, #4
 8016780:	64fb      	str	r3, [r7, #76]	; 0x4c
			*prlen = 4*sizeof(int32_t);
 8016782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016784:	2210      	movs	r2, #16
 8016786:	601a      	str	r2, [r3, #0]
			return rc;
 8016788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801678a:	b2db      	uxtb	r3, r3
 801678c:	e115      	b.n	80169ba <process_frame_cmd+0x44a>
		case 'P': {
			if (plen < 4+1) return 1;
 801678e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016790:	2b04      	cmp	r3, #4
 8016792:	dc01      	bgt.n	8016798 <process_frame_cmd+0x228>
 8016794:	2301      	movs	r3, #1
 8016796:	e110      	b.n	80169ba <process_frame_cmd+0x44a>
			int32_t v;
			memcpy(&v, param, sizeof(int32_t));
 8016798:	683b      	ldr	r3, [r7, #0]
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	60fb      	str	r3, [r7, #12]
			int rc = param_set_value(glob_params, NULL, (char *)(param+sizeof(int32_t)), v);
 801679e:	683b      	ldr	r3, [r7, #0]
 80167a0:	1d1a      	adds	r2, r3, #4
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	2100      	movs	r1, #0
 80167a6:	4888      	ldr	r0, [pc, #544]	; (80169c8 <process_frame_cmd+0x458>)
 80167a8:	f7ff fb7f 	bl	8015eaa <param_set_value>
 80167ac:	6338      	str	r0, [r7, #48]	; 0x30
			return rc;
 80167ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167b0:	b2db      	uxtb	r3, r3
 80167b2:	e102      	b.n	80169ba <process_frame_cmd+0x44a>
		}
		default:
			return 3;
 80167b4:	2303      	movs	r3, #3
 80167b6:	e100      	b.n	80169ba <process_frame_cmd+0x44a>
		}
		break;
	case 'T':
		//if (num == '0') num=0; // XXX hook for test
		//if (num != 0) return 4; // for now
		switch (cmd) {
 80167b8:	797b      	ldrb	r3, [r7, #5]
 80167ba:	3b41      	subs	r3, #65	; 0x41
 80167bc:	2b39      	cmp	r3, #57	; 0x39
 80167be:	f200 80e7 	bhi.w	8016990 <process_frame_cmd+0x420>
 80167c2:	a201      	add	r2, pc, #4	; (adr r2, 80167c8 <process_frame_cmd+0x258>)
 80167c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80167c8:	08016995 	.word	0x08016995
 80167cc:	08016991 	.word	0x08016991
 80167d0:	08016991 	.word	0x08016991
 80167d4:	08016991 	.word	0x08016991
 80167d8:	08016991 	.word	0x08016991
 80167dc:	08016991 	.word	0x08016991
 80167e0:	08016991 	.word	0x08016991
 80167e4:	08016991 	.word	0x08016991
 80167e8:	08016991 	.word	0x08016991
 80167ec:	08016991 	.word	0x08016991
 80167f0:	08016991 	.word	0x08016991
 80167f4:	08016991 	.word	0x08016991
 80167f8:	08016991 	.word	0x08016991
 80167fc:	08016991 	.word	0x08016991
 8016800:	08016991 	.word	0x08016991
 8016804:	08016955 	.word	0x08016955
 8016808:	08016991 	.word	0x08016991
 801680c:	08016991 	.word	0x08016991
 8016810:	08016991 	.word	0x08016991
 8016814:	08016991 	.word	0x08016991
 8016818:	08016991 	.word	0x08016991
 801681c:	080168b1 	.word	0x080168b1
 8016820:	08016991 	.word	0x08016991
 8016824:	08016991 	.word	0x08016991
 8016828:	08016991 	.word	0x08016991
 801682c:	08016991 	.word	0x08016991
 8016830:	08016991 	.word	0x08016991
 8016834:	08016991 	.word	0x08016991
 8016838:	08016991 	.word	0x08016991
 801683c:	08016991 	.word	0x08016991
 8016840:	08016991 	.word	0x08016991
 8016844:	08016991 	.word	0x08016991
 8016848:	08016995 	.word	0x08016995
 801684c:	08016991 	.word	0x08016991
 8016850:	08016991 	.word	0x08016991
 8016854:	08016991 	.word	0x08016991
 8016858:	08016991 	.word	0x08016991
 801685c:	08016991 	.word	0x08016991
 8016860:	08016991 	.word	0x08016991
 8016864:	08016991 	.word	0x08016991
 8016868:	08016991 	.word	0x08016991
 801686c:	08016991 	.word	0x08016991
 8016870:	08016991 	.word	0x08016991
 8016874:	08016991 	.word	0x08016991
 8016878:	08016991 	.word	0x08016991
 801687c:	08016991 	.word	0x08016991
 8016880:	08016991 	.word	0x08016991
 8016884:	080168df 	.word	0x080168df
 8016888:	08016991 	.word	0x08016991
 801688c:	08016991 	.word	0x08016991
 8016890:	08016991 	.word	0x08016991
 8016894:	08016991 	.word	0x08016991
 8016898:	08016991 	.word	0x08016991
 801689c:	08016991 	.word	0x08016991
 80168a0:	08016991 	.word	0x08016991
 80168a4:	08016991 	.word	0x08016991
 80168a8:	08016991 	.word	0x08016991
 80168ac:	080168d5 	.word	0x080168d5
		case 'V':
			if (plen !=2) return 1;
 80168b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80168b2:	2b02      	cmp	r3, #2
 80168b4:	d001      	beq.n	80168ba <process_frame_cmd+0x34a>
 80168b6:	2301      	movs	r3, #1
 80168b8:	e07f      	b.n	80169ba <process_frame_cmd+0x44a>
			memcpy(&s, param, sizeof(s));
 80168ba:	683b      	ldr	r3, [r7, #0]
 80168bc:	881b      	ldrh	r3, [r3, #0]
 80168be:	b29b      	uxth	r3, r3
 80168c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		    train_set_target_speed(num, s);
 80168c2:	79bb      	ldrb	r3, [r7, #6]
 80168c4:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80168c8:	4611      	mov	r1, r2
 80168ca:	4618      	mov	r0, r3
 80168cc:	f001 fcc8 	bl	8018260 <train_set_target_speed>
			return 0;
 80168d0:	2300      	movs	r3, #0
 80168d2:	e072      	b.n	80169ba <process_frame_cmd+0x44a>
			break;
		case 'a':
			//task_auto_stop_auto();
			break;
		case 'z':
			rc = 0; // TODO train_reset_pos_estimate(num);
 80168d4:	2300      	movs	r3, #0
 80168d6:	63fb      	str	r3, [r7, #60]	; 0x3c
			return rc;
 80168d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80168da:	b2db      	uxtb	r3, r3
 80168dc:	e06d      	b.n	80169ba <process_frame_cmd+0x44a>
			break;
		case 'p': {
			const train_config_t *tcnf = get_train_cnf(num);
 80168de:	79bb      	ldrb	r3, [r7, #6]
 80168e0:	4618      	mov	r0, r3
 80168e2:	f7ff fb8d 	bl	8016000 <get_train_cnf>
 80168e6:	63b8      	str	r0, [r7, #56]	; 0x38
			if (tcnf) {
 80168e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d02d      	beq.n	801694a <process_frame_cmd+0x3da>
				rc = param_get_value(train_params, (void *)tcnf, (char *)param, &v, &d, &min, &max);
 80168ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80168f2:	f107 031c 	add.w	r3, r7, #28
 80168f6:	9302      	str	r3, [sp, #8]
 80168f8:	f107 0320 	add.w	r3, r7, #32
 80168fc:	9301      	str	r3, [sp, #4]
 80168fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016902:	9300      	str	r3, [sp, #0]
 8016904:	4613      	mov	r3, r2
 8016906:	683a      	ldr	r2, [r7, #0]
 8016908:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801690a:	4830      	ldr	r0, [pc, #192]	; (80169cc <process_frame_cmd+0x45c>)
 801690c:	f7ff fa5b 	bl	8015dc6 <param_get_value>
 8016910:	63f8      	str	r0, [r7, #60]	; 0x3c
				memcpy(rbuf, &v,   sizeof(int32_t)); rbuf += sizeof(int32_t);
 8016912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016916:	601a      	str	r2, [r3, #0]
 8016918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801691a:	3304      	adds	r3, #4
 801691c:	64fb      	str	r3, [r7, #76]	; 0x4c
				memcpy(rbuf, &d,   sizeof(int32_t)); rbuf += sizeof(int32_t);
 801691e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016922:	601a      	str	r2, [r3, #0]
 8016924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016926:	3304      	adds	r3, #4
 8016928:	64fb      	str	r3, [r7, #76]	; 0x4c
				memcpy(rbuf, &min, sizeof(int32_t)); rbuf += sizeof(int32_t);
 801692a:	6a3a      	ldr	r2, [r7, #32]
 801692c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801692e:	601a      	str	r2, [r3, #0]
 8016930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016932:	3304      	adds	r3, #4
 8016934:	64fb      	str	r3, [r7, #76]	; 0x4c
				memcpy(rbuf, &max, sizeof(int32_t)); rbuf += sizeof(int32_t);
 8016936:	69fa      	ldr	r2, [r7, #28]
 8016938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801693a:	601a      	str	r2, [r3, #0]
 801693c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801693e:	3304      	adds	r3, #4
 8016940:	64fb      	str	r3, [r7, #76]	; 0x4c
				*prlen = 4*sizeof(int32_t);
 8016942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016944:	2210      	movs	r2, #16
 8016946:	601a      	str	r2, [r3, #0]
 8016948:	e001      	b.n	801694e <process_frame_cmd+0x3de>
			} else {
				rc = 3;
 801694a:	2303      	movs	r3, #3
 801694c:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			return rc;
 801694e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016950:	b2db      	uxtb	r3, r3
 8016952:	e032      	b.n	80169ba <process_frame_cmd+0x44a>
		}

		case 'P': {
			if (plen < 4+1) return 1;
 8016954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016956:	2b04      	cmp	r3, #4
 8016958:	dc01      	bgt.n	801695e <process_frame_cmd+0x3ee>
 801695a:	2301      	movs	r3, #1
 801695c:	e02d      	b.n	80169ba <process_frame_cmd+0x44a>
			const train_config_t *tcnf = get_train_cnf(num);
 801695e:	79bb      	ldrb	r3, [r7, #6]
 8016960:	4618      	mov	r0, r3
 8016962:	f7ff fb4d 	bl	8016000 <get_train_cnf>
 8016966:	6378      	str	r0, [r7, #52]	; 0x34
			if (tcnf) {
 8016968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801696a:	2b00      	cmp	r3, #0
 801696c:	d00b      	beq.n	8016986 <process_frame_cmd+0x416>
				int32_t v;
				memcpy(&v, param, sizeof(int32_t));
 801696e:	683b      	ldr	r3, [r7, #0]
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	60bb      	str	r3, [r7, #8]
			    rc = param_set_value(train_params, (void *)tcnf, (char *)(param+sizeof(int32_t)), v);
 8016974:	683b      	ldr	r3, [r7, #0]
 8016976:	1d1a      	adds	r2, r3, #4
 8016978:	68bb      	ldr	r3, [r7, #8]
 801697a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801697c:	4813      	ldr	r0, [pc, #76]	; (80169cc <process_frame_cmd+0x45c>)
 801697e:	f7ff fa94 	bl	8015eaa <param_set_value>
 8016982:	63f8      	str	r0, [r7, #60]	; 0x3c
 8016984:	e001      	b.n	801698a <process_frame_cmd+0x41a>
			} else {
				rc = 33;
 8016986:	2321      	movs	r3, #33	; 0x21
 8016988:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			return rc;
 801698a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801698c:	b2db      	uxtb	r3, r3
 801698e:	e014      	b.n	80169ba <process_frame_cmd+0x44a>
		}

		default:
			return 33;
 8016990:	2321      	movs	r3, #33	; 0x21
 8016992:	e012      	b.n	80169ba <process_frame_cmd+0x44a>
			break;
 8016994:	bf00      	nop
		}
		break;
 8016996:	e00f      	b.n	80169b8 <process_frame_cmd+0x448>
	default:
		rbuf[0]=sel;
 8016998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801699a:	79fa      	ldrb	r2, [r7, #7]
 801699c:	701a      	strb	r2, [r3, #0]
		rbuf[1]=num;
 801699e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80169a0:	3301      	adds	r3, #1
 80169a2:	79ba      	ldrb	r2, [r7, #6]
 80169a4:	701a      	strb	r2, [r3, #0]
		rbuf[2]=cmd;
 80169a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80169a8:	3302      	adds	r3, #2
 80169aa:	797a      	ldrb	r2, [r7, #5]
 80169ac:	701a      	strb	r2, [r3, #0]
		*prlen = 3;
 80169ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80169b0:	2203      	movs	r2, #3
 80169b2:	601a      	str	r2, [r3, #0]
		return 5;
 80169b4:	2305      	movs	r3, #5
 80169b6:	e000      	b.n	80169ba <process_frame_cmd+0x44a>
		break;
	}
	return 0;
 80169b8:	2300      	movs	r3, #0
}
 80169ba:	4618      	mov	r0, r3
 80169bc:	3740      	adds	r7, #64	; 0x40
 80169be:	46bd      	mov	sp, r7
 80169c0:	bd80      	pop	{r7, pc}
 80169c2:	bf00      	nop
 80169c4:	200004cc 	.word	0x200004cc
 80169c8:	0801bd0c 	.word	0x0801bd0c
 80169cc:	0801bacc 	.word	0x0801bacc

080169d0 <trainctl_notif>:

static int num_trainctl_notif = 0;

void trainctl_notif(uint8_t sel, uint8_t num, uint8_t cmd, uint8_t *dta, int dtalen)
{
 80169d0:	b580      	push	{r7, lr}
 80169d2:	b084      	sub	sp, #16
 80169d4:	af02      	add	r7, sp, #8
 80169d6:	603b      	str	r3, [r7, #0]
 80169d8:	4603      	mov	r3, r0
 80169da:	71fb      	strb	r3, [r7, #7]
 80169dc:	460b      	mov	r3, r1
 80169de:	71bb      	strb	r3, [r7, #6]
 80169e0:	4613      	mov	r3, r2
 80169e2:	717b      	strb	r3, [r7, #5]
	num_trainctl_notif++;
 80169e4:	4b0a      	ldr	r3, [pc, #40]	; (8016a10 <trainctl_notif+0x40>)
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	3301      	adds	r3, #1
 80169ea:	4a09      	ldr	r2, [pc, #36]	; (8016a10 <trainctl_notif+0x40>)
 80169ec:	6013      	str	r3, [r2, #0]
	if (cli_frame_mode) {
 80169ee:	4b09      	ldr	r3, [pc, #36]	; (8016a14 <trainctl_notif+0x44>)
 80169f0:	781b      	ldrb	r3, [r3, #0]
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d007      	beq.n	8016a06 <trainctl_notif+0x36>
		frame_send_notif(sel, num, cmd, dta, dtalen);
 80169f6:	797a      	ldrb	r2, [r7, #5]
 80169f8:	79b9      	ldrb	r1, [r7, #6]
 80169fa:	79f8      	ldrb	r0, [r7, #7]
 80169fc:	693b      	ldr	r3, [r7, #16]
 80169fe:	9300      	str	r3, [sp, #0]
 8016a00:	683b      	ldr	r3, [r7, #0]
 8016a02:	f000 f891 	bl	8016b28 <frame_send_notif>
	}
}
 8016a06:	bf00      	nop
 8016a08:	3708      	adds	r7, #8
 8016a0a:	46bd      	mov	sp, r7
 8016a0c:	bd80      	pop	{r7, pc}
 8016a0e:	bf00      	nop
 8016a10:	20005370 	.word	0x20005370
 8016a14:	200004cc 	.word	0x200004cc

08016a18 <trainctl_notif2>:

void trainctl_notif2(uint8_t sel, uint8_t num, uint8_t cmd, char *msg, int32_t v1, int32_t v2, int32_t v3)
{
 8016a18:	b580      	push	{r7, lr}
 8016a1a:	b086      	sub	sp, #24
 8016a1c:	af00      	add	r7, sp, #0
 8016a1e:	603b      	str	r3, [r7, #0]
 8016a20:	4603      	mov	r3, r0
 8016a22:	71fb      	strb	r3, [r7, #7]
 8016a24:	460b      	mov	r3, r1
 8016a26:	71bb      	strb	r3, [r7, #6]
 8016a28:	4613      	mov	r3, r2
 8016a2a:	717b      	strb	r3, [r7, #5]
	static frame_msg_t m;
	char *p;
	int i=0;
 8016a2c:	2300      	movs	r3, #0
 8016a2e:	617b      	str	r3, [r7, #20]
	m.frm[i++] = '|';
 8016a30:	697b      	ldr	r3, [r7, #20]
 8016a32:	1c5a      	adds	r2, r3, #1
 8016a34:	617a      	str	r2, [r7, #20]
 8016a36:	4a3a      	ldr	r2, [pc, #232]	; (8016b20 <trainctl_notif2+0x108>)
 8016a38:	4413      	add	r3, r2
 8016a3a:	227c      	movs	r2, #124	; 0x7c
 8016a3c:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = '_';
 8016a3e:	697b      	ldr	r3, [r7, #20]
 8016a40:	1c5a      	adds	r2, r3, #1
 8016a42:	617a      	str	r2, [r7, #20]
 8016a44:	4a36      	ldr	r2, [pc, #216]	; (8016b20 <trainctl_notif2+0x108>)
 8016a46:	4413      	add	r3, r2
 8016a48:	225f      	movs	r2, #95	; 0x5f
 8016a4a:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = 'N';
 8016a4c:	697b      	ldr	r3, [r7, #20]
 8016a4e:	1c5a      	adds	r2, r3, #1
 8016a50:	617a      	str	r2, [r7, #20]
 8016a52:	4a33      	ldr	r2, [pc, #204]	; (8016b20 <trainctl_notif2+0x108>)
 8016a54:	4413      	add	r3, r2
 8016a56:	224e      	movs	r2, #78	; 0x4e
 8016a58:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = sel;
 8016a5a:	697b      	ldr	r3, [r7, #20]
 8016a5c:	1c5a      	adds	r2, r3, #1
 8016a5e:	617a      	str	r2, [r7, #20]
 8016a60:	4a2f      	ldr	r2, [pc, #188]	; (8016b20 <trainctl_notif2+0x108>)
 8016a62:	4413      	add	r3, r2
 8016a64:	79fa      	ldrb	r2, [r7, #7]
 8016a66:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = num;
 8016a68:	697b      	ldr	r3, [r7, #20]
 8016a6a:	1c5a      	adds	r2, r3, #1
 8016a6c:	617a      	str	r2, [r7, #20]
 8016a6e:	4a2c      	ldr	r2, [pc, #176]	; (8016b20 <trainctl_notif2+0x108>)
 8016a70:	4413      	add	r3, r2
 8016a72:	79ba      	ldrb	r2, [r7, #6]
 8016a74:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = cmd;
 8016a76:	697b      	ldr	r3, [r7, #20]
 8016a78:	1c5a      	adds	r2, r3, #1
 8016a7a:	617a      	str	r2, [r7, #20]
 8016a7c:	4a28      	ldr	r2, [pc, #160]	; (8016b20 <trainctl_notif2+0x108>)
 8016a7e:	4413      	add	r3, r2
 8016a80:	797a      	ldrb	r2, [r7, #5]
 8016a82:	709a      	strb	r2, [r3, #2]
	i += strlen(p);
	m.frm[i++]= '/';
	p = itoa(v2, (char *)m.frm+i, 10);
	i += strlen(p);
#else
	memcpy(m.frm+i, &v1, sizeof(int32_t));
 8016a84:	697b      	ldr	r3, [r7, #20]
 8016a86:	4a27      	ldr	r2, [pc, #156]	; (8016b24 <trainctl_notif2+0x10c>)
 8016a88:	4413      	add	r3, r2
 8016a8a:	6a3a      	ldr	r2, [r7, #32]
 8016a8c:	601a      	str	r2, [r3, #0]
	i += sizeof(int32_t);
 8016a8e:	697b      	ldr	r3, [r7, #20]
 8016a90:	3304      	adds	r3, #4
 8016a92:	617b      	str	r3, [r7, #20]
	memcpy(m.frm+i, &v2, sizeof(int32_t));
 8016a94:	697b      	ldr	r3, [r7, #20]
 8016a96:	4a23      	ldr	r2, [pc, #140]	; (8016b24 <trainctl_notif2+0x10c>)
 8016a98:	4413      	add	r3, r2
 8016a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a9c:	601a      	str	r2, [r3, #0]
	i += sizeof(int32_t);
 8016a9e:	697b      	ldr	r3, [r7, #20]
 8016aa0:	3304      	adds	r3, #4
 8016aa2:	617b      	str	r3, [r7, #20]
	memcpy(m.frm+i, &v3, sizeof(int32_t));
 8016aa4:	697b      	ldr	r3, [r7, #20]
 8016aa6:	4a1f      	ldr	r2, [pc, #124]	; (8016b24 <trainctl_notif2+0x10c>)
 8016aa8:	4413      	add	r3, r2
 8016aaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016aac:	601a      	str	r2, [r3, #0]
	i += sizeof(int32_t);
 8016aae:	697b      	ldr	r3, [r7, #20]
 8016ab0:	3304      	adds	r3, #4
 8016ab2:	617b      	str	r3, [r7, #20]
 	p = strncpy((char *)m.frm+i, msg, 10);
 8016ab4:	697b      	ldr	r3, [r7, #20]
 8016ab6:	4a1b      	ldr	r2, [pc, #108]	; (8016b24 <trainctl_notif2+0x10c>)
 8016ab8:	4413      	add	r3, r2
 8016aba:	220a      	movs	r2, #10
 8016abc:	6839      	ldr	r1, [r7, #0]
 8016abe:	4618      	mov	r0, r3
 8016ac0:	f002 fcb4 	bl	801942c <strncpy>
 8016ac4:	6138      	str	r0, [r7, #16]
	m.frm[i+10]='\0';
 8016ac6:	697b      	ldr	r3, [r7, #20]
 8016ac8:	330a      	adds	r3, #10
 8016aca:	4a15      	ldr	r2, [pc, #84]	; (8016b20 <trainctl_notif2+0x108>)
 8016acc:	4413      	add	r3, r2
 8016ace:	2200      	movs	r2, #0
 8016ad0:	709a      	strb	r2, [r3, #2]
	i += strlen(p);
 8016ad2:	6938      	ldr	r0, [r7, #16]
 8016ad4:	f7e9 fb86 	bl	80001e4 <strlen>
 8016ad8:	4602      	mov	r2, r0
 8016ada:	697b      	ldr	r3, [r7, #20]
 8016adc:	4413      	add	r3, r2
 8016ade:	617b      	str	r3, [r7, #20]
#endif
	m.frm[i++]= '\0';
 8016ae0:	697b      	ldr	r3, [r7, #20]
 8016ae2:	1c5a      	adds	r2, r3, #1
 8016ae4:	617a      	str	r2, [r7, #20]
 8016ae6:	4a0e      	ldr	r2, [pc, #56]	; (8016b20 <trainctl_notif2+0x108>)
 8016ae8:	4413      	add	r3, r2
 8016aea:	2200      	movs	r2, #0
 8016aec:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = '|';
 8016aee:	697b      	ldr	r3, [r7, #20]
 8016af0:	1c5a      	adds	r2, r3, #1
 8016af2:	617a      	str	r2, [r7, #20]
 8016af4:	4a0a      	ldr	r2, [pc, #40]	; (8016b20 <trainctl_notif2+0x108>)
 8016af6:	4413      	add	r3, r2
 8016af8:	227c      	movs	r2, #124	; 0x7c
 8016afa:	709a      	strb	r2, [r3, #2]
	int l = frm_escape(m.frm, i, FRM_MAX_LEN);
 8016afc:	221f      	movs	r2, #31
 8016afe:	6979      	ldr	r1, [r7, #20]
 8016b00:	4808      	ldr	r0, [pc, #32]	; (8016b24 <trainctl_notif2+0x10c>)
 8016b02:	f7ff fbb8 	bl	8016276 <frm_escape>
 8016b06:	60f8      	str	r0, [r7, #12]
	if (l>0) txframe_send_notif(&m, l);
 8016b08:	68fb      	ldr	r3, [r7, #12]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	dd03      	ble.n	8016b16 <trainctl_notif2+0xfe>
 8016b0e:	68f9      	ldr	r1, [r7, #12]
 8016b10:	4803      	ldr	r0, [pc, #12]	; (8016b20 <trainctl_notif2+0x108>)
 8016b12:	f7ff fad0 	bl	80160b6 <txframe_send_notif>
}
 8016b16:	bf00      	nop
 8016b18:	3718      	adds	r7, #24
 8016b1a:	46bd      	mov	sp, r7
 8016b1c:	bd80      	pop	{r7, pc}
 8016b1e:	bf00      	nop
 8016b20:	20005374 	.word	0x20005374
 8016b24:	20005376 	.word	0x20005376

08016b28 <frame_send_notif>:


void frame_send_notif(uint8_t sel, uint8_t num, uint8_t cmd, uint8_t *dta, int dtalen)
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b084      	sub	sp, #16
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	603b      	str	r3, [r7, #0]
 8016b30:	4603      	mov	r3, r0
 8016b32:	71fb      	strb	r3, [r7, #7]
 8016b34:	460b      	mov	r3, r1
 8016b36:	71bb      	strb	r3, [r7, #6]
 8016b38:	4613      	mov	r3, r2
 8016b3a:	717b      	strb	r3, [r7, #5]
	static frame_msg_t m;
	if (dtalen>FRM_MAX_LEN-8) dtalen=FRM_MAX_LEN-8;
 8016b3c:	69bb      	ldr	r3, [r7, #24]
 8016b3e:	2b17      	cmp	r3, #23
 8016b40:	dd01      	ble.n	8016b46 <frame_send_notif+0x1e>
 8016b42:	2317      	movs	r3, #23
 8016b44:	61bb      	str	r3, [r7, #24]
	int i=0;
 8016b46:	2300      	movs	r3, #0
 8016b48:	60fb      	str	r3, [r7, #12]
	m.frm[i++] = '|';
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	1c5a      	adds	r2, r3, #1
 8016b4e:	60fa      	str	r2, [r7, #12]
 8016b50:	4a25      	ldr	r2, [pc, #148]	; (8016be8 <frame_send_notif+0xc0>)
 8016b52:	4413      	add	r3, r2
 8016b54:	227c      	movs	r2, #124	; 0x7c
 8016b56:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = '_';
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	1c5a      	adds	r2, r3, #1
 8016b5c:	60fa      	str	r2, [r7, #12]
 8016b5e:	4a22      	ldr	r2, [pc, #136]	; (8016be8 <frame_send_notif+0xc0>)
 8016b60:	4413      	add	r3, r2
 8016b62:	225f      	movs	r2, #95	; 0x5f
 8016b64:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = 'N';
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	1c5a      	adds	r2, r3, #1
 8016b6a:	60fa      	str	r2, [r7, #12]
 8016b6c:	4a1e      	ldr	r2, [pc, #120]	; (8016be8 <frame_send_notif+0xc0>)
 8016b6e:	4413      	add	r3, r2
 8016b70:	224e      	movs	r2, #78	; 0x4e
 8016b72:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = sel;
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	1c5a      	adds	r2, r3, #1
 8016b78:	60fa      	str	r2, [r7, #12]
 8016b7a:	4a1b      	ldr	r2, [pc, #108]	; (8016be8 <frame_send_notif+0xc0>)
 8016b7c:	4413      	add	r3, r2
 8016b7e:	79fa      	ldrb	r2, [r7, #7]
 8016b80:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = num;
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	1c5a      	adds	r2, r3, #1
 8016b86:	60fa      	str	r2, [r7, #12]
 8016b88:	4a17      	ldr	r2, [pc, #92]	; (8016be8 <frame_send_notif+0xc0>)
 8016b8a:	4413      	add	r3, r2
 8016b8c:	79ba      	ldrb	r2, [r7, #6]
 8016b8e:	709a      	strb	r2, [r3, #2]
	m.frm[i++] = cmd;
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	1c5a      	adds	r2, r3, #1
 8016b94:	60fa      	str	r2, [r7, #12]
 8016b96:	4a14      	ldr	r2, [pc, #80]	; (8016be8 <frame_send_notif+0xc0>)
 8016b98:	4413      	add	r3, r2
 8016b9a:	797a      	ldrb	r2, [r7, #5]
 8016b9c:	709a      	strb	r2, [r3, #2]
	memcpy(m.frm+i, dta, dtalen);
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	4a12      	ldr	r2, [pc, #72]	; (8016bec <frame_send_notif+0xc4>)
 8016ba2:	4413      	add	r3, r2
 8016ba4:	69ba      	ldr	r2, [r7, #24]
 8016ba6:	6839      	ldr	r1, [r7, #0]
 8016ba8:	4618      	mov	r0, r3
 8016baa:	f002 fb73 	bl	8019294 <memcpy>
	i += dtalen;
 8016bae:	68fa      	ldr	r2, [r7, #12]
 8016bb0:	69bb      	ldr	r3, [r7, #24]
 8016bb2:	4413      	add	r3, r2
 8016bb4:	60fb      	str	r3, [r7, #12]
	m.frm[i++] = '|';
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	1c5a      	adds	r2, r3, #1
 8016bba:	60fa      	str	r2, [r7, #12]
 8016bbc:	4a0a      	ldr	r2, [pc, #40]	; (8016be8 <frame_send_notif+0xc0>)
 8016bbe:	4413      	add	r3, r2
 8016bc0:	227c      	movs	r2, #124	; 0x7c
 8016bc2:	709a      	strb	r2, [r3, #2]
	int l = frm_escape(m.frm, i, FRM_MAX_LEN);
 8016bc4:	221f      	movs	r2, #31
 8016bc6:	68f9      	ldr	r1, [r7, #12]
 8016bc8:	4808      	ldr	r0, [pc, #32]	; (8016bec <frame_send_notif+0xc4>)
 8016bca:	f7ff fb54 	bl	8016276 <frm_escape>
 8016bce:	60b8      	str	r0, [r7, #8]
	if (l>0) txframe_send_notif(&m, l);
 8016bd0:	68bb      	ldr	r3, [r7, #8]
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	dd03      	ble.n	8016bde <frame_send_notif+0xb6>
 8016bd6:	68b9      	ldr	r1, [r7, #8]
 8016bd8:	4803      	ldr	r0, [pc, #12]	; (8016be8 <frame_send_notif+0xc0>)
 8016bda:	f7ff fa6c 	bl	80160b6 <txframe_send_notif>
}
 8016bde:	bf00      	nop
 8016be0:	3710      	adds	r7, #16
 8016be2:	46bd      	mov	sp, r7
 8016be4:	bd80      	pop	{r7, pc}
 8016be6:	bf00      	nop
 8016be8:	20005398 	.word	0x20005398
 8016bec:	2000539a 	.word	0x2000539a

08016bf0 <txframe_send_msg64>:

static void txframe_send_msg64(msg_64_t *msg)
{
 8016bf0:	b580      	push	{r7, lr}
 8016bf2:	b084      	sub	sp, #16
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	6078      	str	r0, [r7, #4]
    static frame_msg_t m;
    //int dtalen = 8;
    int i=0;
 8016bf8:	2300      	movs	r3, #0
 8016bfa:	60fb      	str	r3, [r7, #12]
    m.frm[i++] = '|';
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	1c5a      	adds	r2, r3, #1
 8016c00:	60fa      	str	r2, [r7, #12]
 8016c02:	4a39      	ldr	r2, [pc, #228]	; (8016ce8 <txframe_send_msg64+0xf8>)
 8016c04:	4413      	add	r3, r2
 8016c06:	227c      	movs	r2, #124	; 0x7c
 8016c08:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = '_';
 8016c0a:	68fb      	ldr	r3, [r7, #12]
 8016c0c:	1c5a      	adds	r2, r3, #1
 8016c0e:	60fa      	str	r2, [r7, #12]
 8016c10:	4a35      	ldr	r2, [pc, #212]	; (8016ce8 <txframe_send_msg64+0xf8>)
 8016c12:	4413      	add	r3, r2
 8016c14:	225f      	movs	r2, #95	; 0x5f
 8016c16:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = '6';
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	1c5a      	adds	r2, r3, #1
 8016c1c:	60fa      	str	r2, [r7, #12]
 8016c1e:	4a32      	ldr	r2, [pc, #200]	; (8016ce8 <txframe_send_msg64+0xf8>)
 8016c20:	4413      	add	r3, r2
 8016c22:	2236      	movs	r2, #54	; 0x36
 8016c24:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->to;
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	1c5a      	adds	r2, r3, #1
 8016c2a:	60fa      	str	r2, [r7, #12]
 8016c2c:	687a      	ldr	r2, [r7, #4]
 8016c2e:	7811      	ldrb	r1, [r2, #0]
 8016c30:	4a2d      	ldr	r2, [pc, #180]	; (8016ce8 <txframe_send_msg64+0xf8>)
 8016c32:	4413      	add	r3, r2
 8016c34:	460a      	mov	r2, r1
 8016c36:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->from;
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	1c5a      	adds	r2, r3, #1
 8016c3c:	60fa      	str	r2, [r7, #12]
 8016c3e:	687a      	ldr	r2, [r7, #4]
 8016c40:	7851      	ldrb	r1, [r2, #1]
 8016c42:	4a29      	ldr	r2, [pc, #164]	; (8016ce8 <txframe_send_msg64+0xf8>)
 8016c44:	4413      	add	r3, r2
 8016c46:	460a      	mov	r2, r1
 8016c48:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[0];
 8016c4a:	68fb      	ldr	r3, [r7, #12]
 8016c4c:	1c5a      	adds	r2, r3, #1
 8016c4e:	60fa      	str	r2, [r7, #12]
 8016c50:	687a      	ldr	r2, [r7, #4]
 8016c52:	7891      	ldrb	r1, [r2, #2]
 8016c54:	4a24      	ldr	r2, [pc, #144]	; (8016ce8 <txframe_send_msg64+0xf8>)
 8016c56:	4413      	add	r3, r2
 8016c58:	460a      	mov	r2, r1
 8016c5a:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[1];
 8016c5c:	68fb      	ldr	r3, [r7, #12]
 8016c5e:	1c5a      	adds	r2, r3, #1
 8016c60:	60fa      	str	r2, [r7, #12]
 8016c62:	687a      	ldr	r2, [r7, #4]
 8016c64:	78d1      	ldrb	r1, [r2, #3]
 8016c66:	4a20      	ldr	r2, [pc, #128]	; (8016ce8 <txframe_send_msg64+0xf8>)
 8016c68:	4413      	add	r3, r2
 8016c6a:	460a      	mov	r2, r1
 8016c6c:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[2];
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	1c5a      	adds	r2, r3, #1
 8016c72:	60fa      	str	r2, [r7, #12]
 8016c74:	687a      	ldr	r2, [r7, #4]
 8016c76:	7911      	ldrb	r1, [r2, #4]
 8016c78:	4a1b      	ldr	r2, [pc, #108]	; (8016ce8 <txframe_send_msg64+0xf8>)
 8016c7a:	4413      	add	r3, r2
 8016c7c:	460a      	mov	r2, r1
 8016c7e:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[3];
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	1c5a      	adds	r2, r3, #1
 8016c84:	60fa      	str	r2, [r7, #12]
 8016c86:	687a      	ldr	r2, [r7, #4]
 8016c88:	7951      	ldrb	r1, [r2, #5]
 8016c8a:	4a17      	ldr	r2, [pc, #92]	; (8016ce8 <txframe_send_msg64+0xf8>)
 8016c8c:	4413      	add	r3, r2
 8016c8e:	460a      	mov	r2, r1
 8016c90:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[4];
 8016c92:	68fb      	ldr	r3, [r7, #12]
 8016c94:	1c5a      	adds	r2, r3, #1
 8016c96:	60fa      	str	r2, [r7, #12]
 8016c98:	687a      	ldr	r2, [r7, #4]
 8016c9a:	7991      	ldrb	r1, [r2, #6]
 8016c9c:	4a12      	ldr	r2, [pc, #72]	; (8016ce8 <txframe_send_msg64+0xf8>)
 8016c9e:	4413      	add	r3, r2
 8016ca0:	460a      	mov	r2, r1
 8016ca2:	709a      	strb	r2, [r3, #2]
    m.frm[i++] = msg->rbytes[5];
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	1c5a      	adds	r2, r3, #1
 8016ca8:	60fa      	str	r2, [r7, #12]
 8016caa:	687a      	ldr	r2, [r7, #4]
 8016cac:	79d1      	ldrb	r1, [r2, #7]
 8016cae:	4a0e      	ldr	r2, [pc, #56]	; (8016ce8 <txframe_send_msg64+0xf8>)
 8016cb0:	4413      	add	r3, r2
 8016cb2:	460a      	mov	r2, r1
 8016cb4:	709a      	strb	r2, [r3, #2]
    //memcpy(m.frm+i, dta, dtalen);
    //i += dtalen;
    m.frm[i++] = '|';
 8016cb6:	68fb      	ldr	r3, [r7, #12]
 8016cb8:	1c5a      	adds	r2, r3, #1
 8016cba:	60fa      	str	r2, [r7, #12]
 8016cbc:	4a0a      	ldr	r2, [pc, #40]	; (8016ce8 <txframe_send_msg64+0xf8>)
 8016cbe:	4413      	add	r3, r2
 8016cc0:	227c      	movs	r2, #124	; 0x7c
 8016cc2:	709a      	strb	r2, [r3, #2]
    int l = frm_escape(m.frm, i, FRM_MAX_LEN);
 8016cc4:	221f      	movs	r2, #31
 8016cc6:	68f9      	ldr	r1, [r7, #12]
 8016cc8:	4808      	ldr	r0, [pc, #32]	; (8016cec <txframe_send_msg64+0xfc>)
 8016cca:	f7ff fad4 	bl	8016276 <frm_escape>
 8016cce:	60b8      	str	r0, [r7, #8]
    if (l>0) txframe_send_notif(&m, l);
 8016cd0:	68bb      	ldr	r3, [r7, #8]
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	dd03      	ble.n	8016cde <txframe_send_msg64+0xee>
 8016cd6:	68b9      	ldr	r1, [r7, #8]
 8016cd8:	4803      	ldr	r0, [pc, #12]	; (8016ce8 <txframe_send_msg64+0xf8>)
 8016cda:	f7ff f9ec 	bl	80160b6 <txframe_send_notif>
}
 8016cde:	bf00      	nop
 8016ce0:	3710      	adds	r7, #16
 8016ce2:	46bd      	mov	sp, r7
 8016ce4:	bd80      	pop	{r7, pc}
 8016ce6:	bf00      	nop
 8016ce8:	200053bc 	.word	0x200053bc
 8016cec:	200053be 	.word	0x200053be

08016cf0 <frame_gather_stat>:



// buf should be long enough to store a int32_t with escape, so 8 bytes
int frame_gather_stat(int step, uint8_t *buf)
{
 8016cf0:	b580      	push	{r7, lr}
 8016cf2:	b086      	sub	sp, #24
 8016cf4:	af00      	add	r7, sp, #0
 8016cf6:	6078      	str	r0, [r7, #4]
 8016cf8:	6039      	str	r1, [r7, #0]
	// int32_t stat_val_get(int step);
	int done;
	int32_t v = stat_val_get(step, &done);
 8016cfa:	f107 0310 	add.w	r3, r7, #16
 8016cfe:	4619      	mov	r1, r3
 8016d00:	6878      	ldr	r0, [r7, #4]
 8016d02:	f7ff f9c9 	bl	8016098 <stat_val_get>
 8016d06:	4603      	mov	r3, r0
 8016d08:	60fb      	str	r3, [r7, #12]
	if (done) return 0;
 8016d0a:	693b      	ldr	r3, [r7, #16]
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d001      	beq.n	8016d14 <frame_gather_stat+0x24>
 8016d10:	2300      	movs	r3, #0
 8016d12:	e00e      	b.n	8016d32 <frame_gather_stat+0x42>

	int l = _frm_escape2(buf, (void *) &v, 4, 8);
 8016d14:	f107 010c 	add.w	r1, r7, #12
 8016d18:	2308      	movs	r3, #8
 8016d1a:	2204      	movs	r2, #4
 8016d1c:	6838      	ldr	r0, [r7, #0]
 8016d1e:	f7ff fa63 	bl	80161e8 <_frm_escape2>
 8016d22:	6178      	str	r0, [r7, #20]
	if (l<0) {
 8016d24:	697b      	ldr	r3, [r7, #20]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	da02      	bge.n	8016d30 <frame_gather_stat+0x40>
		return -1;
 8016d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d2e:	e000      	b.n	8016d32 <frame_gather_stat+0x42>
	}
	return l;
 8016d30:	697b      	ldr	r3, [r7, #20]
}
 8016d32:	4618      	mov	r0, r3
 8016d34:	3718      	adds	r7, #24
 8016d36:	46bd      	mov	sp, r7
 8016d38:	bd80      	pop	{r7, pc}

08016d3a <frame_send_stat>:

void frame_send_stat(void(*cb)(uint8_t *d, int l), uint32_t tick)
{
 8016d3a:	b580      	push	{r7, lr}
 8016d3c:	b086      	sub	sp, #24
 8016d3e:	af00      	add	r7, sp, #0
 8016d40:	6078      	str	r0, [r7, #4]
 8016d42:	6039      	str	r1, [r7, #0]
    uint8_t buf[8];
    //if ((1)) tick = 0xAA55AA55;
    int l = _frm_escape2(buf, (void *) &tick, 4, 8);
 8016d44:	4639      	mov	r1, r7
 8016d46:	f107 0008 	add.w	r0, r7, #8
 8016d4a:	2308      	movs	r3, #8
 8016d4c:	2204      	movs	r2, #4
 8016d4e:	f7ff fa4b 	bl	80161e8 <_frm_escape2>
 8016d52:	6138      	str	r0, [r7, #16]
    cb(buf, l);
 8016d54:	f107 0208 	add.w	r2, r7, #8
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	6939      	ldr	r1, [r7, #16]
 8016d5c:	4610      	mov	r0, r2
 8016d5e:	4798      	blx	r3

	int i;
	for (i=0; ; i++) {
 8016d60:	2300      	movs	r3, #0
 8016d62:	617b      	str	r3, [r7, #20]
		l = frame_gather_stat(i, buf);
 8016d64:	f107 0308 	add.w	r3, r7, #8
 8016d68:	4619      	mov	r1, r3
 8016d6a:	6978      	ldr	r0, [r7, #20]
 8016d6c:	f7ff ffc0 	bl	8016cf0 <frame_gather_stat>
 8016d70:	6138      	str	r0, [r7, #16]
		if (l<=0) {
 8016d72:	693b      	ldr	r3, [r7, #16]
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	dd09      	ble.n	8016d8c <frame_send_stat+0x52>
			return;
		}
		cb(buf, l);
 8016d78:	f107 0208 	add.w	r2, r7, #8
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	6939      	ldr	r1, [r7, #16]
 8016d80:	4610      	mov	r0, r2
 8016d82:	4798      	blx	r3
	for (i=0; ; i++) {
 8016d84:	697b      	ldr	r3, [r7, #20]
 8016d86:	3301      	adds	r3, #1
 8016d88:	617b      	str	r3, [r7, #20]
		l = frame_gather_stat(i, buf);
 8016d8a:	e7eb      	b.n	8016d64 <frame_send_stat+0x2a>
			return;
 8016d8c:	bf00      	nop
	}
}
 8016d8e:	3718      	adds	r7, #24
 8016d90:	46bd      	mov	sp, r7
 8016d92:	bd80      	pop	{r7, pc}

08016d94 <itm_debug1>:
//void _itm_debug1(const char *msg, int v);
//void _itm_debug2(const char *msg, int v1, int v2);
void _itm_debug3(const char *msg, int v1, int v2, int v3, int n);

static inline void itm_debug1(uint32_t f, const char *msg, int v)
{
 8016d94:	b580      	push	{r7, lr}
 8016d96:	b086      	sub	sp, #24
 8016d98:	af02      	add	r7, sp, #8
 8016d9a:	60f8      	str	r0, [r7, #12]
 8016d9c:	60b9      	str	r1, [r7, #8]
 8016d9e:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8016da0:	4b08      	ldr	r3, [pc, #32]	; (8016dc4 <itm_debug1+0x30>)
 8016da2:	681a      	ldr	r2, [r3, #0]
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	4013      	ands	r3, r2
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d007      	beq.n	8016dbc <itm_debug1+0x28>
 8016dac:	2301      	movs	r3, #1
 8016dae:	9300      	str	r3, [sp, #0]
 8016db0:	2300      	movs	r3, #0
 8016db2:	2200      	movs	r2, #0
 8016db4:	6879      	ldr	r1, [r7, #4]
 8016db6:	68b8      	ldr	r0, [r7, #8]
 8016db8:	f002 f856 	bl	8018e68 <_itm_debug3>
}
 8016dbc:	bf00      	nop
 8016dbe:	3710      	adds	r7, #16
 8016dc0:	46bd      	mov	sp, r7
 8016dc2:	bd80      	pop	{r7, pc}
 8016dc4:	200005a4 	.word	0x200005a4

08016dc8 <itm_debug2>:
static inline void itm_debug2(uint32_t f, const char *msg, int v1, int v2)
{
 8016dc8:	b580      	push	{r7, lr}
 8016dca:	b086      	sub	sp, #24
 8016dcc:	af02      	add	r7, sp, #8
 8016dce:	60f8      	str	r0, [r7, #12]
 8016dd0:	60b9      	str	r1, [r7, #8]
 8016dd2:	607a      	str	r2, [r7, #4]
 8016dd4:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8016dd6:	4b09      	ldr	r3, [pc, #36]	; (8016dfc <itm_debug2+0x34>)
 8016dd8:	681a      	ldr	r2, [r3, #0]
 8016dda:	68fb      	ldr	r3, [r7, #12]
 8016ddc:	4013      	ands	r3, r2
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d007      	beq.n	8016df2 <itm_debug2+0x2a>
 8016de2:	2302      	movs	r3, #2
 8016de4:	9300      	str	r3, [sp, #0]
 8016de6:	2300      	movs	r3, #0
 8016de8:	683a      	ldr	r2, [r7, #0]
 8016dea:	6879      	ldr	r1, [r7, #4]
 8016dec:	68b8      	ldr	r0, [r7, #8]
 8016dee:	f002 f83b 	bl	8018e68 <_itm_debug3>
}
 8016df2:	bf00      	nop
 8016df4:	3710      	adds	r7, #16
 8016df6:	46bd      	mov	sp, r7
 8016df8:	bd80      	pop	{r7, pc}
 8016dfa:	bf00      	nop
 8016dfc:	200005a4 	.word	0x200005a4

08016e00 <itm_debug3>:
static inline void itm_debug3(uint32_t f, const char *msg, int v1, int v2, int v3)
{
 8016e00:	b580      	push	{r7, lr}
 8016e02:	b086      	sub	sp, #24
 8016e04:	af02      	add	r7, sp, #8
 8016e06:	60f8      	str	r0, [r7, #12]
 8016e08:	60b9      	str	r1, [r7, #8]
 8016e0a:	607a      	str	r2, [r7, #4]
 8016e0c:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 8016e0e:	4b09      	ldr	r3, [pc, #36]	; (8016e34 <itm_debug3+0x34>)
 8016e10:	681a      	ldr	r2, [r3, #0]
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	4013      	ands	r3, r2
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d007      	beq.n	8016e2a <itm_debug3+0x2a>
 8016e1a:	2303      	movs	r3, #3
 8016e1c:	9300      	str	r3, [sp, #0]
 8016e1e:	69bb      	ldr	r3, [r7, #24]
 8016e20:	683a      	ldr	r2, [r7, #0]
 8016e22:	6879      	ldr	r1, [r7, #4]
 8016e24:	68b8      	ldr	r0, [r7, #8]
 8016e26:	f002 f81f 	bl	8018e68 <_itm_debug3>
}
 8016e2a:	bf00      	nop
 8016e2c:	3710      	adds	r7, #16
 8016e2e:	46bd      	mov	sp, r7
 8016e30:	bd80      	pop	{r7, pc}
 8016e32:	bf00      	nop
 8016e34:	200005a4 	.word	0x200005a4

08016e38 <msg_error>:
		{MA_ADDR_MASK_5,						MA_ADDR_5_CTRL,			5}

};

static void msg_error(_UNUSED_ const char *msg)
{
 8016e38:	b480      	push	{r7}
 8016e3a:	b083      	sub	sp, #12
 8016e3c:	af00      	add	r7, sp, #0
 8016e3e:	6078      	str	r0, [r7, #4]

}
 8016e40:	bf00      	nop
 8016e42:	370c      	adds	r7, #12
 8016e44:	46bd      	mov	sp, r7
 8016e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e4a:	4770      	bx	lr

08016e4c <dispatch_m64>:


static void dispatch_m64(msg_64_t *m, int f)
{
 8016e4c:	b580      	push	{r7, lr}
 8016e4e:	b086      	sub	sp, #24
 8016e50:	af00      	add	r7, sp, #0
 8016e52:	6078      	str	r0, [r7, #4]
 8016e54:	6039      	str	r1, [r7, #0]
    if (m->to == MA_BROADCAST) {
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	781b      	ldrb	r3, [r3, #0]
 8016e5a:	2bff      	cmp	r3, #255	; 0xff
 8016e5c:	d11d      	bne.n	8016e9a <dispatch_m64+0x4e>
        for (int i=0; i<NQDEF; i++) {
 8016e5e:	2300      	movs	r3, #0
 8016e60:	617b      	str	r3, [r7, #20]
 8016e62:	e016      	b.n	8016e92 <dispatch_m64+0x46>
            if (i == f) {
 8016e64:	697a      	ldr	r2, [r7, #20]
 8016e66:	683b      	ldr	r3, [r7, #0]
 8016e68:	429a      	cmp	r2, r3
 8016e6a:	d00c      	beq.n	8016e86 <dispatch_m64+0x3a>
                continue;
            }
            mqf_t *q = qdef[i].to;
 8016e6c:	4a32      	ldr	r2, [pc, #200]	; (8016f38 <dispatch_m64+0xec>)
 8016e6e:	697b      	ldr	r3, [r7, #20]
 8016e70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8016e74:	60bb      	str	r3, [r7, #8]
            if (!q) continue;
 8016e76:	68bb      	ldr	r3, [r7, #8]
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d006      	beq.n	8016e8a <dispatch_m64+0x3e>
            mqf_write(q, m);
 8016e7c:	6879      	ldr	r1, [r7, #4]
 8016e7e:	68b8      	ldr	r0, [r7, #8]
 8016e80:	f002 f8f8 	bl	8019074 <mqf_write>
 8016e84:	e002      	b.n	8016e8c <dispatch_m64+0x40>
                continue;
 8016e86:	bf00      	nop
 8016e88:	e000      	b.n	8016e8c <dispatch_m64+0x40>
            if (!q) continue;
 8016e8a:	bf00      	nop
        for (int i=0; i<NQDEF; i++) {
 8016e8c:	697b      	ldr	r3, [r7, #20]
 8016e8e:	3301      	adds	r3, #1
 8016e90:	617b      	str	r3, [r7, #20]
 8016e92:	697b      	ldr	r3, [r7, #20]
 8016e94:	2b08      	cmp	r3, #8
 8016e96:	dde5      	ble.n	8016e64 <dispatch_m64+0x18>
        }
        return;
 8016e98:	e04b      	b.n	8016f32 <dispatch_m64+0xe6>
    }
	for (int i=0; i<NROUTES; i++) {
 8016e9a:	2300      	movs	r3, #0
 8016e9c:	613b      	str	r3, [r7, #16]
 8016e9e:	e03b      	b.n	8016f18 <dispatch_m64+0xcc>
		if ((m->to & routes[i].mask) == routes[i].value) {
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	7819      	ldrb	r1, [r3, #0]
 8016ea4:	4825      	ldr	r0, [pc, #148]	; (8016f3c <dispatch_m64+0xf0>)
 8016ea6:	693a      	ldr	r2, [r7, #16]
 8016ea8:	4613      	mov	r3, r2
 8016eaa:	005b      	lsls	r3, r3, #1
 8016eac:	4413      	add	r3, r2
 8016eae:	4403      	add	r3, r0
 8016eb0:	781b      	ldrb	r3, [r3, #0]
 8016eb2:	400b      	ands	r3, r1
 8016eb4:	b2d9      	uxtb	r1, r3
 8016eb6:	4821      	ldr	r0, [pc, #132]	; (8016f3c <dispatch_m64+0xf0>)
 8016eb8:	693a      	ldr	r2, [r7, #16]
 8016eba:	4613      	mov	r3, r2
 8016ebc:	005b      	lsls	r3, r3, #1
 8016ebe:	4413      	add	r3, r2
 8016ec0:	4403      	add	r3, r0
 8016ec2:	3301      	adds	r3, #1
 8016ec4:	781b      	ldrb	r3, [r3, #0]
 8016ec6:	4299      	cmp	r1, r3
 8016ec8:	d123      	bne.n	8016f12 <dispatch_m64+0xc6>
			if (f==routes[i].destq) {
 8016eca:	491c      	ldr	r1, [pc, #112]	; (8016f3c <dispatch_m64+0xf0>)
 8016ecc:	693a      	ldr	r2, [r7, #16]
 8016ece:	4613      	mov	r3, r2
 8016ed0:	005b      	lsls	r3, r3, #1
 8016ed2:	4413      	add	r3, r2
 8016ed4:	440b      	add	r3, r1
 8016ed6:	3302      	adds	r3, #2
 8016ed8:	781b      	ldrb	r3, [r3, #0]
 8016eda:	461a      	mov	r2, r3
 8016edc:	683b      	ldr	r3, [r7, #0]
 8016ede:	4293      	cmp	r3, r2
 8016ee0:	d105      	bne.n	8016eee <dispatch_m64+0xa2>
				// loop
				itm_debug1(DBG_ERR|DBG_MSG, "loop", f);
 8016ee2:	683a      	ldr	r2, [r7, #0]
 8016ee4:	4916      	ldr	r1, [pc, #88]	; (8016f40 <dispatch_m64+0xf4>)
 8016ee6:	4817      	ldr	r0, [pc, #92]	; (8016f44 <dispatch_m64+0xf8>)
 8016ee8:	f7ff ff54 	bl	8016d94 <itm_debug1>
				return;
 8016eec:	e021      	b.n	8016f32 <dispatch_m64+0xe6>
			}
			mqf_t *q = qdef[routes[i].destq].to;
 8016eee:	4913      	ldr	r1, [pc, #76]	; (8016f3c <dispatch_m64+0xf0>)
 8016ef0:	693a      	ldr	r2, [r7, #16]
 8016ef2:	4613      	mov	r3, r2
 8016ef4:	005b      	lsls	r3, r3, #1
 8016ef6:	4413      	add	r3, r2
 8016ef8:	440b      	add	r3, r1
 8016efa:	3302      	adds	r3, #2
 8016efc:	781b      	ldrb	r3, [r3, #0]
 8016efe:	461a      	mov	r2, r3
 8016f00:	4b0d      	ldr	r3, [pc, #52]	; (8016f38 <dispatch_m64+0xec>)
 8016f02:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8016f06:	60fb      	str	r3, [r7, #12]
			mqf_write(q, m);
 8016f08:	6879      	ldr	r1, [r7, #4]
 8016f0a:	68f8      	ldr	r0, [r7, #12]
 8016f0c:	f002 f8b2 	bl	8019074 <mqf_write>
			return;
 8016f10:	e00f      	b.n	8016f32 <dispatch_m64+0xe6>
	for (int i=0; i<NROUTES; i++) {
 8016f12:	693b      	ldr	r3, [r7, #16]
 8016f14:	3301      	adds	r3, #1
 8016f16:	613b      	str	r3, [r7, #16]
 8016f18:	693b      	ldr	r3, [r7, #16]
 8016f1a:	2b07      	cmp	r3, #7
 8016f1c:	ddc0      	ble.n	8016ea0 <dispatch_m64+0x54>
		}
	}
	itm_debug1(DBG_ERR|DBG_MSG, "no route", m->to);
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	781b      	ldrb	r3, [r3, #0]
 8016f22:	461a      	mov	r2, r3
 8016f24:	4908      	ldr	r1, [pc, #32]	; (8016f48 <dispatch_m64+0xfc>)
 8016f26:	4807      	ldr	r0, [pc, #28]	; (8016f44 <dispatch_m64+0xf8>)
 8016f28:	f7ff ff34 	bl	8016d94 <itm_debug1>
	msg_error("no route");
 8016f2c:	4806      	ldr	r0, [pc, #24]	; (8016f48 <dispatch_m64+0xfc>)
 8016f2e:	f7ff ff83 	bl	8016e38 <msg_error>
}
 8016f32:	3718      	adds	r7, #24
 8016f34:	46bd      	mov	sp, r7
 8016f36:	bd80      	pop	{r7, pc}
 8016f38:	0801bd9c 	.word	0x0801bd9c
 8016f3c:	0801bde4 	.word	0x0801bde4
 8016f40:	08019c60 	.word	0x08019c60
 8016f44:	80000002 	.word	0x80000002
 8016f48:	08019c68 	.word	0x08019c68

08016f4c <msgsrv_tick>:
	itm_debug3(DBG_ERR, "qu", d*100+i, q->maxuse, mqf_len(q));
	q->maxuse = 0;
}

void msgsrv_tick(_UNUSED_ uint32_t notif_flags, _UNUSED_ uint32_t tick, _UNUSED_ uint32_t dt)
{
 8016f4c:	b580      	push	{r7, lr}
 8016f4e:	b08c      	sub	sp, #48	; 0x30
 8016f50:	af02      	add	r7, sp, #8
 8016f52:	60f8      	str	r0, [r7, #12]
 8016f54:	60b9      	str	r1, [r7, #8]
 8016f56:	607a      	str	r2, [r7, #4]
        	itm_debug1(DBG_ERR|DBG_MSG, "bad size", sizeof(msg_64_t));
        	for (;;);
#endif
        }
    }
	for (int i=0; i<NQDEF; i++) {
 8016f58:	2300      	movs	r3, #0
 8016f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8016f5c:	e051      	b.n	8017002 <msgsrv_tick+0xb6>
		mqf_t *q = qdef[i].from;
 8016f5e:	4a2c      	ldr	r2, [pc, #176]	; (8017010 <msgsrv_tick+0xc4>)
 8016f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f62:	00db      	lsls	r3, r3, #3
 8016f64:	4413      	add	r3, r2
 8016f66:	685b      	ldr	r3, [r3, #4]
 8016f68:	623b      	str	r3, [r7, #32]

		itm_debug2(DBG_MSG, "mlen1",i, mqf_len(q));
 8016f6a:	6a38      	ldr	r0, [r7, #32]
 8016f6c:	f002 f826 	bl	8018fbc <mqf_len>
 8016f70:	4603      	mov	r3, r0
 8016f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f74:	4927      	ldr	r1, [pc, #156]	; (8017014 <msgsrv_tick+0xc8>)
 8016f76:	2002      	movs	r0, #2
 8016f78:	f7ff ff26 	bl	8016dc8 <itm_debug2>
		itm_debug3(DBG_MSG, "mth1 ", i, q->head, q->tail);
 8016f7c:	6a3b      	ldr	r3, [r7, #32]
 8016f7e:	881b      	ldrh	r3, [r3, #0]
 8016f80:	b29b      	uxth	r3, r3
 8016f82:	461a      	mov	r2, r3
 8016f84:	6a3b      	ldr	r3, [r7, #32]
 8016f86:	885b      	ldrh	r3, [r3, #2]
 8016f88:	b29b      	uxth	r3, r3
 8016f8a:	9300      	str	r3, [sp, #0]
 8016f8c:	4613      	mov	r3, r2
 8016f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f90:	4921      	ldr	r1, [pc, #132]	; (8017018 <msgsrv_tick+0xcc>)
 8016f92:	2002      	movs	r0, #2
 8016f94:	f7ff ff34 	bl	8016e00 <itm_debug3>
		for (;;) {
				msg_64_t m;
				int rc = mqf_read(q, &m);
 8016f98:	f107 0310 	add.w	r3, r7, #16
 8016f9c:	4619      	mov	r1, r3
 8016f9e:	6a38      	ldr	r0, [r7, #32]
 8016fa0:	f002 f8e2 	bl	8019168 <mqf_read>
 8016fa4:	61f8      	str	r0, [r7, #28]
				if (rc) break;
 8016fa6:	69fb      	ldr	r3, [r7, #28]
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d01a      	beq.n	8016fe2 <msgsrv_tick+0x96>
				if (i==5) {
					itm_debug1(DBG_MSG, "from ctrl", m.cmd);
				}
				dispatch_m64(&m, i);
			}
		itm_debug2(DBG_MSG, "mlen2",i, mqf_len(q));
 8016fac:	6a38      	ldr	r0, [r7, #32]
 8016fae:	f002 f805 	bl	8018fbc <mqf_len>
 8016fb2:	4603      	mov	r3, r0
 8016fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016fb6:	4919      	ldr	r1, [pc, #100]	; (801701c <msgsrv_tick+0xd0>)
 8016fb8:	2002      	movs	r0, #2
 8016fba:	f7ff ff05 	bl	8016dc8 <itm_debug2>
		itm_debug3(DBG_MSG, "mth2 ", i, q->head, q->tail);
 8016fbe:	6a3b      	ldr	r3, [r7, #32]
 8016fc0:	881b      	ldrh	r3, [r3, #0]
 8016fc2:	b29b      	uxth	r3, r3
 8016fc4:	461a      	mov	r2, r3
 8016fc6:	6a3b      	ldr	r3, [r7, #32]
 8016fc8:	885b      	ldrh	r3, [r3, #2]
 8016fca:	b29b      	uxth	r3, r3
 8016fcc:	9300      	str	r3, [sp, #0]
 8016fce:	4613      	mov	r3, r2
 8016fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016fd2:	4913      	ldr	r1, [pc, #76]	; (8017020 <msgsrv_tick+0xd4>)
 8016fd4:	2002      	movs	r0, #2
 8016fd6:	f7ff ff13 	bl	8016e00 <itm_debug3>
	for (int i=0; i<NQDEF; i++) {
 8016fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fdc:	3301      	adds	r3, #1
 8016fde:	627b      	str	r3, [r7, #36]	; 0x24
 8016fe0:	e00f      	b.n	8017002 <msgsrv_tick+0xb6>
				if (i==5) {
 8016fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fe4:	2b05      	cmp	r3, #5
 8016fe6:	d105      	bne.n	8016ff4 <msgsrv_tick+0xa8>
					itm_debug1(DBG_MSG, "from ctrl", m.cmd);
 8016fe8:	7cbb      	ldrb	r3, [r7, #18]
 8016fea:	461a      	mov	r2, r3
 8016fec:	490d      	ldr	r1, [pc, #52]	; (8017024 <msgsrv_tick+0xd8>)
 8016fee:	2002      	movs	r0, #2
 8016ff0:	f7ff fed0 	bl	8016d94 <itm_debug1>
				dispatch_m64(&m, i);
 8016ff4:	f107 0310 	add.w	r3, r7, #16
 8016ff8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016ffa:	4618      	mov	r0, r3
 8016ffc:	f7ff ff26 	bl	8016e4c <dispatch_m64>
		for (;;) {
 8017000:	e7ca      	b.n	8016f98 <msgsrv_tick+0x4c>
	for (int i=0; i<NQDEF; i++) {
 8017002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017004:	2b08      	cmp	r3, #8
 8017006:	ddaa      	ble.n	8016f5e <msgsrv_tick+0x12>
				dump_qusage(i, 1, qdef[i].to);
			}
			last = tick;
		}
	}
}
 8017008:	bf00      	nop
 801700a:	3728      	adds	r7, #40	; 0x28
 801700c:	46bd      	mov	sp, r7
 801700e:	bd80      	pop	{r7, pc}
 8017010:	0801bd9c 	.word	0x0801bd9c
 8017014:	08019c78 	.word	0x08019c78
 8017018:	08019c80 	.word	0x08019c80
 801701c:	08019c88 	.word	0x08019c88
 8017020:	08019c90 	.word	0x08019c90
 8017024:	08019c98 	.word	0x08019c98

08017028 <dump_msg>:


void dump_msg(mqf_t *mq, int n)
{
 8017028:	b580      	push	{r7, lr}
 801702a:	b086      	sub	sp, #24
 801702c:	af02      	add	r7, sp, #8
 801702e:	6078      	str	r0, [r7, #4]
 8017030:	6039      	str	r1, [r7, #0]
	int i = ( n + mq->tail ) % mq->num;
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	885b      	ldrh	r3, [r3, #2]
 8017036:	b29b      	uxth	r3, r3
 8017038:	461a      	mov	r2, r3
 801703a:	683b      	ldr	r3, [r7, #0]
 801703c:	4413      	add	r3, r2
 801703e:	687a      	ldr	r2, [r7, #4]
 8017040:	7952      	ldrb	r2, [r2, #5]
 8017042:	fb93 f1f2 	sdiv	r1, r3, r2
 8017046:	fb02 f201 	mul.w	r2, r2, r1
 801704a:	1a9b      	subs	r3, r3, r2
 801704c:	60fb      	str	r3, [r7, #12]
	msg_64_t *msg = (msg_64_t *) &(mq->msgbuf[i*mq->msgsiz]);
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	689b      	ldr	r3, [r3, #8]
 8017052:	687a      	ldr	r2, [r7, #4]
 8017054:	7912      	ldrb	r2, [r2, #4]
 8017056:	4611      	mov	r1, r2
 8017058:	68fa      	ldr	r2, [r7, #12]
 801705a:	fb02 f201 	mul.w	r2, r2, r1
 801705e:	4413      	add	r3, r2
 8017060:	60bb      	str	r3, [r7, #8]
	itm_debug3(DBG_ERR, "q", i, msg->cmd, msg->from);
 8017062:	68bb      	ldr	r3, [r7, #8]
 8017064:	789b      	ldrb	r3, [r3, #2]
 8017066:	461a      	mov	r2, r3
 8017068:	68bb      	ldr	r3, [r7, #8]
 801706a:	785b      	ldrb	r3, [r3, #1]
 801706c:	9300      	str	r3, [sp, #0]
 801706e:	4613      	mov	r3, r2
 8017070:	68fa      	ldr	r2, [r7, #12]
 8017072:	4904      	ldr	r1, [pc, #16]	; (8017084 <dump_msg+0x5c>)
 8017074:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8017078:	f7ff fec2 	bl	8016e00 <itm_debug3>
}
 801707c:	bf00      	nop
 801707e:	3710      	adds	r7, #16
 8017080:	46bd      	mov	sp, r7
 8017082:	bd80      	pop	{r7, pc}
 8017084:	08019ca4 	.word	0x08019ca4

08017088 <itm_debug1>:
{
 8017088:	b580      	push	{r7, lr}
 801708a:	b086      	sub	sp, #24
 801708c:	af02      	add	r7, sp, #8
 801708e:	60f8      	str	r0, [r7, #12]
 8017090:	60b9      	str	r1, [r7, #8]
 8017092:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8017094:	4b08      	ldr	r3, [pc, #32]	; (80170b8 <itm_debug1+0x30>)
 8017096:	681a      	ldr	r2, [r3, #0]
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	4013      	ands	r3, r2
 801709c:	2b00      	cmp	r3, #0
 801709e:	d007      	beq.n	80170b0 <itm_debug1+0x28>
 80170a0:	2301      	movs	r3, #1
 80170a2:	9300      	str	r3, [sp, #0]
 80170a4:	2300      	movs	r3, #0
 80170a6:	2200      	movs	r2, #0
 80170a8:	6879      	ldr	r1, [r7, #4]
 80170aa:	68b8      	ldr	r0, [r7, #8]
 80170ac:	f001 fedc 	bl	8018e68 <_itm_debug3>
}
 80170b0:	bf00      	nop
 80170b2:	3710      	adds	r7, #16
 80170b4:	46bd      	mov	sp, r7
 80170b6:	bd80      	pop	{r7, pc}
 80170b8:	200005a4 	.word	0x200005a4

080170bc <itm_debug2>:
{
 80170bc:	b580      	push	{r7, lr}
 80170be:	b086      	sub	sp, #24
 80170c0:	af02      	add	r7, sp, #8
 80170c2:	60f8      	str	r0, [r7, #12]
 80170c4:	60b9      	str	r1, [r7, #8]
 80170c6:	607a      	str	r2, [r7, #4]
 80170c8:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 80170ca:	4b09      	ldr	r3, [pc, #36]	; (80170f0 <itm_debug2+0x34>)
 80170cc:	681a      	ldr	r2, [r3, #0]
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	4013      	ands	r3, r2
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d007      	beq.n	80170e6 <itm_debug2+0x2a>
 80170d6:	2302      	movs	r3, #2
 80170d8:	9300      	str	r3, [sp, #0]
 80170da:	2300      	movs	r3, #0
 80170dc:	683a      	ldr	r2, [r7, #0]
 80170de:	6879      	ldr	r1, [r7, #4]
 80170e0:	68b8      	ldr	r0, [r7, #8]
 80170e2:	f001 fec1 	bl	8018e68 <_itm_debug3>
}
 80170e6:	bf00      	nop
 80170e8:	3710      	adds	r7, #16
 80170ea:	46bd      	mov	sp, r7
 80170ec:	bd80      	pop	{r7, pc}
 80170ee:	bf00      	nop
 80170f0:	200005a4 	.word	0x200005a4

080170f4 <inertia_value>:
	vars->target = 0;
	vars->cur = 0;
}

int16_t inertia_value(int tidx, const inertia_config_t *config, inertia_vars_t *vars, int *pchanged)
{
 80170f4:	b580      	push	{r7, lr}
 80170f6:	b08a      	sub	sp, #40	; 0x28
 80170f8:	af00      	add	r7, sp, #0
 80170fa:	60f8      	str	r0, [r7, #12]
 80170fc:	60b9      	str	r1, [r7, #8]
 80170fe:	607a      	str	r2, [r7, #4]
 8017100:	603b      	str	r3, [r7, #0]
	int st =  SIGNOF(vars->target);
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017108:	2b00      	cmp	r3, #0
 801710a:	da02      	bge.n	8017112 <inertia_value+0x1e>
 801710c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017110:	e000      	b.n	8017114 <inertia_value+0x20>
 8017112:	2301      	movs	r3, #1
 8017114:	623b      	str	r3, [r7, #32]
	int sc =  SIGNOF(vars->cur);
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801711c:	2b00      	cmp	r3, #0
 801711e:	da02      	bge.n	8017126 <inertia_value+0x32>
 8017120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017124:	e000      	b.n	8017128 <inertia_value+0x34>
 8017126:	2301      	movs	r3, #1
 8017128:	61fb      	str	r3, [r7, #28]
	int inc;

	int32_t dt10 = (10*1000)/cur_freqhz;
 801712a:	4b83      	ldr	r3, [pc, #524]	; (8017338 <inertia_value+0x244>)
 801712c:	681b      	ldr	r3, [r3, #0]
 801712e:	f242 7210 	movw	r2, #10000	; 0x2710
 8017132:	fb92 f3f3 	sdiv	r3, r2, r3
 8017136:	61bb      	str	r3, [r7, #24]

    if (pchanged) *pchanged = 0;
 8017138:	683b      	ldr	r3, [r7, #0]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d002      	beq.n	8017144 <inertia_value+0x50>
 801713e:	683b      	ldr	r3, [r7, #0]
 8017140:	2200      	movs	r2, #0
 8017142:	601a      	str	r2, [r3, #0]
    if (vars->target == vars->cur/10) {
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	f9b3 2000 	ldrsh.w	r2, [r3]
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017150:	497a      	ldr	r1, [pc, #488]	; (801733c <inertia_value+0x248>)
 8017152:	fb81 0103 	smull	r0, r1, r1, r3
 8017156:	1089      	asrs	r1, r1, #2
 8017158:	17db      	asrs	r3, r3, #31
 801715a:	1acb      	subs	r3, r1, r3
 801715c:	b21b      	sxth	r3, r3
 801715e:	429a      	cmp	r2, r3
 8017160:	d108      	bne.n	8017174 <inertia_value+0x80>
    	itm_debug1(DBG_INERTIA, "no chg", tidx);
 8017162:	68fa      	ldr	r2, [r7, #12]
 8017164:	4976      	ldr	r1, [pc, #472]	; (8017340 <inertia_value+0x24c>)
 8017166:	2008      	movs	r0, #8
 8017168:	f7ff ff8e 	bl	8017088 <itm_debug1>
    	return vars->target;
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017172:	e0dc      	b.n	801732e <inertia_value+0x23a>
    }


	if (st*sc >= 0) {
 8017174:	6a3b      	ldr	r3, [r7, #32]
 8017176:	69fa      	ldr	r2, [r7, #28]
 8017178:	fb02 f303 	mul.w	r3, r2, r3
 801717c:	2b00      	cmp	r3, #0
 801717e:	db78      	blt.n	8017272 <inertia_value+0x17e>
		// same direction
		if (abs(vars->target*10)>abs(vars->cur)) {
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017186:	461a      	mov	r2, r3
 8017188:	4613      	mov	r3, r2
 801718a:	009b      	lsls	r3, r3, #2
 801718c:	4413      	add	r3, r2
 801718e:	005b      	lsls	r3, r3, #1
 8017190:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8017194:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801719e:	2b00      	cmp	r3, #0
 80171a0:	bfb8      	it	lt
 80171a2:	425b      	neglt	r3, r3
 80171a4:	429a      	cmp	r2, r3
 80171a6:	dd31      	ble.n	801720c <inertia_value+0x118>
			// acceleration
			inc = config->acc * dt10 / 10000;
 80171a8:	68bb      	ldr	r3, [r7, #8]
 80171aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80171ae:	461a      	mov	r2, r3
 80171b0:	69bb      	ldr	r3, [r7, #24]
 80171b2:	fb03 f302 	mul.w	r3, r3, r2
 80171b6:	4a63      	ldr	r2, [pc, #396]	; (8017344 <inertia_value+0x250>)
 80171b8:	fb82 1203 	smull	r1, r2, r2, r3
 80171bc:	1312      	asrs	r2, r2, #12
 80171be:	17db      	asrs	r3, r3, #31
 80171c0:	1ad3      	subs	r3, r2, r3
 80171c2:	627b      	str	r3, [r7, #36]	; 0x24
			inc = MIN(inc, abs(vars->target*10)-abs(vars->cur));
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80171ca:	461a      	mov	r2, r3
 80171cc:	4613      	mov	r3, r2
 80171ce:	009b      	lsls	r3, r3, #2
 80171d0:	4413      	add	r3, r2
 80171d2:	005b      	lsls	r3, r3, #1
 80171d4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80171d8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	bfb8      	it	lt
 80171e6:	425b      	neglt	r3, r3
 80171e8:	1ad3      	subs	r3, r2, r3
 80171ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80171ec:	4293      	cmp	r3, r2
 80171ee:	bfa8      	it	ge
 80171f0:	4613      	movge	r3, r2
 80171f2:	627b      	str	r3, [r7, #36]	; 0x24
			inc = sc * inc;
 80171f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171f6:	69fa      	ldr	r2, [r7, #28]
 80171f8:	fb02 f303 	mul.w	r3, r2, r3
 80171fc:	627b      	str	r3, [r7, #36]	; 0x24
	    	itm_debug2(DBG_INERTIA, "acc", tidx, inc);
 80171fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017200:	68fa      	ldr	r2, [r7, #12]
 8017202:	4951      	ldr	r1, [pc, #324]	; (8017348 <inertia_value+0x254>)
 8017204:	2008      	movs	r0, #8
 8017206:	f7ff ff59 	bl	80170bc <itm_debug2>
 801720a:	e060      	b.n	80172ce <inertia_value+0x1da>
		} else {
			// deceleration
			inc = config->dec * dt10 / 10000;
 801720c:	68bb      	ldr	r3, [r7, #8]
 801720e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017212:	461a      	mov	r2, r3
 8017214:	69bb      	ldr	r3, [r7, #24]
 8017216:	fb03 f302 	mul.w	r3, r3, r2
 801721a:	4a4a      	ldr	r2, [pc, #296]	; (8017344 <inertia_value+0x250>)
 801721c:	fb82 1203 	smull	r1, r2, r2, r3
 8017220:	1312      	asrs	r2, r2, #12
 8017222:	17db      	asrs	r3, r3, #31
 8017224:	1ad3      	subs	r3, r2, r3
 8017226:	627b      	str	r3, [r7, #36]	; 0x24
			inc = MIN(inc, -abs(vars->target*10)+abs(vars->cur));
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801722e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8017232:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	f9b3 3000 	ldrsh.w	r3, [r3]
 801723c:	4619      	mov	r1, r3
 801723e:	460b      	mov	r3, r1
 8017240:	009b      	lsls	r3, r3, #2
 8017242:	440b      	add	r3, r1
 8017244:	005b      	lsls	r3, r3, #1
 8017246:	2b00      	cmp	r3, #0
 8017248:	bfb8      	it	lt
 801724a:	425b      	neglt	r3, r3
 801724c:	1ad3      	subs	r3, r2, r3
 801724e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017250:	4293      	cmp	r3, r2
 8017252:	bfa8      	it	ge
 8017254:	4613      	movge	r3, r2
 8017256:	627b      	str	r3, [r7, #36]	; 0x24
			inc = -sc * inc;
 8017258:	69fb      	ldr	r3, [r7, #28]
 801725a:	425a      	negs	r2, r3
 801725c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801725e:	fb02 f303 	mul.w	r3, r2, r3
 8017262:	627b      	str	r3, [r7, #36]	; 0x24
	    	itm_debug2(DBG_INERTIA, "dec", tidx, inc);
 8017264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017266:	68fa      	ldr	r2, [r7, #12]
 8017268:	4938      	ldr	r1, [pc, #224]	; (801734c <inertia_value+0x258>)
 801726a:	2008      	movs	r0, #8
 801726c:	f7ff ff26 	bl	80170bc <itm_debug2>
 8017270:	e02d      	b.n	80172ce <inertia_value+0x1da>
		}
	} else {
		// dir change
		itm_debug1(DBG_INERTIA, "dir change", tidx);
 8017272:	68fa      	ldr	r2, [r7, #12]
 8017274:	4936      	ldr	r1, [pc, #216]	; (8017350 <inertia_value+0x25c>)
 8017276:	2008      	movs	r0, #8
 8017278:	f7ff ff06 	bl	8017088 <itm_debug1>
		inc = config->dec * dt10 / 10000;
 801727c:	68bb      	ldr	r3, [r7, #8]
 801727e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017282:	461a      	mov	r2, r3
 8017284:	69bb      	ldr	r3, [r7, #24]
 8017286:	fb03 f302 	mul.w	r3, r3, r2
 801728a:	4a2e      	ldr	r2, [pc, #184]	; (8017344 <inertia_value+0x250>)
 801728c:	fb82 1203 	smull	r1, r2, r2, r3
 8017290:	1312      	asrs	r2, r2, #12
 8017292:	17db      	asrs	r3, r3, #31
 8017294:	1ad3      	subs	r3, r2, r3
 8017296:	627b      	str	r3, [r7, #36]	; 0x24
        inc = MIN(inc, abs(vars->target*10-vars->cur));
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801729e:	461a      	mov	r2, r3
 80172a0:	4613      	mov	r3, r2
 80172a2:	009b      	lsls	r3, r3, #2
 80172a4:	4413      	add	r3, r2
 80172a6:	005b      	lsls	r3, r3, #1
 80172a8:	461a      	mov	r2, r3
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80172b0:	1ad3      	subs	r3, r2, r3
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	bfb8      	it	lt
 80172b6:	425b      	neglt	r3, r3
 80172b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80172ba:	4293      	cmp	r3, r2
 80172bc:	bfa8      	it	ge
 80172be:	4613      	movge	r3, r2
 80172c0:	627b      	str	r3, [r7, #36]	; 0x24
        inc = -1 * sc * inc;
 80172c2:	69fb      	ldr	r3, [r7, #28]
 80172c4:	425a      	negs	r2, r3
 80172c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172c8:	fb02 f303 	mul.w	r3, r2, r3
 80172cc:	627b      	str	r3, [r7, #36]	; 0x24
	}
	int vold = vars->cur/10;
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80172d4:	4a19      	ldr	r2, [pc, #100]	; (801733c <inertia_value+0x248>)
 80172d6:	fb82 1203 	smull	r1, r2, r2, r3
 80172da:	1092      	asrs	r2, r2, #2
 80172dc:	17db      	asrs	r3, r3, #31
 80172de:	1ad3      	subs	r3, r2, r3
 80172e0:	b21b      	sxth	r3, r3
 80172e2:	617b      	str	r3, [r7, #20]
	vars->cur += inc;
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80172ea:	b29a      	uxth	r2, r3
 80172ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172ee:	b29b      	uxth	r3, r3
 80172f0:	4413      	add	r3, r2
 80172f2:	b29b      	uxth	r3, r3
 80172f4:	b21a      	sxth	r2, r3
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	805a      	strh	r2, [r3, #2]
	int16_t vnew = vars->cur/10;
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8017300:	4a0e      	ldr	r2, [pc, #56]	; (801733c <inertia_value+0x248>)
 8017302:	fb82 1203 	smull	r1, r2, r2, r3
 8017306:	1092      	asrs	r2, r2, #2
 8017308:	17db      	asrs	r3, r3, #31
 801730a:	1ad3      	subs	r3, r2, r3
 801730c:	827b      	strh	r3, [r7, #18]
    if (pchanged) *pchanged = (vnew==vold) ? 0 : 1;
 801730e:	683b      	ldr	r3, [r7, #0]
 8017310:	2b00      	cmp	r3, #0
 8017312:	d00a      	beq.n	801732a <inertia_value+0x236>
 8017314:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017318:	697a      	ldr	r2, [r7, #20]
 801731a:	429a      	cmp	r2, r3
 801731c:	bf14      	ite	ne
 801731e:	2301      	movne	r3, #1
 8017320:	2300      	moveq	r3, #0
 8017322:	b2db      	uxtb	r3, r3
 8017324:	461a      	mov	r2, r3
 8017326:	683b      	ldr	r3, [r7, #0]
 8017328:	601a      	str	r2, [r3, #0]
	return vnew;
 801732a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 801732e:	4618      	mov	r0, r3
 8017330:	3728      	adds	r7, #40	; 0x28
 8017332:	46bd      	mov	sp, r7
 8017334:	bd80      	pop	{r7, pc}
 8017336:	bf00      	nop
 8017338:	200005a0 	.word	0x200005a0
 801733c:	66666667 	.word	0x66666667
 8017340:	08019cb4 	.word	0x08019cb4
 8017344:	68db8bad 	.word	0x68db8bad
 8017348:	08019cbc 	.word	0x08019cbc
 801734c:	08019cc0 	.word	0x08019cc0
 8017350:	08019cc4 	.word	0x08019cc4

08017354 <itm_debug1>:
{
 8017354:	b580      	push	{r7, lr}
 8017356:	b086      	sub	sp, #24
 8017358:	af02      	add	r7, sp, #8
 801735a:	60f8      	str	r0, [r7, #12]
 801735c:	60b9      	str	r1, [r7, #8]
 801735e:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8017360:	4b08      	ldr	r3, [pc, #32]	; (8017384 <itm_debug1+0x30>)
 8017362:	681a      	ldr	r2, [r3, #0]
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	4013      	ands	r3, r2
 8017368:	2b00      	cmp	r3, #0
 801736a:	d007      	beq.n	801737c <itm_debug1+0x28>
 801736c:	2301      	movs	r3, #1
 801736e:	9300      	str	r3, [sp, #0]
 8017370:	2300      	movs	r3, #0
 8017372:	2200      	movs	r2, #0
 8017374:	6879      	ldr	r1, [r7, #4]
 8017376:	68b8      	ldr	r0, [r7, #8]
 8017378:	f001 fd76 	bl	8018e68 <_itm_debug3>
}
 801737c:	bf00      	nop
 801737e:	3710      	adds	r7, #16
 8017380:	46bd      	mov	sp, r7
 8017382:	bd80      	pop	{r7, pc}
 8017384:	200005a4 	.word	0x200005a4

08017388 <itm_debug2>:
{
 8017388:	b580      	push	{r7, lr}
 801738a:	b086      	sub	sp, #24
 801738c:	af02      	add	r7, sp, #8
 801738e:	60f8      	str	r0, [r7, #12]
 8017390:	60b9      	str	r1, [r7, #8]
 8017392:	607a      	str	r2, [r7, #4]
 8017394:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8017396:	4b09      	ldr	r3, [pc, #36]	; (80173bc <itm_debug2+0x34>)
 8017398:	681a      	ldr	r2, [r3, #0]
 801739a:	68fb      	ldr	r3, [r7, #12]
 801739c:	4013      	ands	r3, r2
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d007      	beq.n	80173b2 <itm_debug2+0x2a>
 80173a2:	2302      	movs	r3, #2
 80173a4:	9300      	str	r3, [sp, #0]
 80173a6:	2300      	movs	r3, #0
 80173a8:	683a      	ldr	r2, [r7, #0]
 80173aa:	6879      	ldr	r1, [r7, #4]
 80173ac:	68b8      	ldr	r0, [r7, #8]
 80173ae:	f001 fd5b 	bl	8018e68 <_itm_debug3>
}
 80173b2:	bf00      	nop
 80173b4:	3710      	adds	r7, #16
 80173b6:	46bd      	mov	sp, r7
 80173b8:	bd80      	pop	{r7, pc}
 80173ba:	bf00      	nop
 80173bc:	200005a4 	.word	0x200005a4

080173c0 <itm_debug3>:
{
 80173c0:	b580      	push	{r7, lr}
 80173c2:	b086      	sub	sp, #24
 80173c4:	af02      	add	r7, sp, #8
 80173c6:	60f8      	str	r0, [r7, #12]
 80173c8:	60b9      	str	r1, [r7, #8]
 80173ca:	607a      	str	r2, [r7, #4]
 80173cc:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 80173ce:	4b09      	ldr	r3, [pc, #36]	; (80173f4 <itm_debug3+0x34>)
 80173d0:	681a      	ldr	r2, [r3, #0]
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	4013      	ands	r3, r2
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d007      	beq.n	80173ea <itm_debug3+0x2a>
 80173da:	2303      	movs	r3, #3
 80173dc:	9300      	str	r3, [sp, #0]
 80173de:	69bb      	ldr	r3, [r7, #24]
 80173e0:	683a      	ldr	r2, [r7, #0]
 80173e2:	6879      	ldr	r1, [r7, #4]
 80173e4:	68b8      	ldr	r0, [r7, #8]
 80173e6:	f001 fd3f 	bl	8018e68 <_itm_debug3>
}
 80173ea:	bf00      	nop
 80173ec:	3710      	adds	r7, #16
 80173ee:	46bd      	mov	sp, r7
 80173f0:	bd80      	pop	{r7, pc}
 80173f2:	bf00      	nop
 80173f4:	200005a4 	.word	0x200005a4

080173f8 <pidctl_reset>:
#include <memory.h>
#include "pidctl.h"
#include "misc.h"

void pidctl_reset(_UNUSED_ const pidctl_config_t *c, pidctl_vars_t *v)
{
 80173f8:	b480      	push	{r7}
 80173fa:	b083      	sub	sp, #12
 80173fc:	af00      	add	r7, sp, #0
 80173fe:	6078      	str	r0, [r7, #4]
 8017400:	6039      	str	r1, [r7, #0]
    v->has_last = 0;
 8017402:	683a      	ldr	r2, [r7, #0]
 8017404:	7b13      	ldrb	r3, [r2, #12]
 8017406:	f36f 0300 	bfc	r3, #0, #1
 801740a:	7313      	strb	r3, [r2, #12]
	v->last_err = 0;
 801740c:	683b      	ldr	r3, [r7, #0]
 801740e:	2200      	movs	r2, #0
 8017410:	601a      	str	r2, [r3, #0]
	v->sume     = 0;
 8017412:	683b      	ldr	r3, [r7, #0]
 8017414:	2200      	movs	r2, #0
 8017416:	605a      	str	r2, [r3, #4]
	v->target_v = 0;
 8017418:	683b      	ldr	r3, [r7, #0]
 801741a:	2200      	movs	r2, #0
 801741c:	609a      	str	r2, [r3, #8]
	v->stopped = 1;
 801741e:	683a      	ldr	r2, [r7, #0]
 8017420:	7b13      	ldrb	r3, [r2, #12]
 8017422:	f043 0302 	orr.w	r3, r3, #2
 8017426:	7313      	strb	r3, [r2, #12]
	v->has_last = 0;
 8017428:	683a      	ldr	r2, [r7, #0]
 801742a:	7b13      	ldrb	r3, [r2, #12]
 801742c:	f36f 0300 	bfc	r3, #0, #1
 8017430:	7313      	strb	r3, [r2, #12]
}
 8017432:	bf00      	nop
 8017434:	370c      	adds	r7, #12
 8017436:	46bd      	mov	sp, r7
 8017438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801743c:	4770      	bx	lr
	...

08017440 <pidctl_set_target>:

void pidctl_set_target(_UNUSED_ const pidctl_config_t *c, pidctl_vars_t *v, int32_t val)
{
 8017440:	b580      	push	{r7, lr}
 8017442:	b084      	sub	sp, #16
 8017444:	af00      	add	r7, sp, #0
 8017446:	60f8      	str	r0, [r7, #12]
 8017448:	60b9      	str	r1, [r7, #8]
 801744a:	607a      	str	r2, [r7, #4]
	if ((0)) pidctl_reset(c,v);
    if ((0)) v->sume = val;
    itm_debug1(DBG_PID, "pid trg", val);
 801744c:	687a      	ldr	r2, [r7, #4]
 801744e:	4905      	ldr	r1, [pc, #20]	; (8017464 <pidctl_set_target+0x24>)
 8017450:	2004      	movs	r0, #4
 8017452:	f7ff ff7f 	bl	8017354 <itm_debug1>
	v->target_v = val;
 8017456:	68bb      	ldr	r3, [r7, #8]
 8017458:	687a      	ldr	r2, [r7, #4]
 801745a:	609a      	str	r2, [r3, #8]
}
 801745c:	bf00      	nop
 801745e:	3710      	adds	r7, #16
 8017460:	46bd      	mov	sp, r7
 8017462:	bd80      	pop	{r7, pc}
 8017464:	08019cd0 	.word	0x08019cd0

08017468 <pidctl_value>:

#define MAX_I (250000)

int32_t pidctl_value(const pidctl_config_t *c, pidctl_vars_t *v, int32_t cur_v)
{
 8017468:	b580      	push	{r7, lr}
 801746a:	b08c      	sub	sp, #48	; 0x30
 801746c:	af02      	add	r7, sp, #8
 801746e:	60f8      	str	r0, [r7, #12]
 8017470:	60b9      	str	r1, [r7, #8]
 8017472:	607a      	str	r2, [r7, #4]
	// cuv in native BEMF value
	int32_t dt10 = 10000 / cur_freqhz; // dt*10 in ms
 8017474:	4b49      	ldr	r3, [pc, #292]	; (801759c <pidctl_value+0x134>)
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	f242 7210 	movw	r2, #10000	; 0x2710
 801747c:	fb92 f3f3 	sdiv	r3, r2, r3
 8017480:	623b      	str	r3, [r7, #32]


	int32_t err = v->target_v - cur_v;
 8017482:	68bb      	ldr	r3, [r7, #8]
 8017484:	689a      	ldr	r2, [r3, #8]
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	1ad3      	subs	r3, r2, r3
 801748a:	627b      	str	r3, [r7, #36]	; 0x24
    if (err> 2*MAX_PID_VALUE) err =  2*MAX_PID_VALUE;
 801748c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801748e:	f241 7270 	movw	r2, #6000	; 0x1770
 8017492:	4293      	cmp	r3, r2
 8017494:	dd02      	ble.n	801749c <pidctl_value+0x34>
 8017496:	f241 7370 	movw	r3, #6000	; 0x1770
 801749a:	627b      	str	r3, [r7, #36]	; 0x24
    if (err<-2*MAX_PID_VALUE) err = -2*MAX_PID_VALUE;
 801749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801749e:	4a40      	ldr	r2, [pc, #256]	; (80175a0 <pidctl_value+0x138>)
 80174a0:	4293      	cmp	r3, r2
 80174a2:	da01      	bge.n	80174a8 <pidctl_value+0x40>
 80174a4:	4b3e      	ldr	r3, [pc, #248]	; (80175a0 <pidctl_value+0x138>)
 80174a6:	627b      	str	r3, [r7, #36]	; 0x24

    int32_t dv = (v->has_last) ? 1000*10*(err - v->last_err)/dt10 : 0; //XXX
 80174a8:	68bb      	ldr	r3, [r7, #8]
 80174aa:	7b1b      	ldrb	r3, [r3, #12]
 80174ac:	f003 0301 	and.w	r3, r3, #1
 80174b0:	b2db      	uxtb	r3, r3
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d00b      	beq.n	80174ce <pidctl_value+0x66>
 80174b6:	68bb      	ldr	r3, [r7, #8]
 80174b8:	681b      	ldr	r3, [r3, #0]
 80174ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80174bc:	1ad3      	subs	r3, r2, r3
 80174be:	f242 7210 	movw	r2, #10000	; 0x2710
 80174c2:	fb02 f203 	mul.w	r2, r2, r3
 80174c6:	6a3b      	ldr	r3, [r7, #32]
 80174c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80174cc:	e000      	b.n	80174d0 <pidctl_value+0x68>
 80174ce:	2300      	movs	r3, #0
 80174d0:	61fb      	str	r3, [r7, #28]
	v->last_err = err;
 80174d2:	68bb      	ldr	r3, [r7, #8]
 80174d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80174d6:	601a      	str	r2, [r3, #0]
    v->has_last = 1;
 80174d8:	68ba      	ldr	r2, [r7, #8]
 80174da:	7b13      	ldrb	r3, [r2, #12]
 80174dc:	f043 0301 	orr.w	r3, r3, #1
 80174e0:	7313      	strb	r3, [r2, #12]
	if ((1)) v->sume += (err*dt10)/10;
 80174e2:	68bb      	ldr	r3, [r7, #8]
 80174e4:	685a      	ldr	r2, [r3, #4]
 80174e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174e8:	6a39      	ldr	r1, [r7, #32]
 80174ea:	fb01 f303 	mul.w	r3, r1, r3
 80174ee:	492d      	ldr	r1, [pc, #180]	; (80175a4 <pidctl_value+0x13c>)
 80174f0:	fb81 0103 	smull	r0, r1, r1, r3
 80174f4:	1089      	asrs	r1, r1, #2
 80174f6:	17db      	asrs	r3, r3, #31
 80174f8:	1acb      	subs	r3, r1, r3
 80174fa:	441a      	add	r2, r3
 80174fc:	68bb      	ldr	r3, [r7, #8]
 80174fe:	605a      	str	r2, [r3, #4]
    else     v->sume = v->sume*.99 + (err*dt10)/10;
    if (v->sume>MAX_I) v->sume = MAX_I;
 8017500:	68bb      	ldr	r3, [r7, #8]
 8017502:	685b      	ldr	r3, [r3, #4]
 8017504:	4a28      	ldr	r2, [pc, #160]	; (80175a8 <pidctl_value+0x140>)
 8017506:	4293      	cmp	r3, r2
 8017508:	dd03      	ble.n	8017512 <pidctl_value+0xaa>
 801750a:	68bb      	ldr	r3, [r7, #8]
 801750c:	4a26      	ldr	r2, [pc, #152]	; (80175a8 <pidctl_value+0x140>)
 801750e:	605a      	str	r2, [r3, #4]
 8017510:	e007      	b.n	8017522 <pidctl_value+0xba>
    else if (v->sume<-MAX_I) v->sume = -MAX_I;
 8017512:	68bb      	ldr	r3, [r7, #8]
 8017514:	685b      	ldr	r3, [r3, #4]
 8017516:	4a25      	ldr	r2, [pc, #148]	; (80175ac <pidctl_value+0x144>)
 8017518:	4293      	cmp	r3, r2
 801751a:	da02      	bge.n	8017522 <pidctl_value+0xba>
 801751c:	68bb      	ldr	r3, [r7, #8]
 801751e:	4a23      	ldr	r2, [pc, #140]	; (80175ac <pidctl_value+0x144>)
 8017520:	605a      	str	r2, [r3, #4]

	int32_t iv = v->sume / 100;
 8017522:	68bb      	ldr	r3, [r7, #8]
 8017524:	685b      	ldr	r3, [r3, #4]
 8017526:	4a22      	ldr	r2, [pc, #136]	; (80175b0 <pidctl_value+0x148>)
 8017528:	fb82 1203 	smull	r1, r2, r2, r3
 801752c:	1152      	asrs	r2, r2, #5
 801752e:	17db      	asrs	r3, r3, #31
 8017530:	1ad3      	subs	r3, r2, r3
 8017532:	61bb      	str	r3, [r7, #24]

	itm_debug2(DBG_PID, "pid tc", v->target_v, cur_v);
 8017534:	68bb      	ldr	r3, [r7, #8]
 8017536:	689a      	ldr	r2, [r3, #8]
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	491e      	ldr	r1, [pc, #120]	; (80175b4 <pidctl_value+0x14c>)
 801753c:	2004      	movs	r0, #4
 801753e:	f7ff ff23 	bl	8017388 <itm_debug2>
    itm_debug3(DBG_PID, "pid edi", err, dv, v->sume);
 8017542:	68bb      	ldr	r3, [r7, #8]
 8017544:	685b      	ldr	r3, [r3, #4]
 8017546:	9300      	str	r3, [sp, #0]
 8017548:	69fb      	ldr	r3, [r7, #28]
 801754a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801754c:	491a      	ldr	r1, [pc, #104]	; (80175b8 <pidctl_value+0x150>)
 801754e:	2004      	movs	r0, #4
 8017550:	f7ff ff36 	bl	80173c0 <itm_debug3>

	int32_t r = c->kP * err + (c->kD * dv)/1000 + c->kI * iv;
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	681b      	ldr	r3, [r3, #0]
 8017558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801755a:	fb02 f203 	mul.w	r2, r2, r3
 801755e:	68fb      	ldr	r3, [r7, #12]
 8017560:	689b      	ldr	r3, [r3, #8]
 8017562:	69f9      	ldr	r1, [r7, #28]
 8017564:	fb01 f303 	mul.w	r3, r1, r3
 8017568:	4914      	ldr	r1, [pc, #80]	; (80175bc <pidctl_value+0x154>)
 801756a:	fb81 0103 	smull	r0, r1, r1, r3
 801756e:	1189      	asrs	r1, r1, #6
 8017570:	17db      	asrs	r3, r3, #31
 8017572:	1acb      	subs	r3, r1, r3
 8017574:	441a      	add	r2, r3
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	685b      	ldr	r3, [r3, #4]
 801757a:	69b9      	ldr	r1, [r7, #24]
 801757c:	fb01 f303 	mul.w	r3, r1, r3
 8017580:	4413      	add	r3, r2
 8017582:	617b      	str	r3, [r7, #20]

	return r/1000;
 8017584:	697b      	ldr	r3, [r7, #20]
 8017586:	4a0d      	ldr	r2, [pc, #52]	; (80175bc <pidctl_value+0x154>)
 8017588:	fb82 1203 	smull	r1, r2, r2, r3
 801758c:	1192      	asrs	r2, r2, #6
 801758e:	17db      	asrs	r3, r3, #31
 8017590:	1ad3      	subs	r3, r2, r3
}
 8017592:	4618      	mov	r0, r3
 8017594:	3728      	adds	r7, #40	; 0x28
 8017596:	46bd      	mov	sp, r7
 8017598:	bd80      	pop	{r7, pc}
 801759a:	bf00      	nop
 801759c:	200005a0 	.word	0x200005a0
 80175a0:	ffffe890 	.word	0xffffe890
 80175a4:	66666667 	.word	0x66666667
 80175a8:	0003d090 	.word	0x0003d090
 80175ac:	fffc2f70 	.word	0xfffc2f70
 80175b0:	51eb851f 	.word	0x51eb851f
 80175b4:	08019cd8 	.word	0x08019cd8
 80175b8:	08019ce0 	.word	0x08019ce0
 80175bc:	10624dd3 	.word	0x10624dd3

080175c0 <itm_debug1>:
{
 80175c0:	b580      	push	{r7, lr}
 80175c2:	b086      	sub	sp, #24
 80175c4:	af02      	add	r7, sp, #8
 80175c6:	60f8      	str	r0, [r7, #12]
 80175c8:	60b9      	str	r1, [r7, #8]
 80175ca:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 80175cc:	4b08      	ldr	r3, [pc, #32]	; (80175f0 <itm_debug1+0x30>)
 80175ce:	681a      	ldr	r2, [r3, #0]
 80175d0:	68fb      	ldr	r3, [r7, #12]
 80175d2:	4013      	ands	r3, r2
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d007      	beq.n	80175e8 <itm_debug1+0x28>
 80175d8:	2301      	movs	r3, #1
 80175da:	9300      	str	r3, [sp, #0]
 80175dc:	2300      	movs	r3, #0
 80175de:	2200      	movs	r2, #0
 80175e0:	6879      	ldr	r1, [r7, #4]
 80175e2:	68b8      	ldr	r0, [r7, #8]
 80175e4:	f001 fc40 	bl	8018e68 <_itm_debug3>
}
 80175e8:	bf00      	nop
 80175ea:	3710      	adds	r7, #16
 80175ec:	46bd      	mov	sp, r7
 80175ee:	bd80      	pop	{r7, pc}
 80175f0:	200005a4 	.word	0x200005a4

080175f4 <itm_debug2>:
{
 80175f4:	b580      	push	{r7, lr}
 80175f6:	b086      	sub	sp, #24
 80175f8:	af02      	add	r7, sp, #8
 80175fa:	60f8      	str	r0, [r7, #12]
 80175fc:	60b9      	str	r1, [r7, #8]
 80175fe:	607a      	str	r2, [r7, #4]
 8017600:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 8017602:	4b09      	ldr	r3, [pc, #36]	; (8017628 <itm_debug2+0x34>)
 8017604:	681a      	ldr	r2, [r3, #0]
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	4013      	ands	r3, r2
 801760a:	2b00      	cmp	r3, #0
 801760c:	d007      	beq.n	801761e <itm_debug2+0x2a>
 801760e:	2302      	movs	r3, #2
 8017610:	9300      	str	r3, [sp, #0]
 8017612:	2300      	movs	r3, #0
 8017614:	683a      	ldr	r2, [r7, #0]
 8017616:	6879      	ldr	r1, [r7, #4]
 8017618:	68b8      	ldr	r0, [r7, #8]
 801761a:	f001 fc25 	bl	8018e68 <_itm_debug3>
}
 801761e:	bf00      	nop
 8017620:	3710      	adds	r7, #16
 8017622:	46bd      	mov	sp, r7
 8017624:	bd80      	pop	{r7, pc}
 8017626:	bf00      	nop
 8017628:	200005a4 	.word	0x200005a4

0801762c <itm_debug3>:
{
 801762c:	b580      	push	{r7, lr}
 801762e:	b086      	sub	sp, #24
 8017630:	af02      	add	r7, sp, #8
 8017632:	60f8      	str	r0, [r7, #12]
 8017634:	60b9      	str	r1, [r7, #8]
 8017636:	607a      	str	r2, [r7, #4]
 8017638:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 801763a:	4b09      	ldr	r3, [pc, #36]	; (8017660 <itm_debug3+0x34>)
 801763c:	681a      	ldr	r2, [r3, #0]
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	4013      	ands	r3, r2
 8017642:	2b00      	cmp	r3, #0
 8017644:	d007      	beq.n	8017656 <itm_debug3+0x2a>
 8017646:	2303      	movs	r3, #3
 8017648:	9300      	str	r3, [sp, #0]
 801764a:	69bb      	ldr	r3, [r7, #24]
 801764c:	683a      	ldr	r2, [r7, #0]
 801764e:	6879      	ldr	r1, [r7, #4]
 8017650:	68b8      	ldr	r0, [r7, #8]
 8017652:	f001 fc09 	bl	8018e68 <_itm_debug3>
}
 8017656:	bf00      	nop
 8017658:	3710      	adds	r7, #16
 801765a:	46bd      	mov	sp, r7
 801765c:	bd80      	pop	{r7, pc}
 801765e:	bf00      	nop
 8017660:	200005a4 	.word	0x200005a4

08017664 <train_error>:
{
 8017664:	b580      	push	{r7, lr}
 8017666:	b082      	sub	sp, #8
 8017668:	af00      	add	r7, sp, #0
 801766a:	6078      	str	r0, [r7, #4]
 801766c:	6039      	str	r1, [r7, #0]
	return trainctl_error('T', code, msg);
 801766e:	683a      	ldr	r2, [r7, #0]
 8017670:	6879      	ldr	r1, [r7, #4]
 8017672:	2054      	movs	r0, #84	; 0x54
 8017674:	f7fe fb14 	bl	8015ca0 <trainctl_error>
 8017678:	4603      	mov	r3, r0
}
 801767a:	4618      	mov	r0, r3
 801767c:	3708      	adds	r7, #8
 801767e:	46bd      	mov	sp, r7
 8017680:	bd80      	pop	{r7, pc}

08017682 <train_notif>:
{
 8017682:	b580      	push	{r7, lr}
 8017684:	b086      	sub	sp, #24
 8017686:	af02      	add	r7, sp, #8
 8017688:	60ba      	str	r2, [r7, #8]
 801768a:	607b      	str	r3, [r7, #4]
 801768c:	4603      	mov	r3, r0
 801768e:	73fb      	strb	r3, [r7, #15]
 8017690:	460b      	mov	r3, r1
 8017692:	73bb      	strb	r3, [r7, #14]
	trainctl_notif('T', train_idx, cmd, dta, dtalen);
 8017694:	7bba      	ldrb	r2, [r7, #14]
 8017696:	7bf9      	ldrb	r1, [r7, #15]
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	9300      	str	r3, [sp, #0]
 801769c:	68bb      	ldr	r3, [r7, #8]
 801769e:	2054      	movs	r0, #84	; 0x54
 80176a0:	f7ff f996 	bl	80169d0 <trainctl_notif>
}
 80176a4:	bf00      	nop
 80176a6:	3710      	adds	r7, #16
 80176a8:	46bd      	mov	sp, r7
 80176aa:	bd80      	pop	{r7, pc}

080176ac <debug_info>:
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b088      	sub	sp, #32
 80176b0:	af04      	add	r7, sp, #16
 80176b2:	60f8      	str	r0, [r7, #12]
 80176b4:	60b9      	str	r1, [r7, #8]
 80176b6:	607a      	str	r2, [r7, #4]
 80176b8:	603b      	str	r3, [r7, #0]
	trainctl_notif2(sel, num, 'D', msg, v1, v2, v3);
 80176ba:	68fb      	ldr	r3, [r7, #12]
 80176bc:	b2d8      	uxtb	r0, r3
 80176be:	68bb      	ldr	r3, [r7, #8]
 80176c0:	b2d9      	uxtb	r1, r3
 80176c2:	69fb      	ldr	r3, [r7, #28]
 80176c4:	9302      	str	r3, [sp, #8]
 80176c6:	69bb      	ldr	r3, [r7, #24]
 80176c8:	9301      	str	r3, [sp, #4]
 80176ca:	683b      	ldr	r3, [r7, #0]
 80176cc:	9300      	str	r3, [sp, #0]
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	2244      	movs	r2, #68	; 0x44
 80176d2:	f7ff f9a1 	bl	8016a18 <trainctl_notif2>
}
 80176d6:	bf00      	nop
 80176d8:	3710      	adds	r7, #16
 80176da:	46bd      	mov	sp, r7
 80176dc:	bd80      	pop	{r7, pc}
	...

080176e0 <mqf_read_to_spdctl>:
#define CMD_BEMF_OFF		0x41

#define CMD_SETVPWM			0x01
#define CMD_STOP			0x02

LFMQUEUE_DEF_H(to_spdctl, msg_64_t)
 80176e0:	b580      	push	{r7, lr}
 80176e2:	b082      	sub	sp, #8
 80176e4:	af00      	add	r7, sp, #0
 80176e6:	6078      	str	r0, [r7, #4]
 80176e8:	6879      	ldr	r1, [r7, #4]
 80176ea:	4804      	ldr	r0, [pc, #16]	; (80176fc <mqf_read_to_spdctl+0x1c>)
 80176ec:	f001 fd3c 	bl	8019168 <mqf_read>
 80176f0:	4603      	mov	r3, r0
 80176f2:	4618      	mov	r0, r3
 80176f4:	3708      	adds	r7, #8
 80176f6:	46bd      	mov	sp, r7
 80176f8:	bd80      	pop	{r7, pc}
 80176fa:	bf00      	nop
 80176fc:	20000500 	.word	0x20000500

08017700 <mqf_write_from_spdctl>:
LFMQUEUE_DEF_H(from_spdctl, msg_64_t)
 8017700:	b580      	push	{r7, lr}
 8017702:	b082      	sub	sp, #8
 8017704:	af00      	add	r7, sp, #0
 8017706:	6078      	str	r0, [r7, #4]
 8017708:	6879      	ldr	r1, [r7, #4]
 801770a:	4804      	ldr	r0, [pc, #16]	; (801771c <mqf_write_from_spdctl+0x1c>)
 801770c:	f001 fcb2 	bl	8019074 <mqf_write>
 8017710:	4603      	mov	r3, r0
 8017712:	4618      	mov	r0, r3
 8017714:	3708      	adds	r7, #8
 8017716:	46bd      	mov	sp, r7
 8017718:	bd80      	pop	{r7, pc}
 801771a:	bf00      	nop
 801771c:	2000050c 	.word	0x2000050c

08017720 <inertia_set_target>:

int16_t inertia_value(int tidx, const inertia_config_t *cnf, inertia_vars_t *var, int *pchanged);
void    inertia_reset(int tidx, const inertia_config_t *cnf, inertia_vars_t *var);

static inline void inertia_set_target(int tidx, _UNUSED_ const inertia_config_t *cnf, inertia_vars_t *vars, int16_t v)
{
 8017720:	b580      	push	{r7, lr}
 8017722:	b084      	sub	sp, #16
 8017724:	af00      	add	r7, sp, #0
 8017726:	60f8      	str	r0, [r7, #12]
 8017728:	60b9      	str	r1, [r7, #8]
 801772a:	607a      	str	r2, [r7, #4]
 801772c:	807b      	strh	r3, [r7, #2]
	itm_debug2(DBG_INERTIA, "iner targ", tidx, v);
 801772e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017732:	68fa      	ldr	r2, [r7, #12]
 8017734:	4905      	ldr	r1, [pc, #20]	; (801774c <inertia_set_target+0x2c>)
 8017736:	2008      	movs	r0, #8
 8017738:	f7ff ff5c 	bl	80175f4 <itm_debug2>
	vars->target = v;
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	887a      	ldrh	r2, [r7, #2]
 8017740:	801a      	strh	r2, [r3, #0]
}
 8017742:	bf00      	nop
 8017744:	3710      	adds	r7, #16
 8017746:	46bd      	mov	sp, r7
 8017748:	bd80      	pop	{r7, pc}
 801774a:	bf00      	nop
 801774c:	08019ce8 	.word	0x08019ce8

08017750 <spdctl_reset>:

static void pose_check_trig(int numtrain, train_vars_t *tvars, int32_t lastincr);


static void spdctl_reset(void)
{
 8017750:	b580      	push	{r7, lr}
 8017752:	b082      	sub	sp, #8
 8017754:	af00      	add	r7, sp, #0
	memset(trspc_vars, 0, sizeof(trspc_vars));
 8017756:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 801775a:	2100      	movs	r1, #0
 801775c:	4811      	ldr	r0, [pc, #68]	; (80177a4 <spdctl_reset+0x54>)
 801775e:	f001 fda4 	bl	80192aa <memset>
	for (int  i = 0; i<NUM_TRAINS; i++) {
 8017762:	2300      	movs	r3, #0
 8017764:	607b      	str	r3, [r7, #4]
 8017766:	e016      	b.n	8017796 <spdctl_reset+0x46>
		trspc_vars[i].C1 = 0xFF;
 8017768:	490e      	ldr	r1, [pc, #56]	; (80177a4 <spdctl_reset+0x54>)
 801776a:	687a      	ldr	r2, [r7, #4]
 801776c:	4613      	mov	r3, r2
 801776e:	00db      	lsls	r3, r3, #3
 8017770:	1a9b      	subs	r3, r3, r2
 8017772:	00db      	lsls	r3, r3, #3
 8017774:	440b      	add	r3, r1
 8017776:	331c      	adds	r3, #28
 8017778:	22ff      	movs	r2, #255	; 0xff
 801777a:	701a      	strb	r2, [r3, #0]
		trspc_vars[i].C2 = 0xFF;
 801777c:	4909      	ldr	r1, [pc, #36]	; (80177a4 <spdctl_reset+0x54>)
 801777e:	687a      	ldr	r2, [r7, #4]
 8017780:	4613      	mov	r3, r2
 8017782:	00db      	lsls	r3, r3, #3
 8017784:	1a9b      	subs	r3, r3, r2
 8017786:	00db      	lsls	r3, r3, #3
 8017788:	440b      	add	r3, r1
 801778a:	331d      	adds	r3, #29
 801778c:	22ff      	movs	r2, #255	; 0xff
 801778e:	701a      	strb	r2, [r3, #0]
	for (int  i = 0; i<NUM_TRAINS; i++) {
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	3301      	adds	r3, #1
 8017794:	607b      	str	r3, [r7, #4]
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	2b07      	cmp	r3, #7
 801779a:	dde5      	ble.n	8017768 <spdctl_reset+0x18>
	}
}
 801779c:	bf00      	nop
 801779e:	3708      	adds	r7, #8
 80177a0:	46bd      	mov	sp, r7
 80177a2:	bd80      	pop	{r7, pc}
 80177a4:	200053f0 	.word	0x200053f0

080177a8 <spdctl_run_tick>:


void spdctl_run_tick(_UNUSED_ uint32_t notif_flags, _UNUSED_ uint32_t tick, uint32_t dt)
{
 80177a8:	b580      	push	{r7, lr}
 80177aa:	b090      	sub	sp, #64	; 0x40
 80177ac:	af02      	add	r7, sp, #8
 80177ae:	60f8      	str	r0, [r7, #12]
 80177b0:	60b9      	str	r1, [r7, #8]
 80177b2:	607a      	str	r2, [r7, #4]
	train_tick_last_dt = dt;
 80177b4:	4aa3      	ldr	r2, [pc, #652]	; (8017a44 <spdctl_run_tick+0x29c>)
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	6013      	str	r3, [r2, #0]
	train_ntick++;
 80177ba:	4ba3      	ldr	r3, [pc, #652]	; (8017a48 <spdctl_run_tick+0x2a0>)
 80177bc:	681b      	ldr	r3, [r3, #0]
 80177be:	3301      	adds	r3, #1
 80177c0:	4aa1      	ldr	r2, [pc, #644]	; (8017a48 <spdctl_run_tick+0x2a0>)
 80177c2:	6013      	str	r3, [r2, #0]

	itm_debug1(DBG_SPDCTL ,"------- tk", (int) notif_flags);
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	461a      	mov	r2, r3
 80177c8:	49a0      	ldr	r1, [pc, #640]	; (8017a4c <spdctl_run_tick+0x2a4>)
 80177ca:	2010      	movs	r0, #16
 80177cc:	f7ff fef8 	bl	80175c0 <itm_debug1>
	static int first=1;
	if (first) {
 80177d0:	4b9f      	ldr	r3, [pc, #636]	; (8017a50 <spdctl_run_tick+0x2a8>)
 80177d2:	681b      	ldr	r3, [r3, #0]
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d004      	beq.n	80177e2 <spdctl_run_tick+0x3a>
		first = 0;
 80177d8:	4b9d      	ldr	r3, [pc, #628]	; (8017a50 <spdctl_run_tick+0x2a8>)
 80177da:	2200      	movs	r2, #0
 80177dc:	601a      	str	r2, [r3, #0]
		spdctl_reset();
 80177de:	f7ff ffb7 	bl	8017750 <spdctl_reset>
       
	}
	/* process messages */
	for (;;) {
		msg_64_t m;
		int rc = mqf_read_to_spdctl(&m);
 80177e2:	f107 0318 	add.w	r3, r7, #24
 80177e6:	4618      	mov	r0, r3
 80177e8:	f7ff ff7a 	bl	80176e0 <mqf_read_to_spdctl>
 80177ec:	6338      	str	r0, [r7, #48]	; 0x30
		if (rc) break;
 80177ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d002      	beq.n	80177fa <spdctl_run_tick+0x52>
                    break;
            }
        }
	}
	/* process trains */
	for (int i=0; i<NUM_TRAINS; i++) {
 80177f4:	2300      	movs	r3, #0
 80177f6:	637b      	str	r3, [r7, #52]	; 0x34
 80177f8:	e11d      	b.n	8017a36 <spdctl_run_tick+0x28e>
        switch (m.cmd) {
 80177fa:	7ebb      	ldrb	r3, [r7, #26]
 80177fc:	2bfc      	cmp	r3, #252	; 0xfc
 80177fe:	d007      	beq.n	8017810 <spdctl_run_tick+0x68>
 8017800:	2bfc      	cmp	r3, #252	; 0xfc
 8017802:	db16      	blt.n	8017832 <spdctl_run_tick+0x8a>
 8017804:	3bfe      	subs	r3, #254	; 0xfe
 8017806:	2b01      	cmp	r3, #1
 8017808:	d813      	bhi.n	8017832 <spdctl_run_tick+0x8a>
            spdctl_reset();
 801780a:	f7ff ffa1 	bl	8017750 <spdctl_reset>
            break;
 801780e:	e013      	b.n	8017838 <spdctl_run_tick+0x90>
        	if (m.v1u != run_mode) {
 8017810:	8bba      	ldrh	r2, [r7, #28]
 8017812:	4b90      	ldr	r3, [pc, #576]	; (8017a54 <spdctl_run_tick+0x2ac>)
 8017814:	781b      	ldrb	r3, [r3, #0]
 8017816:	b29b      	uxth	r3, r3
 8017818:	429a      	cmp	r2, r3
 801781a:	d00c      	beq.n	8017836 <spdctl_run_tick+0x8e>
        		run_mode = (runmode_t) m.v1u;
 801781c:	8bbb      	ldrh	r3, [r7, #28]
 801781e:	b2da      	uxtb	r2, r3
 8017820:	4b8c      	ldr	r3, [pc, #560]	; (8017a54 <spdctl_run_tick+0x2ac>)
 8017822:	701a      	strb	r2, [r3, #0]
        		testerAddr = m.from;
 8017824:	7e7a      	ldrb	r2, [r7, #25]
 8017826:	4b8c      	ldr	r3, [pc, #560]	; (8017a58 <spdctl_run_tick+0x2b0>)
 8017828:	701a      	strb	r2, [r3, #0]
        		first = 1;
 801782a:	4b89      	ldr	r3, [pc, #548]	; (8017a50 <spdctl_run_tick+0x2a8>)
 801782c:	2201      	movs	r2, #1
 801782e:	601a      	str	r2, [r3, #0]
            break;
 8017830:	e001      	b.n	8017836 <spdctl_run_tick+0x8e>
        	break;
 8017832:	bf00      	nop
 8017834:	e000      	b.n	8017838 <spdctl_run_tick+0x90>
            break;
 8017836:	bf00      	nop
        switch (run_mode) {
 8017838:	4b86      	ldr	r3, [pc, #536]	; (8017a54 <spdctl_run_tick+0x2ac>)
 801783a:	781b      	ldrb	r3, [r3, #0]
 801783c:	2b00      	cmp	r3, #0
 801783e:	f000 80eb 	beq.w	8017a18 <spdctl_run_tick+0x270>
 8017842:	2b01      	cmp	r3, #1
 8017844:	d000      	beq.n	8017848 <spdctl_run_tick+0xa0>
        	continue;
 8017846:	e0ee      	b.n	8017a26 <spdctl_run_tick+0x27e>
        if (IS_TRAIN_SC(m.to)) {
 8017848:	7e3b      	ldrb	r3, [r7, #24]
 801784a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801784e:	2bc8      	cmp	r3, #200	; 0xc8
 8017850:	f040 80e4 	bne.w	8017a1c <spdctl_run_tick+0x274>
            int tidx = m.to & 0x7;
 8017854:	7e3b      	ldrb	r3, [r7, #24]
 8017856:	f003 0307 	and.w	r3, r3, #7
 801785a:	62fb      	str	r3, [r7, #44]	; 0x2c
            USE_TRAIN(tidx)
 801785c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801785e:	f7fe fbcf 	bl	8016000 <get_train_cnf>
 8017862:	62b8      	str	r0, [r7, #40]	; 0x28
 8017864:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017866:	4613      	mov	r3, r2
 8017868:	00db      	lsls	r3, r3, #3
 801786a:	1a9b      	subs	r3, r3, r2
 801786c:	00db      	lsls	r3, r3, #3
 801786e:	4a7b      	ldr	r2, [pc, #492]	; (8017a5c <spdctl_run_tick+0x2b4>)
 8017870:	4413      	add	r3, r2
 8017872:	627b      	str	r3, [r7, #36]	; 0x24
            switch (m.cmd) {
 8017874:	7ebb      	ldrb	r3, [r7, #26]
 8017876:	2b10      	cmp	r3, #16
 8017878:	f000 8094 	beq.w	80179a4 <spdctl_run_tick+0x1fc>
 801787c:	2b10      	cmp	r3, #16
 801787e:	dc02      	bgt.n	8017886 <spdctl_run_tick+0xde>
 8017880:	2b03      	cmp	r3, #3
 8017882:	d007      	beq.n	8017894 <spdctl_run_tick+0xec>
                    break;
 8017884:	e0cf      	b.n	8017a26 <spdctl_run_tick+0x27e>
            switch (m.cmd) {
 8017886:	2b11      	cmp	r3, #17
 8017888:	f000 8097 	beq.w	80179ba <spdctl_run_tick+0x212>
 801788c:	2b50      	cmp	r3, #80	; 0x50
 801788e:	f000 80ae 	beq.w	80179ee <spdctl_run_tick+0x246>
                    break;
 8017892:	e0c8      	b.n	8017a26 <spdctl_run_tick+0x27e>
                    if (m.from == tvars->C1) {
 8017894:	7e7a      	ldrb	r2, [r7, #25]
 8017896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017898:	7f1b      	ldrb	r3, [r3, #28]
 801789a:	429a      	cmp	r2, r3
 801789c:	d119      	bne.n	80178d2 <spdctl_run_tick+0x12a>
                        itm_debug3(DBG_PID, "st bemf", tidx, m.v1, m.from);
 801789e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80178a2:	461a      	mov	r2, r3
 80178a4:	7e7b      	ldrb	r3, [r7, #25]
 80178a6:	9300      	str	r3, [sp, #0]
 80178a8:	4613      	mov	r3, r2
 80178aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80178ac:	496c      	ldr	r1, [pc, #432]	; (8017a60 <spdctl_run_tick+0x2b8>)
 80178ae:	2004      	movs	r0, #4
 80178b0:	f7ff febc 	bl	801762c <itm_debug3>
                        if (!tvars->c2bemf) tvars->bemf_mv = m.v1;
 80178b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178b6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80178ba:	f003 0301 	and.w	r3, r3, #1
 80178be:	b2db      	uxtb	r3, r3
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	f040 80ad 	bne.w	8017a20 <spdctl_run_tick+0x278>
 80178c6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80178ca:	461a      	mov	r2, r3
 80178cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178ce:	605a      	str	r2, [r3, #4]
                        break;
 80178d0:	e0a6      	b.n	8017a20 <spdctl_run_tick+0x278>
                    } else if (m.from == tvars->C2) {
 80178d2:	7e7a      	ldrb	r2, [r7, #25]
 80178d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178d6:	7f5b      	ldrb	r3, [r3, #29]
 80178d8:	429a      	cmp	r2, r3
 80178da:	d15a      	bne.n	8017992 <spdctl_run_tick+0x1ea>
                        itm_debug3(DBG_PID, "c2 bemf", tidx, m.v1, m.from);
 80178dc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80178e0:	461a      	mov	r2, r3
 80178e2:	7e7b      	ldrb	r3, [r7, #25]
 80178e4:	9300      	str	r3, [sp, #0]
 80178e6:	4613      	mov	r3, r2
 80178e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80178ea:	495e      	ldr	r1, [pc, #376]	; (8017a64 <spdctl_run_tick+0x2bc>)
 80178ec:	2004      	movs	r0, #4
 80178ee:	f7ff fe9d 	bl	801762c <itm_debug3>
                        if (tvars->c2bemf) tvars->bemf_mv = m.v1;
 80178f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178f4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80178f8:	f003 0301 	and.w	r3, r3, #1
 80178fc:	b2db      	uxtb	r3, r3
 80178fe:	2b00      	cmp	r3, #0
 8017900:	d005      	beq.n	801790e <spdctl_run_tick+0x166>
 8017902:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8017906:	461a      	mov	r2, r3
 8017908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801790a:	605a      	str	r2, [r3, #4]
                    break;
 801790c:	e08a      	b.n	8017a24 <spdctl_run_tick+0x27c>
                        else if (abs(m.v1) > abs(tvars->bemf_mv)+500) {
 801790e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8017912:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8017916:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 801791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801791c:	685b      	ldr	r3, [r3, #4]
 801791e:	2b00      	cmp	r3, #0
 8017920:	bfb8      	it	lt
 8017922:	425b      	neglt	r3, r3
 8017924:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8017928:	429a      	cmp	r2, r3
 801792a:	dd7b      	ble.n	8017a24 <spdctl_run_tick+0x27c>
                        	itm_debug3(DBG_SPDCTL|DBG_PRES, "c2_hi", tidx, m.v1, tvars->bemf_mv);
 801792c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8017930:	461a      	mov	r2, r3
 8017932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017934:	685b      	ldr	r3, [r3, #4]
 8017936:	9300      	str	r3, [sp, #0]
 8017938:	4613      	mov	r3, r2
 801793a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801793c:	494a      	ldr	r1, [pc, #296]	; (8017a68 <spdctl_run_tick+0x2c0>)
 801793e:	2050      	movs	r0, #80	; 0x50
 8017940:	f7ff fe74 	bl	801762c <itm_debug3>
                        	m.from = MA_TRAIN_SC(tidx);
 8017944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017946:	b25b      	sxtb	r3, r3
 8017948:	f003 0307 	and.w	r3, r3, #7
 801794c:	b25b      	sxtb	r3, r3
 801794e:	f063 0337 	orn	r3, r3, #55	; 0x37
 8017952:	b25b      	sxtb	r3, r3
 8017954:	b2db      	uxtb	r3, r3
 8017956:	747b      	strb	r3, [r7, #17]
                        	m.to = MA_CONTROL_T(tidx);
 8017958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801795a:	b25b      	sxtb	r3, r3
 801795c:	f003 0307 	and.w	r3, r3, #7
 8017960:	b25b      	sxtb	r3, r3
 8017962:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8017966:	b25b      	sxtb	r3, r3
 8017968:	b2db      	uxtb	r3, r3
 801796a:	743b      	strb	r3, [r7, #16]
                        	m.cmd = CMD_BEMF_DETECT_ON_C2;
 801796c:	2313      	movs	r3, #19
 801796e:	74bb      	strb	r3, [r7, #18]
                        	m.v1u = tvars->C2;
 8017970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017972:	7f5b      	ldrb	r3, [r3, #29]
 8017974:	b29b      	uxth	r3, r3
 8017976:	82bb      	strh	r3, [r7, #20]
                            mqf_write_from_spdctl(&m);
 8017978:	f107 0310 	add.w	r3, r7, #16
 801797c:	4618      	mov	r0, r3
 801797e:	f7ff febf 	bl	8017700 <mqf_write_from_spdctl>
                            tvars->c2bemf = 1;
 8017982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017984:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 8017988:	f043 0301 	orr.w	r3, r3, #1
 801798c:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
                    break;
 8017990:	e048      	b.n	8017a24 <spdctl_run_tick+0x27c>
                        itm_debug2(DBG_ERR|DBG_PID, "unk bemf", m.v1, m.from);
 8017992:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8017996:	461a      	mov	r2, r3
 8017998:	7e7b      	ldrb	r3, [r7, #25]
 801799a:	4934      	ldr	r1, [pc, #208]	; (8017a6c <spdctl_run_tick+0x2c4>)
 801799c:	4834      	ldr	r0, [pc, #208]	; (8017a70 <spdctl_run_tick+0x2c8>)
 801799e:	f7ff fe29 	bl	80175f4 <itm_debug2>
                    break;
 80179a2:	e03f      	b.n	8017a24 <spdctl_run_tick+0x27c>
                    itm_debug1(DBG_SPDCTL, "set_t_spd", m.v1u);
 80179a4:	8bbb      	ldrh	r3, [r7, #28]
 80179a6:	461a      	mov	r2, r3
 80179a8:	4932      	ldr	r1, [pc, #200]	; (8017a74 <spdctl_run_tick+0x2cc>)
 80179aa:	2010      	movs	r0, #16
 80179ac:	f7ff fe08 	bl	80175c0 <itm_debug1>
                    tvars->target_speed = (int16_t) m.v1u;
 80179b0:	8bbb      	ldrh	r3, [r7, #28]
 80179b2:	b21a      	sxth	r2, r3
 80179b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179b6:	801a      	strh	r2, [r3, #0]
                    break;
 80179b8:	e035      	b.n	8017a26 <spdctl_run_tick+0x27e>
                    itm_debug3(DBG_SPDCTL|DBG_CTRL, "set_c1_c2", tidx, m.vbytes[0], m.vbytes[2]);
 80179ba:	7f3b      	ldrb	r3, [r7, #28]
 80179bc:	461a      	mov	r2, r3
 80179be:	7fbb      	ldrb	r3, [r7, #30]
 80179c0:	9300      	str	r3, [sp, #0]
 80179c2:	4613      	mov	r3, r2
 80179c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80179c6:	492c      	ldr	r1, [pc, #176]	; (8017a78 <spdctl_run_tick+0x2d0>)
 80179c8:	f44f 6082 	mov.w	r0, #1040	; 0x410
 80179cc:	f7ff fe2e 	bl	801762c <itm_debug3>
                    set_c1_c2(tidx, tvars, m.vbytes[0], m.vbytes[1], m.vbytes[2], m.vbytes[3]);
 80179d0:	7f39      	ldrb	r1, [r7, #28]
 80179d2:	7f7b      	ldrb	r3, [r7, #29]
 80179d4:	b258      	sxtb	r0, r3
 80179d6:	7fbb      	ldrb	r3, [r7, #30]
 80179d8:	7ffa      	ldrb	r2, [r7, #31]
 80179da:	b252      	sxtb	r2, r2
 80179dc:	9201      	str	r2, [sp, #4]
 80179de:	9300      	str	r3, [sp, #0]
 80179e0:	4603      	mov	r3, r0
 80179e2:	460a      	mov	r2, r1
 80179e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80179e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80179e8:	f000 fac0 	bl	8017f6c <set_c1_c2>
                    break;
 80179ec:	e01b      	b.n	8017a26 <spdctl_run_tick+0x27e>
                	itm_debug2(DBG_POSEC, "POSE set", tidx, m.v32);
 80179ee:	69fb      	ldr	r3, [r7, #28]
 80179f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80179f2:	4922      	ldr	r1, [pc, #136]	; (8017a7c <spdctl_run_tick+0x2d4>)
 80179f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80179f8:	f7ff fdfc 	bl	80175f4 <itm_debug2>
                	tvars->pose_trig = m.v32*10;
 80179fc:	69fa      	ldr	r2, [r7, #28]
 80179fe:	4613      	mov	r3, r2
 8017a00:	009b      	lsls	r3, r3, #2
 8017a02:	4413      	add	r3, r2
 8017a04:	005b      	lsls	r3, r3, #1
 8017a06:	461a      	mov	r2, r3
 8017a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a0a:	62da      	str	r2, [r3, #44]	; 0x2c
                	pose_check_trig(tidx, tvars, 0);
 8017a0c:	2200      	movs	r2, #0
 8017a0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017a10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017a12:	f000 fc4f 	bl	80182b4 <pose_check_trig>
                	break;
 8017a16:	e006      	b.n	8017a26 <spdctl_run_tick+0x27e>
        	continue;
 8017a18:	bf00      	nop
 8017a1a:	e6e2      	b.n	80177e2 <spdctl_run_tick+0x3a>
        }
 8017a1c:	bf00      	nop
 8017a1e:	e6e0      	b.n	80177e2 <spdctl_run_tick+0x3a>
                        break;
 8017a20:	bf00      	nop
 8017a22:	e6de      	b.n	80177e2 <spdctl_run_tick+0x3a>
                    break;
 8017a24:	bf00      	nop
	for (;;) {
 8017a26:	e6dc      	b.n	80177e2 <spdctl_run_tick+0x3a>
		//itm_debug1(DBG_SPDCTL, "------ pc", i);
		train_periodic_control(i, dt);
 8017a28:	6879      	ldr	r1, [r7, #4]
 8017a2a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017a2c:	f000 f828 	bl	8017a80 <train_periodic_control>
	for (int i=0; i<NUM_TRAINS; i++) {
 8017a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a32:	3301      	adds	r3, #1
 8017a34:	637b      	str	r3, [r7, #52]	; 0x34
 8017a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a38:	2b07      	cmp	r3, #7
 8017a3a:	ddf5      	ble.n	8017a28 <spdctl_run_tick+0x280>
	}
}
 8017a3c:	bf00      	nop
 8017a3e:	3738      	adds	r7, #56	; 0x38
 8017a40:	46bd      	mov	sp, r7
 8017a42:	bd80      	pop	{r7, pc}
 8017a44:	200053e8 	.word	0x200053e8
 8017a48:	200053ec 	.word	0x200053ec
 8017a4c:	08019cf4 	.word	0x08019cf4
 8017a50:	2000059c 	.word	0x2000059c
 8017a54:	200053de 	.word	0x200053de
 8017a58:	200053df 	.word	0x200053df
 8017a5c:	200053f0 	.word	0x200053f0
 8017a60:	08019d00 	.word	0x08019d00
 8017a64:	08019d08 	.word	0x08019d08
 8017a68:	08019d10 	.word	0x08019d10
 8017a6c:	08019d18 	.word	0x08019d18
 8017a70:	80000004 	.word	0x80000004
 8017a74:	08019d24 	.word	0x08019d24
 8017a78:	08019d30 	.word	0x08019d30
 8017a7c:	08019d3c 	.word	0x08019d3c

08017a80 <train_periodic_control>:
    


static void train_periodic_control(int numtrain, uint32_t dt)
{
 8017a80:	b580      	push	{r7, lr}
 8017a82:	b096      	sub	sp, #88	; 0x58
 8017a84:	af02      	add	r7, sp, #8
 8017a86:	6078      	str	r0, [r7, #4]
 8017a88:	6039      	str	r1, [r7, #0]
	if (stop_all) return;
 8017a8a:	4b73      	ldr	r3, [pc, #460]	; (8017c58 <train_periodic_control+0x1d8>)
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	f040 8250 	bne.w	8017f34 <train_periodic_control+0x4b4>


	USE_TRAIN(numtrain)	// tconf tvars
 8017a94:	6878      	ldr	r0, [r7, #4]
 8017a96:	f7fe fab3 	bl	8016000 <get_train_cnf>
 8017a9a:	6438      	str	r0, [r7, #64]	; 0x40
 8017a9c:	687a      	ldr	r2, [r7, #4]
 8017a9e:	4613      	mov	r3, r2
 8017aa0:	00db      	lsls	r3, r3, #3
 8017aa2:	1a9b      	subs	r3, r3, r2
 8017aa4:	00db      	lsls	r3, r3, #3
 8017aa6:	4a6d      	ldr	r2, [pc, #436]	; (8017c5c <train_periodic_control+0x1dc>)
 8017aa8:	4413      	add	r3, r2
 8017aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (!tconf) {
 8017aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	f000 8242 	beq.w	8017f38 <train_periodic_control+0x4b8>
        if ((0)) itm_debug1(DBG_SPDCTL, "unconf tr", numtrain);
        return;
    }
	if (!tconf->enabled) {
 8017ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ab6:	7c9b      	ldrb	r3, [r3, #18]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	f000 823f 	beq.w	8017f3c <train_periodic_control+0x4bc>
		//itm_debug1(DBG_SPDCTL, "disabled", numtrain);
		return;
	}
	int16_t v = tvars->target_speed;
 8017abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ac0:	881b      	ldrh	r3, [r3, #0]
 8017ac2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	itm_debug2(DBG_SPDCTL, "target", numtrain, v);
 8017ac6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8017aca:	687a      	ldr	r2, [r7, #4]
 8017acc:	4964      	ldr	r1, [pc, #400]	; (8017c60 <train_periodic_control+0x1e0>)
 8017ace:	2010      	movs	r0, #16
 8017ad0:	f7ff fd90 	bl	80175f4 <itm_debug2>


    // inertia before PID
	if (1==tconf->enable_inertia) {
 8017ad4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ad6:	7c5b      	ldrb	r3, [r3, #17]
 8017ad8:	2b01      	cmp	r3, #1
 8017ada:	d126      	bne.n	8017b2a <train_periodic_control+0xaa>
		int changed;
		inertia_set_target(numtrain, &tconf->inertiacnf, &tvars->inertiavars, tvars->target_speed);
 8017adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ade:	f103 010c 	add.w	r1, r3, #12
 8017ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ae4:	f103 0218 	add.w	r2, r3, #24
 8017ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017aee:	6878      	ldr	r0, [r7, #4]
 8017af0:	f7ff fe16 	bl	8017720 <inertia_set_target>
		//tvars->inertiavars.target = tvars->target_speed;
		v = inertia_value(numtrain, &tconf->inertiacnf, &tvars->inertiavars, &changed);
 8017af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017af6:	f103 010c 	add.w	r1, r3, #12
 8017afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017afc:	f103 0218 	add.w	r2, r3, #24
 8017b00:	f107 0318 	add.w	r3, r7, #24
 8017b04:	6878      	ldr	r0, [r7, #4]
 8017b06:	f7ff faf5 	bl	80170f4 <inertia_value>
 8017b0a:	4603      	mov	r3, r0
 8017b0c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		itm_debug3(DBG_INERTIA, "inertia", numtrain, tvars->target_speed, v);
 8017b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017b16:	461a      	mov	r2, r3
 8017b18:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8017b1c:	9300      	str	r3, [sp, #0]
 8017b1e:	4613      	mov	r3, r2
 8017b20:	687a      	ldr	r2, [r7, #4]
 8017b22:	4950      	ldr	r1, [pc, #320]	; (8017c64 <train_periodic_control+0x1e4>)
 8017b24:	2008      	movs	r0, #8
 8017b26:	f7ff fd81 	bl	801762c <itm_debug3>
	}
    

    if (tconf->enable_pid) {
 8017b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b2c:	7cdb      	ldrb	r3, [r3, #19]
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d01e      	beq.n	8017b70 <train_periodic_control+0xf0>
        // corresponding BEMF target
        // 100% = 1.5V
        int32_t tbemf = 1500*v/10 * tvars->C1_dir;
 8017b32:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8017b36:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8017b3a:	fb02 f303 	mul.w	r3, r2, r3
 8017b3e:	4a4a      	ldr	r2, [pc, #296]	; (8017c68 <train_periodic_control+0x1e8>)
 8017b40:	fb82 1203 	smull	r1, r2, r2, r3
 8017b44:	1092      	asrs	r2, r2, #2
 8017b46:	17db      	asrs	r3, r3, #31
 8017b48:	1ad3      	subs	r3, r2, r3
 8017b4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017b4c:	f992 201e 	ldrsb.w	r2, [r2, #30]
 8017b50:	fb02 f303 	mul.w	r3, r2, r3
 8017b54:	63bb      	str	r3, [r7, #56]	; 0x38
        tbemf = tbemf / 4; //XXX why ?? new cables (more capacitance ?)
 8017b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	da00      	bge.n	8017b5e <train_periodic_control+0xde>
 8017b5c:	3303      	adds	r3, #3
 8017b5e:	109b      	asrs	r3, r3, #2
 8017b60:	63bb      	str	r3, [r7, #56]	; 0x38
        // TODO make this divisor a parameter
        pidctl_set_target(&tconf->pidcnf, &tvars->pidvars, tbemf);
 8017b62:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8017b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b66:	3308      	adds	r3, #8
 8017b68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017b6a:	4619      	mov	r1, r3
 8017b6c:	f7ff fc68 	bl	8017440 <pidctl_set_target>
        // XXXX notif_target_bemf(tconf, tvars, tbemf);
    }

    int32_t bemf_mv = tvars->bemf_mv;
 8017b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b72:	685b      	ldr	r3, [r3, #4]
 8017b74:	64bb      	str	r3, [r7, #72]	; 0x48
    if (tconf->bemfIIR) {
 8017b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b78:	7d9b      	ldrb	r3, [r3, #22]
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d017      	beq.n	8017bae <train_periodic_control+0x12e>
    	tvars->bemfiir = (80*tvars->bemfiir + 20*bemf_mv)/100;
 8017b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017b82:	4613      	mov	r3, r2
 8017b84:	009b      	lsls	r3, r3, #2
 8017b86:	4413      	add	r3, r2
 8017b88:	011b      	lsls	r3, r3, #4
 8017b8a:	4619      	mov	r1, r3
 8017b8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017b8e:	4613      	mov	r3, r2
 8017b90:	009b      	lsls	r3, r3, #2
 8017b92:	4413      	add	r3, r2
 8017b94:	009b      	lsls	r3, r3, #2
 8017b96:	440b      	add	r3, r1
 8017b98:	4a34      	ldr	r2, [pc, #208]	; (8017c6c <train_periodic_control+0x1ec>)
 8017b9a:	fb82 1203 	smull	r1, r2, r2, r3
 8017b9e:	1152      	asrs	r2, r2, #5
 8017ba0:	17db      	asrs	r3, r3, #31
 8017ba2:	1ad2      	subs	r2, r2, r3
 8017ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ba6:	631a      	str	r2, [r3, #48]	; 0x30
    	bemf_mv = tvars->bemfiir;
 8017ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017bac:	64bb      	str	r3, [r7, #72]	; 0x48
    }
    if (tconf->enable_pid) {
 8017bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017bb0:	7cdb      	ldrb	r3, [r3, #19]
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	f000 80b9 	beq.w	8017d2a <train_periodic_control+0x2aa>
    	if (tvars->target_speed) {
 8017bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017bba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d004      	beq.n	8017bcc <train_periodic_control+0x14c>
    		tvars->pidvars.stopped = 0;
 8017bc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017bc4:	7d13      	ldrb	r3, [r2, #20]
 8017bc6:	f36f 0341 	bfc	r3, #1, #1
 8017bca:	7513      	strb	r3, [r2, #20]
    	}
        if (!tvars->pidvars.stopped && (tvars->target_speed == 0) && (abs(tvars->bemf_mv)<100)) {
 8017bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017bce:	7d1b      	ldrb	r3, [r3, #20]
 8017bd0:	f003 0302 	and.w	r3, r3, #2
 8017bd4:	b2db      	uxtb	r3, r3
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d12c      	bne.n	8017c34 <train_periodic_control+0x1b4>
 8017bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017bdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d127      	bne.n	8017c34 <train_periodic_control+0x1b4>
 8017be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017be6:	685b      	ldr	r3, [r3, #4]
 8017be8:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8017bec:	db22      	blt.n	8017c34 <train_periodic_control+0x1b4>
 8017bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017bf0:	685b      	ldr	r3, [r3, #4]
 8017bf2:	2b63      	cmp	r3, #99	; 0x63
 8017bf4:	dc1e      	bgt.n	8017c34 <train_periodic_control+0x1b4>
    		itm_debug1(DBG_PID, "stop", 0);
 8017bf6:	2200      	movs	r2, #0
 8017bf8:	491d      	ldr	r1, [pc, #116]	; (8017c70 <train_periodic_control+0x1f0>)
 8017bfa:	2004      	movs	r0, #4
 8017bfc:	f7ff fce0 	bl	80175c0 <itm_debug1>
			pidctl_reset(&tconf->pidcnf, &tvars->pidvars);
 8017c00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c04:	3308      	adds	r3, #8
 8017c06:	4619      	mov	r1, r3
 8017c08:	4610      	mov	r0, r2
 8017c0a:	f7ff fbf5 	bl	80173f8 <pidctl_reset>
			debug_info('T', numtrain, "STOP_PID", 0,0, 0);
 8017c0e:	6879      	ldr	r1, [r7, #4]
 8017c10:	2300      	movs	r3, #0
 8017c12:	9301      	str	r3, [sp, #4]
 8017c14:	2300      	movs	r3, #0
 8017c16:	9300      	str	r3, [sp, #0]
 8017c18:	2300      	movs	r3, #0
 8017c1a:	4a16      	ldr	r2, [pc, #88]	; (8017c74 <train_periodic_control+0x1f4>)
 8017c1c:	2054      	movs	r0, #84	; 0x54
 8017c1e:	f7ff fd45 	bl	80176ac <debug_info>
			tvars->pidvars.stopped = 1;
 8017c22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017c24:	7d13      	ldrb	r3, [r2, #20]
 8017c26:	f043 0302 	orr.w	r3, r3, #2
 8017c2a:	7513      	strb	r3, [r2, #20]
        	v = 0;
 8017c2c:	2300      	movs	r3, #0
 8017c2e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8017c32:	e07a      	b.n	8017d2a <train_periodic_control+0x2aa>
        } else if (tvars->pidvars.stopped) {
 8017c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c36:	7d1b      	ldrb	r3, [r3, #20]
 8017c38:	f003 0302 	and.w	r3, r3, #2
 8017c3c:	b2db      	uxtb	r3, r3
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d01c      	beq.n	8017c7c <train_periodic_control+0x1fc>
    		itm_debug2(DBG_PID, "stopped", numtrain, v);
 8017c42:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8017c46:	687a      	ldr	r2, [r7, #4]
 8017c48:	490b      	ldr	r1, [pc, #44]	; (8017c78 <train_periodic_control+0x1f8>)
 8017c4a:	2004      	movs	r0, #4
 8017c4c:	f7ff fcd2 	bl	80175f4 <itm_debug2>
        	v = 0;
 8017c50:	2300      	movs	r3, #0
 8017c52:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8017c56:	e068      	b.n	8017d2a <train_periodic_control+0x2aa>
 8017c58:	200053e0 	.word	0x200053e0
 8017c5c:	200053f0 	.word	0x200053f0
 8017c60:	08019d48 	.word	0x08019d48
 8017c64:	08019d50 	.word	0x08019d50
 8017c68:	66666667 	.word	0x66666667
 8017c6c:	51eb851f 	.word	0x51eb851f
 8017c70:	08019d58 	.word	0x08019d58
 8017c74:	08019d60 	.word	0x08019d60
 8017c78:	08019d6c 	.word	0x08019d6c
        } else {
        	itm_debug3(DBG_PID, "pid", numtrain, bemf_mv, v);
 8017c7c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8017c80:	9300      	str	r3, [sp, #0]
 8017c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017c84:	687a      	ldr	r2, [r7, #4]
 8017c86:	49af      	ldr	r1, [pc, #700]	; (8017f44 <train_periodic_control+0x4c4>)
 8017c88:	2004      	movs	r0, #4
 8017c8a:	f7ff fccf 	bl	801762c <itm_debug3>
        	if (bemf_mv>MAX_PID_VALUE)  {
 8017c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017c90:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8017c94:	4293      	cmp	r3, r2
 8017c96:	dd0b      	ble.n	8017cb0 <train_periodic_control+0x230>
        		itm_debug3(DBG_PID|DBG_SPDCTL, "MAX_PID", numtrain, bemf_mv, MAX_PID_VALUE);
 8017c98:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8017c9c:	9300      	str	r3, [sp, #0]
 8017c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017ca0:	687a      	ldr	r2, [r7, #4]
 8017ca2:	49a9      	ldr	r1, [pc, #676]	; (8017f48 <train_periodic_control+0x4c8>)
 8017ca4:	2014      	movs	r0, #20
 8017ca6:	f7ff fcc1 	bl	801762c <itm_debug3>
        		bemf_mv = MAX_PID_VALUE; // XXX
 8017caa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8017cae:	64bb      	str	r3, [r7, #72]	; 0x48
        	}
        	if (bemf_mv<-MAX_PID_VALUE) {
 8017cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017cb2:	4aa6      	ldr	r2, [pc, #664]	; (8017f4c <train_periodic_control+0x4cc>)
 8017cb4:	4293      	cmp	r3, r2
 8017cb6:	da0a      	bge.n	8017cce <train_periodic_control+0x24e>
        		itm_debug3(DBG_PID|DBG_SPDCTL, "MAX_PID", numtrain, bemf_mv, MAX_PID_VALUE);
 8017cb8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8017cbc:	9300      	str	r3, [sp, #0]
 8017cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017cc0:	687a      	ldr	r2, [r7, #4]
 8017cc2:	49a1      	ldr	r1, [pc, #644]	; (8017f48 <train_periodic_control+0x4c8>)
 8017cc4:	2014      	movs	r0, #20
 8017cc6:	f7ff fcb1 	bl	801762c <itm_debug3>
        		bemf_mv = -MAX_PID_VALUE;
 8017cca:	4ba0      	ldr	r3, [pc, #640]	; (8017f4c <train_periodic_control+0x4cc>)
 8017ccc:	64bb      	str	r3, [r7, #72]	; 0x48
        	}

        	int32_t v2 = pidctl_value(&tconf->pidcnf, &tvars->pidvars, bemf_mv)/10; //XXX
 8017cce:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8017cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017cd2:	3308      	adds	r3, #8
 8017cd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017cd6:	4619      	mov	r1, r3
 8017cd8:	f7ff fbc6 	bl	8017468 <pidctl_value>
 8017cdc:	4603      	mov	r3, r0
 8017cde:	4a9c      	ldr	r2, [pc, #624]	; (8017f50 <train_periodic_control+0x4d0>)
 8017ce0:	fb82 1203 	smull	r1, r2, r2, r3
 8017ce4:	1092      	asrs	r2, r2, #2
 8017ce6:	17db      	asrs	r3, r3, #31
 8017ce8:	1ad3      	subs	r3, r2, r3
 8017cea:	637b      	str	r3, [r7, #52]	; 0x34
        	int32_t v3;
        	v3 = (v2>100) ? 100 : v2;
 8017cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017cee:	2b64      	cmp	r3, #100	; 0x64
 8017cf0:	bfa8      	it	ge
 8017cf2:	2364      	movge	r3, #100	; 0x64
 8017cf4:	633b      	str	r3, [r7, #48]	; 0x30
        	v3 = (v3<-100) ? -100: v3;
 8017cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cf8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8017cfc:	4293      	cmp	r3, r2
 8017cfe:	bfb8      	it	lt
 8017d00:	4613      	movlt	r3, r2
 8017d02:	633b      	str	r3, [r7, #48]	; 0x30
        	itm_debug3(DBG_PID, "pid/r", numtrain, v3, v2);
 8017d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d06:	9300      	str	r3, [sp, #0]
 8017d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d0a:	687a      	ldr	r2, [r7, #4]
 8017d0c:	4991      	ldr	r1, [pc, #580]	; (8017f54 <train_periodic_control+0x4d4>)
 8017d0e:	2004      	movs	r0, #4
 8017d10:	f7ff fc8c 	bl	801762c <itm_debug3>
        	v = (int16_t)v3 * tvars->C1_dir; // because it will be multiplied again when setting pwm
 8017d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d16:	b29a      	uxth	r2, r3
 8017d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d1a:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8017d1e:	b29b      	uxth	r3, r3
 8017d20:	fb12 f303 	smulbb	r3, r2, r3
 8017d24:	b29b      	uxth	r3, r3
 8017d26:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        }
    }
    if (tconf->postIIR) {
 8017d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d2c:	7ddb      	ldrb	r3, [r3, #23]
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d01c      	beq.n	8017d6c <train_periodic_control+0x2ec>
        tvars->v_iir = (80*tvars->v_iir+20*v)/100;
 8017d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d34:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8017d38:	461a      	mov	r2, r3
 8017d3a:	4613      	mov	r3, r2
 8017d3c:	009b      	lsls	r3, r3, #2
 8017d3e:	4413      	add	r3, r2
 8017d40:	011b      	lsls	r3, r3, #4
 8017d42:	4619      	mov	r1, r3
 8017d44:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8017d48:	4613      	mov	r3, r2
 8017d4a:	009b      	lsls	r3, r3, #2
 8017d4c:	4413      	add	r3, r2
 8017d4e:	009b      	lsls	r3, r3, #2
 8017d50:	440b      	add	r3, r1
 8017d52:	4a81      	ldr	r2, [pc, #516]	; (8017f58 <train_periodic_control+0x4d8>)
 8017d54:	fb82 1203 	smull	r1, r2, r2, r3
 8017d58:	1152      	asrs	r2, r2, #5
 8017d5a:	17db      	asrs	r3, r3, #31
 8017d5c:	1ad3      	subs	r3, r2, r3
 8017d5e:	b21a      	sxth	r2, r3
 8017d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d62:	869a      	strh	r2, [r3, #52]	; 0x34
        v = tvars->v_iir;
 8017d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d66:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8017d68:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }
    // or inertia after PID
    if (2==tconf->enable_inertia) {
 8017d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d6e:	7c5b      	ldrb	r3, [r3, #17]
 8017d70:	2b02      	cmp	r3, #2
 8017d72:	d117      	bne.n	8017da4 <train_periodic_control+0x324>
		inertia_set_target(numtrain, &tconf->inertiacnf, &tvars->inertiavars, v);
 8017d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d76:	f103 010c 	add.w	r1, r3, #12
 8017d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d7c:	f103 0218 	add.w	r2, r3, #24
 8017d80:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8017d84:	6878      	ldr	r0, [r7, #4]
 8017d86:	f7ff fccb 	bl	8017720 <inertia_set_target>
        //tvars->inertiavars.target = v;
        v = inertia_value(numtrain, &tconf->inertiacnf, &tvars->inertiavars, NULL);
 8017d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d8c:	f103 010c 	add.w	r1, r3, #12
 8017d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d92:	f103 0218 	add.w	r2, r3, #24
 8017d96:	2300      	movs	r3, #0
 8017d98:	6878      	ldr	r0, [r7, #4]
 8017d9a:	f7ff f9ab 	bl	80170f4 <inertia_value>
 8017d9e:	4603      	mov	r3, r0
 8017da0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }

    if (tconf->en_spd2pow) {
 8017da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017da6:	7e5b      	ldrb	r3, [r3, #25]
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d02d      	beq.n	8017e08 <train_periodic_control+0x388>
    	// [0-100] -> [min_pwm .. MAX_PWM]
    	int s = SIGNOF(v);
 8017dac:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	da02      	bge.n	8017dba <train_periodic_control+0x33a>
 8017db4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017db8:	e000      	b.n	8017dbc <train_periodic_control+0x33c>
 8017dba:	2301      	movs	r3, #1
 8017dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    	int a = abs(v);
 8017dbe:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	bfb8      	it	lt
 8017dc6:	425b      	neglt	r3, r3
 8017dc8:	62bb      	str	r3, [r7, #40]	; 0x28
    	int v2 = (a>1) ? a * (MAX_PWM-tconf->min_power)/100 + tconf->min_power : 0;
 8017dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dcc:	2b01      	cmp	r3, #1
 8017dce:	dd10      	ble.n	8017df2 <train_periodic_control+0x372>
 8017dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017dd2:	7e9b      	ldrb	r3, [r3, #26]
 8017dd4:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8017dd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017dda:	fb02 f303 	mul.w	r3, r2, r3
 8017dde:	4a5e      	ldr	r2, [pc, #376]	; (8017f58 <train_periodic_control+0x4d8>)
 8017de0:	fb82 1203 	smull	r1, r2, r2, r3
 8017de4:	1152      	asrs	r2, r2, #5
 8017de6:	17db      	asrs	r3, r3, #31
 8017de8:	1ad3      	subs	r3, r2, r3
 8017dea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017dec:	7e92      	ldrb	r2, [r2, #26]
 8017dee:	4413      	add	r3, r2
 8017df0:	e000      	b.n	8017df4 <train_periodic_control+0x374>
 8017df2:	2300      	movs	r3, #0
 8017df4:	627b      	str	r3, [r7, #36]	; 0x24
    	v = s * v2;
 8017df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017df8:	b29a      	uxth	r2, r3
 8017dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dfc:	b29b      	uxth	r3, r3
 8017dfe:	fb12 f303 	smulbb	r3, r2, r3
 8017e02:	b29b      	uxth	r3, r3
 8017e04:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    }

    int changed = (tvars->last_speed != v);
 8017e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017e0a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8017e0e:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8017e12:	429a      	cmp	r2, r3
 8017e14:	bf14      	ite	ne
 8017e16:	2301      	movne	r3, #1
 8017e18:	2300      	moveq	r3, #0
 8017e1a:	b2db      	uxtb	r3, r3
 8017e1c:	623b      	str	r3, [r7, #32]
    tvars->last_speed = v;
 8017e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017e20:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8017e24:	841a      	strh	r2, [r3, #32]

    itm_debug3(DBG_PID|DBG_SPDCTL, "spd", numtrain, v, changed);
 8017e26:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	; 0x4e
 8017e2a:	6a3b      	ldr	r3, [r7, #32]
 8017e2c:	9300      	str	r3, [sp, #0]
 8017e2e:	4613      	mov	r3, r2
 8017e30:	687a      	ldr	r2, [r7, #4]
 8017e32:	494a      	ldr	r1, [pc, #296]	; (8017f5c <train_periodic_control+0x4dc>)
 8017e34:	2014      	movs	r0, #20
 8017e36:	f7ff fbf9 	bl	801762c <itm_debug3>

    if (changed) {
 8017e3a:	6a3b      	ldr	r3, [r7, #32]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d01a      	beq.n	8017e76 <train_periodic_control+0x3f6>
    	_set_speed(numtrain, tconf, tvars);
 8017e40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017e42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017e44:	6878      	ldr	r0, [r7, #4]
 8017e46:	f000 f959 	bl	80180fc <_set_speed>
        if ((1)) { // TODO remove
            msg_64_t m;
            m.from = MA_TRAIN_SC(numtrain);
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	b25b      	sxtb	r3, r3
 8017e4e:	f003 0307 	and.w	r3, r3, #7
 8017e52:	b25b      	sxtb	r3, r3
 8017e54:	f063 0337 	orn	r3, r3, #55	; 0x37
 8017e58:	b25b      	sxtb	r3, r3
 8017e5a:	b2db      	uxtb	r3, r3
 8017e5c:	747b      	strb	r3, [r7, #17]
            m.to = MA_UI(0);
 8017e5e:	2380      	movs	r3, #128	; 0x80
 8017e60:	743b      	strb	r3, [r7, #16]
            m.cmd = CMD_NOTIF_SPEED;
 8017e62:	23a0      	movs	r3, #160	; 0xa0
 8017e64:	74bb      	strb	r3, [r7, #18]
            m.v1 = v;
 8017e66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8017e6a:	82bb      	strh	r3, [r7, #20]
            mqf_write_from_spdctl(&m);
 8017e6c:	f107 0310 	add.w	r3, r7, #16
 8017e70:	4618      	mov	r0, r3
 8017e72:	f7ff fc45 	bl	8017700 <mqf_write_from_spdctl>
        }
    }
    if (tconf->notify_speed) { // to be removed
 8017e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017e78:	7d1b      	ldrb	r3, [r3, #20]
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d017      	beq.n	8017eae <train_periodic_control+0x42e>
    	struct spd_notif n;
    	n.sv100 = v;
 8017e7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8017e82:	813b      	strh	r3, [r7, #8]
    	n.pid_target = tvars->pidvars.target_v;
 8017e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017e86:	691b      	ldr	r3, [r3, #16]
 8017e88:	b21b      	sxth	r3, r3
 8017e8a:	817b      	strh	r3, [r7, #10]
    	//canton_vars_t *cv1 = get_canton_vars(tvars->current_canton);
    	n.bemf_centivolt = tvars->bemf_mv/10; //cv1->bemf_centivolt;
 8017e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017e8e:	685b      	ldr	r3, [r3, #4]
 8017e90:	4a2f      	ldr	r2, [pc, #188]	; (8017f50 <train_periodic_control+0x4d0>)
 8017e92:	fb82 1203 	smull	r1, r2, r2, r3
 8017e96:	1092      	asrs	r2, r2, #2
 8017e98:	17db      	asrs	r3, r3, #31
 8017e9a:	1ad3      	subs	r3, r2, r3
 8017e9c:	60fb      	str	r3, [r7, #12]
    	train_notif(numtrain, 'V', (void *)&n, sizeof(n));
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	b2d8      	uxtb	r0, r3
 8017ea2:	f107 0208 	add.w	r2, r7, #8
 8017ea6:	2308      	movs	r3, #8
 8017ea8:	2156      	movs	r1, #86	; 0x56
 8017eaa:	f7ff fbea 	bl	8017682 <train_notif>
    }

    /* estimate speed/position with bemf */
    if ((1)) {
        int32_t b = tvars->bemf_mv;
 8017eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017eb0:	685b      	ldr	r3, [r3, #4]
 8017eb2:	647b      	str	r3, [r7, #68]	; 0x44
        if (abs(b)<100) b = 0; // XXX XXXX
 8017eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017eb6:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8017eba:	db04      	blt.n	8017ec6 <train_periodic_control+0x446>
 8017ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017ebe:	2b63      	cmp	r3, #99	; 0x63
 8017ec0:	dc01      	bgt.n	8017ec6 <train_periodic_control+0x446>
 8017ec2:	2300      	movs	r3, #0
 8017ec4:	647b      	str	r3, [r7, #68]	; 0x44

        // TODO: BEMF to speed. currently part of it is done in convert_to_centivolt
        //       but we assume speed is really proportional to BEMF

        //  dt is not precise enough
        int32_t pi = (b*100)/cur_freqhz;
 8017ec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017ec8:	2264      	movs	r2, #100	; 0x64
 8017eca:	fb02 f203 	mul.w	r2, r2, r3
 8017ece:	4b24      	ldr	r3, [pc, #144]	; (8017f60 <train_periodic_control+0x4e0>)
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	fb92 f3f3 	sdiv	r3, r2, r3
 8017ed6:	61fb      	str	r3, [r7, #28]
        tvars->position_estimate += pi;
 8017ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017eda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017edc:	69fb      	ldr	r3, [r7, #28]
 8017ede:	441a      	add	r2, r3
 8017ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ee2:	629a      	str	r2, [r3, #40]	; 0x28
        itm_debug3(DBG_POSE, "pose", numtrain, tvars->position_estimate, b);
 8017ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ee6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017eea:	9300      	str	r3, [sp, #0]
 8017eec:	4613      	mov	r3, r2
 8017eee:	687a      	ldr	r2, [r7, #4]
 8017ef0:	491c      	ldr	r1, [pc, #112]	; (8017f64 <train_periodic_control+0x4e4>)
 8017ef2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8017ef6:	f7ff fb99 	bl	801762c <itm_debug3>
        itm_debug3(DBG_POSE, "pi", b, dt,  pi);
 8017efa:	683a      	ldr	r2, [r7, #0]
 8017efc:	69fb      	ldr	r3, [r7, #28]
 8017efe:	9300      	str	r3, [sp, #0]
 8017f00:	4613      	mov	r3, r2
 8017f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017f04:	4918      	ldr	r1, [pc, #96]	; (8017f68 <train_periodic_control+0x4e8>)
 8017f06:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8017f0a:	f7ff fb8f 	bl	801762c <itm_debug3>

        pose_check_trig(numtrain, tvars, b);
 8017f0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017f10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017f12:	6878      	ldr	r0, [r7, #4]
 8017f14:	f000 f9ce 	bl	80182b4 <pose_check_trig>
        if (tconf->notify_pose) {
 8017f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017f1a:	7d5b      	ldrb	r3, [r3, #21]
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d00e      	beq.n	8017f3e <train_periodic_control+0x4be>
    		train_notif(numtrain, 'i', (void *)&tvars->position_estimate, sizeof(int32_t));
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	b2d8      	uxtb	r0, r3
 8017f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017f26:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8017f2a:	2304      	movs	r3, #4
 8017f2c:	2169      	movs	r1, #105	; 0x69
 8017f2e:	f7ff fba8 	bl	8017682 <train_notif>
 8017f32:	e004      	b.n	8017f3e <train_periodic_control+0x4be>
	if (stop_all) return;
 8017f34:	bf00      	nop
 8017f36:	e002      	b.n	8017f3e <train_periodic_control+0x4be>
        return;
 8017f38:	bf00      	nop
 8017f3a:	e000      	b.n	8017f3e <train_periodic_control+0x4be>
		return;
 8017f3c:	bf00      	nop
        }
    }
}
 8017f3e:	3750      	adds	r7, #80	; 0x50
 8017f40:	46bd      	mov	sp, r7
 8017f42:	bd80      	pop	{r7, pc}
 8017f44:	08019d74 	.word	0x08019d74
 8017f48:	08019d78 	.word	0x08019d78
 8017f4c:	fffff448 	.word	0xfffff448
 8017f50:	66666667 	.word	0x66666667
 8017f54:	08019d80 	.word	0x08019d80
 8017f58:	51eb851f 	.word	0x51eb851f
 8017f5c:	08019d88 	.word	0x08019d88
 8017f60:	200005a0 	.word	0x200005a0
 8017f64:	08019d8c 	.word	0x08019d8c
 8017f68:	08019d94 	.word	0x08019d94

08017f6c <set_c1_c2>:


static void set_c1_c2(int tidx, train_vars_t *tvars, uint8_t c1, int8_t dir1, uint8_t c2, int8_t dir2)
{
 8017f6c:	b580      	push	{r7, lr}
 8017f6e:	b088      	sub	sp, #32
 8017f70:	af02      	add	r7, sp, #8
 8017f72:	60f8      	str	r0, [r7, #12]
 8017f74:	60b9      	str	r1, [r7, #8]
 8017f76:	4611      	mov	r1, r2
 8017f78:	461a      	mov	r2, r3
 8017f7a:	460b      	mov	r3, r1
 8017f7c:	71fb      	strb	r3, [r7, #7]
 8017f7e:	4613      	mov	r3, r2
 8017f80:	71bb      	strb	r3, [r7, #6]
	msg_64_t m;
	m.from = MA_TRAIN_SC(tidx);
 8017f82:	68fb      	ldr	r3, [r7, #12]
 8017f84:	b25b      	sxtb	r3, r3
 8017f86:	f003 0307 	and.w	r3, r3, #7
 8017f8a:	b25b      	sxtb	r3, r3
 8017f8c:	f063 0337 	orn	r3, r3, #55	; 0x37
 8017f90:	b25b      	sxtb	r3, r3
 8017f92:	b2db      	uxtb	r3, r3
 8017f94:	747b      	strb	r3, [r7, #17]

	itm_debug3(DBG_SPDCTL, "s-c1", tidx, c1, dir1);
 8017f96:	79fa      	ldrb	r2, [r7, #7]
 8017f98:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017f9c:	9300      	str	r3, [sp, #0]
 8017f9e:	4613      	mov	r3, r2
 8017fa0:	68fa      	ldr	r2, [r7, #12]
 8017fa2:	4953      	ldr	r1, [pc, #332]	; (80180f0 <set_c1_c2+0x184>)
 8017fa4:	2010      	movs	r0, #16
 8017fa6:	f7ff fb41 	bl	801762c <itm_debug3>
	itm_debug3(DBG_SPDCTL, "s-c2", tidx, c2, dir2);
 8017faa:	f897 2020 	ldrb.w	r2, [r7, #32]
 8017fae:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8017fb2:	9300      	str	r3, [sp, #0]
 8017fb4:	4613      	mov	r3, r2
 8017fb6:	68fa      	ldr	r2, [r7, #12]
 8017fb8:	494e      	ldr	r1, [pc, #312]	; (80180f4 <set_c1_c2+0x188>)
 8017fba:	2010      	movs	r0, #16
 8017fbc:	f7ff fb36 	bl	801762c <itm_debug3>

	tvars->c2bemf = 0;
 8017fc0:	68ba      	ldr	r2, [r7, #8]
 8017fc2:	f892 3036 	ldrb.w	r3, [r2, #54]	; 0x36
 8017fc6:	f36f 0300 	bfc	r3, #0, #1
 8017fca:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36

	if ((tvars->C1 != 0xFF) && (tvars->C1 != c1)  && (tvars->C1 != c2)) {
 8017fce:	68bb      	ldr	r3, [r7, #8]
 8017fd0:	7f1b      	ldrb	r3, [r3, #28]
 8017fd2:	2bff      	cmp	r3, #255	; 0xff
 8017fd4:	d01b      	beq.n	801800e <set_c1_c2+0xa2>
 8017fd6:	68bb      	ldr	r3, [r7, #8]
 8017fd8:	7f1b      	ldrb	r3, [r3, #28]
 8017fda:	79fa      	ldrb	r2, [r7, #7]
 8017fdc:	429a      	cmp	r2, r3
 8017fde:	d016      	beq.n	801800e <set_c1_c2+0xa2>
 8017fe0:	68bb      	ldr	r3, [r7, #8]
 8017fe2:	7f1b      	ldrb	r3, [r3, #28]
 8017fe4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8017fe8:	429a      	cmp	r2, r3
 8017fea:	d010      	beq.n	801800e <set_c1_c2+0xa2>
		m.to = tvars->C1;
 8017fec:	68bb      	ldr	r3, [r7, #8]
 8017fee:	7f1b      	ldrb	r3, [r3, #28]
 8017ff0:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_STOP;
 8017ff2:	2302      	movs	r3, #2
 8017ff4:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8017ff6:	f107 0310 	add.w	r3, r7, #16
 8017ffa:	4618      	mov	r0, r3
 8017ffc:	f7ff fb80 	bl	8017700 <mqf_write_from_spdctl>
		m.cmd = CMD_BEMF_OFF;
 8018000:	2341      	movs	r3, #65	; 0x41
 8018002:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8018004:	f107 0310 	add.w	r3, r7, #16
 8018008:	4618      	mov	r0, r3
 801800a:	f7ff fb79 	bl	8017700 <mqf_write_from_spdctl>
	}
	if ((tvars->C2 != 0xFF) && (tvars->C2 != c1)  && (tvars->C2 != c2)) {
 801800e:	68bb      	ldr	r3, [r7, #8]
 8018010:	7f5b      	ldrb	r3, [r3, #29]
 8018012:	2bff      	cmp	r3, #255	; 0xff
 8018014:	d01b      	beq.n	801804e <set_c1_c2+0xe2>
 8018016:	68bb      	ldr	r3, [r7, #8]
 8018018:	7f5b      	ldrb	r3, [r3, #29]
 801801a:	79fa      	ldrb	r2, [r7, #7]
 801801c:	429a      	cmp	r2, r3
 801801e:	d016      	beq.n	801804e <set_c1_c2+0xe2>
 8018020:	68bb      	ldr	r3, [r7, #8]
 8018022:	7f5b      	ldrb	r3, [r3, #29]
 8018024:	f897 2020 	ldrb.w	r2, [r7, #32]
 8018028:	429a      	cmp	r2, r3
 801802a:	d010      	beq.n	801804e <set_c1_c2+0xe2>
		m.to = tvars->C2;
 801802c:	68bb      	ldr	r3, [r7, #8]
 801802e:	7f5b      	ldrb	r3, [r3, #29]
 8018030:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_STOP;
 8018032:	2302      	movs	r3, #2
 8018034:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8018036:	f107 0310 	add.w	r3, r7, #16
 801803a:	4618      	mov	r0, r3
 801803c:	f7ff fb60 	bl	8017700 <mqf_write_from_spdctl>
		m.cmd = CMD_BEMF_OFF;
 8018040:	2341      	movs	r3, #65	; 0x41
 8018042:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8018044:	f107 0310 	add.w	r3, r7, #16
 8018048:	4618      	mov	r0, r3
 801804a:	f7ff fb59 	bl	8017700 <mqf_write_from_spdctl>
	}
	if ((c1 != 0xFF) && (c1 != tvars->C1) && (c1 != tvars->C2)) {
 801804e:	79fb      	ldrb	r3, [r7, #7]
 8018050:	2bff      	cmp	r3, #255	; 0xff
 8018052:	d012      	beq.n	801807a <set_c1_c2+0x10e>
 8018054:	68bb      	ldr	r3, [r7, #8]
 8018056:	7f1b      	ldrb	r3, [r3, #28]
 8018058:	79fa      	ldrb	r2, [r7, #7]
 801805a:	429a      	cmp	r2, r3
 801805c:	d00d      	beq.n	801807a <set_c1_c2+0x10e>
 801805e:	68bb      	ldr	r3, [r7, #8]
 8018060:	7f5b      	ldrb	r3, [r3, #29]
 8018062:	79fa      	ldrb	r2, [r7, #7]
 8018064:	429a      	cmp	r2, r3
 8018066:	d008      	beq.n	801807a <set_c1_c2+0x10e>
		m.to = c1;
 8018068:	79fb      	ldrb	r3, [r7, #7]
 801806a:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_BEMF_ON;
 801806c:	2340      	movs	r3, #64	; 0x40
 801806e:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 8018070:	f107 0310 	add.w	r3, r7, #16
 8018074:	4618      	mov	r0, r3
 8018076:	f7ff fb43 	bl	8017700 <mqf_write_from_spdctl>
	}
	if ((c2 != 0xFF) && (c2 != tvars->C1) && (c2 != tvars->C2)) {
 801807a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801807e:	2bff      	cmp	r3, #255	; 0xff
 8018080:	d015      	beq.n	80180ae <set_c1_c2+0x142>
 8018082:	68bb      	ldr	r3, [r7, #8]
 8018084:	7f1b      	ldrb	r3, [r3, #28]
 8018086:	f897 2020 	ldrb.w	r2, [r7, #32]
 801808a:	429a      	cmp	r2, r3
 801808c:	d00f      	beq.n	80180ae <set_c1_c2+0x142>
 801808e:	68bb      	ldr	r3, [r7, #8]
 8018090:	7f5b      	ldrb	r3, [r3, #29]
 8018092:	f897 2020 	ldrb.w	r2, [r7, #32]
 8018096:	429a      	cmp	r2, r3
 8018098:	d009      	beq.n	80180ae <set_c1_c2+0x142>
		m.to = c2;
 801809a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801809e:	743b      	strb	r3, [r7, #16]
		m.cmd = CMD_BEMF_ON;
 80180a0:	2340      	movs	r3, #64	; 0x40
 80180a2:	74bb      	strb	r3, [r7, #18]
		mqf_write_from_spdctl(&m);
 80180a4:	f107 0310 	add.w	r3, r7, #16
 80180a8:	4618      	mov	r0, r3
 80180aa:	f7ff fb29 	bl	8017700 <mqf_write_from_spdctl>
	}
	tvars->C1 = c1;
 80180ae:	68bb      	ldr	r3, [r7, #8]
 80180b0:	79fa      	ldrb	r2, [r7, #7]
 80180b2:	771a      	strb	r2, [r3, #28]
	tvars->C1_dir = dir1;
 80180b4:	68bb      	ldr	r3, [r7, #8]
 80180b6:	79ba      	ldrb	r2, [r7, #6]
 80180b8:	779a      	strb	r2, [r3, #30]
	tvars->C2 = c2;
 80180ba:	68bb      	ldr	r3, [r7, #8]
 80180bc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80180c0:	775a      	strb	r2, [r3, #29]
	tvars->C2_dir = dir2;
 80180c2:	68bb      	ldr	r3, [r7, #8]
 80180c4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80180c8:	77da      	strb	r2, [r3, #31]
	tvars->last_speed = 9000; // make sure cmd is sent
 80180ca:	68bb      	ldr	r3, [r7, #8]
 80180cc:	f242 3228 	movw	r2, #9000	; 0x2328
 80180d0:	841a      	strh	r2, [r3, #32]
	itm_debug2(DBG_POSEC, "POS reset", tidx, tvars->position_estimate);
 80180d2:	68bb      	ldr	r3, [r7, #8]
 80180d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80180d6:	68fa      	ldr	r2, [r7, #12]
 80180d8:	4907      	ldr	r1, [pc, #28]	; (80180f8 <set_c1_c2+0x18c>)
 80180da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80180de:	f7ff fa89 	bl	80175f4 <itm_debug2>
	tvars->position_estimate = 0; // reset POSE
 80180e2:	68bb      	ldr	r3, [r7, #8]
 80180e4:	2200      	movs	r2, #0
 80180e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80180e8:	bf00      	nop
 80180ea:	3718      	adds	r7, #24
 80180ec:	46bd      	mov	sp, r7
 80180ee:	bd80      	pop	{r7, pc}
 80180f0:	08019d98 	.word	0x08019d98
 80180f4:	08019da0 	.word	0x08019da0
 80180f8:	08019da8 	.word	0x08019da8

080180fc <_set_speed>:



static void _set_speed(int tidx, const train_config_t *cnf, train_vars_t *vars)
{
 80180fc:	b580      	push	{r7, lr}
 80180fe:	b092      	sub	sp, #72	; 0x48
 8018100:	af02      	add	r7, sp, #8
 8018102:	60f8      	str	r0, [r7, #12]
 8018104:	60b9      	str	r1, [r7, #8]
 8018106:	607a      	str	r2, [r7, #4]
    const canton_config_t *c1;
    const canton_config_t *c2;


	int16_t sv100 = vars->last_speed;
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	8c1b      	ldrh	r3, [r3, #32]
 801810c:	87fb      	strh	r3, [r7, #62]	; 0x3e

    c1 =  get_canton_cnf(vars->C1);
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	7f1b      	ldrb	r3, [r3, #28]
 8018112:	4618      	mov	r0, r3
 8018114:	f7fd ff4c 	bl	8015fb0 <get_canton_cnf>
 8018118:	63b8      	str	r0, [r7, #56]	; 0x38
    c2 =  get_canton_cnf(vars->C2);
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	7f5b      	ldrb	r3, [r3, #29]
 801811e:	4618      	mov	r0, r3
 8018120:	f7fd ff46 	bl	8015fb0 <get_canton_cnf>
 8018124:	6378      	str	r0, [r7, #52]	; 0x34
    
    if (!c1) {
 8018126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018128:	2b00      	cmp	r3, #0
 801812a:	d10c      	bne.n	8018146 <_set_speed+0x4a>
    	itm_debug1(DBG_ERR|DBG_SPDCTL, "no canton", sv100);
 801812c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8018130:	461a      	mov	r2, r3
 8018132:	4947      	ldr	r1, [pc, #284]	; (8018250 <_set_speed+0x154>)
 8018134:	4847      	ldr	r0, [pc, #284]	; (8018254 <_set_speed+0x158>)
 8018136:	f7ff fa43 	bl	80175c0 <itm_debug1>
        train_error(ERR_CANTON_NONE, "no canton");
 801813a:	4945      	ldr	r1, [pc, #276]	; (8018250 <_set_speed+0x154>)
 801813c:	f06f 0064 	mvn.w	r0, #100	; 0x64
 8018140:	f7ff fa90 	bl	8017664 <train_error>
 8018144:	e080      	b.n	8018248 <_set_speed+0x14c>
        return;
    }

    int pvi1, pvi2;
    int sig = SIGNOF(sv100);
 8018146:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801814a:	2b00      	cmp	r3, #0
 801814c:	da02      	bge.n	8018154 <_set_speed+0x58>
 801814e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018152:	e000      	b.n	8018156 <_set_speed+0x5a>
 8018154:	2301      	movs	r3, #1
 8018156:	633b      	str	r3, [r7, #48]	; 0x30
    uint16_t v = abs(sv100);
 8018158:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 801815c:	2b00      	cmp	r3, #0
 801815e:	bfb8      	it	lt
 8018160:	425b      	neglt	r3, r3
 8018162:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t pwm_duty = volt_index(v*10 /* mili*/,
 8018164:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8018166:	461a      	mov	r2, r3
 8018168:	0092      	lsls	r2, r2, #2
 801816a:	4413      	add	r3, r2
 801816c:	005b      	lsls	r3, r3, #1
 801816e:	b298      	uxth	r0, r3
 8018170:	68bb      	ldr	r3, [r7, #8]
 8018172:	7c1b      	ldrb	r3, [r3, #16]
 8018174:	f107 0220 	add.w	r2, r7, #32
 8018178:	9301      	str	r3, [sp, #4]
 801817a:	f107 031c 	add.w	r3, r7, #28
 801817e:	9300      	str	r3, [sp, #0]
 8018180:	4613      	mov	r3, r2
 8018182:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018184:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018186:	f7fd f82d 	bl	80151e4 <volt_index>
 801818a:	4603      	mov	r3, r0
 801818c:	85bb      	strh	r3, [r7, #44]	; 0x2c
                                   c1, c2,
                                   &pvi1, &pvi2, cnf->volt_policy);

	int dir1 = sig * vars->C1_dir;
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8018194:	461a      	mov	r2, r3
 8018196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018198:	fb02 f303 	mul.w	r3, r2, r3
 801819c:	62bb      	str	r3, [r7, #40]	; 0x28
	int dir2 = sig * vars->C2_dir;
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	f993 301f 	ldrsb.w	r3, [r3, #31]
 80181a4:	461a      	mov	r2, r3
 80181a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181a8:	fb02 f303 	mul.w	r3, r2, r3
 80181ac:	627b      	str	r3, [r7, #36]	; 0x24


    msg_64_t m;
    m.from = MA_TRAIN_SC(tidx);
 80181ae:	68fb      	ldr	r3, [r7, #12]
 80181b0:	b25b      	sxtb	r3, r3
 80181b2:	f003 0307 	and.w	r3, r3, #7
 80181b6:	b25b      	sxtb	r3, r3
 80181b8:	f063 0337 	orn	r3, r3, #55	; 0x37
 80181bc:	b25b      	sxtb	r3, r3
 80181be:	b2db      	uxtb	r3, r3
 80181c0:	747b      	strb	r3, [r7, #17]
    m.cmd = CMD_SETVPWM;
 80181c2:	2301      	movs	r3, #1
 80181c4:	74bb      	strb	r3, [r7, #18]
    m.v1u = pvi1;
 80181c6:	6a3b      	ldr	r3, [r7, #32]
 80181c8:	b29b      	uxth	r3, r3
 80181ca:	82bb      	strh	r3, [r7, #20]
    m.v2 = dir1*pwm_duty;
 80181cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181ce:	b29b      	uxth	r3, r3
 80181d0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80181d2:	fb12 f303 	smulbb	r3, r2, r3
 80181d6:	b29b      	uxth	r3, r3
 80181d8:	b21b      	sxth	r3, r3
 80181da:	82fb      	strh	r3, [r7, #22]
    m.to = vars->C1;
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	7f1b      	ldrb	r3, [r3, #28]
 80181e0:	743b      	strb	r3, [r7, #16]
	itm_debug3(DBG_SPDCTL, "setvpwm", m.v1u, m.v2, m.to);
 80181e2:	8abb      	ldrh	r3, [r7, #20]
 80181e4:	461a      	mov	r2, r3
 80181e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80181ea:	4619      	mov	r1, r3
 80181ec:	7c3b      	ldrb	r3, [r7, #16]
 80181ee:	9300      	str	r3, [sp, #0]
 80181f0:	460b      	mov	r3, r1
 80181f2:	4919      	ldr	r1, [pc, #100]	; (8018258 <_set_speed+0x15c>)
 80181f4:	2010      	movs	r0, #16
 80181f6:	f7ff fa19 	bl	801762c <itm_debug3>
    mqf_write_from_spdctl(&m);
 80181fa:	f107 0310 	add.w	r3, r7, #16
 80181fe:	4618      	mov	r0, r3
 8018200:	f7ff fa7e 	bl	8017700 <mqf_write_from_spdctl>

    if (c2) {
 8018204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018206:	2b00      	cmp	r3, #0
 8018208:	d01e      	beq.n	8018248 <_set_speed+0x14c>
    	itm_debug3(DBG_SPDCTL, "setvpwm/c2", m.v1u, m.v2, m.to);
 801820a:	8abb      	ldrh	r3, [r7, #20]
 801820c:	461a      	mov	r2, r3
 801820e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018212:	4619      	mov	r1, r3
 8018214:	7c3b      	ldrb	r3, [r7, #16]
 8018216:	9300      	str	r3, [sp, #0]
 8018218:	460b      	mov	r3, r1
 801821a:	4910      	ldr	r1, [pc, #64]	; (801825c <_set_speed+0x160>)
 801821c:	2010      	movs	r0, #16
 801821e:	f7ff fa05 	bl	801762c <itm_debug3>
    	m.v1u = pvi2;
 8018222:	69fb      	ldr	r3, [r7, #28]
 8018224:	b29b      	uxth	r3, r3
 8018226:	82bb      	strh	r3, [r7, #20]
    	m.v2 = dir2*pwm_duty;
 8018228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801822a:	b29b      	uxth	r3, r3
 801822c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801822e:	fb12 f303 	smulbb	r3, r2, r3
 8018232:	b29b      	uxth	r3, r3
 8018234:	b21b      	sxth	r3, r3
 8018236:	82fb      	strh	r3, [r7, #22]
    	m.to = vars->C2;
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	7f5b      	ldrb	r3, [r3, #29]
 801823c:	743b      	strb	r3, [r7, #16]
    	mqf_write_from_spdctl(&m);
 801823e:	f107 0310 	add.w	r3, r7, #16
 8018242:	4618      	mov	r0, r3
 8018244:	f7ff fa5c 	bl	8017700 <mqf_write_from_spdctl>
    }
}
 8018248:	3740      	adds	r7, #64	; 0x40
 801824a:	46bd      	mov	sp, r7
 801824c:	bd80      	pop	{r7, pc}
 801824e:	bf00      	nop
 8018250:	08019db4 	.word	0x08019db4
 8018254:	80000010 	.word	0x80000010
 8018258:	08019dc0 	.word	0x08019dc0
 801825c:	08019dc8 	.word	0x08019dc8

08018260 <train_set_target_speed>:

/* =========================================================================== */


int train_set_target_speed(int numtrain, int16_t target)
{
 8018260:	b580      	push	{r7, lr}
 8018262:	b084      	sub	sp, #16
 8018264:	af00      	add	r7, sp, #0
 8018266:	6078      	str	r0, [r7, #4]
 8018268:	460b      	mov	r3, r1
 801826a:	807b      	strh	r3, [r7, #2]
	if (calibrating) return 1;
 801826c:	4b0f      	ldr	r3, [pc, #60]	; (80182ac <train_set_target_speed+0x4c>)
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	2b00      	cmp	r3, #0
 8018272:	d001      	beq.n	8018278 <train_set_target_speed+0x18>
 8018274:	2301      	movs	r3, #1
 8018276:	e015      	b.n	80182a4 <train_set_target_speed+0x44>
	USE_TRAIN(numtrain) // tconf tvars
 8018278:	6878      	ldr	r0, [r7, #4]
 801827a:	f7fd fec1 	bl	8016000 <get_train_cnf>
 801827e:	60f8      	str	r0, [r7, #12]
 8018280:	687a      	ldr	r2, [r7, #4]
 8018282:	4613      	mov	r3, r2
 8018284:	00db      	lsls	r3, r3, #3
 8018286:	1a9b      	subs	r3, r3, r2
 8018288:	00db      	lsls	r3, r3, #3
 801828a:	4a09      	ldr	r2, [pc, #36]	; (80182b0 <train_set_target_speed+0x50>)
 801828c:	4413      	add	r3, r2
 801828e:	60bb      	str	r3, [r7, #8]
	(void)tconf; // unused
	if (!tvars) return -1;
 8018290:	68bb      	ldr	r3, [r7, #8]
 8018292:	2b00      	cmp	r3, #0
 8018294:	d102      	bne.n	801829c <train_set_target_speed+0x3c>
 8018296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801829a:	e003      	b.n	80182a4 <train_set_target_speed+0x44>
	tvars->target_speed = target;
 801829c:	68bb      	ldr	r3, [r7, #8]
 801829e:	887a      	ldrh	r2, [r7, #2]
 80182a0:	801a      	strh	r2, [r3, #0]
		if (c->enable_pid) {
			pidctl_reset(&c->pidcnf, &vars->pidvars);
		}
	}*/

	return 0;
 80182a2:	2300      	movs	r3, #0
}
 80182a4:	4618      	mov	r0, r3
 80182a6:	3710      	adds	r7, #16
 80182a8:	46bd      	mov	sp, r7
 80182aa:	bd80      	pop	{r7, pc}
 80182ac:	200053e4 	.word	0x200053e4
 80182b0:	200053f0 	.word	0x200053f0

080182b4 <pose_check_trig>:


static void pose_check_trig(int numtrain, train_vars_t *tvars, int32_t lastincr)
{
 80182b4:	b580      	push	{r7, lr}
 80182b6:	b08a      	sub	sp, #40	; 0x28
 80182b8:	af02      	add	r7, sp, #8
 80182ba:	60f8      	str	r0, [r7, #12]
 80182bc:	60b9      	str	r1, [r7, #8]
 80182be:	607a      	str	r2, [r7, #4]
	if (!tvars->pose_trig) return;
 80182c0:	68bb      	ldr	r3, [r7, #8]
 80182c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d064      	beq.n	8018392 <pose_check_trig+0xde>
	int tr = 0;
 80182c8:	2300      	movs	r3, #0
 80182ca:	61fb      	str	r3, [r7, #28]
	if (tvars->pose_trig > 0) {
 80182cc:	68bb      	ldr	r3, [r7, #8]
 80182ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	dd14      	ble.n	80182fe <pose_check_trig+0x4a>
		if (lastincr<0) itm_debug3(DBG_ERR|DBG_POSEC, "wrong incr", numtrain, lastincr, tvars->pose_trig);
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	da08      	bge.n	80182ec <pose_check_trig+0x38>
 80182da:	68bb      	ldr	r3, [r7, #8]
 80182dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182de:	9300      	str	r3, [sp, #0]
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	68fa      	ldr	r2, [r7, #12]
 80182e4:	492e      	ldr	r1, [pc, #184]	; (80183a0 <pose_check_trig+0xec>)
 80182e6:	482f      	ldr	r0, [pc, #188]	; (80183a4 <pose_check_trig+0xf0>)
 80182e8:	f7ff f9a0 	bl	801762c <itm_debug3>
		if (tvars->position_estimate >= tvars->pose_trig) {
 80182ec:	68bb      	ldr	r3, [r7, #8]
 80182ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80182f0:	68bb      	ldr	r3, [r7, #8]
 80182f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182f4:	429a      	cmp	r2, r3
 80182f6:	db16      	blt.n	8018326 <pose_check_trig+0x72>
			tr = 1;
 80182f8:	2301      	movs	r3, #1
 80182fa:	61fb      	str	r3, [r7, #28]
 80182fc:	e013      	b.n	8018326 <pose_check_trig+0x72>
		}
	} else { // pose_trig < 0
		if (lastincr>0) itm_debug3(DBG_ERR|DBG_POSEC, "wrong incr", numtrain, lastincr, tvars->pose_trig);
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	2b00      	cmp	r3, #0
 8018302:	dd08      	ble.n	8018316 <pose_check_trig+0x62>
 8018304:	68bb      	ldr	r3, [r7, #8]
 8018306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018308:	9300      	str	r3, [sp, #0]
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	68fa      	ldr	r2, [r7, #12]
 801830e:	4924      	ldr	r1, [pc, #144]	; (80183a0 <pose_check_trig+0xec>)
 8018310:	4824      	ldr	r0, [pc, #144]	; (80183a4 <pose_check_trig+0xf0>)
 8018312:	f7ff f98b 	bl	801762c <itm_debug3>
		if (tvars->position_estimate <= tvars->pose_trig) {
 8018316:	68bb      	ldr	r3, [r7, #8]
 8018318:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801831a:	68bb      	ldr	r3, [r7, #8]
 801831c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801831e:	429a      	cmp	r2, r3
 8018320:	dc01      	bgt.n	8018326 <pose_check_trig+0x72>
			tr = 1;
 8018322:	2301      	movs	r3, #1
 8018324:	61fb      	str	r3, [r7, #28]
		}
	}
	if (!tr) return;
 8018326:	69fb      	ldr	r3, [r7, #28]
 8018328:	2b00      	cmp	r3, #0
 801832a:	d034      	beq.n	8018396 <pose_check_trig+0xe2>
	itm_debug3(DBG_POSEC, "POSE trig", numtrain, tvars->position_estimate, tvars->pose_trig);
 801832c:	68bb      	ldr	r3, [r7, #8]
 801832e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018330:	68bb      	ldr	r3, [r7, #8]
 8018332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018334:	9300      	str	r3, [sp, #0]
 8018336:	4613      	mov	r3, r2
 8018338:	68fa      	ldr	r2, [r7, #12]
 801833a:	491b      	ldr	r1, [pc, #108]	; (80183a8 <pose_check_trig+0xf4>)
 801833c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8018340:	f7ff f974 	bl	801762c <itm_debug3>
	msg_64_t m;
	m.from = MA_TRAIN_SC(numtrain);
 8018344:	68fb      	ldr	r3, [r7, #12]
 8018346:	b25b      	sxtb	r3, r3
 8018348:	f003 0307 	and.w	r3, r3, #7
 801834c:	b25b      	sxtb	r3, r3
 801834e:	f063 0337 	orn	r3, r3, #55	; 0x37
 8018352:	b25b      	sxtb	r3, r3
 8018354:	b2db      	uxtb	r3, r3
 8018356:	747b      	strb	r3, [r7, #17]
	m.to = MA_CONTROL_T(numtrain);
 8018358:	68fb      	ldr	r3, [r7, #12]
 801835a:	b25b      	sxtb	r3, r3
 801835c:	f003 0307 	and.w	r3, r3, #7
 8018360:	b25b      	sxtb	r3, r3
 8018362:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8018366:	b25b      	sxtb	r3, r3
 8018368:	b2db      	uxtb	r3, r3
 801836a:	743b      	strb	r3, [r7, #16]
	m.cmd = CMD_POSE_TRIGGERED;
 801836c:	2351      	movs	r3, #81	; 0x51
 801836e:	74bb      	strb	r3, [r7, #18]
	m.v1u = tvars->C1;
 8018370:	68bb      	ldr	r3, [r7, #8]
 8018372:	7f1b      	ldrb	r3, [r3, #28]
 8018374:	b29b      	uxth	r3, r3
 8018376:	82bb      	strh	r3, [r7, #20]
	m.v2 = (int16_t) tvars->position_estimate; // XXX TODO: problem here pose is > 16bits
 8018378:	68bb      	ldr	r3, [r7, #8]
 801837a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801837c:	b21b      	sxth	r3, r3
 801837e:	82fb      	strh	r3, [r7, #22]
	mqf_write_from_spdctl(&m);
 8018380:	f107 0310 	add.w	r3, r7, #16
 8018384:	4618      	mov	r0, r3
 8018386:	f7ff f9bb 	bl	8017700 <mqf_write_from_spdctl>

	// trig only once
	tvars->pose_trig = 0;
 801838a:	68bb      	ldr	r3, [r7, #8]
 801838c:	2200      	movs	r2, #0
 801838e:	62da      	str	r2, [r3, #44]	; 0x2c
 8018390:	e002      	b.n	8018398 <pose_check_trig+0xe4>
	if (!tvars->pose_trig) return;
 8018392:	bf00      	nop
 8018394:	e000      	b.n	8018398 <pose_check_trig+0xe4>
	if (!tr) return;
 8018396:	bf00      	nop
}
 8018398:	3720      	adds	r7, #32
 801839a:	46bd      	mov	sp, r7
 801839c:	bd80      	pop	{r7, pc}
 801839e:	bf00      	nop
 80183a0:	08019dd4 	.word	0x08019dd4
 80183a4:	80004000 	.word	0x80004000
 80183a8:	08019de0 	.word	0x08019de0

080183ac <mqf_write_from_nowhere>:
void msgsrv_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt);

// TODO
void purge_all_queue(void);

LFMQUEUE_DEF_H(from_nowhere, msg_64_t)
 80183ac:	b580      	push	{r7, lr}
 80183ae:	b082      	sub	sp, #8
 80183b0:	af00      	add	r7, sp, #0
 80183b2:	6078      	str	r0, [r7, #4]
 80183b4:	6879      	ldr	r1, [r7, #4]
 80183b6:	4804      	ldr	r0, [pc, #16]	; (80183c8 <mqf_write_from_nowhere+0x1c>)
 80183b8:	f000 fe5c 	bl	8019074 <mqf_write>
 80183bc:	4603      	mov	r3, r0
 80183be:	4618      	mov	r0, r3
 80183c0:	3708      	adds	r7, #8
 80183c2:	46bd      	mov	sp, r7
 80183c4:	bd80      	pop	{r7, pc}
 80183c6:	bf00      	nop
 80183c8:	20000578 	.word	0x20000578

080183cc <itm_debug1>:
{
 80183cc:	b580      	push	{r7, lr}
 80183ce:	b086      	sub	sp, #24
 80183d0:	af02      	add	r7, sp, #8
 80183d2:	60f8      	str	r0, [r7, #12]
 80183d4:	60b9      	str	r1, [r7, #8]
 80183d6:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 80183d8:	4b08      	ldr	r3, [pc, #32]	; (80183fc <itm_debug1+0x30>)
 80183da:	681a      	ldr	r2, [r3, #0]
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	4013      	ands	r3, r2
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d007      	beq.n	80183f4 <itm_debug1+0x28>
 80183e4:	2301      	movs	r3, #1
 80183e6:	9300      	str	r3, [sp, #0]
 80183e8:	2300      	movs	r3, #0
 80183ea:	2200      	movs	r2, #0
 80183ec:	6879      	ldr	r1, [r7, #4]
 80183ee:	68b8      	ldr	r0, [r7, #8]
 80183f0:	f000 fd3a 	bl	8018e68 <_itm_debug3>
}
 80183f4:	bf00      	nop
 80183f6:	3710      	adds	r7, #16
 80183f8:	46bd      	mov	sp, r7
 80183fa:	bd80      	pop	{r7, pc}
 80183fc:	200005a4 	.word	0x200005a4

08018400 <itm_debug2>:
{
 8018400:	b580      	push	{r7, lr}
 8018402:	b086      	sub	sp, #24
 8018404:	af02      	add	r7, sp, #8
 8018406:	60f8      	str	r0, [r7, #12]
 8018408:	60b9      	str	r1, [r7, #8]
 801840a:	607a      	str	r2, [r7, #4]
 801840c:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, 0, 2);
 801840e:	4b09      	ldr	r3, [pc, #36]	; (8018434 <itm_debug2+0x34>)
 8018410:	681a      	ldr	r2, [r3, #0]
 8018412:	68fb      	ldr	r3, [r7, #12]
 8018414:	4013      	ands	r3, r2
 8018416:	2b00      	cmp	r3, #0
 8018418:	d007      	beq.n	801842a <itm_debug2+0x2a>
 801841a:	2302      	movs	r3, #2
 801841c:	9300      	str	r3, [sp, #0]
 801841e:	2300      	movs	r3, #0
 8018420:	683a      	ldr	r2, [r7, #0]
 8018422:	6879      	ldr	r1, [r7, #4]
 8018424:	68b8      	ldr	r0, [r7, #8]
 8018426:	f000 fd1f 	bl	8018e68 <_itm_debug3>
}
 801842a:	bf00      	nop
 801842c:	3710      	adds	r7, #16
 801842e:	46bd      	mov	sp, r7
 8018430:	bd80      	pop	{r7, pc}
 8018432:	bf00      	nop
 8018434:	200005a4 	.word	0x200005a4

08018438 <itm_debug3>:
{
 8018438:	b580      	push	{r7, lr}
 801843a:	b086      	sub	sp, #24
 801843c:	af02      	add	r7, sp, #8
 801843e:	60f8      	str	r0, [r7, #12]
 8018440:	60b9      	str	r1, [r7, #8]
 8018442:	607a      	str	r2, [r7, #4]
 8018444:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 8018446:	4b09      	ldr	r3, [pc, #36]	; (801846c <itm_debug3+0x34>)
 8018448:	681a      	ldr	r2, [r3, #0]
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	4013      	ands	r3, r2
 801844e:	2b00      	cmp	r3, #0
 8018450:	d007      	beq.n	8018462 <itm_debug3+0x2a>
 8018452:	2303      	movs	r3, #3
 8018454:	9300      	str	r3, [sp, #0]
 8018456:	69bb      	ldr	r3, [r7, #24]
 8018458:	683a      	ldr	r2, [r7, #0]
 801845a:	6879      	ldr	r1, [r7, #4]
 801845c:	68b8      	ldr	r0, [r7, #8]
 801845e:	f000 fd03 	bl	8018e68 <_itm_debug3>
}
 8018462:	bf00      	nop
 8018464:	3710      	adds	r7, #16
 8018466:	46bd      	mov	sp, r7
 8018468:	bd80      	pop	{r7, pc}
 801846a:	bf00      	nop
 801846c:	200005a4 	.word	0x200005a4

08018470 <StartCtrlTask>:
static void run_task_ctrl(void);
extern DMA_HandleTypeDef hdma_i2c3_rx;
extern DMA_HandleTypeDef hdma_i2c3_tx;

void StartCtrlTask(_UNUSED_ void *argument)
{
 8018470:	b580      	push	{r7, lr}
 8018472:	b084      	sub	sp, #16
 8018474:	af00      	add	r7, sp, #0
 8018476:	6078      	str	r0, [r7, #4]
	int nsmpl = sizeof(train_adc_buf)/sizeof(uint16_t);
 8018478:	2328      	movs	r3, #40	; 0x28
 801847a:	60fb      	str	r3, [r7, #12]

	if (sizeof(train_adc_buf) != sizeof(uint16_t)*NUM_LOCAL_CANTONS_HW*8) Error_Handler();
	if (nsmpl != 5*2*4) Error_Handler();
 801847c:	68fb      	ldr	r3, [r7, #12]
 801847e:	2b28      	cmp	r3, #40	; 0x28
 8018480:	d001      	beq.n	8018486 <StartCtrlTask+0x16>
 8018482:	f7e8 ffa3 	bl	80013cc <Error_Handler>
	//__HAL_DMA_ENABLE_IT(&hdma_i2c3_tx, DMA_IT_TC);

	//if (NUM_VAL_PER_CANTON != 4) Error_Handler();
	//if (ADC_HALF_BUFFER != 10*2) Error_Handler();

	if ((1)) set_pwm_freq(100);
 8018486:	2064      	movs	r0, #100	; 0x64
 8018488:	f000 f864 	bl	8018554 <set_pwm_freq>
	CantonTimerHandles[1]=&htim1;
 801848c:	4b2a      	ldr	r3, [pc, #168]	; (8018538 <StartCtrlTask+0xc8>)
 801848e:	4a2b      	ldr	r2, [pc, #172]	; (801853c <StartCtrlTask+0xcc>)
 8018490:	605a      	str	r2, [r3, #4]
	CantonTimerHandles[2]=&htim2;
 8018492:	4b29      	ldr	r3, [pc, #164]	; (8018538 <StartCtrlTask+0xc8>)
 8018494:	4a2a      	ldr	r2, [pc, #168]	; (8018540 <StartCtrlTask+0xd0>)
 8018496:	609a      	str	r2, [r3, #8]
	CantonTimerHandles[3]=&htim3;
 8018498:	4b27      	ldr	r3, [pc, #156]	; (8018538 <StartCtrlTask+0xc8>)
 801849a:	4a2a      	ldr	r2, [pc, #168]	; (8018544 <StartCtrlTask+0xd4>)
 801849c:	60da      	str	r2, [r3, #12]
	CantonTimerHandles[4]=&htim12;
 801849e:	4b26      	ldr	r3, [pc, #152]	; (8018538 <StartCtrlTask+0xc8>)
 80184a0:	4a29      	ldr	r2, [pc, #164]	; (8018548 <StartCtrlTask+0xd8>)
 80184a2:	611a      	str	r2, [r3, #16]



	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80184a4:	2100      	movs	r1, #0
 80184a6:	4825      	ldr	r0, [pc, #148]	; (801853c <StartCtrlTask+0xcc>)
 80184a8:	f7ef fde6 	bl	8008078 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80184ac:	2104      	movs	r1, #4
 80184ae:	4823      	ldr	r0, [pc, #140]	; (801853c <StartCtrlTask+0xcc>)
 80184b0:	f7ef fde2 	bl	8008078 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80184b4:	2108      	movs	r1, #8
 80184b6:	4821      	ldr	r0, [pc, #132]	; (801853c <StartCtrlTask+0xcc>)
 80184b8:	f7ef fdde 	bl	8008078 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 80184bc:	210c      	movs	r1, #12
 80184be:	481f      	ldr	r0, [pc, #124]	; (801853c <StartCtrlTask+0xcc>)
 80184c0:	f7ef fdda 	bl	8008078 <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80184c4:	2108      	movs	r1, #8
 80184c6:	481e      	ldr	r0, [pc, #120]	; (8018540 <StartCtrlTask+0xd0>)
 80184c8:	f7ef fdd6 	bl	8008078 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 80184cc:	210c      	movs	r1, #12
 80184ce:	481c      	ldr	r0, [pc, #112]	; (8018540 <StartCtrlTask+0xd0>)
 80184d0:	f7ef fdd2 	bl	8008078 <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80184d4:	2100      	movs	r1, #0
 80184d6:	481b      	ldr	r0, [pc, #108]	; (8018544 <StartCtrlTask+0xd4>)
 80184d8:	f7ef fdce 	bl	8008078 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80184dc:	2104      	movs	r1, #4
 80184de:	4819      	ldr	r0, [pc, #100]	; (8018544 <StartCtrlTask+0xd4>)
 80184e0:	f7ef fdca 	bl	8008078 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80184e4:	2108      	movs	r1, #8
 80184e6:	4817      	ldr	r0, [pc, #92]	; (8018544 <StartCtrlTask+0xd4>)
 80184e8:	f7ef fdc6 	bl	8008078 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80184ec:	210c      	movs	r1, #12
 80184ee:	4815      	ldr	r0, [pc, #84]	; (8018544 <StartCtrlTask+0xd4>)
 80184f0:	f7ef fdc2 	bl	8008078 <HAL_TIM_PWM_Stop>

	HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_1);
 80184f4:	2100      	movs	r1, #0
 80184f6:	4814      	ldr	r0, [pc, #80]	; (8018548 <StartCtrlTask+0xd8>)
 80184f8:	f7ef fdbe 	bl	8008078 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_2);
 80184fc:	2104      	movs	r1, #4
 80184fe:	4812      	ldr	r0, [pc, #72]	; (8018548 <StartCtrlTask+0xd8>)
 8018500:	f7ef fdba 	bl	8008078 <HAL_TIM_PWM_Stop>

	//HAL_TIM_Base_Start_IT(&htim8);
	HAL_TIM_Base_Start_IT(&htim1);
 8018504:	480d      	ldr	r0, [pc, #52]	; (801853c <StartCtrlTask+0xcc>)
 8018506:	f7ef fd1f 	bl	8007f48 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim2);
 801850a:	480d      	ldr	r0, [pc, #52]	; (8018540 <StartCtrlTask+0xd0>)
 801850c:	f7ef fcf8 	bl	8007f00 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 8018510:	480c      	ldr	r0, [pc, #48]	; (8018544 <StartCtrlTask+0xd4>)
 8018512:	f7ef fcf5 	bl	8007f00 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim12);
 8018516:	480c      	ldr	r0, [pc, #48]	; (8018548 <StartCtrlTask+0xd8>)
 8018518:	f7ef fcf2 	bl	8007f00 <HAL_TIM_Base_Start>

	HAL_ADC_Start_DMA(&hadc1,(uint32_t *)train_adc_buf, nsmpl);
 801851c:	68fb      	ldr	r3, [r7, #12]
 801851e:	461a      	mov	r2, r3
 8018520:	490a      	ldr	r1, [pc, #40]	; (801854c <StartCtrlTask+0xdc>)
 8018522:	480b      	ldr	r0, [pc, #44]	; (8018550 <StartCtrlTask+0xe0>)
 8018524:	f7e9 fcd8 	bl	8001ed8 <HAL_ADC_Start_DMA>
	//HAL_ADC_Start_DMA(&hadc1,(uint32_t *)train_adc_buffer, NUM_ADC_SAMPLES);

	startCycleCounter();
 8018528:	f7fd fc1e 	bl	8015d68 <startCycleCounter>
		p = t;
		//itm_debug1(DBG_ERR, "cycl", d);
	}
	itm_debug1(DBG_ERR, "tcycl", GetCycleCount64()-k);
	*/
	run_task_ctrl();
 801852c:	f000 f858 	bl	80185e0 <run_task_ctrl>
}
 8018530:	bf00      	nop
 8018532:	3710      	adds	r7, #16
 8018534:	46bd      	mov	sp, r7
 8018536:	bd80      	pop	{r7, pc}
 8018538:	200052c4 	.word	0x200052c4
 801853c:	200067b0 	.word	0x200067b0
 8018540:	20006cfc 	.word	0x20006cfc
 8018544:	200062a4 	.word	0x200062a4
 8018548:	20006d40 	.word	0x20006d40
 801854c:	200088dc 	.word	0x200088dc
 8018550:	200062e8 	.word	0x200062e8

08018554 <set_pwm_freq>:
int cur_freqhz = 350;
extern TIM_HandleTypeDef htim1;

// #define __HAL_TIM_SET_PRESCALER(__HANDLE__, __PRESC__)       ((__HANDLE__)->Instance->PSC = (__PRESC__))
void set_pwm_freq(int freqhz)
{
 8018554:	b580      	push	{r7, lr}
 8018556:	b086      	sub	sp, #24
 8018558:	af02      	add	r7, sp, #8
 801855a:	6078      	str	r0, [r7, #4]
	// 12MHz / 200 -> 60000
	// 50Hz = 1200
	int ps = (60000/freqhz)-1;
 801855c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	fb92 f3f3 	sdiv	r3, r2, r3
 8018566:	3b01      	subs	r3, #1
 8018568:	60fb      	str	r3, [r7, #12]
	if ((ps<1) || (ps>0xFFFF)) ps = 1200;
 801856a:	68fb      	ldr	r3, [r7, #12]
 801856c:	2b00      	cmp	r3, #0
 801856e:	dd03      	ble.n	8018578 <set_pwm_freq+0x24>
 8018570:	68fb      	ldr	r3, [r7, #12]
 8018572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018576:	db02      	blt.n	801857e <set_pwm_freq+0x2a>
 8018578:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 801857c:	60fb      	str	r3, [r7, #12]
	ps = ps-1;
 801857e:	68fb      	ldr	r3, [r7, #12]
 8018580:	3b01      	subs	r3, #1
 8018582:	60fb      	str	r3, [r7, #12]
	cur_freqhz = 60000/(ps+1);
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	3301      	adds	r3, #1
 8018588:	f64e 2260 	movw	r2, #60000	; 0xea60
 801858c:	fb92 f3f3 	sdiv	r3, r2, r3
 8018590:	4a0d      	ldr	r2, [pc, #52]	; (80185c8 <set_pwm_freq+0x74>)
 8018592:	6013      	str	r3, [r2, #0]
	// not an error but we want it in the log
	itm_debug3(DBG_ERR|DBG_CTRL, "FREQ", freqhz, ps, cur_freqhz);
 8018594:	4b0c      	ldr	r3, [pc, #48]	; (80185c8 <set_pwm_freq+0x74>)
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	9300      	str	r3, [sp, #0]
 801859a:	68fb      	ldr	r3, [r7, #12]
 801859c:	687a      	ldr	r2, [r7, #4]
 801859e:	490b      	ldr	r1, [pc, #44]	; (80185cc <set_pwm_freq+0x78>)
 80185a0:	480b      	ldr	r0, [pc, #44]	; (80185d0 <set_pwm_freq+0x7c>)
 80185a2:	f7ff ff49 	bl	8018438 <itm_debug3>
	__HAL_TIM_SET_PRESCALER(&htim1, ps);
 80185a6:	4b0b      	ldr	r3, [pc, #44]	; (80185d4 <set_pwm_freq+0x80>)
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	68fa      	ldr	r2, [r7, #12]
 80185ac:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_PRESCALER(&htim2, ps);
 80185ae:	4b0a      	ldr	r3, [pc, #40]	; (80185d8 <set_pwm_freq+0x84>)
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	68fa      	ldr	r2, [r7, #12]
 80185b4:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_PRESCALER(&htim8, ps);
 80185b6:	4b09      	ldr	r3, [pc, #36]	; (80185dc <set_pwm_freq+0x88>)
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	68fa      	ldr	r2, [r7, #12]
 80185bc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80185be:	bf00      	nop
 80185c0:	3710      	adds	r7, #16
 80185c2:	46bd      	mov	sp, r7
 80185c4:	bd80      	pop	{r7, pc}
 80185c6:	bf00      	nop
 80185c8:	200005a0 	.word	0x200005a0
 80185cc:	08019dec 	.word	0x08019dec
 80185d0:	80000400 	.word	0x80000400
 80185d4:	200067b0 	.word	0x200067b0
 80185d8:	20006cfc 	.word	0x20006cfc
 80185dc:	20005cb0 	.word	0x20005cb0

080185e0 <run_task_ctrl>:

#define USE_NOTIF_TIM 0

volatile uint32_t t0ctrl;
static void run_task_ctrl(void)
{
 80185e0:	b580      	push	{r7, lr}
 80185e2:	b08a      	sub	sp, #40	; 0x28
 80185e4:	af00      	add	r7, sp, #0
	int cnt = 0;
 80185e6:	2300      	movs	r3, #0
 80185e8:	627b      	str	r3, [r7, #36]	; 0x24
	//if ((0))   calibrate_bemf(); //XXX

	if ((1)) {
		msg_64_t m;
		m.from = MA_BROADCAST;
 80185ea:	23ff      	movs	r3, #255	; 0xff
 80185ec:	727b      	strb	r3, [r7, #9]
		m.to = MA_BROADCAST;
 80185ee:	23ff      	movs	r3, #255	; 0xff
 80185f0:	723b      	strb	r3, [r7, #8]
		m.cmd = CMD_SETRUN_MODE;
 80185f2:	23fc      	movs	r3, #252	; 0xfc
 80185f4:	72bb      	strb	r3, [r7, #10]
		//m.v1u = runmode_off;
		m.v1u = runmode_normal;
 80185f6:	2301      	movs	r3, #1
 80185f8:	81bb      	strh	r3, [r7, #12]
		//m.v1u = runmode_detect1;
		mqf_write_from_nowhere(&m); // XXX it wont be sent to ctl
 80185fa:	f107 0308 	add.w	r3, r7, #8
 80185fe:	4618      	mov	r0, r3
 8018600:	f7ff fed4 	bl	80183ac <mqf_write_from_nowhere>
	}

	for (;;) {
		uint32_t notif;
		xTaskNotifyWait(0, 0xFFFFFFFF, &notif, portMAX_DELAY);
 8018604:	1d3a      	adds	r2, r7, #4
 8018606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801860a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801860e:	2000      	movs	r0, #0
 8018610:	f7f6 fbbc 	bl	800ed8c <xTaskNotifyWait>
		if ((1)) {
			int n = 0;
 8018614:	2300      	movs	r3, #0
 8018616:	623b      	str	r3, [r7, #32]
			if (notif & NOTIF_NEW_ADC_1)  n = 1;
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	f003 0301 	and.w	r3, r3, #1
 801861e:	2b00      	cmp	r3, #0
 8018620:	d001      	beq.n	8018626 <run_task_ctrl+0x46>
 8018622:	2301      	movs	r3, #1
 8018624:	623b      	str	r3, [r7, #32]
			if (notif & NOTIF_NEW_ADC_2)  n |= 2;
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	f003 0302 	and.w	r3, r3, #2
 801862c:	2b00      	cmp	r3, #0
 801862e:	d003      	beq.n	8018638 <run_task_ctrl+0x58>
 8018630:	6a3b      	ldr	r3, [r7, #32]
 8018632:	f043 0302 	orr.w	r3, r3, #2
 8018636:	623b      	str	r3, [r7, #32]
			itm_debug2(DBG_LOWCTRL, "-----", 0 /*(notif & NOTIF_TIM8) ? 1 : 0*/, n);
 8018638:	6a3b      	ldr	r3, [r7, #32]
 801863a:	2200      	movs	r2, #0
 801863c:	494c      	ldr	r1, [pc, #304]	; (8018770 <run_task_ctrl+0x190>)
 801863e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8018642:	f7ff fedd 	bl	8018400 <itm_debug2>
			if (n==3) {
 8018646:	6a3b      	ldr	r3, [r7, #32]
 8018648:	2b03      	cmp	r3, #3
 801864a:	d105      	bne.n	8018658 <run_task_ctrl+0x78>
				itm_debug1(DBG_LOWCTRL|DBG_ERR, "both", n);
 801864c:	6a3a      	ldr	r2, [r7, #32]
 801864e:	4949      	ldr	r1, [pc, #292]	; (8018774 <run_task_ctrl+0x194>)
 8018650:	4849      	ldr	r0, [pc, #292]	; (8018778 <run_task_ctrl+0x198>)
 8018652:	f7ff febb 	bl	80183cc <itm_debug1>
 8018656:	e7d5      	b.n	8018604 <run_task_ctrl+0x24>
				if ((1)) continue; // skip this tick
			}
		}
		cnt++;
 8018658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801865a:	3301      	adds	r3, #1
 801865c:	627b      	str	r3, [r7, #36]	; 0x24
		t0ctrl = HAL_GetTick();
 801865e:	f7e9 fbc9 	bl	8001df4 <HAL_GetTick>
 8018662:	4602      	mov	r2, r0
 8018664:	4b45      	ldr	r3, [pc, #276]	; (801877c <run_task_ctrl+0x19c>)
 8018666:	601a      	str	r2, [r3, #0]
		if (0==(notif & (NOTIF_NEW_ADC_1|NOTIF_NEW_ADC_2))) continue;
#endif
		//debug_info('G', 0, "HOP", 0, 0, 0);
		static uint32_t oldt = 0;
		static uint32_t t0 = 0;
		uint32_t t = HAL_GetTick();
 8018668:	f7e9 fbc4 	bl	8001df4 <HAL_GetTick>
 801866c:	61f8      	str	r0, [r7, #28]
		// XXX we should have a global t0
		if (!t0) t0 = t;
 801866e:	4b44      	ldr	r3, [pc, #272]	; (8018780 <run_task_ctrl+0x1a0>)
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	2b00      	cmp	r3, #0
 8018674:	d102      	bne.n	801867c <run_task_ctrl+0x9c>
 8018676:	4a42      	ldr	r2, [pc, #264]	; (8018780 <run_task_ctrl+0x1a0>)
 8018678:	69fb      	ldr	r3, [r7, #28]
 801867a:	6013      	str	r3, [r2, #0]
		int32_t dt = (oldt) ? (t-oldt) : 1;
 801867c:	4b41      	ldr	r3, [pc, #260]	; (8018784 <run_task_ctrl+0x1a4>)
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	2b00      	cmp	r3, #0
 8018682:	d004      	beq.n	801868e <run_task_ctrl+0xae>
 8018684:	4b3f      	ldr	r3, [pc, #252]	; (8018784 <run_task_ctrl+0x1a4>)
 8018686:	681b      	ldr	r3, [r3, #0]
 8018688:	69fa      	ldr	r2, [r7, #28]
 801868a:	1ad3      	subs	r3, r2, r3
 801868c:	e000      	b.n	8018690 <run_task_ctrl+0xb0>
 801868e:	2301      	movs	r3, #1
 8018690:	61bb      	str	r3, [r7, #24]
		oldt = t;
 8018692:	4a3c      	ldr	r2, [pc, #240]	; (8018784 <run_task_ctrl+0x1a4>)
 8018694:	69fb      	ldr	r3, [r7, #28]
 8018696:	6013      	str	r3, [r2, #0]
		ina3221
		void spdctl_run_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt);
		void msgsrv_tick(uint32_t notif_flags, uint32_t tick, uint32_t dt);
		*/

		bemf_tick(notif, t, dt);
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	69ba      	ldr	r2, [r7, #24]
 801869c:	69f9      	ldr	r1, [r7, #28]
 801869e:	4618      	mov	r0, r3
 80186a0:	f7fc ff34 	bl	801550c <bemf_tick>
		itm_debug1(DBG_LOWCTRL, "--msg", dt);
 80186a4:	69ba      	ldr	r2, [r7, #24]
 80186a6:	4938      	ldr	r1, [pc, #224]	; (8018788 <run_task_ctrl+0x1a8>)
 80186a8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80186ac:	f7ff fe8e 	bl	80183cc <itm_debug1>
		msgsrv_tick(notif, t, dt);
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	69ba      	ldr	r2, [r7, #24]
 80186b4:	69f9      	ldr	r1, [r7, #28]
 80186b6:	4618      	mov	r0, r3
 80186b8:	f7fe fc48 	bl	8016f4c <msgsrv_tick>
		itm_debug1(DBG_LOWCTRL, "--spdctl", dt);
 80186bc:	69ba      	ldr	r2, [r7, #24]
 80186be:	4933      	ldr	r1, [pc, #204]	; (801878c <run_task_ctrl+0x1ac>)
 80186c0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80186c4:	f7ff fe82 	bl	80183cc <itm_debug1>
		spdctl_run_tick(notif, t, dt);
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	69ba      	ldr	r2, [r7, #24]
 80186cc:	69f9      	ldr	r1, [r7, #28]
 80186ce:	4618      	mov	r0, r3
 80186d0:	f7ff f86a 	bl	80177a8 <spdctl_run_tick>
		itm_debug1(DBG_LOWCTRL, "--canton", dt);
 80186d4:	69ba      	ldr	r2, [r7, #24]
 80186d6:	492e      	ldr	r1, [pc, #184]	; (8018790 <run_task_ctrl+0x1b0>)
 80186d8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80186dc:	f7ff fe76 	bl	80183cc <itm_debug1>
		canton_tick(notif, t, dt);
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	69ba      	ldr	r2, [r7, #24]
 80186e4:	69f9      	ldr	r1, [r7, #28]
 80186e6:	4618      	mov	r0, r3
 80186e8:	f7fc faec 	bl	8014cc4 <canton_tick>
		itm_debug1(DBG_LOWCTRL, "--trnout", dt);
 80186ec:	69ba      	ldr	r2, [r7, #24]
 80186ee:	4929      	ldr	r1, [pc, #164]	; (8018794 <run_task_ctrl+0x1b4>)
 80186f0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80186f4:	f7ff fe6a 	bl	80183cc <itm_debug1>
		turnout_tick(notif, t, dt);
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	69ba      	ldr	r2, [r7, #24]
 80186fc:	69f9      	ldr	r1, [r7, #28]
 80186fe:	4618      	mov	r0, r3
 8018700:	f7fd f8ac 	bl	801585c <turnout_tick>
		itm_debug1(DBG_LOWCTRL, "--ctrl", dt);
 8018704:	69ba      	ldr	r2, [r7, #24]
 8018706:	4924      	ldr	r1, [pc, #144]	; (8018798 <run_task_ctrl+0x1b8>)
 8018708:	f44f 7080 	mov.w	r0, #256	; 0x100
 801870c:	f7ff fe5e 	bl	80183cc <itm_debug1>
		ctrl_run_tick(notif, t, dt);
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	69ba      	ldr	r2, [r7, #24]
 8018714:	69f9      	ldr	r1, [r7, #28]
 8018716:	4618      	mov	r0, r3
 8018718:	f7fb f980 	bl	8013a1c <ctrl_run_tick>
		_UNUSED_ uint32_t e1 = HAL_GetTick() - t;
 801871c:	f7e9 fb6a 	bl	8001df4 <HAL_GetTick>
 8018720:	4602      	mov	r2, r0
 8018722:	69fb      	ldr	r3, [r7, #28]
 8018724:	1ad3      	subs	r3, r2, r3
 8018726:	617b      	str	r3, [r7, #20]
#if USE_NOTIF_TIM
#else
		//if (cnt>20) {
		itm_debug1(DBG_LOWCTRL, "--pres", dt);
 8018728:	69ba      	ldr	r2, [r7, #24]
 801872a:	491c      	ldr	r1, [pc, #112]	; (801879c <run_task_ctrl+0x1bc>)
 801872c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8018730:	f7ff fe4c 	bl	80183cc <itm_debug1>
		presdect_tick(notif, t, dt);
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	69ba      	ldr	r2, [r7, #24]
 8018738:	69f9      	ldr	r1, [r7, #28]
 801873a:	4618      	mov	r0, r3
 801873c:	f7fd f814 	bl	8015768 <presdect_tick>
		//}
#endif
		itm_debug1(DBG_LOWCTRL, "--done", dt);
 8018740:	69ba      	ldr	r2, [r7, #24]
 8018742:	4917      	ldr	r1, [pc, #92]	; (80187a0 <run_task_ctrl+0x1c0>)
 8018744:	f44f 7080 	mov.w	r0, #256	; 0x100
 8018748:	f7ff fe40 	bl	80183cc <itm_debug1>
		uint32_t et = HAL_GetTick() - t;
 801874c:	f7e9 fb52 	bl	8001df4 <HAL_GetTick>
 8018750:	4602      	mov	r2, r0
 8018752:	69fb      	ldr	r3, [r7, #28]
 8018754:	1ad3      	subs	r3, r2, r3
 8018756:	613b      	str	r3, [r7, #16]
		if ((1)) {
			//itm_debug2(DBG_ERR, "ctrl tick", e1, et);
			if (et>9) {
 8018758:	693b      	ldr	r3, [r7, #16]
 801875a:	2b09      	cmp	r3, #9
 801875c:	f67f af52 	bls.w	8018604 <run_task_ctrl+0x24>
				itm_debug1(DBG_ERR, "long proc", et);
 8018760:	693b      	ldr	r3, [r7, #16]
 8018762:	461a      	mov	r2, r3
 8018764:	490f      	ldr	r1, [pc, #60]	; (80187a4 <run_task_ctrl+0x1c4>)
 8018766:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 801876a:	f7ff fe2f 	bl	80183cc <itm_debug1>
	for (;;) {
 801876e:	e749      	b.n	8018604 <run_task_ctrl+0x24>
 8018770:	08019df4 	.word	0x08019df4
 8018774:	08019dfc 	.word	0x08019dfc
 8018778:	80000100 	.word	0x80000100
 801877c:	20009148 	.word	0x20009148
 8018780:	200055b8 	.word	0x200055b8
 8018784:	200055bc 	.word	0x200055bc
 8018788:	08019e04 	.word	0x08019e04
 801878c:	08019e0c 	.word	0x08019e0c
 8018790:	08019e18 	.word	0x08019e18
 8018794:	08019e24 	.word	0x08019e24
 8018798:	08019e30 	.word	0x08019e30
 801879c:	08019e38 	.word	0x08019e38
 80187a0:	08019e40 	.word	0x08019e40
 80187a4:	08019e48 	.word	0x08019e48

080187a8 <HAL_ADC_ConvCpltCallback>:
static int nhalf=0;
static int nfull=0;


void HAL_ADC_ConvCpltCallback(_UNUSED_ ADC_HandleTypeDef* AdcHandle)
{
 80187a8:	b580      	push	{r7, lr}
 80187aa:	b086      	sub	sp, #24
 80187ac:	af02      	add	r7, sp, #8
 80187ae:	6078      	str	r0, [r7, #4]
	nfull++;
 80187b0:	4b0f      	ldr	r3, [pc, #60]	; (80187f0 <HAL_ADC_ConvCpltCallback+0x48>)
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	3301      	adds	r3, #1
 80187b6:	4a0e      	ldr	r2, [pc, #56]	; (80187f0 <HAL_ADC_ConvCpltCallback+0x48>)
 80187b8:	6013      	str	r3, [r2, #0]
	BaseType_t higher=0;
 80187ba:	2300      	movs	r3, #0
 80187bc:	60fb      	str	r3, [r7, #12]
	if ((0)) itm_debug1(DBG_TIM, "conv/f", HAL_GetTick());
	xTaskNotifyFromISR(ctrlTaskHandle, NOTIF_NEW_ADC_2, eSetBits, &higher);
 80187be:	4b0d      	ldr	r3, [pc, #52]	; (80187f4 <HAL_ADC_ConvCpltCallback+0x4c>)
 80187c0:	6818      	ldr	r0, [r3, #0]
 80187c2:	f107 030c 	add.w	r3, r7, #12
 80187c6:	9300      	str	r3, [sp, #0]
 80187c8:	2300      	movs	r3, #0
 80187ca:	2201      	movs	r2, #1
 80187cc:	2102      	movs	r1, #2
 80187ce:	f7f6 fb37 	bl	800ee40 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 80187d2:	68fb      	ldr	r3, [r7, #12]
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d007      	beq.n	80187e8 <HAL_ADC_ConvCpltCallback+0x40>
 80187d8:	4b07      	ldr	r3, [pc, #28]	; (80187f8 <HAL_ADC_ConvCpltCallback+0x50>)
 80187da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80187de:	601a      	str	r2, [r3, #0]
 80187e0:	f3bf 8f4f 	dsb	sy
 80187e4:	f3bf 8f6f 	isb	sy
}
 80187e8:	bf00      	nop
 80187ea:	3710      	adds	r7, #16
 80187ec:	46bd      	mov	sp, r7
 80187ee:	bd80      	pop	{r7, pc}
 80187f0:	200055b4 	.word	0x200055b4
 80187f4:	200062e4 	.word	0x200062e4
 80187f8:	e000ed04 	.word	0xe000ed04

080187fc <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(_UNUSED_ ADC_HandleTypeDef* hadc)
{
 80187fc:	b580      	push	{r7, lr}
 80187fe:	b086      	sub	sp, #24
 8018800:	af02      	add	r7, sp, #8
 8018802:	6078      	str	r0, [r7, #4]
	nhalf++;
 8018804:	4b0f      	ldr	r3, [pc, #60]	; (8018844 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8018806:	681b      	ldr	r3, [r3, #0]
 8018808:	3301      	adds	r3, #1
 801880a:	4a0e      	ldr	r2, [pc, #56]	; (8018844 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 801880c:	6013      	str	r3, [r2, #0]
	BaseType_t higher=0;
 801880e:	2300      	movs	r3, #0
 8018810:	60fb      	str	r3, [r7, #12]
	if ((0)) itm_debug1(DBG_TIM, "conv/h", HAL_GetTick());
	xTaskNotifyFromISR(ctrlTaskHandle, NOTIF_NEW_ADC_1, eSetBits, &higher);
 8018812:	4b0d      	ldr	r3, [pc, #52]	; (8018848 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 8018814:	6818      	ldr	r0, [r3, #0]
 8018816:	f107 030c 	add.w	r3, r7, #12
 801881a:	9300      	str	r3, [sp, #0]
 801881c:	2300      	movs	r3, #0
 801881e:	2201      	movs	r2, #1
 8018820:	2101      	movs	r1, #1
 8018822:	f7f6 fb0d 	bl	800ee40 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 8018826:	68fb      	ldr	r3, [r7, #12]
 8018828:	2b00      	cmp	r3, #0
 801882a:	d007      	beq.n	801883c <HAL_ADC_ConvHalfCpltCallback+0x40>
 801882c:	4b07      	ldr	r3, [pc, #28]	; (801884c <HAL_ADC_ConvHalfCpltCallback+0x50>)
 801882e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018832:	601a      	str	r2, [r3, #0]
 8018834:	f3bf 8f4f 	dsb	sy
 8018838:	f3bf 8f6f 	isb	sy
}
 801883c:	bf00      	nop
 801883e:	3710      	adds	r7, #16
 8018840:	46bd      	mov	sp, r7
 8018842:	bd80      	pop	{r7, pc}
 8018844:	200055b0 	.word	0x200055b0
 8018848:	200062e4 	.word	0x200062e4
 801884c:	e000ed04 	.word	0xe000ed04

08018850 <HAL_ADC_ErrorCallback>:
void HAL_ADC_LevelOutOfWindowCallback(_UNUSED_ ADC_HandleTypeDef* hadc)
{
	itm_debug1(DBG_ERR|DBG_TIM, "ADC ERR", 1);
}
void  HAL_ADC_ErrorCallback(_UNUSED_ ADC_HandleTypeDef *hadc)
{
 8018850:	b580      	push	{r7, lr}
 8018852:	b082      	sub	sp, #8
 8018854:	af00      	add	r7, sp, #0
 8018856:	6078      	str	r0, [r7, #4]
	itm_debug1(DBG_ERR|DBG_TIM, "ADC ERR", 0);
 8018858:	2200      	movs	r2, #0
 801885a:	4904      	ldr	r1, [pc, #16]	; (801886c <HAL_ADC_ErrorCallback+0x1c>)
 801885c:	4804      	ldr	r0, [pc, #16]	; (8018870 <HAL_ADC_ErrorCallback+0x20>)
 801885e:	f7ff fdb5 	bl	80183cc <itm_debug1>
}
 8018862:	bf00      	nop
 8018864:	3708      	adds	r7, #8
 8018866:	46bd      	mov	sp, r7
 8018868:	bd80      	pop	{r7, pc}
 801886a:	bf00      	nop
 801886c:	08019e54 	.word	0x08019e54
 8018870:	80000001 	.word	0x80000001

08018874 <i2c_ready>:

#endif
/// ----------------------------------

static void i2c_ready(_UNUSED_ int a)
{
 8018874:	b480      	push	{r7}
 8018876:	b083      	sub	sp, #12
 8018878:	af00      	add	r7, sp, #0
 801887a:	6078      	str	r0, [r7, #4]

}
 801887c:	bf00      	nop
 801887e:	370c      	adds	r7, #12
 8018880:	46bd      	mov	sp, r7
 8018882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018886:	4770      	bx	lr

08018888 <I2C_Scan>:
static void I2C_Scan(void)
{
 8018888:	b580      	push	{r7, lr}
 801888a:	b082      	sub	sp, #8
 801888c:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef res;
    for(uint16_t i = 0; i < 128; i++) {
 801888e:	2300      	movs	r3, #0
 8018890:	80fb      	strh	r3, [r7, #6]
 8018892:	e013      	b.n	80188bc <I2C_Scan+0x34>
        res = HAL_I2C_IsDeviceReady(&hi2c1, i << 1, 1, 10);
 8018894:	88fb      	ldrh	r3, [r7, #6]
 8018896:	005b      	lsls	r3, r3, #1
 8018898:	b299      	uxth	r1, r3
 801889a:	230a      	movs	r3, #10
 801889c:	2201      	movs	r2, #1
 801889e:	480b      	ldr	r0, [pc, #44]	; (80188cc <I2C_Scan+0x44>)
 80188a0:	f7eb f9f6 	bl	8003c90 <HAL_I2C_IsDeviceReady>
 80188a4:	4603      	mov	r3, r0
 80188a6:	717b      	strb	r3, [r7, #5]
        if(res == HAL_OK) {
 80188a8:	797b      	ldrb	r3, [r7, #5]
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d103      	bne.n	80188b6 <I2C_Scan+0x2e>
        	i2c_ready(i);
 80188ae:	88fb      	ldrh	r3, [r7, #6]
 80188b0:	4618      	mov	r0, r3
 80188b2:	f7ff ffdf 	bl	8018874 <i2c_ready>
    for(uint16_t i = 0; i < 128; i++) {
 80188b6:	88fb      	ldrh	r3, [r7, #6]
 80188b8:	3301      	adds	r3, #1
 80188ba:	80fb      	strh	r3, [r7, #6]
 80188bc:	88fb      	ldrh	r3, [r7, #6]
 80188be:	2b7f      	cmp	r3, #127	; 0x7f
 80188c0:	d9e8      	bls.n	8018894 <I2C_Scan+0xc>
        } else {
        }
    }
}
 80188c2:	bf00      	nop
 80188c4:	3708      	adds	r7, #8
 80188c6:	46bd      	mov	sp, r7
 80188c8:	bd80      	pop	{r7, pc}
 80188ca:	bf00      	nop
 80188cc:	20005d98 	.word	0x20005d98

080188d0 <StartUiTask>:
static int test_mode = 0;

*/

void StartUiTask(_UNUSED_ void *argument)
{
 80188d0:	b580      	push	{r7, lr}
 80188d2:	b084      	sub	sp, #16
 80188d4:	af00      	add	r7, sp, #0
 80188d6:	6078      	str	r0, [r7, #4]
	// init
	extern TIM_HandleTypeDef htim4;

	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80188d8:	213c      	movs	r1, #60	; 0x3c
 80188da:	480b      	ldr	r0, [pc, #44]	; (8018908 <StartUiTask+0x38>)
 80188dc:	f7ef fcb6 	bl	800824c <HAL_TIM_Encoder_Start>


	for (int i=0; i<MAX_DISP; i++) {
 80188e0:	2300      	movs	r3, #0
 80188e2:	60fb      	str	r3, [r7, #12]
 80188e4:	e006      	b.n	80188f4 <StartUiTask+0x24>
		I2C_Scan();
 80188e6:	f7ff ffcf 	bl	8018888 <I2C_Scan>
		ssd1306_Init();
 80188ea:	f7f8 f863 	bl	80109b4 <ssd1306_Init>
	for (int i=0; i<MAX_DISP; i++) {
 80188ee:	68fb      	ldr	r3, [r7, #12]
 80188f0:	3301      	adds	r3, #1
 80188f2:	60fb      	str	r3, [r7, #12]
 80188f4:	68fb      	ldr	r3, [r7, #12]
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	ddf5      	ble.n	80188e6 <StartUiTask+0x16>
	}
	for (;;) {
		static TickType_t lasttick = 0;
		vTaskDelayUntil(&lasttick, 100);
 80188fa:	2164      	movs	r1, #100	; 0x64
 80188fc:	4803      	ldr	r0, [pc, #12]	; (801890c <StartUiTask+0x3c>)
 80188fe:	f7f5 fcb9 	bl	800e274 <vTaskDelayUntil>
		//lasttick = HAL_GetTick(); done by vTaskDelayUntil
		ihm_runtick();
 8018902:	f7fa f8c9 	bl	8012a98 <ihm_runtick>
	for (;;) {
 8018906:	e7f8      	b.n	80188fa <StartUiTask+0x2a>
 8018908:	20005d54 	.word	0x20005d54
 801890c:	200055c0 	.word	0x200055c0

08018910 <StartTxRxFrameTask>:

static void handleRxChars(frame_msg_t *m);
static void _send_bytes(uint8_t *b, int len);

void StartTxRxFrameTask(_UNUSED_ void *argument)
{
 8018910:	b580      	push	{r7, lr}
 8018912:	b090      	sub	sp, #64	; 0x40
 8018914:	af00      	add	r7, sp, #0
 8018916:	6078      	str	r0, [r7, #4]
	  MX_USB_DEVICE_Init();
 8018918:	f7f7 fb18 	bl	800ff4c <MX_USB_DEVICE_Init>
		if ((0)) {
			osDelay(10000);
			continue;
		}
		uint8_t msg_prio;
		osStatus_t rc = osMessageQueueGet(frameQueueHandle, &m, &msg_prio, portMAX_DELAY);
 801891c:	4b27      	ldr	r3, [pc, #156]	; (80189bc <StartTxRxFrameTask+0xac>)
 801891e:	6818      	ldr	r0, [r3, #0]
 8018920:	f107 0237 	add.w	r2, r7, #55	; 0x37
 8018924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018928:	4925      	ldr	r1, [pc, #148]	; (80189c0 <StartTxRxFrameTask+0xb0>)
 801892a:	f7f4 fba9 	bl	800d080 <osMessageQueueGet>
 801892e:	63f8      	str	r0, [r7, #60]	; 0x3c
		num_msg_get++;
 8018930:	4b24      	ldr	r3, [pc, #144]	; (80189c4 <StartTxRxFrameTask+0xb4>)
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	3301      	adds	r3, #1
 8018936:	4a23      	ldr	r2, [pc, #140]	; (80189c4 <StartTxRxFrameTask+0xb4>)
 8018938:	6013      	str	r3, [r2, #0]
		if ((0)) flash_led();
        usbPollQueues();
 801893a:	f7fd fcbd 	bl	80162b8 <usbPollQueues>
        if (rc == osErrorTimeout) continue;
 801893e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018940:	f113 0f02 	cmn.w	r3, #2
 8018944:	d038      	beq.n	80189b8 <StartTxRxFrameTask+0xa8>
		if (rc != osOK) {
 8018946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018948:	2b00      	cmp	r3, #0
 801894a:	d005      	beq.n	8018958 <StartTxRxFrameTask+0x48>
			num_msg_get_err++;
 801894c:	4b1e      	ldr	r3, [pc, #120]	; (80189c8 <StartTxRxFrameTask+0xb8>)
 801894e:	681b      	ldr	r3, [r3, #0]
 8018950:	3301      	adds	r3, #1
 8018952:	4a1d      	ldr	r2, [pc, #116]	; (80189c8 <StartTxRxFrameTask+0xb8>)
 8018954:	6013      	str	r3, [r2, #0]
			continue;
 8018956:	e030      	b.n	80189ba <StartTxRxFrameTask+0xaa>
		}
		if (m.t == RXFRAME_CHARS) {
 8018958:	4b19      	ldr	r3, [pc, #100]	; (80189c0 <StartTxRxFrameTask+0xb0>)
 801895a:	781b      	ldrb	r3, [r3, #0]
 801895c:	2bff      	cmp	r3, #255	; 0xff
 801895e:	d103      	bne.n	8018968 <StartTxRxFrameTask+0x58>
			//debug_info('G', 0, "RXFRM", m.len,0, 0);
			handleRxChars(&m);
 8018960:	4817      	ldr	r0, [pc, #92]	; (80189c0 <StartTxRxFrameTask+0xb0>)
 8018962:	f000 f89f 	bl	8018aa4 <handleRxChars>
			continue;
 8018966:	e028      	b.n	80189ba <StartTxRxFrameTask+0xaa>
		}
		if (m.t == TXFRAME_TYPE_STAT) {
 8018968:	4b15      	ldr	r3, [pc, #84]	; (80189c0 <StartTxRxFrameTask+0xb0>)
 801896a:	781b      	ldrb	r3, [r3, #0]
 801896c:	2b04      	cmp	r3, #4
 801896e:	d11c      	bne.n	80189aa <StartTxRxFrameTask+0x9a>
			uint32_t t = HAL_GetTick();   // XXX t0
 8018970:	f7e9 fa40 	bl	8001df4 <HAL_GetTick>
 8018974:	63b8      	str	r0, [r7, #56]	; 0x38
			uint8_t b[]="|_NG\000X";
 8018976:	4a15      	ldr	r2, [pc, #84]	; (80189cc <StartTxRxFrameTask+0xbc>)
 8018978:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801897c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018980:	6018      	str	r0, [r3, #0]
 8018982:	3304      	adds	r3, #4
 8018984:	8019      	strh	r1, [r3, #0]
 8018986:	3302      	adds	r3, #2
 8018988:	0c0a      	lsrs	r2, r1, #16
 801898a:	701a      	strb	r2, [r3, #0]
			//memcpy(b+6, &t, 4);
			_send_bytes(b, 6);
 801898c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018990:	2106      	movs	r1, #6
 8018992:	4618      	mov	r0, r3
 8018994:	f000 f822 	bl	80189dc <_send_bytes>
			frame_send_stat(_send_bytes, t);
 8018998:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801899a:	480d      	ldr	r0, [pc, #52]	; (80189d0 <StartTxRxFrameTask+0xc0>)
 801899c:	f7fe f9cd 	bl	8016d3a <frame_send_stat>
			_send_bytes((uint8_t *)"|", 1);
 80189a0:	2101      	movs	r1, #1
 80189a2:	480c      	ldr	r0, [pc, #48]	; (80189d4 <StartTxRxFrameTask+0xc4>)
 80189a4:	f000 f81a 	bl	80189dc <_send_bytes>
 80189a8:	e7b8      	b.n	801891c <StartTxRxFrameTask+0xc>
			continue;
		}
		_send_bytes(m.frm, m.len);
 80189aa:	4b05      	ldr	r3, [pc, #20]	; (80189c0 <StartTxRxFrameTask+0xb0>)
 80189ac:	785b      	ldrb	r3, [r3, #1]
 80189ae:	4619      	mov	r1, r3
 80189b0:	4809      	ldr	r0, [pc, #36]	; (80189d8 <StartTxRxFrameTask+0xc8>)
 80189b2:	f000 f813 	bl	80189dc <_send_bytes>
 80189b6:	e7b1      	b.n	801891c <StartTxRxFrameTask+0xc>
        if (rc == osErrorTimeout) continue;
 80189b8:	bf00      	nop
	for (;;) {
 80189ba:	e7af      	b.n	801891c <StartTxRxFrameTask+0xc>
 80189bc:	20005d94 	.word	0x20005d94
 80189c0:	200055d4 	.word	0x200055d4
 80189c4:	200055c4 	.word	0x200055c4
 80189c8:	200055cc 	.word	0x200055cc
 80189cc:	08019e60 	.word	0x08019e60
 80189d0:	080189dd 	.word	0x080189dd
 80189d4:	08019e5c 	.word	0x08019e5c
 80189d8:	200055d6 	.word	0x200055d6

080189dc <_send_bytes>:
	}
}
//void frame_send_stat(void(*cb)(uint8_t *d, int l));

static void _send_bytes(uint8_t *b, int len)
{
 80189dc:	b580      	push	{r7, lr}
 80189de:	b084      	sub	sp, #16
 80189e0:	af00      	add	r7, sp, #0
 80189e2:	6078      	str	r0, [r7, #4]
 80189e4:	6039      	str	r1, [r7, #0]
	for (;;) {
		uint8_t rc = CDC_Transmit_FS(b, len);
 80189e6:	683b      	ldr	r3, [r7, #0]
 80189e8:	b29b      	uxth	r3, r3
 80189ea:	4619      	mov	r1, r3
 80189ec:	6878      	ldr	r0, [r7, #4]
 80189ee:	f7f7 fb65 	bl	80100bc <CDC_Transmit_FS>
 80189f2:	4603      	mov	r3, r0
 80189f4:	73fb      	strb	r3, [r7, #15]
		if (rc != USBD_BUSY) break;
 80189f6:	7bfb      	ldrb	r3, [r7, #15]
 80189f8:	2b01      	cmp	r3, #1
 80189fa:	d103      	bne.n	8018a04 <_send_bytes+0x28>
		osDelay(1);
 80189fc:	2001      	movs	r0, #1
 80189fe:	f7f4 fa17 	bl	800ce30 <osDelay>
	for (;;) {
 8018a02:	e7f0      	b.n	80189e6 <_send_bytes+0xa>
		if (rc != USBD_BUSY) break;
 8018a04:	bf00      	nop
	}
}
 8018a06:	bf00      	nop
 8018a08:	3710      	adds	r7, #16
 8018a0a:	46bd      	mov	sp, r7
 8018a0c:	bd80      	pop	{r7, pc}
	...

08018a10 <txframe_send>:

int txframe_queue_full = 0;

void txframe_send(frame_msg_t *m, int discardable)
{
 8018a10:	b580      	push	{r7, lr}
 8018a12:	b084      	sub	sp, #16
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	6078      	str	r0, [r7, #4]
 8018a18:	6039      	str	r1, [r7, #0]
	int s = osMessageQueueGetSpace(frameQueueHandle);
 8018a1a:	4b1f      	ldr	r3, [pc, #124]	; (8018a98 <txframe_send+0x88>)
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	4618      	mov	r0, r3
 8018a20:	f7f4 fba0 	bl	800d164 <osMessageQueueGetSpace>
 8018a24:	4603      	mov	r3, r0
 8018a26:	60fb      	str	r3, [r7, #12]
	if (s<=0) {
 8018a28:	68fb      	ldr	r3, [r7, #12]
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	dc07      	bgt.n	8018a3e <txframe_send+0x2e>
		txframe_queue_full++;
 8018a2e:	4b1b      	ldr	r3, [pc, #108]	; (8018a9c <txframe_send+0x8c>)
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	3301      	adds	r3, #1
 8018a34:	4a19      	ldr	r2, [pc, #100]	; (8018a9c <txframe_send+0x8c>)
 8018a36:	6013      	str	r3, [r2, #0]
		if (discardable) return;
 8018a38:	683b      	ldr	r3, [r7, #0]
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d127      	bne.n	8018a8e <txframe_send+0x7e>
	}
	if ((s<=20) && discardable) {
 8018a3e:	68fb      	ldr	r3, [r7, #12]
 8018a40:	2b14      	cmp	r3, #20
 8018a42:	dc08      	bgt.n	8018a56 <txframe_send+0x46>
 8018a44:	683b      	ldr	r3, [r7, #0]
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d005      	beq.n	8018a56 <txframe_send+0x46>
		// we use a single queue, and no priority available with freertos
		// so we just keep some space for non discardable frames
		txframe_queue_full++;
 8018a4a:	4b14      	ldr	r3, [pc, #80]	; (8018a9c <txframe_send+0x8c>)
 8018a4c:	681b      	ldr	r3, [r3, #0]
 8018a4e:	3301      	adds	r3, #1
 8018a50:	4a12      	ldr	r2, [pc, #72]	; (8018a9c <txframe_send+0x8c>)
 8018a52:	6013      	str	r3, [r2, #0]
		return;
 8018a54:	e01c      	b.n	8018a90 <txframe_send+0x80>
	}
	uint32_t t = discardable ? 0 : portMAX_DELAY;
 8018a56:	683b      	ldr	r3, [r7, #0]
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	d001      	beq.n	8018a60 <txframe_send+0x50>
 8018a5c:	2300      	movs	r3, #0
 8018a5e:	e001      	b.n	8018a64 <txframe_send+0x54>
 8018a60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018a64:	60bb      	str	r3, [r7, #8]
	if (m->len>FRM_MAX_LEN) m->len=FRM_MAX_LEN;
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	785b      	ldrb	r3, [r3, #1]
 8018a6a:	2b1f      	cmp	r3, #31
 8018a6c:	d902      	bls.n	8018a74 <txframe_send+0x64>
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	221f      	movs	r2, #31
 8018a72:	705a      	strb	r2, [r3, #1]
	num_msg_put++;
 8018a74:	4b0a      	ldr	r3, [pc, #40]	; (8018aa0 <txframe_send+0x90>)
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	3301      	adds	r3, #1
 8018a7a:	4a09      	ldr	r2, [pc, #36]	; (8018aa0 <txframe_send+0x90>)
 8018a7c:	6013      	str	r3, [r2, #0]
	osMessageQueuePut(frameQueueHandle, m, 0, t);
 8018a7e:	4b06      	ldr	r3, [pc, #24]	; (8018a98 <txframe_send+0x88>)
 8018a80:	6818      	ldr	r0, [r3, #0]
 8018a82:	68bb      	ldr	r3, [r7, #8]
 8018a84:	2200      	movs	r2, #0
 8018a86:	6879      	ldr	r1, [r7, #4]
 8018a88:	f7f4 fa86 	bl	800cf98 <osMessageQueuePut>
 8018a8c:	e000      	b.n	8018a90 <txframe_send+0x80>
		if (discardable) return;
 8018a8e:	bf00      	nop
}
 8018a90:	3710      	adds	r7, #16
 8018a92:	46bd      	mov	sp, r7
 8018a94:	bd80      	pop	{r7, pc}
 8018a96:	bf00      	nop
 8018a98:	20005d94 	.word	0x20005d94
 8018a9c:	200055d0 	.word	0x200055d0
 8018aa0:	200055c8 	.word	0x200055c8

08018aa4 <handleRxChars>:

/* ------ RX ----- */

static void handleRxChars(frame_msg_t *m)
{
 8018aa4:	b580      	push	{r7, lr}
 8018aa6:	b08e      	sub	sp, #56	; 0x38
 8018aa8:	af00      	add	r7, sp, #0
 8018aaa:	6078      	str	r0, [r7, #4]
    frame_msg_t frresp;
	frresp.t = TXFRAME_TYPE_RESP;
 8018aac:	2301      	movs	r3, #1
 8018aae:	743b      	strb	r3, [r7, #16]
	/*
	 * int rlen = FRM_MAX_LEN;
	    	frame_process(cRxedChar,m.frm, &rlen);
	 */
	for (int i=0; i<m->len; i++) {
 8018ab0:	2300      	movs	r3, #0
 8018ab2:	637b      	str	r3, [r7, #52]	; 0x34
 8018ab4:	e01c      	b.n	8018af0 <handleRxChars+0x4c>
		int rlen = FRM_MAX_LEN;
 8018ab6:	231f      	movs	r3, #31
 8018ab8:	60fb      	str	r3, [r7, #12]
		txrx_process_char(m->frm[i], frresp.frm, &rlen);
 8018aba:	687a      	ldr	r2, [r7, #4]
 8018abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018abe:	4413      	add	r3, r2
 8018ac0:	3302      	adds	r3, #2
 8018ac2:	7818      	ldrb	r0, [r3, #0]
 8018ac4:	f107 020c 	add.w	r2, r7, #12
 8018ac8:	f107 0310 	add.w	r3, r7, #16
 8018acc:	3302      	adds	r3, #2
 8018ace:	4619      	mov	r1, r3
 8018ad0:	f7fd fc06 	bl	80162e0 <txrx_process_char>
		if (rlen>0) {
 8018ad4:	68fb      	ldr	r3, [r7, #12]
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	dd07      	ble.n	8018aea <handleRxChars+0x46>
			//debug_info('G', 0, "RESP", rlen,0, 0);
			// would deadlock if we send (non discardable) through the queue
			//txframe_send_response(&frresp, rlen);
			_send_bytes(frresp.frm, rlen);
 8018ada:	68fa      	ldr	r2, [r7, #12]
 8018adc:	f107 0310 	add.w	r3, r7, #16
 8018ae0:	3302      	adds	r3, #2
 8018ae2:	4611      	mov	r1, r2
 8018ae4:	4618      	mov	r0, r3
 8018ae6:	f7ff ff79 	bl	80189dc <_send_bytes>
	for (int i=0; i<m->len; i++) {
 8018aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018aec:	3301      	adds	r3, #1
 8018aee:	637b      	str	r3, [r7, #52]	; 0x34
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	785b      	ldrb	r3, [r3, #1]
 8018af4:	461a      	mov	r2, r3
 8018af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018af8:	4293      	cmp	r3, r2
 8018afa:	dbdc      	blt.n	8018ab6 <handleRxChars+0x12>
			//frresp.len = rlen;
			//_send_frm(&frresp);
		}
	}
}
 8018afc:	bf00      	nop
 8018afe:	3738      	adds	r7, #56	; 0x38
 8018b00:	46bd      	mov	sp, r7
 8018b02:	bd80      	pop	{r7, pc}

08018b04 <impl_CDC_Receive_FS>:

extern USBD_HandleTypeDef hUsbDeviceFS;


int8_t impl_CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018b04:	b580      	push	{r7, lr}
 8018b06:	b086      	sub	sp, #24
 8018b08:	af00      	add	r7, sp, #0
 8018b0a:	6078      	str	r0, [r7, #4]
 8018b0c:	6039      	str	r1, [r7, #0]
	if ((0)) {
		sprintf(str, "[B%d]\r\n", *Len);
		CDC_Transmit_FS(str, strlen(str));
	}
	*/
	uint8_t *p = Buf;
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	617b      	str	r3, [r7, #20]
	int32_t rlen = *Len;
 8018b12:	683b      	ldr	r3, [r7, #0]
 8018b14:	681b      	ldr	r3, [r3, #0]
 8018b16:	613b      	str	r3, [r7, #16]
	for (;;) {
		//BaseType_t xHigherPriorityTaskWoken = pdFALSE;
		frrx.t = RXFRAME_CHARS;
 8018b18:	4b18      	ldr	r3, [pc, #96]	; (8018b7c <impl_CDC_Receive_FS+0x78>)
 8018b1a:	22ff      	movs	r2, #255	; 0xff
 8018b1c:	701a      	strb	r2, [r3, #0]
		int l = MIN(rlen, RXFRAME_CHARS);
 8018b1e:	693b      	ldr	r3, [r7, #16]
 8018b20:	2bff      	cmp	r3, #255	; 0xff
 8018b22:	bfa8      	it	ge
 8018b24:	23ff      	movge	r3, #255	; 0xff
 8018b26:	60fb      	str	r3, [r7, #12]
		memcpy(frrx.frm, p, l);
 8018b28:	68fb      	ldr	r3, [r7, #12]
 8018b2a:	461a      	mov	r2, r3
 8018b2c:	6979      	ldr	r1, [r7, #20]
 8018b2e:	4814      	ldr	r0, [pc, #80]	; (8018b80 <impl_CDC_Receive_FS+0x7c>)
 8018b30:	f000 fbb0 	bl	8019294 <memcpy>
		rlen -= l;
 8018b34:	693a      	ldr	r2, [r7, #16]
 8018b36:	68fb      	ldr	r3, [r7, #12]
 8018b38:	1ad3      	subs	r3, r2, r3
 8018b3a:	613b      	str	r3, [r7, #16]
		p += l;
 8018b3c:	68fb      	ldr	r3, [r7, #12]
 8018b3e:	697a      	ldr	r2, [r7, #20]
 8018b40:	4413      	add	r3, r2
 8018b42:	617b      	str	r3, [r7, #20]
		frrx.len = l;
 8018b44:	68fb      	ldr	r3, [r7, #12]
 8018b46:	b2da      	uxtb	r2, r3
 8018b48:	4b0c      	ldr	r3, [pc, #48]	; (8018b7c <impl_CDC_Receive_FS+0x78>)
 8018b4a:	705a      	strb	r2, [r3, #1]
		osMessageQueuePut(frameQueueHandle, &frrx, 0, 0);
 8018b4c:	4b0d      	ldr	r3, [pc, #52]	; (8018b84 <impl_CDC_Receive_FS+0x80>)
 8018b4e:	6818      	ldr	r0, [r3, #0]
 8018b50:	2300      	movs	r3, #0
 8018b52:	2200      	movs	r2, #0
 8018b54:	4909      	ldr	r1, [pc, #36]	; (8018b7c <impl_CDC_Receive_FS+0x78>)
 8018b56:	f7f4 fa1f 	bl	800cf98 <osMessageQueuePut>
		if (rlen <= 0) break;
 8018b5a:	693b      	ldr	r3, [r7, #16]
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	dd00      	ble.n	8018b62 <impl_CDC_Receive_FS+0x5e>
	for (;;) {
 8018b60:	e7da      	b.n	8018b18 <impl_CDC_Receive_FS+0x14>
		if (rlen <= 0) break;
 8018b62:	bf00      	nop
	}

	//CDC_Transmit_FS(Buf, *Len); // ADD THIS LINE to echo back all incoming data

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8018b64:	6879      	ldr	r1, [r7, #4]
 8018b66:	4808      	ldr	r0, [pc, #32]	; (8018b88 <impl_CDC_Receive_FS+0x84>)
 8018b68:	f7f2 fed8 	bl	800b91c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018b6c:	4806      	ldr	r0, [pc, #24]	; (8018b88 <impl_CDC_Receive_FS+0x84>)
 8018b6e:	f7f2 ff19 	bl	800b9a4 <USBD_CDC_ReceivePacket>

	return (USBD_OK);
 8018b72:	2300      	movs	r3, #0
}
 8018b74:	4618      	mov	r0, r3
 8018b76:	3718      	adds	r7, #24
 8018b78:	46bd      	mov	sp, r7
 8018b7a:	bd80      	pop	{r7, pc}
 8018b7c:	200055f8 	.word	0x200055f8
 8018b80:	200055fa 	.word	0x200055fa
 8018b84:	20005d94 	.word	0x20005d94
 8018b88:	20007004 	.word	0x20007004

08018b8c <itm_debug3>:
{
 8018b8c:	b580      	push	{r7, lr}
 8018b8e:	b086      	sub	sp, #24
 8018b90:	af02      	add	r7, sp, #8
 8018b92:	60f8      	str	r0, [r7, #12]
 8018b94:	60b9      	str	r1, [r7, #8]
 8018b96:	607a      	str	r2, [r7, #4]
 8018b98:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(msg, v1, v2, v3, 3);
 8018b9a:	4b09      	ldr	r3, [pc, #36]	; (8018bc0 <itm_debug3+0x34>)
 8018b9c:	681a      	ldr	r2, [r3, #0]
 8018b9e:	68fb      	ldr	r3, [r7, #12]
 8018ba0:	4013      	ands	r3, r2
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	d007      	beq.n	8018bb6 <itm_debug3+0x2a>
 8018ba6:	2303      	movs	r3, #3
 8018ba8:	9300      	str	r3, [sp, #0]
 8018baa:	69bb      	ldr	r3, [r7, #24]
 8018bac:	683a      	ldr	r2, [r7, #0]
 8018bae:	6879      	ldr	r1, [r7, #4]
 8018bb0:	68b8      	ldr	r0, [r7, #8]
 8018bb2:	f000 f959 	bl	8018e68 <_itm_debug3>
}
 8018bb6:	bf00      	nop
 8018bb8:	3710      	adds	r7, #16
 8018bba:	46bd      	mov	sp, r7
 8018bbc:	bd80      	pop	{r7, pc}
 8018bbe:	bf00      	nop
 8018bc0:	200005a4 	.word	0x200005a4

08018bc4 <_blk_num_for_sub_num>:
#include "railconfig.h"
#include "topology.h"


int _blk_num_for_sub_num(int subnum)
{
 8018bc4:	b480      	push	{r7}
 8018bc6:	b083      	sub	sp, #12
 8018bc8:	af00      	add	r7, sp, #0
 8018bca:	6078      	str	r0, [r7, #4]
	if (subnum == 2) return 0;
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	2b02      	cmp	r3, #2
 8018bd0:	d101      	bne.n	8018bd6 <_blk_num_for_sub_num+0x12>
 8018bd2:	2300      	movs	r3, #0
 8018bd4:	e00b      	b.n	8018bee <_blk_num_for_sub_num+0x2a>
	if (subnum == 1) return 1;
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	2b01      	cmp	r3, #1
 8018bda:	d101      	bne.n	8018be0 <_blk_num_for_sub_num+0x1c>
 8018bdc:	2301      	movs	r3, #1
 8018bde:	e006      	b.n	8018bee <_blk_num_for_sub_num+0x2a>
	if (subnum == 0) return 2;
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	d101      	bne.n	8018bea <_blk_num_for_sub_num+0x26>
 8018be6:	2302      	movs	r3, #2
 8018be8:	e001      	b.n	8018bee <_blk_num_for_sub_num+0x2a>
	return -1;
 8018bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8018bee:	4618      	mov	r0, r3
 8018bf0:	370c      	adds	r7, #12
 8018bf2:	46bd      	mov	sp, r7
 8018bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bf8:	4770      	bx	lr

08018bfa <_next_block_num>:


int _next_block_num(int blknum, uint8_t left)
{
 8018bfa:	b580      	push	{r7, lr}
 8018bfc:	b082      	sub	sp, #8
 8018bfe:	af00      	add	r7, sp, #0
 8018c00:	6078      	str	r0, [r7, #4]
 8018c02:	460b      	mov	r3, r1
 8018c04:	70fb      	strb	r3, [r7, #3]
	if ((0)) return -1; // XXX
	switch (blknum) {
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	2b01      	cmp	r3, #1
 8018c0a:	d00b      	beq.n	8018c24 <_next_block_num+0x2a>
 8018c0c:	2b02      	cmp	r3, #2
 8018c0e:	d019      	beq.n	8018c44 <_next_block_num+0x4a>
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d11f      	bne.n	8018c54 <_next_block_num+0x5a>
	case 0:
		return left ? 	-1 : 1;
 8018c14:	78fb      	ldrb	r3, [r7, #3]
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	d002      	beq.n	8018c20 <_next_block_num+0x26>
 8018c1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018c1e:	e01b      	b.n	8018c58 <_next_block_num+0x5e>
 8018c20:	2301      	movs	r3, #1
 8018c22:	e019      	b.n	8018c58 <_next_block_num+0x5e>
	case 1:
		return left ?	(topology_get_turnout(0) ? 2 : 0)  : -1;
 8018c24:	78fb      	ldrb	r3, [r7, #3]
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	d009      	beq.n	8018c3e <_next_block_num+0x44>
 8018c2a:	2000      	movs	r0, #0
 8018c2c:	f000 f880 	bl	8018d30 <topology_get_turnout>
 8018c30:	4603      	mov	r3, r0
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	d001      	beq.n	8018c3a <_next_block_num+0x40>
 8018c36:	2302      	movs	r3, #2
 8018c38:	e00e      	b.n	8018c58 <_next_block_num+0x5e>
 8018c3a:	2300      	movs	r3, #0
 8018c3c:	e00c      	b.n	8018c58 <_next_block_num+0x5e>
 8018c3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018c42:	e009      	b.n	8018c58 <_next_block_num+0x5e>
	case 2:
		return left ?   -1 : 1;
 8018c44:	78fb      	ldrb	r3, [r7, #3]
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d002      	beq.n	8018c50 <_next_block_num+0x56>
 8018c4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018c4e:	e003      	b.n	8018c58 <_next_block_num+0x5e>
 8018c50:	2301      	movs	r3, #1
 8018c52:	e001      	b.n	8018c58 <_next_block_num+0x5e>
	default:
		return -1;
 8018c54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 8018c58:	4618      	mov	r0, r3
 8018c5a:	3708      	adds	r7, #8
 8018c5c:	46bd      	mov	sp, r7
 8018c5e:	bd80      	pop	{r7, pc}

08018c60 <get_blk_len>:

int get_blk_len(int blknum)
{
 8018c60:	b480      	push	{r7}
 8018c62:	b083      	sub	sp, #12
 8018c64:	af00      	add	r7, sp, #0
 8018c66:	6078      	str	r0, [r7, #4]
	switch (blknum) {
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	2b01      	cmp	r3, #1
 8018c6c:	d005      	beq.n	8018c7a <get_blk_len+0x1a>
 8018c6e:	2b02      	cmp	r3, #2
 8018c70:	d005      	beq.n	8018c7e <get_blk_len+0x1e>
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d105      	bne.n	8018c82 <get_blk_len+0x22>
	case 0:
		return 70;
 8018c76:	2346      	movs	r3, #70	; 0x46
 8018c78:	e004      	b.n	8018c84 <get_blk_len+0x24>
	case 1:
		return 40;
 8018c7a:	2328      	movs	r3, #40	; 0x28
 8018c7c:	e002      	b.n	8018c84 <get_blk_len+0x24>
	case 2:
		return 50;
 8018c7e:	2332      	movs	r3, #50	; 0x32
 8018c80:	e000      	b.n	8018c84 <get_blk_len+0x24>
	default:
		return 10;
 8018c82:	230a      	movs	r3, #10
	}
}
 8018c84:	4618      	mov	r0, r3
 8018c86:	370c      	adds	r7, #12
 8018c88:	46bd      	mov	sp, r7
 8018c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c8e:	4770      	bx	lr

08018c90 <topolgy_set_turnout>:
// --------------------------------------------------------------------------------------

static volatile uint32_t turnoutvals = 0; // bit field

void topolgy_set_turnout(int tn, int v)
{
 8018c90:	b580      	push	{r7, lr}
 8018c92:	b084      	sub	sp, #16
 8018c94:	af02      	add	r7, sp, #8
 8018c96:	6078      	str	r0, [r7, #4]
 8018c98:	6039      	str	r1, [r7, #0]
	if (tn >= NUM_TURNOUTS) return;
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	2b07      	cmp	r3, #7
 8018c9e:	dc3b      	bgt.n	8018d18 <topolgy_set_turnout+0x88>
	if (tn<0) return;
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	db3a      	blt.n	8018d1c <topolgy_set_turnout+0x8c>
	if (tn>31) return;
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	2b1f      	cmp	r3, #31
 8018caa:	dc39      	bgt.n	8018d20 <topolgy_set_turnout+0x90>

	if (v) {
 8018cac:	683b      	ldr	r3, [r7, #0]
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	d012      	beq.n	8018cd8 <topolgy_set_turnout+0x48>
		__sync_fetch_and_or(&turnoutvals, (1<<tn));
 8018cb2:	2201      	movs	r2, #1
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8018cba:	461a      	mov	r2, r3
 8018cbc:	4b1a      	ldr	r3, [pc, #104]	; (8018d28 <topolgy_set_turnout+0x98>)
 8018cbe:	f3bf 8f5b 	dmb	ish
 8018cc2:	e853 1f00 	ldrex	r1, [r3]
 8018cc6:	ea41 0102 	orr.w	r1, r1, r2
 8018cca:	e843 1000 	strex	r0, r1, [r3]
 8018cce:	2800      	cmp	r0, #0
 8018cd0:	d1f7      	bne.n	8018cc2 <topolgy_set_turnout+0x32>
 8018cd2:	f3bf 8f5b 	dmb	ish
 8018cd6:	e012      	b.n	8018cfe <topolgy_set_turnout+0x6e>
	} else {
		__sync_fetch_and_and(&turnoutvals, ~(1<<tn));
 8018cd8:	2201      	movs	r2, #1
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8018ce0:	43db      	mvns	r3, r3
 8018ce2:	461a      	mov	r2, r3
 8018ce4:	4b10      	ldr	r3, [pc, #64]	; (8018d28 <topolgy_set_turnout+0x98>)
 8018ce6:	f3bf 8f5b 	dmb	ish
 8018cea:	e853 1f00 	ldrex	r1, [r3]
 8018cee:	ea01 0102 	and.w	r1, r1, r2
 8018cf2:	e843 1000 	strex	r0, r1, [r3]
 8018cf6:	2800      	cmp	r0, #0
 8018cf8:	d1f7      	bne.n	8018cea <topolgy_set_turnout+0x5a>
 8018cfa:	f3bf 8f5b 	dmb	ish
	}
	itm_debug3(DBG_TURNOUT, "tt",tn,v, topology_get_turnout(tn));
 8018cfe:	6878      	ldr	r0, [r7, #4]
 8018d00:	f000 f816 	bl	8018d30 <topology_get_turnout>
 8018d04:	4603      	mov	r3, r0
 8018d06:	9300      	str	r3, [sp, #0]
 8018d08:	683b      	ldr	r3, [r7, #0]
 8018d0a:	687a      	ldr	r2, [r7, #4]
 8018d0c:	4907      	ldr	r1, [pc, #28]	; (8018d2c <topolgy_set_turnout+0x9c>)
 8018d0e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8018d12:	f7ff ff3b 	bl	8018b8c <itm_debug3>
 8018d16:	e004      	b.n	8018d22 <topolgy_set_turnout+0x92>
	if (tn >= NUM_TURNOUTS) return;
 8018d18:	bf00      	nop
 8018d1a:	e002      	b.n	8018d22 <topolgy_set_turnout+0x92>
	if (tn<0) return;
 8018d1c:	bf00      	nop
 8018d1e:	e000      	b.n	8018d22 <topolgy_set_turnout+0x92>
	if (tn>31) return;
 8018d20:	bf00      	nop
}
 8018d22:	3708      	adds	r7, #8
 8018d24:	46bd      	mov	sp, r7
 8018d26:	bd80      	pop	{r7, pc}
 8018d28:	2000561c 	.word	0x2000561c
 8018d2c:	08019e68 	.word	0x08019e68

08018d30 <topology_get_turnout>:
int topology_get_turnout(int tn)
{
 8018d30:	b480      	push	{r7}
 8018d32:	b085      	sub	sp, #20
 8018d34:	af00      	add	r7, sp, #0
 8018d36:	6078      	str	r0, [r7, #4]
	if (tn >= NUM_TURNOUTS) return 0;
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	2b07      	cmp	r3, #7
 8018d3c:	dd01      	ble.n	8018d42 <topology_get_turnout+0x12>
 8018d3e:	2300      	movs	r3, #0
 8018d40:	e018      	b.n	8018d74 <topology_get_turnout+0x44>
	if (tn<0) return 0;
 8018d42:	687b      	ldr	r3, [r7, #4]
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	da01      	bge.n	8018d4c <topology_get_turnout+0x1c>
 8018d48:	2300      	movs	r3, #0
 8018d4a:	e013      	b.n	8018d74 <topology_get_turnout+0x44>
	if (tn>31) return 0;
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	2b1f      	cmp	r3, #31
 8018d50:	dd01      	ble.n	8018d56 <topology_get_turnout+0x26>
 8018d52:	2300      	movs	r3, #0
 8018d54:	e00e      	b.n	8018d74 <topology_get_turnout+0x44>

	uint32_t b = turnoutvals;
 8018d56:	4b0a      	ldr	r3, [pc, #40]	; (8018d80 <topology_get_turnout+0x50>)
 8018d58:	681b      	ldr	r3, [r3, #0]
 8018d5a:	60fb      	str	r3, [r7, #12]
	return (b & (1<<tn)) ? 1 : 0;
 8018d5c:	2201      	movs	r2, #1
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	fa02 f303 	lsl.w	r3, r2, r3
 8018d64:	461a      	mov	r2, r3
 8018d66:	68fb      	ldr	r3, [r7, #12]
 8018d68:	4013      	ands	r3, r2
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	bf14      	ite	ne
 8018d6e:	2301      	movne	r3, #1
 8018d70:	2300      	moveq	r3, #0
 8018d72:	b2db      	uxtb	r3, r3
}
 8018d74:	4618      	mov	r0, r3
 8018d76:	3714      	adds	r7, #20
 8018d78:	46bd      	mov	sp, r7
 8018d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d7e:	4770      	bx	lr
 8018d80:	2000561c 	.word	0x2000561c

08018d84 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8018d84:	b480      	push	{r7}
 8018d86:	b083      	sub	sp, #12
 8018d88:	af00      	add	r7, sp, #0
 8018d8a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8018d8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8018d90:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8018d94:	f003 0301 	and.w	r3, r3, #1
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d013      	beq.n	8018dc4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8018d9c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8018da0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8018da4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	d00b      	beq.n	8018dc4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8018dac:	e000      	b.n	8018db0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8018dae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8018db0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8018db4:	681b      	ldr	r3, [r3, #0]
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d0f9      	beq.n	8018dae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8018dba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8018dbe:	687a      	ldr	r2, [r7, #4]
 8018dc0:	b2d2      	uxtb	r2, r2
 8018dc2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8018dc4:	687b      	ldr	r3, [r7, #4]
}
 8018dc6:	4618      	mov	r0, r3
 8018dc8:	370c      	adds	r7, #12
 8018dca:	46bd      	mov	sp, r7
 8018dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dd0:	4770      	bx	lr
	...

08018dd4 <write_num>:




static void write_num(uint8_t *buf, uint32_t v, int ndigit)
{
 8018dd4:	b480      	push	{r7}
 8018dd6:	b085      	sub	sp, #20
 8018dd8:	af00      	add	r7, sp, #0
 8018dda:	60f8      	str	r0, [r7, #12]
 8018ddc:	60b9      	str	r1, [r7, #8]
 8018dde:	607a      	str	r2, [r7, #4]
	for (;ndigit>0; ndigit--) {
 8018de0:	e01a      	b.n	8018e18 <write_num+0x44>
		buf[ndigit-1] = '0'+ (v % 10);
 8018de2:	68b9      	ldr	r1, [r7, #8]
 8018de4:	4b11      	ldr	r3, [pc, #68]	; (8018e2c <write_num+0x58>)
 8018de6:	fba3 2301 	umull	r2, r3, r3, r1
 8018dea:	08da      	lsrs	r2, r3, #3
 8018dec:	4613      	mov	r3, r2
 8018dee:	009b      	lsls	r3, r3, #2
 8018df0:	4413      	add	r3, r2
 8018df2:	005b      	lsls	r3, r3, #1
 8018df4:	1aca      	subs	r2, r1, r3
 8018df6:	b2d2      	uxtb	r2, r2
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	3b01      	subs	r3, #1
 8018dfc:	68f9      	ldr	r1, [r7, #12]
 8018dfe:	440b      	add	r3, r1
 8018e00:	3230      	adds	r2, #48	; 0x30
 8018e02:	b2d2      	uxtb	r2, r2
 8018e04:	701a      	strb	r2, [r3, #0]
		v = v/10;
 8018e06:	68bb      	ldr	r3, [r7, #8]
 8018e08:	4a08      	ldr	r2, [pc, #32]	; (8018e2c <write_num+0x58>)
 8018e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8018e0e:	08db      	lsrs	r3, r3, #3
 8018e10:	60bb      	str	r3, [r7, #8]
	for (;ndigit>0; ndigit--) {
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	3b01      	subs	r3, #1
 8018e16:	607b      	str	r3, [r7, #4]
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	dce1      	bgt.n	8018de2 <write_num+0xe>
	}
}
 8018e1e:	bf00      	nop
 8018e20:	3714      	adds	r7, #20
 8018e22:	46bd      	mov	sp, r7
 8018e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e28:	4770      	bx	lr
 8018e2a:	bf00      	nop
 8018e2c:	cccccccd 	.word	0xcccccccd

08018e30 <_write>:

#ifndef TRAIN_SIMU
int _write(_UNUSED_ int32_t file, uint8_t *ptr, int32_t len)
{
 8018e30:	b580      	push	{r7, lr}
 8018e32:	b086      	sub	sp, #24
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	60f8      	str	r0, [r7, #12]
 8018e38:	60b9      	str	r1, [r7, #8]
 8018e3a:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < len; i++)
 8018e3c:	2300      	movs	r3, #0
 8018e3e:	617b      	str	r3, [r7, #20]
 8018e40:	e009      	b.n	8018e56 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8018e42:	68bb      	ldr	r3, [r7, #8]
 8018e44:	1c5a      	adds	r2, r3, #1
 8018e46:	60ba      	str	r2, [r7, #8]
 8018e48:	781b      	ldrb	r3, [r3, #0]
 8018e4a:	4618      	mov	r0, r3
 8018e4c:	f7ff ff9a 	bl	8018d84 <ITM_SendChar>
	for (int i = 0; i < len; i++)
 8018e50:	697b      	ldr	r3, [r7, #20]
 8018e52:	3301      	adds	r3, #1
 8018e54:	617b      	str	r3, [r7, #20]
 8018e56:	697a      	ldr	r2, [r7, #20]
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	429a      	cmp	r2, r3
 8018e5c:	dbf1      	blt.n	8018e42 <_write+0x12>
	}
	return len;
 8018e5e:	687b      	ldr	r3, [r7, #4]
}
 8018e60:	4618      	mov	r0, r3
 8018e62:	3718      	adds	r7, #24
 8018e64:	46bd      	mov	sp, r7
 8018e66:	bd80      	pop	{r7, pc}

08018e68 <_itm_debug3>:
#endif


void _itm_debug3(const char *msg, int v1, int v2, int v3, int n)
{
 8018e68:	b580      	push	{r7, lr}
 8018e6a:	b096      	sub	sp, #88	; 0x58
 8018e6c:	af00      	add	r7, sp, #0
 8018e6e:	60f8      	str	r0, [r7, #12]
 8018e70:	60b9      	str	r1, [r7, #8]
 8018e72:	607a      	str	r2, [r7, #4]
 8018e74:	603b      	str	r3, [r7, #0]
	uint8_t buf[64];
	memset(buf, 0, sizeof(buf));
 8018e76:	f107 0314 	add.w	r3, r7, #20
 8018e7a:	2240      	movs	r2, #64	; 0x40
 8018e7c:	2100      	movs	r1, #0
 8018e7e:	4618      	mov	r0, r3
 8018e80:	f000 fa13 	bl	80192aa <memset>
	write_num(buf, HAL_GetTick(), 7);
 8018e84:	f7e8 ffb6 	bl	8001df4 <HAL_GetTick>
 8018e88:	4601      	mov	r1, r0
 8018e8a:	f107 0314 	add.w	r3, r7, #20
 8018e8e:	2207      	movs	r2, #7
 8018e90:	4618      	mov	r0, r3
 8018e92:	f7ff ff9f 	bl	8018dd4 <write_num>
	buf[7]=':';
 8018e96:	233a      	movs	r3, #58	; 0x3a
 8018e98:	76fb      	strb	r3, [r7, #27]
	strncpy((char *)buf+8, msg, 12);
 8018e9a:	f107 0314 	add.w	r3, r7, #20
 8018e9e:	3308      	adds	r3, #8
 8018ea0:	220c      	movs	r2, #12
 8018ea2:	68f9      	ldr	r1, [r7, #12]
 8018ea4:	4618      	mov	r0, r3
 8018ea6:	f000 fac1 	bl	801942c <strncpy>
	uint8_t *p = buf+strlen((char *)buf);
 8018eaa:	f107 0314 	add.w	r3, r7, #20
 8018eae:	4618      	mov	r0, r3
 8018eb0:	f7e7 f998 	bl	80001e4 <strlen>
 8018eb4:	4602      	mov	r2, r0
 8018eb6:	f107 0314 	add.w	r3, r7, #20
 8018eba:	4413      	add	r3, r2
 8018ebc:	657b      	str	r3, [r7, #84]	; 0x54
	if (!n--) goto done;
 8018ebe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018ec0:	1e5a      	subs	r2, r3, #1
 8018ec2:	663a      	str	r2, [r7, #96]	; 0x60
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	d03c      	beq.n	8018f42 <_itm_debug3+0xda>
	*p = '/';
 8018ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018eca:	222f      	movs	r2, #47	; 0x2f
 8018ecc:	701a      	strb	r2, [r3, #0]
	itoa(v1, (char *)p+1, 10);
 8018ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018ed0:	3301      	adds	r3, #1
 8018ed2:	220a      	movs	r2, #10
 8018ed4:	4619      	mov	r1, r3
 8018ed6:	68b8      	ldr	r0, [r7, #8]
 8018ed8:	f000 f9ca 	bl	8019270 <itoa>
	p = buf+strlen((char *)buf);
 8018edc:	f107 0314 	add.w	r3, r7, #20
 8018ee0:	4618      	mov	r0, r3
 8018ee2:	f7e7 f97f 	bl	80001e4 <strlen>
 8018ee6:	4602      	mov	r2, r0
 8018ee8:	f107 0314 	add.w	r3, r7, #20
 8018eec:	4413      	add	r3, r2
 8018eee:	657b      	str	r3, [r7, #84]	; 0x54
	if (!n--) goto done;
 8018ef0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018ef2:	1e5a      	subs	r2, r3, #1
 8018ef4:	663a      	str	r2, [r7, #96]	; 0x60
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	d025      	beq.n	8018f46 <_itm_debug3+0xde>
	*p = '/';
 8018efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018efc:	222f      	movs	r2, #47	; 0x2f
 8018efe:	701a      	strb	r2, [r3, #0]
	itoa(v2, (char *)p+1, 10);
 8018f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018f02:	3301      	adds	r3, #1
 8018f04:	220a      	movs	r2, #10
 8018f06:	4619      	mov	r1, r3
 8018f08:	6878      	ldr	r0, [r7, #4]
 8018f0a:	f000 f9b1 	bl	8019270 <itoa>
	p = buf+strlen((char *)buf);
 8018f0e:	f107 0314 	add.w	r3, r7, #20
 8018f12:	4618      	mov	r0, r3
 8018f14:	f7e7 f966 	bl	80001e4 <strlen>
 8018f18:	4602      	mov	r2, r0
 8018f1a:	f107 0314 	add.w	r3, r7, #20
 8018f1e:	4413      	add	r3, r2
 8018f20:	657b      	str	r3, [r7, #84]	; 0x54
	if (!n--) goto done;
 8018f22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018f24:	1e5a      	subs	r2, r3, #1
 8018f26:	663a      	str	r2, [r7, #96]	; 0x60
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	d00e      	beq.n	8018f4a <_itm_debug3+0xe2>
	*p = '/';
 8018f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018f2e:	222f      	movs	r2, #47	; 0x2f
 8018f30:	701a      	strb	r2, [r3, #0]
	itoa(v3, (char *)p+1, 10);
 8018f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018f34:	3301      	adds	r3, #1
 8018f36:	220a      	movs	r2, #10
 8018f38:	4619      	mov	r1, r3
 8018f3a:	6838      	ldr	r0, [r7, #0]
 8018f3c:	f000 f998 	bl	8019270 <itoa>
 8018f40:	e004      	b.n	8018f4c <_itm_debug3+0xe4>
	if (!n--) goto done;
 8018f42:	bf00      	nop
 8018f44:	e002      	b.n	8018f4c <_itm_debug3+0xe4>
	if (!n--) goto done;
 8018f46:	bf00      	nop
 8018f48:	e000      	b.n	8018f4c <_itm_debug3+0xe4>
	if (!n--) goto done;
 8018f4a:	bf00      	nop
done:
	p = buf+strlen((char *)buf);
 8018f4c:	f107 0314 	add.w	r3, r7, #20
 8018f50:	4618      	mov	r0, r3
 8018f52:	f7e7 f947 	bl	80001e4 <strlen>
 8018f56:	4602      	mov	r2, r0
 8018f58:	f107 0314 	add.w	r3, r7, #20
 8018f5c:	4413      	add	r3, r2
 8018f5e:	657b      	str	r3, [r7, #84]	; 0x54
	*p = '\n';
 8018f60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018f62:	220a      	movs	r2, #10
 8018f64:	701a      	strb	r2, [r3, #0]
#ifndef TRAIN_SIMU
	_write(0, buf, strlen((char *)buf));
 8018f66:	f107 0314 	add.w	r3, r7, #20
 8018f6a:	4618      	mov	r0, r3
 8018f6c:	f7e7 f93a 	bl	80001e4 <strlen>
 8018f70:	4603      	mov	r3, r0
 8018f72:	461a      	mov	r2, r3
 8018f74:	f107 0314 	add.w	r3, r7, #20
 8018f78:	4619      	mov	r1, r3
 8018f7a:	2000      	movs	r0, #0
 8018f7c:	f7ff ff58 	bl	8018e30 <_write>
#else
    puts((char*)buf);
    //write(0, buf, strlen((char *)buf));
#endif
}
 8018f80:	bf00      	nop
 8018f82:	3758      	adds	r7, #88	; 0x58
 8018f84:	46bd      	mov	sp, r7
 8018f86:	bd80      	pop	{r7, pc}

08018f88 <itm_debug1>:
{
 8018f88:	b580      	push	{r7, lr}
 8018f8a:	b086      	sub	sp, #24
 8018f8c:	af02      	add	r7, sp, #8
 8018f8e:	60f8      	str	r0, [r7, #12]
 8018f90:	60b9      	str	r1, [r7, #8]
 8018f92:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(msg, v, 0, 0, 1);
 8018f94:	4b08      	ldr	r3, [pc, #32]	; (8018fb8 <itm_debug1+0x30>)
 8018f96:	681a      	ldr	r2, [r3, #0]
 8018f98:	68fb      	ldr	r3, [r7, #12]
 8018f9a:	4013      	ands	r3, r2
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	d007      	beq.n	8018fb0 <itm_debug1+0x28>
 8018fa0:	2301      	movs	r3, #1
 8018fa2:	9300      	str	r3, [sp, #0]
 8018fa4:	2300      	movs	r3, #0
 8018fa6:	2200      	movs	r2, #0
 8018fa8:	6879      	ldr	r1, [r7, #4]
 8018faa:	68b8      	ldr	r0, [r7, #8]
 8018fac:	f7ff ff5c 	bl	8018e68 <_itm_debug3>
}
 8018fb0:	bf00      	nop
 8018fb2:	3710      	adds	r7, #16
 8018fb4:	46bd      	mov	sp, r7
 8018fb6:	bd80      	pop	{r7, pc}
 8018fb8:	200005a4 	.word	0x200005a4

08018fbc <mqf_len>:
	m->tail = 0;
	m->maxuse = 0;
}

int mqf_len(mqf_t *m)
{
 8018fbc:	b580      	push	{r7, lr}
 8018fbe:	b084      	sub	sp, #16
 8018fc0:	af00      	add	r7, sp, #0
 8018fc2:	6078      	str	r0, [r7, #4]
	int l;
	if (m->head >= m->tail) {
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	881b      	ldrh	r3, [r3, #0]
 8018fc8:	b29a      	uxth	r2, r3
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	885b      	ldrh	r3, [r3, #2]
 8018fce:	b29b      	uxth	r3, r3
 8018fd0:	429a      	cmp	r2, r3
 8018fd2:	d309      	bcc.n	8018fe8 <mqf_len+0x2c>
		l = (m->head - m->tail);
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	881b      	ldrh	r3, [r3, #0]
 8018fd8:	b29b      	uxth	r3, r3
 8018fda:	461a      	mov	r2, r3
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	885b      	ldrh	r3, [r3, #2]
 8018fe0:	b29b      	uxth	r3, r3
 8018fe2:	1ad3      	subs	r3, r2, r3
 8018fe4:	60fb      	str	r3, [r7, #12]
 8018fe6:	e00b      	b.n	8019000 <mqf_len+0x44>
	} else   {
		l = m->num + m->head - m->tail;
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	795b      	ldrb	r3, [r3, #5]
 8018fec:	461a      	mov	r2, r3
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	881b      	ldrh	r3, [r3, #0]
 8018ff2:	b29b      	uxth	r3, r3
 8018ff4:	4413      	add	r3, r2
 8018ff6:	687a      	ldr	r2, [r7, #4]
 8018ff8:	8852      	ldrh	r2, [r2, #2]
 8018ffa:	b292      	uxth	r2, r2
 8018ffc:	1a9b      	subs	r3, r3, r2
 8018ffe:	60fb      	str	r3, [r7, #12]
	}
	if (l<0) {
 8019000:	68fb      	ldr	r3, [r7, #12]
 8019002:	2b00      	cmp	r3, #0
 8019004:	da05      	bge.n	8019012 <mqf_len+0x56>
		itm_debug1(DBG_MSG, "big pb", 1);
 8019006:	2201      	movs	r2, #1
 8019008:	4904      	ldr	r1, [pc, #16]	; (801901c <mqf_len+0x60>)
 801900a:	2002      	movs	r0, #2
 801900c:	f7ff ffbc 	bl	8018f88 <itm_debug1>
		for (;;);
 8019010:	e7fe      	b.n	8019010 <mqf_len+0x54>
	}
	return l;
 8019012:	68fb      	ldr	r3, [r7, #12]
}
 8019014:	4618      	mov	r0, r3
 8019016:	3710      	adds	r7, #16
 8019018:	46bd      	mov	sp, r7
 801901a:	bd80      	pop	{r7, pc}
 801901c:	08019e6c 	.word	0x08019e6c

08019020 <mqf_qfull>:

void dump_msg(mqf_t *mq, int n);

void mqf_qfull(mqf_t *m, _UNUSED_ int t)
{
 8019020:	b580      	push	{r7, lr}
 8019022:	b084      	sub	sp, #16
 8019024:	af00      	add	r7, sp, #0
 8019026:	6078      	str	r0, [r7, #4]
 8019028:	6039      	str	r1, [r7, #0]
	itm_debug1(DBG_ERR|DBG_MSG, "w/full", 0);
 801902a:	2200      	movs	r2, #0
 801902c:	490e      	ldr	r1, [pc, #56]	; (8019068 <mqf_qfull+0x48>)
 801902e:	480f      	ldr	r0, [pc, #60]	; (801906c <mqf_qfull+0x4c>)
 8019030:	f7ff ffaa 	bl	8018f88 <itm_debug1>
	for (;;) {
		static uint8_t dmp = 0;
		if (dmp) {
 8019034:	4b0e      	ldr	r3, [pc, #56]	; (8019070 <mqf_qfull+0x50>)
 8019036:	781b      	ldrb	r3, [r3, #0]
 8019038:	2b00      	cmp	r3, #0
 801903a:	d0fb      	beq.n	8019034 <mqf_qfull+0x14>
			dmp = 0;
 801903c:	4b0c      	ldr	r3, [pc, #48]	; (8019070 <mqf_qfull+0x50>)
 801903e:	2200      	movs	r2, #0
 8019040:	701a      	strb	r2, [r3, #0]
			for (int i=0; i<mqf_len(m); i++) {
 8019042:	2300      	movs	r3, #0
 8019044:	60fb      	str	r3, [r7, #12]
 8019046:	e006      	b.n	8019056 <mqf_qfull+0x36>
				dump_msg(m, i);
 8019048:	68f9      	ldr	r1, [r7, #12]
 801904a:	6878      	ldr	r0, [r7, #4]
 801904c:	f7fd ffec 	bl	8017028 <dump_msg>
			for (int i=0; i<mqf_len(m); i++) {
 8019050:	68fb      	ldr	r3, [r7, #12]
 8019052:	3301      	adds	r3, #1
 8019054:	60fb      	str	r3, [r7, #12]
 8019056:	6878      	ldr	r0, [r7, #4]
 8019058:	f7ff ffb0 	bl	8018fbc <mqf_len>
 801905c:	4602      	mov	r2, r0
 801905e:	68fb      	ldr	r3, [r7, #12]
 8019060:	4293      	cmp	r3, r2
 8019062:	dbf1      	blt.n	8019048 <mqf_qfull+0x28>
	for (;;) {
 8019064:	e7e6      	b.n	8019034 <mqf_qfull+0x14>
 8019066:	bf00      	nop
 8019068:	08019e74 	.word	0x08019e74
 801906c:	80000002 	.word	0x80000002
 8019070:	20005620 	.word	0x20005620

08019074 <mqf_write>:
			}
		}
	}
}
int mqf_write(mqf_t *m, void *ptr)
{
 8019074:	b580      	push	{r7, lr}
 8019076:	b084      	sub	sp, #16
 8019078:	af00      	add	r7, sp, #0
 801907a:	6078      	str	r0, [r7, #4]
 801907c:	6039      	str	r1, [r7, #0]
	int l = mqf_len(m);
 801907e:	6878      	ldr	r0, [r7, #4]
 8019080:	f7ff ff9c 	bl	8018fbc <mqf_len>
 8019084:	60f8      	str	r0, [r7, #12]
	void Error_Handler(void);
	if (l<0) Error_Handler();
 8019086:	68fb      	ldr	r3, [r7, #12]
 8019088:	2b00      	cmp	r3, #0
 801908a:	da01      	bge.n	8019090 <mqf_write+0x1c>
 801908c:	f7e8 f99e 	bl	80013cc <Error_Handler>
	if (l > m->maxuse) m->maxuse = (int8_t) l;
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	799b      	ldrb	r3, [r3, #6]
 8019094:	461a      	mov	r2, r3
 8019096:	68fb      	ldr	r3, [r7, #12]
 8019098:	4293      	cmp	r3, r2
 801909a:	dd03      	ble.n	80190a4 <mqf_write+0x30>
 801909c:	68fb      	ldr	r3, [r7, #12]
 801909e:	b2da      	uxtb	r2, r3
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	719a      	strb	r2, [r3, #6]

    if (m->num == l) {
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	795b      	ldrb	r3, [r3, #5]
 80190a8:	461a      	mov	r2, r3
 80190aa:	68fb      	ldr	r3, [r7, #12]
 80190ac:	4293      	cmp	r3, r2
 80190ae:	d10b      	bne.n	80190c8 <mqf_write+0x54>
		itm_debug1(DBG_ERR|DBG_MSG, "w/full", 0);
 80190b0:	2200      	movs	r2, #0
 80190b2:	492a      	ldr	r1, [pc, #168]	; (801915c <mqf_write+0xe8>)
 80190b4:	482a      	ldr	r0, [pc, #168]	; (8019160 <mqf_write+0xec>)
 80190b6:	f7ff ff67 	bl	8018f88 <itm_debug1>
		mqf_qfull(m,0);
 80190ba:	2100      	movs	r1, #0
 80190bc:	6878      	ldr	r0, [r7, #4]
 80190be:	f7ff ffaf 	bl	8019020 <mqf_qfull>
        return -1;
 80190c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80190c6:	e045      	b.n	8019154 <mqf_write+0xe0>
    }
    if (m->num-1 == l) {
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	795b      	ldrb	r3, [r3, #5]
 80190cc:	3b01      	subs	r3, #1
 80190ce:	68fa      	ldr	r2, [r7, #12]
 80190d0:	429a      	cmp	r2, r3
 80190d2:	d111      	bne.n	80190f8 <mqf_write+0x84>
    	itm_debug1(DBG_MSG, "w/full1", m->silentdrop);
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	79db      	ldrb	r3, [r3, #7]
 80190d8:	461a      	mov	r2, r3
 80190da:	4922      	ldr	r1, [pc, #136]	; (8019164 <mqf_write+0xf0>)
 80190dc:	2002      	movs	r0, #2
 80190de:	f7ff ff53 	bl	8018f88 <itm_debug1>
    	if (!m->silentdrop) mqf_qfull(m,1);
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	79db      	ldrb	r3, [r3, #7]
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	d103      	bne.n	80190f2 <mqf_write+0x7e>
 80190ea:	2101      	movs	r1, #1
 80190ec:	6878      	ldr	r0, [r7, #4]
 80190ee:	f7ff ff97 	bl	8019020 <mqf_qfull>
        return -1;
 80190f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80190f6:	e02d      	b.n	8019154 <mqf_write+0xe0>
    }
	void *p = &(m->msgbuf[m->head*m->msgsiz]);
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	689b      	ldr	r3, [r3, #8]
 80190fc:	687a      	ldr	r2, [r7, #4]
 80190fe:	8812      	ldrh	r2, [r2, #0]
 8019100:	b292      	uxth	r2, r2
 8019102:	4611      	mov	r1, r2
 8019104:	687a      	ldr	r2, [r7, #4]
 8019106:	7912      	ldrb	r2, [r2, #4]
 8019108:	fb02 f201 	mul.w	r2, r2, r1
 801910c:	4413      	add	r3, r2
 801910e:	60bb      	str	r3, [r7, #8]
	memcpy(p, ptr, m->msgsiz);
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	791b      	ldrb	r3, [r3, #4]
 8019114:	461a      	mov	r2, r3
 8019116:	6839      	ldr	r1, [r7, #0]
 8019118:	68b8      	ldr	r0, [r7, #8]
 801911a:	f000 f8bb 	bl	8019294 <memcpy>
	//__barrier();
    if (m->head == m->num-1) {
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	881b      	ldrh	r3, [r3, #0]
 8019122:	b29b      	uxth	r3, r3
 8019124:	461a      	mov	r2, r3
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	795b      	ldrb	r3, [r3, #5]
 801912a:	3b01      	subs	r3, #1
 801912c:	429a      	cmp	r2, r3
 801912e:	d103      	bne.n	8019138 <mqf_write+0xc4>
        m->head = 0;
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	2200      	movs	r2, #0
 8019134:	801a      	strh	r2, [r3, #0]
 8019136:	e00c      	b.n	8019152 <mqf_write+0xde>
    } else {
        __sync_fetch_and_add(&(m->head), 1);
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	f3bf 8f5b 	dmb	ish
 801913e:	e8d3 2f5f 	ldrexh	r2, [r3]
 8019142:	f102 0201 	add.w	r2, r2, #1
 8019146:	e8c3 2f51 	strexh	r1, r2, [r3]
 801914a:	2900      	cmp	r1, #0
 801914c:	d1f7      	bne.n	801913e <mqf_write+0xca>
 801914e:	f3bf 8f5b 	dmb	ish
    }
	//AtomicInc(p->head);
	return 0;
 8019152:	2300      	movs	r3, #0
}
 8019154:	4618      	mov	r0, r3
 8019156:	3710      	adds	r7, #16
 8019158:	46bd      	mov	sp, r7
 801915a:	bd80      	pop	{r7, pc}
 801915c:	08019e74 	.word	0x08019e74
 8019160:	80000002 	.word	0x80000002
 8019164:	08019e7c 	.word	0x08019e7c

08019168 <mqf_read>:

int mqf_read(mqf_t *m, void *ptr)
{
 8019168:	b580      	push	{r7, lr}
 801916a:	b084      	sub	sp, #16
 801916c:	af00      	add	r7, sp, #0
 801916e:	6078      	str	r0, [r7, #4]
 8019170:	6039      	str	r1, [r7, #0]
	if (!mqf_len(m)) return -1;
 8019172:	6878      	ldr	r0, [r7, #4]
 8019174:	f7ff ff22 	bl	8018fbc <mqf_len>
 8019178:	4603      	mov	r3, r0
 801917a:	2b00      	cmp	r3, #0
 801917c:	d102      	bne.n	8019184 <mqf_read+0x1c>
 801917e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019182:	e02e      	b.n	80191e2 <mqf_read+0x7a>
    void *p = &(m->msgbuf[m->tail*m->msgsiz]);
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	689b      	ldr	r3, [r3, #8]
 8019188:	687a      	ldr	r2, [r7, #4]
 801918a:	8852      	ldrh	r2, [r2, #2]
 801918c:	b292      	uxth	r2, r2
 801918e:	4611      	mov	r1, r2
 8019190:	687a      	ldr	r2, [r7, #4]
 8019192:	7912      	ldrb	r2, [r2, #4]
 8019194:	fb02 f201 	mul.w	r2, r2, r1
 8019198:	4413      	add	r3, r2
 801919a:	60fb      	str	r3, [r7, #12]
    memcpy(ptr, p, m->msgsiz);
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	791b      	ldrb	r3, [r3, #4]
 80191a0:	461a      	mov	r2, r3
 80191a2:	68f9      	ldr	r1, [r7, #12]
 80191a4:	6838      	ldr	r0, [r7, #0]
 80191a6:	f000 f875 	bl	8019294 <memcpy>
    //__barrier();
    if (m->tail == m->num-1) {
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	885b      	ldrh	r3, [r3, #2]
 80191ae:	b29b      	uxth	r3, r3
 80191b0:	461a      	mov	r2, r3
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	795b      	ldrb	r3, [r3, #5]
 80191b6:	3b01      	subs	r3, #1
 80191b8:	429a      	cmp	r2, r3
 80191ba:	d103      	bne.n	80191c4 <mqf_read+0x5c>
        m->tail = 0;
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	2200      	movs	r2, #0
 80191c0:	805a      	strh	r2, [r3, #2]
 80191c2:	e00d      	b.n	80191e0 <mqf_read+0x78>
    } else {
        __sync_fetch_and_add(&(m->tail), 1);
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	3302      	adds	r3, #2
 80191c8:	f3bf 8f5b 	dmb	ish
 80191cc:	e8d3 2f5f 	ldrexh	r2, [r3]
 80191d0:	f102 0201 	add.w	r2, r2, #1
 80191d4:	e8c3 2f51 	strexh	r1, r2, [r3]
 80191d8:	2900      	cmp	r1, #0
 80191da:	d1f7      	bne.n	80191cc <mqf_read+0x64>
 80191dc:	f3bf 8f5b 	dmb	ish
    }
    return 0;
 80191e0:	2300      	movs	r3, #0
}
 80191e2:	4618      	mov	r0, r3
 80191e4:	3710      	adds	r7, #16
 80191e6:	46bd      	mov	sp, r7
 80191e8:	bd80      	pop	{r7, pc}
	...

080191ec <__errno>:
 80191ec:	4b01      	ldr	r3, [pc, #4]	; (80191f4 <__errno+0x8>)
 80191ee:	6818      	ldr	r0, [r3, #0]
 80191f0:	4770      	bx	lr
 80191f2:	bf00      	nop
 80191f4:	200005a8 	.word	0x200005a8

080191f8 <__libc_init_array>:
 80191f8:	b570      	push	{r4, r5, r6, lr}
 80191fa:	4e0d      	ldr	r6, [pc, #52]	; (8019230 <__libc_init_array+0x38>)
 80191fc:	4c0d      	ldr	r4, [pc, #52]	; (8019234 <__libc_init_array+0x3c>)
 80191fe:	1ba4      	subs	r4, r4, r6
 8019200:	10a4      	asrs	r4, r4, #2
 8019202:	2500      	movs	r5, #0
 8019204:	42a5      	cmp	r5, r4
 8019206:	d109      	bne.n	801921c <__libc_init_array+0x24>
 8019208:	4e0b      	ldr	r6, [pc, #44]	; (8019238 <__libc_init_array+0x40>)
 801920a:	4c0c      	ldr	r4, [pc, #48]	; (801923c <__libc_init_array+0x44>)
 801920c:	f000 f964 	bl	80194d8 <_init>
 8019210:	1ba4      	subs	r4, r4, r6
 8019212:	10a4      	asrs	r4, r4, #2
 8019214:	2500      	movs	r5, #0
 8019216:	42a5      	cmp	r5, r4
 8019218:	d105      	bne.n	8019226 <__libc_init_array+0x2e>
 801921a:	bd70      	pop	{r4, r5, r6, pc}
 801921c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019220:	4798      	blx	r3
 8019222:	3501      	adds	r5, #1
 8019224:	e7ee      	b.n	8019204 <__libc_init_array+0xc>
 8019226:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801922a:	4798      	blx	r3
 801922c:	3501      	adds	r5, #1
 801922e:	e7f2      	b.n	8019216 <__libc_init_array+0x1e>
 8019230:	0801be2c 	.word	0x0801be2c
 8019234:	0801be2c 	.word	0x0801be2c
 8019238:	0801be2c 	.word	0x0801be2c
 801923c:	0801be30 	.word	0x0801be30

08019240 <__itoa>:
 8019240:	1e93      	subs	r3, r2, #2
 8019242:	2b22      	cmp	r3, #34	; 0x22
 8019244:	b510      	push	{r4, lr}
 8019246:	460c      	mov	r4, r1
 8019248:	d904      	bls.n	8019254 <__itoa+0x14>
 801924a:	2300      	movs	r3, #0
 801924c:	700b      	strb	r3, [r1, #0]
 801924e:	461c      	mov	r4, r3
 8019250:	4620      	mov	r0, r4
 8019252:	bd10      	pop	{r4, pc}
 8019254:	2a0a      	cmp	r2, #10
 8019256:	d109      	bne.n	801926c <__itoa+0x2c>
 8019258:	2800      	cmp	r0, #0
 801925a:	da07      	bge.n	801926c <__itoa+0x2c>
 801925c:	232d      	movs	r3, #45	; 0x2d
 801925e:	700b      	strb	r3, [r1, #0]
 8019260:	4240      	negs	r0, r0
 8019262:	2101      	movs	r1, #1
 8019264:	4421      	add	r1, r4
 8019266:	f000 f8f7 	bl	8019458 <__utoa>
 801926a:	e7f1      	b.n	8019250 <__itoa+0x10>
 801926c:	2100      	movs	r1, #0
 801926e:	e7f9      	b.n	8019264 <__itoa+0x24>

08019270 <itoa>:
 8019270:	f7ff bfe6 	b.w	8019240 <__itoa>

08019274 <malloc>:
 8019274:	4b02      	ldr	r3, [pc, #8]	; (8019280 <malloc+0xc>)
 8019276:	4601      	mov	r1, r0
 8019278:	6818      	ldr	r0, [r3, #0]
 801927a:	f000 b86d 	b.w	8019358 <_malloc_r>
 801927e:	bf00      	nop
 8019280:	200005a8 	.word	0x200005a8

08019284 <free>:
 8019284:	4b02      	ldr	r3, [pc, #8]	; (8019290 <free+0xc>)
 8019286:	4601      	mov	r1, r0
 8019288:	6818      	ldr	r0, [r3, #0]
 801928a:	f000 b817 	b.w	80192bc <_free_r>
 801928e:	bf00      	nop
 8019290:	200005a8 	.word	0x200005a8

08019294 <memcpy>:
 8019294:	b510      	push	{r4, lr}
 8019296:	1e43      	subs	r3, r0, #1
 8019298:	440a      	add	r2, r1
 801929a:	4291      	cmp	r1, r2
 801929c:	d100      	bne.n	80192a0 <memcpy+0xc>
 801929e:	bd10      	pop	{r4, pc}
 80192a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80192a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80192a8:	e7f7      	b.n	801929a <memcpy+0x6>

080192aa <memset>:
 80192aa:	4402      	add	r2, r0
 80192ac:	4603      	mov	r3, r0
 80192ae:	4293      	cmp	r3, r2
 80192b0:	d100      	bne.n	80192b4 <memset+0xa>
 80192b2:	4770      	bx	lr
 80192b4:	f803 1b01 	strb.w	r1, [r3], #1
 80192b8:	e7f9      	b.n	80192ae <memset+0x4>
	...

080192bc <_free_r>:
 80192bc:	b538      	push	{r3, r4, r5, lr}
 80192be:	4605      	mov	r5, r0
 80192c0:	2900      	cmp	r1, #0
 80192c2:	d045      	beq.n	8019350 <_free_r+0x94>
 80192c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80192c8:	1f0c      	subs	r4, r1, #4
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	bfb8      	it	lt
 80192ce:	18e4      	addlt	r4, r4, r3
 80192d0:	f000 f900 	bl	80194d4 <__malloc_lock>
 80192d4:	4a1f      	ldr	r2, [pc, #124]	; (8019354 <_free_r+0x98>)
 80192d6:	6813      	ldr	r3, [r2, #0]
 80192d8:	4610      	mov	r0, r2
 80192da:	b933      	cbnz	r3, 80192ea <_free_r+0x2e>
 80192dc:	6063      	str	r3, [r4, #4]
 80192de:	6014      	str	r4, [r2, #0]
 80192e0:	4628      	mov	r0, r5
 80192e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80192e6:	f000 b8f6 	b.w	80194d6 <__malloc_unlock>
 80192ea:	42a3      	cmp	r3, r4
 80192ec:	d90c      	bls.n	8019308 <_free_r+0x4c>
 80192ee:	6821      	ldr	r1, [r4, #0]
 80192f0:	1862      	adds	r2, r4, r1
 80192f2:	4293      	cmp	r3, r2
 80192f4:	bf04      	itt	eq
 80192f6:	681a      	ldreq	r2, [r3, #0]
 80192f8:	685b      	ldreq	r3, [r3, #4]
 80192fa:	6063      	str	r3, [r4, #4]
 80192fc:	bf04      	itt	eq
 80192fe:	1852      	addeq	r2, r2, r1
 8019300:	6022      	streq	r2, [r4, #0]
 8019302:	6004      	str	r4, [r0, #0]
 8019304:	e7ec      	b.n	80192e0 <_free_r+0x24>
 8019306:	4613      	mov	r3, r2
 8019308:	685a      	ldr	r2, [r3, #4]
 801930a:	b10a      	cbz	r2, 8019310 <_free_r+0x54>
 801930c:	42a2      	cmp	r2, r4
 801930e:	d9fa      	bls.n	8019306 <_free_r+0x4a>
 8019310:	6819      	ldr	r1, [r3, #0]
 8019312:	1858      	adds	r0, r3, r1
 8019314:	42a0      	cmp	r0, r4
 8019316:	d10b      	bne.n	8019330 <_free_r+0x74>
 8019318:	6820      	ldr	r0, [r4, #0]
 801931a:	4401      	add	r1, r0
 801931c:	1858      	adds	r0, r3, r1
 801931e:	4282      	cmp	r2, r0
 8019320:	6019      	str	r1, [r3, #0]
 8019322:	d1dd      	bne.n	80192e0 <_free_r+0x24>
 8019324:	6810      	ldr	r0, [r2, #0]
 8019326:	6852      	ldr	r2, [r2, #4]
 8019328:	605a      	str	r2, [r3, #4]
 801932a:	4401      	add	r1, r0
 801932c:	6019      	str	r1, [r3, #0]
 801932e:	e7d7      	b.n	80192e0 <_free_r+0x24>
 8019330:	d902      	bls.n	8019338 <_free_r+0x7c>
 8019332:	230c      	movs	r3, #12
 8019334:	602b      	str	r3, [r5, #0]
 8019336:	e7d3      	b.n	80192e0 <_free_r+0x24>
 8019338:	6820      	ldr	r0, [r4, #0]
 801933a:	1821      	adds	r1, r4, r0
 801933c:	428a      	cmp	r2, r1
 801933e:	bf04      	itt	eq
 8019340:	6811      	ldreq	r1, [r2, #0]
 8019342:	6852      	ldreq	r2, [r2, #4]
 8019344:	6062      	str	r2, [r4, #4]
 8019346:	bf04      	itt	eq
 8019348:	1809      	addeq	r1, r1, r0
 801934a:	6021      	streq	r1, [r4, #0]
 801934c:	605c      	str	r4, [r3, #4]
 801934e:	e7c7      	b.n	80192e0 <_free_r+0x24>
 8019350:	bd38      	pop	{r3, r4, r5, pc}
 8019352:	bf00      	nop
 8019354:	20005624 	.word	0x20005624

08019358 <_malloc_r>:
 8019358:	b570      	push	{r4, r5, r6, lr}
 801935a:	1ccd      	adds	r5, r1, #3
 801935c:	f025 0503 	bic.w	r5, r5, #3
 8019360:	3508      	adds	r5, #8
 8019362:	2d0c      	cmp	r5, #12
 8019364:	bf38      	it	cc
 8019366:	250c      	movcc	r5, #12
 8019368:	2d00      	cmp	r5, #0
 801936a:	4606      	mov	r6, r0
 801936c:	db01      	blt.n	8019372 <_malloc_r+0x1a>
 801936e:	42a9      	cmp	r1, r5
 8019370:	d903      	bls.n	801937a <_malloc_r+0x22>
 8019372:	230c      	movs	r3, #12
 8019374:	6033      	str	r3, [r6, #0]
 8019376:	2000      	movs	r0, #0
 8019378:	bd70      	pop	{r4, r5, r6, pc}
 801937a:	f000 f8ab 	bl	80194d4 <__malloc_lock>
 801937e:	4a21      	ldr	r2, [pc, #132]	; (8019404 <_malloc_r+0xac>)
 8019380:	6814      	ldr	r4, [r2, #0]
 8019382:	4621      	mov	r1, r4
 8019384:	b991      	cbnz	r1, 80193ac <_malloc_r+0x54>
 8019386:	4c20      	ldr	r4, [pc, #128]	; (8019408 <_malloc_r+0xb0>)
 8019388:	6823      	ldr	r3, [r4, #0]
 801938a:	b91b      	cbnz	r3, 8019394 <_malloc_r+0x3c>
 801938c:	4630      	mov	r0, r6
 801938e:	f000 f83d 	bl	801940c <_sbrk_r>
 8019392:	6020      	str	r0, [r4, #0]
 8019394:	4629      	mov	r1, r5
 8019396:	4630      	mov	r0, r6
 8019398:	f000 f838 	bl	801940c <_sbrk_r>
 801939c:	1c43      	adds	r3, r0, #1
 801939e:	d124      	bne.n	80193ea <_malloc_r+0x92>
 80193a0:	230c      	movs	r3, #12
 80193a2:	6033      	str	r3, [r6, #0]
 80193a4:	4630      	mov	r0, r6
 80193a6:	f000 f896 	bl	80194d6 <__malloc_unlock>
 80193aa:	e7e4      	b.n	8019376 <_malloc_r+0x1e>
 80193ac:	680b      	ldr	r3, [r1, #0]
 80193ae:	1b5b      	subs	r3, r3, r5
 80193b0:	d418      	bmi.n	80193e4 <_malloc_r+0x8c>
 80193b2:	2b0b      	cmp	r3, #11
 80193b4:	d90f      	bls.n	80193d6 <_malloc_r+0x7e>
 80193b6:	600b      	str	r3, [r1, #0]
 80193b8:	50cd      	str	r5, [r1, r3]
 80193ba:	18cc      	adds	r4, r1, r3
 80193bc:	4630      	mov	r0, r6
 80193be:	f000 f88a 	bl	80194d6 <__malloc_unlock>
 80193c2:	f104 000b 	add.w	r0, r4, #11
 80193c6:	1d23      	adds	r3, r4, #4
 80193c8:	f020 0007 	bic.w	r0, r0, #7
 80193cc:	1ac3      	subs	r3, r0, r3
 80193ce:	d0d3      	beq.n	8019378 <_malloc_r+0x20>
 80193d0:	425a      	negs	r2, r3
 80193d2:	50e2      	str	r2, [r4, r3]
 80193d4:	e7d0      	b.n	8019378 <_malloc_r+0x20>
 80193d6:	428c      	cmp	r4, r1
 80193d8:	684b      	ldr	r3, [r1, #4]
 80193da:	bf16      	itet	ne
 80193dc:	6063      	strne	r3, [r4, #4]
 80193de:	6013      	streq	r3, [r2, #0]
 80193e0:	460c      	movne	r4, r1
 80193e2:	e7eb      	b.n	80193bc <_malloc_r+0x64>
 80193e4:	460c      	mov	r4, r1
 80193e6:	6849      	ldr	r1, [r1, #4]
 80193e8:	e7cc      	b.n	8019384 <_malloc_r+0x2c>
 80193ea:	1cc4      	adds	r4, r0, #3
 80193ec:	f024 0403 	bic.w	r4, r4, #3
 80193f0:	42a0      	cmp	r0, r4
 80193f2:	d005      	beq.n	8019400 <_malloc_r+0xa8>
 80193f4:	1a21      	subs	r1, r4, r0
 80193f6:	4630      	mov	r0, r6
 80193f8:	f000 f808 	bl	801940c <_sbrk_r>
 80193fc:	3001      	adds	r0, #1
 80193fe:	d0cf      	beq.n	80193a0 <_malloc_r+0x48>
 8019400:	6025      	str	r5, [r4, #0]
 8019402:	e7db      	b.n	80193bc <_malloc_r+0x64>
 8019404:	20005624 	.word	0x20005624
 8019408:	20005628 	.word	0x20005628

0801940c <_sbrk_r>:
 801940c:	b538      	push	{r3, r4, r5, lr}
 801940e:	4c06      	ldr	r4, [pc, #24]	; (8019428 <_sbrk_r+0x1c>)
 8019410:	2300      	movs	r3, #0
 8019412:	4605      	mov	r5, r0
 8019414:	4608      	mov	r0, r1
 8019416:	6023      	str	r3, [r4, #0]
 8019418:	f7e8 fc40 	bl	8001c9c <_sbrk>
 801941c:	1c43      	adds	r3, r0, #1
 801941e:	d102      	bne.n	8019426 <_sbrk_r+0x1a>
 8019420:	6823      	ldr	r3, [r4, #0]
 8019422:	b103      	cbz	r3, 8019426 <_sbrk_r+0x1a>
 8019424:	602b      	str	r3, [r5, #0]
 8019426:	bd38      	pop	{r3, r4, r5, pc}
 8019428:	2000914c 	.word	0x2000914c

0801942c <strncpy>:
 801942c:	b570      	push	{r4, r5, r6, lr}
 801942e:	3901      	subs	r1, #1
 8019430:	4604      	mov	r4, r0
 8019432:	b902      	cbnz	r2, 8019436 <strncpy+0xa>
 8019434:	bd70      	pop	{r4, r5, r6, pc}
 8019436:	4623      	mov	r3, r4
 8019438:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801943c:	f803 5b01 	strb.w	r5, [r3], #1
 8019440:	1e56      	subs	r6, r2, #1
 8019442:	b92d      	cbnz	r5, 8019450 <strncpy+0x24>
 8019444:	4414      	add	r4, r2
 8019446:	42a3      	cmp	r3, r4
 8019448:	d0f4      	beq.n	8019434 <strncpy+0x8>
 801944a:	f803 5b01 	strb.w	r5, [r3], #1
 801944e:	e7fa      	b.n	8019446 <strncpy+0x1a>
 8019450:	461c      	mov	r4, r3
 8019452:	4632      	mov	r2, r6
 8019454:	e7ed      	b.n	8019432 <strncpy+0x6>
	...

08019458 <__utoa>:
 8019458:	b5f0      	push	{r4, r5, r6, r7, lr}
 801945a:	4b1d      	ldr	r3, [pc, #116]	; (80194d0 <__utoa+0x78>)
 801945c:	b08b      	sub	sp, #44	; 0x2c
 801945e:	4605      	mov	r5, r0
 8019460:	460c      	mov	r4, r1
 8019462:	466e      	mov	r6, sp
 8019464:	f103 0c20 	add.w	ip, r3, #32
 8019468:	6818      	ldr	r0, [r3, #0]
 801946a:	6859      	ldr	r1, [r3, #4]
 801946c:	4637      	mov	r7, r6
 801946e:	c703      	stmia	r7!, {r0, r1}
 8019470:	3308      	adds	r3, #8
 8019472:	4563      	cmp	r3, ip
 8019474:	463e      	mov	r6, r7
 8019476:	d1f7      	bne.n	8019468 <__utoa+0x10>
 8019478:	6818      	ldr	r0, [r3, #0]
 801947a:	791b      	ldrb	r3, [r3, #4]
 801947c:	713b      	strb	r3, [r7, #4]
 801947e:	1e93      	subs	r3, r2, #2
 8019480:	2b22      	cmp	r3, #34	; 0x22
 8019482:	6038      	str	r0, [r7, #0]
 8019484:	f04f 0300 	mov.w	r3, #0
 8019488:	d904      	bls.n	8019494 <__utoa+0x3c>
 801948a:	7023      	strb	r3, [r4, #0]
 801948c:	461c      	mov	r4, r3
 801948e:	4620      	mov	r0, r4
 8019490:	b00b      	add	sp, #44	; 0x2c
 8019492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019494:	1e66      	subs	r6, r4, #1
 8019496:	fbb5 f0f2 	udiv	r0, r5, r2
 801949a:	af0a      	add	r7, sp, #40	; 0x28
 801949c:	fb02 5510 	mls	r5, r2, r0, r5
 80194a0:	443d      	add	r5, r7
 80194a2:	1c59      	adds	r1, r3, #1
 80194a4:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80194a8:	f806 5f01 	strb.w	r5, [r6, #1]!
 80194ac:	4605      	mov	r5, r0
 80194ae:	b968      	cbnz	r0, 80194cc <__utoa+0x74>
 80194b0:	5460      	strb	r0, [r4, r1]
 80194b2:	4423      	add	r3, r4
 80194b4:	4622      	mov	r2, r4
 80194b6:	1b19      	subs	r1, r3, r4
 80194b8:	1b10      	subs	r0, r2, r4
 80194ba:	4281      	cmp	r1, r0
 80194bc:	dde7      	ble.n	801948e <__utoa+0x36>
 80194be:	7811      	ldrb	r1, [r2, #0]
 80194c0:	7818      	ldrb	r0, [r3, #0]
 80194c2:	f802 0b01 	strb.w	r0, [r2], #1
 80194c6:	f803 1901 	strb.w	r1, [r3], #-1
 80194ca:	e7f4      	b.n	80194b6 <__utoa+0x5e>
 80194cc:	460b      	mov	r3, r1
 80194ce:	e7e2      	b.n	8019496 <__utoa+0x3e>
 80194d0:	0801bdfc 	.word	0x0801bdfc

080194d4 <__malloc_lock>:
 80194d4:	4770      	bx	lr

080194d6 <__malloc_unlock>:
 80194d6:	4770      	bx	lr

080194d8 <_init>:
 80194d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194da:	bf00      	nop
 80194dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80194de:	bc08      	pop	{r3}
 80194e0:	469e      	mov	lr, r3
 80194e2:	4770      	bx	lr

080194e4 <_fini>:
 80194e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194e6:	bf00      	nop
 80194e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80194ea:	bc08      	pop	{r3}
 80194ec:	469e      	mov	lr, r3
 80194ee:	4770      	bx	lr
