#


%prefix "msgdef"

%value "config_node_t *"
%auxil "system_t *"

%header {
#include <stdio.h>
#include <stdlib.h>
#include "system.h"
}

%source{
#define PCC_ERROR(auxil) system__handle_syntax_error(auxil, SYNTAX_ERROR_UNKNOWN, range__void()) /* <-- caused by incompleteness of the grammar */
#define PCC_GETCHAR(auxil) system__read_source_file(auxil)
#define PCC_MALLOC(auxil, size) system__allocate_memory(auxil, size)
#define PCC_REALLOC(auxil, ptr, size) system__reallocate_memory(auxil, ptr, size)
#define PCC_FREE(auxil, ptr) system__deallocate_memory(auxil, ptr)
 
static const char *dbg_str[] = { "EVAL_", "MATCH", "ABAND" };

#define PCC_DEBUG(auxil, event, rule, level, pos, buffer, length) do {\
     if ((1)) fprintf(stdout, "%*s%s %s @%d [%.*s]\n", (int)(level * 2), "", dbg_str[event], rule, (int)pos, (int)length,  buffer); fflush(stdout); \
} while(0)


}

msgdef
    <- linelist _ end_of_file

linelist
    <- line _ msgdef 
     / line

line
    <-
       _ '#' ( !EOL . )* EOL
     / _ kw_start _ integer (comment)? _ EOL
     / _ identifier _ (',')? _ comment? EOL
     / _ EOL

comment
    <-
       _ '//' ( !EOL . )* EOL



O <- [0-7]
D <- [0-9]
X <- [0-9a-fA-F]
L <- [a-zA-Z_]

integer
   <- '0'[xX]X+
    {
        $$ = create_config_node_intstr(auxil, CONFIG_NODE_INT, range__new($0s, $0e), 16);
    }
    / '0'O+
    {
        $$ = create_config_node_intstr(auxil, CONFIG_NODE_INT, range__new($0s, $0e), 8);
    }
    / !'0' D+
    {
        $$ = create_config_node_intstr(auxil, CONFIG_NODE_INT, range__new($0s, $0e), 10);
    }
    / D !D
    {
        $$ = create_config_node_intstr(auxil, CONFIG_NODE_INT, range__new($0s, $0e), 10);
    }
    / '-'D+
    {
        $$ = create_config_node_intstr(auxil, CONFIG_NODE_INT, range__new($0s, $0e), 10);
    }


identifier
   <- !keyword L(L/D)*
    {
        $$ = create_config_node_text(auxil, CONFIG_NODE_IDENT, range__new($0s, $0e));
    }

keyword
   <- kw_start


kw_start       <- 'start'  !(L/D)

EOL    <- '\n' / '\r\n' / '\r' 
_      <- [ \t]*

end_of_file <- !.
